{"sha": "c245d9e980946d4472e9c830a109db77e1bcb038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDVkOWU5ODA5NDZkNDQ3MmU5YzgzMGExMDlkYjc3ZTFiY2IwMzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T00:56:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T00:56:45Z"}, "message": "Revert \"stdlib: Stop incurring vtable dispatch costs when hashmaps are used\"\n\nThis reverts commit f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed.", "tree": {"sha": "5a29ce4c40b546c81701b48fe8d1acd1f2003022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a29ce4c40b546c81701b48fe8d1acd1f2003022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c245d9e980946d4472e9c830a109db77e1bcb038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c245d9e980946d4472e9c830a109db77e1bcb038", "html_url": "https://github.com/rust-lang/rust/commit/c245d9e980946d4472e9c830a109db77e1bcb038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c245d9e980946d4472e9c830a109db77e1bcb038/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "html_url": "https://github.com/rust-lang/rust/commit/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed"}], "stats": {"total": 142, "additions": 47, "deletions": 95}, "files": [{"sha": "a4816fedf970e9eb08d740d07669c0140b5e757c", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -16,7 +16,6 @@ import io::writer_util;\n import std::json;\n import result;\n import std::map;\n-import std::map::hashmap;\n import std::os;\n import std::run;\n import str;"}, {"sha": "51069cf9729d0f2c873b32a8f8e353f06a4b05c7", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -5,7 +5,6 @@ import result::{ok, err};\n import io;\n import io::{reader_util, writer_util};\n import map;\n-import map::hashmap;\n \n export json;\n export error;\n@@ -37,7 +36,7 @@ enum json {\n     /* Variant: list */\n     list([json]),\n     /* Variant: dict */\n-    dict(map::hashmap<str,json>),\n+    dict(map::map<str,json>),\n     /* Variant: null */\n     null,\n }"}, {"sha": "c2320e93f29b9baf6bbacda8b3ddaae8be74c392", "filename": "src/libstd/map.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,10 +4,6 @@ Module: map\n A map type\n */\n \n-import chained::hashmap;\n-export hashmap, hashfn, eqfn, set, map, chained, mk_hashmap, new_str_hash;\n-export new_bytes_hash, new_int_hash, new_uint_hash, set_add;\n-\n /* Section: Types */\n \n /*\n@@ -27,13 +23,14 @@ Equality\n type eqfn<K> = fn@(K, K) -> bool;\n \n /*\n-Type: set\n+Type: hashset\n \n-A convenience type to treat a hashmap as a set\n+A convenience type to treat a map as a set\n */\n-type set<K> = hashmap<K, ()>;\n+type set<K> = map<K, ()>;\n \n-type hashmap<K, V> = chained::t<K, V>;\n+// Temporary alias to make migration easier\n+type hashmap<K, V> = map<K, V>;\n \n /*\n IFace: map\n@@ -106,7 +103,8 @@ iface map<K: copy, V: copy> {\n }\n \n // FIXME: package this up and export it as a datatype usable for\n-// external code that doesn't want to pay the cost of a box.\n+// external code that doesn't want to pay the cost of a box and vtable\n+// lookups.\n mod chained {\n     type entry<K, V> = {\n         hash: uint,\n@@ -120,8 +118,8 @@ mod chained {\n         absent\n     }\n \n-    type t<K, V> = @{\n-        mutable count: uint,\n+    type t<K, V> = {\n+        mutable size: uint,\n         mutable chains: [mutable chain<K,V>],\n         hasher: hashfn<K>,\n         eqer: eqfn<K>\n@@ -187,7 +185,7 @@ mod chained {\n         let hash = tbl.hasher(k);\n         alt search_tbl(tbl, k, hash) {\n           not_found {\n-            tbl.count += 1u;\n+            tbl.size += 1u;\n             let idx = hash % vec::len(tbl.chains);\n             let old_chain = tbl.chains[idx];\n             tbl.chains[idx] = present(@{\n@@ -231,13 +229,13 @@ mod chained {\n           }\n \n           found_first(idx, entry) {\n-            tbl.count -= 1u;\n+            tbl.size -= 1u;\n             tbl.chains[idx] = entry.next;\n             ret core::option::some(entry.value);\n           }\n \n           found_after(eprev, entry) {\n-            tbl.count -= 1u;\n+            tbl.size -= 1u;\n             eprev.next = entry.next;\n             ret core::option::some(entry.value);\n           }\n@@ -293,12 +291,12 @@ mod chained {\n         }\n     }\n \n-    impl hashmap<K: copy, V: copy> of map<K, V> for t<K, V> {\n-        fn size() -> uint { self.count }\n+    impl <K: copy, V: copy> of map<K, V> for t<K, V> {\n+        fn size() -> uint { self.size }\n \n         fn insert(k: K, v: V) -> bool {\n             let nchains = vec::len(self.chains);\n-            let load = {num: (self.count + 1u) as int, den: nchains as int};\n+            let load = {num: (self.size + 1u) as int, den: nchains as int};\n             // Structural consts would be nice. This is a const 3/4\n             // load factor that we compare against.\n             if !util::rational_leq(load, {num:3, den:4}) { rehash(self); }\n@@ -320,13 +318,13 @@ mod chained {\n         fn values(blk: fn(V)) { items(self) { |_k, v| blk(v) } }\n     }\n \n-    fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> t<K,V> {\n+    fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> map<K,V> {\n         let initial_capacity: uint = 32u; // 2^5\n-        let slf: t<K, V> = @{mutable count: 0u,\n-                             mutable chains: chains(initial_capacity),\n-                             hasher: hasher,\n-                             eqer: eqer};\n-        slf\n+        let slf: t<K, V> = {mutable size: 0u,\n+                            mutable chains: chains(initial_capacity),\n+                            hasher: hasher,\n+                            eqer: eqer};\n+        slf as map::<K, V>\n     }\n }\n \n@@ -341,7 +339,7 @@ hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n fn mk_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n-        -> hashmap<K, V> {\n+    -> map<K, V> {\n     chained::mk(hasher, eqer)\n }\n \n@@ -350,7 +348,7 @@ Function: new_str_hash\n \n Construct a hashmap for string keys\n */\n-fn new_str_hash<V: copy>() -> hashmap<str, V> {\n+fn new_str_hash<V: copy>() -> map<str, V> {\n     ret mk_hashmap(str::hash, str::eq);\n }\n \n@@ -359,7 +357,7 @@ Function: new_bytes_hash\n \n Construct a hashmap for byte string keys\n */\n-fn new_bytes_hash<V: copy>() -> hashmap<[u8], V> {\n+fn new_bytes_hash<V: copy>() -> map<[u8], V> {\n     ret mk_hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n@@ -368,7 +366,7 @@ Function: new_int_hash\n \n Construct a hashmap for int keys\n */\n-fn new_int_hash<V: copy>() -> hashmap<int, V> {\n+fn new_int_hash<V: copy>() -> map<int, V> {\n     fn hash_int(&&x: int) -> uint { int::hash(x) }\n     fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n     ret mk_hashmap(hash_int, eq_int);\n@@ -379,7 +377,7 @@ Function: new_uint_hash\n \n Construct a hashmap for uint keys\n */\n-fn new_uint_hash<V: copy>() -> hashmap<uint, V> {\n+fn new_uint_hash<V: copy>() -> map<uint, V> {\n     fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n     fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n     ret mk_hashmap(hash_uint, eq_uint);"}, {"sha": "875656d3a2290603632df39366db305178fec402", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,4 +1,3 @@\n-import map::hashmap;\n export loop_new, loop_delete, run, close, run_in_bg;\n export async_init, async_send;\n export timer_init, timer_start, timer_stop;\n@@ -130,17 +129,17 @@ fn loop_new() -> uv_loop unsafe {\n             process_operation);\n \n         // all state goes here\n-        let handles: map::hashmap<[u8], *ctypes::void> =\n+        let handles: map::map<[u8], *ctypes::void> =\n             map::new_bytes_hash();\n-        let id_to_handle: map::hashmap<[u8], uv_handle> =\n+        let id_to_handle: map::map<[u8], uv_handle> =\n             map::new_bytes_hash();\n-        let after_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n+        let after_cbs: map::map<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n-        let close_callbacks: map::hashmap<[u8], fn~()> =\n+        let close_callbacks: map::map<[u8], fn~()> =\n             map::new_bytes_hash();\n-        let async_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n+        let async_cbs: map::map<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n-        let timer_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n+        let timer_cbs: map::map<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n \n         // the main loop that this task blocks on."}, {"sha": "63062986363e26badb4f5d496c37259bb80c4b78", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -7,7 +7,6 @@ import middle::ty;\n import metadata::{encoder, cstore};\n import middle::trans::common::crate_ctxt;\n import std::fs;\n-import std::map::hashmap;\n import std::run;\n import std::sha1::sha1;\n import syntax::ast;"}, {"sha": "cc74efa82cfd579a5fcd84c3355545a1a42e1a09", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,5 +1,4 @@\n import std::{os, fs, os_fs, map};\n-import std::map::hashmap;\n import metadata::cstore;\n import driver::session;\n import util::filesearch;"}, {"sha": "4f4fecbe40957fb8867b6d4858f551a3b4764e49", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n // Functions dealing with attributes and meta_items\n \n import std::map;\n-import std::map::hashmap;\n import syntax::{ast, ast_util};\n import driver::session::session;\n "}, {"sha": "2dc2945d8de8af643b812bfb7c4ccf4d725ce369", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,5 +1,4 @@\n import str::sbuf;\n-import std::map::hashmap;\n \n import ctypes::{c_int, c_uint, unsigned, longlong, ulonglong};\n "}, {"sha": "87e2138a2476ac420074c3e9d23bf29c78cbdf1d", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,15 +4,15 @@ import syntax::visit;\n import syntax::ast_util;\n import syntax::ast_util::inlined_item_methods;\n import syntax::codemap::span;\n+import std::map::map;\n+import std::smallintmap::map;\n import std::ebml;\n import std::ebml::writer;\n-import std::map::hashmap;\n import std::serialization;\n import std::serialization::serializer;\n import std::serialization::deserializer;\n import std::serialization::serializer_helpers;\n import std::serialization::deserializer_helpers;\n-import std::smallintmap::map;\n import middle::trans::common::maps;\n import middle::{ty, typeck, last_use, ast_map};\n import middle::typeck::method_origin;\n@@ -922,4 +922,4 @@ fn test_more() {\n             ret z;\n         }\n     });\n-}\n+}\n\\ No newline at end of file"}, {"sha": "dc41753d7820daf608935d58b0807bf4bacc6eb4", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -6,7 +6,6 @@ import middle::{ty, ast_map};\n import option::{some, none};\n import driver::session;\n import middle::trans::common::maps;\n-import std::map::hashmap;\n \n export get_symbol;\n export get_type_param_count;"}, {"sha": "e9dd1a010c5f8e6d83a3c30ee41769222a7f1f8d", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -2,7 +2,6 @@\n // crates and libraries\n \n import std::map;\n-import std::map::hashmap;\n import syntax::ast;\n import util::common::*;\n "}, {"sha": "196789ee58cb211fa45652ec60b2608d62bc00e2", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n // Decoding metadata from a single crate's metadata\n \n import std::{ebml, map, io};\n-import std::map::hashmap;\n import io::writer_util;\n import syntax::{ast, ast_util};\n import driver::session::session;"}, {"sha": "ab6a8dea04caaff306bd020463a3301a52088243", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n // Metadata encoding\n \n import std::{io, ebml, map, list};\n-import std::map::hashmap;\n import io::writer_util;\n import ebml::writer;\n import syntax::ast::*;"}, {"sha": "e85d4098fde6904a155dce2de8a30f6c58057fc4", "filename": "src/rustc/metadata/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Freachable.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -10,11 +10,10 @@ import syntax::ast::*;\n import syntax::visit;\n import syntax::ast_util::def_id_of_def;\n import front::attr;\n-import std::map::hashmap;\n \n export map, find_reachable;\n \n-type map = std::map::hashmap<node_id, ()>;\n+type map = std::map::map<node_id, ()>;\n \n type ctx = {ccx: middle::trans::common::crate_ctxt,\n             rmap: map};"}, {"sha": "5d97777c0fb6efc25119a893370c35d09319e2da", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -5,7 +5,6 @@ import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::respan;\n import middle::ty;\n-import std::map::hashmap;\n \n export parse_ty_data, parse_def_id;\n export parse_bounds_data;"}, {"sha": "cb0785b4df18f6b6bf96699074c61fe6ec2ab1d8", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -5,7 +5,6 @@ import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n import std::list;\n-import std::map::hashmap;\n import std::util::unreachable;\n import option::is_none;\n import list::list;"}, {"sha": "3ff8a96f287d7aa6d17979689054e4e311895cf9", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,5 +1,4 @@\n import std::map;\n-import std::map::hashmap;\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::inlined_item_methods;\n@@ -36,7 +35,7 @@ enum ast_node {\n     node_res_ctor(@item),\n }\n \n-type map = std::map::hashmap<node_id, ast_node>;\n+type map = std::map::map<node_id, ast_node>;\n type ctx = {map: map, mutable path: path, mutable local_id: uint};\n type vt = visit::vt<ctx>;\n "}, {"sha": "3ec56c620776befd46695cd21b6f74190c296e93", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n import syntax::{ast, ast_util};\n import driver::session::session;\n import std::map;\n-import std::map::hashmap;\n \n export capture_mode;\n export capture_var;"}, {"sha": "6d55aed095e9fc49633e391ccf0778d41281d3a4", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -8,7 +8,6 @@ import syntax::visit;\n import driver::session::session;\n import middle::ty;\n import middle::ty::*;\n-import std::map::hashmap;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, (), visit::mk_vt(@{"}, {"sha": "d04abffb3201dc297bc2d76ec6ac85c6f1f6c767", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n import syntax::ast::*;\n import syntax::{visit, ast_util};\n import driver::session::session;\n-import std::map::hashmap;\n \n fn check_crate(sess: session, crate: @crate, method_map: typeck::method_map) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{"}, {"sha": "c415f5deb057afd4462cd9ca20875af4c3770678", "filename": "src/rustc/middle/fn_usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffn_usage.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,4 +1,3 @@\n-import std::map::hashmap;\n import syntax::ast;\n import syntax::visit;\n import syntax::print::pprust::expr_to_str;"}, {"sha": "e7999f04caddbf65bf89ee7b3be43663d7cf4494", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -3,7 +3,6 @@ import syntax::ast::*;\n import syntax::codemap::span;\n import ty::{kind, kind_copyable, kind_sendable, kind_noncopyable};\n import driver::session::session;\n-import std::map::hashmap;\n \n // Kind analysis pass. There are three kinds:\n //"}, {"sha": "12ffdfccb416a6a102df0e4ec795383febea4999", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,7 +4,6 @@ import syntax::codemap::span;\n import std::list::{is_not_empty, list, nil, cons, tail};\n import std::util::unreachable;\n import std::list;\n-import std::map::hashmap;\n \n // Last use analysis pass.\n //"}, {"sha": "f46a50ea4a1914c1f2591bf1acbc22303327a326", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -3,7 +3,6 @@ import middle::ty::ctxt;\n import syntax::{ast, visit};\n import front::attr;\n import std::io;\n-import std::map::hashmap;\n import io::writer_util;\n \n enum option {"}, {"sha": "bf51f7d3764d61febdaf20a90ebcbef4946af134", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -2,7 +2,6 @@ import syntax::ast::*;\n import syntax::visit;\n import syntax::ast_util;\n import driver::session::session;\n-import std::map::hashmap;\n \n enum deref_t { unbox(bool), field, index, }\n "}, {"sha": "1a6856e36bfdab9fbedacb04c5f84ab37ad2c13b", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,7 +4,6 @@ import syntax::ast_util::respan;\n import syntax::fold;\n import syntax::fold::*;\n import syntax::codemap::span;\n-import std::map::hashmap;\n \n export walk_pat;\n export pat_binding_ids, pat_bindings, pat_id_map;"}, {"sha": "6ada125be07b528ac579756c8e5db26cb872500d", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -12,7 +12,6 @@ import syntax::codemap::span;\n import syntax::print::pprust::pat_to_str;\n import back::abi;\n import resolve::def_map;\n-import std::map::hashmap;\n \n import common::*;\n "}, {"sha": "f11dbae04b8049b8a0d38a313f5ee6d3c2372443", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -18,7 +18,6 @@ import util::ppaux::ty_to_str;\n import shape::{size_of};\n import ast_map::{path, path_mod, path_name};\n import driver::session::session;\n-import std::map::hashmap;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "e4e1859e87d4cff2696ab4d9a7a44854746336e9", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -11,7 +11,6 @@ import lib::llvm::llvm;\n import lib::llvm::{ValueRef, TypeRef};\n import lib::llvm::llvm::LLVMGetParam;\n import ast_map::{path, path_mod, path_name};\n-import std::map::hashmap;\n \n // Translation functionality related to impls and ifaces\n //"}, {"sha": "26621158f7779c65db5de5030b7a707b9ea4718c", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -9,7 +9,6 @@ import common::*;\n import build::*;\n import base::*;\n import type_of::*;\n-import std::map::hashmap;\n \n export link_name, trans_native_mod, register_crust_fn, trans_crust_fn;\n \n@@ -359,4 +358,4 @@ fn register_crust_fn(ccx: crate_ctxt, sp: span,\n     let llfty = T_fn(llargtys, llretty);\n     register_fn_fuller(ccx, sp, path, \"crust fn\", node_id,\n                        t, lib::llvm::CCallConv, llfty)\n-}\n+}\n\\ No newline at end of file"}, {"sha": "e613fdf3cd9f3a00425516f7652c50538367a7dc", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -3,7 +3,6 @@ import lib::llvm::{TypeRef};\n import syntax::ast;\n import lib::llvm::llvm;\n import driver::session::session;\n-import std::map::hashmap;\n \n import ty::*;\n "}, {"sha": "89fce0ddb705e5f04ecde15e1e06dcd62e563927", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,7 +4,7 @@ import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::{visit, codemap};\n import codemap::span;\n-import std::map::{hashmap, new_int_hash};\n+import std::map::{new_int_hash};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      poststate, precond, postcond,"}, {"sha": "6acb23d906aa851ae3d389ccc98c38892e929d80", "filename": "src/rustc/middle/tstate/bitvectors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -12,7 +12,6 @@ import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n import tritv::*;\n import util::common::*;\n import driver::session::session;\n-import std::map::hashmap;\n \n fn bit_num(fcx: fn_ctxt, c: tsconstr) -> uint {\n     let d = tsconstr_to_def_id(c);"}, {"sha": "357d43edc8e871c2b86f1f6b61097a01ab6ee318", "filename": "src/rustc/middle/tstate/ck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -14,7 +14,6 @@ import collect_locals::mk_f_to_fn_info;\n import pre_post_conditions::fn_pre_post;\n import states::find_pre_post_state_fn;\n import driver::session::session;\n-import std::map::hashmap;\n \n fn check_unused_vars(fcx: fn_ctxt) {\n "}, {"sha": "9b39814e141fb49d75a62fe5d96ded18c723478d", "filename": "src/rustc/middle/tstate/collect_locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -8,7 +8,6 @@ import syntax::codemap::span;\n import syntax::ast_util::respan;\n import driver::session::session;\n import aux::*;\n-import std::map::hashmap;\n \n type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n "}, {"sha": "6c80234a54bc389fd5cca1a0112c20a107ef6b60", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -13,7 +13,6 @@ import util::common::{new_def_hash, log_expr, field_exprs,\n                       has_nonlocal_exits, log_stmt};\n import syntax::codemap::span;\n import driver::session::session;\n-import std::map::hashmap;\n \n fn find_pre_post_mod(_m: _mod) -> _mod {\n     #debug(\"implement find_pre_post_mod!\");"}, {"sha": "adb8624804786e4f6b42fedf0b2f5cccf135c4e5", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -10,7 +10,6 @@ import syntax::codemap::span;\n import middle::ty::{expr_ty, type_is_bot};\n import util::common::*;\n import driver::session::session;\n-import std::map::hashmap;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     alt t {"}, {"sha": "1d689184f59061da593bf271b05437be0e7e3a00", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -7,7 +7,6 @@\n      Rustdoc from its non-sendableness.\"\n )];\n \n-import std::map::hashmap;\n import rustc::driver::session;\n import rustc::driver::driver;\n import rustc::driver::diagnostic;"}, {"sha": "237a8d7de7733fdde1c73241e67319aba683ead2", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -8,7 +8,6 @@\n \n import rustc::syntax::ast;\n import rustc::middle::ast_map;\n-import std::map::hashmap;\n \n export mk_pass;\n \n@@ -475,4 +474,4 @@ mod test {\n             run(srv, doc)\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "fcd24bebbb4a84bcddbc9a922d2fa6c4863f73fa", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -3,7 +3,6 @@\n import rustc::syntax::ast;\n import rustc::syntax::ast_util;\n import rustc::middle::ast_map;\n-import std::map::hashmap;\n \n export mk_pass;\n \n@@ -254,4 +253,4 @@ mod test {\n             run(srv, doc)\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "ddbbf3d96d4771439dc86cc6d56de6b3a91547e5", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,7 +1,6 @@\n #[doc = \"Finds docs for reexported items and duplicates them\"];\n \n import std::map;\n-import std::map::hashmap;\n import rustc::syntax::ast;\n import rustc::syntax::ast_util;\n import rustc::util::common;"}, {"sha": "a7af2bb13bac284f1d5e4ded3cdc80de66dd09a9", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -4,7 +4,6 @@\n import rustc::syntax::ast;\n import rustc::syntax::print::pprust;\n import rustc::middle::ast_map;\n-import std::map::hashmap;\n \n export mk_pass;\n "}, {"sha": "90db74c403903727abe4722345220f1b0a15ade3", "filename": "src/serializer/serializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Fserializer%2Fserializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Fserializer%2Fserializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fserializer%2Fserializer.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -50,7 +50,7 @@ type ast_pat = str;\n type ast_ty = str;\n type ast_item = str;\n \n-type tp_map = hashmap<ast::node_id, ty::t>;\n+type tp_map = map<ast::node_id, ty::t>;\n \n type serialize_ctx = {\n     crate: @ast::crate,\n@@ -519,4 +519,4 @@ fn main(argv: [str]) {\n     vec::iter(copy sctx.item_fns) {|item|\n         stdout.write_str(#fmt[\"%s\\n\", item])\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "984e8d78a18afd2ba2f6de27fd920b83a7e082f4", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -14,7 +14,6 @@\n \n use std;\n import std::io::writer_util;\n-import std::map::hashmap;\n \n type cmplx = {re: f64, im: f64};\n type line = {i: uint, b: [u8]};"}, {"sha": "a69a2d54c6f152fa728e68b9602c7abb26f86e54", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -13,7 +13,6 @@ use std;\n import option = option;\n import option::{some, none};\n import std::{map, io, time};\n-import std::map::hashmap;\n import io::reader_util;\n \n import comm::chan;"}, {"sha": "f0c8bdf7b52cad148a4f1e8c8ceaac3e15db5d48", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,12 +1,10 @@\n use std;\n import std::map;\n-import std::map::hashmap;\n import std::map::map;\n \n // Test that iface types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: map<str,str> = map::new_str_hash::<str>() as map::<str,str>;\n-    let y: map<uint,str> = x;\n+    let x: map<uint,str> = map::new_str_hash::<str>();\n     //!^ ERROR mismatched types: expected `std::map::map<uint,str>`\n-}\n+}\n\\ No newline at end of file"}, {"sha": "365a1cbdcc64c2ca79bf9d18a23663ae38af9274", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -2,7 +2,6 @@\n \n use std;\n import std::map;\n-import std::map::hashmap;\n import uint;\n \n fn main() {\n@@ -22,4 +21,4 @@ fn main() {\n         map.insert(arr, arr + [@\"value stuff\"]);\n     }\n     map.insert([@\"boom\"], []);\n-}\n+}\n\\ No newline at end of file"}, {"sha": "bc16c319374f99a70f4b7b9b9d3a86990dba1ddb", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -12,7 +12,6 @@ import option::none;\n import str;\n import vec;\n import std::map;\n-import std::map::hashmap;\n import task;\n import comm::chan;\n import comm::port;"}, {"sha": "f55e2fb85412980460b4cedc2aea46f505de3a92", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c245d9e980946d4472e9c830a109db77e1bcb038/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=c245d9e980946d4472e9c830a109db77e1bcb038", "patch": "@@ -1,6 +1,5 @@\n use std;\n import std::map;\n-import std::map::hashmap;\n \n fn main() {\n     let m = map::new_bytes_hash();"}]}