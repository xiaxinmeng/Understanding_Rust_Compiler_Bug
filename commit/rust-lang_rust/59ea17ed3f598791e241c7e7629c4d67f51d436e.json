{"sha": "59ea17ed3f598791e241c7e7629c4d67f51d436e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWExN2VkM2Y1OTg3OTFlMjQxYzdlNzYyOWM0ZDY3ZjUxZDQzNmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T11:02:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T11:02:37Z"}, "message": "rename `upcast` to `cast_to_tcx_lifetime` and improve comment", "tree": {"sha": "8e94323d8def22efd837f7f30ec895255b3829fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e94323d8def22efd837f7f30ec895255b3829fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ea17ed3f598791e241c7e7629c4d67f51d436e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ea17ed3f598791e241c7e7629c4d67f51d436e", "html_url": "https://github.com/rust-lang/rust/commit/59ea17ed3f598791e241c7e7629c4d67f51d436e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ea17ed3f598791e241c7e7629c4d67f51d436e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69551243756fff4c81d857177bffbb0f6fcb9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69551243756fff4c81d857177bffbb0f6fcb9ff", "html_url": "https://github.com/rust-lang/rust/commit/d69551243756fff4c81d857177bffbb0f6fcb9ff"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "fc5d174fff4b930ce21d97b519384041f4880b9b", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -48,7 +48,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n         tcx.type_op_eq(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, ()>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n         v"}, {"sha": "5875849f4f925849ef644d2225e995ef4566effd", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -54,14 +54,19 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n         canonicalized: Canonicalized<'gcx, Self::QueryKey>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>>;\n \n-    /// \"Upcasts\" a lifted query result (which is in the gcx lifetime)\n+    /// Casts a lifted query result (which is in the gcx lifetime)\n     /// into the tcx lifetime. This is always just an identity cast,\n-    /// but the generic code does't realize it, so we have to push the\n-    /// operation into the impls that know more specifically what\n+    /// but the generic code doesn't realize it -- put another way, in\n+    /// the generic code, we have a `Lifted<'gcx, Self::QueryResult>`\n+    /// and we want to convert that to a `Self::QueryResult`. This is\n+    /// not a priori valid, so we can't do it -- but in practice, it\n+    /// is always a no-op (e.g., the lifted form of a type,\n+    /// `Ty<'gcx>`, is a subtype of `Ty<'tcx>`). So we have to push\n+    /// the operation into the impls that know more specifically what\n     /// `QueryResult` is. This operation would (maybe) be nicer with\n     /// something like HKTs or GATs, since then we could make\n     /// `QueryResult` parametric and `'gcx` and `'tcx` etc.\n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>>;\n \n@@ -80,7 +85,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: fmt::Debug + Sized {\n                 let (canonical_self, canonical_var_values) =\n                     infcx.canonicalize_hr_query_hack(&query_key);\n                 let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;\n-                let canonical_result = Self::upcast_result(&canonical_result);\n+                let canonical_result = Self::cast_to_tcx_lifetime(&canonical_result);\n \n                 let param_env = Self::param_env(&query_key);\n "}, {"sha": "5e3a23a5f305fc20a4b11fc79086470d52e9bc70", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -55,10 +55,10 @@ where\n         T::type_op_method(tcx, canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, T>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, T>> {\n-        T::upcast_result(v)\n+        T::cast_to_tcx_lifetime(v)\n     }\n }\n \n@@ -70,7 +70,7 @@ pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>\n \n     /// Convert from the `'gcx` (lifted) form of `Self` into the `tcx`\n     /// form of `Self`.\n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, Self>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>>;\n }\n@@ -86,7 +86,7 @@ where\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, Self>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n         v\n@@ -104,7 +104,7 @@ where\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, Self>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n         v\n@@ -122,7 +122,7 @@ where\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, Self>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n         v\n@@ -140,7 +140,7 @@ where\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, Self>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n         v"}, {"sha": "d429cccca96e218f162cee3f5b4860b6c4bd1de8", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -55,7 +55,7 @@ where\n         tcx.dropck_outlives(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>> {\n         lifted_query_result"}, {"sha": "c610421e68a9037bcd13b3ff90bfbecd9a3dba29", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -46,7 +46,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, ()>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n         v"}, {"sha": "8bb773b4c80d1d363843816843a4fb27852d4f7d", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ea17ed3f598791e241c7e7629c4d67f51d436e/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=59ea17ed3f598791e241c7e7629c4d67f51d436e", "patch": "@@ -52,7 +52,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n         tcx.type_op_subtype(canonicalized)\n     }\n \n-    fn upcast_result(\n+    fn cast_to_tcx_lifetime(\n         v: &'a CanonicalizedQueryResult<'gcx, ()>,\n     ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n         v"}]}