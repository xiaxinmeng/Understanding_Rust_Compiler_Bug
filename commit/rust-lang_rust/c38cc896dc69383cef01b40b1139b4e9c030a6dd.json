{"sha": "c38cc896dc69383cef01b40b1139b4e9c030a6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOGNjODk2ZGM2OTM4M2NlZjAxYjQwYjExMzliNGU5YzAzMGE2ZGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-25T16:32:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-27T16:12:49Z"}, "message": "fix len() on non-array but array-layout types (e.g. SIMD)", "tree": {"sha": "a694f95531aefa3fe6b06fc977acea2bc13e268d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a694f95531aefa3fe6b06fc977acea2bc13e268d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38cc896dc69383cef01b40b1139b4e9c030a6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38cc896dc69383cef01b40b1139b4e9c030a6dd", "html_url": "https://github.com/rust-lang/rust/commit/c38cc896dc69383cef01b40b1139b4e9c030a6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38cc896dc69383cef01b40b1139b4e9c030a6dd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07bdd48b604c314ef081636662a0ef35e941e39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/07bdd48b604c314ef081636662a0ef35e941e39b", "html_url": "https://github.com/rust-lang/rust/commit/07bdd48b604c314ef081636662a0ef35e941e39b"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "f79c4d5721faedc37b8cff0b30428b06673d72b9", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c38cc896dc69383cef01b40b1139b4e9c030a6dd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38cc896dc69383cef01b40b1139b4e9c030a6dd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=c38cc896dc69383cef01b40b1139b4e9c030a6dd", "patch": "@@ -137,19 +137,20 @@ impl<'tcx> MPlaceTy<'tcx> {\n \n     #[inline]\n     pub(super) fn len(self, cx: impl HasDataLayout) -> EvalResult<'tcx, u64> {\n-        match self.layout.ty.sty {\n-            ty::Array(..) => {\n-                // Sized, get length from layout.\n-                debug_assert!(self.extra.is_none());\n-                match self.layout.fields {\n-                    layout::FieldPlacement::Array { count, .. } => Ok(count),\n-                    _ => bug!(\"Length for non-array layout {:?} requested\", self.layout),\n-                }\n+        if self.layout.is_unsized() {\n+            // We need to consult `extra` metadata\n+            match self.layout.ty.sty {\n+                ty::Slice(..) | ty::Str =>\n+                    return self.extra.unwrap().to_usize(cx),\n+                _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n-            ty::Slice(..) | ty::Str => {\n-                self.extra.unwrap().to_usize(cx)\n+        } else {\n+            // Go through the layout.  There are lots of types that support a length,\n+            // e.g. SIMD types.\n+            match self.layout.fields {\n+                layout::FieldPlacement::Array { count, .. } => Ok(count),\n+                _ => bug!(\"len not supported on sized type {:?}\", self.layout.ty),\n             }\n-            _ => bug!(\"len not supported on type {:?}\", self.layout.ty),\n         }\n     }\n "}, {"sha": "3ca40aa9f4259c7d944b9f1f5f1d168e7765184c", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38cc896dc69383cef01b40b1139b4e9c030a6dd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38cc896dc69383cef01b40b1139b4e9c030a6dd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c38cc896dc69383cef01b40b1139b4e9c030a6dd", "patch": "@@ -332,16 +332,16 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                             }\n                         }\n                     }\n-                    ty::Array(..) | ty::Slice(..) => {\n-                        // This handles the unsized case correctly as well\n+                    _ => {\n+                        // This handles the unsized case correctly as well, as well as\n+                        // SIMD an all sorts of other array-like types.\n                         for (i, field) in self.mplace_array_fields(dest)?.enumerate() {\n                             let field = field?;\n                             path.push(PathElem::ArrayElem(i));\n                             self.validate_operand(field.into(), path, seen, todo)?;\n                             path.truncate(path_len);\n                         }\n                     }\n-                    _ => bug!(\"Array layout for non-array type {:?}\", dest.layout.ty),\n                 }\n             },\n             layout::FieldPlacement::Array { .. } => {"}]}