{"sha": "88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YmE4YWQ3MzBhMTI0ZjdlMWQ0ZjFiZDE3ZjJiMTRjYjE4ZWVkM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-18T17:13:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-18T17:13:19Z"}, "message": "Auto merge of #85747 - maxwase:path-symlinks-methods, r=m-ou-se\n\nPath methods \u2014 symlinks improvement\n\nThis PR adds symlink method for the `Path`.\n\nTracking issue: #85748\nFor the discussion you can see [internals topic](https://internals.rust-lang.org/t/path-methods-symlinks-improvement/14776)\n\nP.S.\nI'm not fully sure about `stable` attribute, correct me if I'm wrong.", "tree": {"sha": "12e8bb7dd2bc367ce12555a0e4405e4654312d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e8bb7dd2bc367ce12555a0e4405e4654312d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "html_url": "https://github.com/rust-lang/rust/commit/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312b894cc12240a3fcc645474c3daa14f7d568ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/312b894cc12240a3fcc645474c3daa14f7d568ea", "html_url": "https://github.com/rust-lang/rust/commit/312b894cc12240a3fcc645474c3daa14f7d568ea"}, {"sha": "01435fc83a5f3ed827d7ce618f4e3068a6ff964f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01435fc83a5f3ed827d7ce618f4e3068a6ff964f", "html_url": "https://github.com/rust-lang/rust/commit/01435fc83a5f3ed827d7ce618f4e3068a6ff964f"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "9076656f64e9fc250d38d78f7c81428657fa81fc", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "patch": "@@ -1007,6 +1007,32 @@ impl Metadata {\n         self.file_type().is_file()\n     }\n \n+    /// Returns `true` if this metadata is for a symbolic link.\n+    ///\n+    /// # Examples\n+    ///\n+    #[cfg_attr(unix, doc = \"```no_run\")]\n+    #[cfg_attr(not(unix), doc = \"```ignore\")]\n+    /// #![feature(is_symlink)]\n+    /// use std::fs;\n+    /// use std::path::Path;\n+    /// use std::os::unix::fs::symlink;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let link_path = Path::new(\"link\");\n+    ///     symlink(\"/origin_does_not_exists/\", link_path)?;\n+    ///\n+    ///     let metadata = fs::symlink_metadata(link_path)?;\n+    ///\n+    ///     assert!(metadata.is_symlink());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    pub fn is_symlink(&self) -> bool {\n+        self.file_type().is_symlink()\n+    }\n+\n     /// Returns the size of the file, in bytes, this metadata is for.\n     ///\n     /// # Examples"}, {"sha": "c71751efb9f9aa3a9e421b3163e8c36195bf6103", "filename": "library/std/src/path.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "patch": "@@ -2592,6 +2592,32 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n+    /// Returns true if the path exists on disk and is pointing at a symbolic link.\n+    ///\n+    /// This function will not traverse symbolic links.\n+    /// In case of a broken symbolic link this will also return true.\n+    ///\n+    /// If you cannot access the directory containing the file, e.g., because of a\n+    /// permission error, this will return false.\n+    ///\n+    /// # Examples\n+    ///\n+    #[cfg_attr(unix, doc = \"```no_run\")]\n+    #[cfg_attr(not(unix), doc = \"```ignore\")]\n+    /// #![feature(is_symlink)]\n+    /// use std::path::Path;\n+    /// use std::os::unix::fs::symlink;\n+    ///\n+    /// let link_path = Path::new(\"link\");\n+    /// symlink(\"/origin_does_not_exists/\", link_path).unwrap();\n+    /// assert_eq!(link_path.is_symlink(), true);\n+    /// assert_eq!(link_path.exists(), false);\n+    /// ```\n+    #[unstable(feature = \"is_symlink\", issue = \"85748\")]\n+    pub fn is_symlink(&self) -> bool {\n+        fs::symlink_metadata(self).map(|m| m.is_symlink()).unwrap_or(false)\n+    }\n+\n     /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]"}]}