{"sha": "01f060b6da675d800d9874e5256f4a069e58d442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZjA2MGI2ZGE2NzVkODAwZDk4NzRlNTI1NmY0YTA2OWU1OGQ0NDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-04T09:16:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-04T09:16:08Z"}, "message": "avoid allocation in read_os_string_from_c_string", "tree": {"sha": "d78ab0a9ad1be1367be7eaaad4483be86caf35f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78ab0a9ad1be1367be7eaaad4483be86caf35f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f060b6da675d800d9874e5256f4a069e58d442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f060b6da675d800d9874e5256f4a069e58d442", "html_url": "https://github.com/rust-lang/rust/commit/01f060b6da675d800d9874e5256f4a069e58d442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f060b6da675d800d9874e5256f4a069e58d442/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3", "html_url": "https://github.com/rust-lang/rust/commit/808ac8f4b949d6ad4f4efc6e591e94f1321c03a3"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "9f75c9b7fbe101cb3a8da79742c9cdc19f81c244", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01f060b6da675d800d9874e5256f4a069e58d442/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f060b6da675d800d9874e5256f4a069e58d442/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=01f060b6da675d800d9874e5256f4a069e58d442", "patch": "@@ -1,5 +1,5 @@\n use std::{mem, iter};\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsStr;\n \n use syntax::source_map::DUMMY_SP;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -453,9 +453,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n-    fn read_os_string_from_c_string(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n-        let bytes = self.eval_context_mut().memory.read_c_str(scalar)?;\n-        Ok(bytes_to_os_str(bytes)?.into())\n+    fn read_os_string_from_c_string<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n+        where 'tcx: 'a, 'mir: 'a\n+    {\n+        let this = self.eval_context_ref();\n+        let bytes = this.memory.read_c_str(scalar)?;\n+        bytes_to_os_str(bytes)\n     }\n \n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n@@ -501,7 +504,7 @@ fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]>\n }\n \n #[cfg(not(target_os = \"unix\"))]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n+fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n     let s = std::str::from_utf8(bytes)\n         .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n     Ok(&OsStr::new(s))"}, {"sha": "55ac7f780fae79a02bf8b913aecd7ecd9df1d10e", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f060b6da675d800d9874e5256f4a069e58d442/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f060b6da675d800d9874e5256f4a069e58d442/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=01f060b6da675d800d9874e5256f4a069e58d442", "patch": "@@ -140,8 +140,8 @@ pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'tcx>>;\n \n /// A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'mir, 'tcx> {\n-    fn eval_context_ref(&self) -> &MiriEvalContext<'mir, 'tcx>;\n-    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'mir, 'tcx>;\n+    fn eval_context_ref<'a>(&'a self) -> &'a MiriEvalContext<'mir, 'tcx>;\n+    fn eval_context_mut<'a>(&'a mut self) -> &'a mut MiriEvalContext<'mir, 'tcx>;\n }\n impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {\n     #[inline(always)]"}]}