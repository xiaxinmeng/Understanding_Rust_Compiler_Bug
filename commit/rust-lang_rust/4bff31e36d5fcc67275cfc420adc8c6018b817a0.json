{"sha": "4bff31e36d5fcc67275cfc420adc8c6018b817a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZmYzMWUzNmQ1ZmNjNjcyNzVjZmM0MjBhZGM4YzYwMThiODE3YTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-28T18:27:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-28T18:27:43Z"}, "message": "Add drop shim", "tree": {"sha": "153ae9301b4423139db9d4119ad3614788466c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153ae9301b4423139db9d4119ad3614788466c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bff31e36d5fcc67275cfc420adc8c6018b817a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bff31e36d5fcc67275cfc420adc8c6018b817a0", "html_url": "https://github.com/rust-lang/rust/commit/4bff31e36d5fcc67275cfc420adc8c6018b817a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bff31e36d5fcc67275cfc420adc8c6018b817a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c5152f309abe6dc220ea36744ac3698d4187e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c5152f309abe6dc220ea36744ac3698d4187e0", "html_url": "https://github.com/rust-lang/rust/commit/d8c5152f309abe6dc220ea36744ac3698d4187e0"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "5e6fa126c3132bacadd1bfabe6abcc424bc1b226", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bff31e36d5fcc67275cfc420adc8c6018b817a0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff31e36d5fcc67275cfc420adc8c6018b817a0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4bff31e36d5fcc67275cfc420adc8c6018b817a0", "patch": "@@ -281,8 +281,14 @@ fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &mut\n             TerminatorKind::FalseUnwind { .. } => {\n                 bug!(\"shouldn't exist at trans {:?}\", bb_data.terminator());\n             }\n-            TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } | TerminatorKind::GeneratorDrop { .. } => {\n-                unimplemented!(\"terminator {:?}\", bb_data.terminator());\n+            TerminatorKind::Drop { target, .. } | TerminatorKind::DropAndReplace { target, .. } => {\n+                // TODO call drop impl\n+                // unimplemented!(\"terminator {:?}\", bb_data.terminator());\n+                let target_ebb = fx.get_ebb(*target);\n+                fx.bcx.ins().jump(target_ebb, &[]);\n+            }\n+            TerminatorKind::GeneratorDrop => {\n+                unimplemented!(\"terminator GeneratorDrop\");\n             }\n         }\n     }"}, {"sha": "157e3000bd8353f5447e872e5f41d50ffb314566", "filename": "src/common.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bff31e36d5fcc67275cfc420adc8c6018b817a0/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bff31e36d5fcc67275cfc420adc8c6018b817a0/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4bff31e36d5fcc67275cfc420adc8c6018b817a0", "patch": "@@ -31,7 +31,7 @@ fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n                 UintTy::U16 => types::I16,\n                 UintTy::U32 => types::I32,\n                 UintTy::U64 => types::I64,\n-                UintTy::U128 => unimplemented!(),\n+                UintTy::U128 => unimplemented!(\"u128\"),\n                 UintTy::Usize => types::I64,\n             }\n         }\n@@ -41,7 +41,7 @@ fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n                 IntTy::I16 => types::I16,\n                 IntTy::I32 => types::I32,\n                 IntTy::I64 => types::I64,\n-                IntTy::I128 => unimplemented!(),\n+                IntTy::I128 => unimplemented!(\"i128\"),\n                 IntTy::Isize => types::I64,\n             }\n         }\n@@ -213,7 +213,11 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx>, from: CValue<'tcx>) {\n-        assert_eq!(self.layout().ty, from.layout().ty, \"Can't write value of incompatible type to place\");\n+        assert_eq!(\n+            self.layout().ty, from.layout().ty,\n+            \"Can't write value of incompatible type to place {:?} {:?}\",\n+            self.layout().ty.sty, from.layout().ty.sty\n+        );\n \n         match self {\n             CPlace::Var(var, _) => {"}]}