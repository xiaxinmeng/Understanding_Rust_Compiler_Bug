{"sha": "81cde69a2ff7ef24de9e28917936cc60c3482127", "node_id": "C_kwDOAAsO6NoAKDgxY2RlNjlhMmZmN2VmMjRkZTllMjg5MTc5MzZjYzYwYzM0ODIxMjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-22T18:17:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-23T04:12:30Z"}, "message": "Eagerly evaluate args", "tree": {"sha": "912d0a7003bb87f1e365850ad1758b303a978c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912d0a7003bb87f1e365850ad1758b303a978c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81cde69a2ff7ef24de9e28917936cc60c3482127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81cde69a2ff7ef24de9e28917936cc60c3482127", "html_url": "https://github.com/rust-lang/rust/commit/81cde69a2ff7ef24de9e28917936cc60c3482127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81cde69a2ff7ef24de9e28917936cc60c3482127/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b278b702afc0fa26eda0517fd6907712790b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b278b702afc0fa26eda0517fd6907712790b5a", "html_url": "https://github.com/rust-lang/rust/commit/e5b278b702afc0fa26eda0517fd6907712790b5a"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "af14ee08a9981bd187a89ee1bdb1365a053a7aaa", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81cde69a2ff7ef24de9e28917936cc60c3482127/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cde69a2ff7ef24de9e28917936cc60c3482127/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=81cde69a2ff7ef24de9e28917936cc60c3482127", "patch": "@@ -399,7 +399,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::FnPtr(sig) => (sig, None),\n             _ => {\n-                let mut skip_first_expr = false;\n+                for arg in arg_exprs {\n+                    self.check_expr(arg);\n+                }\n+\n                 if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = &callee_expr.kind\n                     && let [segment] = path.segments\n                     && let Some(mut diag) = self\n@@ -422,16 +425,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return ty;\n                     } else {\n                         diag.emit();\n-                        skip_first_expr = true;\n                     }\n                 }\n \n                 let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n \n-                for arg in arg_exprs.iter().skip(skip_first_expr as usize) {\n-                    self.check_expr(arg);\n-                }\n-\n                 return self.tcx.ty_error_with_guaranteed(err);\n             }\n         };\n@@ -492,9 +490,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n     ) -> Option<Ty<'tcx>> {\n         if let [callee_expr, rest @ ..] = arg_exprs {\n-            // This may happen recursively -- if so, avoid repeatedly checking the expr.\n-            let callee_ty = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr);\n-            let callee_ty = callee_ty.unwrap_or_else(|| self.check_expr(callee_expr));\n+            let callee_ty = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr)?;\n+\n             // First, do a probe with `IsSuggestion(true)` to avoid emitting\n             // any strange errors. If it's successful, then we'll do a true\n             // method lookup."}]}