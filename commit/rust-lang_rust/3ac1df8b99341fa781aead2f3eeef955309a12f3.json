{"sha": "3ac1df8b99341fa781aead2f3eeef955309a12f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYzFkZjhiOTkzNDFmYTc4MWFlYWQyZjNlZWVmOTU1MzA5YTEyZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-18T11:53:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-11-20T09:58:30Z"}, "message": "consider assignments of union field of ManuallyDrop type safe", "tree": {"sha": "e4a1d2616b8e73f06fc4a405f3a01e128196a3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a1d2616b8e73f06fc4a405f3a01e128196a3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac1df8b99341fa781aead2f3eeef955309a12f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac1df8b99341fa781aead2f3eeef955309a12f3", "html_url": "https://github.com/rust-lang/rust/commit/3ac1df8b99341fa781aead2f3eeef955309a12f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac1df8b99341fa781aead2f3eeef955309a12f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d3c8c5e0d534cdd794f1b3359089eba031d492c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3c8c5e0d534cdd794f1b3359089eba031d492c", "html_url": "https://github.com/rust-lang/rust/commit/3d3c8c5e0d534cdd794f1b3359089eba031d492c"}], "stats": {"total": 91, "additions": 35, "deletions": 56}, "files": [{"sha": "03faef4d9fa2181f4b52a1660ea49faf40c44fc6", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1df8b99341fa781aead2f3eeef955309a12f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1df8b99341fa781aead2f3eeef955309a12f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=3ac1df8b99341fa781aead2f3eeef955309a12f3", "patch": "@@ -46,7 +46,7 @@ pub enum UnsafetyViolationDetails {\n     UseOfMutableStatic,\n     UseOfExternStatic,\n     DerefOfRawPointer,\n-    AssignToNonCopyUnionField,\n+    AssignToDroppingUnionField,\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n@@ -94,8 +94,8 @@ impl UnsafetyViolationDetails {\n                 \"raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n-            AssignToNonCopyUnionField => (\n-                \"assignment to non-`Copy` union field\",\n+            AssignToDroppingUnionField => (\n+                \"assignment to union field that needs dropping\",\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),"}, {"sha": "fdc033f9eb3f13058b8b615d787e61c7d432e76e", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1df8b99341fa781aead2f3eeef955309a12f3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1df8b99341fa781aead2f3eeef955309a12f3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=3ac1df8b99341fa781aead2f3eeef955309a12f3", "patch": "@@ -235,37 +235,40 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     UnsafetyViolationKind::GeneralAndConstFn,\n                     UnsafetyViolationDetails::DerefOfRawPointer,\n                 ),\n-                ty::Adt(adt, _) => {\n-                    if adt.is_union() {\n-                        if context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n-                            || context == PlaceContext::MutatingUse(MutatingUseContext::Drop)\n-                            || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n-                        {\n-                            let elem_ty = match elem {\n-                                ProjectionElem::Field(_, ty) => ty,\n-                                _ => span_bug!(\n-                                    self.source_info.span,\n-                                    \"non-field projection {:?} from union?\",\n-                                    place\n-                                ),\n-                            };\n-                            if !elem_ty.is_copy_modulo_regions(\n+                ty::Adt(adt, _) if adt.is_union() => {\n+                    if context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n+                        || context == PlaceContext::MutatingUse(MutatingUseContext::Drop)\n+                        || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n+                    {\n+                        let elem_ty = match elem {\n+                            ProjectionElem::Field(_, ty) => ty,\n+                            _ => span_bug!(\n+                                self.source_info.span,\n+                                \"non-field projection {:?} from union?\",\n+                                place\n+                            ),\n+                        };\n+                        let manually_drop = elem_ty\n+                            .ty_adt_def()\n+                            .map_or(false, |adt_def| adt_def.is_manually_drop());\n+                        let nodrop = manually_drop\n+                            || elem_ty.is_copy_modulo_regions(\n                                 self.tcx.at(self.source_info.span),\n                                 self.param_env,\n-                            ) {\n-                                self.require_unsafe(\n-                                    UnsafetyViolationKind::GeneralAndConstFn,\n-                                    UnsafetyViolationDetails::AssignToNonCopyUnionField,\n-                                )\n-                            } else {\n-                                // write to non-move union, safe\n-                            }\n-                        } else {\n+                            );\n+                        if !nodrop {\n                             self.require_unsafe(\n                                 UnsafetyViolationKind::GeneralAndConstFn,\n-                                UnsafetyViolationDetails::AccessToUnionField,\n+                                UnsafetyViolationDetails::AssignToDroppingUnionField,\n                             )\n+                        } else {\n+                            // write to non-drop union field, safe\n                         }\n+                    } else {\n+                        self.require_unsafe(\n+                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationDetails::AccessToUnionField,\n+                        )\n                     }\n                 }\n                 _ => {}"}, {"sha": "9810ed75d5916a478aced60451e4627828ddb03b", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1df8b99341fa781aead2f3eeef955309a12f3/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1df8b99341fa781aead2f3eeef955309a12f3/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=3ac1df8b99341fa781aead2f3eeef955309a12f3", "patch": "@@ -18,7 +18,7 @@ union U4<T: Copy> {\n \n fn generic_noncopy<T: Default>() {\n     let mut u3 = U3 { a: ManuallyDrop::new(T::default()) };\n-    u3.a = ManuallyDrop::new(T::default()); //~ ERROR assignment to non-`Copy` union field is unsafe\n+    u3.a = ManuallyDrop::new(T::default()); // OK (assignment does not drop)\n     *u3.a = T::default(); //~ ERROR access to union field is unsafe\n }\n \n@@ -41,14 +41,14 @@ fn main() {\n     // let U1 { .. } = u1; // OK\n \n     let mut u2 = U2 { a: ManuallyDrop::new(String::from(\"old\")) }; // OK\n-    u2.a = ManuallyDrop::new(String::from(\"new\")); //~ ERROR assignment to non-`Copy` union\n+    u2.a = ManuallyDrop::new(String::from(\"new\")); // OK (assignment does not drop)\n     *u2.a = String::from(\"new\"); //~ ERROR access to union field is unsafe\n \n     let mut u3 = U3 { a: ManuallyDrop::new(0) }; // OK\n     u3.a = ManuallyDrop::new(1); // OK\n     *u3.a = 1; //~ ERROR access to union field is unsafe\n \n     let mut u3 = U3 { a: ManuallyDrop::new(String::from(\"old\")) }; // OK\n-    u3.a = ManuallyDrop::new(String::from(\"new\")); //~ ERROR assignment to non-`Copy` union\n+    u3.a = ManuallyDrop::new(String::from(\"new\")); // OK (assignment does not drop)\n     *u3.a = String::from(\"new\"); //~ ERROR access to union field is unsafe\n }"}, {"sha": "5b3a58814a936064f246bd23640aa14f2523c504", "filename": "src/test/ui/union/union-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3ac1df8b99341fa781aead2f3eeef955309a12f3/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ac1df8b99341fa781aead2f3eeef955309a12f3/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr?ref=3ac1df8b99341fa781aead2f3eeef955309a12f3", "patch": "@@ -1,11 +1,3 @@\n-error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:21:5\n-   |\n-LL |     u3.a = ManuallyDrop::new(T::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:22:6\n    |\n@@ -46,14 +38,6 @@ LL |     if let U1 { a: 12 } = u1 {}\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:44:5\n-   |\n-LL |     u2.a = ManuallyDrop::new(String::from(\"new\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:45:6\n    |\n@@ -70,14 +54,6 @@ LL |     *u3.a = 1;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:52:5\n-   |\n-LL |     u3.a = ManuallyDrop::new(String::from(\"new\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-unsafe.rs:53:6\n    |\n@@ -86,6 +62,6 @@ LL |     *u3.a = String::from(\"new\");\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}