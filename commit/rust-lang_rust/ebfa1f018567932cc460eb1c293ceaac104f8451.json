{"sha": "ebfa1f018567932cc460eb1c293ceaac104f8451", "node_id": "C_kwDOAAsO6NoAKGViZmExZjAxODU2NzkzMmNjNDYwZWIxYzI5M2NlYWFjMTA0Zjg0NTE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T21:18:29Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:10Z"}, "message": "Encode LangItem directly", "tree": {"sha": "05d97bd5ef812ac6081330d8119bb9166e18ec1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d97bd5ef812ac6081330d8119bb9166e18ec1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfa1f018567932cc460eb1c293ceaac104f8451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa1f018567932cc460eb1c293ceaac104f8451", "html_url": "https://github.com/rust-lang/rust/commit/ebfa1f018567932cc460eb1c293ceaac104f8451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfa1f018567932cc460eb1c293ceaac104f8451/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99de57ae135420d52af00df9080c0ffe6786e83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99de57ae135420d52af00df9080c0ffe6786e83c", "html_url": "https://github.com/rust-lang/rust/commit/99de57ae135420d52af00df9080c0ffe6786e83c"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "0735f58a922788a6014a56f1ccbdc680c6f18206", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -42,7 +42,7 @@ macro_rules! expand_group {\n pub struct LanguageItems {\n     /// Mappings from lang items to their possibly found [`DefId`]s.\n     /// The index corresponds to the order in [`LangItem`].\n-    pub items: Vec<Option<DefId>>,\n+    items: Vec<Option<DefId>>,\n     /// Lang items that were not found during collection.\n     pub missing: Vec<LangItem>,\n     /// Mapping from [`LangItemGroup`] discriminants to all\n@@ -133,11 +133,6 @@ macro_rules! language_item_table {\n                 }\n             }\n \n-            /// Returns the mappings to the possibly found `DefId`s for each lang item.\n-            pub fn items(&self) -> &[Option<DefId>] {\n-                &*self.items\n-            }\n-\n             /// Returns the [`DefId`]s of all lang items in a group.\n             pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n                 self.groups[group as usize].as_ref()"}, {"sha": "17a7532044a4439c459cd9d9301abe7ce3bb9477", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n-use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n@@ -967,7 +966,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the language items in the given crate.\n-    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n+    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, LangItem)] {\n         tcx.arena.alloc_from_iter(\n             self.root\n                 .lang_items\n@@ -1319,7 +1318,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {\n+    fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [LangItem] {\n         tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))\n     }\n "}, {"sha": "87fa69e1639a16799f61999005ff6fecd9cfe7c3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def_id::{\n };\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n@@ -1905,22 +1905,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))\n     }\n \n-    fn encode_lang_items(&mut self) -> LazyArray<(DefIndex, usize)> {\n+    fn encode_lang_items(&mut self) -> LazyArray<(DefIndex, LangItem)> {\n         empty_proc_macro!(self);\n-        let tcx = self.tcx;\n-        let lang_items = tcx.lang_items();\n-        let lang_items = lang_items.items().iter();\n-        self.lazy_array(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {\n-            if let Some(def_id) = opt_def_id {\n-                if def_id.is_local() {\n-                    return Some((def_id.index, i));\n-                }\n-            }\n-            None\n+        let lang_items = self.tcx.lang_items().iter();\n+        self.lazy_array(lang_items.filter_map(|(lang_item, def_id)| {\n+            def_id.as_local().map(|id| (id.local_def_index, lang_item))\n         }))\n     }\n \n-    fn encode_lang_items_missing(&mut self) -> LazyArray<lang_items::LangItem> {\n+    fn encode_lang_items_missing(&mut self) -> LazyArray<LangItem> {\n         empty_proc_macro!(self);\n         let tcx = self.tcx;\n         self.lazy_array(&tcx.lang_items().missing)"}, {"sha": "774cff2075d0978e0d00368ff05109954bcce4a3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::{BitSet, FiniteBitSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::metadata::ModChild;\n@@ -230,8 +230,8 @@ pub(crate) struct CrateRoot {\n     dylib_dependency_formats: LazyArray<Option<LinkagePreference>>,\n     lib_features: LazyArray<(Symbol, Option<Symbol>)>,\n     stability_implications: LazyArray<(Symbol, Symbol)>,\n-    lang_items: LazyArray<(DefIndex, usize)>,\n-    lang_items_missing: LazyArray<lang_items::LangItem>,\n+    lang_items: LazyArray<(DefIndex, LangItem)>,\n+    lang_items_missing: LazyArray<LangItem>,\n     diagnostic_items: LazyArray<(Symbol, DefIndex)>,\n     native_libraries: LazyArray<NativeLib>,\n     foreign_modules: LazyArray<ForeignModule>,"}, {"sha": "a098e570305c802a6a52d27c581badab1444f724", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -1705,7 +1705,7 @@ rustc_queries! {\n     }\n \n     /// Returns the lang items defined in another crate by loading it from metadata.\n-    query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, usize)] {\n+    query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, LangItem)] {\n         desc { \"calculating the lang items defined in a crate\" }\n         separate_provide_extern\n     }"}, {"sha": "cbd62ef432526b3ab903e29e9913324a98164fdc", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfa1f018567932cc460eb1c293ceaac104f8451/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=ebfa1f018567932cc460eb1c293ceaac104f8451", "patch": "@@ -65,12 +65,12 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n         }\n     }\n \n-    fn collect_item(&mut self, item_index: usize, item_def_id: DefId) {\n+    fn collect_item(&mut self, lang_item: LangItem, item_def_id: DefId) {\n         // Check for duplicates.\n-        if let Some(original_def_id) = self.items.items[item_index] {\n+        if let Some(original_def_id) = self.items.get(lang_item) {\n             if original_def_id != item_def_id {\n                 let local_span = self.tcx.hir().span_if_local(item_def_id);\n-                let lang_item_name = LangItem::from_u32(item_index as u32).unwrap().name();\n+                let lang_item_name = lang_item.name();\n                 let crate_name = self.tcx.crate_name(item_def_id.krate);\n                 let mut dependency_of = Empty;\n                 let is_local = item_def_id.is_local();\n@@ -139,8 +139,8 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n         }\n \n         // Matched.\n-        self.items.items[item_index] = Some(item_def_id);\n-        if let Some(group) = LangItem::from_u32(item_index as u32).unwrap().group() {\n+        self.items.set(lang_item, item_def_id);\n+        if let Some(group) = lang_item.group() {\n             self.items.groups[group as usize].push(item_def_id);\n         }\n     }\n@@ -197,7 +197,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n             }\n         }\n \n-        self.collect_item(item_index, item_def_id);\n+        self.collect_item(lang_item, item_def_id);\n     }\n }\n \n@@ -208,8 +208,8 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n \n     // Collect lang items in other crates.\n     for &cnum in tcx.crates(()).iter() {\n-        for &(def_id, item_index) in tcx.defined_lang_items(cnum).iter() {\n-            collector.collect_item(item_index, def_id);\n+        for &(def_id, lang_item) in tcx.defined_lang_items(cnum).iter() {\n+            collector.collect_item(lang_item, def_id);\n         }\n     }\n "}]}