{"sha": "3cac62822edf3715afdaa2770333f00f38a51545", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYWM2MjgyMmVkZjM3MTVhZmRhYTI3NzAzMzNmMDBmMzhhNTE1NDU=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-07-27T17:59:41Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-08-02T22:46:11Z"}, "message": "Sha2: Remove the result_X() methods; move logic into the Digest impls.\n\nThe result_X() methods just calculate an output of a fixed size. They don't\nreally have much to do with running the actually hash algorithm until the very\nlast step - the output. It makes much more sense to put all this logic into\nthe Digest impls for each specific variation on the hash function.", "tree": {"sha": "585c544fdb8e6d7eec8c7bbdb5420483fd3fffb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585c544fdb8e6d7eec8c7bbdb5420483fd3fffb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cac62822edf3715afdaa2770333f00f38a51545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cac62822edf3715afdaa2770333f00f38a51545", "html_url": "https://github.com/rust-lang/rust/commit/3cac62822edf3715afdaa2770333f00f38a51545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cac62822edf3715afdaa2770333f00f38a51545/comments", "author": null, "committer": null, "parents": [{"sha": "5b0155515505f0898d21d2dc49dd30e32a916264", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0155515505f0898d21d2dc49dd30e32a916264", "html_url": "https://github.com/rust-lang/rust/commit/5b0155515505f0898d21d2dc49dd30e32a916264"}], "stats": {"total": 123, "additions": 50, "deletions": 73}, "files": [{"sha": "2443c93689651b1912b84149eb28cb14d6d1cca1", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 50, "deletions": 73, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3cac62822edf3715afdaa2770333f00f38a51545/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac62822edf3715afdaa2770333f00f38a51545/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=3cac62822edf3715afdaa2770333f00f38a51545", "patch": "@@ -267,48 +267,6 @@ impl Engine512 {\n \n         self.finished = true;\n     }\n-\n-    fn result_512(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u64(self.H0, out.mut_slice(0, 8));\n-        from_u64(self.H1, out.mut_slice(8, 16));\n-        from_u64(self.H2, out.mut_slice(16, 24));\n-        from_u64(self.H3, out.mut_slice(24, 32));\n-        from_u64(self.H4, out.mut_slice(32, 40));\n-        from_u64(self.H5, out.mut_slice(40, 48));\n-        from_u64(self.H6, out.mut_slice(48, 56));\n-        from_u64(self.H7, out.mut_slice(56, 64));\n-    }\n-\n-    fn result_384(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u64(self.H0, out.mut_slice(0, 8));\n-        from_u64(self.H1, out.mut_slice(8, 16));\n-        from_u64(self.H2, out.mut_slice(16, 24));\n-        from_u64(self.H3, out.mut_slice(24, 32));\n-        from_u64(self.H4, out.mut_slice(32, 40));\n-        from_u64(self.H5, out.mut_slice(40, 48));\n-    }\n-\n-    fn result_256(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u64(self.H0, out.mut_slice(0, 8));\n-        from_u64(self.H1, out.mut_slice(8, 16));\n-        from_u64(self.H2, out.mut_slice(16, 24));\n-        from_u64(self.H3, out.mut_slice(24, 32));\n-    }\n-\n-    fn result_224(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u64(self.H0, out.mut_slice(0, 8));\n-        from_u64(self.H1, out.mut_slice(8, 16));\n-        from_u64(self.H2, out.mut_slice(16, 24));\n-        from_u32((self.H3 >> 32) as u32, out.mut_slice(24, 28));\n-    }\n }\n \n // Constants necessary for SHA-2 512 family of digests.\n@@ -372,7 +330,17 @@ impl Digest for Sha512 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_512(out)\n+        self.engine.finish();\n+\n+        from_u64(self.engine.H0, out.mut_slice(0, 8));\n+        from_u64(self.engine.H1, out.mut_slice(8, 16));\n+        from_u64(self.engine.H2, out.mut_slice(16, 24));\n+        from_u64(self.engine.H3, out.mut_slice(24, 32));\n+        from_u64(self.engine.H4, out.mut_slice(32, 40));\n+        from_u64(self.engine.H5, out.mut_slice(40, 48));\n+        from_u64(self.engine.H6, out.mut_slice(48, 56));\n+        from_u64(self.engine.H7, out.mut_slice(56, 64));\n+\n     }\n \n     fn reset(&mut self) {\n@@ -428,7 +396,14 @@ impl Digest for Sha384 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_384(out)\n+        self.engine.finish();\n+\n+        from_u64(self.engine.H0, out.mut_slice(0, 8));\n+        from_u64(self.engine.H1, out.mut_slice(8, 16));\n+        from_u64(self.engine.H2, out.mut_slice(16, 24));\n+        from_u64(self.engine.H3, out.mut_slice(24, 32));\n+        from_u64(self.engine.H4, out.mut_slice(32, 40));\n+        from_u64(self.engine.H5, out.mut_slice(40, 48));\n     }\n \n     fn reset(&mut self) {\n@@ -484,7 +459,12 @@ impl Digest for Sha512Trunc256 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_256(out)\n+        self.engine.finish();\n+\n+        from_u64(self.engine.H0, out.mut_slice(0, 8));\n+        from_u64(self.engine.H1, out.mut_slice(8, 16));\n+        from_u64(self.engine.H2, out.mut_slice(16, 24));\n+        from_u64(self.engine.H3, out.mut_slice(24, 32));\n     }\n \n     fn reset(&mut self) {\n@@ -540,7 +520,12 @@ impl Digest for Sha512Trunc224 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_224(out)\n+        self.engine.finish();\n+\n+        from_u64(self.engine.H0, out.mut_slice(0, 8));\n+        from_u64(self.engine.H1, out.mut_slice(8, 16));\n+        from_u64(self.engine.H2, out.mut_slice(16, 24));\n+        from_u32((self.engine.H3 >> 32) as u32, out.mut_slice(24, 28));\n     }\n \n     fn reset(&mut self) {\n@@ -774,31 +759,6 @@ impl Engine256 {\n \n         self.finished = true;\n     }\n-\n-    fn result_256(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u32(self.H0, out.mut_slice(0, 4));\n-        from_u32(self.H1, out.mut_slice(4, 8));\n-        from_u32(self.H2, out.mut_slice(8, 12));\n-        from_u32(self.H3, out.mut_slice(12, 16));\n-        from_u32(self.H4, out.mut_slice(16, 20));\n-        from_u32(self.H5, out.mut_slice(20, 24));\n-        from_u32(self.H6, out.mut_slice(24, 28));\n-        from_u32(self.H7, out.mut_slice(28, 32));\n-    }\n-\n-    fn result_224(&mut self, out: &mut [u8]) {\n-        self.finish();\n-\n-        from_u32(self.H0, out.mut_slice(0, 4));\n-        from_u32(self.H1, out.mut_slice(4, 8));\n-        from_u32(self.H2, out.mut_slice(8, 12));\n-        from_u32(self.H3, out.mut_slice(12, 16));\n-        from_u32(self.H4, out.mut_slice(16, 20));\n-        from_u32(self.H5, out.mut_slice(20, 24));\n-        from_u32(self.H6, out.mut_slice(24, 28));\n-    }\n }\n \n static K32: [u32, ..64] = [\n@@ -857,7 +817,16 @@ impl Digest for Sha256 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_256(out)\n+        self.engine.finish();\n+\n+        from_u32(self.engine.H0, out.mut_slice(0, 4));\n+        from_u32(self.engine.H1, out.mut_slice(4, 8));\n+        from_u32(self.engine.H2, out.mut_slice(8, 12));\n+        from_u32(self.engine.H3, out.mut_slice(12, 16));\n+        from_u32(self.engine.H4, out.mut_slice(16, 20));\n+        from_u32(self.engine.H5, out.mut_slice(20, 24));\n+        from_u32(self.engine.H6, out.mut_slice(24, 28));\n+        from_u32(self.engine.H7, out.mut_slice(28, 32));\n     }\n \n     fn reset(&mut self) {\n@@ -913,7 +882,15 @@ impl Digest for Sha224 {\n     }\n \n     fn result(&mut self, out: &mut [u8]) {\n-        self.engine.result_224(out)\n+        self.engine.finish();\n+\n+        from_u32(self.engine.H0, out.mut_slice(0, 4));\n+        from_u32(self.engine.H1, out.mut_slice(4, 8));\n+        from_u32(self.engine.H2, out.mut_slice(8, 12));\n+        from_u32(self.engine.H3, out.mut_slice(12, 16));\n+        from_u32(self.engine.H4, out.mut_slice(16, 20));\n+        from_u32(self.engine.H5, out.mut_slice(20, 24));\n+        from_u32(self.engine.H6, out.mut_slice(24, 28));\n     }\n \n     fn reset(&mut self) {"}]}