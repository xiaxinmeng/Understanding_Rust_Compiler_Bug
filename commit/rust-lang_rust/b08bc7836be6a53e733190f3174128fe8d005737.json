{"sha": "b08bc7836be6a53e733190f3174128fe8d005737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOGJjNzgzNmJlNmE1M2U3MzMxOTBmMzE3NDEyOGZlOGQwMDU3Mzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-16T08:59:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-16T08:59:38Z"}, "message": "fix MIR fn-ptr pretty-printing", "tree": {"sha": "e865401de633bf0c143c1f6858b8ec4c595ae495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e865401de633bf0c143c1f6858b8ec4c595ae495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08bc7836be6a53e733190f3174128fe8d005737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08bc7836be6a53e733190f3174128fe8d005737", "html_url": "https://github.com/rust-lang/rust/commit/b08bc7836be6a53e733190f3174128fe8d005737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08bc7836be6a53e733190f3174128fe8d005737/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090dac0c3892a2d21afb0f82aa72920760e08078", "url": "https://api.github.com/repos/rust-lang/rust/commits/090dac0c3892a2d21afb0f82aa72920760e08078", "html_url": "https://github.com/rust-lang/rust/commit/090dac0c3892a2d21afb0f82aa72920760e08078"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "f934e31a534d22eb4e2a77e943be49a7374372d1", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b08bc7836be6a53e733190f3174128fe8d005737/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08bc7836be6a53e733190f3174128fe8d005737/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=b08bc7836be6a53e733190f3174128fe8d005737", "patch": "@@ -1030,15 +1030,19 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n-                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n-                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // FIXME: We should probably have a helper method to share code with the \"Byte strings\"\n                 // printing above (which also has to handle pointers to all sorts of things).\n-                let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n-                self = self.typed_value(\n-                    |this| this.print_value_path(instance.def_id(), instance.substs),\n-                    |this| this.print_type(ty),\n-                    \" as \",\n-                )?;\n+                match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                    Some(GlobalAlloc::Function(instance)) => {\n+                        self = self.typed_value(\n+                            |this| this.print_value_path(instance.def_id(), instance.substs),\n+                            |this| this.print_type(ty),\n+                            \" as \",\n+                        )?;\n+                    }\n+                    Some(_) => p!(\"<non-executable memory>\"),\n+                    None => p!(\"<dangling pointer>\"),\n+                }\n             }\n             // For function type zsts just printing the path is enough\n             (Scalar::Int(int), ty::FnDef(d, s)) if int == ScalarInt::ZST => {"}, {"sha": "4b131ecb863adf0921228b89e56b07eb2f7c3f84", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b08bc7836be6a53e733190f3174128fe8d005737/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08bc7836be6a53e733190f3174128fe8d005737/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=b08bc7836be6a53e733190f3174128fe8d005737", "patch": "@@ -106,7 +106,7 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n                 }\n                 ScalarMaybeUninit::Uninit => cx.typed_value(\n                     |mut this| {\n-                        this.write_str(\"{uninit \")?;\n+                        this.write_str(\"uninit \")?;\n                         Ok(this)\n                     },\n                     |this| this.print_type(ty),"}]}