{"sha": "8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTNmMjIzOGJiMGVhNjY0NWE4ZWEwZTRhNWFmMTZlZTU1MDM5OWY=", "commit": {"author": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T20:39:49Z"}, "committer": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T20:39:49Z"}, "message": "Fix all the clippy lints\n\nAdd false positive tests", "tree": {"sha": "ffa814581259215adf1cd61363c0bfb0b2f9181d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa814581259215adf1cd61363c0bfb0b2f9181d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "html_url": "https://github.com/rust-lang/rust/commit/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/comments", "author": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6657d4e7ffac84cb51d3a7d9137132480992817e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6657d4e7ffac84cb51d3a7d9137132480992817e", "html_url": "https://github.com/rust-lang/rust/commit/6657d4e7ffac84cb51d3a7d9137132480992817e"}], "stats": {"total": 118, "additions": 92, "deletions": 26}, "files": [{"sha": "abaa1edf090e075117fd12867c6c691ebf10f7f4", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "patch": "@@ -49,7 +49,7 @@ impl EarlyLintPass for UnitExpr {\n             }\n         }\n         if let ExprKind::MethodCall(ref _left, ref args) = expr.node {\n-            for ref arg in args {\n+            for arg in args {\n                 if let Some(span) = is_unit_expr(arg) {\n                     span_note_and_lint(\n                         cx,\n@@ -63,7 +63,7 @@ impl EarlyLintPass for UnitExpr {\n             }\n         }\n         if let ExprKind::Call(_, ref args) = expr.node {\n-            for ref arg in args {\n+            for arg in args {\n                 if let Some(span) = is_unit_expr(arg) {\n                     span_note_and_lint(\n                         cx,\n@@ -101,46 +101,45 @@ impl EarlyLintPass for UnitExpr {\n fn is_unit_expr(expr: &Expr) -> Option<Span> {\n     match expr.node {\n         ExprKind::Block(ref block) => if check_last_stmt_in_block(block) {\n-            return Some(block.stmts[block.stmts.len() - 1].span.clone());\n+            Some(block.stmts[block.stmts.len() - 1].span)\n         } else {\n-            return None;\n+            None\n         },\n         ExprKind::If(_, ref then, ref else_) => {\n             let check_then = check_last_stmt_in_block(then);\n             if let Some(ref else_) = *else_ {\n-                let check_else = is_unit_expr(&else_);\n+                let check_else = is_unit_expr(else_);\n                 if let Some(ref expr_else) = check_else {\n-                    return Some(expr_else.clone());\n+                    return Some(*expr_else);\n                 }\n             }\n             if check_then {\n-                return Some(expr.span.clone());\n+                Some(expr.span)\n             } else {\n-                return None;\n+                None\n             }\n         },\n         ExprKind::Match(ref _pattern, ref arms) => {\n-            for ref arm in arms {\n+            for arm in arms {\n                 if let Some(expr) = is_unit_expr(&arm.body) {\n                     return Some(expr);\n                 }\n             }\n-            return None;\n+            None\n         },\n-        _ => return None,\n+        _ => None,\n     }\n }\n \n fn check_last_stmt_in_block(block: &Block) -> bool {\n-    let ref final_stmt = &block.stmts[block.stmts.len() - 1];\n+    let final_stmt = &block.stmts[block.stmts.len() - 1];\n \n     match final_stmt.node {\n-        StmtKind::Expr(_) => return false,\n+        StmtKind::Expr(_) => false,\n         StmtKind::Semi(ref expr) => match expr.node {\n-            ExprKind::Break(_, _) => return false,\n-            ExprKind::Ret(_) => return false,\n-            _ => return true,\n+            ExprKind::Break(_, _) | ExprKind::Ret(_) => false,\n+            _ => true,\n         },\n-        _ => return true,\n+        _ => true,\n     }\n }"}, {"sha": "8a986494eaf76cca02f91a4c9db368d9a5677ff8", "filename": "tests/ui/is_unit_expr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/tests%2Fui%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/tests%2Fui%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.rs?ref=8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "patch": "@@ -4,8 +4,42 @@\n #[allow(unused_variables)]\n \n fn main() {\n+\n+    //lint should note removing the semicolon from \"baz\" \n     let x = {\n         \"foo\";\n         \"baz\";\n     };\n+\n+\n+    //lint should ignore false positive. \n+    let y = if true{\n+        \"foo\" \n+    } else{\n+        return;\n+    };\n+\n+    //lint should note removing semicolon from \"bar\"\n+    let z = if true{\n+        \"foo\";\n+    } else{\n+        \"bar\";\n+    };\n+\n+\n+    let a1 = Some(5);\n+\n+    //lint should ignore false positive\n+    let a2 = match a1 {\n+        Some(x) => x,\n+        _ => {return;},\n+    };\n+\n+    //lint should note removing the semicolon after `x;` \n+    let a3 = match a1 {\n+        Some(x) => {x;},\n+        _ => {0;},\n+    };\n+\n+\n }"}, {"sha": "dafebb1c82af3f84a2b868464a8fecd8dccbebfd", "filename": "tests/ui/is_unit_expr.stderr", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/tests%2Fui%2Fis_unit_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b53f2238bb0ea6645a8ea0e4a5af16ee550399f/tests%2Fui%2Fis_unit_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.stderr?ref=8b53f2238bb0ea6645a8ea0e4a5af16ee550399f", "patch": "@@ -1,19 +1,52 @@\n-error: This expression assigns the Unit type ()\n-  --> $DIR/is_unit_expr.rs:8:13\n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:9:13\n    |\n-8  |       let x = {\n+9  |       let x = {\n    |  _____________^\n-9  | |         \"foo\";\n-10 | |         \"baz\";\n-11 | |     };\n+10 | |         \"foo\";\n+11 | |         \"baz\";\n+12 | |     };\n    | |_____^\n    |\n    = note: `-D unit-expr` implied by `-D warnings`\n note: Consider removing the trailing semicolon\n-  --> $DIR/is_unit_expr.rs:10:9\n+  --> $DIR/is_unit_expr.rs:11:9\n    |\n-10 |         \"baz\";\n+11 |         \"baz\";\n    |         ^^^^^^\n \n-error: aborting due to previous error\n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:23:13\n+   |\n+23 |       let z = if true{\n+   |  _____________^\n+24 | |         \"foo\";\n+25 | |     } else{\n+26 | |         \"bar\";\n+27 | |     };\n+   | |_____^\n+   |\n+note: Consider removing the trailing semicolon\n+  --> $DIR/is_unit_expr.rs:26:9\n+   |\n+26 |         \"bar\";\n+   |         ^^^^^^\n+\n+error: This expression evaluates to the Unit type ()\n+  --> $DIR/is_unit_expr.rs:39:14\n+   |\n+39 |       let a3 = match a1 {\n+   |  ______________^\n+40 | |         Some(x) => {x;},\n+41 | |         _ => {0;},\n+42 | |     };\n+   | |_____^\n+   |\n+note: Consider removing the trailing semicolon\n+  --> $DIR/is_unit_expr.rs:40:21\n+   |\n+40 |         Some(x) => {x;},\n+   |                     ^^\n+\n+error: aborting due to 3 previous errors\n "}]}