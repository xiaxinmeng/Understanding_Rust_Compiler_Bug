{"sha": "6f83dcc192e989eba6f4e531f4931ae057e62f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODNkY2MxOTJlOTg5ZWJhNmY0ZTUzMWY0OTMxYWUwNTdlNjJmOWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-29T15:33:53Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-01T15:39:50Z"}, "message": "Restrict concrete types to equivalent types", "tree": {"sha": "c45adbff4a5c753d7f4c40fa9d9175ce6be797e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45adbff4a5c753d7f4c40fa9d9175ce6be797e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f83dcc192e989eba6f4e531f4931ae057e62f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f83dcc192e989eba6f4e531f4931ae057e62f9e", "html_url": "https://github.com/rust-lang/rust/commit/6f83dcc192e989eba6f4e531f4931ae057e62f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f83dcc192e989eba6f4e531f4931ae057e62f9e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf01b514c876656696e87672a1c118a3ce7817ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf01b514c876656696e87672a1c118a3ce7817ed", "html_url": "https://github.com/rust-lang/rust/commit/cf01b514c876656696e87672a1c118a3ce7817ed"}], "stats": {"total": 297, "additions": 264, "deletions": 33}, "files": [{"sha": "040494a2799413e060ab7513078041fc90d55523", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -233,6 +233,11 @@ impl_stable_hash_for!(struct ty::FnSig<'tcx> {\n     abi\n });\n \n+impl_stable_hash_for!(struct ty::ResolvedOpaqueTy<'tcx> {\n+    concrete_type,\n+    substs\n+});\n+\n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n     where T: HashStable<StableHashingContext<'a>>\n {"}, {"sha": "eabbb943c6ef2e60bc437ba28984f2bbbeaad517", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -26,7 +26,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     ///\n     /// winds up desugared to:\n     ///\n-    ///     abstract type Foo<'x, T>: Trait<'x>\n+    ///     abstract type Foo<'x, X>: Trait<'x>\n     ///     fn foo<'a, 'b, T>() -> Foo<'a, T>\n     ///\n     /// then `substs` would be `['a, T]`."}, {"sha": "350dcdf571be37b5467dec91c25b901438cef8bf", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -315,6 +315,17 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n     }\n }\n \n+/// All information necessary to validate and reveal an `impl Trait` or `existential Type`\n+#[derive(RustcEncodable, RustcDecodable, Debug)]\n+pub struct ResolvedOpaqueTy<'tcx> {\n+    /// The revealed type as seen by this function.\n+    pub concrete_type: Ty<'tcx>,\n+    /// Generic parameters on the opaque type as passed by this function.\n+    /// For `existential type Foo<A, B>; fn foo<T, U>() -> Foo<T, U> { .. }` this is `[T, U]`, not\n+    /// `[A, B]`\n+    pub substs: &'tcx Substs<'tcx>,\n+}\n+\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to.\n@@ -417,7 +428,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// All the existential types that are restricted to concrete types\n     /// by this function\n-    pub concrete_existential_types: FxHashMap<DefId, Ty<'tcx>>,\n+    pub concrete_existential_types: FxHashMap<DefId, ResolvedOpaqueTy<'tcx>>,\n \n     /// Given the closure ID this map provides the list of UpvarIDs used by it.\n     /// The upvarID contains the HIR node ID and it also contains the full path"}, {"sha": "3a7441e9215df8dec869bbcfd5a107db2995aa33", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -74,7 +74,7 @@ pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, ke\n pub use self::context::{Lift, TypeckTables, CtxtInterners};\n pub use self::context::{\n     UserTypeAnnotationIndex, UserType, CanonicalUserType,\n-    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n+    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n };\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "c9dd83dcd5e2282ab5ef82fe910207e46288c861", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -567,17 +567,23 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n+            let new = ty::ResolvedOpaqueTy {\n+                concrete_type: definition_ty,\n+                substs: self.tcx().lift_to_global(&opaque_defn.substs).unwrap(),\n+            };\n+\n             let old = self.tables\n                 .concrete_existential_types\n-                .insert(def_id, definition_ty);\n+                .insert(def_id, new);\n             if let Some(old) = old {\n-                if old != definition_ty {\n+                if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n                     span_bug!(\n                         span,\n                         \"visit_opaque_types tried to write \\\n-                        different types for the same existential type: {:?}, {:?}, {:?}\",\n+                        different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n                         def_id,\n                         definition_ty,\n+                        opaque_defn,\n                         old,\n                     );\n                 }"}, {"sha": "7cdcfec339eeeed6eb41cd479e0be4e9d8a17544", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -23,9 +23,10 @@ use middle::resolve_lifetime as rl;\n use middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n+use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n@@ -1193,7 +1194,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                     tcx.typeck_tables_of(owner)\n                         .concrete_existential_types\n                         .get(&def_id)\n-                        .cloned()\n+                        .map(|opaque| opaque.concrete_type)\n                         .unwrap_or_else(|| {\n                             // This can occur if some error in the\n                             // owner fn prevented us from populating\n@@ -1325,7 +1326,13 @@ fn find_existential_constraints<'a, 'tcx>(\n     struct ConstraintLocator<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n-        found: Option<(Span, ty::Ty<'tcx>)>,\n+        // First found type span, actual type, mapping from the existential type's generic\n+        // parameters to the concrete type's generic parameters\n+        //\n+        // The mapping is an index for each use site of a generic parameter in the concrete type\n+        //\n+        // The indices index into the generic parameters on the existential type.\n+        found: Option<(Span, ty::Ty<'tcx>, Vec<usize>)>,\n     }\n \n     impl<'a, 'tcx> ConstraintLocator<'a, 'tcx> {\n@@ -1340,13 +1347,50 @@ fn find_existential_constraints<'a, 'tcx>(\n                 .tcx\n                 .typeck_tables_of(def_id)\n                 .concrete_existential_types\n-                .get(&self.def_id)\n-                .cloned();\n-            if let Some(ty) = ty {\n+                .get(&self.def_id);\n+            if let Some(ty::ResolvedOpaqueTy { concrete_type, substs }) = ty {\n                 // FIXME(oli-obk): trace the actual span from inference to improve errors\n                 let span = self.tcx.def_span(def_id);\n-                if let Some((prev_span, prev_ty)) = self.found {\n-                    let mut ty = ty.walk().fuse();\n+                // used to quickly look up the position of a generic parameter\n+                let mut index_map: FxHashMap<ty::ParamTy, usize> = FxHashMap::default();\n+                // skip binder is ok, since we only use this to find generic parameters and their\n+                // positions.\n+                for subst in substs.iter() {\n+                    if let UnpackedKind::Type(ty) = subst.unpack() {\n+                        if let ty::Param(p) = ty.sty {\n+                            let idx = index_map.len();\n+                            if index_map.insert(p, idx).is_some() {\n+                                // there was already an entry for `p`, meaning a generic parameter\n+                                // was used twice\n+                                self.tcx.sess.span_err(\n+                                    span,\n+                                    &format!(\"defining existential type use restricts existential \\\n+                                    type by using the generic parameter `{}` twice\", p.name),\n+                                );\n+                                return;\n+                            }\n+                        } else {\n+                            self.tcx.sess.delay_span_bug(\n+                                span,\n+                                &format!(\n+                                    \"non-defining exist ty use in defining scope: {:?}, {:?}\",\n+                                    concrete_type, substs,\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+                // compute the index within the existential type for each generic parameter used in\n+                // the concrete type\n+                let indices = concrete_type\n+                    .subst(self.tcx, substs)\n+                    .walk()\n+                    .filter_map(|t| match &t.sty {\n+                    ty::Param(p) => Some(*index_map.get(p).unwrap()),\n+                    _ => None,\n+                }).collect();\n+                if let Some((prev_span, prev_ty, ref prev_indices)) = self.found {\n+                    let mut ty = concrete_type.walk().fuse();\n                     let mut prev_ty = prev_ty.walk().fuse();\n                     let iter_eq = (&mut ty).zip(&mut prev_ty).all(|(t, p)| match (&t.sty, &p.sty) {\n                         // type parameters are equal to any other type parameter for the purpose of\n@@ -1359,13 +1403,21 @@ fn find_existential_constraints<'a, 'tcx>(\n                         // found different concrete types for the existential type\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,\n-                            \"defining existential type use differs from previous\",\n+                            \"concrete type differs from previous defining existential type use\",\n+                        );\n+                        err.span_note(prev_span, \"previous use here\");\n+                        err.emit();\n+                    } else if indices != *prev_indices {\n+                        // found \"same\" concrete types, but the generic parameter order differs\n+                        let mut err = self.tcx.sess.struct_span_err(\n+                            span,\n+                            \"concrete type's generic parameters differ from previous defining use\",\n                         );\n                         err.span_note(prev_span, \"previous use here\");\n                         err.emit();\n                     }\n                 } else {\n-                    self.found = Some((span, ty));\n+                    self.found = Some((span, concrete_type, indices));\n                 }\n             }\n         }\n@@ -1424,7 +1476,7 @@ fn find_existential_constraints<'a, 'tcx>(\n     }\n \n     match locator.found {\n-        Some((_, ty)) => ty,\n+        Some((_, ty, _)) => ty,\n         None => {\n             let span = tcx.def_span(def_id);\n             tcx.sess.span_err(span, \"could not find defining uses\");"}, {"sha": "a8670cc07f2e1370494dd82736fa27b7091e7b5d", "filename": "src/test/ui/existential_types/different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -9,6 +9,6 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn bar() -> Foo { //~ ERROR concrete type differs from previous\n     42i32\n }"}, {"sha": "3b3449bbf11f4944dec725e14b6a22fbe7236c86", "filename": "src/test/ui/existential_types/different_defining_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,7 +1,7 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses.rs:12:1\n    |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     42i32\n LL | | }\n    | |_^"}, {"sha": "13ada63e4bc45fa256ee6f9286feb19f419be862", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -9,10 +9,10 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn bar() -> Foo { //~ ERROR concrete type differs from previous\n     panic!()\n }\n \n-fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn boo() -> Foo { //~ ERROR concrete type differs from previous\n     loop {}\n }"}, {"sha": "161111e3379f5a2be2d78742211d908e9438d697", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,7 +1,7 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses_never_type.rs:12:1\n    |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     panic!()\n LL | | }\n    | |_^\n@@ -14,10 +14,10 @@ LL | |     \"\"\n LL | | }\n    | |_^\n \n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses_never_type.rs:16:1\n    |\n-LL | / fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn boo() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     loop {}\n LL | | }\n    | |_^"}, {"sha": "ce3ab88a1c0bbe8cb3113075863571659568bff4", "filename": "src/test/ui/existential_types/generic_different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -8,6 +8,6 @@ fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)\n }\n \n-fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n     Some(t).into_iter()\n }"}, {"sha": "89f70a873d9dc6799fcdea6d39b8a356462619db", "filename": "src/test/ui/existential_types/generic_different_defining_uses.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,7 +1,7 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/generic_different_defining_uses.rs:11:1\n    |\n-LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n LL | |     Some(t).into_iter()\n LL | | }\n    | |_^"}, {"sha": "3f8753333aa7a2b77fd3000ece68ff39f3e8efd0", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n #![feature(existential_type)]\n \n use std::fmt::Debug;\n@@ -7,7 +6,9 @@ fn main() {}\n \n // test that unused generic parameters are ok\n existential type Two<T, U>: Debug;\n+//~^ could not find defining uses\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ ERROR defining existential type use restricts existential type\n     t\n }"}, {"sha": "d4deda999da16b4f29925f3b6c5c7bcffe4c828d", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,17 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use.rs:11:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ ERROR defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: could not find defining uses\n+  --> $DIR/generic_duplicate_param_use.rs:8:1\n+   |\n+LL | existential type Two<T, U>: Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3842292decd57e4badb7074a659cce91169a0e87", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n #![feature(existential_type)]\n \n use std::fmt::Debug;\n@@ -9,6 +8,7 @@ fn main() {}\n existential type Two<T, U>: Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ defining existential type use restricts existential type\n     t\n }\n "}, {"sha": "0a8be3218c759a70f9db8817b544fe52c9f7a4e5", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,11 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use2.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "05c77c8947333c241832c32915f7c17721177227", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n #![feature(existential_type)]\n \n use std::fmt::Debug;\n@@ -9,6 +8,7 @@ fn main() {}\n existential type Two<T, U>: Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ defining existential type use restricts existential type\n     t\n }\n \n@@ -17,5 +17,6 @@ fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n }\n \n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+//~^ concrete type's generic parameters differ from previous defining use\n     u\n }"}, {"sha": "8f860e7ee0a40a2474d5106a8d69b28051ad6e98", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,28 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use3.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: concrete type's generic parameters differ from previous defining use\n+  --> $DIR/generic_duplicate_param_use3.rs:19:1\n+   |\n+LL | / fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type's generic parameters differ from previous defining use\n+LL | |     u\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use3.rs:15:1\n+   |\n+LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "609dbe06cd7335c39f485e13e62ea84b65612625", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n #![feature(existential_type)]\n \n use std::fmt::Debug;\n@@ -9,6 +8,7 @@ fn main() {}\n existential type Two<T, U>: Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ ERROR defining existential type use restricts existential type\n     t\n }\n "}, {"sha": "24b1caf7c1bfe749730fcc46ff5b0b0d32f54652", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,11 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use4.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ ERROR defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f4a23b8b41faa0a7fae91497f9a76bdef806ace", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+//~^ concrete type differs from previous\n+    (u, t)\n+}"}, {"sha": "52befb9c2e12c8f9ca729c4178a294512ef54d9e", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,19 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use5.rs:14:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type differs from previous\n+LL | |     (u, t)\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use5.rs:10:1\n+   |\n+LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b8c56352bda46ceceb521ee02f52074b95a8a1b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, t)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+//~^ concrete type differs from previous\n+    (u, t)\n+}"}, {"sha": "2bf1d0c05e625d4a731e5f74fe89f5dcffe89aae", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,19 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type differs from previous\n+LL | |     (u, t)\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use6.rs:10:1\n+   |\n+LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, t)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3906b85aadbde4a00624fe8f8c717ee30b5e4186", "filename": "src/test/ui/existential_types/generic_duplicate_param_use7.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f83dcc192e989eba6f4e531f4931ae057e62f9e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs?ref=6f83dcc192e989eba6f4e531f4931ae057e62f9e", "patch": "@@ -0,0 +1,16 @@\n+// compile-pass\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<A, B>: Debug;\n+\n+fn two<T: Debug + Copy, U>(t: T, u: U) -> Two<T, U> {\n+    (t, t)\n+}\n+\n+fn three<T: Debug, U>(t: T, t2: T, u: U) -> Two<T, U> {\n+    (t, t2)\n+}"}]}