{"sha": "fe034cb43baf6fe415ca0f530cd72614df447b70", "node_id": "C_kwDOAAsO6NoAKGZlMDM0Y2I0M2JhZjZmZTQxNWNhMGY1MzBjZDcyNjE0ZGY0NDdiNzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-10T11:20:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T11:20:52Z"}, "message": "Rollup merge of #94657 - fee1-dead:const_slice_index, r=oli-obk\n\nConstify `Index{,Mut}` for `[T]`, `str`, and `[T; N]`\n\nSeveral panic functions were rewired (via `const_eval_select`) to simpler implementations that do not require formatting for compile-time usage.\n\nr? ```@oli-obk```", "tree": {"sha": "ff5d54ec37074f528859f75490c0755aa617f5b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5d54ec37074f528859f75490c0755aa617f5b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe034cb43baf6fe415ca0f530cd72614df447b70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKd8UCRBK7hj4Ov3rIwAAxWsIACSbxTY3u6ifyZDN31EJnJqi\n0+uzSHt4wPNSi7EuGH2/fTxU4t4daZVk3kI2TgwumwmrwT+tp7mQJLI1piT0WdKH\nBS/U2kbRbR8yGaOYzWK1YXc9kvJHRjyVoAwV+j3+urVp8reiJaDa8EK4/S6n1N8h\n6p2omuW17f+fMko+zGst/S01zu2WJ4gLc8ku0tgbgXGdBfau0c9nvOX3Ch+GU6Th\nFAPxpXLDwdqcvVyMIkbBtEzpIidtDCeh0mwySRb3PyQOdK9xUFExjgye1YehfBHT\nFE88ty5r5W4lL/KLZ1/pmLxvjq+FjkxzafkvqcGaXZPlWsZLOPQF22UeXF+KKA8=\n=SsJG\n-----END PGP SIGNATURE-----\n", "payload": "tree ff5d54ec37074f528859f75490c0755aa617f5b8\nparent 313a668234ad7b60fc5df280ba37cf9a39130bd6\nparent 4654a910018cf0447db1edb2a46a0cae5f7dff8e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646911252 +0100\ncommitter GitHub <noreply@github.com> 1646911252 +0100\n\nRollup merge of #94657 - fee1-dead:const_slice_index, r=oli-obk\n\nConstify `Index{,Mut}` for `[T]`, `str`, and `[T; N]`\n\nSeveral panic functions were rewired (via `const_eval_select`) to simpler implementations that do not require formatting for compile-time usage.\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe034cb43baf6fe415ca0f530cd72614df447b70", "html_url": "https://github.com/rust-lang/rust/commit/fe034cb43baf6fe415ca0f530cd72614df447b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe034cb43baf6fe415ca0f530cd72614df447b70/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313a668234ad7b60fc5df280ba37cf9a39130bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/313a668234ad7b60fc5df280ba37cf9a39130bd6", "html_url": "https://github.com/rust-lang/rust/commit/313a668234ad7b60fc5df280ba37cf9a39130bd6"}, {"sha": "4654a910018cf0447db1edb2a46a0cae5f7dff8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4654a910018cf0447db1edb2a46a0cae5f7dff8e", "html_url": "https://github.com/rust-lang/rust/commit/4654a910018cf0447db1edb2a46a0cae5f7dff8e"}], "stats": {"total": 216, "additions": 155, "deletions": 61}, "files": [{"sha": "20dfbc6347c4fb761f24ab5ee32ef864470ca301", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -276,9 +276,10 @@ impl<'a, T, const N: usize> IntoIterator for &'a mut [T; N] {\n }\n \n #[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n-impl<T, I, const N: usize> Index<I> for [T; N]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I, const N: usize> const Index<I> for [T; N]\n where\n-    [T]: Index<I>,\n+    [T]: ~const Index<I>,\n {\n     type Output = <[T] as Index<I>>::Output;\n \n@@ -289,9 +290,10 @@ where\n }\n \n #[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n-impl<T, I, const N: usize> IndexMut<I> for [T; N]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I, const N: usize> const IndexMut<I> for [T; N]\n where\n-    [T]: IndexMut<I>,\n+    [T]: ~const IndexMut<I>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut Self::Output {"}, {"sha": "97add8f2c6a744ac76e5c75dfa9823001bc2708d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -149,6 +149,8 @@\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n+#![feature(const_slice_index)]\n+#![feature(const_is_char_boundary)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "07fd317e07486ff9493c992699974070d54bf852", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -809,7 +809,7 @@ impl u8 {\n         ascii::escape_default(self)\n     }\n \n-    pub(crate) fn is_utf8_char_boundary(self) -> bool {\n+    pub(crate) const fn is_utf8_char_boundary(self) -> bool {\n         // This is bit magic equivalent to: b < 128 || b >= 192\n         (self as i8) >= -0x40\n     }"}, {"sha": "5029e0560b8929b187d5e744e0a35ec6e1e61bcd", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -446,7 +446,7 @@ impl RangeInclusive<usize> {\n     /// Converts to an exclusive `Range` for `SliceIndex` implementations.\n     /// The caller is responsible for dealing with `end == usize::MAX`.\n     #[inline]\n-    pub(crate) fn into_slice_range(self) -> Range<usize> {\n+    pub(crate) const fn into_slice_range(self) -> Range<usize> {\n         // If we're not exhausted, we want to simply slice `start..end + 1`.\n         // If we are exhausted, then slicing with `end + 1..end + 1` gives us an\n         // empty range that is still subject to bounds-checks for that endpoint."}, {"sha": "ee544b4842e864d3de9ecd866b1061f2ff1e3315", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -1032,10 +1032,11 @@ impl<T> *const [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n+    pub const unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked(self) }"}, {"sha": "3374b48c88c6b2b06419c4c6b09704de2d424c6a", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -1302,10 +1302,11 @@ impl<T> *mut [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n+    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked_mut(self) }"}, {"sha": "c744ad5dd2deb002d5b2001a6a0e02339c61dbb4", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -630,10 +630,11 @@ impl<T> NonNull<[T]> {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n+    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         // As a consequence, the resulting pointer cannot be null."}, {"sha": "7e6fbbe353889cfa7b4fbeb8469b216cc70762e4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -1,12 +1,14 @@\n //! Indexing implementations for `[T]`.\n \n+use crate::intrinsics::const_eval_select;\n use crate::ops;\n use crate::ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::Index<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I> const ops::Index<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     type Output = I::Output;\n \n@@ -17,9 +19,10 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::IndexMut<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I> const ops::IndexMut<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n@@ -31,39 +34,80 @@ where\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select(\n+            (index, len),\n+            slice_start_index_len_fail_ct,\n+            slice_start_index_len_fail_rt,\n+        )\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range start index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_start_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice start index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select((index, len), slice_end_index_len_fail_ct, slice_end_index_len_fail_rt)\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_end_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice end index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe { const_eval_select((index, end), slice_index_order_fail_ct, slice_index_order_fail_rt) }\n+}\n+\n+// FIXME const-hack\n+fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n+const fn slice_index_order_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice index start is larger than end\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_overflow_fail() -> ! {\n+const fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_overflow_fail() -> ! {\n+const fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n@@ -153,7 +197,8 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for usize {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for usize {\n     type Output = T;\n \n     #[inline]\n@@ -197,7 +242,8 @@ unsafe impl<T> SliceIndex<[T]> for usize {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::Range<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -261,7 +307,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeTo<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -298,7 +345,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFrom<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -343,7 +391,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFull {\n     type Output = [T];\n \n     #[inline]\n@@ -378,7 +427,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -421,7 +471,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n \n     #[inline]"}, {"sha": "7311fe40e04d68c730dec9cf048355c9dddb14f1", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -324,10 +324,11 @@ impl<T> [T] {\n     /// assert_eq!(None, v.get(0..4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get<I>(&self, index: I) -> Option<&I::Output>\n+    pub const fn get<I>(&self, index: I) -> Option<&I::Output>\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         index.get(self)\n     }\n@@ -348,10 +349,11 @@ impl<T> [T] {\n     /// assert_eq!(x, &[0, 42, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n+    pub const fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         index.get_mut(self)\n     }\n@@ -379,10 +381,11 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n+    pub const unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;\n         // the slice is dereferenceable because `self` is a safe reference.\n@@ -415,10 +418,11 @@ impl<T> [T] {\n     /// assert_eq!(x, &[1, 13, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n+    pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n         // the slice is dereferenceable because `self` is a safe reference."}, {"sha": "f66bab999a98a0b832731ee18a30ea7005297351", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -79,7 +79,23 @@ use iter::{MatchesInternal, SplitNInternal};\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n+#[rustc_allow_const_fn_unstable(const_eval_select)]\n+const fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n+    // SAFETY: panics for both branches\n+    unsafe {\n+        crate::intrinsics::const_eval_select(\n+            (s, begin, end),\n+            slice_error_fail_ct,\n+            slice_error_fail_rt,\n+        )\n+    }\n+}\n+\n+const fn slice_error_fail_ct(_: &str, _: usize, _: usize) -> ! {\n+    panic!(\"failed to slice string\");\n+}\n+\n+fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {\n     const MAX_DISPLAY_LENGTH: usize = 256;\n     let trunc_len = s.floor_char_boundary(MAX_DISPLAY_LENGTH);\n     let s_trunc = &s[..trunc_len];\n@@ -189,8 +205,9 @@ impl str {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]\n     #[inline]\n-    pub fn is_char_boundary(&self, index: usize) -> bool {\n+    pub const fn is_char_boundary(&self, index: usize) -> bool {\n         // 0 is always ok.\n         // Test for 0 explicitly so that it can optimize out the check\n         // easily and skip reading string data for that case.\n@@ -418,8 +435,9 @@ impl str {\n     /// assert!(v.get(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+    pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n         i.get(self)\n     }\n \n@@ -450,8 +468,9 @@ impl str {\n     /// assert_eq!(\"HEllo\", v);\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+    pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n         i.get_mut(self)\n     }\n \n@@ -482,8 +501,9 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+    pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n@@ -517,8 +537,12 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+    pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n+        &mut self,\n+        i: I,\n+    ) -> &mut I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is."}, {"sha": "8b6b4fa02f8334525efd44c2f4a1a8de620cb6e1", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -53,9 +53,10 @@ impl PartialOrd for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ops::Index<I> for str\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<I> const ops::Index<I> for str\n where\n-    I: SliceIndex<str>,\n+    I: ~const SliceIndex<str>,\n {\n     type Output = I::Output;\n \n@@ -66,9 +67,10 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ops::IndexMut<I> for str\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<I> const ops::IndexMut<I> for str\n where\n-    I: SliceIndex<str>,\n+    I: ~const SliceIndex<str>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n@@ -79,7 +81,7 @@ where\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn str_index_overflow_fail() -> ! {\n+const fn str_index_overflow_fail() -> ! {\n     panic!(\"attempted to index str up to maximum usize\");\n }\n \n@@ -96,7 +98,8 @@ fn str_index_overflow_fail() -> ! {\n ///\n /// Equivalent to `&self[0 .. len]` or `&mut self[0 .. len]`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeFull {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeFull {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -160,7 +163,8 @@ unsafe impl SliceIndex<str> for ops::RangeFull {\n /// // &s[3 .. 100];\n /// ```\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::Range<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::Range<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -247,7 +251,8 @@ unsafe impl SliceIndex<str> for ops::Range<usize> {\n /// Panics if `end` does not point to the starting byte offset of a\n /// character (as defined by `is_char_boundary`), or if `end > len`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeTo<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeTo<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -317,7 +322,8 @@ unsafe impl SliceIndex<str> for ops::RangeTo<usize> {\n /// Panics if `begin` does not point to the starting byte offset of\n /// a character (as defined by `is_char_boundary`), or if `begin > len`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeFrom<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -393,7 +399,8 @@ unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n /// to the ending byte offset of a character (`end + 1` is either a starting\n /// byte offset or equal to `len`), if `begin > end`, or if `end >= len`.\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeInclusive<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -444,7 +451,8 @@ unsafe impl SliceIndex<str> for ops::RangeInclusive<usize> {\n /// (`end + 1` is either a starting byte offset as defined by\n /// `is_char_boundary`, or equal to `len`), or if `end >= len`.\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {"}, {"sha": "9ab409bbdcdf8e9282935b145a6973064fea4979", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -23,8 +23,8 @@ LL |     let _ = s.get(4);\n note: required by a bound in `core::str::<impl str>::get`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n+LL |     pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -40,8 +40,8 @@ LL |     let _ = s.get_unchecked(4);\n note: required by a bound in `core::str::<impl str>::get_unchecked`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n-   |                                    ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n+LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:17"}, {"sha": "5956e363b0c09b2bb5a7a7da21888b296786f246", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe034cb43baf6fe415ca0f530cd72614df447b70/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe034cb43baf6fe415ca0f530cd72614df447b70/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=fe034cb43baf6fe415ca0f530cd72614df447b70", "patch": "@@ -47,8 +47,8 @@ LL |     s.get_mut(1);\n note: required by a bound in `core::str::<impl str>::get_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n-   |                       ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n+LL |     pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -64,8 +64,8 @@ LL |     s.get_unchecked_mut(1);\n note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n-   |                                        ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n+LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:5"}]}