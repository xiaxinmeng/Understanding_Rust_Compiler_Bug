{"sha": "78f0c7fd6433c60d031311dacbf9a117b05e64b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjBjN2ZkNjQzM2M2MGQwMzEzMTFkYWNiZjlhMTE3YjA1ZTY0YjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-20T18:46:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-20T18:46:27Z"}, "message": "check_match: unify some lowering code and fix some ICEs", "tree": {"sha": "7912360ea86d93d338819fcb3dddf494f3521b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7912360ea86d93d338819fcb3dddf494f3521b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f0c7fd6433c60d031311dacbf9a117b05e64b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f0c7fd6433c60d031311dacbf9a117b05e64b3", "html_url": "https://github.com/rust-lang/rust/commit/78f0c7fd6433c60d031311dacbf9a117b05e64b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f0c7fd6433c60d031311dacbf9a117b05e64b3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71450c7aadac3a94889744143127962c4e991f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/71450c7aadac3a94889744143127962c4e991f60", "html_url": "https://github.com/rust-lang/rust/commit/71450c7aadac3a94889744143127962c4e991f60"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "20183fd55c871ccfd208cbef9af9ed6791421acb", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -582,15 +582,12 @@ crate struct MatchCheckCtxt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n-    crate fn create_and_enter<F, R>(\n+    crate fn create_and_enter<R>(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         module: DefId,\n-        f: F,\n-    ) -> R\n-    where\n-        F: for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R,\n-    {\n+        f: impl for<'b> FnOnce(MatchCheckCtxt<'b, 'tcx>) -> R,\n+    ) -> R {\n         let pattern_arena = TypedArena::default();\n \n         f(MatchCheckCtxt { tcx, param_env, module, pattern_arena: &pattern_arena })"}, {"sha": "5462d08e3cca929b77c5caf723b8d8ff1338be9f", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -121,6 +121,24 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         check_for_bindings_named_same_as_variants(self, pat);\n     }\n \n+    fn lower_pattern<'p>(\n+        &self,\n+        cx: &mut MatchCheckCtxt<'p, 'tcx>,\n+        pat: &'tcx hir::Pat<'tcx>,\n+        have_errors: &mut bool,\n+    ) -> (&'p super::Pat<'tcx>, Ty<'tcx>) {\n+        let mut patcx = PatCtxt::new(self.tcx, self.param_env, self.tables);\n+        patcx.include_lint_checks();\n+        let pattern = patcx.lower_pattern(pat);\n+        let pattern_ty = pattern.ty;\n+        let pattern: &_ = cx.pattern_arena.alloc(expand_pattern(cx, pattern));\n+        if !patcx.errors.is_empty() {\n+            *have_errors = true;\n+            patcx.report_inlining_errors(pat.span);\n+        }\n+        (pattern, pattern_ty)\n+    }\n+\n     fn check_match(\n         &mut self,\n         scrut: &hir::Expr<'_>,\n@@ -139,14 +157,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             let inlined_arms: Vec<_> = arms\n                 .iter()\n                 .map(|arm| {\n-                    let mut patcx = PatCtxt::new(self.tcx, self.param_env, self.tables);\n-                    patcx.include_lint_checks();\n-                    let pattern = patcx.lower_pattern(&arm.pat);\n-                    let pattern: &_ = cx.pattern_arena.alloc(expand_pattern(cx, pattern));\n-                    if !patcx.errors.is_empty() {\n-                        patcx.report_inlining_errors(arm.pat.span);\n-                        have_errors = true;\n-                    }\n+                    let (pattern, _) = self.lower_pattern(cx, &arm.pat, &mut have_errors);\n                     (pattern, &*arm.pat, arm.guard.is_some())\n                 })\n                 .collect();\n@@ -171,11 +182,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     fn check_irrefutable(&self, pat: &'tcx Pat<'tcx>, origin: &str, sp: Option<Span>) {\n         let module = self.tcx.hir().get_module_parent(pat.hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n-            let mut patcx = PatCtxt::new(self.tcx, self.param_env, self.tables);\n-            patcx.include_lint_checks();\n-            let pattern = patcx.lower_pattern(pat);\n-            let pattern_ty = pattern.ty;\n-            let pattern = cx.pattern_arena.alloc(expand_pattern(cx, pattern));\n+            let (pattern, pattern_ty) = self.lower_pattern(cx, pat, &mut false);\n             let pats: Matrix<'_, '_> = vec![PatStack::from_pattern(pattern)].into_iter().collect();\n \n             let witnesses = match check_not_useful(cx, pattern_ty, &pats, pat.hir_id) {"}, {"sha": "95ead6b5d4a611589fa90f7bcb5377f598b81555", "filename": "src/test/ui/pattern/issue-68393-let-pat-assoc-constant.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.rs?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,26 @@\n+pub enum EFoo {\n+    A,\n+}\n+\n+pub trait Foo {\n+    const X: EFoo;\n+}\n+\n+struct Abc;\n+\n+impl Foo for Abc {\n+    const X: EFoo = EFoo::A;\n+}\n+\n+struct Def;\n+impl Foo for Def {\n+    const X: EFoo = EFoo::A;\n+}\n+\n+pub fn test<A: Foo, B: Foo>(arg: EFoo, A::X: EFoo) {\n+    //~^ ERROR associated consts cannot be referenced in patterns\n+    let A::X = arg;\n+    //~^ ERROR associated consts cannot be referenced in patterns\n+}\n+\n+fn main() {}"}, {"sha": "54ecc24981f80943769fdd3da5ed082c8a89c081", "filename": "src/test/ui/pattern/issue-68393-let-pat-assoc-constant.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68393-let-pat-assoc-constant.stderr?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,15 @@\n+error[E0158]: associated consts cannot be referenced in patterns\n+  --> $DIR/issue-68393-let-pat-assoc-constant.rs:20:40\n+   |\n+LL | pub fn test<A: Foo, B: Foo>(arg: EFoo, A::X: EFoo) {\n+   |                                        ^^^^\n+\n+error[E0158]: associated consts cannot be referenced in patterns\n+  --> $DIR/issue-68393-let-pat-assoc-constant.rs:22:9\n+   |\n+LL |     let A::X = arg;\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0158`."}, {"sha": "f10a7f2d8a54f0be593e3b43c55d3e03215d2da3", "filename": "src/test/ui/pattern/issue-68394-let-pat-runtime-value.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.rs?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 255u8;\n+    let 0u8..=x = 0;\n+    //~^ ERROR runtime values cannot be referenced in patterns\n+}"}, {"sha": "c1508bd71ff7a6c1f6cdc8d205fb258b58cdb954", "filename": "src/test/ui/pattern/issue-68394-let-pat-runtime-value.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68394-let-pat-runtime-value.stderr?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: runtime values cannot be referenced in patterns\n+  --> $DIR/issue-68394-let-pat-runtime-value.rs:3:15\n+   |\n+LL |     let 0u8..=x = 0;\n+   |               ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "afc599a4b22b6a0efbedcaa4adeeb4f12fd700d2", "filename": "src/test/ui/pattern/issue-68396-let-float-bug.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.rs?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let 1234567890123456789012345678901234567890e-340: f64 = 0.0;\n+    //~^ ERROR could not evaluate float literal (see issue #31407)\n+\n+    fn param(1234567890123456789012345678901234567890e-340: f64) {}\n+    //~^ ERROR could not evaluate float literal (see issue #31407)\n+}"}, {"sha": "618aa4b5021f10e3aa053633a3403056a465c0a1", "filename": "src/test/ui/pattern/issue-68396-let-float-bug.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f0c7fd6433c60d031311dacbf9a117b05e64b3/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-68396-let-float-bug.stderr?ref=78f0c7fd6433c60d031311dacbf9a117b05e64b3", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: could not evaluate float literal (see issue #31407)\n+  --> $DIR/issue-68396-let-float-bug.rs:2:9\n+   |\n+LL |     let 1234567890123456789012345678901234567890e-340: f64 = 0.0;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0080]: could not evaluate float literal (see issue #31407)\n+  --> $DIR/issue-68396-let-float-bug.rs:5:14\n+   |\n+LL |     fn param(1234567890123456789012345678901234567890e-340: f64) {}\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}