{"sha": "5aff5beb2a55ae380edd03c36db1f466c6b8644d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZmY1YmViMmE1NWFlMzgwZWRkMDNjMzZkYjFmNDY2YzZiODY0NGQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-29T03:51:45Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-29T07:11:36Z"}, "message": "More fine-grained file-lines", "tree": {"sha": "156f5fc826a1cc688a415a78f280d6d29fdc952f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156f5fc826a1cc688a415a78f280d6d29fdc952f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aff5beb2a55ae380edd03c36db1f466c6b8644d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aff5beb2a55ae380edd03c36db1f466c6b8644d", "html_url": "https://github.com/rust-lang/rust/commit/5aff5beb2a55ae380edd03c36db1f466c6b8644d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aff5beb2a55ae380edd03c36db1f466c6b8644d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f5a515ef025ed629cf3cf1c04ed783c9a371c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f5a515ef025ed629cf3cf1c04ed783c9a371c6", "html_url": "https://github.com/rust-lang/rust/commit/74f5a515ef025ed629cf3cf1c04ed783c9a371c6"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "0d42582ff56c1ad4221eeed49da71e82c53fab6f", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -18,7 +18,7 @@ use syntax::parse::classify;\n \n use {Indent, Shape, Spanned};\n use chains::rewrite_chain;\n-use codemap::SpanUtils;\n+use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n use items::{span_hi_for_arg, span_lo_for_arg};\n@@ -111,9 +111,12 @@ pub fn format_expr(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n+    skip_out_of_file_lines_range!(context, expr.span);\n+\n     if contains_skip(&*expr.attrs) {\n         return Some(context.snippet(expr.span()));\n     }\n+\n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n             expr_vec.iter().map(|e| &**e),\n@@ -898,6 +901,8 @@ impl Rewrite for ast::Block {\n \n impl Rewrite for ast::Stmt {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        skip_out_of_file_lines_range!(context, self.span());\n+\n         let result = match self.node {\n             ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n             ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {"}, {"sha": "f4354549499fb0314e4572c85b3fb703d5647bce", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -17,7 +17,7 @@ use syntax::ast::ImplItem;\n use syntax::codemap::{BytePos, Span};\n \n use {Indent, Shape, Spanned};\n-use codemap::SpanUtils;\n+use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n@@ -50,6 +50,9 @@ impl Rewrite for ast::Local {\n             shape.width,\n             shape.indent\n         );\n+\n+        skip_out_of_file_lines_range!(context, self.span);\n+\n         let mut result = \"let \".to_owned();\n \n         // 4 = \"let \".len()"}, {"sha": "9c1717e8638999040723a59c481df7a662fc1c52", "filename": "src/utils.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -323,6 +323,31 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n     }\n }\n \n+// Return true if the given span does not intersect with file lines.\n+macro_rules! out_of_file_lines_range {\n+    ($self:ident, $span:expr) => {\n+        !$self.config\n+            .file_lines()\n+            .intersects(&$self.codemap.lookup_line_range($span))\n+    }\n+}\n+\n+macro_rules! skip_out_of_file_lines_range {\n+    ($self:ident, $span:expr) => {\n+        if out_of_file_lines_range!($self, $span) {\n+            return None;\n+        }\n+    }\n+}\n+\n+macro_rules! skip_out_of_file_lines_range_visitor {\n+    ($self:ident, $span:expr) => {\n+        if out_of_file_lines_range!($self, $span) {\n+            return;\n+        }\n+    }\n+}\n+\n // Wraps string-like values in an Option. Returns Some when the string adheres\n // to the Rewrite constraints defined for the Rewrite trait and else otherwise.\n pub fn wrap_str<S: AsRef<str>>(s: S, max_width: usize, shape: Shape) -> Option<S> {"}, {"sha": "389c606c54b9d504b395e3aed76ae76ebcd96386", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -67,14 +67,6 @@ impl<'a> FmtVisitor<'a> {\n             self.codemap.lookup_char_pos(stmt.span.hi)\n         );\n \n-        // FIXME(#434): Move this check to somewhere more central, eg Rewrite.\n-        if !self.config\n-            .file_lines()\n-            .intersects(&self.codemap.lookup_line_range(stmt.span))\n-        {\n-            return;\n-        }\n-\n         match stmt.node {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n@@ -264,6 +256,8 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn visit_item(&mut self, item: &ast::Item) {\n+        skip_out_of_file_lines_range_visitor!(self, item.span);\n+\n         // This is where we bail out if there is a skip attribute. This is only\n         // complex in the module case. It is complex because the module could be\n         // in a separate file and there might be attributes in both files, but\n@@ -465,6 +459,8 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n+        skip_out_of_file_lines_range_visitor!(self, ti.span);\n+\n         if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n             self.push_rewrite(ti.span, None);\n             return;\n@@ -517,6 +513,8 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n+        skip_out_of_file_lines_range_visitor!(self, ii.span);\n+\n         if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n             self.push_rewrite(ii.span, None);\n             return;\n@@ -565,6 +563,8 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn visit_mac(&mut self, mac: &ast::Mac, ident: Option<ast::Ident>, pos: MacroPosition) {\n+        skip_out_of_file_lines_range_visitor!(self, mac.span);\n+\n         // 1 = ;\n         let shape = Shape::indented(self.block_indent, self.config)\n             .sub_width(1)"}, {"sha": "41043d873ac3fbcc845dd94f479cbefb0b2905c6", "filename": "tests/source/file-lines-item.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/tests%2Fsource%2Ffile-lines-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/tests%2Fsource%2Ffile-lines-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-item.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-item.rs\",\"range\":[5,7]}]\n+\n+use foo::{c, b, a};\n+\n+fn foo() {\n+    bar ( ) ;\n+}\n+\n+impl Drop for Context {\n+     fn drop(&mut self) {\n+    }\n+}"}, {"sha": "b5561040ac6ebd5d9d0be867d133c3e072da103f", "filename": "tests/target/file-lines-item.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aff5beb2a55ae380edd03c36db1f466c6b8644d/tests%2Ftarget%2Ffile-lines-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff5beb2a55ae380edd03c36db1f466c6b8644d/tests%2Ftarget%2Ffile-lines-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-item.rs?ref=5aff5beb2a55ae380edd03c36db1f466c6b8644d", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-item.rs\",\"range\":[5,7]}]\n+\n+use foo::{c, b, a};\n+\n+fn foo() {\n+    bar();\n+}\n+\n+impl Drop for Context {\n+     fn drop(&mut self) {\n+    }\n+}"}]}