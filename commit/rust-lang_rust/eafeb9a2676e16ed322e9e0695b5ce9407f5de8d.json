{"sha": "eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmViOWEyNjc2ZTE2ZWQzMjJlOWUwNjk1YjVjZTk0MDdmNWRlOGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-30T18:38:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T17:50:48Z"}, "message": "expand/builtin_macros: Minor cleanup", "tree": {"sha": "24acfbd6311258a234afc28d517efe24863e0c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24acfbd6311258a234afc28d517efe24863e0c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "html_url": "https://github.com/rust-lang/rust/commit/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbade652ed8ebac70f903e01f51cd92c4e4302c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbade652ed8ebac70f903e01f51cd92c4e4302c", "html_url": "https://github.com/rust-lang/rust/commit/3dbade652ed8ebac70f903e01f51cd92c4e4302c"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "b486eadd1a8bee4fcfff332e61255dfb3777c6c8", "filename": "src/librustc_builtin_macros/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_builtin_macros%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_builtin_macros%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Futil.rs?ref=eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "patch": "@@ -6,7 +6,7 @@ use rustc_span::Symbol;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment.\n-    let template = AttributeTemplate::only_word();\n+    let template = AttributeTemplate { word: true, ..Default::default() };\n     let attr = ecx.attribute(meta_item.clone());\n     validate_attr::check_builtin_attribute(ecx.parse_sess, &attr, name, template);\n }"}, {"sha": "55e9c70d637329a153802a7457e6eb6bb34cc3c0", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "patch": "@@ -270,10 +270,9 @@ pub trait MultiItemModifier {\n     ) -> Vec<Annotatable>;\n }\n \n-impl<F, T> MultiItemModifier for F\n+impl<F> MultiItemModifier for F\n where\n-    F: Fn(&mut ExtCtxt<'_>, Span, &ast::MetaItem, Annotatable) -> T,\n-    T: Into<Vec<Annotatable>>,\n+    F: Fn(&mut ExtCtxt<'_>, Span, &ast::MetaItem, Annotatable) -> Vec<Annotatable>,\n {\n     fn expand(\n         &self,\n@@ -282,13 +281,7 @@ where\n         meta_item: &ast::MetaItem,\n         item: Annotatable,\n     ) -> Vec<Annotatable> {\n-        (*self)(ecx, span, meta_item, item).into()\n-    }\n-}\n-\n-impl Into<Vec<Annotatable>> for Annotatable {\n-    fn into(self) -> Vec<Annotatable> {\n-        vec![self]\n+        self(ecx, span, meta_item, item)\n     }\n }\n "}, {"sha": "e0e38c2dba941ff3828bddcb8c0877a88c9b07a1", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafeb9a2676e16ed322e9e0695b5ce9407f5de8d/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=eafeb9a2676e16ed322e9e0695b5ce9407f5de8d", "patch": "@@ -85,19 +85,13 @@ impl AttributeGate {\n \n /// A template that the attribute input must match.\n /// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Default)]\n pub struct AttributeTemplate {\n     pub word: bool,\n     pub list: Option<&'static str>,\n     pub name_value_str: Option<&'static str>,\n }\n \n-impl AttributeTemplate {\n-    pub fn only_word() -> Self {\n-        Self { word: true, list: None, name_value_str: None }\n-    }\n-}\n-\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`."}]}