{"sha": "5138baf2ac742de601f29d22fc64e386da56c4c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMzhiYWYyYWM3NDJkZTYwMWYyOWQyMmZjNjRlMzg2ZGE1NmM0YzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T10:05:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T10:05:49Z"}, "message": "Merge #8021 #8022\n\n8021: Enable searching for builtin types r=matklad a=Veykril\n\nNot too sure how useful this is for reference search overall, but for completeness sake it should be there \r\n![image](https://user-images.githubusercontent.com/3757771/111132711-f69db600-8579-11eb-8c90-22fd6862d11f.png)\r\n\r\nAlso enables document highlighting for them.\r\n\n\n8022: some clippy::performance fixes r=matklad a=matthiaskrgr\n\nuse vec![] instead of Vec::new() + push()\r\navoid redundant clones\r\nuse chars instead of &str for single char patterns in ends_with() and starts_with()\r\nallocate some Vecs with capacity to avoid unnecessary resizing\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>", "tree": {"sha": "339b86881cb2d7aeef62f6547002808c83034503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339b86881cb2d7aeef62f6547002808c83034503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5138baf2ac742de601f29d22fc64e386da56c4c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTzF9CRBK7hj4Ov3rIwAAdHIIAHhKaREkSdaZ8qyxq6sRfxHI\nnUH3ro7fLCLf96GOHK7RfywrDq0yQtfYjnWKfuRq5MeXXFZEzzSUDnehduokCBsW\npzT/+a84KuKIbk8LQ520km70byvm0sj03a1oH4DeM6YO9Pvw4QJXdPSG00ztfAKd\n8IFAP8/8Uvz+AwZDQlKDUIg/QZU8I86CMaBP6hscL8qBFHsbE/387w/d0WJOd//x\n+D3vJxhW44l0eJSqaJwzdWskvWagXXdEht7jNvbWvJcYzYVxFwwMslZhdR5PlLiz\n0mPVOSZdaAdZ3udxnuvX6wcMAuFBMvt7mz5mbNWQ+6NtQLzWzc2gw3kGjLrLrYg=\n=18ci\n-----END PGP SIGNATURE-----\n", "payload": "tree 339b86881cb2d7aeef62f6547002808c83034503\nparent b39059e653edf1fad12abca92d8dae5d10007d4c\nparent 9763d9e8c4ca01a4df0d70877020ec7351403b75\nparent cad617bba054334e2172b9ef54f2ed82c6067794\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615802749 +0000\ncommitter GitHub <noreply@github.com> 1615802749 +0000\n\nMerge #8021 #8022\n\n8021: Enable searching for builtin types r=matklad a=Veykril\n\nNot too sure how useful this is for reference search overall, but for completeness sake it should be there \r\n![image](https://user-images.githubusercontent.com/3757771/111132711-f69db600-8579-11eb-8c90-22fd6862d11f.png)\r\n\r\nAlso enables document highlighting for them.\r\n\n\n8022: some clippy::performance fixes r=matklad a=matthiaskrgr\n\nuse vec![] instead of Vec::new() + push()\r\navoid redundant clones\r\nuse chars instead of &str for single char patterns in ends_with() and starts_with()\r\nallocate some Vecs with capacity to avoid unnecessary resizing\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5138baf2ac742de601f29d22fc64e386da56c4c2", "html_url": "https://github.com/rust-lang/rust/commit/5138baf2ac742de601f29d22fc64e386da56c4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5138baf2ac742de601f29d22fc64e386da56c4c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39059e653edf1fad12abca92d8dae5d10007d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b39059e653edf1fad12abca92d8dae5d10007d4c", "html_url": "https://github.com/rust-lang/rust/commit/b39059e653edf1fad12abca92d8dae5d10007d4c"}, {"sha": "9763d9e8c4ca01a4df0d70877020ec7351403b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/9763d9e8c4ca01a4df0d70877020ec7351403b75", "html_url": "https://github.com/rust-lang/rust/commit/9763d9e8c4ca01a4df0d70877020ec7351403b75"}, {"sha": "cad617bba054334e2172b9ef54f2ed82c6067794", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad617bba054334e2172b9ef54f2ed82c6067794", "html_url": "https://github.com/rust-lang/rust/commit/cad617bba054334e2172b9ef54f2ed82c6067794"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "caa760d211ccacfbf23413bd2451c92d00c2d412", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -266,8 +266,7 @@ impl ModuleDef {\n     }\n \n     pub fn canonical_path(&self, db: &dyn HirDatabase) -> Option<String> {\n-        let mut segments = Vec::new();\n-        segments.push(self.name(db)?.to_string());\n+        let mut segments = vec![self.name(db)?.to_string()];\n         for m in self.module(db)?.path_to_root(db) {\n             segments.extend(m.name(db).map(|it| it.to_string()))\n         }"}, {"sha": "5e908b22374df3edc92bdb58aa05f187dc544f30", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -108,7 +108,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n }\n \n fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n-    let mut result = Vec::<tt::TokenTree>::new();\n+    let mut result = Vec::<tt::TokenTree>::with_capacity(n * 2);\n     result.push(\n         tt::Leaf::Punct(tt::Punct {\n             char: '<',"}, {"sha": "d571ed5593ee6b4f7c8dc6cc0155e7420b1965b9", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -218,7 +218,7 @@ mod tests {\n         let result = join_lines(&file, range);\n \n         let actual = {\n-            let mut actual = before.to_string();\n+            let mut actual = before;\n             result.apply(&mut actual);\n             actual\n         };\n@@ -622,7 +622,7 @@ fn foo() {\n         let parse = SourceFile::parse(&before);\n         let result = join_lines(&parse.tree(), sel);\n         let actual = {\n-            let mut actual = before.to_string();\n+            let mut actual = before;\n             result.apply(&mut actual);\n             actual\n         };"}, {"sha": "ec7c7686d5207b1f89abe4b2a1b66512e2c37e3c", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -29,7 +29,7 @@ use crate::{display::TryToNav, FilePosition, NavigationTarget};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n-    pub declaration: Declaration,\n+    pub declaration: Option<Declaration>,\n     pub references: FxHashMap<FileId, Vec<(TextRange, Option<ReferenceAccess>)>>,\n }\n \n@@ -91,10 +91,10 @@ pub(crate) fn find_all_refs(\n             _ => {}\n         }\n     }\n-    let nav = def.try_to_nav(sema.db)?;\n-    let decl_range = nav.focus_or_full_range();\n-\n-    let declaration = Declaration { nav, access: decl_access(&def, &syntax, decl_range) };\n+    let declaration = def.try_to_nav(sema.db).map(|nav| {\n+        let decl_range = nav.focus_or_full_range();\n+        Declaration { nav, access: decl_access(&def, &syntax, decl_range) }\n+    });\n     let references = usages\n         .into_iter()\n         .map(|(file_id, refs)| {\n@@ -1004,8 +1004,7 @@ impl Foo {\n         let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();\n-        {\n-            let decl = refs.declaration;\n+        if let Some(decl) = refs.declaration {\n             format_to!(actual, \"{}\", decl.nav.debug_render());\n             if let Some(access) = decl.access {\n                 format_to!(actual, \" {:?}\", access)\n@@ -1258,4 +1257,17 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_primitives() {\n+        check(\n+            r#\"\n+fn foo(_: bool) -> bo$0ol { true }\n+\"#,\n+            expect![[r#\"\n+                FileId(0) 10..14\n+                FileId(0) 19..23\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "5340b638a022128bdf0d48f22eaffdbcf1108151", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -510,7 +510,8 @@ fn source_edit_from_def(\n     def: Definition,\n     new_name: &str,\n ) -> RenameResult<(FileId, TextEdit)> {\n-    let nav = def.try_to_nav(sema.db).unwrap();\n+    let nav =\n+        def.try_to_nav(sema.db).ok_or_else(|| format_err!(\"No references found at position\"))?;\n \n     let mut replacement_text = String::new();\n     let mut repl_range = nav.focus_or_full_range();"}, {"sha": "a718faf6389e87e74ebb8ed3e50568ddf6f0c681", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -145,9 +145,8 @@ mod tests {\n     use super::*;\n \n     fn do_type_char(char_typed: char, before: &str) -> Option<String> {\n-        let (offset, before) = extract_offset(before);\n+        let (offset, mut before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n-        let mut before = before.to_string();\n         edit.apply(&mut before);\n         let parse = SourceFile::parse(&before);\n         on_char_typed_inner(&parse.tree(), offset, char_typed).map(|it| {"}, {"sha": "cee4eec108be0b8e3a656e21325528df1afbc966", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn add_format_like_completions(\n /// Checks whether provided item is a string literal.\n fn string_literal_contents(item: &ast::String) -> Option<String> {\n     let item = item.text();\n-    if item.len() >= 2 && item.starts_with(\"\\\"\") && item.ends_with(\"\\\"\") {\n+    if item.len() >= 2 && item.starts_with('\\\"') && item.ends_with('\\\"') {\n         return Some(item[1..item.len() - 1].to_owned());\n     }\n "}, {"sha": "f86e5ce93ac1575d19c092fdce6d8ac62adc3f35", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -70,7 +70,7 @@ impl Definition {\n                 hir::ModuleDef::Static(it) => it.name(db)?,\n                 hir::ModuleDef::Trait(it) => it.name(db),\n                 hir::ModuleDef::TypeAlias(it) => it.name(db),\n-                hir::ModuleDef::BuiltinType(_) => return None,\n+                hir::ModuleDef::BuiltinType(it) => it.name(),\n             },\n             Definition::SelfType(_) => return None,\n             Definition::Local(it) => it.name(db)?,"}, {"sha": "d00a8b6e709caee45605214ce422739f05366bde", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -6,7 +6,7 @@\n \n use std::{convert::TryInto, mem};\n \n-use base_db::{FileId, FileRange, SourceDatabaseExt};\n+use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n@@ -138,6 +138,20 @@ impl IntoIterator for SearchScope {\n impl Definition {\n     fn search_scope(&self, db: &RootDatabase) -> SearchScope {\n         let _p = profile::span(\"search_scope\");\n+\n+        if let Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) = self {\n+            let mut res = FxHashMap::default();\n+\n+            let graph = db.crate_graph();\n+            for krate in graph.iter() {\n+                let root_file = graph[krate].root_file_id;\n+                let source_root_id = db.file_source_root(root_file);\n+                let source_root = db.source_root(source_root_id);\n+                res.extend(source_root.iter().map(|id| (id, None)));\n+            }\n+            return SearchScope::new(res);\n+        }\n+\n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),"}, {"sha": "b715ebfc4c9b39393df63299b72a9f79446ac838", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -222,14 +222,10 @@ fn convert_doc_comment(token: &syntax::SyntaxToken) -> Option<Vec<tt::TokenTree>\n     let doc = comment.kind().doc?;\n \n     // Make `doc=\"\\\" Comments\\\"\"\n-    let mut meta_tkns = Vec::new();\n-    meta_tkns.push(mk_ident(\"doc\"));\n-    meta_tkns.push(mk_punct('='));\n-    meta_tkns.push(mk_doc_literal(&comment));\n+    let meta_tkns = vec![mk_ident(\"doc\"), mk_punct('='), mk_doc_literal(&comment)];\n \n     // Make `#![]`\n-    let mut token_trees = Vec::new();\n-    token_trees.push(mk_punct('#'));\n+    let mut token_trees = vec![mk_punct('#')];\n     if let ast::CommentPlacement::Inner = doc {\n         token_trees.push(mk_punct('!'));\n     }"}, {"sha": "b903658fb9c878c4d49ed337b3190653b0fccb5f", "filename": "crates/proc_macro_api/src/version.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn read_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n     }\n \n     let version_part = items.next().ok_or(err!(\"no version string\"))?;\n-    let mut version_parts = version_part.split(\"-\");\n+    let mut version_parts = version_part.split('-');\n     let version = version_parts.next().ok_or(err!(\"no version\"))?;\n     let channel = version_parts.next().unwrap_or_default().to_string();\n \n@@ -51,7 +51,7 @@ pub(crate) fn read_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n     let date = date[0..date.len() - 2].to_string();\n \n     let version_numbers = version\n-        .split(\".\")\n+        .split('.')\n         .map(|it| it.parse::<usize>())\n         .collect::<Result<Vec<_>, _>>()\n         .map_err(|_| err!(\"version number error\"))?;"}, {"sha": "312708575e0f5c336027dfa1db6f2b2bb8d9e628", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -6,7 +6,7 @@ use crate::{cfg_flag::CfgFlag, utf8_stdout};\n \n pub(crate) fn get(target: Option<&str>) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n-    let mut res = Vec::new();\n+    let mut res = Vec::with_capacity(6 * 2 + 1);\n \n     // Some nightly-only cfgs, which are required for stdlib\n     res.push(CfgFlag::Atom(\"target_thread_local\".into()));"}, {"sha": "6fb7da79cb149056b5550e3a77f727f0a1758524", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -846,9 +846,9 @@ pub(crate) fn handle_references(\n     };\n \n     let decl = if params.context.include_declaration {\n-        Some(FileRange {\n-            file_id: refs.declaration.nav.file_id,\n-            range: refs.declaration.nav.focus_or_full_range(),\n+        refs.declaration.map(|decl| FileRange {\n+            file_id: decl.nav.file_id,\n+            range: decl.nav.focus_or_full_range(),\n         })\n     } else {\n         None\n@@ -1153,14 +1153,12 @@ pub(crate) fn handle_document_highlight(\n         Some(refs) => refs,\n     };\n \n-    let decl = if refs.declaration.nav.file_id == position.file_id {\n-        Some(DocumentHighlight {\n-            range: to_proto::range(&line_index, refs.declaration.nav.focus_or_full_range()),\n-            kind: refs.declaration.access.map(to_proto::document_highlight_kind),\n-        })\n-    } else {\n-        None\n-    };\n+    let decl = refs.declaration.filter(|decl| decl.nav.file_id == position.file_id).map(|decl| {\n+        DocumentHighlight {\n+            range: to_proto::range(&line_index, decl.nav.focus_or_full_range()),\n+            kind: decl.access.map(to_proto::document_highlight_kind),\n+        }\n+    });\n \n     let file_refs = refs.references.get(&position.file_id).map_or(&[][..], Vec::as_slice);\n     let mut res = Vec::with_capacity(file_refs.len() + 1);"}, {"sha": "3ca7f80403e5efbe408525d04f48addbe8abb03a", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5138baf2ac742de601f29d22fc64e386da56c4c2/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=5138baf2ac742de601f29d22fc64e386da56c4c2", "patch": "@@ -360,11 +360,11 @@ mod tests {\n             \"Completion with disjoint edits is valid\"\n         );\n         assert!(\n-            !all_edits_are_disjoint(&completion_with_disjoint_edits, &[joint_edit.clone()]),\n+            !all_edits_are_disjoint(&completion_with_disjoint_edits, &[joint_edit]),\n             \"Completion with disjoint edits and joint extra edit is invalid\"\n         );\n         assert!(\n-            all_edits_are_disjoint(&completion_with_disjoint_edits, &[disjoint_edit_2.clone()]),\n+            all_edits_are_disjoint(&completion_with_disjoint_edits, &[disjoint_edit_2]),\n             \"Completion with disjoint edits and joint extra edit is valid\"\n         );\n     }"}]}