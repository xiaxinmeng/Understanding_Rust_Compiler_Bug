{"sha": "bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMGZkYmIzNjRiYTY5YzY5Yjg2N2Y5NmJjMWVhOWI1OTE3N2ZiNzY=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-28T07:09:44Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-28T07:09:44Z"}, "message": "Merge pull request #543 from eefriedman/macro-crash\n\nFix crash speculatively parsing macro arguments as expressions.", "tree": {"sha": "5e7e38ff64c9a6ac4ef668dc1bf58534d9213310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7e38ff64c9a6ac4ef668dc1bf58534d9213310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "html_url": "https://github.com/rust-lang/rust/commit/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3abe93596a24fbc35f925259674d43cc128e1a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abe93596a24fbc35f925259674d43cc128e1a02", "html_url": "https://github.com/rust-lang/rust/commit/3abe93596a24fbc35f925259674d43cc128e1a02"}, {"sha": "1c235de97dc6105a06b525bde126ab2704d41093", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c235de97dc6105a06b525bde126ab2704d41093", "html_url": "https://github.com/rust-lang/rust/commit/1c235de97dc6105a06b525bde126ab2704d41093"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "951b407ef43f2b22c6a3aaabc78312ae587f9ddb", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -422,7 +422,7 @@ impl Rewrite for ast::Block {\n             return Some(user_str);\n         }\n \n-        let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n+        let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n         visitor.block_indent = context.block_indent;\n \n         let prefix = match self.rules {\n@@ -833,7 +833,9 @@ impl Rewrite for ast::Arm {\n         let attr_str = if !attrs.is_empty() {\n             // We only use this visitor for the attributes, should we use it for\n             // more?\n-            let mut attr_visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n+            let mut attr_visitor = FmtVisitor::from_codemap(context.parse_session,\n+                                                            context.config,\n+                                                            None);\n             attr_visitor.block_indent = context.block_indent;\n             attr_visitor.last_pos = attrs[0].span.lo;\n             if attr_visitor.visit_attrs(attrs) {"}, {"sha": "c7c2178e09861cabb1b145fc5276d11aa4d3bfbf", "filename": "src/lib.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -26,7 +26,8 @@ extern crate diff;\n extern crate term;\n \n use syntax::ast;\n-use syntax::codemap::{CodeMap, Span};\n+use syntax::codemap::Span;\n+use syntax::diagnostic::{EmitterWriter, Handler};\n use syntax::parse::{self, ParseSess};\n \n use std::ops::{Add, Sub};\n@@ -288,11 +289,15 @@ impl fmt::Display for FormatReport {\n }\n \n // Formatting which depends on the AST.\n-fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config, mode: WriteMode) -> FileMap {\n+fn fmt_ast(krate: &ast::Crate,\n+           parse_session: &ParseSess,\n+           config: &Config,\n+           mode: WriteMode)\n+           -> FileMap {\n     let mut file_map = FileMap::new();\n-    for (path, module) in modules::list_files(krate, codemap) {\n+    for (path, module) in modules::list_files(krate, parse_session.codemap()) {\n         let path = path.to_str().unwrap();\n-        let mut visitor = FmtVisitor::from_codemap(codemap, config, Some(mode));\n+        let mut visitor = FmtVisitor::from_codemap(parse_session, config, Some(mode));\n         visitor.format_separate_mod(module, path);\n         file_map.insert(path.to_owned(), visitor.buffer);\n     }\n@@ -382,9 +387,14 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n }\n \n pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n-    let parse_session = ParseSess::new();\n+    let mut parse_session = ParseSess::new();\n     let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n-    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config, mode);\n+\n+    // Suppress error output after parsing.\n+    let emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None));\n+    parse_session.span_diagnostic.handler = Handler::with_emitter(false, emitter);\n+\n+    let mut file_map = fmt_ast(&krate, &parse_session, config, mode);\n \n     // For some reason, the codemap does not include terminating\n     // newlines so we must add one on for each file. This is sad."}, {"sha": "389e29014f061a80d070920cdeb021e7628391fe", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -21,7 +21,7 @@\n \n use syntax::ast;\n use syntax::parse::token::{Eof, Comma, Token};\n-use syntax::parse::{ParseSess, tts_to_parser};\n+use syntax::parse::tts_to_parser;\n use syntax::codemap::{mk_sp, BytePos};\n \n use Indent;\n@@ -73,8 +73,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         };\n     }\n \n-    let parse_session = ParseSess::new();\n-    let mut parser = tts_to_parser(&parse_session, mac.node.tts.clone(), Vec::new());\n+    let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone(), Vec::new());\n     let mut expr_vec = Vec::new();\n \n     loop {"}, {"sha": "5ca8d2e8241828e6646197f15e86b5bfddc1a37e", "filename": "src/rewrite.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -11,6 +11,7 @@\n // A generic trait to abstract the rewriting of an element (of the AST).\n \n use syntax::codemap::{CodeMap, Span};\n+use syntax::parse::ParseSess;\n \n use Indent;\n use config::Config;\n@@ -27,6 +28,7 @@ pub trait Rewrite {\n }\n \n pub struct RewriteContext<'a> {\n+    pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n     pub config: &'a Config,\n     // Indentation due to nesting of blocks.\n@@ -36,6 +38,7 @@ pub struct RewriteContext<'a> {\n impl<'a> RewriteContext<'a> {\n     pub fn nested_context(&self) -> RewriteContext<'a> {\n         RewriteContext {\n+            parse_session: self.parse_session,\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent.block_indent(self.config),"}, {"sha": "534b2c877fd3a0e00fb384c3efecf9162cac3e5e", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -10,6 +10,7 @@\n \n use syntax::ast;\n use syntax::codemap::{self, CodeMap, Span, BytePos};\n+use syntax::parse::ParseSess;\n use syntax::visit;\n \n use strings::string_buffer::StringBuffer;\n@@ -23,6 +24,7 @@ use macros::rewrite_macro;\n use items::rewrite_static;\n \n pub struct FmtVisitor<'a> {\n+    pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n     pub buffer: StringBuffer,\n     pub last_pos: BytePos,\n@@ -363,12 +365,13 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn from_codemap(codemap: &'a CodeMap,\n+    pub fn from_codemap(parse_session: &'a ParseSess,\n                         config: &'a Config,\n                         mode: Option<WriteMode>)\n                         -> FmtVisitor<'a> {\n         FmtVisitor {\n-            codemap: codemap,\n+            parse_session: parse_session,\n+            codemap: parse_session.codemap(),\n             buffer: StringBuffer::new(),\n             last_pos: BytePos(0),\n             block_indent: Indent {\n@@ -461,13 +464,10 @@ impl<'a> FmtVisitor<'a> {\n         let vis = utils::format_visibility(vis);\n         let mut offset = self.block_indent;\n         offset.alignment += vis.len() + \"use \".len();\n-        let context = RewriteContext {\n-            codemap: self.codemap,\n-            config: self.config,\n-            block_indent: self.block_indent,\n-        };\n         // 1 = \";\"\n-        match vp.rewrite(&context, self.config.max_width - offset.width() - 1, offset) {\n+        match vp.rewrite(&self.get_context(),\n+                         self.config.max_width - offset.width() - 1,\n+                         offset) {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = codemap::mk_sp(self.last_pos, span.lo);\n@@ -493,6 +493,7 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn get_context(&self) -> RewriteContext {\n         RewriteContext {\n+            parse_session: self.parse_session,\n             codemap: self.codemap,\n             config: self.config,\n             block_indent: self.block_indent,"}, {"sha": "5b07596fdf9fd2d7b584167fce44ffa398b433b9", "filename": "tests/source/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -27,4 +27,6 @@ fn main() {\n     hamkaas!{ () };\n \n     macrowithbraces! {dont,    format, me}\n+\n+    x!(fn);\n }"}, {"sha": "2bcc6f9a3390f119bb04eb0cf48d722f292756dc", "filename": "tests/target/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0fdbb364ba69c69b867f96bc1ea9b59177fb76/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=bd0fdbb364ba69c69b867f96bc1ea9b59177fb76", "patch": "@@ -30,4 +30,6 @@ fn main() {\n     hamkaas!{ () };\n \n     macrowithbraces! {dont,    format, me}\n+\n+    x!(fn);\n }"}]}