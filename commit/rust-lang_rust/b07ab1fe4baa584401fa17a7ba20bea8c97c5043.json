{"sha": "b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2FiMWZlNGJhYTU4NDQwMWZhMTdhN2JhMjBiZWE4Yzk3YzUwNDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T20:24:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-10T10:38:51Z"}, "message": "Migrate users of io::fd_t to io::native::file::fd_t", "tree": {"sha": "4badfcd00208c0c9686b678b72c36183f54ca8fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4badfcd00208c0c9686b678b72c36183f54ca8fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "html_url": "https://github.com/rust-lang/rust/commit/b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0f3f5b510112395a40a0cb5bfbb6aac510d808", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0f3f5b510112395a40a0cb5bfbb6aac510d808", "html_url": "https://github.com/rust-lang/rust/commit/2e0f3f5b510112395a40a0cb5bfbb6aac510d808"}], "stats": {"total": 142, "additions": 41, "deletions": 101}, "files": [{"sha": "13f4cbf8e21254b3f62cde7364ba72dfbfb2b73d", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -26,6 +26,7 @@ pub fn load_errors(testfile: &Path) -> ~[ExpectedError] {\n }\n \n fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n+    let line = line.trim();\n     let error_tag = ~\"//~\";\n     let mut idx;\n     match line.find_str(error_tag) {"}, {"sha": "1c9944664eee6bc9f016dae81e27124fc7263c8c", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -68,9 +68,6 @@ fn debug_mem() -> bool {\n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n pub unsafe fn annihilate() {\n     use rt::local_heap::local_free;\n-    use io::WriterUtil;\n-    use io;\n-    use libc;\n     use sys;\n     use managed;\n \n@@ -126,14 +123,10 @@ pub unsafe fn annihilate() {\n \n     if debug_mem() {\n         // We do logging here w/o allocation.\n-        let dbg = libc::STDERR_FILENO as io::fd_t;\n-        dbg.write_str(\"annihilator stats:\");\n-        dbg.write_str(\"\\n  total_boxes: \");\n-        dbg.write_uint(stats.n_total_boxes);\n-        dbg.write_str(\"\\n  unique_boxes: \");\n-        dbg.write_uint(stats.n_unique_boxes);\n-        dbg.write_str(\"\\n  bytes_freed: \");\n-        dbg.write_uint(stats.n_bytes_freed);\n-        dbg.write_str(\"\\n\");\n+        rterrln!(\"annihilator stats:\\n  \\\n+                     total boxes: {}\\n  \\\n+                    unique boxes: {}\\n  \\\n+                     bytes freed: {}\",\n+                 stats.n_total_boxes, stats.n_unique_boxes, stats.n_bytes_freed);\n     }\n }"}, {"sha": "7fd27ea7ccc1e7bb2790580c27a8733d56361e27", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -13,7 +13,7 @@\n \n macro_rules! rterrln (\n     ($($arg:tt)*) => ( {\n-        ::rt::util::dumb_println(format!($($arg)*));\n+        format_args!(::rt::util::dumb_println, $($arg)*)\n     } )\n )\n "}, {"sha": "6be23a983abb24f939cfc548f4558f678936c451", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 6, "deletions": 50, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -9,11 +9,8 @@\n // except according to those terms.\n \n use cell::Cell;\n-use c_str::ToCStr;\n-use cast::transmute;\n-use io::{Writer, WriterUtil};\n-use io;\n-use libc::{c_char, size_t, STDERR_FILENO};\n+use c_str::{ToCStr, CString};\n+use libc::{c_char, size_t};\n use option::{Option, None, Some};\n use ptr::RawPtr;\n use rt::env;\n@@ -113,51 +110,10 @@ unsafe fn debug_borrow<T,P:RawPtr<T>>(tag: &'static str,\n                                                new_bits: uint,\n                                                filename: *c_char,\n                                                line: size_t) {\n-        let dbg = STDERR_FILENO as io::fd_t;\n-        dbg.write_str(tag);\n-        dbg.write_hex(p.to_uint());\n-        dbg.write_str(\" \");\n-        dbg.write_hex(old_bits);\n-        dbg.write_str(\" \");\n-        dbg.write_hex(new_bits);\n-        dbg.write_str(\" \");\n-        dbg.write_cstr(filename);\n-        dbg.write_str(\":\");\n-        dbg.write_hex(line as uint);\n-        dbg.write_str(\"\\n\");\n-    }\n-}\n-\n-trait DebugPrints {\n-    fn write_hex(&self, val: uint);\n-    unsafe fn write_cstr(&self, str: *c_char);\n-}\n-\n-impl DebugPrints for io::fd_t {\n-    fn write_hex(&self, mut i: uint) {\n-        let letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\n-                       '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n-        static UINT_NIBBLES: uint = ::uint::bytes << 1;\n-        let mut buffer = [0_u8, ..UINT_NIBBLES+1];\n-        let mut c = UINT_NIBBLES;\n-        while c > 0 {\n-            c -= 1;\n-            buffer[c] = letters[i & 0xF] as u8;\n-            i >>= 4;\n-        }\n-        self.write(buffer.slice(0, UINT_NIBBLES));\n-    }\n-\n-    unsafe fn write_cstr(&self, p: *c_char) {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        use libc::strlen;\n-        use vec;\n-\n-        let len = strlen(p);\n-        let p: *u8 = transmute(p);\n-        do vec::raw::buf_as_slice(p, len as uint) |s| {\n-            self.write(s);\n-        }\n+        let filename = CString::new(filename, false);\n+        rterrln!(\"{}{:#x} {:x} {:x} {}:{}\",\n+                 tag, p.to_uint(), old_bits, new_bits,\n+                 filename.as_str().unwrap(), line);\n     }\n }\n "}, {"sha": "d56ad9ce8483a398b06e27e518ce3b75dd836024", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -313,8 +313,11 @@ pub mod buffered;\n pub mod native {\n     /// Posix file I/O\n     pub mod file;\n-    /// # XXX - implement this\n-    pub mod stdio { }\n+    /// Process spawning and child management\n+    pub mod process;\n+    /// Posix stdio\n+    pub mod stdio;\n+\n     /// Sockets\n     /// # XXX - implement this\n     pub mod net {"}, {"sha": "660d1cd43595fcabdfc6597ff4e882ed4bd3621b", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -12,8 +12,6 @@ use fmt;\n use from_str::from_str;\n use libc::exit;\n use option::{Some, None, Option};\n-use rt;\n-use rt::util::dumb_println;\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n use u32;\n@@ -88,16 +86,16 @@ fn parse_logging_spec(spec: ~str) -> ~[LogDirective]{\n                         log_level = num;\n                     },\n                     _ => {\n-                        dumb_println(format!(\"warning: invalid logging spec \\\n-                                              '{}', ignoring it\", parts[1]));\n-                        continue;\n+                        rterrln!(\"warning: invalid logging spec '{}', \\\n+                                  ignoring it\", parts[1]);\n+                        continue\n                     }\n                 }\n             },\n             _ => {\n-                dumb_println(format!(\"warning: invalid logging spec '{}',\\\n-                                      ignoring it\", s));\n-                continue;\n+                rterrln!(\"warning: invalid logging spec '{}', \\\n+                          ignoring it\", s);\n+                continue\n             }\n         }\n         let dir = LogDirective {name: name, level: log_level};\n@@ -141,9 +139,9 @@ fn update_log_settings(crate_map: &CrateMap, settings: ~str) {\n     let mut dirs = ~[];\n     if settings.len() > 0 {\n         if settings == ~\"::help\" || settings == ~\"?\" {\n-        dumb_println(\"\\nCrate log map:\\n\");\n+            rterrln!(\"\\nCrate log map:\\n\");\n             do iter_crate_map(crate_map) |entry| {\n-                dumb_println(\" \"+entry.name);\n+                rterrln!(\" {}\", entry.name);\n             }\n             unsafe { exit(1); }\n         }\n@@ -157,12 +155,10 @@ fn update_log_settings(crate_map: &CrateMap, settings: ~str) {\n     }\n \n     if n_matches < (dirs.len() as u32) {\n-        dumb_println(format!(\"warning: got {} RUST_LOG specs but only matched\\n\\\n-                              {} of them. You may have mistyped a RUST_LOG \\\n-                              spec. \\n\\\n-                              Use RUST_LOG=::help to see the list of crates \\\n-                              and modules.\\n\",\n-                             dirs.len(), n_matches));\n+        rterrln!(\"warning: got {} RUST_LOG specs but only matched\\n\\\n+                  {} of them. You may have mistyped a RUST_LOG spec. \\n\\\n+                  Use RUST_LOG=::help to see the list of crates and modules.\\n\",\n+                 dirs.len(), n_matches);\n     }\n }\n \n@@ -174,24 +170,13 @@ pub struct StdErrLogger;\n \n impl Logger for StdErrLogger {\n     fn log(&mut self, args: &fmt::Arguments) {\n-        fmt::writeln(self as &mut rt::io::Writer, args);\n+        // FIXME(#6846): this should not call the blocking version of println,\n+        //               or at least the default loggers for tasks shouldn't do\n+        //               that\n+        ::rt::util::dumb_println(args);\n     }\n }\n \n-impl rt::io::Writer for StdErrLogger {\n-    fn write(&mut self, buf: &[u8]) {\n-        // Nothing like swapping between I/O implementations! In theory this\n-        // could use the libuv bindings for writing to file descriptors, but\n-        // that may not necessarily be desirable because logging should work\n-        // outside of the uv loop. (modify with caution)\n-        use io::Writer;\n-        let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n-        dbg.write(buf);\n-    }\n-\n-    fn flush(&mut self) {}\n-}\n-\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n pub fn init() {\n@@ -212,7 +197,7 @@ pub fn init() {\n         _ => {\n             match log_spec {\n                 Some(_) => {\n-                    dumb_println(\"warning: RUST_LOG set, but no crate map found.\");\n+                    rterrln!(\"warning: RUST_LOG set, but no crate map found.\");\n                 },\n                 None => {}\n             }"}, {"sha": "727bdb782d2c8b6cf38f61ae5d6bf33aa0211d67", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07ab1fe4baa584401fa17a7ba20bea8c97c5043/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use container::Container;\n+use fmt;\n use from_str::FromStr;\n use libc;\n use option::{Some, None, Option};\n@@ -74,10 +75,11 @@ pub fn default_sched_threads() -> uint {\n     }\n }\n \n-pub fn dumb_println(s: &str) {\n-    use io::WriterUtil;\n-    let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n-    dbg.write_str(s + \"\\n\");\n+pub fn dumb_println(args: &fmt::Arguments) {\n+    use rt::io::native::stdio::stderr;\n+    use rt::io::Writer;\n+    let mut out = stderr();\n+    fmt::writeln(&mut out as &mut Writer, args);\n }\n \n pub fn abort(msg: &str) -> ! {"}]}