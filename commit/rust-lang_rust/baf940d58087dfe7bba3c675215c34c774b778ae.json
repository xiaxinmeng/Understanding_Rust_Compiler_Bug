{"sha": "baf940d58087dfe7bba3c675215c34c774b778ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjk0MGQ1ODA4N2RmZTdiYmEzYzY3NTIxNWMzNGM3NzRiNzc4YWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T18:46:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-19T18:06:34Z"}, "message": "Add rustdoc to x.py check\n\nThis can often encounter errors after modifying rustc, so it's useful to include it in the steps that are checked.", "tree": {"sha": "54aa7675b3012ae406c6dd1d9046d2dde03e8184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54aa7675b3012ae406c6dd1d9046d2dde03e8184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf940d58087dfe7bba3c675215c34c774b778ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf940d58087dfe7bba3c675215c34c774b778ae", "html_url": "https://github.com/rust-lang/rust/commit/baf940d58087dfe7bba3c675215c34c774b778ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf940d58087dfe7bba3c675215c34c774b778ae/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "html_url": "https://github.com/rust-lang/rust/commit/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "cc501d6f9ba722e167f3f1644bb75c646f34b995", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baf940d58087dfe7bba3c675215c34c774b778ae/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf940d58087dfe7bba3c675215c34c774b778ae/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=baf940d58087dfe7bba3c675215c34c774b778ae", "patch": "@@ -310,7 +310,7 @@ impl<'a> Builder<'a> {\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n                 native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n-            Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend),\n+            Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend, check::Rustdoc),\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n                 test::MirOpt, test::Codegen, test::CodegenUnits, test::Incremental, test::Debuginfo,"}, {"sha": "4c84be4ed2ea5aaa834c3ad2b5c441c150ea6980", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/baf940d58087dfe7bba3c675215c34c774b778ae/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf940d58087dfe7bba3c675215c34c774b778ae/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=baf940d58087dfe7bba3c675215c34c774b778ae", "patch": "@@ -12,6 +12,7 @@\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n use builder::{RunConfig, Builder, ShouldRun, Step};\n+use tool::prepare_tool_cargo;\n use {Compiler, Mode};\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n@@ -41,6 +42,7 @@ impl Step for Std {\n \n         let out_dir = builder.stage_out(compiler, Mode::Libstd);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -170,11 +172,12 @@ impl Step for Test {\n     }\n \n     fn run(self, builder: &Builder) {\n-        let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n+        let target = self.target;\n \n         let out_dir = builder.stage_out(compiler, Mode::Libtest);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -190,6 +193,48 @@ impl Step for Test {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Rustdoc {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustdoc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustdoc {\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        let compiler = builder.compiler(0, builder.config.build);\n+        let target = self.target;\n+\n+        let mut cargo = prepare_tool_cargo(builder,\n+                                           compiler,\n+                                           target,\n+                                           \"check\",\n+                                           \"src/tools/rustdoc\");\n+\n+        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n+        println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n+        run_cargo(builder,\n+                  &mut cargo,\n+                  &rustdoc_stamp(builder, compiler, target),\n+                  true);\n+\n+        let libdir = builder.sysroot_libdir(compiler, target);\n+        add_to_sysroot(&builder, &libdir, &rustdoc_stamp(builder, compiler, target));\n+    }\n+}\n+\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n@@ -217,3 +262,9 @@ fn codegen_backend_stamp(builder: &Builder,\n     builder.cargo_out(compiler, Mode::Librustc, target)\n          .join(format!(\".librustc_trans-{}-check.stamp\", backend))\n }\n+\n+/// Cargo's output path for rustdoc in a given stage, compiled by a particular\n+/// compiler for the specified target.\n+pub fn rustdoc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n+    builder.cargo_out(compiler, Mode::Tool, target).join(\".rustdoc-check.stamp\")\n+}"}]}