{"sha": "3d3cfd3754d616db959015eb7bd3c6238961320a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkM2NmZDM3NTRkNjE2ZGI5NTkwMTVlYjdiZDNjNjIzODk2MTMyMGE=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-02-12T04:27:04Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-02-27T01:13:47Z"}, "message": "added new lint `implicit_clone`", "tree": {"sha": "1906758dad84db2faba7a9de7906a8c53936f87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1906758dad84db2faba7a9de7906a8c53936f87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d3cfd3754d616db959015eb7bd3c6238961320a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3cfd3754d616db959015eb7bd3c6238961320a", "html_url": "https://github.com/rust-lang/rust/commit/3d3cfd3754d616db959015eb7bd3c6238961320a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d3cfd3754d616db959015eb7bd3c6238961320a/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a", "html_url": "https://github.com/rust-lang/rust/commit/186bf1ccb4ab8a45302ddd4ac7b8e452d1e7bf4a"}], "stats": {"total": 320, "additions": 289, "deletions": 31}, "files": [{"sha": "687f744720202b6dd33bfc8fe9f45439f420787c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -2104,6 +2104,7 @@ Released 2018-09-13\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n+[`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n [`implicit_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub"}, {"sha": "fa8f03eb4453e190b11c4228e2216926a9d418d1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -769,6 +769,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::FROM_ITER_INSTEAD_OF_COLLECT,\n         &methods::GET_UNWRAP,\n+        &methods::IMPLICIT_CLONE,\n         &methods::INEFFICIENT_TO_STRING,\n         &methods::INSPECT_FOR_EACH,\n         &methods::INTO_ITER_ON_REF,\n@@ -1380,6 +1381,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n+        LintId::of(&methods::IMPLICIT_CLONE),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n         LintId::of(&methods::MAP_UNWRAP_OR),"}, {"sha": "a769493d11d3f7f6d9424730b0b5e27cbe80dd44", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -0,0 +1,32 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::ExprKind;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::TyS;\n+use rustc_span::symbol::Symbol;\n+\n+use super::IMPLICIT_CLONE;\n+use clippy_utils::is_diagnostic_assoc_item;\n+\n+pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, trait_diagnostic: Symbol) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(method_path, _, [arg], _) = &expr.kind;\n+        let return_type = cx.typeck_results().expr_ty(&expr);\n+        let input_type = cx.typeck_results().expr_ty(arg).peel_refs();\n+        if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n+        if TyS::same_type(return_type, input_type);\n+        if is_diagnostic_assoc_item(cx, expr_def_id, trait_diagnostic);\n+        then {\n+            span_lint_and_sugg(\n+                cx,IMPLICIT_CLONE,method_path.ident.span,\n+                &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_path.ident.name),\n+                \"consider using\",\n+                \"clone\".to_string(),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+    }\n+}"}, {"sha": "6f491144435ac118b7ff94fef20f85194a95c7d2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,6 +1,7 @@\n mod bind_instead_of_map;\n mod bytes_nth;\n mod filter_map_identity;\n+mod implicit_clone;\n mod inefficient_to_string;\n mod inspect_for_each;\n mod manual_saturating_arithmetic;\n@@ -1513,6 +1514,32 @@ declare_clippy_lint! {\n     \"replace `.bytes().nth()` with `.as_bytes().get()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the usage of `_.to_owned()`, `vec.to_vec()`, or similar when calling `_.clone()` would be clearer.\n+    ///\n+    /// **Why is this bad?** These methods do the same thing as `_.clone()` but may be confusing as\n+    /// to why we are calling `to_vec` on something that is already a `Vec` or calling `to_owned` on something that is already owned.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let a = vec![1, 2, 3];\n+    /// let b = a.to_vec();\n+    /// let c = a.to_owned();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = vec![1, 2, 3];\n+    /// let b = a.clone();\n+    /// let c = a.clone();\n+    /// ```\n+    pub IMPLICIT_CLONE,\n+    pedantic,\n+    \"implicitly cloning a value by invoking a function on its dereferenced type\"\n+}\n+\n pub struct Methods {\n     msrv: Option<RustcVersion>,\n }\n@@ -1579,6 +1606,7 @@ impl_lint_pass!(Methods => [\n     MAP_COLLECT_RESULT_UNIT,\n     FROM_ITER_INSTEAD_OF_COLLECT,\n     INSPECT_FOR_EACH,\n+    IMPLICIT_CLONE\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1670,6 +1698,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n             [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"for_each\", \"inspect\"] => inspect_for_each::lint(cx, expr, method_spans[1]),\n+            [\"to_owned\", ..] => implicit_clone::check(cx, expr, sym::ToOwned),\n+            [\"to_os_string\", ..] => implicit_clone::check(cx, expr, sym::OsStr),\n+            [\"to_path_buf\", ..] => implicit_clone::check(cx, expr, sym::Path),\n+            [\"to_vec\", ..] => implicit_clone::check(cx, expr, sym::slice),\n             _ => {},\n         }\n "}, {"sha": "2380ea4c7bfaec4a63c548cad390b9d3621c843c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -237,6 +237,22 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n     trt_id.map_or(false, |trt_id| match_def_path(cx, trt_id, path))\n }\n \n+/// Checks if the method call given in `expr` belongs to a trait or other container with a given\n+/// diagnostic item\n+pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n+    cx.tcx\n+        .opt_associated_item(def_id)\n+        .and_then(|associated_item| match associated_item.container {\n+            ty::TraitContainer(assoc_def_id) => Some(assoc_def_id),\n+            ty::ImplContainer(assoc_def_id) => match cx.tcx.type_of(assoc_def_id).kind() {\n+                ty::Adt(adt, _) => Some(adt.did),\n+                ty::Slice(_) => cx.tcx.get_diagnostic_item(sym::slice), // this isn't perfect but it works\n+                _ => None,\n+            },\n+        })\n+        .map_or(false, |assoc_def_id| cx.tcx.is_diagnostic_item(diag_item, assoc_def_id))\n+}\n+\n /// Checks if an expression references a variable of the given name.\n pub fn match_var(expr: &Expr<'_>, var: Symbol) -> bool {\n     if let ExprKind::Path(QPath::Resolved(None, ref path)) = expr.kind {"}, {"sha": "f44a3901fb48700973b336506e229b7dbe5220c9", "filename": "tests/ui/cmp_owned/without_suggestion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,4 +1,5 @@\n #[allow(clippy::unnecessary_operation)]\n+#[allow(clippy::implicit_clone)]\n \n fn main() {\n     let x = &Baz;"}, {"sha": "2ea3d8fac0d1ad09139b754c4c67a6af409833a4", "filename": "tests/ui/cmp_owned/without_suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,19 +1,19 @@\n error: this creates an owned instance just for comparison\n-  --> $DIR/without_suggestion.rs:6:5\n+  --> $DIR/without_suggestion.rs:7:5\n    |\n LL |     y.to_owned() == *x;\n    |     ^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n    |\n    = note: `-D clippy::cmp-owned` implied by `-D warnings`\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/without_suggestion.rs:10:5\n+  --> $DIR/without_suggestion.rs:11:5\n    |\n LL |     y.to_owned() == **x;\n    |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/without_suggestion.rs:17:9\n+  --> $DIR/without_suggestion.rs:18:9\n    |\n LL |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating"}, {"sha": "19101522163f951c656b2e0c0445fa289f624912", "filename": "tests/ui/implicit_clone.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -0,0 +1,108 @@\n+#![warn(clippy::implicit_clone)]\n+#![allow(clippy::redundant_clone)]\n+use std::borrow::Borrow;\n+use std::ffi::{OsStr, OsString};\n+use std::path::PathBuf;\n+\n+fn return_owned_from_slice(slice: &[u32]) -> Vec<u32> {\n+    slice.to_owned()\n+}\n+\n+pub fn own_same<T>(v: T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_same_from_ref<T>(v: &T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_different<T, U>(v: T) -> U\n+where\n+    T: ToOwned<Owned = U>,\n+{\n+    v.to_owned()\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Kitten {}\n+impl Kitten {\n+    // badly named method\n+    fn to_vec(self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+impl Borrow<BorrowedKitten> for Kitten {\n+    fn borrow(&self) -> &BorrowedKitten {\n+        static VALUE: BorrowedKitten = BorrowedKitten {};\n+        &VALUE\n+    }\n+}\n+\n+struct BorrowedKitten {}\n+impl ToOwned for BorrowedKitten {\n+    type Owned = Kitten;\n+    fn to_owned(&self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+\n+mod weird {\n+    #[allow(clippy::ptr_arg)]\n+    pub fn to_vec(v: &Vec<u32>) -> Vec<u32> {\n+        v.clone()\n+    }\n+}\n+\n+fn main() {\n+    let vec = vec![5];\n+    let _ = return_owned_from_slice(&vec);\n+    let _ = vec.to_owned();\n+    let _ = vec.to_vec();\n+\n+    let vec_ref = &vec;\n+    let _ = return_owned_from_slice(&vec_ref);\n+    let _ = vec_ref.to_owned();\n+    let _ = vec_ref.to_vec();\n+\n+    // we expect no lint for this\n+    let _ = weird::to_vec(&vec);\n+\n+    // we expect no lints for this\n+    let slice: &[u32] = &[1, 2, 3, 4, 5];\n+    let _ = return_owned_from_slice(slice);\n+    let _ = slice.to_owned();\n+    let _ = slice.to_vec();\n+\n+    let str = \"hello world\".to_string();\n+    let _ = str.to_owned();\n+\n+    // testing w/ an arbitrary type\n+    let kitten = Kitten {};\n+    let _ = kitten.to_owned();\n+    let _ = own_same_from_ref(&kitten);\n+    // this shouln't lint\n+    let _ = kitten.to_vec();\n+\n+    // we expect no lints for this\n+    let borrowed = BorrowedKitten {};\n+    let _ = borrowed.to_owned();\n+\n+    let pathbuf = PathBuf::new();\n+    let _ = pathbuf.to_owned();\n+    let _ = pathbuf.to_path_buf();\n+\n+    let os_string = OsString::from(\"foo\");\n+    let _ = os_string.to_owned();\n+    let _ = os_string.to_os_string();\n+\n+    // we expect no lints for this\n+    let os_str = OsStr::new(\"foo\");\n+    let _ = os_str.to_owned();\n+    let _ = os_str.to_os_string();\n+}"}, {"sha": "e6f7527b67219d2409f514246af6e3911826e0af", "filename": "tests/ui/implicit_clone.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fimplicit_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fimplicit_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.stderr?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -0,0 +1,64 @@\n+error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:65:17\n+   |\n+LL |     let _ = vec.to_owned();\n+   |                 ^^^^^^^^ help: consider using: `clone`\n+   |\n+   = note: `-D clippy::implicit-clone` implied by `-D warnings`\n+\n+error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:66:17\n+   |\n+LL |     let _ = vec.to_vec();\n+   |                 ^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:70:21\n+   |\n+LL |     let _ = vec_ref.to_owned();\n+   |                     ^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:71:21\n+   |\n+LL |     let _ = vec_ref.to_vec();\n+   |                     ^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `String` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:83:17\n+   |\n+LL |     let _ = str.to_owned();\n+   |                 ^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `Kitten` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:87:20\n+   |\n+LL |     let _ = kitten.to_owned();\n+   |                    ^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `PathBuf` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:97:21\n+   |\n+LL |     let _ = pathbuf.to_owned();\n+   |                     ^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:98:21\n+   |\n+LL |     let _ = pathbuf.to_path_buf();\n+   |                     ^^^^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `OsString` by calling `to_owned` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:101:23\n+   |\n+LL |     let _ = os_string.to_owned();\n+   |                       ^^^^^^^^ help: consider using: `clone`\n+\n+error: implicitly cloning a `OsString` by calling `to_os_string` on its dereferenced type\n+  --> $DIR/implicit_clone.rs:102:23\n+   |\n+LL |     let _ = os_string.to_os_string();\n+   |                       ^^^^^^^^^^^^ help: consider using: `clone`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "a5847e37c976e08dfef1053f8de569b05e2b3de6", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#![allow(clippy::implicit_clone)]\n use std::ffi::OsString;\n use std::path::Path;\n "}, {"sha": "dab8d7fb1c727b1d582c89f9e2bd2aa6b2fff531", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#![allow(clippy::implicit_clone)]\n use std::ffi::OsString;\n use std::path::Path;\n "}, {"sha": "87c219316ce4b5943be24e4c8c54a6634fcb6223", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d3cfd3754d616db959015eb7bd3c6238961320a/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=3d3cfd3754d616db959015eb7bd3c6238961320a", "patch": "@@ -1,168 +1,168 @@\n error: redundant clone\n-  --> $DIR/redundant_clone.rs:8:42\n+  --> $DIR/redundant_clone.rs:9:42\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |                                          ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:8:14\n+  --> $DIR/redundant_clone.rs:9:14\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:11:15\n+  --> $DIR/redundant_clone.rs:12:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:11:14\n+  --> $DIR/redundant_clone.rs:12:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:14:15\n+  --> $DIR/redundant_clone.rs:15:15\n    |\n LL |     let _s = s.to_string();\n    |               ^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:14:14\n+  --> $DIR/redundant_clone.rs:15:14\n    |\n LL |     let _s = s.to_string();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:17:15\n+  --> $DIR/redundant_clone.rs:18:15\n    |\n LL |     let _s = s.to_owned();\n    |               ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:17:14\n+  --> $DIR/redundant_clone.rs:18:14\n    |\n LL |     let _s = s.to_owned();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:19:42\n+  --> $DIR/redundant_clone.rs:20:42\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |                                          ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:19:14\n+  --> $DIR/redundant_clone.rs:20:14\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:21:42\n+  --> $DIR/redundant_clone.rs:22:42\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n    |                                          ^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:21:14\n+  --> $DIR/redundant_clone.rs:22:14\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:23:29\n+  --> $DIR/redundant_clone.rs:24:29\n    |\n LL |     let _s = OsString::new().to_owned();\n    |                             ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:23:14\n+  --> $DIR/redundant_clone.rs:24:14\n    |\n LL |     let _s = OsString::new().to_owned();\n    |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:25:29\n+  --> $DIR/redundant_clone.rs:26:29\n    |\n LL |     let _s = OsString::new().to_os_string();\n    |                             ^^^^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:25:14\n+  --> $DIR/redundant_clone.rs:26:14\n    |\n LL |     let _s = OsString::new().to_os_string();\n    |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:32:19\n+  --> $DIR/redundant_clone.rs:33:19\n    |\n LL |     let _t = tup.0.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:32:14\n+  --> $DIR/redundant_clone.rs:33:14\n    |\n LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:62:22\n+  --> $DIR/redundant_clone.rs:63:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:62:21\n+  --> $DIR/redundant_clone.rs:63:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:122:15\n+  --> $DIR/redundant_clone.rs:123:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:122:14\n+  --> $DIR/redundant_clone.rs:123:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:123:15\n+  --> $DIR/redundant_clone.rs:124:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:123:14\n+  --> $DIR/redundant_clone.rs:124:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:133:19\n+  --> $DIR/redundant_clone.rs:134:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:133:18\n+  --> $DIR/redundant_clone.rs:134:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:145:14\n+  --> $DIR/redundant_clone.rs:146:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:145:13\n+  --> $DIR/redundant_clone.rs:146:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}]}