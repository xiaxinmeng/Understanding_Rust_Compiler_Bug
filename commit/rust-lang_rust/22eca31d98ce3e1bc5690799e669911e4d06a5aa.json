{"sha": "22eca31d98ce3e1bc5690799e669911e4d06a5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZWNhMzFkOThjZTNlMWJjNTY5MDc5OWU2Njk5MTFlNGQwNmE1YWE=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-17T23:35:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-18T06:25:19Z"}, "message": "Fix argv.rs under the LLVM compiler.\nThe call to rust_start was assuming that all rust main() functions have the\nsame signature, but the compiler doesn't actually canonicalize them.  So\ninstead just match the C signature of rust_start, and cast.", "tree": {"sha": "c964fb3ca34ec34f4b9685d711c5097f7c7d0a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c964fb3ca34ec34f4b9685d711c5097f7c7d0a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22eca31d98ce3e1bc5690799e669911e4d06a5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22eca31d98ce3e1bc5690799e669911e4d06a5aa", "html_url": "https://github.com/rust-lang/rust/commit/22eca31d98ce3e1bc5690799e669911e4d06a5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22eca31d98ce3e1bc5690799e669911e4d06a5aa/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebf72ed29f7f6cb35051d766ba9900509f4aaa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebf72ed29f7f6cb35051d766ba9900509f4aaa1", "html_url": "https://github.com/rust-lang/rust/commit/8ebf72ed29f7f6cb35051d766ba9900509f4aaa1"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "7b2f9f011829cce72d14b76a14784d2c301ebee1", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=22eca31d98ce3e1bc5690799e669911e4d06a5aa", "patch": "@@ -366,7 +366,6 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       acyclic-unwind.rs \\\n                       alt-pattern-simple.rs \\\n                       alt-tag.rs \\\n-                      argv.rs \\\n                       basic.rs \\\n                       bind-obj-ctor.rs \\\n                       bind-thunk.rs \\"}, {"sha": "09340c53645142a14adf1ff4dd4215a21560d782", "filename": "src/boot/llvm/llabi.ml", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2Fboot%2Fllvm%2Fllabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2Fboot%2Fllvm%2Fllabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Fllabi.ml?ref=22eca31d98ce3e1bc5690799e669911e4d06a5aa", "patch": "@@ -11,6 +11,8 @@ type abi = {\n \n let declare_abi (llctx:Llvm.llcontext) (llmod:Llvm.llmodule) : abi =\n   let i32 = Llvm.i32_type llctx in\n+  (* FIXME: Use Llvm_target.intptr_type for more platform support. *)\n+  let word_ty = i32 in\n \n   let crate_ty =\n     (* TODO: other architectures besides x86 *)\n@@ -51,19 +53,16 @@ let declare_abi (llctx:Llvm.llcontext) (llmod:Llvm.llmodule) : abi =\n   ignore (Llvm.define_type_name \"rust_task\" task_ty llmod);\n \n   let rust_start_ty =\n-    let task_ptr_ty = Llvm.pointer_type task_ty in\n-    let llnilty = Llvm.array_type (Llvm.i1_type llctx) 0 in\n-    let main_ty = Llvm.function_type (Llvm.void_type llctx)\n-      [| Llvm.pointer_type llnilty; task_ptr_ty; |]\n-    in\n-    let args_ty = Array.map Llvm.pointer_type [| main_ty; crate_ty; |] in\n-    let args_ty = Array.append args_ty [| i32; i32 |] in\n+    (* Rust's main function can have several types, so we cast them\n+       all to uintptr_t. *)\n+    let main_ty = word_ty in\n+    let args_ty = [| main_ty; Llvm.pointer_type crate_ty; i32; i32 |] in\n       Llvm.function_type i32 args_ty\n   in\n   {\n     crate_ty = crate_ty;\n     task_ty = task_ty;\n-    word_ty = i32;\n+    word_ty = word_ty;\n     rust_start = Llvm.declare_function \"rust_start\" rust_start_ty llmod\n   }\n ;;"}, {"sha": "7241d1ab33ec412b4d5b20adfcdc6c08332f3f39", "filename": "src/boot/llvm/llfinal.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2Fboot%2Fllvm%2Fllfinal.ml", "raw_url": "https://github.com/rust-lang/rust/raw/22eca31d98ce3e1bc5690799e669911e4d06a5aa/src%2Fboot%2Fllvm%2Fllfinal.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Fllfinal.ml?ref=22eca31d98ce3e1bc5690799e669911e4d06a5aa", "patch": "@@ -79,7 +79,8 @@ let finalize_module\n       | Some fn -> fn\n   in\n   let rust_start = abi.Llabi.rust_start in\n-  let rust_start_args = [| rust_main_fn; crate_ptr; argc; argv |] in\n+  let rust_start_args = [| Llvm.const_ptrtoint rust_main_fn abi.Llabi.word_ty;\n+                           crate_ptr; argc; argv |] in\n     ignore (Llvm.build_call\n               rust_start rust_start_args \"start_rust\" main_builder);\n     ignore (Llvm.build_ret (Llvm.const_int i32 0) main_builder)"}]}