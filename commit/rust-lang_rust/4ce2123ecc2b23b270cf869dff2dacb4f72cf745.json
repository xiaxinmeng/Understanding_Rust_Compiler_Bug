{"sha": "4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "node_id": "C_kwDOAAsO6NoAKDRjZTIxMjNlY2MyYjIzYjI3MGNmODY5ZGZmMmRhY2I0ZjcyY2Y3NDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-04T21:10:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-15T16:40:42Z"}, "message": "yeet ConstInferUnifier", "tree": {"sha": "fad9e630e566f833d8ca63482c261adc7922e1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad9e630e566f833d8ca63482c261adc7922e1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "html_url": "https://github.com/rust-lang/rust/commit/4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7", "html_url": "https://github.com/rust-lang/rust/commit/c270b0a8a844f0bac1ee1acd8a1ebabc0cee65e7"}], "stats": {"total": 261, "additions": 81, "deletions": 180}, "files": [{"sha": "4ed4164bd27b6d92853791d70a0cc56737996149", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 17, "deletions": 160, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "patch": "@@ -26,21 +26,17 @@ use super::equate::Equate;\n use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n-use super::type_variable::TypeVariableValue;\n-use super::{DefineOpaqueTypes, InferCtxt, MiscVariable, TypeTrace};\n-use crate::infer::generalize::{generalize, CombineDelegate, Generalization};\n+use super::{DefineOpaqueTypes, InferCtxt, TypeTrace};\n+use crate::infer::generalize::{self, CombineDelegate, Generalization};\n use crate::traits::{Obligation, PredicateObligations};\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n-use rustc_middle::ty::{\n-    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeVisitableExt,\n-};\n+use rustc_middle::ty::{self, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{IntType, UintType};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n@@ -208,11 +204,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             // matching in the solver.\n             let a_error = self.tcx.const_error(a.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = a.kind() {\n-                return self.unify_const_variable(vid, a_error);\n+                return self.unify_const_variable(vid, a_error, relation.param_env());\n             }\n             let b_error = self.tcx.const_error(b.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = b.kind() {\n-                return self.unify_const_variable(vid, b_error);\n+                return self.unify_const_variable(vid, b_error, relation.param_env());\n             }\n \n             return Ok(if relation.a_is_expected() { a_error } else { b_error });\n@@ -234,11 +230,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n \n             (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n-                return self.unify_const_variable(vid, b);\n+                return self.unify_const_variable(vid, b, relation.param_env());\n             }\n \n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n-                return self.unify_const_variable(vid, a);\n+                return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n                 if self.tcx.lazy_normalization() =>\n@@ -291,24 +287,17 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         target_vid: ty::ConstVid<'tcx>,\n         ct: ty::Const<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        let (for_universe, span) = {\n-            let mut inner = self.inner.borrow_mut();\n-            let variable_table = &mut inner.const_unification_table();\n-            let var_value = variable_table.probe_value(target_vid);\n-            match var_value.val {\n-                ConstVariableValue::Known { value } => {\n-                    bug!(\"instantiating {:?} which has a known value {:?}\", target_vid, value)\n-                }\n-                ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),\n-            }\n-        };\n-        let value = ct.try_fold_with(&mut ConstInferUnifier {\n-            infcx: self,\n-            span,\n-            for_universe,\n+        let span =\n+            self.inner.borrow_mut().const_unification_table().probe_value(target_vid).origin.span;\n+        let Generalization { value, needs_wf: _ } = generalize::generalize(\n+            self,\n+            &mut CombineDelegate { infcx: self, span, param_env },\n+            ct,\n             target_vid,\n-        })?;\n+            ty::Variance::Invariant,\n+        )?;\n \n         self.inner.borrow_mut().const_unification_table().union_value(\n             target_vid,\n@@ -547,135 +536,3 @@ fn float_unification_error<'tcx>(\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n     TypeError::FloatMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n-\n-struct ConstInferUnifier<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'tcx>,\n-\n-    span: Span,\n-\n-    for_universe: ty::UniverseIndex,\n-\n-    /// The vid of the const variable that is in the process of being\n-    /// instantiated; if we find this within the const we are folding,\n-    /// that means we would have created a cyclic const.\n-    target_vid: ty::ConstVid<'tcx>,\n-}\n-\n-impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n-    type Error = TypeError<'tcx>;\n-\n-    fn interner(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, TypeError<'tcx>> {\n-        match t.kind() {\n-            &ty::Infer(ty::TyVar(vid)) => {\n-                let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n-                let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n-                match probe {\n-                    TypeVariableValue::Known { value: u } => {\n-                        debug!(\"ConstOccursChecker: known value {:?}\", u);\n-                        u.try_fold_with(self)\n-                    }\n-                    TypeVariableValue::Unknown { universe } => {\n-                        if self.for_universe.can_name(universe) {\n-                            return Ok(t);\n-                        }\n-\n-                        let origin =\n-                            *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n-                        let new_var_id = self\n-                            .infcx\n-                            .inner\n-                            .borrow_mut()\n-                            .type_variables()\n-                            .new_var(self.for_universe, origin);\n-                        Ok(self.interner().mk_ty_var(new_var_id))\n-                    }\n-                }\n-            }\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => Ok(t),\n-            _ => t.try_super_fold_with(self),\n-        }\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_region(\n-        &mut self,\n-        r: ty::Region<'tcx>,\n-    ) -> Result<ty::Region<'tcx>, TypeError<'tcx>> {\n-        debug!(\"ConstInferUnifier: r={:?}\", r);\n-\n-        match *r {\n-            // Never make variables for regions bound within the type itself,\n-            // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased | ty::ReError(_) => {\n-                return Ok(r);\n-            }\n-\n-            ty::RePlaceholder(..)\n-            | ty::ReVar(..)\n-            | ty::ReStatic\n-            | ty::ReEarlyBound(..)\n-            | ty::ReFree(..) => {\n-                // see common code below\n-            }\n-        }\n-\n-        let r_universe = self.infcx.universe_of_region(r);\n-        if self.for_universe.can_name(r_universe) {\n-            return Ok(r);\n-        } else {\n-            // FIXME: This is non-ideal because we don't give a\n-            // very descriptive origin for this region variable.\n-            Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))\n-        }\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, TypeError<'tcx>> {\n-        match c.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                // Check if the current unification would end up\n-                // unifying `target_vid` with a const which contains\n-                // an inference variable which is unioned with `target_vid`.\n-                //\n-                // Not doing so can easily result in stack overflows.\n-                if self\n-                    .infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .const_unification_table()\n-                    .unioned(self.target_vid, vid)\n-                {\n-                    return Err(TypeError::CyclicConst(c));\n-                }\n-\n-                let var_value =\n-                    self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n-                match var_value.val {\n-                    ConstVariableValue::Known { value: u } => u.try_fold_with(self),\n-                    ConstVariableValue::Unknown { universe } => {\n-                        if self.for_universe.can_name(universe) {\n-                            Ok(c)\n-                        } else {\n-                            let new_var_id =\n-                                self.infcx.inner.borrow_mut().const_unification_table().new_key(\n-                                    ConstVarValue {\n-                                        origin: var_value.origin,\n-                                        val: ConstVariableValue::Unknown {\n-                                            universe: self.for_universe,\n-                                        },\n-                                    },\n-                                );\n-                            Ok(self.interner().mk_const(new_var_id, c.ty()))\n-                        }\n-                    }\n-                }\n-            }\n-            _ => c.try_super_fold_with(self),\n-        }\n-    }\n-}"}, {"sha": "8acfe638aa3ec318fea12294180f85cdb6850e71", "filename": "compiler/rustc_infer/src/infer/generalize.rs", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs?ref=4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "patch": "@@ -3,36 +3,44 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{self, InferConst, Term, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n \n use crate::infer::nll_relate::TypeRelatingDelegate;\n use crate::infer::type_variable::TypeVariableValue;\n use crate::infer::{InferCtxt, RegionVariableOrigin};\n \n-pub(super) fn generalize<'tcx, D: GeneralizerDelegate<'tcx>>(\n+pub(super) fn generalize<'tcx, D: GeneralizerDelegate<'tcx>, T: Into<Term<'tcx>> + Relate<'tcx>>(\n     infcx: &InferCtxt<'tcx>,\n     delegate: &mut D,\n-    ty: Ty<'tcx>,\n-    for_vid: ty::TyVid,\n+    term: T,\n+    for_vid: impl Into<ty::TermVid<'tcx>>,\n     ambient_variance: ty::Variance,\n-) -> RelateResult<'tcx, Generalization<Ty<'tcx>>> {\n-    let for_universe = infcx.probe_ty_var(for_vid).unwrap_err();\n-    let for_vid_sub_root = infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid);\n+) -> RelateResult<'tcx, Generalization<T>> {\n+    let (for_universe, root_vid) = match for_vid.into() {\n+        ty::TermVid::Ty(ty_vid) => (\n+            infcx.probe_ty_var(ty_vid).unwrap_err(),\n+            ty::TermVid::Ty(infcx.inner.borrow_mut().type_variables().sub_root_var(ty_vid)),\n+        ),\n+        ty::TermVid::Const(ct_vid) => (\n+            infcx.probe_const_var(ct_vid).unwrap_err(),\n+            ty::TermVid::Const(infcx.inner.borrow_mut().const_unification_table().find(ct_vid)),\n+        ),\n+    };\n \n     let mut generalizer = Generalizer {\n         infcx,\n         delegate,\n         ambient_variance,\n-        for_vid_sub_root,\n+        root_vid,\n         for_universe,\n-        root_ty: ty,\n+        root_term: term.into(),\n         needs_wf: false,\n         cache: Default::default(),\n     };\n \n-    assert!(!ty.has_escaping_bound_vars());\n-    let value = generalizer.relate(ty, ty)?;\n+    assert!(!term.has_escaping_bound_vars());\n+    let value = generalizer.relate(term, term)?;\n     let needs_wf = generalizer.needs_wf;\n     Ok(Generalization { value, needs_wf })\n }\n@@ -99,11 +107,8 @@ where\n /// establishes `'0: 'x` as a constraint.\n ///\n /// [blog post]: https://is.gd/0hKvIr\n-struct Generalizer<'me, 'tcx, D>\n-where\n-    D: GeneralizerDelegate<'tcx>,\n-{\n-    pub infcx: &'me InferCtxt<'tcx>,\n+struct Generalizer<'me, 'tcx, D> {\n+    infcx: &'me InferCtxt<'tcx>,\n \n     // An delegate used to abstract the behaviors of the three previous\n     // generalizer-like implementations.\n@@ -116,21 +121,31 @@ where\n     /// The vid of the type variable that is in the process of being\n     /// instantiated. If we find this within the value we are folding,\n     /// that means we would have created a cyclic value.\n-    pub for_vid_sub_root: ty::TyVid,\n+    root_vid: ty::TermVid<'tcx>,\n \n     /// The universe of the type variable that is in the process of being\n     /// instantiated. If we find anything that this universe cannot name,\n     /// we reject the relation.\n     for_universe: ty::UniverseIndex,\n \n-    pub root_ty: Ty<'tcx>,\n+    /// The root term (const or type) we're generalizing. Used for cycle errors.\n+    root_term: Term<'tcx>,\n \n     cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n \n     /// See the field `needs_wf` in `Generalization`.\n     needs_wf: bool,\n }\n \n+impl<'tcx, D> Generalizer<'_, 'tcx, D> {\n+    fn cyclic_term_error(&self) -> TypeError<'tcx> {\n+        match self.root_term.unpack() {\n+            ty::TermKind::Ty(ty) => TypeError::CyclicTy(ty),\n+            ty::TermKind::Const(ct) => TypeError::CyclicConst(ct),\n+        }\n+    }\n+}\n+\n impl<'tcx, D> TypeRelation<'tcx> for Generalizer<'_, 'tcx, D>\n where\n     D: GeneralizerDelegate<'tcx>,\n@@ -226,10 +241,10 @@ where\n                 let mut inner = self.infcx.inner.borrow_mut();\n                 let vid = inner.type_variables().root_var(vid);\n                 let sub_vid = inner.type_variables().sub_root_var(vid);\n-                if sub_vid == self.for_vid_sub_root {\n+                if TermVid::Ty(sub_vid) == self.root_vid {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n-                    Err(TypeError::CyclicTy(self.root_ty))\n+                    Err(self.cyclic_term_error())\n                 } else {\n                     let probe = inner.type_variables().probe(vid);\n                     match probe {\n@@ -363,6 +378,17 @@ where\n                 bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", c);\n             }\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                // Check if the current unification would end up\n+                // unifying `target_vid` with a const which contains\n+                // an inference variable which is unioned with `target_vid`.\n+                //\n+                // Not doing so can easily result in stack overflows.\n+                if TermVid::Const(self.infcx.inner.borrow_mut().const_unification_table().find(vid))\n+                    == self.root_vid\n+                {\n+                    return Err(self.cyclic_term_error());\n+                }\n+\n                 let mut inner = self.infcx.inner.borrow_mut();\n                 let variable_table = &mut inner.const_unification_table();\n                 let var_value = variable_table.probe_value(vid);"}, {"sha": "2fe0b2938efb23618756beb4d87ff41b02da6741", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2123ecc2b23b270cf869dff2dacb4f72cf745/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4ce2123ecc2b23b270cf869dff2dacb4f72cf745", "patch": "@@ -1070,6 +1070,24 @@ impl ParamTerm {\n     }\n }\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum TermVid<'tcx> {\n+    Ty(ty::TyVid),\n+    Const(ty::ConstVid<'tcx>),\n+}\n+\n+impl From<ty::TyVid> for TermVid<'_> {\n+    fn from(value: ty::TyVid) -> Self {\n+        TermVid::Ty(value)\n+    }\n+}\n+\n+impl<'tcx> From<ty::ConstVid<'tcx>> for TermVid<'tcx> {\n+    fn from(value: ty::ConstVid<'tcx>) -> Self {\n+        TermVid::Const(value)\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///"}]}