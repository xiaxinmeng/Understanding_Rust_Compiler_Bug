{"sha": "5974f6f0a53614e82df9430b95bcb6e9473265fa", "node_id": "C_kwDOAAsO6NoAKDU5NzRmNmYwYTUzNjE0ZTgyZGY5NDMwYjk1YmNiNmU5NDczMjY1ZmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-22T15:32:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-01-02T15:35:14Z"}, "message": "default OOM handler: use non-unwinding panic (unless -Zoom=panic is set), to match std handler", "tree": {"sha": "297f665125ca8b90b06bcc98f90e5a322d602591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297f665125ca8b90b06bcc98f90e5a322d602591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5974f6f0a53614e82df9430b95bcb6e9473265fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5974f6f0a53614e82df9430b95bcb6e9473265fa", "html_url": "https://github.com/rust-lang/rust/commit/5974f6f0a53614e82df9430b95bcb6e9473265fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5974f6f0a53614e82df9430b95bcb6e9473265fa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731e0bf721c1ec2c7843547e86b6157b40a437d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/731e0bf721c1ec2c7843547e86b6157b40a437d1", "html_url": "https://github.com/rust-lang/rust/commit/731e0bf721c1ec2c7843547e86b6157b40a437d1"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "e1c612c5b3f16dabab21ca8ba18e9f84701afdd5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=5974f6f0a53614e82df9430b95bcb6e9473265fa", "patch": "@@ -402,7 +402,20 @@ pub mod __alloc_error_handler {\n     // `#[alloc_error_handler]`.\n     #[rustc_std_internal_symbol]\n     pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {\n-        panic!(\"memory allocation of {size} bytes failed\")\n+        extern \"Rust\" {\n+            // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n+            // Its value depends on the -Zoom={panic,abort} compiler option.\n+            static __rust_alloc_error_handler_should_panic: u8;\n+        }\n+\n+        #[allow(unused_unsafe)]\n+        if unsafe { __rust_alloc_error_handler_should_panic != 0 } {\n+            panic!(\"memory allocation of {size} bytes failed\")\n+        } else {\n+            core::panicking::panic_nounwind_fmt(format_args!(\n+                \"memory allocation of {size} bytes failed\"\n+            ))\n+        }\n     }\n \n     #[cfg(bootstrap)]"}, {"sha": "2a7edc2add12d19c0a6ebfec438a1052e93d232a", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5974f6f0a53614e82df9430b95bcb6e9473265fa", "patch": "@@ -110,6 +110,7 @@\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_refs_to_cell)]\n #![feature(core_intrinsics)]\n+#![feature(core_panic)]\n #![feature(const_eval_select)]\n #![feature(const_pin)]\n #![feature(const_waker)]"}, {"sha": "36b43ec2181e5221c126330e53ed76786112ac64", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=5974f6f0a53614e82df9430b95bcb6e9473265fa", "patch": "@@ -64,13 +64,17 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     unsafe { panic_impl(&pi) }\n }\n \n-/// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n-/// (No `fmt` variant as a `fmt::Arguments` needs more space to be passed.)\n+/// Like `panic_fmt`, but for non-unwinding panics.\n+///\n+/// Has to be a separate function so that it can carry the `rustc_nounwind` attribute.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(bootstrap), lang = \"panic_nounwind\")] // needed by codegen for non-unwinding panics\n+#[track_caller]\n+// This attribute has the key side-effect that if the panic handler ignores `can_unwind`\n+// and unwinds anyway, we will hit the \"unwinding out of nounwind function\" guard,\n+// which causes a \"panic in a function that cannot unwind\".\n #[rustc_nounwind]\n-pub fn panic_nounwind(msg: &'static str) -> ! {\n+pub fn panic_nounwind_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n     }\n@@ -83,8 +87,6 @@ pub fn panic_nounwind(msg: &'static str) -> ! {\n     }\n \n     // PanicInfo with the `can_unwind` flag set to false forces an abort.\n-    let pieces = [msg];\n-    let fmt = fmt::Arguments::new_v1(&pieces, &[]);\n     let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n \n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n@@ -112,6 +114,15 @@ pub const fn panic(expr: &'static str) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n }\n \n+/// Like `panic`, but without unwinding and track_caller to reduce the impact on codesize.\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never), cold)]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(not(bootstrap), lang = \"panic_nounwind\")] // needed by codegen for non-unwinding panics\n+#[rustc_nounwind]\n+pub fn panic_nounwind(expr: &'static str) -> ! {\n+    panic_nounwind_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+}\n+\n #[inline]\n #[track_caller]\n #[rustc_diagnostic_item = \"panic_str\"]"}, {"sha": "c5a5991cc81c47d340a3b7b113c56339671acd7e", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5974f6f0a53614e82df9430b95bcb6e9473265fa/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=5974f6f0a53614e82df9430b95bcb6e9473265fa", "patch": "@@ -338,7 +338,7 @@ fn default_alloc_error_hook(layout: Layout) {\n \n     #[allow(unused_unsafe)]\n     if unsafe { __rust_alloc_error_handler_should_panic != 0 } {\n-        panic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+        panic!(\"memory allocation of {} bytes failed\", layout.size());\n     } else {\n         rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n     }"}]}