{"sha": "18c328da27fedb563625718bdd5007e583455dec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzMyOGRhMjdmZWRiNTYzNjI1NzE4YmRkNTAwN2U1ODM0NTVkZWM=", "commit": {"author": {"name": "juxiliary", "email": "juxiliary@gmail.com", "date": "2014-11-06T10:25:13Z"}, "committer": {"name": "juxiliary", "email": "juxiliary@gmail.com", "date": "2014-11-06T21:20:28Z"}, "message": "Fixing #18659\n\nChanges the radix multiplier to start at -0.0 instead of -1.0\nwhen reading strings that start with '-'.", "tree": {"sha": "430d85148a8e5553801c9c83aa3ac6ff44f675c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430d85148a8e5553801c9c83aa3ac6ff44f675c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c328da27fedb563625718bdd5007e583455dec", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c328da27fedb563625718bdd5007e583455dec", "html_url": "https://github.com/rust-lang/rust/commit/18c328da27fedb563625718bdd5007e583455dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c328da27fedb563625718bdd5007e583455dec/comments", "author": null, "committer": null, "parents": [{"sha": "8ed288edb27fc83b15a549af69c82b5bb4f8ac1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed288edb27fc83b15a549af69c82b5bb4f8ac1e", "html_url": "https://github.com/rust-lang/rust/commit/8ed288edb27fc83b15a549af69c82b5bb4f8ac1e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "088ea89818e0fe5fbf0e05771714bb64be372a71", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18c328da27fedb563625718bdd5007e583455dec/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c328da27fedb563625718bdd5007e583455dec/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=18c328da27fedb563625718bdd5007e583455dec", "patch": "@@ -451,7 +451,7 @@ pub fn from_str_radix_float<T: Float>(src: &str, radix: uint) -> Option<T> {\n     };\n \n     // The significand to accumulate\n-    let mut sig = if is_positive { _0 } else { -_1 };\n+    let mut sig = if is_positive { _0 } else { -_0 };\n     // Necessary to detect overflow\n     let mut prev_sig = sig;\n     let mut cs = src.chars().enumerate();\n@@ -647,6 +647,22 @@ mod test {\n         let fe : Option<f32> = from_str_radix_float(\"1e40\", 10);\n         assert_eq!(fe, Some(Float::infinity()))\n     }\n+\n+    #[test]\n+    fn test_from_str_radix_float() {\n+        let x1 : Option<f64> = from_str_radix_float(\"-123.456\", 10);\n+        assert_eq!(x1, Some(-123.456));\n+        let x2 : Option<f32> = from_str_radix_float(\"123.456\", 10);\n+        assert_eq!(x2, Some(123.456));\n+        let x3 : Option<f32> = from_str_radix_float(\"-0.0\", 10);\n+        assert_eq!(x3, Some(-0.0));\n+        let x4 : Option<f32> = from_str_radix_float(\"0.0\", 10);\n+        assert_eq!(x4, Some(0.0));\n+        let x4 : Option<f32> = from_str_radix_float(\"1.0\", 10);\n+        assert_eq!(x4, Some(1.0));\n+        let x5 : Option<f32> = from_str_radix_float(\"-1.0\", 10);\n+        assert_eq!(x5, Some(-1.0));\n+    }\n }\n \n #[cfg(test)]"}]}