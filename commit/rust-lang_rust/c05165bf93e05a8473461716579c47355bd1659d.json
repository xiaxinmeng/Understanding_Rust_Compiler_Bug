{"sha": "c05165bf93e05a8473461716579c47355bd1659d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTE2NWJmOTNlMDVhODQ3MzQ2MTcxNjU3OWM0NzM1NWJkMTY1OWQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-28T18:11:47Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-29T01:09:02Z"}, "message": "Drop the impl_id field from fn_ctxt.", "tree": {"sha": "f1eaad9f0b997d943a7ac17a7849f9dc2b3d6b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1eaad9f0b997d943a7ac17a7849f9dc2b3d6b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05165bf93e05a8473461716579c47355bd1659d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05165bf93e05a8473461716579c47355bd1659d", "html_url": "https://github.com/rust-lang/rust/commit/c05165bf93e05a8473461716579c47355bd1659d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05165bf93e05a8473461716579c47355bd1659d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59431187284b377bdffdf16eda01c9239359592e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59431187284b377bdffdf16eda01c9239359592e", "html_url": "https://github.com/rust-lang/rust/commit/59431187284b377bdffdf16eda01c9239359592e"}], "stats": {"total": 45, "additions": 7, "deletions": 38}, "files": [{"sha": "efa69ab5e625bd6d36cbe82cf25b69e2cb77344b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -1545,17 +1545,15 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n                         llfndecl: ValueRef,\n                         id: ast::node_id,\n                         output_type: ty::t,\n-                        impl_id: Option<ast::def_id>,\n                         param_substs: Option<@param_substs>,\n                         sp: Option<span>)\n                      -> fn_ctxt {\n     for param_substs.iter().advance |p| { p.validate(); }\n \n-    debug!(\"new_fn_ctxt_w_id(path=%s, id=%?, impl_id=%?, \\\n+    debug!(\"new_fn_ctxt_w_id(path=%s, id=%?, \\\n             param_substs=%s)\",\n            path_str(ccx.sess, path),\n            id,\n-           impl_id,\n            param_substs.repr(ccx.tcx));\n \n     let llbbs = mk_standard_basic_blocks(llfndecl);\n@@ -1584,7 +1582,6 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n           lllocals: @mut HashMap::new(),\n           llupvars: @mut HashMap::new(),\n           id: id,\n-          impl_id: impl_id,\n           param_substs: param_substs,\n           span: sp,\n           path: path,\n@@ -1605,7 +1602,7 @@ pub fn new_fn_ctxt(ccx: @mut CrateContext,\n                    output_type: ty::t,\n                    sp: Option<span>)\n                 -> fn_ctxt {\n-    new_fn_ctxt_w_id(ccx, path, llfndecl, -1, output_type, None, None, sp)\n+    new_fn_ctxt_w_id(ccx, path, llfndecl, -1, output_type, None, sp)\n }\n \n // NB: must keep 4 fns in sync:\n@@ -1774,7 +1771,6 @@ pub fn trans_closure(ccx: @mut CrateContext,\n                      self_arg: self_arg,\n                      param_substs: Option<@param_substs>,\n                      id: ast::node_id,\n-                     impl_id: Option<ast::def_id>,\n                      attributes: &[ast::attribute],\n                      output_type: ty::t,\n                      maybe_load_env: &fn(fn_ctxt),\n@@ -1792,7 +1788,6 @@ pub fn trans_closure(ccx: @mut CrateContext,\n                                llfndecl,\n                                id,\n                                output_type,\n-                               impl_id,\n                                param_substs,\n                                Some(body.span));\n     let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs);\n@@ -1851,7 +1846,6 @@ pub fn trans_fn(ccx: @mut CrateContext,\n                 self_arg: self_arg,\n                 param_substs: Option<@param_substs>,\n                 id: ast::node_id,\n-                impl_id: Option<ast::def_id>,\n                 attrs: &[ast::attribute]) {\n     let do_time = ccx.sess.trans_stats();\n     let start = if do_time { time::get_time() }\n@@ -1871,7 +1865,6 @@ pub fn trans_fn(ccx: @mut CrateContext,\n                   self_arg,\n                   param_substs,\n                   id,\n-                  impl_id,\n                   attrs,\n                   output_type,\n                   |fcx| {\n@@ -1921,7 +1914,6 @@ pub fn trans_enum_variant(ccx: @mut CrateContext,\n                                llfndecl,\n                                variant.node.id,\n                                enum_ty,\n-                               None,\n                                param_substs,\n                                None);\n \n@@ -2001,7 +1993,6 @@ pub fn trans_tuple_struct(ccx: @mut CrateContext,\n                                llfndecl,\n                                ctor_id,\n                                tup_ty,\n-                               None,\n                                param_substs,\n                                None);\n \n@@ -2081,7 +2072,6 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n                      no_self,\n                      None,\n                      item.id,\n-                     None,\n                      item.attrs);\n         } else {\n             for body.node.stmts.iter().advance |stmt| {"}, {"sha": "ad68ffb402e1d35f9e5e1e492395696c9c787645", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -444,7 +444,6 @@ pub fn trans_expr_fn(bcx: block,\n                           no_self,\n                           /*bad*/ copy bcx.fcx.param_substs,\n                           user_id,\n-                          None,\n                           [],\n                           real_return_type,\n                           |fcx| load_environment(fcx, cdata_ty, cap_vars,"}, {"sha": "7624fb13903f572a5bff24cd91b7493aa9ec01f5", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -222,9 +222,6 @@ pub struct fn_ctxt_ {\n     // a user-defined function.\n     id: ast::node_id,\n \n-    // The def_id of the impl we're inside, or None if we aren't inside one.\n-    impl_id: Option<ast::def_id>,\n-\n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n     param_substs: Option<@param_substs>,"}, {"sha": "7672f3b615d035ae7304026d559ba57568bf71e2", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -555,7 +555,6 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                                decl,\n                                item.id,\n                                output_type,\n-                               None,\n                                Some(substs),\n                                Some(item.span));\n \n@@ -1183,7 +1182,6 @@ pub fn trans_foreign_fn(ccx: @mut CrateContext,\n                  no_self,\n                  None,\n                  id,\n-                 None,\n                  []);\n         return llfndecl;\n     }"}, {"sha": "11c02f165b6f707679ab9f6560cabe93ae88e58f", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -127,7 +127,6 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n                        self_kind,\n                        None,\n                        mth.id,\n-                       Some(impl_did),\n                        []);\n           }\n           local_def(mth.id)"}, {"sha": "f145f83f13c2b56e76e25581d29e58094ae26075", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -68,8 +68,7 @@ pub fn trans_impl(ccx: @mut CrateContext,\n                          path,\n                          *method,\n                          None,\n-                         llfn,\n-                         ast_util::local_def(id));\n+                         llfn);\n         }\n     }\n }\n@@ -90,8 +89,7 @@ pub fn trans_method(ccx: @mut CrateContext,\n                     path: path,\n                     method: &ast::method,\n                     param_substs: Option<@param_substs>,\n-                    llfn: ValueRef,\n-                    impl_id: ast::def_id) {\n+                    llfn: ValueRef) {\n     // figure out how self is being passed\n     let self_arg = match method.explicit_self.node {\n       ast::sty_static => {\n@@ -127,7 +125,6 @@ pub fn trans_method(ccx: @mut CrateContext,\n              self_arg,\n              param_substs,\n              method.id,\n-             Some(impl_id),\n              []);\n }\n "}, {"sha": "92d8192aee6298236e0824ae57f3ec2b0a0ee7b4", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05165bf93e05a8473461716579c47355bd1659d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=c05165bf93e05a8473461716579c47355bd1659d", "patch": "@@ -196,7 +196,6 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                  no_self,\n                  psubsts,\n                  fn_id.node,\n-                 None,\n                  []);\n         d\n       }\n@@ -224,27 +223,17 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         }\n         d\n       }\n-      ast_map::node_method(mth, supplied_impl_did, _) => {\n+      ast_map::node_method(mth, _, _) => {\n         // XXX: What should the self type be here?\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);\n-\n-        // Override the impl def ID if necessary.\n-        let impl_did;\n-        match impl_did_opt {\n-            None => impl_did = supplied_impl_did,\n-            Some(override_impl_did) => impl_did = override_impl_did\n-        }\n-\n-        meth::trans_method(ccx, pt, mth, psubsts, d, impl_did);\n+        meth::trans_method(ccx, pt, mth, psubsts, d);\n         d\n       }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);\n-        debug!(\"monomorphic_fn impl_did_opt is %?\", impl_did_opt);\n-        meth::trans_method(ccx, /*bad*/copy *pt, mth, psubsts, d,\n-                           impl_did_opt.get());\n+        meth::trans_method(ccx, /*bad*/copy *pt, mth, psubsts, d);\n         d\n       }\n       ast_map::node_struct_ctor(struct_def, _, _) => {"}]}