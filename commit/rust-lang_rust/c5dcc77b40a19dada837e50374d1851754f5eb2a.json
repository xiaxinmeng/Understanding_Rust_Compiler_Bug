{"sha": "c5dcc77b40a19dada837e50374d1851754f5eb2a", "node_id": "C_kwDOAAsO6NoAKGM1ZGNjNzdiNDBhMTlkYWRhODM3ZTUwMzc0ZDE4NTE3NTRmNWViMmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:41:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:42:28Z"}, "message": "Fix visibility mods not being completed for field defs", "tree": {"sha": "7c46792f59c6555456a9db89ec63eba0e406f437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c46792f59c6555456a9db89ec63eba0e406f437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5dcc77b40a19dada837e50374d1851754f5eb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dcc77b40a19dada837e50374d1851754f5eb2a", "html_url": "https://github.com/rust-lang/rust/commit/c5dcc77b40a19dada837e50374d1851754f5eb2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5dcc77b40a19dada837e50374d1851754f5eb2a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519ac81b578fcda24f8f71eb99f287bce829bb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/519ac81b578fcda24f8f71eb99f287bce829bb71", "html_url": "https://github.com/rust-lang/rust/commit/519ac81b578fcda24f8f71eb99f287bce829bb71"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "d020b49cde5e09c678c045f65932ac21d3274058", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -4,6 +4,7 @@ pub(crate) mod attribute;\n pub(crate) mod dot;\n pub(crate) mod expr;\n pub(crate) mod extern_abi;\n+pub(crate) mod field;\n pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod format_string;"}, {"sha": "d81e48cbabd155a7028ef22ab1af6c0e8dc17307", "filename": "crates/ide-completion/src/completions/field.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -0,0 +1,53 @@\n+//! Completion of field list position.\n+\n+use crate::{\n+    context::{IdentContext, NameContext, NameKind, NameRefContext, PathCompletionCtx, PathKind},\n+    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+};\n+\n+pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext) {\n+    match &ctx.ident_ctx {\n+        IdentContext::Name(NameContext { kind: NameKind::RecordField, .. })\n+        | IdentContext::NameRef(NameRefContext {\n+            path_ctx:\n+                Some(PathCompletionCtx {\n+                    has_macro_bang: false,\n+                    is_absolute_path: false,\n+                    qualifier: None,\n+                    parent: None,\n+                    kind: PathKind::Type { in_tuple_struct: true },\n+                    has_type_args: false,\n+                    ..\n+                }),\n+            ..\n+        }) => {\n+            if ctx.qualifier_ctx.vis_node.is_none() {\n+                let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n+                add_keyword(\"pub(crate)\", \"pub(crate)\");\n+                add_keyword(\"pub(super)\", \"pub(super)\");\n+                add_keyword(\"pub\", \"pub\");\n+            }\n+        }\n+        _ => return,\n+    }\n+}\n+\n+pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+\n+    match ctx.config.snippet_cap {\n+        Some(cap) => {\n+            if snippet.ends_with('}') && ctx.incomplete_let {\n+                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n+                cov_mark::hit!(let_semi);\n+                item.insert_snippet(cap, format!(\"{};\", snippet));\n+            } else {\n+                item.insert_snippet(cap, snippet);\n+            }\n+        }\n+        None => {\n+            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n+        }\n+    };\n+    item.add_to(acc);\n+}"}, {"sha": "c3bf298bc6e684139b0bd78507d03ed942d0d49c", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -160,7 +160,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (_, ItemInNs::Types(hir::ModuleDef::Module(_))) => true,\n             // and so are macros(except for attributes)\n             (\n-                PathKind::Expr { .. } | PathKind::Type | PathKind::Item { .. } | PathKind::Pat,\n+                PathKind::Expr { .. }\n+                | PathKind::Type { .. }\n+                | PathKind::Item { .. }\n+                | PathKind::Pat,\n                 ItemInNs::Macros(mac),\n             ) => mac.is_fn_like(ctx.db),\n             (PathKind::Item { .. }, _) => true,\n@@ -170,14 +173,14 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (PathKind::Pat, ItemInNs::Types(_)) => true,\n             (PathKind::Pat, ItemInNs::Values(def)) => matches!(def, hir::ModuleDef::Const(_)),\n \n-            (PathKind::Type, ItemInNs::Types(ty)) => {\n+            (PathKind::Type { .. }, ItemInNs::Types(ty)) => {\n                 if matches!(ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n                     matches!(ty, ModuleDef::Trait(_))\n                 } else {\n                     true\n                 }\n             }\n-            (PathKind::Type, ItemInNs::Values(_)) => false,\n+            (PathKind::Type { .. }, ItemInNs::Values(_)) => false,\n \n             (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(ctx.db),\n             (PathKind::Attr { .. }, _) => false,"}, {"sha": "bc8c070c14d01294c8e3497d7cd7b57e461e5360", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -18,9 +18,12 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Type, is_absolute_path, qualifier, .. }) => {\n-            (is_absolute_path, qualifier)\n-        }\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Type { .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier),\n         _ => return,\n     };\n "}, {"sha": "a4b38d3f2467d4d8a866412f77ea5ebc5c8681ad", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -49,7 +49,9 @@ pub(super) enum PathKind {\n         in_block_expr: bool,\n         in_loop_body: bool,\n     },\n-    Type,\n+    Type {\n+        in_tuple_struct: bool,\n+    },\n     Attr {\n         kind: AttrKind,\n         annotated_item_kind: Option<SyntaxKind>,\n@@ -1222,7 +1224,9 @@ impl<'a> CompletionContext<'a> {\n             // using Option<Option<PathKind>> as extra controlflow\n             let kind = match_ast! {\n                 match it {\n-                    ast::PathType(_) => Some(PathKind::Type),\n+                    ast::PathType(it) => Some(PathKind::Type {\n+                        in_tuple_struct: it.syntax().parent().map_or(false, |it| ast::TupleField::can_cast(it.kind()))\n+                    }),\n                     ast::PathExpr(it) => {\n                         if let Some(p) = it.syntax().parent() {\n                             if ast::ExprStmt::can_cast(p.kind()) {\n@@ -1262,7 +1266,7 @@ impl<'a> CompletionContext<'a> {\n                         let parent = it.syntax().parent();\n                         match parent.as_ref().map(|it| it.kind()) {\n                             Some(SyntaxKind::MACRO_PAT) => Some(PathKind::Pat),\n-                            Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type),\n+                            Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type { in_tuple_struct: false }),\n                             Some(SyntaxKind::ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::Module }),\n                             Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()) {\n                                 Some(it) => match_ast! {"}, {"sha": "c100dd63eacfd9fbca73faa62cc1029631d363e7", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -158,6 +158,7 @@ pub fn completions(\n             completions::dot::complete_dot(acc, ctx);\n             completions::expr::complete_expr_path(acc, ctx);\n             completions::extern_abi::complete_extern_abi(acc, ctx);\n+            completions::field::complete_field_list(acc, ctx);\n             completions::flyimport::import_on_the_fly(acc, ctx);\n             completions::fn_param::complete_fn_param(acc, ctx);\n             completions::format_string::format_string(acc, ctx);"}, {"sha": "ca2b3ad34350dacb1699d75528a568a31a2135a5", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -286,7 +286,7 @@ fn render_resolution_simple_(\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         ctx.completion.path_context(),\n-        Some(PathCompletionCtx { kind: PathKind::Type, has_type_args: false, .. })\n+        Some(PathCompletionCtx { kind: PathKind::Type { .. }, has_type_args: false, .. })\n     ) && ctx.completion.config.callable.is_some();\n     if type_path_no_ty_args {\n         if let Some(cap) = ctx.snippet_cap() {"}, {"sha": "0be51b0e3ff66cdbd14f0d7449955a9f368080cf", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -202,7 +202,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n         Some(PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }) => {\n             return false\n         }\n-        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type, .. }) => {\n+        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }) => {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "9e50e00ab73c4492af05067548128632d5a6f484", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -100,14 +100,17 @@ fn after_fn_name() {\n \n #[test]\n fn before_record_field() {\n-    // FIXME: This should emit visibility qualifiers\n     check(\n         r#\"\n struct Foo {\n     $0\n     pub f: i32,\n }\n \"#,\n-        expect![[r#\"\"#]],\n+        expect![[r#\"\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n+        \"#]],\n     )\n }"}, {"sha": "1e5e86eef598a10ff8acb9227f334acd09dd4eb6", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dcc77b40a19dada837e50374d1851754f5eb2a/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=c5dcc77b40a19dada837e50374d1851754f5eb2a", "patch": "@@ -38,14 +38,13 @@ struct Foo<'lt, T, const C: usize> {\n \n #[test]\n fn tuple_struct_field() {\n-    // FIXME: This should emit visibility qualifiers\n     check(\n         r#\"\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n         expect![[r#\"\n             en Enum\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n             sp Self\n             st Foo<\u2026>\n@@ -57,6 +56,9 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             un Union\n             bt u32\n             kw crate::\n+            kw pub\n+            kw pub(crate)\n+            kw pub(super)\n             kw self::\n             kw super::\n         \"#]],"}]}