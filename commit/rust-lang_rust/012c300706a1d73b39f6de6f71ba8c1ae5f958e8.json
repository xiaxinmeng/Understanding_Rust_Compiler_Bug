{"sha": "012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMmMzMDA3MDZhMWQ3M2IzOWY2ZGU2ZjcxYmE4YzFhZTVmOTU4ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T12:50:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T12:50:06Z"}, "message": "Auto merge of #60351 - Centril:rollup-5xv3tka, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #60022 (Document `Item` type in `std::env::SplitPaths` iterator.)\n - #60270 (rustc: Flag metadata compatible with multiple CGUs)\n - #60325 (Document ast::ExprKind::Type)\n - #60347 (Remove `-Z two-phase-borrows` and `-Z two-phase-beyond-autoref`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "af5f9b434ea369979e16fa4c32d67ab450192b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5f9b434ea369979e16fa4c32d67ab450192b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "html_url": "https://github.com/rust-lang/rust/commit/012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3418d2f50867b2c179be4239aedfffef9a650d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3418d2f50867b2c179be4239aedfffef9a650d5f", "html_url": "https://github.com/rust-lang/rust/commit/3418d2f50867b2c179be4239aedfffef9a650d5f"}, {"sha": "fe52f8e3770a4e6e60766d75a7f115d18f07e70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe52f8e3770a4e6e60766d75a7f115d18f07e70e", "html_url": "https://github.com/rust-lang/rust/commit/fe52f8e3770a4e6e60766d75a7f115d18f07e70e"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "262f507f8eead8457f6b9cccb78f9089bbaecb2e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "patch": "@@ -155,13 +155,12 @@ impl_stable_hash_via_hash!(OutputType);\n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n         match *self {\n-            OutputType::Exe | OutputType::DepInfo => true,\n+            OutputType::Exe | OutputType::DepInfo | OutputType::Metadata => true,\n             OutputType::Bitcode\n             | OutputType::Assembly\n             | OutputType::LlvmAssembly\n             | OutputType::Mir\n-            | OutputType::Object\n-            | OutputType::Metadata => false,\n+            | OutputType::Object => false,\n         }\n     }\n \n@@ -1216,10 +1215,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n     borrowck: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"select which borrowck is used (`ast`, `mir`, `migrate`, or `compare`)\"),\n-    two_phase_borrows: bool = (false, parse_bool, [UNTRACKED],\n-        \"use two-phase reserved/active distinction for `&mut` borrows in MIR borrowck\"),\n-    two_phase_beyond_autoref: bool = (false, parse_bool, [UNTRACKED],\n-        \"when using two-phase-borrows, allow two phases even for non-autoref `&mut` borrows\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n     time: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "c8d6ee9db6f9e73370c0515bfde18fa04d7312f3", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "patch": "@@ -1,5 +1,6 @@\n use crate::borrow_check::place_ext::PlaceExt;\n use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::path_utils::allow_two_phase_borrow;\n use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n@@ -299,13 +300,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n-    /// Returns `true` if the borrow represented by `kind` is\n-    /// allowed to be split into separate Reservation and\n-    /// Activation phases.\n-    fn allow_two_phase_borrow(&self, kind: mir::BorrowKind) -> bool {\n-        kind.allows_two_phase_borrow()\n-            || self.tcx.sess.opts.debugging_opts.two_phase_beyond_autoref\n-    }\n \n     /// If this is a two-phase borrow, then we will record it\n     /// as \"pending\" until we find the activating use.\n@@ -321,7 +315,7 @@ impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n             start_location, assigned_place, borrow_index,\n         );\n \n-        if !self.allow_two_phase_borrow(kind) {\n+        if !allow_two_phase_borrow(&self.tcx, kind) {\n             debug!(\"  -> {:?}\", start_location);\n             return;\n         }"}, {"sha": "f6a22cf040797b19d3b61f55d4b2a484ef2f488d", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "patch": "@@ -12,11 +12,10 @@ use rustc_data_structures::graph::dominators::Dominators;\n /// allowed to be split into separate Reservation and\n /// Activation phases.\n pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(\n-    tcx: &TyCtxt<'a, 'gcx, 'tcx>,\n+    _tcx: &TyCtxt<'a, 'gcx, 'tcx>,\n     kind: BorrowKind\n ) -> bool {\n     kind.allows_two_phase_borrow()\n-        || tcx.sess.opts.debugging_opts.two_phase_beyond_autoref\n }\n \n /// Control for the path borrow checking code"}, {"sha": "c0d0c23e469680c24b7ddf37fba83c67b47a795a", "filename": "src/libstd/env.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "patch": "@@ -359,17 +359,21 @@ fn _remove_var(k: &OsStr) {\n /// An iterator that splits an environment variable into paths according to\n /// platform-specific conventions.\n ///\n+/// The iterator element type is [`PathBuf`].\n+///\n /// This structure is created by the [`std::env::split_paths`] function. See its\n /// documentation for more.\n ///\n+/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n /// [`std::env::split_paths`]: fn.split_paths.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n \n /// Parses input according to platform conventions for the `PATH`\n /// environment variable.\n ///\n-/// Returns an iterator over the paths contained in `unparsed`.\n+/// Returns an iterator over the paths contained in `unparsed`. The iterator\n+/// element type is [`PathBuf`].\n ///\n /// # Examples\n ///\n@@ -386,6 +390,8 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+///\n+/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_> {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_ref()) }"}, {"sha": "a20bf91a6ad435045e2818467636cf80d15a2587", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012c300706a1d73b39f6de6f71ba8c1ae5f958e8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=012c300706a1d73b39f6de6f71ba8c1ae5f958e8", "patch": "@@ -1137,6 +1137,7 @@ pub enum ExprKind {\n     Lit(Lit),\n     /// A cast (e.g., `foo as f64`).\n     Cast(P<Expr>, P<Ty>),\n+    /// A type ascription (e.g., `42: usize`).\n     Type(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional `else` block.\n     ///"}]}