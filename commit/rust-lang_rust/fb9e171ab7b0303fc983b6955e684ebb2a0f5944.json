{"sha": "fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "node_id": "C_kwDOAAsO6NoAKGZiOWUxNzFhYjdiMDMwM2ZjOTgzYjY5NTVlNjg0ZWJiMmEwZjU5NDQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:11:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:11:32Z"}, "message": "Only implement Fn* traits for extern \"Rust\" safe function pointers.", "tree": {"sha": "27bb9cf155a9cb76d3b459825c6b212ceb2d3e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27bb9cf155a9cb76d3b459825c6b212ceb2d3e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "html_url": "https://github.com/rust-lang/rust/commit/fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c47b8279b39e165dfebeb529eb6d92592e4f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c47b8279b39e165dfebeb529eb6d92592e4f8d", "html_url": "https://github.com/rust-lang/rust/commit/84c47b8279b39e165dfebeb529eb6d92592e4f8d"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "51a1a88f8e770bde1e636b1c62564d4907c4d6df", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_target::spec::abi::Abi;\n \n use crate::solve::EvalCtxt;\n \n@@ -194,7 +195,20 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n                 .subst(tcx, substs)\n                 .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n         )),\n-        ty::FnPtr(sig) => Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())))),\n+        // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n+        ty::FnPtr(sig) => {\n+            if let ty::FnSig {\n+                unsafety: rustc_hir::Unsafety::Normal,\n+                abi: Abi::Rust,\n+                c_variadic: false,\n+                ..\n+            } = sig.skip_binder()\n+            {\n+                Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output()))))\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();\n             match closure_substs.kind_ty().to_opt_closure_kind() {"}, {"sha": "2b3f003353c669be243b6d844bb4f497601e43b3", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "patch": "@@ -291,6 +291,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        // Keep this funtion in sync with extract_tupled_inputs_and_output_from_callable\n+        // until the old solver (and thus this function) is removed.\n+\n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n         match *self_ty.kind() {"}, {"sha": "8967858a8ba578f30d9ece8b8686bbb0e4e957ac", "filename": "tests/ui/traits/new-solver/fn-trait.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs?ref=fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "patch": "@@ -1,13 +1,28 @@\n // compile-flags: -Ztrait-solver=next\n-// check-pass\n \n fn require_fn(_: impl Fn() -> i32) {}\n \n fn f() -> i32 {\n     1i32\n }\n \n+extern \"C\" fn g() -> i32 {\n+    2i32\n+}\n+\n+unsafe fn h() -> i32 {\n+    2i32\n+}\n+\n fn main() {\n     require_fn(f);\n     require_fn(f as fn() -> i32);\n+    require_fn(f as unsafe fn() -> i32);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `unsafe fn() -> i32`\n+    //~| ERROR: type mismatch resolving `<unsafe fn() -> i32 as FnOnce<()>>::Output == i32`\n+    require_fn(g);\n+    require_fn(g as extern \"C\" fn() -> i32);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+    //~| ERROR: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n+    require_fn(h);\n }"}, {"sha": "01f1b64be20cc40f58345d09a807546163aa7735", "filename": "tests/ui/traits/new-solver/fn-trait.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e171ab7b0303fc983b6955e684ebb2a0f5944/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr?ref=fb9e171ab7b0303fc983b6955e684ebb2a0f5944", "patch": "@@ -0,0 +1,64 @@\n+error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() -> i32`\n+  --> $DIR/fn-trait.rs:20:16\n+   |\n+LL |     require_fn(f as unsafe fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for `unsafe fn() -> i32`\n+   = note: wrap the `unsafe fn() -> i32` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<unsafe fn() -> i32 as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:20:16\n+   |\n+LL |     require_fn(f as unsafe fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+  --> $DIR/fn-trait.rs:24:16\n+   |\n+LL |     require_fn(g as extern \"C\" fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for `extern \"C\" fn() -> i32`\n+   = note: wrap the `extern \"C\" fn() -> i32` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:24:16\n+   |\n+LL |     require_fn(g as extern \"C\" fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}]}