{"sha": "7477d445c8b2e942f5cc745fae0e3233494e7460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzdkNDQ1YzhiMmU5NDJmNWNjNzQ1ZmFlMGUzMjMzNDk0ZTc0NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T10:59:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-10T10:59:20Z"}, "message": "Auto merge of #77717 - tmiasko:posix-spawn-error-check, r=cuviper\n\nFix error checking in posix_spawn implementation of Command\n\n* Check for errors returned from posix_spawn*_init functions\n* Check for non-zero return value from posix_spawn functions", "tree": {"sha": "bbad7b8ff2c98364e55cdb270a3ccc8d5ca04b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbad7b8ff2c98364e55cdb270a3ccc8d5ca04b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7477d445c8b2e942f5cc745fae0e3233494e7460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7477d445c8b2e942f5cc745fae0e3233494e7460", "html_url": "https://github.com/rust-lang/rust/commit/7477d445c8b2e942f5cc745fae0e3233494e7460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7477d445c8b2e942f5cc745fae0e3233494e7460/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e022fc2b8eecbc16c090a99efbbd262c37ec962", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e022fc2b8eecbc16c090a99efbbd262c37ec962", "html_url": "https://github.com/rust-lang/rust/commit/0e022fc2b8eecbc16c090a99efbbd262c37ec962"}, {"sha": "6cd5506897d5aadb57455f5081ff8efd77f93b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd5506897d5aadb57455f5081ff8efd77f93b69", "html_url": "https://github.com/rust-lang/rust/commit/6cd5506897d5aadb57455f5081ff8efd77f93b69"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "5e55f97705db6654f4363c4543fb94acbca89985", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7477d445c8b2e942f5cc745fae0e3233494e7460/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7477d445c8b2e942f5cc745fae0e3233494e7460/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=7477d445c8b2e942f5cc745fae0e3233494e7460", "patch": "@@ -319,79 +319,85 @@ impl Command {\n \n         let mut p = Process { pid: 0, status: None };\n \n-        struct PosixSpawnFileActions(MaybeUninit<libc::posix_spawn_file_actions_t>);\n+        struct PosixSpawnFileActions<'a>(&'a mut MaybeUninit<libc::posix_spawn_file_actions_t>);\n \n-        impl Drop for PosixSpawnFileActions {\n+        impl Drop for PosixSpawnFileActions<'_> {\n             fn drop(&mut self) {\n                 unsafe {\n                     libc::posix_spawn_file_actions_destroy(self.0.as_mut_ptr());\n                 }\n             }\n         }\n \n-        struct PosixSpawnattr(MaybeUninit<libc::posix_spawnattr_t>);\n+        struct PosixSpawnattr<'a>(&'a mut MaybeUninit<libc::posix_spawnattr_t>);\n \n-        impl Drop for PosixSpawnattr {\n+        impl Drop for PosixSpawnattr<'_> {\n             fn drop(&mut self) {\n                 unsafe {\n                     libc::posix_spawnattr_destroy(self.0.as_mut_ptr());\n                 }\n             }\n         }\n \n+        fn cvt_nz(error: libc::c_int) -> io::Result<()> {\n+            if error == 0 { Ok(()) } else { Err(io::Error::from_raw_os_error(error)) }\n+        }\n+\n         unsafe {\n-            let mut file_actions = PosixSpawnFileActions(MaybeUninit::uninit());\n-            let mut attrs = PosixSpawnattr(MaybeUninit::uninit());\n+            let mut attrs = MaybeUninit::uninit();\n+            cvt_nz(libc::posix_spawnattr_init(attrs.as_mut_ptr()))?;\n+            let attrs = PosixSpawnattr(&mut attrs);\n \n-            libc::posix_spawnattr_init(attrs.0.as_mut_ptr());\n-            libc::posix_spawn_file_actions_init(file_actions.0.as_mut_ptr());\n+            let mut file_actions = MaybeUninit::uninit();\n+            cvt_nz(libc::posix_spawn_file_actions_init(file_actions.as_mut_ptr()))?;\n+            let file_actions = PosixSpawnFileActions(&mut file_actions);\n \n             if let Some(fd) = stdio.stdin.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDIN_FILENO,\n                 ))?;\n             }\n             if let Some(fd) = stdio.stdout.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDOUT_FILENO,\n                 ))?;\n             }\n             if let Some(fd) = stdio.stderr.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDERR_FILENO,\n                 ))?;\n             }\n             if let Some((f, cwd)) = addchdir {\n-                cvt(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n+                cvt_nz(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n             }\n \n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             cvt(sigemptyset(set.as_mut_ptr()))?;\n-            cvt(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n+            cvt_nz(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n             cvt(sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n-            cvt(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n+            cvt_nz(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n \n             let flags = libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n-            cvt(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n+            cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n             let _env_lock = sys::os::env_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n-            let ret = libc::posix_spawnp(\n+            cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,\n                 self.get_program_cstr().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,\n                 envp as *const _,\n-            );\n-            if ret == 0 { Ok(Some(p)) } else { Err(io::Error::from_raw_os_error(ret)) }\n+            ))?;\n+            Ok(Some(p))\n         }\n     }\n }"}]}