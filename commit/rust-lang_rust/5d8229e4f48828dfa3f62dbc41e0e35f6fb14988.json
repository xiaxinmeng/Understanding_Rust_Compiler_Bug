{"sha": "5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODIyOWU0ZjQ4ODI4ZGZhM2Y2MmRiYzQxZTBlMzVmNmZiMTQ5ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T08:10:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-25T08:10:28Z"}, "message": "Auto merge of #1259 - RalfJung:rustup, r=RalfJung\n\nrustup, adjust for renames", "tree": {"sha": "e71536fe180f174fe71eb906cb99e8e8474ca641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71536fe180f174fe71eb906cb99e8e8474ca641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "html_url": "https://github.com/rust-lang/rust/commit/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d74a60267b80410fc189f03bf2bc8595b6cedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d74a60267b80410fc189f03bf2bc8595b6cedf", "html_url": "https://github.com/rust-lang/rust/commit/a6d74a60267b80410fc189f03bf2bc8595b6cedf"}, {"sha": "9b0e9dec49096a409d5f5e333dbf4f2a766b3c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0e9dec49096a409d5f5e333dbf4f2a766b3c70", "html_url": "https://github.com/rust-lang/rust/commit/9b0e9dec49096a409d5f5e333dbf4f2a766b3c70"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3a7d316af8e9e9b8a89e73ebc8e6eb37463cfb26", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "patch": "@@ -1 +1 @@\n-342c5f33d097b2dc07a2dbc0ca45a37379d2ff60\n+02046a5d402c789c006d0da7662f800fe3c45faf"}, {"sha": "84ac8b81a0618100fa47ad9d2410f8fab4bcdcfe", "filename": "src/machine.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "patch": "@@ -50,8 +50,8 @@ pub enum MiriMemoryKind {\n     WinHeap,\n     /// Memory for env vars and args, errno, extern statics and other parts of the machine-managed environment.\n     Machine,\n-    /// Rust statics.\n-    Static,\n+    /// Globals copied from `tcx`.\n+    Global,\n }\n \n impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n@@ -212,7 +212,7 @@ impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx>\n \n /// Machine hook implementations.\n impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n-    type MemoryKinds = MiriMemoryKind;\n+    type MemoryKind = MiriMemoryKind;\n \n     type FrameExtra = FrameData<'tcx>;\n     type MemoryExtra = MemoryExtra;\n@@ -223,7 +223,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryMap =\n         MonoHashMap<AllocId, (MemoryKind<MiriMemoryKind>, Allocation<Tag, Self::AllocExtra>)>;\n \n-    const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Static);\n+    const GLOBAL_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Global);\n \n     const CHECK_ALIGN: bool = true;\n \n@@ -348,7 +348,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         memory_extra: &MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n-        kind: Option<MemoryKind<Self::MemoryKinds>>,\n+        kind: Option<MemoryKind<Self::MemoryKind>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         if Some(id) == memory_extra.tracked_alloc_id {\n             register_diagnostic(NonHaltingDiagnostic::CreatedAlloc(id));\n@@ -369,9 +369,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n             |alloc| {\n                 if let Some(stacked_borrows) = stacked_borrows.as_mut() {\n-                    // Only statics may already contain pointers at this point\n-                    assert_eq!(kind, MiriMemoryKind::Static.into());\n-                    stacked_borrows.static_base_ptr(alloc)\n+                    // Only globals may already contain pointers at this point\n+                    assert_eq!(kind, MiriMemoryKind::Global.into());\n+                    stacked_borrows.global_base_ptr(alloc)\n                 } else {\n                     Tag::Untagged\n                 }\n@@ -382,9 +382,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n+    fn tag_global_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n-            stacked_borrows.borrow_mut().static_base_ptr(id)\n+            stacked_borrows.borrow_mut().global_base_ptr(id)\n         } else {\n             Tag::Untagged\n         }\n@@ -486,7 +486,7 @@ impl MayLeak for MiriMemoryKind {\n         use self::MiriMemoryKind::*;\n         match self {\n             Rust | C | WinHeap => false,\n-            Machine | Static => true,\n+            Machine | Global => true,\n         }\n     }\n }"}, {"sha": "11b6cdca579afb5e9ef939cb5a2f16428344658a", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8229e4f48828dfa3f62dbc41e0e35f6fb14988/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=5d8229e4f48828dfa3f62dbc41e0e35f6fb14988", "patch": "@@ -182,7 +182,7 @@ impl GlobalState {\n         self.active_calls.contains(&id)\n     }\n \n-    pub fn static_base_ptr(&mut self, id: AllocId) -> Tag {\n+    pub fn global_base_ptr(&mut self, id: AllocId) -> Tag {\n         self.base_ptr_ids.get(&id).copied().unwrap_or_else(|| {\n             let tag = Tag::Tagged(self.new_ptr());\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n@@ -457,12 +457,12 @@ impl Stacks {\n             // everything else off the stack, invalidating all previous pointers,\n             // and in particular, *all* raw pointers.\n             MemoryKind::Stack => (Tag::Tagged(extra.borrow_mut().new_ptr()), Permission::Unique),\n-            // Static memory can be referenced by \"global\" pointers from `tcx`.\n-            // Thus we call `static_base_ptr` such that the global pointers get the same tag\n+            // Global memory can be referenced by global pointers from `tcx`.\n+            // Thus we call `global_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(MiriMemoryKind::Static) | MemoryKind::Machine(MiriMemoryKind::Machine) =>\n-                (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n+            MemoryKind::Machine(MiriMemoryKind::Global) | MemoryKind::Machine(MiriMemoryKind::Machine) =>\n+                (extra.borrow_mut().global_base_ptr(id), Permission::SharedReadWrite),\n             // Everything else we handle entirely untagged for now.\n             // FIXME: experiment with more precise tracking.\n             _ => (Tag::Untagged, Permission::SharedReadWrite),"}]}