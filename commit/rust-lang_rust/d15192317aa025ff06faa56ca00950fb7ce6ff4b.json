{"sha": "d15192317aa025ff06faa56ca00950fb7ce6ff4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNTE5MjMxN2FhMDI1ZmYwNmZhYTU2Y2EwMDk1MGZiN2NlNmZmNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T16:09:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T16:09:48Z"}, "message": "Auto merge of #21518 - Zoxc:asm-err, r=luqmana\n\nBefore:\r\n```\r\nerror: invalid operand for inline asm constraint 'i' at line 11\r\n```\r\nNote that 11 is not the line the inline assembly appears in.\r\n\r\nAfter:\r\n```\r\nsrc/arch/x64/multiboot/bootstrap.rs:203:5: 209:9 error: invalid operand for inline asm constraint 'i'\r\nsrc/arch/x64/multiboot/bootstrap.rs:203     asm! {\r\nsrc/arch/x64/multiboot/bootstrap.rs:204         [multiboot => %ecx, mod attsyntax]\r\nsrc/arch/x64/multiboot/bootstrap.rs:205 \r\nsrc/arch/x64/multiboot/bootstrap.rs:206         ljmp {size_of::<Descriptor>() => %i}, $bootstrap.64\r\nsrc/arch/x64/multiboot/bootstrap.rs:207     }\r\nsrc/arch/x64/multiboot/bootstrap.rs:208 \r\n                                        ...\r\nerror: aborting due to previous error\r\n```", "tree": {"sha": "f73000348615874afc4caa279494fd3f4bf77bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73000348615874afc4caa279494fd3f4bf77bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15192317aa025ff06faa56ca00950fb7ce6ff4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15192317aa025ff06faa56ca00950fb7ce6ff4b", "html_url": "https://github.com/rust-lang/rust/commit/d15192317aa025ff06faa56ca00950fb7ce6ff4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15192317aa025ff06faa56ca00950fb7ce6ff4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102ab57d8085fcb87c02dae929959ccaaa9af548", "url": "https://api.github.com/repos/rust-lang/rust/commits/102ab57d8085fcb87c02dae929959ccaaa9af548", "html_url": "https://github.com/rust-lang/rust/commit/102ab57d8085fcb87c02dae929959ccaaa9af548"}, {"sha": "4cfb70026c91a338518a17579bcd62a32a0a413d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfb70026c91a338518a17579bcd62a32a0a413d", "html_url": "https://github.com/rust-lang/rust/commit/4cfb70026c91a338518a17579bcd62a32a0a413d"}], "stats": {"total": 94, "additions": 77, "deletions": 17}, "files": [{"sha": "5d0ae9d1f92ec8c53caafb5563bda11fde08c776", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=d15192317aa025ff06faa56ca00950fb7ce6ff4b", "patch": "@@ -13,7 +13,7 @@\n pub use self::OptimizationDiagnosticKind::*;\n pub use self::Diagnostic::*;\n \n-use libc::c_char;\n+use libc::{c_char, c_uint};\n use std::ptr;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n@@ -69,9 +69,37 @@ impl OptimizationDiagnostic {\n     }\n }\n \n+pub struct InlineAsmDiagnostic {\n+    pub cookie: c_uint,\n+    pub message: TwineRef,\n+    pub instruction: ValueRef,\n+}\n+\n+impl Copy for InlineAsmDiagnostic {}\n+\n+impl InlineAsmDiagnostic {\n+    unsafe fn unpack(di: DiagnosticInfoRef)\n+            -> InlineAsmDiagnostic {\n+\n+        let mut opt = InlineAsmDiagnostic {\n+            cookie: 0,\n+            message: ptr::null_mut(),\n+            instruction: ptr::null_mut(),\n+        };\n+\n+        super::LLVMUnpackInlineAsmDiagnostic(di,\n+            &mut opt.cookie,\n+            &mut opt.message,\n+            &mut opt.instruction);\n+\n+        opt\n+    }\n+}\n+\n #[derive(Copy)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n+    InlineAsm(InlineAsmDiagnostic),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(DiagnosticInfoRef),\n@@ -82,6 +110,9 @@ impl Diagnostic {\n         let kind = super::LLVMGetDiagInfoKind(di);\n \n         match kind {\n+            super::DK_InlineAsm\n+                => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n+\n             super::DK_OptimizationRemark\n                 => Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di)),\n "}, {"sha": "8c651cf839b74c8ce7f3528e44ace13021577ed4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d15192317aa025ff06faa56ca00950fb7ce6ff4b", "patch": "@@ -2049,6 +2049,10 @@ extern {\n                                             function_out: *mut ValueRef,\n                                             debugloc_out: *mut DebugLocRef,\n                                             message_out: *mut TwineRef);\n+    pub fn LLVMUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n+                                            cookie_out: *mut c_uint,\n+                                            message_out: *mut TwineRef,\n+                                            instruction_out: *mut ValueRef);\n \n     pub fn LLVMWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n     pub fn LLVMGetDiagInfoSeverity(DI: DiagnosticInfoRef) -> DiagnosticSeverity;"}, {"sha": "5e48ce384be518a4a85a386cad7311d252c5a3f7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d15192317aa025ff06faa56ca00950fb7ce6ff4b", "patch": "@@ -336,37 +336,49 @@ struct HandlerFreeVars<'a> {\n     cgcx: &'a CodegenContext<'a>,\n }\n \n-unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n-                                        user: *const c_void,\n-                                        cookie: c_uint) {\n+unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<'a>,\n+                                           msg: &'b str,\n+                                           cookie: c_uint) {\n     use syntax::codemap::ExpnId;\n \n-    let HandlerFreeVars { cgcx, .. }\n-        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n-\n-    let msg = llvm::build_string(|s| llvm::LLVMWriteSMDiagnosticToString(diag, s))\n-        .expect(\"non-UTF8 SMDiagnostic\");\n-\n     match cgcx.lto_ctxt {\n         Some((sess, _)) => {\n             sess.codemap().with_expn_info(ExpnId::from_llvm_cookie(cookie), |info| match info {\n-                Some(ei) => sess.span_err(ei.call_site, &msg[]),\n-                None     => sess.err(&msg[]),\n+                Some(ei) => sess.span_err(ei.call_site, msg),\n+                None     => sess.err(msg),\n             });\n         }\n \n         None => {\n-            cgcx.handler.err(&msg[]);\n+            cgcx.handler.err(msg);\n             cgcx.handler.note(\"build without -C codegen-units for more exact errors\");\n         }\n     }\n }\n \n+unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n+                                        user: *const c_void,\n+                                        cookie: c_uint) {\n+    let HandlerFreeVars { cgcx, .. }\n+        = *mem::transmute::<_, *const HandlerFreeVars>(user);\n+\n+    let msg = llvm::build_string(|s| llvm::LLVMWriteSMDiagnosticToString(diag, s))\n+        .expect(\"non-UTF8 SMDiagnostic\");\n+\n+    report_inline_asm(cgcx, &msg[], cookie);\n+}\n+\n unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_void) {\n     let HandlerFreeVars { llcx, cgcx }\n         = *mem::transmute::<_, *const HandlerFreeVars>(user);\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n+        llvm::diagnostic::InlineAsm(inline) => {\n+            report_inline_asm(cgcx,\n+                              llvm::twine_to_string(inline.message).as_slice(),\n+                              inline.cookie);\n+        }\n+\n         llvm::diagnostic::Optimization(opt) => {\n             let pass_name = str::from_utf8(ffi::c_str_to_bytes(&opt.pass_name))\n                                 .ok()\n@@ -407,10 +419,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     let fv = &fv as *const HandlerFreeVars as *mut c_void;\n \n     llvm::LLVMSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, fv);\n-\n-    if !cgcx.remark.is_empty() {\n-        llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, fv);\n-    }\n+    llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, fv);\n \n     if config.emit_no_opt_bc {\n         let ext = format!(\"{}.no-opt.bc\", name_extra);"}, {"sha": "728ff1461fc2bde54d2079264009474988f728c0", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d15192317aa025ff06faa56ca00950fb7ce6ff4b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d15192317aa025ff06faa56ca00950fb7ce6ff4b", "patch": "@@ -894,6 +894,22 @@ LLVMUnpackOptimizationDiagnostic(\n     *message_out = wrap(&opt->getMsg());\n }\n \n+extern \"C\" void\n+LLVMUnpackInlineAsmDiagnostic(\n+    LLVMDiagnosticInfoRef di,\n+    unsigned *cookie_out,\n+    LLVMTwineRef *message_out,\n+    LLVMValueRef *instruction_out)\n+{\n+    // Undefined to call this not on an inline assembly diagnostic!\n+    llvm::DiagnosticInfoInlineAsm *ia\n+        = static_cast<llvm::DiagnosticInfoInlineAsm*>(unwrap(di));\n+\n+    *cookie_out = ia->getLocCookie();\n+    *message_out = wrap(&ia->getMsgStr());\n+    *instruction_out = wrap(ia->getInstruction());\n+}\n+\n extern \"C\" void LLVMWriteDiagnosticInfoToString(LLVMDiagnosticInfoRef di, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     DiagnosticPrinterRawOStream dp(os);"}]}