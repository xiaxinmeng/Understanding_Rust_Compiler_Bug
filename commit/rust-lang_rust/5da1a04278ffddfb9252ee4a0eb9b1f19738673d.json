{"sha": "5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "node_id": "C_kwDOAAsO6NoAKDVkYTFhMDQyNzhmZmRkZmI5MjUyZWU0YTBlYjliMWYxOTczODY3M2Q", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-15T00:51:34Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-15T11:26:15Z"}, "message": "Allow `impl ~const Trait` opaque types", "tree": {"sha": "092ca9f403b975ef828443f11000c3383d63c6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092ca9f403b975ef828443f11000c3383d63c6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "html_url": "https://github.com/rust-lang/rust/commit/5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70baa4f922a1809d79caeaeb902800c3be283b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70baa4f922a1809d79caeaeb902800c3be283b9", "html_url": "https://github.com/rust-lang/rust/commit/b70baa4f922a1809d79caeaeb902800c3be283b9"}], "stats": {"total": 95, "additions": 37, "deletions": 58}, "files": [{"sha": "55ea12d25ea2ceead70b4c4e6c4de49548a84852", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "patch": "@@ -42,7 +42,6 @@ enum SelfSemantic {\n /// What is the context that prevents using `~const`?\n enum DisallowTildeConstContext<'a> {\n     TraitObject,\n-    ImplTrait,\n     Fn(FnKind<'a>),\n }\n \n@@ -187,11 +186,7 @@ impl<'a> AstValidator<'a> {\n \n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n-        if outer.is_some() {\n-            self.with_banned_tilde_const(DisallowTildeConstContext::ImplTrait, f);\n-        } else {\n-            f(self);\n-        }\n+        f(self);\n         self.outer_impl_trait = old;\n     }\n \n@@ -1384,7 +1379,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     let mut err = self.err_handler().struct_span_err(bound.span(), \"`~const` is not allowed here\");\n                     match reason {\n                         DisallowTildeConstContext::TraitObject => err.note(\"trait objects cannot have `~const` trait bounds\"),\n-                        DisallowTildeConstContext::ImplTrait => err.note(\"`impl Trait`s cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Closure(..)) => err.note(\"closures cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Fn(_, ident, ..)) => err.span_note(ident.span, \"this function is not `const`, so it cannot have `~const` trait bounds\"),\n                     };"}, {"sha": "2059f6d79a5733444a22fdf4c8077fced509e3f2", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-trait.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs?ref=5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+#![feature(associated_type_bounds, const_trait_impl, const_cmp)]\n+\n+use std::marker::Destruct;\n+\n+const fn cmp(a: &impl ~const PartialEq) -> bool {\n+    a == a\n+}\n+\n+const fn wrap(x: impl ~const PartialEq + ~const Destruct) -> impl ~const PartialEq + ~const Destruct {\n+    x\n+}\n+\n+const _: () = {\n+    assert!(cmp(&0xDEADBEEFu32));\n+    assert!(cmp(&()));\n+    assert!(wrap(123) == wrap(123));\n+    assert!(wrap(123) != wrap(456));\n+};\n+\n+#[const_trait]\n+trait T {}\n+struct S;\n+impl const T for S {}\n+\n+const fn rpit() -> impl ~const T { S }\n+\n+const fn apit(_: impl ~const T + ~const Destruct) {}\n+\n+const fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+\n+const fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T> + ~const Destruct) {}\n+\n+fn main() {}"}, {"sha": "95f7aaba0fc389fe5d8c895e6a319947bb554829", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "patch": "@@ -1,23 +1,6 @@\n #![feature(const_trait_impl)]\n #![feature(associated_type_bounds)]\n \n-#[const_trait]\n-trait T {}\n-struct S;\n-impl T for S {}\n-\n-fn rpit() -> impl ~const T { S }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit(_: impl ~const T) {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-//~^ ERROR `~const` is not allowed\n-\n struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n "}, {"sha": "d20f146df3f1a102fa36cbe168734f1cec616f91", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da1a04278ffddfb9252ee4a0eb9b1f19738673d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=5da1a04278ffddfb9252ee4a0eb9b1f19738673d", "patch": "@@ -1,40 +1,8 @@\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:9:19\n-   |\n-LL | fn rpit() -> impl ~const T { S }\n-   |                   ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:12:17\n-   |\n-LL | fn apit(_: impl ~const T) {}\n-   |                 ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:15:50\n-   |\n-LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-   |                                                  ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:18:48\n-   |\n-LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-   |                                                ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:21:25\n+  --> $DIR/tilde-const-invalid-places.rs:4:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n "}]}