{"sha": "ddee45e1d7fd34563c13513d974f792fae41a2f7", "node_id": "C_kwDOAAsO6NoAKGRkZWU0NWUxZDdmZDM0NTYzYzEzNTEzZDk3NGY3OTJmYWU0MWEyZjc", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-07-05T17:56:22Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-08-28T17:46:45Z"}, "message": "Support `#[unix_sigpipe = \"inherit|sig_dfl|sig_ign\"]` on `fn main()`\n\nThis makes it possible to instruct libstd to never touch the signal\nhandler for `SIGPIPE`, which makes programs pipeable by default (e.g.\nwith `./your-program | head -n 1`) without `ErrorKind::BrokenPipe`\nerrors.", "tree": {"sha": "680a1cbbe412897e2a0acae57e93d6ffe09a07cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680a1cbbe412897e2a0acae57e93d6ffe09a07cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddee45e1d7fd34563c13513d974f792fae41a2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddee45e1d7fd34563c13513d974f792fae41a2f7", "html_url": "https://github.com/rust-lang/rust/commit/ddee45e1d7fd34563c13513d974f792fae41a2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddee45e1d7fd34563c13513d974f792fae41a2f7/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee285eab69d515114ed54a8e6c25e359acd6b684", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee285eab69d515114ed54a8e6c25e359acd6b684", "html_url": "https://github.com/rust-lang/rust/commit/ee285eab69d515114ed54a8e6c25e359acd6b684"}], "stats": {"total": 492, "additions": 449, "deletions": 43}, "files": [{"sha": "3c024a84d9091f1fb3bf1533443d4ed5bed5a27d", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::LangItem;\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::AssocKind;\n-use rustc_session::config::EntryFnType;\n+use rustc_session::config::{sigpipe, EntryFnType};\n use rustc_span::symbol::Ident;\n \n use crate::prelude::*;\n@@ -15,12 +15,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n     is_jit: bool,\n     is_primary_cgu: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n+    let (main_def_id, (is_main_fn, sigpipe)) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {\n-                EntryFnType::Main => true,\n-                EntryFnType::Start => false,\n+                EntryFnType::Main { sigpipe } => (true, sigpipe),\n+                EntryFnType::Start => (false, sigpipe::DEFAULT),\n             },\n         ),\n         None => return,\n@@ -35,7 +35,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         return;\n     }\n \n-    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn);\n+    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn, sigpipe);\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n@@ -44,6 +44,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         rust_main_def_id: DefId,\n         ignore_lang_start_wrapper: bool,\n         is_main_fn: bool,\n+        sigpipe: u8,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -83,6 +84,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             bcx.switch_to_block(block);\n             let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n             let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n+            let arg_sigpipe = bcx.ins().iconst(types::I8, sigpipe as i64);\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n \n@@ -143,7 +145,8 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n-                let call_inst = bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv]);\n+                let call_inst =\n+                    bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv, arg_sigpipe]);\n                 bcx.inst_results(call_inst)[0]\n             } else {\n                 // using user-defined start fn"}, {"sha": "6e482062383d451884f06dd08dbe887dd2b73274", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -389,15 +389,14 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let main_llfn = cx.get_fn_addr(instance);\n \n-    let use_start_lang_item = EntryFnType::Start != entry_type;\n-    let entry_fn = create_entry_fn::<Bx>(cx, main_llfn, main_def_id, use_start_lang_item);\n+    let entry_fn = create_entry_fn::<Bx>(cx, main_llfn, main_def_id, entry_type);\n     return Some(entry_fn);\n \n     fn create_entry_fn<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,\n         rust_main: Bx::Value,\n         rust_main_def_id: DefId,\n-        use_start_lang_item: bool,\n+        entry_type: EntryFnType,\n     ) -> Bx::Function {\n         // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n         // depending on whether the target needs `argc` and `argv` to be passed in.\n@@ -442,7 +441,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let i8pp_ty = cx.type_ptr_to(cx.type_i8p());\n         let (arg_argc, arg_argv) = get_argc_argv(cx, &mut bx);\n \n-        let (start_fn, start_ty, args) = if use_start_lang_item {\n+        let (start_fn, start_ty, args) = if let EntryFnType::Main { sigpipe } = entry_type {\n             let start_def_id = cx.tcx().require_lang_item(LangItem::Start, None);\n             let start_fn = cx.get_fn_addr(\n                 ty::Instance::resolve(\n@@ -454,8 +453,13 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 .unwrap()\n                 .unwrap(),\n             );\n-            let start_ty = cx.type_func(&[cx.val_ty(rust_main), isize_ty, i8pp_ty], isize_ty);\n-            (start_fn, start_ty, vec![rust_main, arg_argc, arg_argv])\n+\n+            let i8_ty = cx.type_i8();\n+            let arg_sigpipe = bx.const_u8(sigpipe);\n+\n+            let start_ty =\n+                cx.type_func(&[cx.val_ty(rust_main), isize_ty, i8pp_ty, i8_ty], isize_ty);\n+            (start_fn, start_ty, vec![rust_main, arg_argc, arg_argv, arg_sigpipe])\n         } else {\n             debug!(\"using user-defined start fn\");\n             let start_ty = cx.type_func(&[isize_ty, i8pp_ty], isize_ty);"}, {"sha": "89103a876236b7da75d843e84407ca2141676317", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -519,6 +519,8 @@ declare_features! (\n     /// Allows creation of instances of a struct by moving fields that have\n     /// not changed from prior instances of the same struct (RFC #2528)\n     (active, type_changing_struct_update, \"1.58.0\", Some(86555), None),\n+    /// Enables rustc to generate code that instructs libstd to NOT ignore SIGPIPE.\n+    (active, unix_sigpipe, \"CURRENT_RUSTC_VERSION\", Some(97889), None),\n     /// Allows unsized fn parameters.\n     (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n     /// Allows unsized rvalues at arguments and parameters."}, {"sha": "00621341ee3aca4900052712c3b0ba90df80e4e7", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -359,6 +359,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Entry point:\n+    gated!(unix_sigpipe, Normal, template!(Word, NameValueStr: \"inherit|sig_ign|sig_dfl\"), ErrorFollowing, experimental!(unix_sigpipe)),\n     ungated!(start, Normal, template!(Word), WarnFollowing),\n     ungated!(no_start, CrateLevel, template!(Word), WarnFollowing),\n     ungated!(no_main, CrateLevel, template!(Word), WarnFollowing),"}, {"sha": "fceca58530c6c7b34b8ce293f45ec2ea5340daeb", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -1315,7 +1315,7 @@ impl<'v> RootCollector<'_, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        let Some((main_def_id, EntryFnType::Main)) = self.entry_fn else {\n+        let Some((main_def_id, EntryFnType::Main { .. })) = self.entry_fn else {\n             return;\n         };\n "}, {"sha": "94a1e63e3f978d7df7046f64f87572baa202aff1", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -2117,6 +2117,7 @@ fn check_invalid_crate_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n         sym::automatically_derived,\n         sym::start,\n         sym::rustc_main,\n+        sym::unix_sigpipe,\n         sym::derive,\n         sym::test,\n         sym::test_case,"}, {"sha": "cd10170d3ba58756994049556beddc12bd6d18f3", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -1,11 +1,11 @@\n-use rustc_ast::{entry::EntryPointType, Attribute};\n+use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::{ItemId, Node, CRATE_HIR_ID};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n-use rustc_session::config::{CrateType, EntryFnType};\n+use rustc_session::config::{sigpipe, CrateType, EntryFnType};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n@@ -71,14 +71,12 @@ fn entry_point_type(ctxt: &EntryContext<'_>, id: ItemId, at_root: bool) -> Entry\n     }\n }\n \n-fn err_if_attr_found(ctxt: &EntryContext<'_>, attrs: &[Attribute], sym: Symbol) {\n+fn err_if_attr_found(ctxt: &EntryContext<'_>, id: ItemId, sym: Symbol, details: &str) {\n+    let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n     if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym) {\n         ctxt.tcx\n             .sess\n-            .struct_span_err(\n-                attr.span,\n-                &format!(\"`{}` attribute can only be used on functions\", sym),\n-            )\n+            .struct_span_err(attr.span, &format!(\"`{}` attribute {}\", sym, details))\n             .emit();\n     }\n }\n@@ -87,14 +85,16 @@ fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n     let at_root = ctxt.tcx.opt_local_parent(id.def_id) == Some(CRATE_DEF_ID);\n \n     match entry_point_type(ctxt, id, at_root) {\n-        EntryPointType::None => (),\n+        EntryPointType::None => {\n+            err_if_attr_found(ctxt, id, sym::unix_sigpipe, \"can only be used on `fn main()`\");\n+        }\n         _ if !matches!(ctxt.tcx.def_kind(id.def_id), DefKind::Fn) => {\n-            let attrs = ctxt.tcx.hir().attrs(id.hir_id());\n-            err_if_attr_found(ctxt, attrs, sym::start);\n-            err_if_attr_found(ctxt, attrs, sym::rustc_main);\n+            err_if_attr_found(ctxt, id, sym::start, \"can only be used on functions\");\n+            err_if_attr_found(ctxt, id, sym::rustc_main, \"can only be used on functions\");\n         }\n         EntryPointType::MainNamed => (),\n         EntryPointType::OtherMain => {\n+            err_if_attr_found(ctxt, id, sym::unix_sigpipe, \"can only be used on root `fn main()`\");\n             ctxt.non_main_fns.push(ctxt.tcx.def_span(id.def_id));\n         }\n         EntryPointType::RustcMainAttr => {\n@@ -116,6 +116,7 @@ fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n             }\n         }\n         EntryPointType::Start => {\n+            err_if_attr_found(ctxt, id, sym::unix_sigpipe, \"can only be used on `fn main()`\");\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((id.def_id, ctxt.tcx.def_span(id.def_id.to_def_id())));\n             } else {\n@@ -136,8 +137,9 @@ fn find_item(id: ItemId, ctxt: &mut EntryContext<'_>) {\n fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) -> Option<(DefId, EntryFnType)> {\n     if let Some((def_id, _)) = visitor.start_fn {\n         Some((def_id.to_def_id(), EntryFnType::Start))\n-    } else if let Some((def_id, _)) = visitor.attr_main_fn {\n-        Some((def_id.to_def_id(), EntryFnType::Main))\n+    } else if let Some((local_def_id, _)) = visitor.attr_main_fn {\n+        let def_id = local_def_id.to_def_id();\n+        Some((def_id, EntryFnType::Main { sigpipe: sigpipe(tcx, def_id) }))\n     } else {\n         if let Some(main_def) = tcx.resolutions(()).main_def && let Some(def_id) = main_def.opt_fn_def_id() {\n             // non-local main imports are handled below\n@@ -161,13 +163,39 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) -> Option<(DefId,\n                 )\n                 .emit();\n             }\n-            return Some((def_id, EntryFnType::Main));\n+            return Some((def_id, EntryFnType::Main { sigpipe: sigpipe(tcx, def_id) }));\n         }\n         no_main_err(tcx, visitor);\n         None\n     }\n }\n \n+fn sigpipe(tcx: TyCtxt<'_>, def_id: DefId) -> u8 {\n+    if let Some(attr) = tcx.get_attr(def_id, sym::unix_sigpipe) {\n+        match (attr.value_str(), attr.meta_item_list()) {\n+            (Some(sym::inherit), None) => sigpipe::INHERIT,\n+            (Some(sym::sig_ign), None) => sigpipe::SIG_IGN,\n+            (Some(sym::sig_dfl), None) => sigpipe::SIG_DFL,\n+            (_, Some(_)) => {\n+                // Keep going so that `fn emit_malformed_attribute()` can print\n+                // an excellent error message\n+                sigpipe::DEFAULT\n+            }\n+            _ => {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"valid values for `#[unix_sigpipe = \\\"...\\\"]` are `inherit`, `sig_ign`, or `sig_dfl`\",\n+                    )\n+                    .emit();\n+                sigpipe::DEFAULT\n+            }\n+        }\n+    } else {\n+        sigpipe::DEFAULT\n+    }\n+}\n+\n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n     let sp = tcx.def_span(CRATE_DEF_ID);\n     if *tcx.sess.parse_sess.reached_eof.borrow() {"}, {"sha": "e7c8538300efb13bb35b2923d7416df5871fba85", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -36,6 +36,8 @@ use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n \n+pub mod sigpipe;\n+\n /// The different settings that the `-C strip` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum Strip {\n@@ -798,7 +800,15 @@ impl UnstableOptions {\n // The type of entry function, so users can have their own entry functions\n #[derive(Copy, Clone, PartialEq, Hash, Debug, HashStable_Generic)]\n pub enum EntryFnType {\n-    Main,\n+    Main {\n+        /// Specifies what to do with `SIGPIPE` before calling `fn main()`.\n+        ///\n+        /// What values that are valid and what they mean must be in sync\n+        /// across rustc and libstd, but we don't want it public in libstd,\n+        /// so we take a bit of an unusual approach with simple constants\n+        /// and an `include!()`.\n+        sigpipe: u8,\n+    },\n     Start,\n }\n "}, {"sha": "31a3d9de05be6081c1a21c91e99dde4a80d38d88", "filename": "compiler/rustc_session/src/config/sigpipe.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_session%2Fsrc%2Fconfig%2Fsigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_session%2Fsrc%2Fconfig%2Fsigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig%2Fsigpipe.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,20 @@\n+/// Do not touch `SIGPIPE`. Use whatever the parent process uses.\n+#[allow(dead_code)]\n+pub const INHERIT: u8 = 1;\n+\n+/// Change `SIGPIPE` to `SIG_IGN` so that failed writes results in `EPIPE`\n+/// that are eventually converted to `ErrorKind::BrokenPipe`.\n+#[allow(dead_code)]\n+pub const SIG_IGN: u8 = 2;\n+\n+/// Change `SIGPIPE` to `SIG_DFL` so that the process is killed when trying\n+/// to write to a closed pipe. This is usually the desired behavior for CLI\n+/// apps that produce textual output that you want to pipe to other programs\n+/// such as `head -n 1`.\n+#[allow(dead_code)]\n+pub const SIG_DFL: u8 = 3;\n+\n+/// `SIG_IGN` has been the Rust default since 2014. See\n+/// <https://github.com/rust-lang/rust/issues/62569>.\n+#[allow(dead_code)]\n+pub const DEFAULT: u8 = SIG_IGN;"}, {"sha": "92f1b2d4ea66d10b81716ff47952e16ea6c5d29e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -819,6 +819,7 @@ symbols! {\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n         inherent_associated_types,\n+        inherit,\n         inlateout,\n         inline,\n         inline_const,\n@@ -1301,6 +1302,8 @@ symbols! {\n         should_panic,\n         shr,\n         shr_assign,\n+        sig_dfl,\n+        sig_ign,\n         simd,\n         simd_add,\n         simd_and,\n@@ -1519,6 +1522,7 @@ symbols! {\n         unit,\n         universal_impl_trait,\n         unix,\n+        unix_sigpipe,\n         unlikely,\n         unmarked_api,\n         unpin,"}, {"sha": "82b86d97d95e07e5cede34ead0bf84b55b1dece3", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -443,7 +443,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n \n fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     match tcx.entry_fn(()) {\n-        Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n+        Some((def_id, EntryFnType::Main { .. })) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n         _ => {}\n     }"}, {"sha": "7cf3d7d41634043c98a585cf7ec9c625f11751a4", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -73,9 +73,9 @@ macro_rules! rtunwrap {\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n #[cfg_attr(test, allow(dead_code))]\n-unsafe fn init(argc: isize, argv: *const *const u8) {\n+unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     unsafe {\n-        sys::init(argc, argv);\n+        sys::init(argc, argv, sigpipe);\n \n         let main_guard = sys::thread::guard::init();\n         // Next, set up the current Thread with the guard information we just\n@@ -107,6 +107,7 @@ fn lang_start_internal(\n     main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindSafe),\n     argc: isize,\n     argv: *const *const u8,\n+    sigpipe: u8,\n ) -> Result<isize, !> {\n     use crate::{mem, panic};\n     let rt_abort = move |e| {\n@@ -124,7 +125,7 @@ fn lang_start_internal(\n     // prevent libstd from accidentally introducing a panic to these functions. Another is from\n     // user code from `main` or, more nefariously, as described in e.g. issue #86030.\n     // SAFETY: Only called once during runtime initialization.\n-    panic::catch_unwind(move || unsafe { init(argc, argv) }).map_err(rt_abort)?;\n+    panic::catch_unwind(move || unsafe { init(argc, argv, sigpipe) }).map_err(rt_abort)?;\n     let ret_code = panic::catch_unwind(move || panic::catch_unwind(main).unwrap_or(101) as isize)\n         .map_err(move |e| {\n             mem::forget(e);\n@@ -140,11 +141,16 @@ fn lang_start<T: crate::process::Termination + 'static>(\n     main: fn() -> T,\n     argc: isize,\n     argv: *const *const u8,\n+    #[cfg(not(bootstrap))] sigpipe: u8,\n ) -> isize {\n     let Ok(v) = lang_start_internal(\n         &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report().to_i32(),\n         argc,\n         argv,\n+        #[cfg(bootstrap)]\n+        2, // Temporary inlining of sigpipe::DEFAULT until bootstrap stops being special\n+        #[cfg(not(bootstrap))]\n+        sigpipe,\n     );\n     v\n }"}, {"sha": "61da096ae163883f73370305916aea26aa48d8b5", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -98,7 +98,7 @@ pub extern \"C\" fn __rust_abort() {\n \n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+pub unsafe fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {\n     let _ = net::init();\n     args::init(argc, argv);\n }"}, {"sha": "b1d32929ecfde469ee9a03ef2c9158f1cbd8a2ac", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -47,7 +47,7 @@ pub mod locks {\n \n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+pub unsafe fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {\n     unsafe {\n         args::init(argc, argv);\n     }"}, {"sha": "5867979a2a729408db7b7be74eaf6d68499b5937", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -56,7 +56,7 @@ pub mod locks {\n \n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {}\n \n // SAFETY: must be called only once during runtime cleanup.\n pub unsafe fn cleanup() {}"}, {"sha": "e11201f60ff73daaafc90474c31ef6929e6209f3", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -44,12 +44,12 @@ pub mod thread_parker;\n pub mod time;\n \n #[cfg(target_os = \"espidf\")]\n-pub fn init(argc: isize, argv: *const *const u8) {}\n+pub fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {}\n \n #[cfg(not(target_os = \"espidf\"))]\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     // The standard streams might be closed on application startup. To prevent\n     // std::io::{stdin, stdout,stderr} objects from using other unrelated file\n     // resources opened later, we reopen standards streams when they are closed.\n@@ -61,8 +61,9 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     // want!\n     //\n     // Hence, we set SIGPIPE to ignore when the program starts up in order\n-    // to prevent this problem.\n-    reset_sigpipe();\n+    // to prevent this problem. Add `#[unix_sigpipe = \"...\"]` above `fn main()` to\n+    // alter this behavior.\n+    reset_sigpipe(sigpipe);\n \n     stack_overflow::init();\n     args::init(argc, argv);\n@@ -151,9 +152,25 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n         }\n     }\n \n-    unsafe fn reset_sigpipe() {\n+    unsafe fn reset_sigpipe(#[allow(unused_variables)] sigpipe: u8) {\n         #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n-        rtassert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n+        {\n+            // We don't want to add this as a public type to libstd, nor do we want to\n+            // duplicate the code, so we choose to include this compiler file like this.\n+            mod sigpipe {\n+                include!(\"../../../../../compiler/rustc_session/src/config/sigpipe.rs\");\n+            }\n+\n+            let handler = match sigpipe {\n+                sigpipe::INHERIT => None,\n+                sigpipe::SIG_IGN => Some(libc::SIG_IGN),\n+                sigpipe::SIG_DFL => Some(libc::SIG_DFL),\n+                _ => unreachable!(),\n+            };\n+            if let Some(handler) = handler {\n+                rtassert!(signal(libc::SIGPIPE, handler) != libc::SIG_ERR);\n+            }\n+        }\n     }\n }\n "}, {"sha": "5cd9e57de19ee28e4763887b49d108fe7987b44c", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -6,7 +6,7 @@ pub mod memchr {\n \n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {}\n \n // SAFETY: must be called only once during runtime cleanup.\n // NOTE: this is not guaranteed to run, for example when the program aborts."}, {"sha": "510f470bfe1a0dd329f3b8031351bf8c2e90714e", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -48,7 +48,7 @@ cfg_if::cfg_if! {\n \n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {\n     stack_overflow::init();\n \n     // Normally, `thread::spawn` will call `Thread::set_name` but since this thread already"}, {"sha": "aa39b6eb2886fd7133cea242676bd127c763a457", "filename": "src/doc/unstable-book/src/language-features/unix-sigpipe.md", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funix-sigpipe.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funix-sigpipe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funix-sigpipe.md?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,54 @@\n+# `unix_sigpipe`\n+\n+The tracking issue for this feature is: [#97889]\n+\n+[#97889]: https://github.com/rust-lang/rust/issues/97889\n+\n+---\n+\n+The `#[unix_sigpipe = \"...\"]` attribute on `fn main()` can be used to specify how libstd shall setup `SIGPIPE` on Unix platforms before invoking `fn main()`. This attribute is ignored on non-Unix targets. There are three variants:\n+* `#[unix_sigpipe = \"inherit\"]`\n+* `#[unix_sigpipe = \"sig_dfl\"]`\n+* `#[unix_sigpipe = \"sig_ign\"]`\n+\n+## `#[unix_sigpipe = \"inherit\"]`\n+\n+Leave `SIGPIPE` untouched before entering `fn main()`. Unless the parent process has changed the default `SIGPIPE` handler from `SIG_DFL` to something else, this will behave the same as `#[unix_sigpipe = \"sig_dfl\"]`.\n+\n+## `#[unix_sigpipe = \"sig_dfl\"]`\n+\n+Set the `SIGPIPE` handler to `SIG_DFL`. This will result in your program getting killed if it tries to write to a closed pipe. This is normally what you want if your program produces textual output.\n+\n+### Example\n+\n+```rust,no_run\n+#![feature(unix_sigpipe)]\n+#[unix_sigpipe = \"sig_dfl\"]\n+fn main() { loop { println!(\"hello world\"); } }\n+```\n+\n+```bash\n+% ./main | head -n 1\n+hello world\n+```\n+\n+## `#[unix_sigpipe = \"sig_ign\"]`\n+\n+Set the `SIGPIPE` handler to `SIG_IGN` before invoking `fn main()`. This will result in `ErrorKind::BrokenPipe` errors if you program tries to write to a closed pipe. This is normally what you want if you for example write socket servers, socket clients, or pipe peers.\n+\n+This is what libstd has done by default since 2014. Omitting `#[unix_sigpipe = \"...\"]` is the same as having `#[unix_sigpipe = \"sig_ign\"]`.\n+\n+### Example\n+\n+```rust,no_run\n+#![feature(unix_sigpipe)]\n+#[unix_sigpipe = \"sig_ign\"]\n+fn main() { loop { println!(\"hello world\"); } }\n+```\n+\n+```bash\n+% ./main | head -n 1\n+hello world\n+thread 'main' panicked at 'failed printing to stdout: Broken pipe (os error 32)', library/std/src/io/stdio.rs:1016:9\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+```"}, {"sha": "07ff051f789b1e525e2a753211618b4e54281c4c", "filename": "src/test/ui/attributes/unix_sigpipe/auxiliary/sigpipe-utils.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Fauxiliary%2Fsigpipe-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Fauxiliary%2Fsigpipe-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Fauxiliary%2Fsigpipe-utils.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+/// So tests don't have to bring libc in scope themselves\n+pub enum SignalHandler {\n+    Ignore,\n+    Default,\n+}\n+\n+/// Helper to assert that [`libc::SIGPIPE`] has the expected signal handler.\n+pub fn assert_sigpipe_handler(expected_handler: SignalHandler) {\n+    #[cfg(unix)]\n+    #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n+    {\n+        let prev = unsafe { libc::signal(libc::SIGPIPE, libc::SIG_IGN) };\n+\n+        let expected = match expected_handler {\n+            SignalHandler::Ignore => libc::SIG_IGN,\n+            SignalHandler::Default => libc::SIG_DFL,\n+        };\n+        assert_eq!(prev, expected);\n+\n+        // Unlikely to matter, but restore the old value anyway\n+        unsafe { libc::signal(libc::SIGPIPE, prev); };\n+    }\n+}"}, {"sha": "d6d020c52b28d9cddb4f3ee2a98ef19b2bad49be", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-crate.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,4 @@\n+#![feature(unix_sigpipe)]\n+#![unix_sigpipe = \"inherit\"] //~ error: `unix_sigpipe` attribute cannot be used at crate level\n+\n+fn main() {}"}, {"sha": "a1fb4d6787cef657fa300be49aea94cc3c2a7b9f", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-crate.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-crate.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,13 @@\n+error: `unix_sigpipe` attribute cannot be used at crate level\n+  --> $DIR/unix_sigpipe-crate.rs:2:1\n+   |\n+LL | #![unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: perhaps you meant to use an outer attribute\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "294cb38526bd02f7e852f65976f69e8a277038e8", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-duplicates.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,5 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"sig_ign\"]\n+#[unix_sigpipe = \"inherit\"] //~ error: multiple `unix_sigpipe` attributes\n+fn main() {}"}, {"sha": "2362c17a090415b23271d153596b9a16bdbc09a6", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-duplicates.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-duplicates.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,14 @@\n+error: multiple `unix_sigpipe` attributes\n+  --> $DIR/unix_sigpipe-duplicates.rs:4:1\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unix_sigpipe-duplicates.rs:3:1\n+   |\n+LL | #[unix_sigpipe = \"sig_ign\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0a42a5b5ef16bfa809f89cf9889a1acb96f2aa88", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-error.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"sig_ign\"]\n+fn main() {\n+    extern crate sigpipe_utils;\n+\n+    // #[unix_sigpipe = \"sig_ign\"] is active, so the legacy behavior of ignoring\n+    // SIGPIPE shall be in effect\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Ignore);\n+}"}, {"sha": "4f864807752c2f40c4612cb3530604628a3db810", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-inherit.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-inherit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-inherit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-inherit.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"inherit\"]\n+fn main() {\n+    extern crate sigpipe_utils;\n+\n+    // #[unix_sigpipe = \"inherit\"] is active, so SIGPIPE shall NOT be ignored,\n+    // instead the default handler shall be installed. (We assume that the\n+    // process that runs these tests have the default handler.)\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Default);\n+}"}, {"sha": "b5ebc07a0433882e892c18ef26aafeed0d522ebd", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-list.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,4 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe(inherit)] //~ error: malformed `unix_sigpipe` attribute input\n+fn main() {}"}, {"sha": "59a87e139181bbde66c75649f96152dd280597be", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-list.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-list.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,15 @@\n+error: malformed `unix_sigpipe` attribute input\n+  --> $DIR/unix_sigpipe-list.rs:3:1\n+   |\n+LL | #[unix_sigpipe(inherit)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: the following are the possible correct uses\n+   |\n+LL | #[unix_sigpipe = \"inherit|sig_ign|sig_dfl\"]\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL | #[unix_sigpipe]\n+   | ~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "cde6719fc9ce428937251148cd783b791e1e7a4a", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-non-main-fn.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,6 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"inherit\"] //~ error: `unix_sigpipe` attribute can only be used on `fn main()`\n+fn f() {}\n+\n+fn main() {}"}, {"sha": "c4b81118c9f01a8cf30c10be711dc4292020bd13", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-non-main-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-main-fn.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: `unix_sigpipe` attribute can only be used on `fn main()`\n+  --> $DIR/unix_sigpipe-non-main-fn.rs:3:1\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "16f7276398e209e98b4bd5c96ad9684d20bae05b", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-non-root-main.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+#![feature(unix_sigpipe)]\n+\n+mod m {\n+    #[unix_sigpipe = \"inherit\"] //~ error: `unix_sigpipe` attribute can only be used on root `fn main()`\n+    fn main() {}\n+}\n+\n+fn main() {}"}, {"sha": "a04f605edc2e464a292617972b14e8e8aa7975f6", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-non-root-main.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-non-root-main.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: `unix_sigpipe` attribute can only be used on root `fn main()`\n+  --> $DIR/unix_sigpipe-non-root-main.rs:4:5\n+   |\n+LL |     #[unix_sigpipe = \"inherit\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "100b4ce9f74fceffca71dcc76050f483f6cc89e3", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-not-used.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-not-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-not-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-not-used.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+fn main() {\n+    extern crate sigpipe_utils;\n+\n+    // SIGPIPE shall be ignored since #[unix_sigpipe = \"...\"] is not used\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Ignore);\n+}"}, {"sha": "b5adc2e55721f554bad3c7b2d036090fc7e32934", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-only-feature.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-only-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-only-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-only-feature.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+#![feature(unix_sigpipe)]\n+\n+fn main() {\n+    extern crate sigpipe_utils;\n+\n+    // Only #![feature(unix_sigpipe)] is enabled, not #[unix_sigpipe = \"...\"].\n+    // This shall not change any behavior, so we still expect SIGPIPE to be\n+    // ignored\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Ignore);\n+}"}, {"sha": "6befb9e956594dff17caa3f9a0c184725853c5b0", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-rustc_main.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-rustc_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-rustc_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-rustc_main.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+#![feature(unix_sigpipe)]\n+#![feature(rustc_attrs)]\n+\n+#[unix_sigpipe = \"sig_dfl\"]\n+#[rustc_main]\n+fn rustc_main() {\n+    extern crate sigpipe_utils;\n+\n+    // #[unix_sigpipe = \"sig_dfl\"] is active, so SIGPIPE handler shall be\n+    // SIG_DFL. Note that we have a #[rustc_main], but it should still work.\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Default);\n+}"}, {"sha": "238c0d57a68d2cfd155b770009fec42eaeb70d36", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-sig_dfl.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-sig_dfl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-sig_dfl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-sig_dfl.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// aux-build:sigpipe-utils.rs\n+\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"sig_dfl\"]\n+fn main() {\n+    extern crate sigpipe_utils;\n+\n+    // #[unix_sigpipe = \"sig_dfl\"] is active, so SIGPIPE shall NOT be ignored, instead\n+    // the default handler shall be installed\n+    sigpipe_utils::assert_sigpipe_handler(sigpipe_utils::SignalHandler::Default);\n+}"}, {"sha": "64fd5ec4f0ed86564e8f1f74ccba84a432f9a111", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-start.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,6 @@\n+#![feature(start)]\n+#![feature(unix_sigpipe)]\n+\n+#[start]\n+#[unix_sigpipe = \"inherit\"] //~ error: `unix_sigpipe` attribute can only be used on `fn main()`\n+fn custom_start(argc: isize, argv: *const *const u8) -> isize { 0 }"}, {"sha": "2c9ce479b6caf0aa0940abff62520ef40a1fdc23", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-start.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-start.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: `unix_sigpipe` attribute can only be used on `fn main()`\n+  --> $DIR/unix_sigpipe-start.rs:5:1\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a5e47cfebc89e44f36990b4af61b715e478b985f", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-struct.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,6 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"inherit\"] //~ error: `unix_sigpipe` attribute can only be used on `fn main()`\n+struct S;\n+\n+fn main() {}"}, {"sha": "c56ee60bb2e69a80cf86d6204ce4931eb346cb66", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-struct.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-struct.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: `unix_sigpipe` attribute can only be used on `fn main()`\n+  --> $DIR/unix_sigpipe-struct.rs:3:1\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4ec25de00ec3bfb040aa738c2543c903a5a2ab60", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-wrong.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,4 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe = \"wrong\"] //~ error: valid values for `#[unix_sigpipe = \"...\"]` are `inherit`, `sig_ign`, or `sig_dfl`\n+fn main() {}"}, {"sha": "a66e45aa2104bfb8a200b5e4e1c13735ce22e686", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe-wrong.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe-wrong.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: valid values for `#[unix_sigpipe = \"...\"]` are `inherit`, `sig_ign`, or `sig_dfl`\n+  --> $DIR/unix_sigpipe-wrong.rs:3:1\n+   |\n+LL | #[unix_sigpipe = \"wrong\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7bf1c7350c38640ed2d4c76bfc2206ff93990957", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,4 @@\n+#![feature(unix_sigpipe)]\n+\n+#[unix_sigpipe] //~ error: valid values for `#[unix_sigpipe = \"...\"]` are `inherit`, `sig_ign`, or `sig_dfl`\n+fn main() {}"}, {"sha": "1b1eda825aaea80873731cb31ec86f52926e8616", "filename": "src/test/ui/attributes/unix_sigpipe/unix_sigpipe.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funix_sigpipe%2Funix_sigpipe.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,8 @@\n+error: valid values for `#[unix_sigpipe = \"...\"]` are `inherit`, `sig_ign`, or `sig_dfl`\n+  --> $DIR/unix_sigpipe.rs:3:1\n+   |\n+LL | #[unix_sigpipe]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "46dc3f6cc17a5743efebfba1f6623d7d9c8c52ad", "filename": "src/test/ui/feature-gates/feature-gate-unix_sigpipe.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.rs?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"bin\"]\n+\n+#[unix_sigpipe = \"inherit\"] //~ the `#[unix_sigpipe]` attribute is an experimental feature\n+fn main () {}"}, {"sha": "cf3284467f77d75db16e5e2a0abe70c17e20eac1", "filename": "src/test/ui/feature-gates/feature-gate-unix_sigpipe.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddee45e1d7fd34563c13513d974f792fae41a2f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unix_sigpipe.stderr?ref=ddee45e1d7fd34563c13513d974f792fae41a2f7", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[unix_sigpipe]` attribute is an experimental feature\n+  --> $DIR/feature-gate-unix_sigpipe.rs:3:1\n+   |\n+LL | #[unix_sigpipe = \"inherit\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #97889 <https://github.com/rust-lang/rust/issues/97889> for more information\n+   = help: add `#![feature(unix_sigpipe)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}