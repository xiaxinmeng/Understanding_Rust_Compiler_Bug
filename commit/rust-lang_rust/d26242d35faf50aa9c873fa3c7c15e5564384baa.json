{"sha": "d26242d35faf50aa9c873fa3c7c15e5564384baa", "node_id": "C_kwDOAAsO6NoAKGQyNjI0MmQzNWZhZjUwYWE5Yzg3M2ZhM2M3YzE1ZTU1NjQzODRiYWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T01:06:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T01:06:05Z"}, "message": "Auto merge of #106472 - matthiaskrgr:rollup-4w4v50e, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106391 (rustdoc: allow popover child links to work)\n - #106398 (Fix a few clippy lints in libtest)\n - #106412 (Fix link generation for local primitive types in rustdoc JSON output)\n - #106437 (rustdoc: fix buggy JS check for absolute URL)\n - #106451 (Merge borrowck permission checks)\n - #106460 (Move tests)\n - #106461 (docs: fix broken link \"search bar\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "004cdc073f1ead83392ddb1036663da3632bc9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004cdc073f1ead83392ddb1036663da3632bc9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26242d35faf50aa9c873fa3c7c15e5564384baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26242d35faf50aa9c873fa3c7c15e5564384baa", "html_url": "https://github.com/rust-lang/rust/commit/d26242d35faf50aa9c873fa3c7c15e5564384baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26242d35faf50aa9c873fa3c7c15e5564384baa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e317a1760c653ba1a4695dcce5dbac49fa9326", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e317a1760c653ba1a4695dcce5dbac49fa9326", "html_url": "https://github.com/rust-lang/rust/commit/d9e317a1760c653ba1a4695dcce5dbac49fa9326"}, {"sha": "06b2df4706123061ee94cbe6e80f1aa2ae05f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2df4706123061ee94cbe6e80f1aa2ae05f360", "html_url": "https://github.com/rust-lang/rust/commit/06b2df4706123061ee94cbe6e80f1aa2ae05f360"}], "stats": {"total": 254, "additions": 150, "deletions": 104}, "files": [{"sha": "278ffed07477b5b3bdf8224a7b3c79c89b2b9ace", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -863,7 +863,6 @@ enum WriteKind {\n /// local place can be mutated.\n //\n // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:\n-// - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.\n // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and\n //   `is_declared_mutable()`.\n // - Take flow state into consideration in `is_assignable()` for local variables.\n@@ -1132,20 +1131,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Write of P[i] or *P requires P init'd.\n         self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n \n-        // Special case: you can assign an immutable local variable\n-        // (e.g., `x = ...`) so long as it has never been initialized\n-        // before (at this point in the flow).\n-        if let Some(local) = place_span.0.as_local() {\n-            if let Mutability::Not = self.body.local_decls[local].mutability {\n-                // check for reassignments to immutable local variables\n-                self.check_if_reassignment_to_immutable_state(\n-                    location, local, place_span, flow_state,\n-                );\n-                return;\n-            }\n-        }\n-\n-        // Otherwise, use the normal access permission rules.\n         self.access_place(\n             location,\n             place_span,\n@@ -1554,24 +1539,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    fn check_if_reassignment_to_immutable_state(\n-        &mut self,\n-        location: Location,\n-        local: Local,\n-        place_span: (Place<'tcx>, Span),\n-        flow_state: &Flows<'cx, 'tcx>,\n-    ) {\n-        debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n-\n-        // Check if any of the initializations of `local` have happened yet:\n-        if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {\n-            // And, if so, report an error.\n-            let init = &self.move_data.inits[init_index];\n-            let span = init.span(&self.body);\n-            self.report_illegal_reassignment(location, place_span, span, place_span.0);\n-        }\n-    }\n-\n     fn check_if_full_path_is_moved(\n         &mut self,\n         location: Location,\n@@ -2037,12 +2004,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // partial initialization, do not complain about mutability\n         // errors except for actual mutation (as opposed to an attempt\n         // to do a partial initialization).\n-        let previously_initialized =\n-            self.is_local_ever_initialized(place.local, flow_state).is_some();\n+        let previously_initialized = self.is_local_ever_initialized(place.local, flow_state);\n \n         // at this point, we have set up the error reporting state.\n-        if previously_initialized {\n-            self.report_mutability_error(place, span, the_place_err, error_access, location);\n+        if let Some(init_index) = previously_initialized {\n+            if let (AccessKind::Mutate, Some(_)) = (error_access, place.as_local()) {\n+                // If this is a mutate access to an immutable local variable with no projections\n+                // report the error as an illegal reassignment\n+                let init = &self.move_data.inits[init_index];\n+                let assigned_span = init.span(&self.body);\n+                self.report_illegal_reassignment(location, (place, span), assigned_span, place);\n+            } else {\n+                self.report_mutability_error(place, span, the_place_err, error_access, location)\n+            }\n             true\n         } else {\n             false"}, {"sha": "6575cc71b051429cd6ac4a0c46c5d0628a96b219", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -14,7 +14,7 @@\n //! # How to read this documentation\n //!\n //! If you already know the name of what you are looking for, the fastest way to\n-//! find it is to use the <a href=\"#\" onclick=\"focusSearchBar();\">search\n+//! find it is to use the <a href=\"#\" onclick=\"window.searchState.focus();\">search\n //! bar</a> at the top of the page.\n //!\n //! Otherwise, you may want to jump to one of these useful sections:"}, {"sha": "24cbe035f2fa7e3e9082d38a6c44355dd47711da", "filename": "library/test/src/console.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -147,7 +147,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut ntest = 0;\n     let mut nbench = 0;\n \n-    for test in filter_tests(&opts, tests).into_iter() {\n+    for test in filter_tests(opts, tests).into_iter() {\n         use crate::TestFn::*;\n \n         let TestDescAndFn { desc: TestDesc { name, .. }, testfn } = test;\n@@ -244,7 +244,7 @@ fn on_test_event(\n             let stdout = &completed_test.stdout;\n \n             st.write_log_result(test, result, exec_time.as_ref())?;\n-            out.write_result(test, result, exec_time.as_ref(), &*stdout, st)?;\n+            out.write_result(test, result, exec_time.as_ref(), stdout, st)?;\n             handle_test_result(st, completed_test);\n         }\n     }\n@@ -262,7 +262,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n \n     let max_name_len = tests\n         .iter()\n-        .max_by_key(|t| len_if_padded(*t))\n+        .max_by_key(|t| len_if_padded(t))\n         .map(|t| t.desc.name.as_slice().len())\n         .unwrap_or(0);\n "}, {"sha": "95d2faf25060fcb0f49ef11d5b66daa895d66406", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -40,20 +40,20 @@ impl<T: Write> JsonFormatter<T> {\n         extra: Option<&str>,\n     ) -> io::Result<()> {\n         // A doc test's name includes a filename which must be escaped for correct json.\n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\"\"#,\n             ty,\n             EscapedString(name),\n             evt\n         ))?;\n         if let Some(exec_time) = exec_time {\n-            self.write_message(&*format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n+            self.write_message(&format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n         }\n         if let Some(stdout) = stdout {\n-            self.write_message(&*format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n+            self.write_message(&format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n         }\n         if let Some(extra) = extra {\n-            self.write_message(&*format!(r#\", {extra}\"#))?;\n+            self.write_message(&format!(r#\", {extra}\"#))?;\n         }\n         self.writeln_message(\" }\")\n     }\n@@ -66,13 +66,13 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}\"#\n         ))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"started\", \"name\": \"{}\" }}\"#,\n             EscapedString(desc.name.as_slice())\n         ))\n@@ -151,20 +151,20 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                     mbps\n                 );\n \n-                self.writeln_message(&*line)\n+                self.writeln_message(&line)\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.writeln_message(&*format!(\n+        self.writeln_message(&format!(\n             r#\"{{ \"type\": \"test\", \"event\": \"timeout\", \"name\": \"{}\" }}\"#,\n             EscapedString(desc.name.as_slice())\n         ))\n     }\n \n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             \"{{ \\\"type\\\": \\\"suite\\\", \\\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\"}, {"sha": "7a40ce33cb741bd3866738a074fa2ee1a594874a", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -64,7 +64,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n         self.write_message(\"<testsuites>\")?;\n \n-        self.write_message(&*format!(\n+        self.write_message(&format!(\n             \"<testsuite name=\\\"test\\\" package=\\\"test\\\" id=\\\"0\\\" \\\n              errors=\\\"0\\\" \\\n              failures=\\\"{}\\\" \\\n@@ -73,12 +73,12 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::replace(&mut self.results, Vec::new()) {\n+        for (desc, result, duration) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n                 TestResult::TrFailed => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n@@ -90,19 +90,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 }\n \n                 TestResult::TrFailedMsg(ref m) => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n-                    self.write_message(&*format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n                 TestResult::TrTimedFail => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n                         class_name,\n@@ -114,15 +114,15 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 }\n \n                 TestResult::TrBench(ref b) => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"benchmark::{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\" />\",\n                         class_name, test_name, b.ns_iter_summ.sum\n                     ))?;\n                 }\n \n                 TestResult::TrOk => {\n-                    self.write_message(&*format!(\n+                    self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n                         class_name,"}, {"sha": "247778e515f0dedd3f34840df9cdcae0c55bb2a3", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -134,7 +134,7 @@ impl<T: Write> PrettyFormatter<T> {\n \n         let mut results = Vec::new();\n         let mut stdouts = String::new();\n-        for &(ref f, ref stdout) in inputs {\n+        for (f, stdout) in inputs {\n             results.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 stdouts.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -171,9 +171,9 @@ impl<T: Write> PrettyFormatter<T> {\n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n+            self.write_plain(format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {name} ... \"))?;\n+            self.write_plain(format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -188,7 +188,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n+        self.write_plain(format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -221,7 +221,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             TestResult::TrIgnored => self.write_ignored(desc.ignore_message)?,\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n-                self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;\n+                self.write_plain(format!(\": {}\", fmt_bench_samples(bs)))?;\n             }\n             TestResult::TrTimedFail => self.write_time_failed()?,\n         }\n@@ -231,7 +231,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_plain(&format!(\n+        self.write_plain(format!(\n             \"test {} has been running for over {} seconds\\n\",\n             desc.name,\n             time::TEST_WARN_TIMEOUT_S\n@@ -267,11 +267,11 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n         );\n \n-        self.write_plain(&s)?;\n+        self.write_plain(s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n             let time_str = format!(\"; finished in {exec_time}\");\n-            self.write_plain(&time_str)?;\n+            self.write_plain(time_str)?;\n         }\n \n         self.write_plain(\"\\n\\n\")?;"}, {"sha": "0837ab16905130c18cd6c5086af909075c3d8feb", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -70,7 +70,7 @@ impl<T: Write> TerseFormatter<T> {\n             // screen when dealing with line-buffered output (e.g., piping to\n             // `stamp` in the rust CI).\n             let out = format!(\" {}/{}\\n\", self.test_count + 1, self.total_test_count);\n-            self.write_plain(&out)?;\n+            self.write_plain(out)?;\n         }\n \n         self.test_count += 1;\n@@ -106,7 +106,7 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nsuccesses:\\n\")?;\n         let mut successes = Vec::new();\n         let mut stdouts = String::new();\n-        for &(ref f, ref stdout) in &state.not_failures {\n+        for (f, stdout) in &state.not_failures {\n             successes.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 stdouts.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -132,7 +132,7 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_plain(\"\\nfailures:\\n\")?;\n         let mut failures = Vec::new();\n         let mut fail_out = String::new();\n-        for &(ref f, ref stdout) in &state.failures {\n+        for (f, stdout) in &state.failures {\n             failures.push(f.name.to_string());\n             if !stdout.is_empty() {\n                 fail_out.push_str(&format!(\"---- {} stdout ----\\n\", f.name));\n@@ -157,9 +157,9 @@ impl<T: Write> TerseFormatter<T> {\n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n         if let Some(test_mode) = desc.test_mode() {\n-            self.write_plain(&format!(\"test {name} - {test_mode} ... \"))?;\n+            self.write_plain(format!(\"test {name} - {test_mode} ... \"))?;\n         } else {\n-            self.write_plain(&format!(\"test {name} ... \"))?;\n+            self.write_plain(format!(\"test {name} ... \"))?;\n         }\n \n         Ok(())\n@@ -175,7 +175,7 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n         } else {\n             String::new()\n         };\n-        self.write_plain(&format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n+        self.write_plain(format!(\"\\nrunning {test_count} {noun}{shuffle_seed_msg}\\n\"))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n@@ -209,13 +209,13 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n                     self.write_test_name(desc)?;\n                 }\n                 self.write_bench()?;\n-                self.write_plain(&format!(\": {}\\n\", fmt_bench_samples(bs)))\n+                self.write_plain(format!(\": {}\\n\", fmt_bench_samples(bs)))\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n-        self.write_plain(&format!(\n+        self.write_plain(format!(\n             \"test {} has been running for over {} seconds\\n\",\n             desc.name,\n             time::TEST_WARN_TIMEOUT_S\n@@ -245,11 +245,11 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n             state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n         );\n \n-        self.write_plain(&s)?;\n+        self.write_plain(s)?;\n \n         if let Some(ref exec_time) = state.exec_time {\n             let time_str = format!(\"; finished in {exec_time}\");\n-            self.write_plain(&time_str)?;\n+            self.write_plain(time_str)?;\n         }\n \n         self.write_plain(\"\\n\\n\")?;"}, {"sha": "30dc4ff855315d2c0f0bca55669d580e50d7f92e", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -789,7 +789,7 @@ fn run_test_in_spawned_subprocess(\n         }\n     });\n     let record_result2 = record_result.clone();\n-    panic::set_hook(Box::new(move |info| record_result2(Some(&info))));\n+    panic::set_hook(Box::new(move |info| record_result2(Some(info))));\n     if let Err(message) = testfn() {\n         panic!(\"{}\", message);\n     }"}, {"sha": "67ba89410cd9974ed2cee345279100e6e2e68254", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -149,7 +149,7 @@ impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n         // are there any terminals that have color/attrs and not sgr0?\n         // Try falling back to sgr, then op\n         let cmd = match [\"sgr0\", \"sgr\", \"op\"].iter().find_map(|cap| self.ti.strings.get(*cap)) {\n-            Some(op) => match expand(&op, &[], &mut Variables::new()) {\n+            Some(op) => match expand(op, &[], &mut Variables::new()) {\n                 Ok(cmd) => cmd,\n                 Err(e) => return Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n             },\n@@ -180,12 +180,12 @@ impl<T: Write + Send> TerminfoTerminal<T> {\n     }\n \n     fn dim_if_necessary(&self, color: color::Color) -> color::Color {\n-        if color >= self.num_colors && color >= 8 && color < 16 { color - 8 } else { color }\n+        if color >= self.num_colors && (8..16).contains(&color) { color - 8 } else { color }\n     }\n \n     fn apply_cap(&mut self, cmd: &str, params: &[Param]) -> io::Result<bool> {\n         match self.ti.strings.get(cmd) {\n-            Some(cmd) => match expand(&cmd, params, &mut Variables::new()) {\n+            Some(cmd) => match expand(cmd, params, &mut Variables::new()) {\n                 Ok(s) => self.out.write_all(&s).and(Ok(true)),\n                 Err(e) => Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n             },"}, {"sha": "2815f6cfc77fe5058d0c77d7bf7f5be27002faef", "filename": "library/test/src/term/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fparm.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -282,14 +282,14 @@ pub(crate) fn expand(\n                 );\n             }\n             SetVar => {\n-                if cur >= 'A' && cur <= 'Z' {\n+                if cur.is_ascii_uppercase() {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'A';\n                         vars.sta_va[idx as usize] = arg;\n                     } else {\n                         return Err(\"stack is empty\".to_string());\n                     }\n-                } else if cur >= 'a' && cur <= 'z' {\n+                } else if cur.is_ascii_lowercase() {\n                     if let Some(arg) = stack.pop() {\n                         let idx = (cur as u8) - b'a';\n                         vars.dyn_va[idx as usize] = arg;\n@@ -301,10 +301,10 @@ pub(crate) fn expand(\n                 }\n             }\n             GetVar => {\n-                if cur >= 'A' && cur <= 'Z' {\n+                if cur.is_ascii_uppercase() {\n                     let idx = (cur as u8) - b'A';\n                     stack.push(vars.sta_va[idx as usize].clone());\n-                } else if cur >= 'a' && cur <= 'z' {\n+                } else if cur.is_ascii_lowercase() {\n                     let idx = (cur as u8) - b'a';\n                     stack.push(vars.dyn_va[idx as usize].clone());\n                 } else {"}, {"sha": "87b91f34498a37085fd81b98fbbe8e60f798e54f", "filename": "library/test/src/term/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fsearcher.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n \n     if let Ok(dirs) = env::var(\"TERMINFO_DIRS\") {\n         for i in dirs.split(':') {\n-            if i == \"\" {\n+            if i.is_empty() {\n                 dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n             } else {\n                 dirs_to_search.push(PathBuf::from(i));\n@@ -49,7 +49,7 @@ pub(crate) fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n     for mut p in dirs_to_search {\n         if fs::metadata(&p).is_ok() {\n             p.push(&first_char.to_string());\n-            p.push(&term);\n+            p.push(term);\n             if fs::metadata(&p).is_ok() {\n                 return Some(p);\n             }"}, {"sha": "1da238e3e8c0fbd3fd1b5e7cf89a04a95263fed6", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -33,7 +33,7 @@ pub fn calc_result<'a>(\n ) -> TestResult {\n     let result = match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TestResult::TrOk,\n-        (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n+        (&ShouldPanic::YesWithMessage(msg), Err(err)) => {\n             let maybe_panic_str = err\n                 .downcast_ref::<String>()\n                 .map(|e| &**e)\n@@ -52,7 +52,7 @@ pub fn calc_result<'a>(\n                     r#\"expected panic with string value,\n  found non-string value: `{:?}`\n      expected substring: `{:?}`\"#,\n-                    (**err).type_id(),\n+                    (*err).type_id(),\n                     msg\n                 ))\n             }"}, {"sha": "6f2e033095a37b9a7baacd89d3d4d6aae6401448", "filename": "library/test/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -47,7 +47,7 @@ impl TestName {\n         match *self {\n             StaticTestName(s) => s,\n             DynTestName(ref s) => s,\n-            AlignedTestName(ref s, _) => &*s,\n+            AlignedTestName(ref s, _) => s,\n         }\n     }\n "}, {"sha": "51aee8e7c899212193006655b56e51c394fb3c1d", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -563,7 +563,7 @@ function loadCss(cssUrl) {\n                 onEachLazy(code.getElementsByTagName(\"a\"), elem => {\n                     const href = elem.getAttribute(\"href\");\n \n-                    if (href && href.indexOf(\"http\") !== 0) {\n+                    if (href && !/^(?:[a-z+]+:)?\\/\\//.test(href)) {\n                         elem.setAttribute(\"href\", window.rootPath + href);\n                     }\n                 });\n@@ -1040,9 +1040,6 @@ function loadCss(cssUrl) {\n             help_button.appendChild(container);\n \n             container.onblur = helpBlurHandler;\n-            container.onclick = event => {\n-                event.preventDefault();\n-            };\n             help_button.onblur = helpBlurHandler;\n             help_button.children[0].onblur = helpBlurHandler;\n         }"}, {"sha": "56283b2c0eff9eb622d385a9f881dae5a52caece", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -8,8 +8,9 @@ use std::convert::From;\n use std::fmt;\n \n use rustc_ast::ast;\n-use rustc_hir::{def::CtorKind, def_id::DefId};\n+use rustc_hir::{def::CtorKind, def::DefKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_span::symbol::sym;\n use rustc_span::{Pos, Symbol};\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n@@ -217,13 +218,27 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n \n     impl<'a> fmt::Display for DisplayDefId<'a> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let name = match self.2 {\n+            let DisplayDefId(def_id, tcx, name) = self;\n+            let name = match name {\n                 Some(name) => format!(\":{}\", name.as_u32()),\n-                None => self\n-                    .1\n-                    .opt_item_name(self.0)\n-                    .map(|n| format!(\":{}\", n.as_u32()))\n-                    .unwrap_or_default(),\n+                None => {\n+                    // We need this workaround because primitive types' DefId actually refers to\n+                    // their parent module, which isn't present in the output JSON items. So\n+                    // instead, we directly get the primitive symbol and convert it to u32 to\n+                    // generate the ID.\n+                    if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n+                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n+                            .filter(|attr| attr.has_name(sym::primitive))\n+                            .find_map(|attr| attr.value_str()) {\n+                        format!(\":{}\", prim.as_u32())\n+                    } else {\n+                        tcx\n+                        .opt_item_name(*def_id)\n+                        .map(|n| format!(\":{}\", n.as_u32()))\n+                        .unwrap_or_default()\n+                    }\n+                }\n             };\n             write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n         }\n@@ -237,7 +252,7 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n         ItemId::Auto { for_, trait_ } => {\n             Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n-        ItemId::Primitive(ty, krate) => Id(format!(\"p:{}:{}\", krate.as_u32(), ty.as_sym())),\n+        ItemId::Primitive(_, _) => unreachable!(),\n     }\n }\n "}, {"sha": "83f2556fd8f2625018a7dd1c7d50e0b721605541", "filename": "src/test/rustdoc-gui/help-page.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhelp-page.goml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -61,3 +61,12 @@ click: \"#help-button > a\"\n assert-css: (\"#help\", {\"display\": \"none\"})\n compare-elements-property-false: (\".sub\", \"#help\", [\"offsetWidth\"])\n compare-elements-position-false: (\".sub\", \"#help\", (\"x\"))\n+\n+// This test ensures that the \"the rustdoc book\" anchor link within the help popover works.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+size: (1000, 1000) // Popover only appears when the screen width is >700px.\n+assert-false: \"#help\"\n+click: \"#help-button > a\"\n+click: \".popover a[href='https://doc.rust-lang.org/rustdoc/']\"\n+wait-for: 2000\n+assert-document-property: {\"URL\": \"https://doc.rust-lang.org/rustdoc/\"}"}, {"sha": "997c0ed8f017ca7fdf8c913f7a0b58fbbd6f5435", "filename": "src/test/rustdoc-gui/implementors.goml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimplementors.goml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -33,3 +33,9 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.TraitToReexport.html\"\n assert-count: (\"#implementors-list .impl\", 1)\n goto: \"file://\" + |DOC_PATH| + \"/implementors/trait.TraitToReexport.html\"\n assert-count: (\"#implementors-list .impl\", 1)\n+\n+// Now check that the link is properly rewritten for a crate called `http`.\n+// An older version of rustdoc had a buggy check for absolute links.\n+goto: \"file://\" + |DOC_PATH| + \"/http/trait.HttpTrait.html\"\n+assert-count: (\"#implementors-list .impl\", 1)\n+assert-attribute: (\"#implementors-list .impl a.trait\", {\"href\": \"../http/trait.HttpTrait.html\"})"}, {"sha": "5bc6e87d6d24da23ef2943ada0e69c75d0645180", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -15,6 +15,7 @@ click: \"#crate-search\"\n press-key: \"ArrowDown\"\n press-key: \"ArrowDown\"\n press-key: \"ArrowDown\"\n+press-key: \"ArrowDown\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#search-tabs\"\n@@ -39,6 +40,7 @@ click: \"#crate-search\"\n press-key: \"ArrowUp\"\n press-key: \"ArrowUp\"\n press-key: \"ArrowUp\"\n+press-key: \"ArrowUp\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#search-tabs\""}, {"sha": "6bc07fbae04da8acff5f8d3371ed5c252d096ac7", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -73,7 +73,7 @@ assert: \"//*[@class='dir-entry' and @open]/*[text()='sub_mod']\"\n // Only \"another_folder\" should be \"open\" in \"lib2\".\n assert: \"//*[@class='dir-entry' and not(@open)]/*[text()='another_mod']\"\n // All other trees should be collapsed.\n-assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@open)]\", 7)\n+assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@open)]\", 8)\n \n // We now switch to mobile mode.\n size: (600, 600)"}, {"sha": "e0397890519bb806f434fd4c05e870dc1db5e9ee", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -102,7 +102,7 @@ assert: \".source-sidebar-expanded\"\n \n // We check that the first entry of the sidebar is collapsed\n assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"false\"})\n-assert-text: (\"#source-sidebar details:first-of-type > summary\", \"huge_logo\")\n+assert-text: (\"#source-sidebar details:first-of-type > summary\", \"http\")\n // We now click on it.\n click: \"#source-sidebar details:first-of-type > summary\"\n assert-property: (\"#source-sidebar details:first-of-type\", {\"open\": \"true\"})"}, {"sha": "425a3ae7e5c923a6d13e88ad9ea099e98b161da0", "filename": "src/test/rustdoc-gui/src/lib2/Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.lock?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -2,13 +2,21 @@\n # It is not intended for manual editing.\n version = 3\n \n+[[package]]\n+name = \"http\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"implementors\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"http\",\n+]\n \n [[package]]\n name = \"lib2\"\n version = \"0.1.0\"\n dependencies = [\n+ \"http\",\n  \"implementors\",\n ]"}, {"sha": "8bca77ff834d8880ba6abc30c409b0eb923c9c5f", "filename": "src/test/rustdoc-gui/src/lib2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2FCargo.toml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -8,3 +8,4 @@ path = \"lib.rs\"\n \n [dependencies]\n implementors = { path = \"./implementors\" }\n+http = { path = \"./http\" }"}, {"sha": "fa719efa52635a78156c9bfdb3b35d2a259d90e1", "filename": "src/test/rustdoc-gui/src/lib2/http/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2FCargo.toml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"http\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\""}, {"sha": "204e07494275b3385b4396abca279cba85cf2652", "filename": "src/test/rustdoc-gui/src/lib2/http/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fhttp%2Flib.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -0,0 +1 @@\n+pub trait HttpTrait {}"}, {"sha": "9dafc43df5f80a5860ffedc8bf80fb5c87eaf435", "filename": "src/test/rustdoc-gui/src/lib2/implementors/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2FCargo.toml?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -5,3 +5,6 @@ edition = \"2018\"\n \n [lib]\n path = \"lib.rs\"\n+\n+[dependencies]\n+http = { path = \"../http/\" }"}, {"sha": "2842ac50dc1e8db54d87dd1128ed4025e706b8f4", "filename": "src/test/rustdoc-gui/src/lib2/implementors/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fimplementors%2Flib.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -10,6 +10,8 @@ impl Whatever for Struct {\n     type Foo = u8;\n }\n \n+impl http::HttpTrait for Struct {}\n+\n mod traits {\n     pub trait TraitToReexport {\n         fn method() {}"}, {"sha": "f27e6a2adeca6b9b2e8ab32bf2fbb179938f29bf", "filename": "src/test/rustdoc-json/primitives/local_primitive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/104064>.\n+\n+#![feature(no_core)]\n+#![feature(rustc_attrs)]\n+#![feature(rustdoc_internals)]\n+#![no_core]\n+#![rustc_coherence_is_core]\n+\n+//! Link to [i32][prim@i32] [i64][prim@i64]\n+\n+#[doc(primitive = \"i32\")]\n+mod prim_i32 {}\n+\n+// @set local_i32 = \"$.index[*][?(@.name=='i32')].id\"\n+\n+// @has \"$.index[*][?(@.name=='local_primitive')]\"\n+// @ismany \"$.index[*][?(@.name=='local_primitive')].inner.items[*]\" $local_i32\n+// @is \"$.index[*][?(@.name=='local_primitive')].links['prim@i32']\" $local_i32\n+\n+// Let's ensure the `prim_i32` module isn't present in the output JSON:\n+// @!has \"$.index[*][?(@.name=='prim_i32')]\""}, {"sha": "86e45f10b0e1615280a10d877293375f71163dfd", "filename": "src/test/ui/associated-consts/issue-105330.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-105330.rs"}, {"sha": "30c380152a5e6b88cf871a26dd82e1cf55f3403c", "filename": "src/test/ui/associated-consts/issue-105330.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-105330.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-105330.stderr"}, {"sha": "5e71a52ba4e963104c75e293f2c48e0095ed73aa", "filename": "src/test/ui/associated-types/issue-25700-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-1.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-25700-1.rs"}, {"sha": "89b1db496f95c5e10e0ddff25bda6627f95009fd", "filename": "src/test/ui/associated-types/issue-25700-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700-2.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-25700-2.rs"}, {"sha": "e5b9a97523dfd7452fbf34af6ce60246ad53b74e", "filename": "src/test/ui/associated-types/issue-25700.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-25700.rs"}, {"sha": "fa309a55c3c22f4d709fee11083685c1bb4c9576", "filename": "src/test/ui/associated-types/issue-25700.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-25700.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-25700.stderr"}, {"sha": "b64eb49907139b0310cff41d92fb41226f26c82e", "filename": "src/test/ui/codegen/issue-82859-slice-miscompile.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fcodegen%2Fissue-82859-slice-miscompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fcodegen%2Fissue-82859-slice-miscompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-82859-slice-miscompile.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-82859-slice-miscompile.rs"}, {"sha": "696a2dd1657657114edbe68f3e9b0217692bfca7", "filename": "src/test/ui/command/issue-10626.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fcommand%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fcommand%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fissue-10626.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-10626.rs"}, {"sha": "df4f394dc373f63b0907eb069f7890a5ec9d8a59", "filename": "src/test/ui/drop/issue-2734.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fdrop%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fdrop%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fissue-2734.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-2734.rs"}, {"sha": "fa23ae8f95bee94fc6e37f4b2842e6b5a0e93ba1", "filename": "src/test/ui/dropck/issue-34053.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fdropck%2Fissue-34053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fdropck%2Fissue-34053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-34053.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-34053.rs"}, {"sha": "54f7e9ac592eb536813361a295cc4f8408a70f3c", "filename": "src/test/ui/enum-discriminant/issue-72554.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-72554.rs"}, {"sha": "d12be539f7c1733c7748069f6b30cadf400f2c0d", "filename": "src/test/ui/enum-discriminant/issue-72554.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-72554.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-72554.stderr"}, {"sha": "6dd1847995f002b96743328994623810cd84ed25", "filename": "src/test/ui/extern/issue-13655.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fextern%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fextern%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-13655.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-13655.rs"}, {"sha": "f536d8f940a93871936a4b9172cb0ea5d38b6710", "filename": "src/test/ui/macros/issue-10536.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-10536.rs"}, {"sha": "cc048445871a4bb0a8624250ed5cdaddf8e7755b", "filename": "src/test/ui/macros/issue-10536.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-10536.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-10536.stderr"}, {"sha": "70aecc384effebfc3a62999c3668dd231e835d94", "filename": "src/test/ui/nll/issue-54189.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fnll%2Fissue-54189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fnll%2Fissue-54189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54189.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-54189.rs"}, {"sha": "4787abd49d178a5f56a275dd8bcba68fd84e4052", "filename": "src/test/ui/nll/issue-54189.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fnll%2Fissue-54189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Fnll%2Fissue-54189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54189.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-54189.stderr"}, {"sha": "cf73fd8d31fbbca83353df292b81db2da6449cd7", "filename": "src/test/ui/traits/issue-99875.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-99875.rs"}, {"sha": "3ff8f12f1b8ce8688378ef9ab7699d54a24edc24", "filename": "src/test/ui/traits/issue-99875.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-99875.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-99875.stderr"}, {"sha": "57e56d832c6b0c9bebccf3e9d1c6942c03db2690", "filename": "src/test/ui/typeck/issue-18937-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937-1.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-18937-1.rs"}, {"sha": "af85e5b2b02ab3a9295584aabd2dcdb0e03a5ae6", "filename": "src/test/ui/typeck/issue-18937.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-18937.rs"}, {"sha": "5e2ba0ef4fc5ae4547e45f0766fa3e98e33f1828", "filename": "src/test/ui/typeck/issue-18937.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-18937.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-18937.stderr"}, {"sha": "f678df5b42b60d927cf4386889a745d7a553e73a", "filename": "src/test/ui/typeck/issue-31173.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-31173.rs"}, {"sha": "f3be99f9bcb4b3e09efcd9029b355d188c5ba5ec", "filename": "src/test/ui/typeck/issue-31173.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-31173.stderr?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "previous_filename": "src/test/ui/issues/issue-31173.stderr"}, {"sha": "166d09fa8b06897f635b2decf10d11abdd9cc892", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26242d35faf50aa9c873fa3c7c15e5564384baa/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=d26242d35faf50aa9c873fa3c7c15e5564384baa", "patch": "@@ -10,7 +10,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 939;\n-const ISSUES_ENTRY_LIMIT: usize = 2050;\n+const ISSUES_ENTRY_LIMIT: usize = 1998;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     for dir in Walk::new(&path.join(\"test/ui\")) {"}]}