{"sha": "582cba183f18eea5c40b6c035d63ad449a9e8604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmNiYTE4M2YxOGVlYTVjNDBiNmMwMzVkNjNhZDQ0OWE5ZTg2MDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T00:29:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T16:33:13Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "dabbfd1652be6819c02207ad60b8ed83f05496fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dabbfd1652be6819c02207ad60b8ed83f05496fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582cba183f18eea5c40b6c035d63ad449a9e8604", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582cba183f18eea5c40b6c035d63ad449a9e8604", "html_url": "https://github.com/rust-lang/rust/commit/582cba183f18eea5c40b6c035d63ad449a9e8604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582cba183f18eea5c40b6c035d63ad449a9e8604/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d13883f868e6b27aa00a6c69f7c748d16e1c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d13883f868e6b27aa00a6c69f7c748d16e1c94", "html_url": "https://github.com/rust-lang/rust/commit/67d13883f868e6b27aa00a6c69f7c748d16e1c94"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "820a3838978c0173c43aac5fc4d31a86c06c7b49", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -600,6 +600,7 @@ mod tests {\n     use std::option::Option::{Some, None};\n     use std::str::Str;\n     use std::sync::atomic;\n+    use std::sync::atomic::Ordering::{Acquire, SeqCst};\n     use std::task;\n     use std::kinds::Send;\n     use std::vec::Vec;"}, {"sha": "3907f28092a379ebf7bf5a4204e479106ab1779b", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -304,9 +304,9 @@ impl<K, V> Node<K, V> {\n         let (vals_offset, _) = calculate_offsets_generic::<K, V>(capacity, true);\n \n         Node {\n-            keys: Unique(buffer as *mut K).\n+            keys: Unique(buffer as *mut K),\n             vals: Unique(unsafe { buffer.offset(vals_offset as int) as *mut V }),\n-            edges: Unique(ptr::null_mut::<u8>()),\n+            edges: Unique(ptr::null_mut()),\n             _len: 0,\n             _capacity: capacity,\n         }\n@@ -574,7 +574,7 @@ impl <K, V> Node<K, V> {\n \n     /// If the node has any children\n     pub fn is_leaf(&self) -> bool {\n-        self.edges.is_null()\n+        self.edges.0.is_null()\n     }\n \n     /// if the node has too few elements\n@@ -1058,7 +1058,7 @@ impl<K, V> Node<K, V> {\n                     vals: RawItems::from_slice(self.vals()),\n                     edges: RawItems::from_slice(self.edges()),\n \n-                    ptr: self.keys as *mut u8,\n+                    ptr: self.keys.0 as *mut u8,\n                     capacity: self.capacity(),\n                     is_leaf: self.is_leaf()\n                 },"}, {"sha": "02b70c0f169d88e9fdc39ea7e85f828b773c5d11", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -1102,11 +1102,11 @@ impl<T: Clone> ToOwned<Vec<T>> for [T] {\n // Iterators\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[deriving(Copy)]\n+#[deriving(Copy, Clone)]\n enum Direction { Pos, Neg }\n \n /// An `Index` and `Direction` together.\n-#[deriving(Copy)]\n+#[deriving(Copy, Clone)]\n struct SizeDirection {\n     size: uint,\n     dir: Direction,"}, {"sha": "1fee304a9764890281b6bf7ce4f3c2864a1aebed", "filename": "src/libcoretest/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcoretest%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibcoretest%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fatomic.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use core::atomic::*;\n+use core::atomic::Ordering::SeqCst;\n \n #[test]\n fn bool_() {"}, {"sha": "366e33d6384ba0888d805dae10cf8d7726c5021e", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -530,11 +530,12 @@ static H256: [u32, ..8] = [\n mod tests {\n     extern crate rand;\n \n-    use super::{Digest, Sha256, FixedBuffer};\n-    use self::rand::isaac::IsaacRng;\n     use self::rand::Rng;\n+    use self::rand::isaac::IsaacRng;\n     use serialize::hex::FromHex;\n+    use std::iter::repeat;\n     use std::num::Int;\n+    use super::{Digest, Sha256, FixedBuffer};\n \n     // A normal addition - no overflow occurs\n     #[test]"}, {"sha": "3bfe2009f8b4b5fb250f72c0afaab66f71510cd2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -1320,9 +1320,9 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n-impl<'a, K, V> Clone for Entries<'a, K, V> {\n-    fn clone(&self) -> Entries<'a, K, V> {\n-        Entries {\n+impl<'a, K, V> Clone for Iter<'a, K, V> {\n+    fn clone(&self) -> Iter<'a, K, V> {\n+        Iter {\n             inner: self.inner.clone()\n         }\n     }"}, {"sha": "6938ab9b0b6d7defb94ade8b0239e1c7c5463e10", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -788,9 +788,9 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n-impl<'a, K, V> Clone for Entries<'a, K, V> {\n-    fn clone(&self) -> Entries<'a, K, V> {\n-        Entries {\n+impl<'a, K, V> Clone for Iter<'a, K, V> {\n+    fn clone(&self) -> Iter<'a, K, V> {\n+        Iter {\n             iter: self.iter.clone(),\n             elems_left: self.elems_left\n         }"}, {"sha": "df50b7f81afcf24d4c61c399cb90090d63a687d6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -716,6 +716,7 @@ fn real_args() -> Vec<String> {\n #[cfg(windows)]\n fn real_args() -> Vec<String> {\n     use slice;\n+    use iter::range;\n \n     let mut nArgs: c_int = 0;\n     let lpArgCount: *mut c_int = &mut nArgs;"}, {"sha": "28eca9163f6e5a15ae008ed40b2f6922e7c1fb58", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -129,7 +129,7 @@ pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD) -> Option<String\n         let mut res = None;\n         let mut done = false;\n         while !done {\n-            let mut buf: Vec<u16> = repeat(0u16).take(n).collect();\n+            let mut buf: Vec<u16> = repeat(0u16).take(n as uint).collect();\n             let k = f(buf.as_mut_ptr(), n);\n             if k == (0 as DWORD) {\n                 done = true;"}, {"sha": "761bcd4968abfba2459f2d06e6f40bd9df33091a", "filename": "src/test/compile-fail/trait-object-safety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -22,5 +22,4 @@ impl Tr for St {\n \n fn main() {\n     let _: &Tr = &St; //~ ERROR cannot convert to a trait object because trait `Tr` is not\n-    //~^ NOTE cannot call a static method (`foo`) through a trait object\n }"}, {"sha": "856fbbd00b20b2ef6112a7bf30f0c9fd8fd2337d", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582cba183f18eea5c40b6c035d63ad449a9e8604/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=582cba183f18eea5c40b6c035d63ad449a9e8604", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use std::time::Duration;\n+use std::thread::Thread;\n \n fn main() {\n-    std::task::spawn(move|| customtask());\n+    Thread::spawn(move|| customtask()).join().ok().unwrap();\n }\n \n fn customtask() {"}]}