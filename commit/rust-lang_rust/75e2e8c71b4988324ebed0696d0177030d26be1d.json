{"sha": "75e2e8c71b4988324ebed0696d0177030d26be1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTJlOGM3MWI0OTg4MzI0ZWJlZDA2OTZkMDE3NzAzMGQyNmJlMWQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-30T13:56:52Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-02T12:14:34Z"}, "message": "Remove unused discriminant reads from MIR bodies\n\nAllow the `SimplifyLocals` pass to remove reads of discriminants if the\nread is never used.", "tree": {"sha": "2f3c97f10b64facede2587dbe70ecf7f1fa54679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3c97f10b64facede2587dbe70ecf7f1fa54679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e2e8c71b4988324ebed0696d0177030d26be1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e2e8c71b4988324ebed0696d0177030d26be1d", "html_url": "https://github.com/rust-lang/rust/commit/75e2e8c71b4988324ebed0696d0177030d26be1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e2e8c71b4988324ebed0696d0177030d26be1d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99009bf31992fb9257b84550dbf7cb509f987952", "url": "https://api.github.com/repos/rust-lang/rust/commits/99009bf31992fb9257b84550dbf7cb509f987952", "html_url": "https://github.com/rust-lang/rust/commit/99009bf31992fb9257b84550dbf7cb509f987952"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "c2029a223b94123e3ec6a625cb83c15d58ac9195", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=75e2e8c71b4988324ebed0696d0177030d26be1d", "patch": "@@ -368,18 +368,22 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n-                if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) =\n-                    &stmt.kind\n-                {\n-                    match c.literal.val {\n-                        // Keep assignments from unevaluated constants around, since the evaluation\n-                        // may report errors, even if the use of the constant is dead code.\n-                        ty::ConstKind::Unevaluated(..) => {}\n-                        _ => {\n-                            if !p.is_indirect() {\n-                                trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n-                                return;\n+                if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n+                    if !dest.is_indirect() && dest.local == *local {\n+                        if let Rvalue::Use(Operand::Constant(c)) = rvalue {\n+                            match c.literal.val {\n+                                // Keep assignments from unevaluated constants around, since the\n+                                // evaluation may report errors, even if the use of the constant\n+                                // is dead code.\n+                                ty::ConstKind::Unevaluated(..) => {}\n+                                _ => {\n+                                    trace!(\"skipping store of const value {:?} to {:?}\", c, dest);\n+                                    return;\n+                                }\n                             }\n+                        } else if let Rvalue::Discriminant(d) = rvalue {\n+                            trace!(\"skipping store of discriminant value {:?} to {:?}\", d, dest);\n+                            return;\n                         }\n                     }\n                 }"}, {"sha": "067fa879b40382ca1786220d639c1d95a6de4f72", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=75e2e8c71b4988324ebed0696d0177030d26be1d", "patch": "@@ -0,0 +1,12 @@\n+fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n+    match x {\n+        None => None,\n+        Some(x) => Some(x),\n+    }\n+}\n+\n+fn main() {\n+    map(None);\n+}\n+\n+// EMIT_MIR rustc.map.SimplifyLocals.diff"}, {"sha": "bba8bc82fe7d9b06de710a32313dd056f76875f6", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/rustc.map.SimplifyLocals.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff?ref=75e2e8c71b4988324ebed0696d0177030d26be1d", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `map` before SimplifyLocals\n++ // MIR for `map` after SimplifyLocals\n+  \n+  fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n+-     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      scope 1 {\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // bb0[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // bb0[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      }\n+  \n+      bb1: {\n+          _0 = move _1;                    // bb1[0]: scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb2: {\n+          discriminant(_0) = 0;            // bb2[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+          goto -> bb3;                     // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb3: {\n+-         _5 = discriminant(_1);           // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-         return;                          // bb3[1]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n++         return;                          // bb3[0]: scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "78a7f722538edb2c82d54e0d9c8eb2078042d2bc", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e2e8c71b4988324ebed0696d0177030d26be1d/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=75e2e8c71b4988324ebed0696d0177030d26be1d", "patch": "@@ -183,33 +183,31 @@ fn main() {\n // fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n //     debug x => _1;\n //     let mut _0: std::result::Result<u32, i32>;\n-//     let mut _2: isize;\n-//     let _3: i32;\n-//     let _4: u32;\n+//     let _2: i32;\n+//     let _3: u32;\n //     scope 1 {\n-//         debug y => _4;\n+//         debug y => _3;\n //     }\n //     scope 2 {\n-//         debug err => _3;\n+//         debug err => _2;\n //         scope 3 {\n //             scope 7 {\n-//                 debug t => _3;\n+//                 debug t => _2;\n //             }\n //             scope 8 {\n-//                 debug v => _3;\n+//                 debug v => _2;\n //             }\n //         }\n //     }\n //     scope 4 {\n-//         debug val => _4;\n+//         debug val => _3;\n //         scope 5 {\n //         }\n //     }\n //     scope 6 {\n //         debug self => _1;\n //     }\n //     bb0: {\n-//         _2 = discriminant(_1);\n //         _0 = move _1;\n //         return;\n //     }"}]}