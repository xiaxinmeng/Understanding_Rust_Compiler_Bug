{"sha": "77e2bcb613c58ed2aeb86fdb07f470440f94f205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTJiY2I2MTNjNThlZDJhZWI4NmZkYjA3ZjQ3MDQ0MGY5NGYyMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-25T00:02:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-25T00:02:48Z"}, "message": "Auto merge of #49141 - gnzlbg:simd_select, r=alexcrichton\n\nadds simd_select intrinsic\n\nThe select SIMD intrinsic is used to select elements from two SIMD vectors using a mask:\n\n```rust\nlet mask = b8x4::new(true, false, false, true);\nlet a = f32x4::new(1., 2., 3., 4.);\nlet b = f32x4::new(5., 6., 7., 8.);\nassert_eq!(simd_select(mask, a, b), f32x4::new(1., 6., 7., 4.));\n```\n\nThe number of lanes between the mask and the vectors must match, but the vector width of the mask does not need to match that of the vectors. The mask is required to be a vector of signed integers.\n\nNote: this intrinsic will be exposed via `std::simd`'s vector masks - users are not expected to use it directly.", "tree": {"sha": "438d72590cd19b2f68363d305303edd48b90a90e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438d72590cd19b2f68363d305303edd48b90a90e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e2bcb613c58ed2aeb86fdb07f470440f94f205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e2bcb613c58ed2aeb86fdb07f470440f94f205", "html_url": "https://github.com/rust-lang/rust/commit/77e2bcb613c58ed2aeb86fdb07f470440f94f205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e2bcb613c58ed2aeb86fdb07f470440f94f205/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18", "html_url": "https://github.com/rust-lang/rust/commit/f5631d9ac7745dd6eaea2bc6c236d5f8e54e9a18"}, {"sha": "4eff4d9500968e8a6275185eac153e102996edb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff4d9500968e8a6275185eac153e102996edb5", "html_url": "https://github.com/rust-lang/rust/commit/4eff4d9500968e8a6275185eac153e102996edb5"}], "stats": {"total": 259, "additions": 259, "deletions": 0}, "files": [{"sha": "76c5bf56daa9fca74a4eafc3dd52400e893fc7d0", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=77e2bcb613c58ed2aeb86fdb07f470440f94f205", "patch": "@@ -1153,6 +1153,27 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n         return Ok(bx.extract_element(args[0].immediate(), args[1].immediate()))\n     }\n \n+    if name == \"simd_select\" {\n+        let m_elem_ty = in_elem;\n+        let m_len = in_len;\n+        let v_len = arg_tys[1].simd_size(tcx);\n+        require!(m_len == v_len,\n+                 \"mismatched lengths: mask length `{}` != other vector length `{}`\",\n+                 m_len, v_len\n+        );\n+        match m_elem_ty.sty {\n+            ty::TyInt(_) => {},\n+            _ => {\n+                return_error!(\"mask element type is `{}`, expected `i_`\", m_elem_ty);\n+            }\n+        }\n+        // truncate the mask to a vector of i1s\n+        let i1 = Type::i1(bx.cx);\n+        let i1xn = Type::vector(&i1, m_len as u64);\n+        let m_i1s = bx.trunc(args[0].immediate(), i1xn);\n+        return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n+    }\n+\n     macro_rules! arith_red {\n         ($name:tt : $integer_reduce:ident, $float_reduce:ident, $ordered:expr) => {\n             if name == $name {"}, {"sha": "84c9339be0ad41bbda2a1af45b36cbb324ac1298", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=77e2bcb613c58ed2aeb86fdb07f470440f94f205", "patch": "@@ -361,6 +361,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         \"simd_extract\" => (2, vec![param(0), tcx.types.u32], param(1)),\n         \"simd_cast\" => (2, vec![param(0)], param(1)),\n+        \"simd_select\" => (2, vec![param(0), param(1), param(1)], param(1)),\n         \"simd_reduce_all\" | \"simd_reduce_any\" => (1, vec![param(0)], tcx.types.bool),\n         \"simd_reduce_add_ordered\" | \"simd_reduce_mul_ordered\"\n             => (2, vec![param(0), param(1)], param(1)),"}, {"sha": "8a64d7437d84d4f39a131f8cf255dd028359093c", "filename": "src/test/codegen/simd-intrinsic-generic-select.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-select.rs?ref=77e2bcb613c58ed2aeb86fdb07f470440f94f205", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub struct b8x4(pub i8, pub i8, pub i8, pub i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+}\n+\n+// CHECK-LABEL: @select\n+#[no_mangle]\n+pub unsafe fn select(m: b8x4, a: f32x4, b: f32x4) -> f32x4 {\n+    // CHECK: select <4 x i1>\n+    simd_select(m, a, b)\n+}"}, {"sha": "d74d6815d5f5e282645d97d4275484e6ba2cc397", "filename": "src/test/compile-fail/simd-intrinsic-generic-select.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-select.rs?ref=77e2bcb613c58ed2aeb86fdb07f470440f94f205", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the simd_select intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq)]\n+struct b8x4(pub i8, pub i8, pub i8, pub i8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq)]\n+struct b8x8(pub i8, pub i8, pub i8, pub i8,\n+            pub i8, pub i8, pub i8, pub i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+}\n+\n+fn main() {\n+    let m4 = b8x4(0, 0, 0, 0);\n+    let m8 = b8x8(0, 0, 0, 0, 0, 0, 0, 0);\n+    let x = u32x4(0, 0, 0, 0);\n+    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n+\n+    unsafe {\n+        simd_select(m4, x, x);\n+\n+        simd_select(m8, x, x);\n+        //~^ ERROR mismatched lengths: mask length `8` != other vector length `4`\n+\n+        simd_select(x, x, x);\n+        //~^ ERROR mask element type is `u32`, expected `i_`\n+\n+        simd_select(z, z, z);\n+        //~^ ERROR mask element type is `f32`, expected `i_`\n+    }\n+}"}, {"sha": "8e94d797e894429eb90e77fca72c68c3072ab1de", "filename": "src/test/run-pass/simd-intrinsic-generic-select.rs", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e2bcb613c58ed2aeb86fdb07f470440f94f205/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-select.rs?ref=77e2bcb613c58ed2aeb86fdb07f470440f94f205", "patch": "@@ -0,0 +1,146 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+\n+// Test that the simd_select intrinsics produces correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct i32x4(pub i32, pub i32, pub i32, pub i32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct b8x4(pub i8, pub i8, pub i8, pub i8);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n+}\n+\n+fn main() {\n+    let m0 = b8x4(!0, !0, !0, !0);\n+    let m1 = b8x4(0, 0, 0, 0);\n+    let m2 = b8x4(!0, !0, 0, 0);\n+    let m3 = b8x4(0, 0, !0, !0);\n+    let m4 = b8x4(!0, 0, !0, 0);\n+\n+    unsafe {\n+        let a = i32x4(1, -2, 3, 4);\n+        let b = i32x4(5, 6, -7, 8);\n+\n+        let r: i32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m2, a, b);\n+        let e = i32x4(1, -2, -7, 8);\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m3, a, b);\n+        let e = i32x4(5, 6, 3, 4);\n+        assert_eq!(r, e);\n+\n+        let r: i32x4 = simd_select(m4, a, b);\n+        let e = i32x4(1, 6, 3, 8);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let a = u32x4(1, 2, 3, 4);\n+        let b = u32x4(5, 6, 7, 8);\n+\n+        let r: u32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m2, a, b);\n+        let e = u32x4(1, 2, 7, 8);\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m3, a, b);\n+        let e = u32x4(5, 6, 3, 4);\n+        assert_eq!(r, e);\n+\n+        let r: u32x4 = simd_select(m4, a, b);\n+        let e = u32x4(1, 6, 3, 8);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let a = f32x4(1., 2., 3., 4.);\n+        let b = f32x4(5., 6., 7., 8.);\n+\n+        let r: f32x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m2, a, b);\n+        let e = f32x4(1., 2., 7., 8.);\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m3, a, b);\n+        let e = f32x4(5., 6., 3., 4.);\n+        assert_eq!(r, e);\n+\n+        let r: f32x4 = simd_select(m4, a, b);\n+        let e = f32x4(1., 6., 3., 8.);\n+        assert_eq!(r, e);\n+    }\n+\n+    unsafe {\n+        let t = !0 as i8;\n+        let f = 0 as i8;\n+        let a = b8x4(t, f, t, f);\n+        let b = b8x4(f, f, f, t);\n+\n+        let r: b8x4 = simd_select(m0, a, b);\n+        let e = a;\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m1, a, b);\n+        let e = b;\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m2, a, b);\n+        let e = b8x4(t, f, f, t);\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m3, a, b);\n+        let e = b8x4(f, f, t, f);\n+        assert_eq!(r, e);\n+\n+        let r: b8x4 = simd_select(m4, a, b);\n+        let e = b8x4(t, f, t, t);\n+        assert_eq!(r, e);\n+    }\n+}"}]}