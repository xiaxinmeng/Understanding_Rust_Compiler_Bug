{"sha": "f458ea15d637db94d1e95c595aab6c1d7f3937e0", "node_id": "C_kwDOAAsO6NoAKGY0NThlYTE1ZDYzN2RiOTRkMWU5NWM1OTVhYWI2YzFkN2YzOTM3ZTA", "commit": {"author": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T19:34:19Z"}, "committer": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T19:34:19Z"}, "message": "Make helper method less specific", "tree": {"sha": "c9a79e94ef4bca7eba4d2ef3641368db9332b9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a79e94ef4bca7eba4d2ef3641368db9332b9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f458ea15d637db94d1e95c595aab6c1d7f3937e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE7WZLfNy5oeDQue2p1FagNJ1zoKMFAmM/LbsACgkQ1FagNJ1z\noKO1qw/9F1x35zPJgSx/mFxHZEfit5+vg+nAA3Pohxa12bhKpTj295GQabr8S2eN\ndIVF6fuy9efNfWhMSSp67MtUIe/6Y52FwFr8alPlLTwgR+boFvfvAbrjN7+9Ysg0\nQXmrqVTfxalnNJaDBTxMD3SILJOVuwpPxJKm4o+1q/BIP0rcz0ZgIAB/ww7reO4S\ndo6sHvKUuKsENqnGwoFKj1wQY1XmRm2M+czblGl+Mn4qLBPqEJK6pN8WDKVnRF+X\nXP8/Wv58zIODx48Qz4YhxGGlTNWEHEkwslOj1PQFlizOk325hPZSITrZwy+FIpOV\nI7PiKkN6TiRZU9Kgx+qEzIzS1wrFa7X3ZHT7tydU0RNpYnEOmxSCYXDA60m+m1vJ\n6rWcdff/KgeNBaDe1EzL1zKyv+93aUNM9qnoCVDe4RXOUXhR6A1unM3oAZiQ0zWM\nN1cOJ/MworiM4prWprQK0ZrWgE1bNZpiqwVLI8herbs1KCBqdtkROf9M+Vx7eOP0\ny0MjrozW4YWMxOawL1nnKIZP2d+12Q5UqCQlRwcI6VBsbBzcfdMmkzYcPzgNO3Uz\nCWGAxAY38VvwOAdxke+4W8tflb1RkA9EralOmpk3iEIG1xR5tBjjmgZXEoE/Xx9k\nK3wpWK5Jf59t9GOwGeD4nW2P+/XfrehhT2Pm0F7h6nxd5aJn89s=\n=PUUL\n-----END PGP SIGNATURE-----", "payload": "tree c9a79e94ef4bca7eba4d2ef3641368db9332b9b5\nparent 8a92910f9765689a6422de42a208724f8d3935e8\nauthor btwotwo <10519967+btwotwo@users.noreply.github.com> 1665084859 +0200\ncommitter btwotwo <10519967+btwotwo@users.noreply.github.com> 1665084859 +0200\n\nMake helper method less specific\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f458ea15d637db94d1e95c595aab6c1d7f3937e0", "html_url": "https://github.com/rust-lang/rust/commit/f458ea15d637db94d1e95c595aab6c1d7f3937e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f458ea15d637db94d1e95c595aab6c1d7f3937e0/comments", "author": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a92910f9765689a6422de42a208724f8d3935e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a92910f9765689a6422de42a208724f8d3935e8", "html_url": "https://github.com/rust-lang/rust/commit/8a92910f9765689a6422de42a208724f8d3935e8"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "b3e227ddd27dab5a8dcdb8864e2d6d67133f27cc", "filename": "crates/ide-db/src/syntax_helpers/format_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f458ea15d637db94d1e95c595aab6c1d7f3937e0/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f458ea15d637db94d1e95c595aab6c1d7f3937e0/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=f458ea15d637db94d1e95c595aab6c1d7f3937e0", "patch": "@@ -4,7 +4,7 @@ use syntax::{\n     TextRange, TextSize,\n };\n \n-use super::node_ext::get_outer_macro_name;\n+use super::node_ext::get_outer_macro;\n \n pub fn is_format_string(string: &ast::String) -> bool {\n     // Check if `string` is a format string argument of a macro invocation.\n@@ -16,7 +16,7 @@ pub fn is_format_string(string: &ast::String) -> bool {\n     // This setup lets us correctly highlight the components of `concat!(\"{}\", \"bla\")` format\n     // strings. It still fails for `concat!(\"{\", \"}\")`, but that is rare.\n     (|| {\n-        let name = get_outer_macro_name(string)?;\n+        let name = get_outer_macro(string)?.path()?.segment()?.name_ref()?;\n \n         if !matches!(\n             name.text().as_str(),"}, {"sha": "9cfcdfb77b97dee1448acd14bbe3620250efadd0", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f458ea15d637db94d1e95c595aab6c1d7f3937e0/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f458ea15d637db94d1e95c595aab6c1d7f3937e0/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=f458ea15d637db94d1e95c595aab6c1d7f3937e0", "patch": "@@ -2,7 +2,7 @@\n use itertools::Itertools;\n use parser::T;\n use syntax::{\n-    ast::{self, HasLoopBody, NameRef, PathSegmentKind, VisibilityKind},\n+    ast::{self, HasLoopBody, MacroCall, PathSegmentKind, VisibilityKind},\n     AstNode, AstToken, Preorder, RustLanguage, WalkEvent,\n };\n \n@@ -458,9 +458,7 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     Some(paths)\n }\n \n-pub fn get_outer_macro_name(string: &ast::String) -> Option<NameRef> {\n+pub fn get_outer_macro(string: &ast::String) -> Option<MacroCall> {\n     let macro_call = string.syntax().parent_ancestors().find_map(ast::MacroCall::cast)?;\n-    let name = macro_call.path()?.segment()?.name_ref()?;\n-\n-    Some(name)\n+    Some(macro_call)\n }"}]}