{"sha": "601c299d5267b4fc6d470240eb7e323955e288d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWMyOTlkNTI2N2I0ZmM2ZDQ3MDI0MGViN2UzMjM5NTVlMjg4ZDA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T19:09:59Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T22:18:44Z"}, "message": "Fix closures over known-size polymorphic values.", "tree": {"sha": "5ff9dac27ae2e9f8bccf070e5729dcecc4fe64b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff9dac27ae2e9f8bccf070e5729dcecc4fe64b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601c299d5267b4fc6d470240eb7e323955e288d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601c299d5267b4fc6d470240eb7e323955e288d0", "html_url": "https://github.com/rust-lang/rust/commit/601c299d5267b4fc6d470240eb7e323955e288d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601c299d5267b4fc6d470240eb7e323955e288d0/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a32f287c8a528143566972721be88344a35eb81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32f287c8a528143566972721be88344a35eb81b", "html_url": "https://github.com/rust-lang/rust/commit/a32f287c8a528143566972721be88344a35eb81b"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "29f4d19bc2c70df7fbf7a06d3b337fbb1f6675ba", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/601c299d5267b4fc6d470240eb7e323955e288d0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601c299d5267b4fc6d470240eb7e323955e288d0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=601c299d5267b4fc6d470240eb7e323955e288d0", "patch": "@@ -5199,9 +5199,10 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n         let fn_pair =\n             alt fn_res {\n               some(fn_pair) { fn_pair }\n-              none. { create_fn_pair(ccx, s, llfnty, llfn, false) }\n+              none. { {fn_pair: create_fn_pair(ccx, s, llfnty, llfn, false),\n+                       bcx: cx} }\n             };\n-        ret rslt(cx, fn_pair);\n+        ret rslt(fn_pair.bcx, fn_pair.fn_pair);\n       }\n       ast::expr_block(blk) {\n         let sub_cx = new_scope_block_ctxt(cx, \"block-expr body\");\n@@ -6446,8 +6447,8 @@ fn finish_fn(fcx: &@fn_ctxt, lltop: BasicBlockRef) {\n fn trans_closure(bcx_maybe: &option::t[@block_ctxt],\n                  llfnty: &option::t[TypeRef], cx: @local_ctxt, sp: &span,\n                  f: &ast::_fn, llfndecl: ValueRef, ty_self: option::t[ty::t],\n-                 ty_params: &ast::ty_param[], id: ast::node_id) ->\n-   option::t[ValueRef] {\n+                 ty_params: &ast::ty_param[], id: ast::node_id)\n+    -> option::t[{fn_pair: ValueRef, bcx: @block_ctxt}] {\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n@@ -6464,28 +6465,27 @@ fn trans_closure(bcx_maybe: &option::t[@block_ctxt],\n     copy_args_to_allocas(fcx, f.decl.inputs, arg_tys);\n \n     // Figure out if we need to build a closure and act accordingly\n-    let closure = none;\n-    alt f.proto {\n+    let res = alt f.proto {\n       ast::proto_block. | ast::proto_closure. {\n         let bcx = option::get(bcx_maybe);\n         let upvars = get_freevars(cx.ccx.tcx, id);\n \n-        let llenvptr = if (f.proto == ast::proto_block) {\n+        let env = if (f.proto == ast::proto_block) {\n             let llenv = build_environment(bcx, upvars);\n             load_environment(bcx, fcx, llenv.ptrty, upvars);\n-            llenv.ptr\n+            {ptr: llenv.ptr, bcx: bcx}\n         } else {\n             let llenv = build_copying_closure(bcx, upvars);\n             load_environment_heap(bcx, fcx, llenv.ptrty, upvars);\n-            llenv.ptr\n+            {ptr: llenv.ptr, bcx: llenv.bcx}\n         };\n \n-        closure =\n-            some(create_real_fn_pair(bcx, option::get(llfnty), llfndecl,\n-                                     llenvptr));\n+        let closure = create_real_fn_pair(env.bcx, option::get(llfnty),\n+                                          llfndecl, env.ptr);\n+        some({fn_pair: closure, bcx: env.bcx})\n       }\n-      _ { }\n-    }\n+      _ { none }\n+    };\n \n     // Create the first basic block in the function and keep a handle on it to\n     //  pass to finish_fn later.\n@@ -6520,7 +6520,7 @@ fn trans_closure(bcx_maybe: &option::t[@block_ctxt],\n     // Insert the mandatory first few basic blocks before lltop.\n     finish_fn(fcx, lltop);\n \n-    ret closure;\n+    ret res;\n }\n \n fn trans_fn_inner(cx: @local_ctxt, sp: &span, f: &ast::_fn,"}]}