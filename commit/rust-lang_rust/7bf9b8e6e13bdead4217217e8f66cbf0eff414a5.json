{"sha": "7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjliOGU2ZTEzYmRlYWQ0MjE3MjE3ZThmNjZjYmYwZWZmNDE0YTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-04T14:20:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-04T14:20:43Z"}, "message": "Update gimli", "tree": {"sha": "287d3899b9638e39340cf29297e572c818d6dd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287d3899b9638e39340cf29297e572c818d6dd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "html_url": "https://github.com/rust-lang/rust/commit/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98dae86d214226b2d9bf400bae39f040f279821b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98dae86d214226b2d9bf400bae39f040f279821b", "html_url": "https://github.com/rust-lang/rust/commit/98dae86d214226b2d9bf400bae39f040f279821b"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "cfa87b421b4e560e4c6ee51627e52e7213423926", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "patch": "@@ -299,8 +299,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"gimli\"\n-version = \"0.17.0\"\n-source = \"git+https://github.com/gimli-rs/gimli.git#70c3730b5e3d8669dd2dbcf829fedd4f679185d9\"\n+version = \"0.18.0\"\n+source = \"git+https://github.com/gimli-rs/gimli.git#423431f6747167af8e64cc8c8378f9a34a18ff8f\"\n dependencies = [\n  \"arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -591,7 +591,7 @@ dependencies = [\n  \"cranelift-simplejit 0.30.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"faerie 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gimli 0.17.0 (git+https://github.com/gimli-rs/gimli.git)\",\n+ \"gimli 0.18.0 (git+https://github.com/gimli-rs/gimli.git)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -874,7 +874,7 @@ dependencies = [\n \"checksum fallible-iterator 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n \"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \"checksum gcc 0.3.55 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n-\"checksum gimli 0.17.0 (git+https://github.com/gimli-rs/gimli.git)\" = \"<none>\"\n+\"checksum gimli 0.18.0 (git+https://github.com/gimli-rs/gimli.git)\" = \"<none>\"\n \"checksum goblin 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a4013e9182f2345c6b7829b9ef6e670bce0dfca12c6f974457ed2160c2c7fe9\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\""}, {"sha": "d287e2cfaa3085fd32e76157306155d4b6f89182", "filename": "src/debuginfo.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf9b8e6e13bdead4217217e8f66cbf0eff414a5/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=7bf9b8e6e13bdead4217217e8f66cbf0eff414a5", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             root.set(gimli::DW_AT_comp_dir, AttributeValue::StringRef(comp_dir));\n             root.set(\n                 gimli::DW_AT_low_pc,\n-                AttributeValue::Address(Address::Absolute(0)),\n+                AttributeValue::Address(Address::Constant(0)),\n             );\n         }\n \n@@ -251,7 +251,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n \n         entry.set(\n             gimli::DW_AT_low_pc,\n-            AttributeValue::Address(Address::Relative { symbol, addend: 0 }),\n+            AttributeValue::Address(Address::Symbol { symbol, addend: 0 }),\n         );\n \n         debug_context.emit_location(tcx, entry_id, mir.span);\n@@ -273,7 +273,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n     ) {\n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n-        line_program.begin_sequence(Some(Address::Relative {\n+        line_program.begin_sequence(Some(Address::Symbol {\n             symbol: self.symbol,\n             addend: 0,\n         }));\n@@ -326,7 +326,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n             .unit_range_list\n             .0\n             .push(Range::StartLength {\n-                begin: Address::Relative {\n+                begin: Address::Symbol {\n                     symbol: self.symbol,\n                     addend: 0,\n                 },\n@@ -371,20 +371,22 @@ impl Writer for WriterRelocate {\n \n     fn write_address(&mut self, address: Address, size: u8) -> Result<()> {\n         match address {\n-            Address::Absolute(val) => self.write_word(val, size),\n-            Address::Relative { symbol, addend } => {\n+            Address::Constant(val) => self.write_udata(val, size),\n+            Address::Symbol { symbol, addend } => {\n                 let offset = self.len() as u64;\n                 self.relocs.push(DebugReloc {\n                     offset: offset as u32,\n                     size,\n                     name: DebugRelocName::Symbol(symbol),\n                     addend: addend as i64,\n                 });\n-                self.write_word(0, size)\n+                self.write_udata(0, size)\n             }\n         }\n     }\n \n+    // TODO: implement write_eh_pointer\n+\n     fn write_offset(&mut self, val: usize, section: SectionId, size: u8) -> Result<()> {\n         let offset = self.len() as u32;\n         self.relocs.push(DebugReloc {\n@@ -393,7 +395,7 @@ impl Writer for WriterRelocate {\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n         });\n-        self.write_word(0, size)\n+        self.write_udata(0, size)\n     }\n \n     fn write_offset_at(\n@@ -409,6 +411,6 @@ impl Writer for WriterRelocate {\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n         });\n-        self.write_word_at(offset, 0, size)\n+        self.write_udata_at(offset, 0, size)\n     }\n }"}]}