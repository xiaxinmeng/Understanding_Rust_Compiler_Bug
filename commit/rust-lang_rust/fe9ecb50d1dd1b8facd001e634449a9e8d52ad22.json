{"sha": "fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOWVjYjUwZDFkZDFiOGZhY2QwMDFlNjM0NDQ5YTllOGQ1MmFkMjI=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T13:46:13Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T15:30:08Z"}, "message": "Follow-up to reviews from RalfJung\n1. Fix 'fn convert_path_separator' in src/shims/os_str.rs\n2. Fix 'fn set_last_error_from_io_error' in src/helpers.rs\n3. Minor comment fix for 'fn SetCurrentDirectoryW' in src/shims/env.rs", "tree": {"sha": "71b35bcd8c2893c7528854b595d9030bc7e862c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b35bcd8c2893c7528854b595d9030bc7e862c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "html_url": "https://github.com/rust-lang/rust/commit/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1141b21e50121976567cb54d6bd227bb7d5e1b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1141b21e50121976567cb54d6bd227bb7d5e1b61", "html_url": "https://github.com/rust-lang/rust/commit/1141b21e50121976567cb54d6bd227bb7d5e1b61"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "5407eb12051790133c16a7a7f5b8524203b64439", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "patch": "@@ -414,6 +414,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n         let target = &this.tcx.sess.target.target;\n+        let target_os = &target.target_os;\n         let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n             this.eval_libc(match e.kind() {\n                 ConnectionRefused => \"ECONNREFUSED\",\n@@ -434,15 +435,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     throw_unsup_format!(\"io error {} cannot be transformed into a raw os error\", e)\n                 }\n             })?\n-        } else {\n+        } else if target_os == \"windows\" {\n             // FIXME: we have to finish implementing the Windows equivalent of this.\n             this.eval_windows(match e.kind() {\n                 NotFound => \"ERROR_FILE_NOT_FOUND\",\n-                _ => throw_unsup_format!(\n-                    \"setting the last OS error from an io::Error is yet unsupported for {}.\",\n-                    target.target_os\n-                )\n+                _ => throw_unsup_format!(\"io error {} cannot be transformed into a raw os error\", e)\n             })?\n+        } else {\n+            throw_unsup_format!(\"setting the last OS error from an io::Error is unsupported for {}.\", target_os)\n         };\n         this.set_last_error(last_error)\n     }"}, {"sha": "ce1be90ce6993e9c392a9025ad1efe678705a322", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "patch": "@@ -357,7 +357,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn SetCurrentDirectoryW (\n         &mut self,\n         path_op: OpTy<'tcx, Tag>   // LPCTSTR\n-    ) -> InterpResult<'tcx, i32> { // Returns BOOL(i32 in Windows)\n+    ) -> InterpResult<'tcx, i32> { // Returns BOOL (i32 in Windows)\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetCurrentDirectoryW\");\n "}, {"sha": "a182950f0065533c919a4a314d748fe60631fdd0", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "patch": "@@ -179,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str: &'a OsStr = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os) {\n+        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, false) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -190,7 +190,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str: OsString = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os)))\n+        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, false)))\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -202,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, true);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -215,35 +215,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, true);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }\n \n /// Perform path separator conversion if needed.\n+/// if direction == true, Convert from 'host' to 'target'.\n+/// if direction == false, Convert from 'target' to 'host'.\n fn convert_path_separator<'a>(\n     os_str: &'a OsStr,\n     target_os: &str,\n+    direction: bool,\n ) -> Cow<'a, OsStr> {\n     #[cfg(windows)]\n     return if target_os == \"windows\" {\n         // Windows-on-Windows, all fine.\n         Cow::Borrowed(os_str)\n     } else {\n-        // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n+        // Unix target, Windows host.\n+        let (from, to) = if direction { ('\\\\', '/') } else { ('/', '\\\\') };\n         let converted = os_str\n             .encode_wide()\n-            .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n+            .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n             .collect::<Vec<_>>();\n         Cow::Owned(OsString::from_wide(&converted))\n     };\n     #[cfg(unix)]\n     return if target_os == \"windows\" {\n-        // Windows target, Unix host. Need to convert host '/' to target '\\'.\n+        // Windows target, Unix host.\n+        let (from, to) = if direction { ('/', '\\\\') } else { ('\\\\', '/') };\n         let converted = os_str\n             .as_bytes()\n             .iter()\n-            .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+            .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n             .collect::<Vec<_>>();\n         Cow::Owned(OsString::from_vec(converted))\n     } else {"}]}