{"sha": "7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "node_id": "C_kwDOAAsO6NoAKDdjNjM0NWQxNzVhNjk3NmU2OGQzOTAyMjQwYWI2ZGQ4ZDZiOTliYzI", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-27T00:28:25Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-27T01:03:28Z"}, "message": "Allow use of `-Clto=thin` with `-Ccodegen-units=1` in general\n\nThe current logic to ignore ThinLTO when `-Ccodegen-units=1` makes sense\nfor local ThinLTO but even in this scenario, a user may still want\n(non-local) ThinLTO for the purpose of optimizing dependencies into the\nfinal crate which is being compiled with 1 CGU.\n\nThe previous behavior was even more confusing because if you were\ngenerating a binary (`--emit=link`), then you would get ThinLTO but if\nyou asked for LLVM IR or bytecode, then it would silently change to\nusing regular LTO.\n\nWith this change, we only override the defaults for local ThinLTO if you\nask for a single output such as LLVM IR or bytecode and in all other\ncases honor the requested LTO setting.", "tree": {"sha": "42bd62db1b184981ad038dbb8b983d91b357bdac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42bd62db1b184981ad038dbb8b983d91b357bdac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "html_url": "https://github.com/rust-lang/rust/commit/7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0a099dfc9a97ecd10adb319396c731c4b2d169", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "html_url": "https://github.com/rust-lang/rust/commit/9b0a099dfc9a97ecd10adb319396c731c4b2d169"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "82159cff29f30c323bf01b0b3ddc6cba1cb6bb1c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "patch": "@@ -738,7 +738,7 @@ impl Default for Options {\n             actually_rustdoc: false,\n             trimmed_def_paths: TrimmedDefPaths::default(),\n             cli_forced_codegen_units: None,\n-            cli_forced_thinlto_off: false,\n+            cli_forced_local_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             real_rust_source_base_dir: None,\n             edition: DEFAULT_EDITION,\n@@ -1720,7 +1720,7 @@ fn should_override_cgus_and_disable_thinlto(\n     error_format: ErrorOutputType,\n     mut codegen_units: Option<usize>,\n ) -> (bool, Option<usize>) {\n-    let mut disable_thinlto = false;\n+    let mut disable_local_thinlto = false;\n     // Issue #30063: if user requests LLVM-related output to one\n     // particular path, disable codegen-units.\n     let incompatible: Vec<_> = output_types\n@@ -1745,12 +1745,12 @@ fn should_override_cgus_and_disable_thinlto(\n                     }\n                     early_warn(error_format, \"resetting to default -C codegen-units=1\");\n                     codegen_units = Some(1);\n-                    disable_thinlto = true;\n+                    disable_local_thinlto = true;\n                 }\n             }\n             _ => {\n                 codegen_units = Some(1);\n-                disable_thinlto = true;\n+                disable_local_thinlto = true;\n             }\n         }\n     }\n@@ -1759,7 +1759,7 @@ fn should_override_cgus_and_disable_thinlto(\n         early_error(error_format, \"value for codegen units must be a positive non-zero integer\");\n     }\n \n-    (disable_thinlto, codegen_units)\n+    (disable_local_thinlto, codegen_units)\n }\n \n fn check_thread_count(unstable_opts: &UnstableOptions, error_format: ErrorOutputType) {\n@@ -2249,7 +2249,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let output_types = parse_output_types(&unstable_opts, matches, error_format);\n \n     let mut cg = CodegenOptions::build(matches, error_format);\n-    let (disable_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n+    let (disable_local_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n         &output_types,\n         matches,\n         error_format,\n@@ -2492,7 +2492,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         actually_rustdoc: false,\n         trimmed_def_paths: TrimmedDefPaths::default(),\n         cli_forced_codegen_units: codegen_units,\n-        cli_forced_thinlto_off: disable_thinlto,\n+        cli_forced_local_thinlto_off: disable_local_thinlto,\n         remap_path_prefix,\n         real_rust_source_base_dir,\n         edition,"}, {"sha": "0483bac490a9344e6fea5622c713e88a833f4378", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "patch": "@@ -181,7 +181,7 @@ top_level_options!(\n         #[rustc_lint_opt_deny_field_access(\"use `Session::codegen_units` instead of this field\")]\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n         #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n-        cli_forced_thinlto_off: bool [UNTRACKED],\n+        cli_forced_local_thinlto_off: bool [UNTRACKED],\n \n         /// Remap source path prefixes in all output (messages, object files, debug, etc.).\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [TRACKED_NO_CRATE_HASH],"}, {"sha": "6c37c8f1487023c55e0d13aebd61613df81eb7f5", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6345d175a6976e68d3902240ab6dd8d6b99bc2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7c6345d175a6976e68d3902240ab6dd8d6b99bc2", "patch": "@@ -991,11 +991,8 @@ impl Session {\n                 return config::Lto::Fat;\n             }\n             config::LtoCli::Thin => {\n-                return if self.opts.cli_forced_thinlto_off {\n-                    config::Lto::Fat\n-                } else {\n-                    config::Lto::Thin\n-                };\n+                // The user explicitly asked for ThinLTO\n+                return config::Lto::Thin;\n             }\n         }\n \n@@ -1007,7 +1004,7 @@ impl Session {\n \n         // If processing command line options determined that we're incompatible\n         // with ThinLTO (e.g., `-C lto --emit llvm-ir`) then return that option.\n-        if self.opts.cli_forced_thinlto_off {\n+        if self.opts.cli_forced_local_thinlto_off {\n             return config::Lto::No;\n         }\n "}]}