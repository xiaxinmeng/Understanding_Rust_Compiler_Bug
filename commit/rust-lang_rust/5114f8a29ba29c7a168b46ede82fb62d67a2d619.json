{"sha": "5114f8a29ba29c7a168b46ede82fb62d67a2d619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMTRmOGEyOWJhMjljN2ExNjhiNDZlZGU4MmZiNjJkNjdhMmQ2MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-06T08:44:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-06T08:44:13Z"}, "message": "Auto merge of #36276 - jseyfried:fix_unused, r=nrc\n\nresolve: Fix unused import false positive with `item_like_imports`\n\nFixes #36249.\nr? @nrc", "tree": {"sha": "2cf55f7fc2bf91a05c0d732bb737a24f2631d864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf55f7fc2bf91a05c0d732bb737a24f2631d864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5114f8a29ba29c7a168b46ede82fb62d67a2d619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5114f8a29ba29c7a168b46ede82fb62d67a2d619", "html_url": "https://github.com/rust-lang/rust/commit/5114f8a29ba29c7a168b46ede82fb62d67a2d619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5114f8a29ba29c7a168b46ede82fb62d67a2d619/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d04201565790e17890f300c2bedeab6b895c313", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d04201565790e17890f300c2bedeab6b895c313", "html_url": "https://github.com/rust-lang/rust/commit/1d04201565790e17890f300c2bedeab6b895c313"}, {"sha": "ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "html_url": "https://github.com/rust-lang/rust/commit/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2"}], "stats": {"total": 85, "additions": 63, "deletions": 22}, "files": [{"sha": "c5b505fba38e9669c76f2f1f60f89a50587a0e28", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5114f8a29ba29c7a168b46ede82fb62d67a2d619", "patch": "@@ -871,16 +871,23 @@ enum NameBindingKind<'a> {\n     Import {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n+        used: Cell<bool>,\n     },\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n         b2: &'a NameBinding<'a>,\n     }\n }\n \n-#[derive(Clone, Debug)]\n struct PrivacyError<'a>(Span, Name, &'a NameBinding<'a>);\n \n+struct AmbiguityError<'a> {\n+    span: Span,\n+    name: Name,\n+    b1: &'a NameBinding<'a>,\n+    b2: &'a NameBinding<'a>,\n+}\n+\n impl<'a> NameBinding<'a> {\n     fn module(&self) -> Result<Module<'a>, bool /* true if an error has already been reported */> {\n         match self.kind {\n@@ -938,14 +945,6 @@ impl<'a> NameBinding<'a> {\n             _ => true,\n         }\n     }\n-\n-    fn ambiguity(&self) -> Option<(&'a NameBinding<'a>, &'a NameBinding<'a>)> {\n-        match self.kind {\n-            NameBindingKind::Ambiguity { b1, b2 } => Some((b1, b2)),\n-            NameBindingKind::Import { binding, .. } => binding.ambiguity(),\n-            _ => None,\n-        }\n-    }\n }\n \n /// Interns the names of the primitive types.\n@@ -1064,7 +1063,7 @@ pub struct Resolver<'a> {\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n-    ambiguity_errors: Vec<(Span, Name, &'a NameBinding<'a>)>,\n+    ambiguity_errors: Vec<AmbiguityError<'a>>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1276,17 +1275,21 @@ impl<'a> Resolver<'a> {\n             self.used_crates.insert(krate);\n         }\n \n-        if let NameBindingKind::Import { directive, .. } = binding.kind {\n-            self.used_imports.insert((directive.id, ns));\n-            self.add_to_glob_map(directive.id, name);\n-        }\n-\n-        if binding.ambiguity().is_some() {\n-            self.ambiguity_errors.push((span, name, binding));\n-            return true;\n+        match binding.kind {\n+            NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n+                used.set(true);\n+                self.used_imports.insert((directive.id, ns));\n+                self.add_to_glob_map(directive.id, name);\n+                self.record_use(name, ns, binding, span)\n+            }\n+            NameBindingKind::Import { .. } => false,\n+            NameBindingKind::Ambiguity { b1, b2 } => {\n+                let ambiguity_error = AmbiguityError { span: span, name: name, b1: b1, b2: b2 };\n+                self.ambiguity_errors.push(ambiguity_error);\n+                true\n+            }\n+            _ => false\n         }\n-\n-        false\n     }\n \n     fn add_to_glob_map(&mut self, id: NodeId, name: Name) {\n@@ -3306,9 +3309,8 @@ impl<'a> Resolver<'a> {\n     fn report_errors(&self) {\n         let mut reported_spans = FnvHashSet();\n \n-        for &(span, name, binding) in &self.ambiguity_errors {\n+        for &AmbiguityError { span, name, b1, b2 } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n-            let (b1, b2) = binding.ambiguity().unwrap();\n             let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n             let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);\n             self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))"}, {"sha": "85c03683c8dc77ce1600d72b9b329f6093f85dd8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5114f8a29ba29c7a168b46ede82fb62d67a2d619", "patch": "@@ -308,6 +308,7 @@ impl<'a> Resolver<'a> {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n                 directive: directive,\n+                used: Cell::new(false),\n             },\n             span: directive.span,\n             vis: vis,"}, {"sha": "4ec9987df4208fb673b7b4a5c9f32cbf42b56960", "filename": "src/test/compile-fail/imports/unused.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5114f8a29ba29c7a168b46ede82fb62d67a2d619/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Funused.rs?ref=5114f8a29ba29c7a168b46ede82fb62d67a2d619", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted, item_like_imports)]\n+#![deny(unused)]\n+\n+mod foo {\n+    fn f() {}\n+\n+    mod m1 {\n+        pub(super) use super::f; //~ ERROR unused\n+    }\n+\n+    mod m2 {\n+        #[allow(unused)]\n+        use super::m1::*; // (despite this glob import)\n+    }\n+\n+    mod m3 {\n+        pub(super) use super::f; // Check that this is counted as used (c.f. #36249).\n+    }\n+\n+    pub mod m4 {\n+        use super::m3::*;\n+        pub fn g() { f(); }\n+    }\n+}\n+\n+fn main() {\n+    foo::m4::g();\n+}"}]}