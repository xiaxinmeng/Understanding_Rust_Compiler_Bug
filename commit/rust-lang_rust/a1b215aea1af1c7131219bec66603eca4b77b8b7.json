{"sha": "a1b215aea1af1c7131219bec66603eca4b77b8b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjIxNWFlYTFhZjFjNzEzMTIxOWJlYzY2NjAzZWNhNGI3N2I4Yjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-06T22:39:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-06T22:40:30Z"}, "message": "Add --no-core option and inject a use core/import core::* pair into crate unless it's given.", "tree": {"sha": "aa7dcb10a9bbe959dab7ac51508f14c9ff2b44fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa7dcb10a9bbe959dab7ac51508f14c9ff2b44fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b215aea1af1c7131219bec66603eca4b77b8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b215aea1af1c7131219bec66603eca4b77b8b7", "html_url": "https://github.com/rust-lang/rust/commit/a1b215aea1af1c7131219bec66603eca4b77b8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b215aea1af1c7131219bec66603eca4b77b8b7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d4ec541578d381b56fa54094a6085181cbe2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d4ec541578d381b56fa54094a6085181cbe2b6", "html_url": "https://github.com/rust-lang/rust/commit/03d4ec541578d381b56fa54094a6085181cbe2b6"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "dbcc704cbe5c41d026816123fe4b9f7c9c58829f", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a1b215aea1af1c7131219bec66603eca4b77b8b7/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b215aea1af1c7131219bec66603eca4b77b8b7/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=a1b215aea1af1c7131219bec66603eca4b77b8b7", "patch": "@@ -108,6 +108,30 @@ fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n     ret rv;\n }\n \n+fn inject_libcore_reference(sess: session::session,\n+                            crate: @ast::crate) -> @ast::crate {\n+\n+    fn spanned<copy T>(x: T) -> @ast::spanned<T> {\n+        ret @{node: x,\n+              span: {lo: 0u, hi: 0u,\n+                     expanded_from: codemap::os_none}};\n+    }\n+\n+    let n1 = sess.next_node_id();\n+    let n2 = sess.next_node_id();\n+\n+    let vi1 = spanned(ast::view_item_use(\"core\", [], n1));\n+    let vi2 = spanned(ast::view_item_import_glob(@[\"core\"], n2));\n+\n+    let cd1 = spanned(ast::cdir_view_item(vi1));\n+    let cd2 = spanned(ast::cdir_view_item(vi2));\n+\n+    let cdirs = [cd1, cd2] + crate.node.directives;\n+\n+    ret @{node: {directives: cdirs with crate.node} with *crate }\n+}\n+\n+\n fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n                  output: str) {\n     let time_passes = sess.get_opts().time_passes;\n@@ -126,6 +150,10 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n+    if sess.get_opts().libcore {\n+        crate = inject_libcore_reference(sess, crate);\n+    }\n+\n     let ast_map =\n         time(time_passes, \"ast indexing\",\n              bind middle::ast_map::map_crate(*crate));\n@@ -257,6 +285,7 @@ options:\n     -o <filename>      write output to <filename>\n     --lib              compile a library crate\n     --static           use or produce static libraries\n+    --no-core          omit the 'core' library (used and imported by default)\n     --pretty [type]    pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n@@ -362,6 +391,7 @@ fn build_session_options(match: getopts::match)\n         } else if opt_present(match, \"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n+    let libcore = !opt_present(match, \"no-core\");\n     let verify = !opt_present(match, \"no-verify\");\n     let save_temps = opt_present(match, \"save-temps\");\n     let debuginfo = opt_present(match, \"g\");\n@@ -409,6 +439,7 @@ fn build_session_options(match: getopts::match)\n     let sopts: @session::options =\n         @{library: library,\n           static: static,\n+          libcore: libcore,\n           optimize: opt_level,\n           debuginfo: debuginfo,\n           verify: verify,\n@@ -465,6 +496,7 @@ fn opts() -> [getopts::opt] {\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"no-verify\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n+         optflag(\"no-core\"),\n          optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"stack-growth\"),\n          optflag(\"no-asm-comments\"),"}, {"sha": "a5dc690edafe604d18d18e10674a36b6e5ecce46", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1b215aea1af1c7131219bec66603eca4b77b8b7/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b215aea1af1c7131219bec66603eca4b77b8b7/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=a1b215aea1af1c7131219bec66603eca4b77b8b7", "patch": "@@ -26,6 +26,7 @@ type options =\n     // with additional crate configurations during the compile process\n     {library: bool,\n      static: bool,\n+     libcore: bool,\n      optimize: uint,\n      debuginfo: bool,\n      verify: bool,"}]}