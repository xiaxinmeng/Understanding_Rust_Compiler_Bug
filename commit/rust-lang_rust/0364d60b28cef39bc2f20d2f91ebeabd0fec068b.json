{"sha": "0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjRkNjBiMjhjZWYzOWJjMmYyMGQyZjkxZWJlYWJkMGZlYzA2OGI=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-10T05:41:27Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-10T08:04:05Z"}, "message": "test: Build auxiliary libraries for each test\n\nCloses #2162", "tree": {"sha": "5827ecf5023d7f8b5de326d468a1d08f458fd4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5827ecf5023d7f8b5de326d468a1d08f458fd4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "html_url": "https://github.com/rust-lang/rust/commit/0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0364d60b28cef39bc2f20d2f91ebeabd0fec068b/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10236f8cd48ad862c32573411acb4423e441f883", "url": "https://api.github.com/repos/rust-lang/rust/commits/10236f8cd48ad862c32573411acb4423e441f883", "html_url": "https://github.com/rust-lang/rust/commit/10236f8cd48ad862c32573411acb4423e441f883"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "d48e1427de0937b1f28ba7bf31dc18aea5464977", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0364d60b28cef39bc2f20d2f91ebeabd0fec068b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0364d60b28cef39bc2f20d2f91ebeabd0fec068b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "patch": "@@ -80,6 +80,7 @@ cleantestlibs:\n          -name '*.def' -o     \\\n          -name '*.bc' -o      \\\n          -name '*.dSYM' -o    \\\n+         -name '*.libaux' -o      \\\n          -name '*.out' -o     \\\n          -name '*.err'        \\\n          | xargs rm -rf"}, {"sha": "390facbec3d55a57928dcbaccc6da582b8b11fe2", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0364d60b28cef39bc2f20d2f91ebeabd0fec068b/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0364d60b28cef39bc2f20d2f91ebeabd0fec068b/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=0364d60b28cef39bc2f20d2f91ebeabd0fec068b", "patch": "@@ -175,9 +175,10 @@ actual:\\n\\\n             config, props, testfile, make_typecheck_args, option::some(src))\n     }\n \n-    fn make_typecheck_args(config: config, _testfile: str) -> procargs {\n+    fn make_typecheck_args(config: config, testfile: str) -> procargs {\n         let prog = config.rustc_path;\n-        let mut args = [\"-\", \"--no-trans\", \"--lib\", \"-L\", config.build_base];\n+        let mut args = [\"-\", \"--no-trans\", \"--lib\", \"-L\", config.build_base,\n+                        \"-L\", aux_output_dir_name(config, testfile)];\n         args += split_maybe_args(config.rustcflags);\n         ret {prog: prog, args: args};\n     }\n@@ -290,8 +291,9 @@ type procres = {status: int, stdout: str, stderr: str, cmdline: str};\n \n fn compile_test(config: config, props: test_props,\n                 testfile: str) -> procres {\n+    let link_args = [\"-L\", aux_output_dir_name(config, testfile)];\n     compose_and_run_compiler(config, props, testfile,\n-                             make_compile_args(_, props, [],\n+                             make_compile_args(_, props, link_args,\n                                                make_exe_name, _),\n                              none)\n }\n@@ -310,11 +312,18 @@ fn compose_and_run_compiler(\n     mk_args: fn(config: config, _testfile: str) -> procargs,\n     input: option<str>) -> procres {\n \n+    if props.aux_builds.is_not_empty() {\n+        ensure_dir(aux_output_dir_name(config, testfile));\n+    }\n+\n+    let extra_link_args = [\"-L\", aux_output_dir_name(config, testfile)];\n+\n     vec::iter(props.aux_builds) {|rel_ab|\n         let abs_ab = path::connect(config.aux_base, rel_ab);\n-        let auxres = compose_and_run(config, abs_ab,\n-                                     make_compile_args(_, props, [\"--lib\"],\n-                                                       make_lib_name, _),\n+        let mk_compile_args =\n+            make_compile_args(_, props, [\"--lib\"] + extra_link_args,\n+                              bind make_lib_name(_, _, testfile), _);\n+        let auxres = compose_and_run(config, abs_ab, mk_compile_args,\n                                      config.compile_lib_path, option::none);\n         if auxres.status != 0 {\n             fatal_procres(\n@@ -327,6 +336,13 @@ fn compose_and_run_compiler(\n                     config.compile_lib_path, input)\n }\n \n+fn ensure_dir(path: path) {\n+    if os::path_is_dir(path) { ret; }\n+    if !os::make_dir(path, 0x1c0i32) {\n+        fail #fmt(\"can't make dir %s\", path);\n+    }\n+}\n+\n fn compose_and_run(config: config, testfile: str,\n                    make_args: fn(config, str) -> procargs, lib_path: str,\n                    input: option<str>) -> procres {\n@@ -346,10 +362,11 @@ fn make_compile_args(config: config, props: test_props, extras: [str],\n     ret {prog: prog, args: args};\n }\n \n-fn make_lib_name(config: config, testfile: str) -> str {\n+fn make_lib_name(config: config, auxfile: str, testfile: str) -> str {\n     // what we return here is not particularly important, as it\n     // happens; rustc ignores everything except for the directory.\n-    output_base_name(config, testfile)\n+    let auxname = output_testname(auxfile);\n+    path::connect(aux_output_dir_name(config, testfile), auxname)\n }\n \n fn make_exe_name(config: config, testfile: str) -> str {\n@@ -440,12 +457,18 @@ fn make_out_name(config: config, testfile: str, extension: str) -> str {\n     output_base_name(config, testfile) + \".\" + extension\n }\n \n+fn aux_output_dir_name(config: config, testfile: str) -> str {\n+    output_base_name(config, testfile) + \".libaux\"\n+}\n+\n+fn output_testname(testfile: str) -> str {\n+    let parts = str::split_char(path::basename(testfile), '.');\n+    str::connect(vec::slice(parts, 0u, vec::len(parts) - 1u), \".\")\n+}\n+\n fn output_base_name(config: config, testfile: str) -> str {\n     let base = config.build_base;\n-    let filename = {\n-        let parts = str::split_char(path::basename(testfile), '.');\n-        str::connect(vec::slice(parts, 0u, vec::len(parts) - 1u), \".\")\n-    };\n+    let filename = output_testname(testfile);\n     #fmt[\"%s%s.%s\", base, filename, config.stage_id]\n }\n "}]}