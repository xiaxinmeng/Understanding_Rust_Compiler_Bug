{"sha": "06d173adb76e3f5f30c168a4c48316823b08e650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDE3M2FkYjc2ZTNmNWYzMGMxNjhhNGM0ODMxNjgyM2IwOGU2NTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-07T16:43:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-15T03:33:20Z"}, "message": "Add AppVeyor configuration to the repo\n\nWe hope to move to AppVeyor in the near future off of Buildbot + EC2. This adds\nan `appveyor.yml` configuration file which is ready to run builds on the auto\nbranch. This is also accompanied with a few minor fixes to the build system and\nsuch to accomodate AppVeyor.\n\nThe intention is that we're not switching over to AppVeyor entirely just yet,\nbut rather we'll watch the builds for a week or so. If everything checks out\nthen we'll start gating on AppVeyor instead of Buildbot!", "tree": {"sha": "0609cdfe6c3dda317fb2e1837d7bc9b88b956bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0609cdfe6c3dda317fb2e1837d7bc9b88b956bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d173adb76e3f5f30c168a4c48316823b08e650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d173adb76e3f5f30c168a4c48316823b08e650", "html_url": "https://github.com/rust-lang/rust/commit/06d173adb76e3f5f30c168a4c48316823b08e650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d173adb76e3f5f30c168a4c48316823b08e650/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d189af90841ca15f8d9dcc77628613f25e6b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d189af90841ca15f8d9dcc77628613f25e6b78", "html_url": "https://github.com/rust-lang/rust/commit/a8d189af90841ca15f8d9dcc77628613f25e6b78"}], "stats": {"total": 196, "additions": 164, "deletions": 32}, "files": [{"sha": "686c48abb30cd25846331f66ec1cc361c14c0114", "filename": "appveyor.yml", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -0,0 +1,110 @@\n+environment:\n+  matrix:\n+  # 32/64 bit MSVC\n+  - MSYS_BITS: 64\n+    TARGET: x86_64-pc-windows-msvc\n+    CHECK: check\n+    CONFIGURE_ARGS: --enable-llvm-assertions --enable-debug-assertions\n+  - MSYS_BITS: 32\n+    TARGET: i686-pc-windows-msvc\n+    CHECK: check\n+    CONFIGURE_ARGS: --enable-llvm-assertions --enable-debug-assertions\n+\n+  # MSVC rustbuild\n+  - MSYS_BITS: 64\n+    CONFIGURE_ARGS: --enable-rustbuild --enable-llvm-assertions --enable-debug-assertions\n+    TARGET: x86_64-pc-windows-msvc\n+    CHECK: check\n+\n+  # MSVC cargotest\n+  - MSYS_BITS: 64\n+    CONFIGURE_ARGS: --enable-rustbuild --enable-llvm-assertions --enable-debug-assertions\n+    TARGET: x86_64-pc-windows-msvc\n+    CHECK: check-cargotest\n+\n+  # 32/64-bit MinGW builds.\n+  #\n+  # The MinGW builds unfortunately have to both download a custom toolchain and\n+  # avoid the one installed by AppVeyor by default. Interestingly, though, for\n+  # different reasons!\n+  #\n+  # For 32-bit the installed gcc toolchain on AppVeyor uses the pthread\n+  # threading model. This is unfortunately not what we want, and if we compile\n+  # with it then there's lots of link errors in the standard library (undefined\n+  # references to pthread symbols).\n+  #\n+  # For 64-bit the installed gcc toolchain is currently 5.3.0 which\n+  # unfortunately segfaults on Windows with --enable-llvm-assertions (segfaults\n+  # in LLVM). See rust-lang/rust#28445 for more information, but to work around\n+  # this we go back in time to 4.9.2 specifically.\n+  #\n+  # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n+  # bucket, but they cleraly didn't originate there! The downloads originally\n+  # came from the mingw-w64 SourceForge download site. Unfortunately\n+  # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n+  #\n+  # And as a final point of note, the 32-bit MinGW build using the makefiles do\n+  # *not* use debug assertions and llvm assertions. This is because they take\n+  # too long on appveyor and this is tested by rustbuild below.\n+  - MSYS_BITS: 32\n+    TARGET: i686-pc-windows-gnu\n+    CHECK: check\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n+    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_DIR: mingw32\n+\n+  - MSYS_BITS: 32\n+    CONFIGURE_ARGS: --enable-rustbuild --enable-llvm-assertions --enable-debug-assertions\n+    TARGET: i686-pc-windows-gnu\n+    CHECK: check\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n+    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_DIR: mingw32\n+\n+  - MSYS_BITS: 64\n+    CONFIGURE_ARGS: --enable-llvm-assertions --enable-debug-assertions\n+    TARGET: x86_64-pc-windows-gnu\n+    CHECK: check\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n+    MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n+    MINGW_DIR: mingw64\n+\n+clone_depth: 1\n+build: false\n+\n+install:\n+  # If we need to download a custom MinGW, do so here and set the path\n+  # appropriately.\n+  #\n+  # Note that this *also* means that we're not using what is typically\n+  # /mingw32/bin/python2.7.exe, which is a \"correct\" python interpreter where\n+  # /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we\n+  # move `C:\\Python27` ahead in PATH and then also make sure the `python2.7.exe`\n+  # file exists in there (which it doesn't by default).\n+  - if defined MINGW_URL appveyor DownloadFile %MINGW_URL%/%MINGW_ARCHIVE%\n+  - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n+  - if defined MINGW_URL set PATH=C:\\Python27;%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n+  - if defined MINGW_URL copy C:\\Python27\\python.exe C:\\Python27\\python2.7.exe\n+\n+  # Otherwise pull in the MinGW installed on appveyor\n+  - if NOT defined MINGW_URL set PATH=C:\\msys64\\mingw%MSYS_BITS%\\bin;C:\\msys64\\usr\\bin;%PATH%\n+\n+test_script:\n+  - sh ./configure\n+          %CONFIGURE_ARGS%\n+          --build=%TARGET%\n+  - bash -c \"make -j$(nproc)\"\n+  - bash -c \"make %CHECK% -j$(nproc)\"\n+\n+cache:\n+  - build/%TARGET%/llvm -> src/rustllvm/llvm-auto-clean-trigger\n+  - \"%TARGET%/llvm -> src/rustllvm/llvm-auto-clean-trigger\"\n+\n+branches:\n+  only:\n+    - auto\n+\n+# init:\n+#   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n+# on_finish:\n+#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))"}, {"sha": "5a91f5fcaa48374c95341f52d7a5e3b41fa21a5f", "filename": "mk/llvm.mk", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -36,22 +36,27 @@ endif\n # If CFG_LLVM_ROOT is defined then we don't build LLVM ourselves\n ifeq ($(CFG_LLVM_ROOT),)\n \n-LLVM_STAMP_$(1) = $$(CFG_LLVM_BUILD_DIR_$(1))/llvm-auto-clean-stamp\n+LLVM_STAMP_$(1) = $(S)src/rustllvm/llvm-auto-clean-trigger\n LLVM_DONE_$(1) = $$(CFG_LLVM_BUILD_DIR_$(1))/llvm-finished-building\n \n $$(LLVM_CONFIG_$(1)): $$(LLVM_DONE_$(1))\n \n-$$(LLVM_DONE_$(1)): $$(LLVM_DEPS_TARGET_$(1)) $$(LLVM_STAMP_$(1))\n-\t@$$(call E, cmake: llvm)\n ifneq ($$(CFG_NINJA),)\n-\t$$(Q)$$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n+BUILD_LLVM_$(1) := $$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n else ifeq ($$(findstring msvc,$(1)),msvc)\n-\t$$(Q)$$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE)\n+BUILD_LLVM_$(1) := $$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n+\t\t\t--config $$(LLVM_BUILD_CONFIG_MODE)\n else\n-\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n+BUILD_LLVM_$(1) := $$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n endif\n-\t$$(Q)touch $$@\n+\n+$$(LLVM_DONE_$(1)): $$(LLVM_DEPS_TARGET_$(1)) $$(LLVM_STAMP_$(1))\n+\t@$$(call E, cmake: llvm)\n+\t$$(Q)if ! cmp $$(LLVM_STAMP_$(1)) $$(LLVM_DONE_$(1)); then \\\n+\t\t$$(MAKE) clean-llvm$(1); \\\n+\t\t$$(BUILD_LLVM_$(1)); \\\n+\tfi\n+\t$$(Q)cp $$(LLVM_STAMP_$(1)) $$@\n \n ifneq ($$(CFG_NINJA),)\n clean-llvm$(1):\n@@ -75,17 +80,6 @@ endif\n \n $$(LLVM_AR_$(1)): $$(LLVM_CONFIG_$(1))\n \n-# This is used to independently force an LLVM clean rebuild\n-# when we changed something not otherwise captured by builtin\n-# dependencies. In these cases, commit a change that touches\n-# the stamp in the source dir.\n-$$(LLVM_STAMP_$(1)): $$(S)src/rustllvm/llvm-auto-clean-trigger\n-\t@$$(call E, make: cleaning llvm)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(MAKE) clean-llvm$(1)\n-\t@$$(call E, make: done cleaning llvm)\n-\ttouch -r $$@.start_time $$@ && rm $$@.start_time\n-\n ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n \t\t\t\t\t-print-file-name=lib$(CFG_STDCPP_NAME).a))\""}, {"sha": "e4577bfcdfc94ea4f4407c555718e22513ba9641", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -120,6 +120,7 @@ struct Build {\n     rustc: Option<String>,\n     compiler_docs: Option<bool>,\n     docs: Option<bool>,\n+    submodules: Option<bool>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -225,6 +226,7 @@ impl Config {\n         config.cargo = build.cargo.map(PathBuf::from);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n+        set(&mut config.submodules, build.submodules);\n \n         if let Some(ref llvm) = toml.llvm {\n             set(&mut config.ccache, llvm.ccache);"}, {"sha": "39c976edc13d1954ce6a6032c93f3ebb8513a0af", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -76,6 +76,9 @@\n # library and facade crates.\n #compiler-docs = false\n \n+# Indicate whether submodules are managed and updated automatically.\n+#submodules = true\n+\n # =============================================================================\n # Options for compiling Rust code itself\n # ============================================================================="}, {"sha": "1b4e86fb30f254c8cb2dd914501c2f55b9e7f2dd", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -18,9 +18,10 @@\n //! LLVM and compiler-rt are essentially just wired up to everything else to\n //! ensure that they're always in place if needed.\n \n+use std::fs::{self, File};\n+use std::io::{Read, Write};\n use std::path::Path;\n use std::process::Command;\n-use std::fs::{self, File};\n \n use build_helper::output;\n use cmake;\n@@ -43,11 +44,17 @@ pub fn llvm(build: &Build, target: &str) {\n     // artifacts are missing) then we keep going, otherwise we bail out.\n     let dst = build.llvm_out(target);\n     let stamp = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n+    let mut stamp_contents = String::new();\n+    t!(t!(File::open(&stamp)).read_to_string(&mut stamp_contents));\n     let done_stamp = dst.join(\"llvm-finished-building\");\n-    build.clear_if_dirty(&dst, &stamp);\n-    if fs::metadata(&done_stamp).is_ok() {\n-        return\n+    if done_stamp.exists() {\n+        let mut done_contents = String::new();\n+        t!(t!(File::open(&done_stamp)).read_to_string(&mut done_contents));\n+        if done_contents == stamp_contents {\n+            return\n+        }\n     }\n+    drop(fs::remove_dir_all(&dst));\n \n     println!(\"Building LLVM for {}\", target);\n \n@@ -73,7 +80,9 @@ pub fn llvm(build: &Build, target: &str) {\n        .define(\"WITH_POLLY\", \"OFF\")\n        .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")\n        .define(\"LLVM_ENABLE_LIBEDIT\", \"OFF\")\n-       .define(\"LLVM_PARALLEL_COMPILE_JOBS\", build.jobs().to_string());\n+       .define(\"LLVM_PARALLEL_COMPILE_JOBS\", build.jobs().to_string())\n+       .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n+       .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n \n     if target.starts_with(\"i686\") {\n         cfg.define(\"LLVM_BUILD_32_BITS\", \"ON\");\n@@ -86,9 +95,7 @@ pub fn llvm(build: &Build, target: &str) {\n         //        actually exists most of the time in normal installs of LLVM.\n         let host = build.llvm_out(&build.config.build).join(\"bin/llvm-tblgen\");\n         cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\")\n-           .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n-           .define(\"LLVM_TABLEGEN\", &host)\n-           .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n+           .define(\"LLVM_TABLEGEN\", &host);\n     }\n \n     // MSVC handles compiler business itself\n@@ -114,7 +121,7 @@ pub fn llvm(build: &Build, target: &str) {\n     //        tools and libs on all platforms.\n     cfg.build();\n \n-    t!(File::create(&done_stamp));\n+    t!(t!(File::create(&done_stamp)).write_all(stamp_contents.as_bytes()));\n }\n \n fn check_llvm_version(build: &Build, llvm_config: &Path) {"}, {"sha": "f4b5ca7a157244d5f4e46b7739dd6db85d5c1169", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-10-10\n+2016-10-10b"}, {"sha": "1db87d474bd72d185d395507d511f4b0a5f623e6", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -22,9 +22,6 @@ RLIB_GLOB = lib$(1)*.rlib\n BIN = $(1)\n \n UNAME = $(shell uname)\n-ifneq (,$(findstring MINGW,$(UNAME)))\n-IS_WINDOWS=1\n-endif\n \n ifeq ($(UNAME),Darwin)\n RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)"}, {"sha": "978e991d50874be47d78e89dc6e051c5a9547742", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -36,6 +36,20 @@ const TEST_REPOS: &'static [Test] = &[Test {\n \n \n fn main() {\n+    // One of the projects being tested here is Cargo, and when being tested\n+    // Cargo will at some point call `nmake.exe` on Windows MSVC. Unfortunately\n+    // `nmake` will read these two environment variables below and try to\n+    // intepret them. We're likely being run, however, from MSYS `make` which\n+    // uses the same variables.\n+    //\n+    // As a result, to prevent confusion and errors, we remove these variables\n+    // from our environment to prevent passing MSYS make flags to nmake, causing\n+    // it to blow up.\n+    if cfg!(target_env = \"msvc\") {\n+        env::remove_var(\"MAKE\");\n+        env::remove_var(\"MAKEFLAGS\");\n+    }\n+\n     let args = env::args().collect::<Vec<_>>();\n     let ref cargo = args[1];\n     let out_dir = Path::new(&args[2]);"}, {"sha": "e10420bf291e703d67adc547786ca8fbb98cd01f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d173adb76e3f5f30c168a4c48316823b08e650/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=06d173adb76e3f5f30c168a4c48316823b08e650", "patch": "@@ -2105,12 +2105,17 @@ actual:\\n\\\n                                                  .collect::<Vec<_>>().join(\" \");\n \n             cmd.env(\"IS_MSVC\", \"1\")\n+               .env(\"IS_WINDOWS\", \"1\")\n                .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n                .env(\"CXX\", &self.config.cxx);\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n                .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags));\n+\n+            if self.config.target.contains(\"windows\") {\n+                cmd.env(\"IS_WINDOWS\", \"1\");\n+            }\n         }\n \n         let output = cmd.output().expect(\"failed to spawn `make`\");"}]}