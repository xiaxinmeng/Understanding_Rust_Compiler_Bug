{"sha": "cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "node_id": "C_kwDOAAsO6NoAKGNlYzc4MzVkN2E4ZWEyNWIyMTRiNmJhZTVkNjFmNTEyNTFiMDliOGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T03:28:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T03:28:54Z"}, "message": "Move late-bound arg type checks to resolve_bound_vars", "tree": {"sha": "b731557415e38f92f513a866c46f56a64f6d7cdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b731557415e38f92f513a866c46f56a64f6d7cdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "html_url": "https://github.com/rust-lang/rust/commit/cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fded2e95abac4bffcd4dedfff93a34520aa91be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fded2e95abac4bffcd4dedfff93a34520aa91be2", "html_url": "https://github.com/rust-lang/rust/commit/fded2e95abac4bffcd4dedfff93a34520aa91be2"}], "stats": {"total": 258, "additions": 171, "deletions": 87}, "files": [{"sha": "e1d269b828be4a27b10e991c25c0c58751379162", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 46, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -252,6 +252,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // (*) -- not late-bound, won't change\n             }\n \n+            Some(rbv::ResolvedArg::Error(_)) => {\n+                bug!(\"only ty/ct should resolve as ResolvedArg::Error\")\n+            }\n+\n             None => {\n                 self.re_infer(def, lifetime.ident.span).unwrap_or_else(|| {\n                     debug!(?lifetime, \"unelided lifetime in signature\");\n@@ -2689,6 +2693,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n                         tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id))\n                     }\n+                    Some(rbv::ResolvedArg::Error(guar)) => tcx.ty_error_with_guaranteed(guar),\n                     arg => bug!(\"unexpected bound var resolution for {hir_id:?}: {arg:?}\"),\n                 }\n             }\n@@ -2893,22 +2898,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::BareFn(bf) => {\n                 require_c_abi_if_c_variadic(tcx, bf.decl, bf.abi, ast_ty.span);\n \n-                let fn_ptr_ty = tcx.mk_fn_ptr(self.ty_of_fn(\n+                tcx.mk_fn_ptr(self.ty_of_fn(\n                     ast_ty.hir_id,\n                     bf.unsafety,\n                     bf.abi,\n                     bf.decl,\n                     None,\n                     Some(ast_ty),\n-                ));\n-\n-                if let Some(guar) =\n-                    deny_non_region_late_bound(tcx, bf.generic_params, \"function pointer\")\n-                {\n-                    tcx.ty_error_with_guaranteed(guar)\n-                } else {\n-                    fn_ptr_ty\n-                }\n+                ))\n             }\n             hir::TyKind::TraitObject(bounds, lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n@@ -2917,21 +2914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     TraitObjectSyntax::DynStar => ty::DynStar,\n                 };\n \n-                let object_ty = self.conv_object_ty_poly_trait_ref(\n-                    ast_ty.span,\n-                    bounds,\n-                    lifetime,\n-                    borrowed,\n-                    repr,\n-                );\n-\n-                if let Some(guar) = bounds.iter().find_map(|trait_ref| {\n-                    deny_non_region_late_bound(tcx, trait_ref.bound_generic_params, \"trait object\")\n-                }) {\n-                    tcx.ty_error_with_guaranteed(guar)\n-                } else {\n-                    object_ty\n-                }\n+                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(maybe_qself, path)) => {\n                 debug!(?maybe_qself, ?path);\n@@ -3392,24 +3375,3 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n-\n-fn deny_non_region_late_bound(\n-    tcx: TyCtxt<'_>,\n-    params: &[hir::GenericParam<'_>],\n-    where_: &str,\n-) -> Option<ErrorGuaranteed> {\n-    params.iter().find_map(|bad_param| {\n-        let what = match bad_param.kind {\n-            hir::GenericParamKind::Type { .. } => \"type\",\n-            hir::GenericParamKind::Const { .. } => \"const\",\n-            hir::GenericParamKind::Lifetime { .. } => return None,\n-        };\n-\n-        let mut diag = tcx.sess.struct_span_err(\n-            bad_param.span,\n-            format!(\"late-bound {what} parameter not allowed on {where_} types\"),\n-        );\n-\n-        Some(if tcx.features().non_lifetime_binders { diag.emit() } else { diag.delay_as_bug() })\n-    })\n-}"}, {"sha": "127d4fa908bb959411d8bc4c8f72c773c9674358", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -398,7 +398,12 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n                 Some(rbv::ResolvedArg::StaticLifetime | rbv::ResolvedArg::EarlyBound(..)) => {}\n                 Some(rbv::ResolvedArg::LateBound(debruijn, _, _))\n                     if debruijn < self.outer_index => {}\n-                Some(rbv::ResolvedArg::LateBound(..) | rbv::ResolvedArg::Free(..)) | None => {\n+                Some(\n+                    rbv::ResolvedArg::LateBound(..)\n+                    | rbv::ResolvedArg::Free(..)\n+                    | rbv::ResolvedArg::Error(_),\n+                )\n+                | None => {\n                     self.has_late_bound_regions = Some(lt.ident.span);\n                 }\n             }"}, {"sha": "c0c90e47a7539bdc043e2accac5b30ffb4227f00", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 100, "deletions": 38, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -50,7 +50,7 @@ impl RegionExt for ResolvedArg {\n \n     fn id(&self) -> Option<DefId> {\n         match *self {\n-            ResolvedArg::StaticLifetime => None,\n+            ResolvedArg::StaticLifetime | ResolvedArg::Error(_) => None,\n \n             ResolvedArg::EarlyBound(id)\n             | ResolvedArg::LateBound(_, _, id)\n@@ -336,7 +336,57 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn visit_poly_trait_ref_inner(\n+        &mut self,\n+        trait_ref: &'tcx hir::PolyTraitRef<'tcx>,\n+        non_lifetime_binder_allowed: NonLifetimeBinderAllowed,\n+    ) {\n+        debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n+\n+        let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n+\n+        let initial_bound_vars = binders.len() as u32;\n+        let mut bound_vars: FxIndexMap<LocalDefId, ResolvedArg> = FxIndexMap::default();\n+        let binders_iter =\n+            trait_ref.bound_generic_params.iter().enumerate().map(|(late_bound_idx, param)| {\n+                let pair = ResolvedArg::late(initial_bound_vars + late_bound_idx as u32, param);\n+                let r = late_arg_as_bound_arg(self.tcx, &pair.1, param);\n+                bound_vars.insert(pair.0, pair.1);\n+                r\n+            });\n+        binders.extend(binders_iter);\n+\n+        if let NonLifetimeBinderAllowed::Deny(where_) = non_lifetime_binder_allowed {\n+            deny_non_region_late_bound(self.tcx, &mut bound_vars, where_);\n+        }\n+\n+        debug!(?binders);\n+        self.record_late_bound_vars(trait_ref.trait_ref.hir_ref_id, binders);\n+\n+        // Always introduce a scope here, even if this is in a where clause and\n+        // we introduced the binders around the bounded Ty. In that case, we\n+        // just reuse the concatenation functionality also present in nested trait\n+        // refs.\n+        let scope = Scope::Binder {\n+            hir_id: trait_ref.trait_ref.hir_ref_id,\n+            bound_vars,\n+            s: self.scope,\n+            scope_type,\n+            where_bound_origin: None,\n+        };\n+        self.with(scope, |this| {\n+            walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n+            this.visit_trait_ref(&trait_ref.trait_ref);\n+        });\n+    }\n+}\n+\n+enum NonLifetimeBinderAllowed {\n+    Deny(&'static str),\n+    Allow,\n }\n+\n impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n@@ -400,7 +450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 }\n             }\n \n-            let (bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) =\n+            let (mut bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) =\n                 bound_generic_params\n                     .iter()\n                     .enumerate()\n@@ -411,6 +461,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                     })\n                     .unzip();\n \n+            deny_non_region_late_bound(self.tcx, &mut bound_vars, \"closures\");\n+\n             self.record_late_bound_vars(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,\n@@ -567,7 +619,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n         match ty.kind {\n             hir::TyKind::BareFn(c) => {\n-                let (bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) = c\n+                let (mut bound_vars, binders): (FxIndexMap<LocalDefId, ResolvedArg>, Vec<_>) = c\n                     .generic_params\n                     .iter()\n                     .enumerate()\n@@ -577,6 +629,9 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                         (pair, r)\n                     })\n                     .unzip();\n+\n+                deny_non_region_late_bound(self.tcx, &mut bound_vars, \"function pointer types\");\n+\n                 self.record_late_bound_vars(ty.hir_id, binders);\n                 let scope = Scope::Binder {\n                     hir_id: ty.hir_id,\n@@ -596,7 +651,10 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                 let scope = Scope::TraitRefBoundary { s: self.scope };\n                 self.with(scope, |this| {\n                     for bound in bounds {\n-                        this.visit_poly_trait_ref(bound);\n+                        this.visit_poly_trait_ref_inner(\n+                            bound,\n+                            NonLifetimeBinderAllowed::Deny(\"trait object types\"),\n+                        );\n                     }\n                 });\n                 match lifetime.res {\n@@ -967,39 +1025,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     }\n \n     fn visit_poly_trait_ref(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) {\n-        debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n-\n-        let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n-\n-        let initial_bound_vars = binders.len() as u32;\n-        let mut bound_vars: FxIndexMap<LocalDefId, ResolvedArg> = FxIndexMap::default();\n-        let binders_iter =\n-            trait_ref.bound_generic_params.iter().enumerate().map(|(late_bound_idx, param)| {\n-                let pair = ResolvedArg::late(initial_bound_vars + late_bound_idx as u32, param);\n-                let r = late_arg_as_bound_arg(self.tcx, &pair.1, param);\n-                bound_vars.insert(pair.0, pair.1);\n-                r\n-            });\n-        binders.extend(binders_iter);\n-\n-        debug!(?binders);\n-        self.record_late_bound_vars(trait_ref.trait_ref.hir_ref_id, binders);\n-\n-        // Always introduce a scope here, even if this is in a where clause and\n-        // we introduced the binders around the bounded Ty. In that case, we\n-        // just reuse the concatenation functionality also present in nested trait\n-        // refs.\n-        let scope = Scope::Binder {\n-            hir_id: trait_ref.trait_ref.hir_ref_id,\n-            bound_vars,\n-            s: self.scope,\n-            scope_type,\n-            where_bound_origin: None,\n-        };\n-        self.with(scope, |this| {\n-            walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n-            this.visit_trait_ref(&trait_ref.trait_ref);\n-        });\n+        self.visit_poly_trait_ref_inner(trait_ref, NonLifetimeBinderAllowed::Allow);\n     }\n }\n \n@@ -1364,7 +1390,9 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             return;\n         }\n \n-        span_bug!(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\",);\n+        self.tcx\n+            .sess\n+            .delay_span_bug(self.tcx.hir().span(hir_id), \"could not resolve {param_def_id:?}\");\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n@@ -1915,3 +1943,37 @@ fn is_late_bound_map(\n         }\n     }\n }\n+\n+pub fn deny_non_region_late_bound(\n+    tcx: TyCtxt<'_>,\n+    bound_vars: &mut FxIndexMap<LocalDefId, ResolvedArg>,\n+    where_: &str,\n+) {\n+    let mut first = true;\n+\n+    for (var, arg) in bound_vars {\n+        let Node::GenericParam(param) = tcx.hir().get_by_def_id(*var) else {\n+            bug!();\n+        };\n+\n+        let what = match param.kind {\n+            hir::GenericParamKind::Type { .. } => \"type\",\n+            hir::GenericParamKind::Const { .. } => \"const\",\n+            hir::GenericParamKind::Lifetime { .. } => continue,\n+        };\n+\n+        let mut diag = tcx.sess.struct_span_err(\n+            param.span,\n+            format!(\"late-bound {what} parameter not allowed on {where_}\"),\n+        );\n+\n+        let guar = if tcx.features().non_lifetime_binders && first {\n+            diag.emit()\n+        } else {\n+            diag.delay_as_bug()\n+        };\n+\n+        first = false;\n+        *arg = ResolvedArg::Error(guar);\n+    }\n+}"}, {"sha": "fec04af231393bb84508ce9046ef7b26f034633d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -134,7 +134,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                             rbv::ResolvedArg::StaticLifetime\n                             | rbv::ResolvedArg::Free(_, _)\n                             | rbv::ResolvedArg::EarlyBound(_)\n-                            | rbv::ResolvedArg::LateBound(_, _, _),\n+                            | rbv::ResolvedArg::LateBound(_, _, _)\n+                            | rbv::ResolvedArg::Error(_),\n                         )\n                         | None,\n                         _,\n@@ -211,7 +212,8 @@ impl<'tcx> Visitor<'tcx> for TyPathVisitor<'tcx> {\n                     rbv::ResolvedArg::StaticLifetime\n                     | rbv::ResolvedArg::EarlyBound(_)\n                     | rbv::ResolvedArg::LateBound(_, _, _)\n-                    | rbv::ResolvedArg::Free(_, _),\n+                    | rbv::ResolvedArg::Free(_, _)\n+                    | rbv::ResolvedArg::Error(_),\n                 )\n                 | None,\n                 _,"}, {"sha": "c59704fc0238f4afacff8107306c6d59b08544e5", "filename": "compiler/rustc_middle/src/middle/resolve_bound_vars.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_bound_vars.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -3,6 +3,7 @@\n use crate::ty;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ItemLocalId, OwnerId};\n use rustc_macros::HashStable;\n@@ -13,6 +14,7 @@ pub enum ResolvedArg {\n     EarlyBound(/* decl */ DefId),\n     LateBound(ty::DebruijnIndex, /* late-bound index */ u32, /* decl */ DefId),\n     Free(DefId, /* lifetime decl */ DefId),\n+    Error(ErrorGuaranteed),\n }\n \n /// A set containing, at most, one known element."}, {"sha": "884ae7f5da2841260cf931f7886f5e384c06a139", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -149,6 +149,9 @@ impl<'tcx> Const<'tcx> {\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n                         ty,\n                     )),\n+                    Some(rbv::ResolvedArg::Error(guar)) => {\n+                        Some(tcx.const_error_with_guaranteed(ty, guar))\n+                    }\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }\n             }"}, {"sha": "f4edcdaa9ca9fc0cc28fbef819a41d77a54541b0", "filename": "tests/ui/closures/binder/type-bound-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder, non_lifetime_binders)]\n+//~^ WARN  is incomplete and may not be safe to use\n+\n+fn main() {\n+    for<T> || -> () {};\n+    //~^ ERROR late-bound type parameter not allowed on closures\n+}"}, {"sha": "14b2dbf03957f3ef3e3d7b8247c288f02a3e19a1", "filename": "tests/ui/closures/binder/type-bound-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound-2.stderr?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-bound-2.rs:1:37\n+   |\n+LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on closures\n+  --> $DIR/type-bound-2.rs:5:9\n+   |\n+LL |     for<T> || -> () {};\n+   |         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "59a3353f4965eb3986135a0fecbc7561671a72f8", "filename": "tests/ui/closures/binder/type-bound.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.rs?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder, non_lifetime_binders)]\n+//~^ WARN  is incomplete and may not be safe to use\n+\n+fn main()  {\n+    for<T> || -> T {};\n+    //~^ ERROR late-bound type parameter not allowed on closures\n+}"}, {"sha": "ef00a2dffceae97a9b669b4890bffd1fc41a0534", "filename": "tests/ui/closures/binder/type-bound.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cec7835d7a8ea25b214b6bae5d61f51251b09b8e/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Ftype-bound.stderr?ref=cec7835d7a8ea25b214b6bae5d61f51251b09b8e", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-bound.rs:1:37\n+   |\n+LL | #![feature(closure_lifetime_binder, non_lifetime_binders)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: late-bound type parameter not allowed on closures\n+  --> $DIR/type-bound.rs:5:9\n+   |\n+LL |     for<T> || -> T {};\n+   |         ^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}