{"sha": "f93d418f1789a5782053e99038db7d6701c8a30c", "node_id": "C_kwDOAAsO6NoAKGY5M2Q0MThmMTc4OWE1NzgyMDUzZTk5MDM4ZGI3ZDY3MDFjOGEzMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T09:20:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-06T09:20:55Z"}, "message": "Auto merge of #9099 - joshtriplett:unnecessary-lazy-eval-then-some, r=flip1995\n\nExtend unnecessary_lazy_eval to cover `bool::then` -> `bool::then_some`\n\nfixes #9097\n\nchangelog: Extend `unnecessary_lazy_eval` to convert `bool::then` to `bool::then_some`", "tree": {"sha": "ac44f8a63130bdd24bb3716f284b731ca5010e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac44f8a63130bdd24bb3716f284b731ca5010e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93d418f1789a5782053e99038db7d6701c8a30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93d418f1789a5782053e99038db7d6701c8a30c", "html_url": "https://github.com/rust-lang/rust/commit/f93d418f1789a5782053e99038db7d6701c8a30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93d418f1789a5782053e99038db7d6701c8a30c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd605ab7e45570eeaab7ca4ed47bcdd4555064b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd605ab7e45570eeaab7ca4ed47bcdd4555064b6", "html_url": "https://github.com/rust-lang/rust/commit/fd605ab7e45570eeaab7ca4ed47bcdd4555064b6"}, {"sha": "b7230d4f44e974c6639980a2e44e8d7523b6c90c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7230d4f44e974c6639980a2e44e8d7523b6c90c", "html_url": "https://github.com/rust-lang/rust/commit/b7230d4f44e974c6639980a2e44e8d7523b6c90c"}], "stats": {"total": 132, "additions": 78, "deletions": 54}, "files": [{"sha": "c089f4d8ce4bb2c3f9757351b44fdd999f338242", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -553,7 +553,7 @@ fn replace_ident_like(contents: &str, replacements: &[(&str, &str)]) -> Option<S\n         pos = m.end();\n     }\n     result.push_str(&contents[pos..]);\n-    edited.then(|| result)\n+    edited.then_some(result)\n }\n \n fn round_to_fifty(count: usize) -> usize {"}, {"sha": "1be1b862066b80418e4acc59ce6a8aaf110eeef6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -744,7 +744,9 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                         },\n                     )\n                 },\n-                ExprKind::Call(func, _) if func.hir_id == child_id => (child_id == e.hir_id).then(|| Position::Callee),\n+                ExprKind::Call(func, _) if func.hir_id == child_id => {\n+                    (child_id == e.hir_id).then_some(Position::Callee)\n+                },\n                 ExprKind::Call(func, args) => args\n                     .iter()\n                     .position(|arg| arg.hir_id == child_id)"}, {"sha": "4e3ae4c9614113f3a1132462d8b70600c8a7f8c9", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -650,7 +650,7 @@ fn find_insert_calls<'tcx>(\n     let allow_insert_closure = s.allow_insert_closure;\n     let is_single_insert = s.is_single_insert;\n     let edits = s.edits;\n-    s.can_use_entry.then(|| InsertSearchResults {\n+    s.can_use_entry.then_some(InsertSearchResults {\n         edits,\n         allow_insert_closure,\n         is_single_insert,"}, {"sha": "c5abcc462545c935fb8a6b37e678685ce7bf639b", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -127,7 +127,7 @@ fn get_impl_span(cx: &LateContext<'_>, id: LocalDefId) -> Option<Span> {\n         (!span.from_expansion()\n             && impl_item.generics.params.is_empty()\n             && !is_lint_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n-        .then(|| span)\n+        .then_some(span)\n     } else {\n         None\n     }"}, {"sha": "2b04475c7a9debd962534a28343034ad1a5af815", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                 (matches!(v.data, hir::VariantData::Unit(_))\n                     && v.ident.as_str().starts_with('_')\n                     && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n-                .then(|| (id, v.span))\n+                .then_some((id, v.span))\n             });\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "8f98b43b9e5c8d240327b269a2961468d0e28275", "filename": "clippy_lints/src/matches/manual_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -105,7 +105,7 @@ fn check<'tcx>(\n \n     // Determine which binding mode to use.\n     let explicit_ref = some_pat.contains_explicit_ref_binding();\n-    let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n+    let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then_some(ty_mutability));\n \n     let as_ref_str = match binding_ref {\n         Some(Mutability::Mut) => \".as_mut()\","}, {"sha": "61d28b15066443a303f2fec7cf3025542bc120fc", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n             normalized_pats[i + 1..]\n                 .iter()\n                 .enumerate()\n-                .find_map(|(j, other)| pat.has_overlapping_values(other).then(|| i + 1 + j))\n+                .find_map(|(j, other)| pat.has_overlapping_values(other).then_some(i + 1 + j))\n                 .unwrap_or(normalized_pats.len())\n         })\n         .collect();\n@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 .zip(forwards_blocking_idxs[..i].iter().copied().rev())\n                 .skip_while(|&(_, forward_block)| forward_block > i)\n                 .find_map(|((j, other), forward_block)| {\n-                    (forward_block == i || pat.has_overlapping_values(other)).then(|| j)\n+                    (forward_block == i || pat.has_overlapping_values(other)).then_some(j)\n                 })\n                 .unwrap_or(0)\n         })"}, {"sha": "5c996bc33f3ebd0dd4a166cf5c98dad5213f9811", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -1061,7 +1061,7 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n     let start = scrutinee_span.hi();\n     let mut arm_spans = arms.iter().map(|arm| {\n         let data = arm.span.data();\n-        (data.ctxt == SyntaxContext::root()).then(|| (data.lo, data.hi))\n+        (data.ctxt == SyntaxContext::root()).then_some((data.lo, data.hi))\n     });\n     let end = e.span.hi();\n \n@@ -1095,7 +1095,7 @@ fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, ar\n             parent: None,\n         }\n         .span();\n-        (!span_contains_cfg(cx, span)).then(|| next_start).ok_or(())\n+        (!span_contains_cfg(cx, span)).then_some(next_start).ok_or(())\n     });\n     match found {\n         Ok(start) => {"}, {"sha": "46d2fc493f81e19a5f6ba149a21ff150a75c0d8e", "filename": "clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -43,7 +43,7 @@ fn parse_repeat_arg(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<RepeatKind> {\n             Some(RepeatKind::String)\n         } else {\n             let ty = ty.peel_refs();\n-            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then(|| RepeatKind::String)\n+            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)).then_some(RepeatKind::String)\n         }\n     }\n }"}, {"sha": "29ec6e042863b35f45123694f24d8f7f745f1639", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -2737,6 +2737,12 @@ impl Methods {\n                     }\n                 },\n                 (\"take\", []) => needless_option_take::check(cx, expr, recv),\n+                (\"then\", [arg]) => {\n+                    if !meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n+                        return;\n+                    }\n+                    unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\");\n+                },\n                 (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                     implicit_clone::check(cx, name, expr, recv);\n                 },"}, {"sha": "a9c641b46068371161a13c6b701a9f1cb7ba218f", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -20,8 +20,9 @@ pub(super) fn check<'tcx>(\n ) {\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+    let is_bool = cx.typeck_results().expr_ty(recv).is_bool();\n \n-    if is_option || is_result {\n+    if is_option || is_result || is_bool {\n         if let hir::ExprKind::Closure { body, .. } = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n@@ -33,8 +34,10 @@ pub(super) fn check<'tcx>(\n             if eager_or_lazy::switch_to_eager_eval(cx, body_expr) {\n                 let msg = if is_option {\n                     \"unnecessary closure used to substitute value for `Option::None`\"\n-                } else {\n+                } else if is_result {\n                     \"unnecessary closure used to substitute value for `Result::Err`\"\n+                } else {\n+                    \"unnecessary closure used with `bool::then`\"\n                 };\n                 let applicability = if body\n                     .params"}, {"sha": "44f153cffac511401f43c871690590fd3d29da43", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -146,7 +146,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n                 });\n                 if let ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(local_id), .. })) = e.kind {\n                     match some_captures.get(local_id)\n-                        .or_else(|| (method_sugg == \"map_or_else\").then(|| ()).and_then(|_| none_captures.get(local_id)))\n+                        .or_else(|| (method_sugg == \"map_or_else\").then_some(()).and_then(|_| none_captures.get(local_id)))\n                     {\n                         Some(CaptureKind::Value | CaptureKind::Ref(Mutability::Mut)) => return None,\n                         Some(CaptureKind::Ref(Mutability::Not)) if as_mut => return None,"}, {"sha": "8bacc6f6b32311c829f1012639b5f0bf9bee5910", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -501,7 +501,7 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n             .iter()\n             .filter_map(get_rptr_lm)\n             .filter(|&(lt, _, _)| lt.name == out.name)\n-            .map(|(_, mutability, span)| (mutability == Mutability::Not).then(|| span))\n+            .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n         if let Some(args) = args\n             && !args.is_empty()"}, {"sha": "3cbbda80f3a9fc6d11de47e6baea4481aea61c36", "filename": "clippy_lints/src/swap_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -73,7 +73,7 @@ fn is_ptr_to_ref(cx: &LateContext<'_>, e: &Expr<'_>, ctxt: SyntaxContext) -> (bo\n         && let ExprKind::Unary(UnOp::Deref, derefed_expr) = borrowed_expr.kind\n         && cx.typeck_results().expr_ty(derefed_expr).is_unsafe_ptr()\n     {\n-        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then(|| derefed_expr.span))\n+        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then_some(derefed_expr.span))\n     } else {\n         (false, None)\n     }"}, {"sha": "3010fc0223cebe34b8c5df9daba7776b6ffa3a7c", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -843,7 +843,7 @@ fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n fn get_lint_level_from_group(lint_group: &str) -> Option<&'static str> {\n     DEFAULT_LINT_LEVELS\n         .iter()\n-        .find_map(|(group_name, group_level)| (*group_name == lint_group).then(|| *group_level))\n+        .find_map(|(group_name, group_level)| (*group_name == lint_group).then_some(*group_level))\n }\n \n pub(super) fn is_deprecated_lint(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {"}, {"sha": "08b8894752011c86a51f8ea36aa15eba82a19cd8", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -515,7 +515,7 @@ impl Write {\n             args.push(arg, span);\n         }\n \n-        parser.errors.is_empty().then(move || args)\n+        parser.errors.is_empty().then_some(args)\n     }\n \n     /// Checks the arguments of `print[ln]!` and `write[ln]!` calls. It will return a tuple of two"}, {"sha": "0e7393036833c6ef4f59f6403bbc5e35a928426d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -1016,7 +1016,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n         captures: HirIdMap::default(),\n     };\n     v.visit_expr(expr);\n-    v.allow_closure.then(|| v.captures)\n+    v.allow_closure.then_some(v.captures)\n }\n \n /// Returns the method names and argument list of nested method call expressions that make up"}, {"sha": "9e238c6f1ac0ef84a8883d8d6c84d695ccd28cfd", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -12,6 +12,7 @@ macro_rules! msrv_aliases {\n \n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n+    1,62,0 { BOOL_THEN_SOME }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }"}, {"sha": "1197fe914de46853dd3dcdde12daec9a6097fbcc", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -353,7 +353,7 @@ pub fn snippet_with_context<'a>(\n /// span containing `m!(0)`.\n pub fn walk_span_to_context(span: Span, outer: SyntaxContext) -> Option<Span> {\n     let outer_span = hygiene::walk_chain(span, outer);\n-    (outer_span.ctxt() == outer).then(|| outer_span)\n+    (outer_span.ctxt() == outer).then_some(outer_span)\n }\n \n /// Removes block comments from the given `Vec` of lines."}, {"sha": "eed817968832193aa2d7588043480134c3e04d13", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or(2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert(2);\n     let _ = opt.ok_or(2);\n     let _ = nested_tuple_opt.unwrap_or(Some((1, 2)));\n+    let _ = cond.then_some(astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or(2);"}, {"sha": "1588db79b38a8c2345a5a623466a705998fedb97", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or_else(|| 2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert_with(|| 2);\n     let _ = opt.ok_or_else(|| 2);\n     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n+    let _ = cond.then(|| astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or_else(|| 2);"}, {"sha": "83dc7fd832c38f8a7974f6175fbb3ac91fd8a179", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f93d418f1789a5782053e99038db7d6701c8a30c/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=f93d418f1789a5782053e99038db7d6701c8a30c", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:35:13\n+  --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,255 +9,263 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:38:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:39:13\n+  --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:40:13\n+  --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:41:13\n+  --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:42:13\n+  --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:13\n+  --> $DIR/unnecessary_lazy_eval.rs:45:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n+error: unnecessary closure used with `bool::then`\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n+   |\n+LL |     let _ = cond.then(|| astronomers_pi);\n+   |             ^^^^^-----------------------\n+   |                  |\n+   |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n+\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:47:13\n+  --> $DIR/unnecessary_lazy_eval.rs:49:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:28\n+  --> $DIR/unnecessary_lazy_eval.rs:51:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:52:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:35\n+  --> $DIR/unnecessary_lazy_eval.rs:53:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:28\n+  --> $DIR/unnecessary_lazy_eval.rs:54:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:56:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:59:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:59:13\n+  --> $DIR/unnecessary_lazy_eval.rs:61:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:79:28\n+  --> $DIR/unnecessary_lazy_eval.rs:81:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:80:13\n+  --> $DIR/unnecessary_lazy_eval.rs:82:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:81:13\n+  --> $DIR/unnecessary_lazy_eval.rs:83:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:87:13\n+  --> $DIR/unnecessary_lazy_eval.rs:89:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:88:13\n+  --> $DIR/unnecessary_lazy_eval.rs:90:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:89:13\n+  --> $DIR/unnecessary_lazy_eval.rs:91:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:111:35\n+  --> $DIR/unnecessary_lazy_eval.rs:113:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:112:35\n+  --> $DIR/unnecessary_lazy_eval.rs:114:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:113:35\n+  --> $DIR/unnecessary_lazy_eval.rs:115:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:115:35\n+  --> $DIR/unnecessary_lazy_eval.rs:117:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:116:35\n+  --> $DIR/unnecessary_lazy_eval.rs:118:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:117:35\n+  --> $DIR/unnecessary_lazy_eval.rs:119:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:118:35\n+  --> $DIR/unnecessary_lazy_eval.rs:120:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^\n@@ -271,5 +279,5 @@ LL | |         or_else(|_| Ok(ext_str.some_field));\n    |           |\n    |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 34 previous errors\n "}]}