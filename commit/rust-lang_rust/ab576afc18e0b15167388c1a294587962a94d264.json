{"sha": "ab576afc18e0b15167388c1a294587962a94d264", "node_id": "C_kwDOAAsO6NoAKGFiNTc2YWZjMThlMGIxNTE2NzM4OGMxYTI5NDU4Nzk2MmE5NGQyNjQ", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-11-27T15:34:13Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-11-27T15:34:13Z"}, "message": "addressed review feedback", "tree": {"sha": "6b7058829a0f78c1f3c2c8eaa7c0ac4db7a8a3ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7058829a0f78c1f3c2c8eaa7c0ac4db7a8a3ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab576afc18e0b15167388c1a294587962a94d264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab576afc18e0b15167388c1a294587962a94d264", "html_url": "https://github.com/rust-lang/rust/commit/ab576afc18e0b15167388c1a294587962a94d264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab576afc18e0b15167388c1a294587962a94d264/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "html_url": "https://github.com/rust-lang/rust/commit/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4"}], "stats": {"total": 1288, "additions": 18, "deletions": 1270}, "files": [{"sha": "f0995a81329d93f30db25ccdf800ae8467c1c787", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -321,13 +321,6 @@ fn check_uninlined_args(\n                 Applicability::MachineApplicable,\n                 if multiline_fix { CompletelyHidden } else { ShowCode },\n             );\n-            if ignore_mixed {\n-                // Improve lint config discoverability\n-                diag.note_once(\n-                    \"this lint can also fix mixed format arg inlining if \\\n-                    `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\",\n-                );\n-            }\n         },\n     );\n }"}, {"sha": "8ea631f2bbd420fd20795fde30cf81e1bd939d80", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/auxiliary/proc_macro_with_span.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -1,32 +0,0 @@\n-// compile-flags: --emit=link\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::{token_stream::IntoIter, Group, Span, TokenStream, TokenTree};\n-\n-#[proc_macro]\n-pub fn with_span(input: TokenStream) -> TokenStream {\n-    let mut iter = input.into_iter();\n-    let span = iter.next().unwrap().span();\n-    let mut res = TokenStream::new();\n-    write_with_span(span, iter, &mut res);\n-    res\n-}\n-\n-fn write_with_span(s: Span, input: IntoIter, out: &mut TokenStream) {\n-    for mut tt in input {\n-        if let TokenTree::Group(g) = tt {\n-            let mut stream = TokenStream::new();\n-            write_with_span(s, g.stream().into_iter(), &mut stream);\n-            let mut group = Group::new(g.delimiter(), stream);\n-            group.set_span(s);\n-            out.extend([TokenTree::Group(group)]);\n-        } else {\n-            tt.set_span(s);\n-            out.extend([tt]);\n-        }\n-    }\n-}"}, {"sha": "aa8b45b5fe7d428bbabd2af16bf8e104aa34b385", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.fixed", "status": "modified", "additions": 2, "deletions": 165, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -1,177 +1,14 @@\n-// aux-build:proc_macro_with_span.rs\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n-#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n-#![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n-\n-macro_rules! no_param_str {\n-    () => {\n-        \"{}\"\n-    };\n-}\n-\n-macro_rules! my_println {\n-   ($($args:tt),*) => {{\n-        println!($($args),*)\n-    }};\n-}\n-\n-macro_rules! my_println_args {\n-    ($($args:tt),*) => {{\n-        println!(\"foo: {}\", format_args!($($args),*))\n-    }};\n-}\n-\n-fn tester(fn_arg: i32) {\n+fn main() {\n     let local_i32 = 1;\n     let local_f64 = 2.0;\n     let local_opt: Option<i32> = Some(3);\n-    let width = 4;\n-    let prec = 5;\n-    let val = 6;\n-\n-    // make sure this file hasn't been corrupted with tabs converted to spaces\n-    // let _ = '\t';  // <- this is a single tab character\n-    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n \n     println!(\"val='{local_i32}'\");\n-    println!(\"val='{local_i32}'\"); // 3 spaces\n-    println!(\"val='{local_i32}'\"); // tab\n-    println!(\"val='{local_i32}'\"); // space+tab\n-    println!(\"val='{local_i32}'\"); // tab+space\n-    println!(\n-        \"val='{local_i32}'\"\n-    );\n-    println!(\"{local_i32}\");\n-    println!(\"{fn_arg}\");\n-    println!(\"{local_i32:?}\");\n-    println!(\"{local_i32:#?}\");\n-    println!(\"{local_i32:4}\");\n-    println!(\"{local_i32:04}\");\n-    println!(\"{local_i32:<3}\");\n-    println!(\"{local_i32:#010x}\");\n-    println!(\"{local_f64:.1}\");\n-    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+    println!(\"Hello x is {local_f64:.local_i32$}\");\n     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-    println!(\"{local_i32} {local_f64}\");\n     println!(\"{local_i32}, {}\", local_opt.unwrap());\n-    println!(\"{val}\");\n-    println!(\"{val}\");\n-    println!(\"{} {1}\", local_i32, 42);\n-    println!(\"val='{local_i32}'\");\n-    println!(\"val='{local_i32}'\");\n-    println!(\"val='{local_i32}'\");\n-    println!(\"val='{fn_arg}'\");\n-    println!(\"{local_i32}\");\n-    println!(\"{local_i32:?}\");\n-    println!(\"{local_i32:#?}\");\n-    println!(\"{local_i32:04}\");\n-    println!(\"{local_i32:<3}\");\n-    println!(\"{local_i32:#010x}\");\n-    println!(\"{local_f64:.1}\");\n-    println!(\"{local_i32} {local_i32}\");\n-    println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n-    println!(\"{local_i32} {local_f64}\");\n-    println!(\"{local_f64} {local_i32}\");\n-    println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n-    println!(\"{1} {0}\", \"str\", local_i32);\n-    println!(\"{local_i32}\");\n-    println!(\"{local_i32:width$}\");\n-    println!(\"{local_i32:width$}\");\n-    println!(\"{local_i32:.prec$}\");\n-    println!(\"{local_i32:.prec$}\");\n-    println!(\"{val:val$}\");\n-    println!(\"{val:val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{val:val$.val$}\");\n-    println!(\"{width:width$}\");\n-    println!(\"{local_i32:width$}\");\n-    println!(\"{width:width$}\");\n-    println!(\"{local_i32:width$}\");\n-    println!(\"{prec:.prec$}\");\n-    println!(\"{local_i32:.prec$}\");\n-    println!(\"{prec:.prec$}\");\n-    println!(\"{local_i32:.prec$}\");\n-    println!(\"{width:width$.prec$}\");\n-    println!(\"{width:width$.prec$}\");\n-    println!(\"{local_f64:width$.prec$}\");\n-    println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n-    println!(\n-        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n-    );\n-    println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n-        local_i32,\n-        width,\n-        prec,\n-        1 + 2\n-    );\n-    println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n-    println!(\"{local_i32:width$.prec$}\");\n-    println!(\"{width:width$.prec$}\");\n-    println!(\"{}\", format!(\"{local_i32}\"));\n-    my_println!(\"{}\", local_i32);\n-    my_println_args!(\"{}\", local_i32);\n-\n-    // these should NOT be modified by the lint\n-    println!(concat!(\"nope \", \"{}\"), local_i32);\n-    println!(\"val='{local_i32}'\");\n-    println!(\"val='{local_i32 }'\");\n-    println!(\"val='{local_i32\t}'\"); // with tab\n-    println!(\"val='{local_i32\\n}'\");\n-    println!(\"{}\", usize::MAX);\n-    println!(\"{}\", local_opt.unwrap());\n-    println!(\n-        \"val='{local_i32\n-    }'\"\n-    );\n-    println!(no_param_str!(), local_i32);\n-\n-    println!(\n-        \"{val}\",\n-    );\n-    println!(\"{val}\");\n-\n-    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n-    println!(\"{}\", with_span!(span val));\n-\n-    if local_i32 > 0 {\n-        panic!(\"p1 {local_i32}\");\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p2 {local_i32}\");\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p3 {local_i32}\");\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p4 {local_i32}\");\n-    }\n-}\n-\n-fn main() {\n-    tester(42);\n-}\n-\n-fn _under_msrv() {\n-    #![clippy::msrv = \"1.57\"]\n-    let local_i32 = 1;\n-    println!(\"don't expand='{}'\", local_i32);\n-}\n-\n-fn _meets_msrv() {\n-    #![clippy::msrv = \"1.58\"]\n-    let local_i32 = 1;\n-    println!(\"expand='{local_i32}'\");\n }"}, {"sha": "ad2e4863ee8ed3ee5dfa4e05e10889e80ace2a42", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.rs", "status": "modified", "additions": 1, "deletions": 169, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -1,182 +1,14 @@\n-// aux-build:proc_macro_with_span.rs\n // run-rustfix\n-#![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n-#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n-#![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n-extern crate proc_macro_with_span;\n-use proc_macro_with_span::with_span;\n-\n-macro_rules! no_param_str {\n-    () => {\n-        \"{}\"\n-    };\n-}\n-\n-macro_rules! my_println {\n-   ($($args:tt),*) => {{\n-        println!($($args),*)\n-    }};\n-}\n-\n-macro_rules! my_println_args {\n-    ($($args:tt),*) => {{\n-        println!(\"foo: {}\", format_args!($($args),*))\n-    }};\n-}\n-\n-fn tester(fn_arg: i32) {\n+fn main() {\n     let local_i32 = 1;\n     let local_f64 = 2.0;\n     let local_opt: Option<i32> = Some(3);\n-    let width = 4;\n-    let prec = 5;\n-    let val = 6;\n-\n-    // make sure this file hasn't been corrupted with tabs converted to spaces\n-    // let _ = '\t';  // <- this is a single tab character\n-    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n \n     println!(\"val='{}'\", local_i32);\n-    println!(\"val='{   }'\", local_i32); // 3 spaces\n-    println!(\"val='{\t}'\", local_i32); // tab\n-    println!(\"val='{ \t}'\", local_i32); // space+tab\n-    println!(\"val='{\t }'\", local_i32); // tab+space\n-    println!(\n-        \"val='{\n-    }'\",\n-        local_i32\n-    );\n-    println!(\"{}\", local_i32);\n-    println!(\"{}\", fn_arg);\n-    println!(\"{:?}\", local_i32);\n-    println!(\"{:#?}\", local_i32);\n-    println!(\"{:4}\", local_i32);\n-    println!(\"{:04}\", local_i32);\n-    println!(\"{:<3}\", local_i32);\n-    println!(\"{:#010x}\", local_i32);\n-    println!(\"{:.1}\", local_f64);\n     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-    println!(\"{} {}\", local_i32, local_f64);\n     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-    println!(\"{}\", val);\n-    println!(\"{}\", v = val);\n-    println!(\"{} {1}\", local_i32, 42);\n-    println!(\"val='{\\t }'\", local_i32);\n-    println!(\"val='{\\n }'\", local_i32);\n-    println!(\"val='{local_i32}'\", local_i32 = local_i32);\n-    println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n-    println!(\"{0}\", local_i32);\n-    println!(\"{0:?}\", local_i32);\n-    println!(\"{0:#?}\", local_i32);\n-    println!(\"{0:04}\", local_i32);\n-    println!(\"{0:<3}\", local_i32);\n-    println!(\"{0:#010x}\", local_i32);\n-    println!(\"{0:.1}\", local_f64);\n-    println!(\"{0} {0}\", local_i32);\n-    println!(\"{1} {} {0} {}\", local_i32, local_f64);\n-    println!(\"{0} {1}\", local_i32, local_f64);\n-    println!(\"{1} {0}\", local_i32, local_f64);\n-    println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n-    println!(\"{1} {0}\", \"str\", local_i32);\n-    println!(\"{v}\", v = local_i32);\n-    println!(\"{local_i32:0$}\", width);\n-    println!(\"{local_i32:w$}\", w = width);\n-    println!(\"{local_i32:.0$}\", prec);\n-    println!(\"{local_i32:.p$}\", p = prec);\n-    println!(\"{:0$}\", v = val);\n-    println!(\"{0:0$}\", v = val);\n-    println!(\"{:0$.0$}\", v = val);\n-    println!(\"{0:0$.0$}\", v = val);\n-    println!(\"{0:0$.v$}\", v = val);\n-    println!(\"{0:v$.0$}\", v = val);\n-    println!(\"{v:0$.0$}\", v = val);\n-    println!(\"{v:v$.0$}\", v = val);\n-    println!(\"{v:0$.v$}\", v = val);\n-    println!(\"{v:v$.v$}\", v = val);\n-    println!(\"{:0$}\", width);\n-    println!(\"{:1$}\", local_i32, width);\n-    println!(\"{:w$}\", w = width);\n-    println!(\"{:w$}\", local_i32, w = width);\n-    println!(\"{:.0$}\", prec);\n-    println!(\"{:.1$}\", local_i32, prec);\n-    println!(\"{:.p$}\", p = prec);\n-    println!(\"{:.p$}\", local_i32, p = prec);\n-    println!(\"{:0$.1$}\", width, prec);\n-    println!(\"{:0$.w$}\", width, w = prec);\n-    println!(\"{:1$.2$}\", local_f64, width, prec);\n-    println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n-    println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-        local_i32, width, prec,\n-    );\n-    println!(\n-        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n-        local_i32,\n-        width,\n-        prec,\n-        1 + 2\n-    );\n-    println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n-    println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n-    println!(\"{:w$.p$}\", w = width, p = prec);\n-    println!(\"{}\", format!(\"{}\", local_i32));\n-    my_println!(\"{}\", local_i32);\n-    my_println_args!(\"{}\", local_i32);\n-\n-    // these should NOT be modified by the lint\n-    println!(concat!(\"nope \", \"{}\"), local_i32);\n-    println!(\"val='{local_i32}'\");\n-    println!(\"val='{local_i32 }'\");\n-    println!(\"val='{local_i32\t}'\"); // with tab\n-    println!(\"val='{local_i32\\n}'\");\n-    println!(\"{}\", usize::MAX);\n-    println!(\"{}\", local_opt.unwrap());\n-    println!(\n-        \"val='{local_i32\n-    }'\"\n-    );\n-    println!(no_param_str!(), local_i32);\n-\n-    println!(\n-        \"{}\",\n-        // comment with a comma , in it\n-        val,\n-    );\n-    println!(\"{}\", /* comment with a comma , in it */ val);\n-\n-    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n-    println!(\"{}\", with_span!(span val));\n-\n-    if local_i32 > 0 {\n-        panic!(\"p1 {}\", local_i32);\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p2 {0}\", local_i32);\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n-    }\n-    if local_i32 > 0 {\n-        panic!(\"p4 {local_i32}\");\n-    }\n-}\n-\n-fn main() {\n-    tester(42);\n-}\n-\n-fn _under_msrv() {\n-    #![clippy::msrv = \"1.57\"]\n-    let local_i32 = 1;\n-    println!(\"don't expand='{}'\", local_i32);\n-}\n-\n-fn _meets_msrv() {\n-    #![clippy::msrv = \"1.58\"]\n-    let local_i32 = 1;\n-    println!(\"expand='{}'\", local_i32);\n }"}, {"sha": "ee941762196151209d43f978516dc2024801d0ed", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.stderr", "status": "modified", "additions": 14, "deletions": 846, "changes": 860, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -1,5 +1,5 @@\n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:41:5\n+  --> $DIR/uninlined_format_args.rs:9:5\n    |\n LL |     println!(\"val='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,174 +11,21 @@ LL -     println!(\"val='{}'\", local_i32);\n LL +     println!(\"val='{local_i32}'\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:42:5\n-   |\n-LL |     println!(\"val='{   }'\", local_i32); // 3 spaces\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{   }'\", local_i32); // 3 spaces\n-LL +     println!(\"val='{local_i32}'\"); // 3 spaces\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:43:5\n-   |\n-LL |     println!(\"val='{    }'\", local_i32); // tab\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{    }'\", local_i32); // tab\n-LL +     println!(\"val='{local_i32}'\"); // tab\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:44:5\n-   |\n-LL |     println!(\"val='{     }'\", local_i32); // space+tab\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{     }'\", local_i32); // space+tab\n-LL +     println!(\"val='{local_i32}'\"); // space+tab\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:45:5\n-   |\n-LL |     println!(\"val='{     }'\", local_i32); // tab+space\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{     }'\", local_i32); // tab+space\n-LL +     println!(\"val='{local_i32}'\"); // tab+space\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:46:5\n-   |\n-LL | /     println!(\n-LL | |         \"val='{\n-LL | |     }'\",\n-LL | |         local_i32\n-LL | |     );\n-   | |_____^\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:51:5\n-   |\n-LL |     println!(\"{}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", local_i32);\n-LL +     println!(\"{local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:52:5\n-   |\n-LL |     println!(\"{}\", fn_arg);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", fn_arg);\n-LL +     println!(\"{fn_arg}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:53:5\n-   |\n-LL |     println!(\"{:?}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+error: literal with an empty format string\n+  --> $DIR/uninlined_format_args.rs:10:35\n    |\n-help: change this to\n-   |\n-LL -     println!(\"{:?}\", local_i32);\n-LL +     println!(\"{local_i32:?}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:54:5\n-   |\n-LL |     println!(\"{:#?}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:#?}\", local_i32);\n-LL +     println!(\"{local_i32:#?}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:55:5\n-   |\n-LL |     println!(\"{:4}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:4}\", local_i32);\n-LL +     println!(\"{local_i32:4}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:56:5\n-   |\n-LL |     println!(\"{:04}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:04}\", local_i32);\n-LL +     println!(\"{local_i32:04}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:57:5\n-   |\n-LL |     println!(\"{:<3}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:<3}\", local_i32);\n-LL +     println!(\"{local_i32:<3}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:58:5\n-   |\n-LL |     println!(\"{:#010x}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:#010x}\", local_i32);\n-LL +     println!(\"{local_i32:#010x}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:59:5\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |                                   ^^^\n    |\n-LL |     println!(\"{:.1}\", local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n+help: try this\n    |\n-help: change this to\n-   |\n-LL -     println!(\"{:.1}\", local_f64);\n-LL +     println!(\"{local_f64:.1}\");\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello x is {:.*}\", local_i32, local_f64);\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:60:5\n+  --> $DIR/uninlined_format_args.rs:10:5\n    |\n LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -190,7 +37,7 @@ LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:61:5\n+  --> $DIR/uninlined_format_args.rs:11:5\n    |\n LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -202,7 +49,7 @@ LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:62:5\n+  --> $DIR/uninlined_format_args.rs:12:5\n    |\n LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -214,19 +61,7 @@ LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:63:5\n-   |\n-LL |     println!(\"{} {}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{} {}\", local_i32, local_f64);\n-LL +     println!(\"{local_i32} {local_f64}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:64:5\n+  --> $DIR/uninlined_format_args.rs:13:5\n    |\n LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -237,672 +72,5 @@ LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:65:5\n-   |\n-LL |     println!(\"{}\", val);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", val);\n-LL +     println!(\"{val}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:66:5\n-   |\n-LL |     println!(\"{}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", v = val);\n-LL +     println!(\"{val}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:68:5\n-   |\n-LL |     println!(\"val='{/t }'\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{/t }'\", local_i32);\n-LL +     println!(\"val='{local_i32}'\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:69:5\n-   |\n-LL |     println!(\"val='{/n }'\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{/n }'\", local_i32);\n-LL +     println!(\"val='{local_i32}'\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:70:5\n-   |\n-LL |     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n-LL +     println!(\"val='{local_i32}'\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:71:5\n-   |\n-LL |     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n-LL +     println!(\"val='{fn_arg}'\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:72:5\n-   |\n-LL |     println!(\"{0}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0}\", local_i32);\n-LL +     println!(\"{local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:73:5\n-   |\n-LL |     println!(\"{0:?}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:?}\", local_i32);\n-LL +     println!(\"{local_i32:?}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:74:5\n-   |\n-LL |     println!(\"{0:#?}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:#?}\", local_i32);\n-LL +     println!(\"{local_i32:#?}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:75:5\n-   |\n-LL |     println!(\"{0:04}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:04}\", local_i32);\n-LL +     println!(\"{local_i32:04}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:76:5\n-   |\n-LL |     println!(\"{0:<3}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:<3}\", local_i32);\n-LL +     println!(\"{local_i32:<3}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:77:5\n-   |\n-LL |     println!(\"{0:#010x}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:#010x}\", local_i32);\n-LL +     println!(\"{local_i32:#010x}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:78:5\n-   |\n-LL |     println!(\"{0:.1}\", local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:.1}\", local_f64);\n-LL +     println!(\"{local_f64:.1}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:79:5\n-   |\n-LL |     println!(\"{0} {0}\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0} {0}\", local_i32);\n-LL +     println!(\"{local_i32} {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:80:5\n-   |\n-LL |     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n-LL +     println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:81:5\n-   |\n-LL |     println!(\"{0} {1}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0} {1}\", local_i32, local_f64);\n-LL +     println!(\"{local_i32} {local_f64}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:82:5\n-   |\n-LL |     println!(\"{1} {0}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{1} {0}\", local_i32, local_f64);\n-LL +     println!(\"{local_f64} {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:83:5\n-   |\n-LL |     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n-LL +     println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:85:5\n-   |\n-LL |     println!(\"{v}\", v = local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{v}\", v = local_i32);\n-LL +     println!(\"{local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:86:5\n-   |\n-LL |     println!(\"{local_i32:0$}\", width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{local_i32:0$}\", width);\n-LL +     println!(\"{local_i32:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:87:5\n-   |\n-LL |     println!(\"{local_i32:w$}\", w = width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{local_i32:w$}\", w = width);\n-LL +     println!(\"{local_i32:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:88:5\n-   |\n-LL |     println!(\"{local_i32:.0$}\", prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{local_i32:.0$}\", prec);\n-LL +     println!(\"{local_i32:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:89:5\n-   |\n-LL |     println!(\"{local_i32:.p$}\", p = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{local_i32:.p$}\", p = prec);\n-LL +     println!(\"{local_i32:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:90:5\n-   |\n-LL |     println!(\"{:0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:0$}\", v = val);\n-LL +     println!(\"{val:val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:91:5\n-   |\n-LL |     println!(\"{0:0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:0$}\", v = val);\n-LL +     println!(\"{val:val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:92:5\n-   |\n-LL |     println!(\"{:0$.0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:0$.0$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:93:5\n-   |\n-LL |     println!(\"{0:0$.0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:0$.0$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:94:5\n-   |\n-LL |     println!(\"{0:0$.v$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:0$.v$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:95:5\n-   |\n-LL |     println!(\"{0:v$.0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{0:v$.0$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:96:5\n-   |\n-LL |     println!(\"{v:0$.0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{v:0$.0$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:97:5\n-   |\n-LL |     println!(\"{v:v$.0$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{v:v$.0$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:98:5\n-   |\n-LL |     println!(\"{v:0$.v$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{v:0$.v$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:99:5\n-   |\n-LL |     println!(\"{v:v$.v$}\", v = val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{v:v$.v$}\", v = val);\n-LL +     println!(\"{val:val$.val$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:100:5\n-   |\n-LL |     println!(\"{:0$}\", width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:0$}\", width);\n-LL +     println!(\"{width:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:101:5\n-   |\n-LL |     println!(\"{:1$}\", local_i32, width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:1$}\", local_i32, width);\n-LL +     println!(\"{local_i32:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:102:5\n-   |\n-LL |     println!(\"{:w$}\", w = width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:w$}\", w = width);\n-LL +     println!(\"{width:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:103:5\n-   |\n-LL |     println!(\"{:w$}\", local_i32, w = width);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:w$}\", local_i32, w = width);\n-LL +     println!(\"{local_i32:width$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:104:5\n-   |\n-LL |     println!(\"{:.0$}\", prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:.0$}\", prec);\n-LL +     println!(\"{prec:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:105:5\n-   |\n-LL |     println!(\"{:.1$}\", local_i32, prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:.1$}\", local_i32, prec);\n-LL +     println!(\"{local_i32:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:106:5\n-   |\n-LL |     println!(\"{:.p$}\", p = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:.p$}\", p = prec);\n-LL +     println!(\"{prec:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:107:5\n-   |\n-LL |     println!(\"{:.p$}\", local_i32, p = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:.p$}\", local_i32, p = prec);\n-LL +     println!(\"{local_i32:.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:108:5\n-   |\n-LL |     println!(\"{:0$.1$}\", width, prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:0$.1$}\", width, prec);\n-LL +     println!(\"{width:width$.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:109:5\n-   |\n-LL |     println!(\"{:0$.w$}\", width, w = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:0$.w$}\", width, w = prec);\n-LL +     println!(\"{width:width$.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:110:5\n-   |\n-LL |     println!(\"{:1$.2$}\", local_f64, width, prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:1$.2$}\", local_f64, width, prec);\n-LL +     println!(\"{local_f64:width$.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:111:5\n-   |\n-LL |     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n-LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:112:5\n-   |\n-LL | /     println!(\n-LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n-LL | |         local_i32, width, prec,\n-LL | |     );\n-   | |_____^\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:123:5\n-   |\n-LL |     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n-LL +     println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:124:5\n-   |\n-LL |     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n-LL +     println!(\"{local_i32:width$.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:125:5\n-   |\n-LL |     println!(\"{:w$.p$}\", w = width, p = prec);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{:w$.p$}\", w = width, p = prec);\n-LL +     println!(\"{width:width$.prec$}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:126:20\n-   |\n-LL |     println!(\"{}\", format!(\"{}\", local_i32));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", format!(\"{}\", local_i32));\n-LL +     println!(\"{}\", format!(\"{local_i32}\"));\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:144:5\n-   |\n-LL | /     println!(\n-LL | |         \"{}\",\n-LL | |         // comment with a comma , in it\n-LL | |         val,\n-LL | |     );\n-   | |_____^\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:149:5\n-   |\n-LL |     println!(\"{}\", /* comment with a comma , in it */ val);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}\", /* comment with a comma , in it */ val);\n-LL +     println!(\"{val}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:155:9\n-   |\n-LL |         panic!(\"p1 {}\", local_i32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -         panic!(\"p1 {}\", local_i32);\n-LL +         panic!(\"p1 {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:158:9\n-   |\n-LL |         panic!(\"p2 {0}\", local_i32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -         panic!(\"p2 {0}\", local_i32);\n-LL +         panic!(\"p2 {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:161:9\n-   |\n-LL |         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n-LL +         panic!(\"p3 {local_i32}\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:181:5\n-   |\n-LL |     println!(\"expand='{}'\", local_i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"expand='{}'\", local_i32);\n-LL +     println!(\"expand='{local_i32}'\");\n-   |\n-\n-error: aborting due to 76 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "a12abf8bef8af07bb4d53ab4f8227b26e6fd9a80", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -177,42 +177,6 @@ LL -     println!(\"{:.1}\", local_f64);\n LL +     println!(\"{local_f64:.1}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:59:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:60:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:61:5\n-   |\n-LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:62:5\n    |\n@@ -225,18 +189,6 @@ LL -     println!(\"{} {}\", local_i32, local_f64);\n LL +     println!(\"{local_i32} {local_f64}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:63:5\n-   |\n-LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:64:5\n    |\n@@ -904,5 +856,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 72 previous errors\n "}, {"sha": "2c8061259229a83f8f82609b7800cb12c226fabe", "filename": "tests/ui/uninlined_format_args_panic.edition2018.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -4,7 +4,6 @@ error: variables can be used directly in the `format!` string\n LL |     println!(\"val='{}'\", var);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this lint can also fix mixed format arg inlining if `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\n    = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n help: change this to\n    |"}, {"sha": "0f09c45f41324b94da38117a4d885deabe904c0f", "filename": "tests/ui/uninlined_format_args_panic.edition2021.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab576afc18e0b15167388c1a294587962a94d264/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr?ref=ab576afc18e0b15167388c1a294587962a94d264", "patch": "@@ -4,7 +4,6 @@ error: variables can be used directly in the `format!` string\n LL |     println!(\"val='{}'\", var);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this lint can also fix mixed format arg inlining if `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\n    = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n help: change this to\n    |"}]}