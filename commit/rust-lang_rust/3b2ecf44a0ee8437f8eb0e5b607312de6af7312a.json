{"sha": "3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "node_id": "C_kwDOAAsO6NoAKDNiMmVjZjQ0YTBlZTg0MzdmOGViMGU1YjYwNzMxMmRlNmFmNzMxMmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-31T17:27:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-31T17:27:34Z"}, "message": "Give variables more descriptive names", "tree": {"sha": "036693713533944b1afb846fe2cd1370f685c17b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036693713533944b1afb846fe2cd1370f685c17b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "html_url": "https://github.com/rust-lang/rust/commit/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31f3605cea39530cb6b5b1c89934b174c886f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31f3605cea39530cb6b5b1c89934b174c886f49", "html_url": "https://github.com/rust-lang/rust/commit/d31f3605cea39530cb6b5b1c89934b174c886f49"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "8a6bb929c3df7bd660e2fcd5995b8e38b61bcfc0", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2ecf44a0ee8437f8eb0e5b607312de6af7312a/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3b2ecf44a0ee8437f8eb0e5b607312de6af7312a", "patch": "@@ -1055,7 +1055,7 @@ impl DefCollector<'_> {\n         };\n         let mut res = ReachedFixedPoint::Yes;\n         macros.retain(|directive| {\n-            let resolver2 = |path| {\n+            let resolver = |path| {\n                 let resolved_res = self.def_map.resolve_path_fp_with_macro(\n                     self.db,\n                     ResolveMode::Other,\n@@ -1068,7 +1068,7 @@ impl DefCollector<'_> {\n                     .take_macros()\n                     .map(|it| (it, macro_id_to_def_id(self.db, it)))\n             };\n-            let resolver = |path| resolver2(path).map(|(_, it)| it);\n+            let resolver_def_id = |path| resolver(path).map(|(_, it)| it);\n \n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {\n@@ -1077,7 +1077,7 @@ impl DefCollector<'_> {\n                         ast_id,\n                         *expand_to,\n                         self.def_map.krate,\n-                        &resolver,\n+                        &resolver_def_id,\n                         &mut |_err| (),\n                     );\n                     if let Ok(Ok(call_id)) = call_id {\n@@ -1093,7 +1093,7 @@ impl DefCollector<'_> {\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver2,\n+                        &resolver,\n                     );\n \n                     if let Ok((macro_id, def_id, call_id)) = id {\n@@ -1158,7 +1158,7 @@ impl DefCollector<'_> {\n                         }\n                     }\n \n-                    let def = match resolver(path.clone()) {\n+                    let def = match resolver_def_id(path.clone()) {\n                         Some(def) if def.is_attribute() => def,\n                         _ => return true,\n                     };\n@@ -1292,7 +1292,8 @@ impl DefCollector<'_> {\n             true\n         });\n         // Attribute resolution can add unresolved macro invocations, so concatenate the lists.\n-        self.unresolved_macros.extend(macros);\n+        macros.extend(mem::take(&mut self.unresolved_macros));\n+        self.unresolved_macros = macros;\n \n         for (module_id, depth, container, macro_call_id) in resolved {\n             self.collect_macro_expansion(module_id, macro_call_id, depth, container);"}]}