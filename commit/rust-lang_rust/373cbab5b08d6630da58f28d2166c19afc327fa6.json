{"sha": "373cbab5b08d6630da58f28d2166c19afc327fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2NiYWI1YjA4ZDY2MzBkYTU4ZjI4ZDIxNjZjMTlhZmMzMjdmYTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:42:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:42:47Z"}, "message": "rollup merge of #20723: pnkfelix/feature-gate-box-syntax\n\nConflicts:\n\tsrc/compiletest/compiletest.rs\n\tsrc/libcollections/lib.rs\n\tsrc/libserialize/lib.rs\n\tsrc/libsyntax/feature_gate.rs", "tree": {"sha": "860d19575778256a9345ce33d5eeef6b54f91300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/860d19575778256a9345ce33d5eeef6b54f91300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373cbab5b08d6630da58f28d2166c19afc327fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373cbab5b08d6630da58f28d2166c19afc327fa6", "html_url": "https://github.com/rust-lang/rust/commit/373cbab5b08d6630da58f28d2166c19afc327fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373cbab5b08d6630da58f28d2166c19afc327fa6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11bfba71bb71e05ab93e1576a07a48269b13021", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11bfba71bb71e05ab93e1576a07a48269b13021", "html_url": "https://github.com/rust-lang/rust/commit/d11bfba71bb71e05ab93e1576a07a48269b13021"}, {"sha": "ae4bcd41e8014b6057fe0a328c87f32f917396ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4bcd41e8014b6057fe0a328c87f32f917396ba", "html_url": "https://github.com/rust-lang/rust/commit/ae4bcd41e8014b6057fe0a328c87f32f917396ba"}], "stats": {"total": 799, "additions": 784, "deletions": 15}, "files": [{"sha": "9a5665e68393473f4b0e9872de5a2f6c71d332c5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n #![crate_type = \"bin\"]\n-#![feature(slicing_syntax)]\n+#![allow(unknown_features)]\n+#![feature(slicing_syntax, unboxed_closures)]\n+#![feature(box_syntax)]\n \n #![deny(warnings)]\n "}, {"sha": "fdc3b52c4d32f0c375f17673c5d1a25575856f3d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -49,6 +49,15 @@ pub static HEAP: () = ();\n #[stable]\n pub struct Box<T>(Unique<T>);\n \n+#[unstable]\n+impl<T> Box<T> {\n+    /// Moves `x` into a freshly allocated box on the global exchange heap.\n+    #[unstable]\n+    pub fn new(x: T) -> Box<T> {\n+        box x\n+    }\n+}\n+\n #[stable]\n impl<T: Default> Default for Box<T> {\n     #[stable]\n@@ -186,36 +195,36 @@ impl<T: ?Sized> DerefMut for Box<T> {\n mod test {\n     #[test]\n     fn test_owned_clone() {\n-        let a = box 5i;\n+        let a = Box::new(5i);\n         let b: Box<int> = a.clone();\n         assert!(a == b);\n     }\n \n     #[test]\n     fn any_move() {\n-        let a = box 8u as Box<Any>;\n-        let b = box Test as Box<Any>;\n+        let a = Box::new(8u) as Box<Any>;\n+        let b = Box::new(Test) as Box<Any>;\n \n         match a.downcast::<uint>() {\n-            Ok(a) => { assert!(a == box 8u); }\n+            Ok(a) => { assert!(a == Box::new(8u)); }\n             Err(..) => panic!()\n         }\n         match b.downcast::<Test>() {\n-            Ok(a) => { assert!(a == box Test); }\n+            Ok(a) => { assert!(a == Box::new(Test)); }\n             Err(..) => panic!()\n         }\n \n-        let a = box 8u as Box<Any>;\n-        let b = box Test as Box<Any>;\n+        let a = Box::new(8u) as Box<Any>;\n+        let b = Box::new(Test) as Box<Any>;\n \n         assert!(a.downcast::<Box<Test>>().is_err());\n         assert!(b.downcast::<Box<uint>>().is_err());\n     }\n \n     #[test]\n     fn test_show() {\n-        let a = box 8u as Box<Any>;\n-        let b = box Test as Box<Any>;\n+        let a = Box::new(8u) as Box<Any>;\n+        let b = Box::new(Test) as Box<Any>;\n         let a_str = a.to_str();\n         let b_str = b.to_str();\n         assert_eq!(a_str, \"Box<Any>\");\n@@ -232,6 +241,6 @@ mod test {\n     #[test]\n     fn deref() {\n         fn homura<T: Deref<Target=i32>>(_: T) { }\n-        homura(box 765i32);\n+        homura(Box::new(765i32));\n     }\n }"}, {"sha": "0bb8ba669ec25c4c1960f894028f5fdc373297b8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -67,6 +67,7 @@\n #![no_std]\n #![allow(unknown_features)]\n #![feature(lang_items, unsafe_destructor)]\n+#![feature(box_syntax)]\n \n #[macro_use]\n extern crate core;"}, {"sha": "7692c1558a70f7c6797e729a701a162d69f40e61", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -24,6 +24,7 @@\n \n #![allow(unknown_features)]\n #![feature(unsafe_destructor, slicing_syntax)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n #![feature(old_impl_check)]\n #![no_std]"}, {"sha": "0d5f6b65827a495cfa0ff9eb6be72598134901bc", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -164,7 +164,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+\n+#![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(box_syntax)]\n #![deny(missing_docs)]\n \n extern crate regex;"}, {"sha": "d19ce3b460ae5c10bd1286ff2aa8ffae2dde5bd6", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -25,6 +25,7 @@\n \n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(box_syntax)]\n #![deny(missing_docs)]\n \n #[cfg(test)]"}, {"sha": "e0143917a7cff203d76eed0fb1e85a0afd3981c5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -26,6 +26,7 @@\n #![allow(unknown_features)]\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(old_impl_check)]\n "}, {"sha": "27e1eaacdfd993d2798c0ac7218269f4707c1f93", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -23,8 +23,10 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n \n extern crate arena;"}, {"sha": "4a281c413d6fc11991c1e767d6f4f62ab4cfda46", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -22,7 +22,9 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(link_args)]\n+#![feature(box_syntax)]\n \n extern crate libc;\n "}, {"sha": "5da51697d2fee0d5f2abf8021ba97ab33e7a2cc1", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -23,8 +23,10 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n \n extern crate arena;"}, {"sha": "76ac4b2e8af4c004156531bb5a803e7870e673ad", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -72,8 +72,10 @@ This API is completely unstable and subject to change.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n+#![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "56f5c23f6f1bbbb8f2122ebbaabff5632b846e5f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -18,6 +18,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n+#![feature(box_syntax)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "b3c4cec2ef13f5ef01b800f5161cc4048f2b0015", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -25,6 +25,7 @@ Core encoding and decoding interfaces.\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n #![cfg_attr(stage0, allow(unused_attributes))]\n+#![feature(box_syntax)]\n #![feature(old_impl_check)]\n #![feature(slicing_syntax)]\n "}, {"sha": "71221a654e8c1d155b43126513b4cd99ee02c8a6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -108,6 +108,7 @@\n #![feature(linkage, thread_local, asm)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n+#![feature(box_syntax)]\n #![feature(old_impl_check)]\n \n // Don't link to std. We are std."}, {"sha": "2cfcd38d48fca9d4be9034fb232dd48bbfbb7dd8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -69,7 +69,8 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"tuple_indexing\", Accepted),\n     (\"associated_types\", Accepted),\n     (\"visible_private_types\", Active),\n-    (\"slicing_syntax\", Accepted),\n+    (\"slicing_syntax\", Active),\n+    (\"box_syntax\", Active),\n \n     (\"if_let\", Accepted),\n     (\"while_let\", Accepted),\n@@ -337,6 +338,15 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n+        match e.node {\n+            ast::ExprBox(..) | ast::ExprUnary(ast::UnOp::UnUniq, _) => {\n+                self.gate_feature(\"box_syntax\",\n+                                  e.span,\n+                                  \"box expression syntax is experimental in alpha release; \\\n+                                   you can call `Box::new` instead.\");\n+            }\n+            _ => {}\n+        }\n         visit::walk_expr(self, e);\n     }\n \n@@ -357,6 +367,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                    but at the end of a slice (e.g. \\\n                                    `[0, ..xs, 0]` are experimental\")\n             }\n+            ast::PatBox(..) => {\n+                self.gate_feature(\"box_syntax\",\n+                                  pattern.span,\n+                                  \"box pattern syntax is experimental in alpha release\");\n+            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)"}, {"sha": "1efd6a87f863f3703eb90fb1b204f0bd7af05955", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -25,6 +25,7 @@\n \n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(box_syntax)]\n #![feature(quote, unsafe_destructor)]\n \n extern crate arena;"}, {"sha": "b4f224cb4a7ced9eacf27a1354f16a85fed89b3d", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -50,6 +50,7 @@\n \n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(box_syntax)]\n #![deny(missing_docs)]\n \n #[macro_use] extern crate log;"}, {"sha": "d04308814f85ba1557a18074986df4c0c282bb1c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -31,7 +31,9 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+#![allow(unknown_features)]\n #![feature(asm, slicing_syntax)]\n+#![feature(box_syntax)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "8494917c615eb0faebd1fc74c29430570cf601e2", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n use std::cell::RefCell;\n "}, {"sha": "8eb6cd6e263182e9e48502566d0e0464804439fa", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n #![crate_name=\"a\"]\n #![crate_type = \"lib\"]\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub trait i<T> { }\n "}, {"sha": "5865a8f467bad793b2308174bea6a4a3361a789e", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n #![crate_type = \"lib\"]\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }"}, {"sha": "a28a877a374bd1db2a31a1f85780a8cca41d7a4d", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n #![crate_type = \"lib\"]\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }"}, {"sha": "fb58028658e1bb1bfcf835d71a60e13ec384b80e", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct clam {\n     x: Box<isize>,\n     y: Box<isize>,"}, {"sha": "59ed0e5fa0630c0b6dc57226308a0fcbe6f41ac5", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Foo(Box<int>, int);\n \n struct Bar(int, int);"}, {"sha": "ef2c629acfebd5c120e0812c582e0e5e5ab0e096", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f() {\n     let mut a = [box 0i, box 1i];\n     drop(a[0]);"}, {"sha": "d955e8984bf39d4f839d95a4102b6d8dfb4bbee4", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::ops::Add;\n \n #[derive(Clone)]"}, {"sha": "c0abc3a25606a34309114910a4cd3f0c4edc9529", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(advanced_slice_patterns)]\n+#![feature(box_syntax)]\n \n fn a() {\n     let mut vec = [box 1i, box 2, box 3];"}, {"sha": "0351040d329c474a9c77a14a231d36ed00dabc65", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // The regression test for #15031 to make sure destructuring trait\n // reference work properly.\n \n+#![feature(box_syntax)]\n+\n trait T {}\n impl T for int {}\n "}, {"sha": "bc7a70471cd8a7b8c6b874b0c370092d30f57ebf", "filename": "src/test/compile-fail/feature-gate-box-expr.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    use std::boxed::HEAP;\n+\n+    let x = box 'c'; //~ ERROR box expression syntax is experimental in alpha release\n+    println!(\"x: {}\", x);\n+\n+    let x = box () 'c'; //~ ERROR box expression syntax is experimental in alpha release\n+    println!(\"x: {}\", x);\n+\n+    let x = box (HEAP) 'c'; //~ ERROR box expression syntax is experimental in alpha release\n+    println!(\"x: {}\", x);\n+}\n+"}, {"sha": "b36bc22b9dcce7da38b82c5ae8651ef1309687fa", "filename": "src/test/compile-fail/feature-gate-box-pat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental in alpha release\n+    println!(\"x: {}\", x);\n+}"}, {"sha": "8a5e8c27259da4a7bd6d7c6801cde22811e5e3cd", "filename": "src/test/compile-fail/issue-12116.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n enum IntList {\n     Cons(int, Box<IntList>),\n     Nil"}, {"sha": "92e0dd3ad0e528cfedca18d8367219d09f1f1c12", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     box ( () ) 0;\n     //~^ ERROR: only the managed heap and exchange heap are currently supported"}, {"sha": "15b3ec0bfe708738e794fb7da2ef6d53eb403f41", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct HTMLImageData {\n     image: Option<String>"}, {"sha": "b2b9dfce0921792e5698b8e0ba6158c254569fe6", "filename": "src/test/compile-fail/issue-4972.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait MyTrait { }\n "}, {"sha": "ca7f87ff61ae3ccc2638901125ef3cec6532dc26", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n enum A { B, C }\n \n fn main() {"}, {"sha": "379397f22bd611aea40e00a5215cec7cd7058023", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-tidy-linelength\n \n+#![feature(box_syntax)]\n+\n struct S {\n     x: Box<E>\n }"}, {"sha": "e47fddbdc36fd7eb188356e83624599b2d6f238f", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn arg_item(box ref x: Box<int>) -> &'static int {\n     x //~^ ERROR borrowed value does not live long enough"}, {"sha": "934ddb5f80bb1614a984634e8a3ba7274dfe6c32", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:unreachable pattern\n \n+#![feature(box_syntax)]\n \n enum foo { a(Box<foo>, int), b(uint), }\n "}, {"sha": "eab7475bc866899d9ca4f0d28ba157a2e7363485", "filename": "src/test/run-fail/args-panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-panic.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n \n // error-pattern:meep\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f(_a: int, _b: int, _c: Box<int>) { panic!(\"moop\"); }\n \n fn main() { f(1, panic!(\"meep\"), box 42); }"}, {"sha": "89e47bf46ab020c375f1d16a72acb219d9379513", "filename": "src/test/run-fail/panic-macro-any-wrapped.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() {\n     panic!(box 612_i64);\n }"}, {"sha": "231c57390b3019a4f13e2ae0e0c77e879b97eeb3", "filename": "src/test/run-fail/panic-macro-any.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() {\n     panic!(box 413i as Box<::std::any::Any+Send>);\n }"}, {"sha": "9f643c09795dfd1c63ca7a45c50ee1959f2c7eae", "filename": "src/test/run-fail/unique-panic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Funique-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Funique-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-panic.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,4 +9,8 @@\n // except according to those terms.\n \n // error-pattern: panic\n+\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() { box panic!(); }"}, {"sha": "f39ded8f98e80ca75a674a1fc6d482cf4a9e8c0f", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:fail\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn failfn() {\n     panic!();"}, {"sha": "72a79e188b3dc3cac58e8ff1b0c05b7af0aea5b3", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct pair<A,B> {\n     a: A, b: B\n }"}, {"sha": "089e1b8c5c2a3496cf9989a676018c18c63f8501", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n #[derive(PartialEq, Show)]\n struct Point { x : int }"}, {"sha": "7365e052171eff975809517f89c5a5a7b8d056ce", "filename": "src/test/run-pass/associated-type-doubleendediterator-object.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fassociated-type-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fassociated-type-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-type-doubleendediterator-object.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=int>>) -> int {\n     let mut result = 0;\n     loop {"}, {"sha": "876fc123f480c7a770858d55f5a14a359c744bfe", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> uint;"}, {"sha": "f5d5c81117e11a106f6aea36d88616ff40dcbb43", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait double {\n     fn double(self) -> uint;"}, {"sha": "282cf62190ce3ee31ed51960857e2e31feb27ec3", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait double {\n     fn double(self: Box<Self>) -> uint;"}, {"sha": "eb44e3b52b90f63815c9470ce6267a9c4622b1cd", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait double {\n     fn double(self: Box<Self>) -> uint;\n }"}, {"sha": "4bbb17c6dd698d290bb8ba1ee6d6eba38c6b1611", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait double {\n     fn double(self: Box<Self>) -> uint;\n }"}, {"sha": "e026ac9dcbaad57dce8848aa5bfa70c1b9ddce48", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait Foo {\n     fn foo(&self) -> String;\n }"}, {"sha": "325f6dec76f801c34a355254eb4b6b35da2d420f", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n extern crate collections;\n use std::collections::Bitv;\n "}, {"sha": "9fcd87418bee30a65e2db03a96c89c65fb4ac327", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn borrow<F>(x: &int, f: F) where F: FnOnce(&int) {\n     f(x)"}, {"sha": "89d80190042c78784b327d0f18ed51029937f833", "filename": "src/test/run-pass/borrowck-field-sensitivity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct A { a: int, b: Box<int> }\n struct B { a: Box<int>, b: Box<int> }\n "}, {"sha": "49483e40096b30cc28f975b91cfccf8fcf0d8ff5", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,7 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n+#![feature(box_syntax)]\n \n struct Foo {\n   a: int"}, {"sha": "773780ffb0953f8e95f51387cba0a3483cd925d3", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n pub fn main() {"}, {"sha": "4416c57e3456e0e6b6e039244ba0c5985b982bd6", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::mem::swap;\n \n #[derive(Show)]"}, {"sha": "7be12ff3cc9657f50ee11af49eed99709fe104d1", "filename": "src/test/run-pass/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-use-mut-borrow.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct A { a: int, b: Box<int> }\n \n fn field_copy_after_field_borrow() {"}, {"sha": "631133cc7ff8b6150fdf2093489def64c865742a", "filename": "src/test/run-pass/cancel-clean-via-immediate-rvalue-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo(x: &mut Box<u8>) {\n     *x = box 5;"}, {"sha": "00673bee8b47f5e37c6aa5b3e9c89307e618af36", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // ignore-android (FIXME #11419)\n // exec-env:RUST_LOG=info\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "ef5ee5aa3b4ab65a2e56c9c5265c07f5b3cf0266", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:cci_borrow_lib.rs\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;"}, {"sha": "e6cae99067e05c4e65a8766ac50ae37a0b3cc24f", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n // aux-build:cci_class_cast.rs\n+\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n extern crate cci_class_cast;\n \n use std::string::ToString;"}, {"sha": "c2fa98a66df95715d9a0f9fa35ea6536135d2798", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::fmt;\n \n struct cat {"}, {"sha": "0d155ae085c73baa21e8d222ee1720fe214f7c18", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -21,6 +21,9 @@\n // Test that cleanup scope for temporaries created in a match\n // arm is confined to the match arm itself.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::os;\n \n struct Test { x: int }"}, {"sha": "83f93cb81a1e6156d7354e9ae193d11eeaa92a43", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,8 @@\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Temporary;\n "}, {"sha": "bbfe0e6a18dbc0df06c394f934ca26afe871af20", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,8 @@\n // statement or end of block, as appropriate given the temporary\n // lifetime rules.\n \n+#![feature(box_syntax)]\n+\n use std::ops::Drop;\n \n static mut FLAGS: u64 = 0;"}, {"sha": "04ab0d881a84d66cf912231abc7cd9ab15e32ed1", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -24,6 +24,9 @@\n // It's unclear how likely such a bug is to recur, but it seems like a\n // scenario worth testing.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n enum Conzabble {"}, {"sha": "8eeae7a28ac8543978d2078df31d197c7a466f24", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n struct Pair {"}, {"sha": "99fdc34602617bb2ecc7f77bd3a70c519a8c00ba", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,9 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Pair<A,B> {\n     a: A, b: B\n }"}, {"sha": "3964d54f8609cc8ec03eb005e781ef42104df9f0", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::fmt::Show;\n \n // Check that coercions apply at the pointer level and don't cause"}, {"sha": "0ff28b471a30d5b77bd7f8f2d6b6e4f2d51d58e8", "filename": "src/test/run-pass/coerce-match-calls.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match-calls.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that coercions are propagated through match and if expressions.\n+\n+use std::boxed::Box;\n+\n+pub fn main() {\n+    let _: Box<[int]> = if true { Box::new([1i, 2, 3]) } else { Box::new([1i]) };\n+\n+    let _: Box<[int]> = match true { true => Box::new([1i, 2, 3]), false => Box::new([1i]) };\n+\n+    // Check we don't get over-keen at propagating coercions in the case of casts.\n+    let x = if true { 42 } else { 42u8 } as u16;\n+    let x = match true { true => 42, false => 42u8 } as u16;\n+}"}, {"sha": "0992ee97d061f57694fd3b6e27cb62349aec922f", "filename": "src/test/run-pass/coerce-match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Check that coercions are propagated through match and if expressions.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let _: Box<[int]> = if true { box [1i, 2, 3] } else { box [1i] };\n "}, {"sha": "3a6973fe61c77185b1034ba09a661df0e762925f", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // Make sure const bounds work on things, and test that a few types\n // are const.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo<T: Sync>(x: T) -> T { x }\n "}, {"sha": "1a3e87b55b64b5f5a438c8bceda395f08ed8dde5", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // This is a regression test that the metadata for the\n // name_pool::methods impl in the other crate is reachable from this"}, {"sha": "ead0683b87090c67b1d0c42702be5b4414f91beb", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n use std::cell::Cell;\n "}, {"sha": "b4ee0246d87805ae4b06e22e5339db2a24e0001d", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let x: Box<int> = box 10;"}, {"sha": "b00ceb6ed22c75b622f25e57b26278dfccd5d1bd", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::default::Default;\n \n #[derive(Default)]"}, {"sha": "1a204fa3e206e4f3f92f805a09eeee8167ada6aa", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(old_orphan_check)]\n \n extern crate serialize;"}, {"sha": "3b89c943edb1c20f4f2cae307338e4699f4b7ee5", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n #[derive(PartialEq, PartialOrd, Eq, Ord)]\n struct Foo(Box<[u8]>);\n "}, {"sha": "f875d0644a07da9136aacbce789621acb0f01c0b", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum t { foo(Box<int>), }\n "}, {"sha": "7a3b6df539f142b3efed8ff676fba9d3b93cfbae", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static mut value: uint = 0;\n \n struct Cat {"}, {"sha": "9bfb3572ab562fcf6285dfdb5977b65db08ebafa", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "909f7f4897a6ae8372e20dc2355f65de47976c48", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::ops::{Deref, DerefMut};\n \n pub struct Arr {"}, {"sha": "ad4456b5b592d1a05fc65715cbc7e35aff8e4a4e", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::ops::Deref;\n \n pub struct Arr {"}, {"sha": "b2092e745a116c5f9c30556ce2642d7b7cd28194", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,"}, {"sha": "627d197879d26c0e141dbdf8b8bb06ba5bb42554", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,"}, {"sha": "269e0ee6ce425662b5acd6ba452d547b205bf0bb", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     assert!(Some(box() ()).is_some());\n "}, {"sha": "e95d58c706b27689f96c016ac3d7581eac87d25a", "filename": "src/test/run-pass/empty-allocation-rvalue-non-null.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let x = *box() ();\n }"}, {"sha": "817136572024b1f80910f87a820b3cea0bf3a621", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n /*!\n  * This is a regression test for a bug in LLVM, fixed in upstream r179587,"}, {"sha": "a2aaaa235e429c3572e261f65a132f5e689fd205", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct LM { resize_at: uint, size: uint }\n \n impl Copy for LM {}"}, {"sha": "501ba01b4ce1c28d011b8427a06eaa274e879e2f", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait Foo {\n     fn f(self: Box<Self>);"}, {"sha": "e5d8ec3f8ad0d497ca6ae282fd3360343ae1f233", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static tau: f64 = 2.0*3.14159265358979323;\n \n struct Point {x: f64, y: f64}"}, {"sha": "1654c87c6a484dc418bbf528f60491f844f450f4", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = { expected.clone() };\n     assert!(eq(expected, actual));"}, {"sha": "e41ce37cc3a1d5794f7e5dd45136983c3bd95d02", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n     assert!(eq(expected, actual));"}, {"sha": "d934ce677d12186e9049953a487f62f26c4377d4", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n \n-\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() { let x = { box 100i }; assert!((*x == 100)); }"}, {"sha": "5294d05401c892233581482d542b01b03c474456", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n \n-\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n \n // Tests for if as expressions returning boxed types"}, {"sha": "9de1379f480f1bda79b4cf81f9b9f9353923c310", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = match true {\n         true => { expected.clone() },"}, {"sha": "489cd8437d21faacf5b52ddf21de41a2ca2453d0", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = match true {\n         true => expected.clone(),"}, {"sha": "7958f4927daf84aab270ccf3873f4e48f6e11bdc", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {"}, {"sha": "0f8d7c24360fb40c874f5bd25a5eb53675843892", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::marker::NoCopy as NP;\n \n struct ncint { np: NP, v: int }"}, {"sha": "b23d8db3cfdd58890ab12cf9c765e74ad1194b9b", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Foo {\n     x: Box<uint>,"}, {"sha": "9e94bca96f7bdf0da870a3007cda6bbdd82a3409", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -14,6 +14,8 @@\n // boxes. Make sure that we don't free the box as we match the\n // pattern.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn getaddr(box ref x: Box<uint>) -> *const uint {\n     let addr: *const uint = &*x;"}, {"sha": "34b7f15e4c6b1a7f2424d985da4653e8da2cc2c7", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {"}, {"sha": "a2f7bdfd81709f80ae7397647b9431a67c99fec2", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Recbox<T> {x: Box<T>}\n "}, {"sha": "be83cb04f2c37607bf65f6d13f3e0261b4edc115", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f<T>(x: Box<T>) -> Box<T> { return x; }\n \n pub fn main() { let x = f(box 3i); println!(\"{}\", *x); }"}, {"sha": "986b35cbecf96ecbe4a795d60bbbc415da7c290d", "filename": "src/test/run-pass/generic-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-object.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait Foo<T> {\n     fn get(&self) -> T;"}, {"sha": "845375d9b840a6c0da7606cd5aea1a7cfbad4160", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-pretty FIXME(#14193)\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum list<T> { cons(Box<T>, Box<list<T>>), nil, }\n "}, {"sha": "b0d4944ba540b6ea123061115409e857c2db6841", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum option<T> { some(Box<T>), none, }\n "}, {"sha": "1d39c47417c1002c8748149775b521a6f6bb0672", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Triple<T> { x: T, y: T, z: T }\n "}, {"sha": "0e82ad437829f37df6abe73986e51c01a866f3d1", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n /**"}, {"sha": "1d1e744ef0802d8ff47fd3c2033c4e398e2f2b42", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Test that `Fn(int) -> int + 'static` parses as `(Fn(int) -> int) +"}, {"sha": "dbc23a63bbadf36aa8f49e96765682a4c71ca36a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -13,6 +13,8 @@\n \n #![deny(warnings)]\n #![allow(unused_must_use)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n use std::fmt;\n "}, {"sha": "eeae3f35cfcd053fd1876d1ba3b438f0e7b1550a", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unsafe_destructor)]\n \n use std::cell::Cell;"}, {"sha": "0644fbbc99f41499c320d8d2e3d0c8733affdfbf", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(intrinsics)]\n \n mod rusti {"}, {"sha": "fb04f67e380ab65fc4b2d137359a835f7ae2cb8c", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(intrinsics)]\n \n use std::mem::transmute;"}, {"sha": "883e52b61d081bdaae2e6e4d46c399ff9922d2bc", "filename": "src/test/run-pass/issue-10682.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10682.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Regression test for issue #10682\n // Nested `proc` usage can't use outer owned data\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn work(_: Box<int>) {}\n fn foo<F:FnOnce()>(_: F) {}\n "}, {"sha": "c717053cffc74d10424f7fc5fac0afccd6161e41", "filename": "src/test/run-pass/issue-10767.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10767.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     fn f() {"}, {"sha": "de2b4c51e52a96608cfdc1592a13b1b0d5075eac", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct DroppableStruct;\n enum DroppableEnum {\n     DroppableVariant1, DroppableVariant2"}, {"sha": "194208620a8ea05813b197f79cbe9213cc747c38", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait Foo {}\n impl Foo for int {}"}, {"sha": "f47f1e06011d9c98d89daa6e1176fc7492b2e666", "filename": "src/test/run-pass/issue-11552.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11552.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n #[derive(Clone)]\n enum Noun"}, {"sha": "6fa450586947854cd806104820ab99d754273564", "filename": "src/test/run-pass/issue-11677.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11677.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // this code used to cause an ICE\n "}, {"sha": "ec929a9c792deece5a546dae51b6e692f37d52b2", "filename": "src/test/run-pass/issue-12744.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12744.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() {\n     fn test() -> Box<std::any::Any + 'static> { box 1i }\n     println!(\"{:?}\", test())"}, {"sha": "75d3c6f334d071774799677ae2c157b0ab0ccd42", "filename": "src/test/run-pass/issue-13323.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13323.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct StrWrap {\n     s: String\n }"}, {"sha": "3c5ece87b737dabae0d7d16709bd68175e3a9cbb", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Foo<'a> {\n     listener: Box<FnMut() + 'a>,\n }"}, {"sha": "7e533c2cf86c116cdf8d1b01722c2335a21afe43", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -13,6 +13,9 @@\n // value was coerced to a trait object. (v.clone() returns Box<B1>\n // which is coerced to Box<A>).\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n #[derive(Clone)]\n struct B1;\n "}, {"sha": "d9763baa82657e10f0ff8030428ba062ef663d28", "filename": "src/test/run-pass/issue-14589.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // All 3 expressions should work in that the argument gets\n // coerced to a trait object\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() {\n     send::<Box<Foo>>(box Output(0));\n     Test::<Box<Foo>>::foo(box Output(0));"}, {"sha": "4d05b98147bd6237ec9ba8b5c065a8d0c02f5cb6", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }"}, {"sha": "6b273b5786a93513c9929149b5ba62eaa8b305b3", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn match_on_local() {\n     let mut foo = Some(box 5i);\n     match foo {"}, {"sha": "283ea25b6fe17cd4d6e15f21876cca46959a3089", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n #[derive(PartialEq, Show)]\n struct Bar {"}, {"sha": "75b1e11ddc1e61b60c7df659e9559c2257de47e8", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-pretty\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {"}, {"sha": "cb6f068cf45b8ebd3270357fa7a4b8038f57e216", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Test that unboxing shim for calling rust-call ABI methods through a"}, {"sha": "175e218881138a0d3cc08489c94cb69d1f3f4afb", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "b50bf442b5d608d44b5a3f7b47716ed45d4ecc9b", "filename": "src/test/run-pass/issue-17322.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::io;\n \n fn f(wr: &mut Writer) {"}, {"sha": "e58fbe0b4c2830d0756e1f7cb81bb84a8fff5c98", "filename": "src/test/run-pass/issue-17734.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17734.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test that generating drop glue for Box<str> doesn't ICE\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f(s: Box<str>) -> Box<str> {\n     s\n }"}, {"sha": "6d223923ac1dfcd641e7e5370d31f4123ef703fa", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Check that trans doesn't ICE when translating an array repeat\n // expression with a count of 1 and a non-Copy element type.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn main() {\n     let _ = [box 1u; 1];\n }"}, {"sha": "7baead6929beb77dc33b2357e35ae99360dde3b4", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait clam<A> {\n   fn chowder(&self, y: A);"}, {"sha": "c146f8a7a9afb5a140bf7d85c4d97d89e9a4f8f7", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n \n fn a_val(x: Box<int>, y: Box<int>) -> int {\n     *x + *y"}, {"sha": "1f072af0f5a64c44c7739f47e7c414bc40490b4c", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Font {\n     fontbuf: uint,"}, {"sha": "6f5f46edc01cbb79f7812775db9e59e1acea0d78", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n //\n // ignore-lexer-test FIXME #15883\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unsafe_destructor)]\n \n pub type Task = int;"}, {"sha": "3e4cffe5dfa3881ae3b16af1d8da20cd9c0cad7d", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait hax { }\n impl<A> hax for A { }"}, {"sha": "cb376d0e4398da67734d16c322270f5dd559cc16", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait hax { }\n impl<A> hax for A { }"}, {"sha": "295fd538de63528c062dcfcbdc05c8767760a7db", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n //type t = { a: int };\n // type t = { a: bool };"}, {"sha": "de2d4374d787fdf15915dbcf5b082fdb862fd69e", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:issue-3012-1.rs\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n extern crate socketlib;\n extern crate libc;"}, {"sha": "cd71bfce2742870d691908e277db18ae06b6eade", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "c08bdf54408122447313c8e026d7b6fa6e532964", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n type Connection = Box<FnMut(Vec<u8>) + 'static>;\n "}, {"sha": "c789921f6220a287718dbd1b4c8326a827ea3e8b", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }"}, {"sha": "a72b272abaac6de44fd860a5890fd22aeabffffe", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n    let mut x = box 3i;\n    x = x;"}, {"sha": "6647fbe2238ef60ed82868ea71af6cc87e048940", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n \n // rustc --test ignores2.rs && ./ignores2\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::path::{Path};"}, {"sha": "12c2155dd57a7f858e30e9ac947a9a668a90d356", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n use std::cell::RefCell;\n "}, {"sha": "56eb7486c928c30cc50cc37df04544b6f5831120", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::Sender;\n use std::thunk::Invoke;"}, {"sha": "91c938981c10bc85acaaf70a7b975947cde9325c", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait T {\n     fn print(&self);\n }"}, {"sha": "5434e44c173761d404f5d2f5f36e4ac80de73158", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(path_statement)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let y = box 1i;"}, {"sha": "bf422bd0405a1c9343f82af2cd38fb63abcbc3e1", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // ignore-fast doesn't like extern crate\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n extern crate libc;\n \n use std::mem::transmute;"}, {"sha": "2245e80971a907cb7fe9c2c1580d060e6c50b49d", "filename": "src/test/run-pass/issue-4759.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct T { a: Box<int> }\n "}, {"sha": "bb79cd4d0466744e1066cdae0c72dac22f407ea7", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub trait EventLoop {\n }"}, {"sha": "e53f4c869230450eb396802855c940a8ae007097", "filename": "src/test/run-pass/issue-5666.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5666.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Dog {\n     name : String"}, {"sha": "36aa8a9cbca5d2c66e4f225328e6943117d380da", "filename": "src/test/run-pass/issue-5718.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Element;\n \n macro_rules! foo {"}, {"sha": "6502c66d8582101a6dd7c120d9d5d60ffef628c3", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub struct Foo {\n     a: int,"}, {"sha": "85de03dfe3426ac2a773eba74f35cc8e267aece2", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum Either<T, U> { Left(T), Right(U) }\n "}, {"sha": "d96862b588f9d58b3610500f0b85af67ad5de60a", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "b9f1a8bda7b5e7255f8403243a6112593a100575", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub enum Thing {\n     A(Box<Foo+'static>)"}, {"sha": "3163f1393280a58c155f6b61a3afd86f9da4af27", "filename": "src/test/run-pass/issue-6557.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6557.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo(box (_x, _y): Box<(int, int)>) {}\n "}, {"sha": "b6dfbb1ca42ad2a431f324761c18a5eb22e4d127", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -14,6 +14,8 @@\n \n */\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {}\n "}, {"sha": "2a2ca4f071274a5f1cd0efb94e7ebf15336e35b0", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     match &[(box 5i,box 7i)] {\n         ps => {"}, {"sha": "2ef1c1d264a409b396eb60008e7f3fde064c19da", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-pretty\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub trait bomb { fn boom(&self, Ident); }\n pub struct S;"}, {"sha": "07212237305efa7903f92bb06ad29d93e81347c6", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(unnecessary_allocation)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // Tests for a previous bug that occurred due to an interaction\n // between struct field initialization and the auto-coercion"}, {"sha": "999fb2c4b69f3818c8a8d7070e86f933dce9fde9", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait repeat<A> { fn get(&self) -> A; }\n "}, {"sha": "9be9f0982642a0985173e671371293316539897a", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // Make sure #1399 stays fixed\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct A { a: Box<int> }"}, {"sha": "4a7e844268f615b97fa524987d0d10c23ac0d438", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Make sure #1399 stays fixed\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct A { a: Box<int> }\n \n pub fn main() {"}, {"sha": "65808de3cf42b2122761a9704f6756fad40566b8", "filename": "src/test/run-pass/leak-unique-as-tydesc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn leaky<T>(_t: T) { }\n "}, {"sha": "9ac016d534f09c40c40ca235a1abdf74890b3fe0", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f() {\n     let a = box 1;\n     let b: &int = &*a;"}, {"sha": "e55c1b36f3e24b357c90ca70b82e6c0bafe8822c", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n enum list { cons(int, Box<list>), nil, }\n "}, {"sha": "6883187c402f3a3af8aa398e141cfd8fe03e1711", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Pair { a: Box<int>, b: Box<int> }\n "}, {"sha": "ebe01a1d1f221052883acbf8c27d75d860ef814c", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     match box 100i {\n       box x => {"}, {"sha": "beb125492b2c154ead23fd4230606e7af6c1a15a", "filename": "src/test/run-pass/match-value-binding-in-guard-3291.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo(x: Option<Box<int>>, b: bool) -> int {\n     match x {"}, {"sha": "e9a1e19d4bf8416494606a25cdb4285f61cd1910", "filename": "src/test/run-pass/method-self-arg-aux1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n // aux-build:method_self_arg1.rs\n extern crate method_self_arg1;\n use method_self_arg1::Foo;"}, {"sha": "7fa810ce1549ad9f671caf94a6907225a87c887b", "filename": "src/test/run-pass/method-self-arg-aux2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n // aux-build:method_self_arg2.rs\n extern crate method_self_arg2;\n use method_self_arg2::{Foo, Bar};"}, {"sha": "39018a873942e5e9ea8a8f63c1f08f431a5dc6fd", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test method calls with self as an argument\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static mut COUNT: u64 = 1;\n \n struct Foo;"}, {"sha": "ae15bc60746b267315718947de6b788ebaaebb22", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test method calls with self as an argument\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n static mut COUNT: uint = 1;\n \n struct Foo;"}, {"sha": "b18c29dc3c136c4406bf11c2a97089767ccf1b95", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -16,6 +16,9 @@\n // version will run (note that the `push` occurs after the call to\n // `foo()`).\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait Foo {\n     fn foo(&self) -> int;\n }"}, {"sha": "018cd440cad343523c65327f3661fb0273f58bdb", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n #[derive(Clone)]\n struct Triple {"}, {"sha": "50187ef8baad23fb8768c8e242b79c0a4e0ed139", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct X { x: int, y: int, z: int }\n "}, {"sha": "6561a9b2d5b565c24a3f6c525400170ee4d7b4af", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct X { x: int, y: int, z: int }\n "}, {"sha": "a10e3f9f5b0d06331e6c663b82c2ef5d9be2e214", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n #[derive(Clone)]\n struct Triple {"}, {"sha": "9e5eeef75527c1595ba1a601c4988a5d4e852ac0", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Triple {a: int, b: int, c: int}\n "}, {"sha": "c902677c645314b41ad8e998dac7b2824a078b69", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Triple { a: int, b: int, c: int }\n "}, {"sha": "e496e9e2105334fcc74ca8abbbcb392fcfda9b78", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn test(foo: Box<Vec<int>> ) { assert!(((*foo)[0] == 10)); }\n "}, {"sha": "fdb6799b90f793cb9857007e3030c98666eef39e", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn test(foo: Box<Vec<int>>) { assert!(((*foo)[0] == 10)); }\n "}, {"sha": "388b814b2af1068e18d75d78e801169f03bb2180", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn f(mut y: Box<int>) {\n     *y = 5;"}, {"sha": "4ea51b3b409aa75246c879da94ddb1f1e83cf616", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n // Tests that the new `box` syntax works with unique pointers.\n \n use std::boxed::{Box, HEAP};"}, {"sha": "1f2207ad87378915a31258783a73a77277fabebf", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn f(x: Box<int>) {\n     let y: &int = &*x;"}, {"sha": "130cdc85b013d6af888468b6e809197e4c5d264b", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn unique() -> Box<FnMut()+'static> { return box || (); }\n \n pub fn main() {"}, {"sha": "0952bedd6e309a2fbfdcc798db2e30f2657064c7", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn unique() -> Box<FnMut()+'static> { box || () }\n \n pub fn main() {"}, {"sha": "bb62b1599a4fe5aa5f99563b90877e8036b4a863", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::{option, mem};\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,"}, {"sha": "ebdf3c08a226351c606cf5857092f43546e4efd8", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Testing creating two vtables with the same self type, but different\n // traits.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::any::Any;\n \n trait Wrap {"}, {"sha": "cd97c34f8c6a6713e53bf36168a20378ecbb46c7", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,9 @@\n // closed over do not contain managed values, and thus the boxes do\n // not have headers.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n \n trait FooTrait {\n     fn foo(&self) -> uint;"}, {"sha": "d355999c506068115f15991eab5a3a4ae0d93acc", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,8 @@\n // closed over contain managed values. This implies that the boxes\n // will have headers that must be skipped over.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait FooTrait {\n     fn foo(self: Box<Self>) -> uint;"}, {"sha": "fb87cd5eb69cd25096874acba50f235237f26cdd", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct A { a: int, b: int }\n struct Abox { a: Box<int>, b: Box<int> }"}, {"sha": "5831d500b83934497046f7a6ea397c1e1dddff1f", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::num::ToPrimitive;"}, {"sha": "a2cc7b7dfea57af1f2b19d066f6948e6a1ab0e99", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;"}, {"sha": "637d2c94694455d84aa64eccca52791000e13061", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test overloaded indexing combined with autoderef.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::ops::{Index, IndexMut};\n \n struct Foo {"}, {"sha": "e784318fc762fe4ab05219004e85ba23c987ba78", "filename": "src/test/run-pass/owned-implies-static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f<T: 'static>(_x: T) {}\n \n pub fn main() {"}, {"sha": "7fbdd2f219e142bac1be3f374e0eb258a073733e", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // Check that functions can modify local state.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn sums_to(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;"}, {"sha": "84a230fd5767c201b25a00b417a735ebd4b39ff6", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait get {\n     fn get(self) -> int;"}, {"sha": "ba86e3f7b57b38d383de7ea155f0b6931ac71364", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo(x: &uint) -> uint {\n     *x"}, {"sha": "30a22512d2a7f2b0ddaa439998ff4df46a7492bf", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn foo(x: &uint) -> uint {\n     *x\n }"}, {"sha": "3922cb1219c03655564b6c97c4e9ae82890b26ea", "filename": "src/test/run-pass/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // A test where we (successfully) close over a reference into\n // an object.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait SomeTrait { fn get(&self) -> int; }\n \n impl<'a> SomeTrait for &'a int {"}, {"sha": "0152793d96c6c21c7179f9ab42be858361d6d0b2", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {"}, {"sha": "e38a472fa4c8f0af9dbc43cd63b0afdbad039159", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // Test lifetimes are linked properly when we create dependent region pointers.\n // Issue #3148.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct A {\n     value: B"}, {"sha": "3267ff2c7e0e7a457712c26287d425ce05a74948", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // Tests that you can use an early-bound lifetime parameter as\n // on of the generic parameters in a trait.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait Trait<'a> {\n     fn long(&'a self) -> int;"}, {"sha": "9637c43170f6b27f30e73400c9a199806341ffc6", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }"}, {"sha": "faa9b37bdcc630807125881fe3046d737f42ae4b", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,8 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // Should pass region checking.\n fn ok(f: Box<FnMut(&uint)>) {"}, {"sha": "f397b5124caf5b6ee9a23801844efe697da3a9cf", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {"}, {"sha": "708d031a68a6351e9051b6e97885810a323d711a", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Point {x: int, y: int}\n "}, {"sha": "c4852c9162cab4cfa31ab039f3813d75800d6254", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -22,6 +22,9 @@\n // doing region-folding, when really all clients of the region-folding\n // case only want to see FREE lifetime variables, not bound ones.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     fn explicit() {\n         fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a int)>) {}"}, {"sha": "e779e002b299005b33c9db21b1ea21bfb0f834ef", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -17,6 +17,9 @@\n // changes were caught. However, those uses in the compiler could\n // easily get changed or refactored away in the future.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Ctxt<'tcx> {\n     x: &'tcx Vec<int>\n }"}, {"sha": "abd5789bb1f7639af518899318c6ddda0e39b152", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {"}, {"sha": "28d47f7aa9be579e540fd28b55bd380918260889", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // exec-env:RUST_LOG=rust-log-filter/f.o\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n #[macro_use]\n extern crate log;\n "}, {"sha": "40a4dc52a70b303585832efd3aae666a5414d76b", "filename": "src/test/run-pass/self-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-impl.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test that we can use `Self` types in impls in the expected way.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Foo;\n \n // Test uses on inherent impl."}, {"sha": "e934498ea05066b34de6bea90afdf6f8dc92a682", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct X {\n     a: int"}, {"sha": "3092898d98652b7b5a7c69e8d4f3b212a1689ec1", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,9 @@\n // Ensure assigning an owned or managed variable to itself works. In particular,\n // that we do not glue_drop before we glue_take (#3290).\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::rc::Rc;\n \n pub fn main() {"}, {"sha": "89624c3ac16a339fbb306c297740bd48dd6a36c5", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n pub fn main() { test05(); }"}, {"sha": "fc0b501e9c523fd3d8f8d0b1ef0cacc5216b5c8c", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n #[derive(Show)]\n struct Foo(Box<[u8]>);\n "}, {"sha": "ca2a8cf5506eec1486b46550bfa9cacae87d1061", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "5e6247bac93f965fb67f04250ca8bdbe0323e3be", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::sync::mpsc::channel;\n use std::io::{ChanReader, ChanWriter};\n use std::thread;"}, {"sha": "0089646d0a14aa669ee8f678a36779728eff6f13", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -13,6 +13,8 @@\n \n // ignore-pretty\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::sync::Arc;"}, {"sha": "22db6c64770ec5a233d3d5b1a896282238bf982c", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n trait Trait<T> {\n     fn f(&self, x: T);"}, {"sha": "0d4a05bed7f56e7463a4ca3ad2c55a64e976de74", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::io;\n \n trait Trait {"}, {"sha": "19d76b889011837999e5d62ba05581d04b331084", "filename": "src/test/run-pass/trait-contravariant-self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -22,6 +22,9 @@\n // 4. `Bar for Box<Foo> <: Bar for Box<Foo:Send>` because\n //    `Box<Foo:Send> <: Box<Foo>`.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait Foo { }\n struct SFoo;\n impl Foo for SFoo { }"}, {"sha": "76352c799a0f2728805de9e25302f04d9c0b0e3a", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // test for #8664\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub trait Trait2<A> {\n     fn doit(&self);"}, {"sha": "7e2b7ae0663b97036f5cfeff91a6f6c84b7ca751", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -12,6 +12,9 @@\n // blanket impl for T:Copy coexists with an impl for Box<T>, because\n // Box does not impl Copy.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n trait Get {\n     fn get(&self) -> Self;\n }"}, {"sha": "3fcb04d6848e8f306e2470d70271493d8d7b5d5b", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn p_foo<T>(_pinned: T) { }\n fn s_foo<T>(_shared: T) { }"}, {"sha": "20a28c5a9ead9233bec6aeef30b6329fef47ea0e", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n // Example from lkuper's intern talk, August 2012 -- now with static\n // methods!\n use Color::{cyan, magenta, yellow, black};"}, {"sha": "aa290edd8631a10d8142660fe667d7f1d1573be1", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n // Example from lkuper's intern talk, August 2012.\n use Color::{cyan, magenta, yellow, black};"}, {"sha": "968f3511247c6fe81e38c7fdc483fa23f51f0a44", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Foo {\n     f: int,\n }"}, {"sha": "dc35d5bf2caca72846cabc09f9e9207c511a517b", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;"}, {"sha": "da647e90c00f6fdbb4b3389d2fbce7bcd0708838", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // Test that the call operator autoderefs when calling to an object type.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;"}, {"sha": "8ee3c96f580d1edb6521039950d50b779b98321a", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;"}, {"sha": "6701f879e4f2b3eab31c3f89108029f08a18484a", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -11,6 +11,8 @@\n // Test that unboxed closures in contexts with free type parameters\n // monomorphize correctly (issue #16791)\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n fn main(){"}, {"sha": "915715727e8e64b4c6d1e0814b0ab6aff074b322", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // Tests that the reexports of `FnOnce` et al from the prelude work.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n fn main() {"}, {"sha": "b7980ed9021e2f9a241b01ccf131e724e0ea54bf", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct X {\n     a: int"}, {"sha": "9e3d9544d427e6a3f43c9c9ded4f839e949ca67e", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let mut i = box 1i;\n     // Should be a copy"}, {"sha": "81c4b6ab7e514edf4103e0e1f1d1216e545f817b", "filename": "src/test/run-pass/unique-assign-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(dead_assignment)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let i = box 1i;"}, {"sha": "7c9bbd6417177dc3fb0050b109f0b6c618c842d5", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n \n fn f<T>(t: T) -> T {\n     let t1 = t;"}, {"sha": "199657fd995d65f6b7521938471c10d12c0cfc38", "filename": "src/test/run-pass/unique-assign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let mut i;\n     i = box 1i;"}, {"sha": "aab7f4108fba659f5a2099ab3ad1058a26b04bd4", "filename": "src/test/run-pass/unique-autoderef-field.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct J { j: int }\n \n pub fn main() {"}, {"sha": "1c7b4c534ed81fecb6cdb6fb91a2711dc5bc327c", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let i = box vec!(100i);"}, {"sha": "dba4d8db8496f8868bec01f019022586d1abdf96", "filename": "src/test/run-pass/unique-cmp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-cmp.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 100i;\n     assert!(i == box 100i);"}, {"sha": "e4099c94c2f1a6e93941fc059f41f9d747535d08", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     enum t { t1(int), t2(int), }\n "}, {"sha": "cec74d251b304e175c00fa5b35ac0bee49409b7b", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     box 100i;\n }"}, {"sha": "d0ad03b773c3b96a0c67037da5d940dc5c610ec9", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let mut i = box 1i;\n     // Should be a copy"}, {"sha": "d7c19eb63588c258064c2729b2a9d46c16d8bc6b", "filename": "src/test/run-pass/unique-decl-init.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 1i;\n     let j = i;"}, {"sha": "0acdc8f3b80290c0427ea77c091241002a760bdb", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 100i;\n     let j = i;"}, {"sha": "752ea830aa5ddf54fbac8ea3a1e29b56c2b6bf73", "filename": "src/test/run-pass/unique-deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-deref.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 100i;\n     assert_eq!(*i, 100);"}, {"sha": "3213146cbf4a772315497a7e8ac0d9a09e815157", "filename": "src/test/run-pass/unique-destructure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-destructure.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct Foo { a: int, b: int }\n \n pub fn main() {"}, {"sha": "ec2c9f8c6661d05681b45b6b03b0d7ff5d2d5f2b", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let _x = box vec!(0i,0,0,0,0);\n }"}, {"sha": "0e47d39e55f5045dcf265814b337af3e7fcc6af7", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn f(i: Box<int>) {\n     assert_eq!(*i, 100);\n }"}, {"sha": "e1d148cc9a555359d912a7777da1f124f2f21df3", "filename": "src/test/run-pass/unique-fn-arg-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn f(i: &mut Box<int>) {\n     *i = box 200;"}, {"sha": "301994a74a85a6c5ca519227e86da6648f411fc8", "filename": "src/test/run-pass/unique-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn f(i: Box<int>) {\n     assert_eq!(*i, 100);"}, {"sha": "de2c265089bedfc1d2fdd1e36d9697bd0cbd9592", "filename": "src/test/run-pass/unique-fn-ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-ret.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n fn f() -> Box<int> {\n     box 100"}, {"sha": "4f02018346bdb6b9ae9b90c45b133a8af3249501", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn test1() {\n     enum bar { u(Box<int>), w(int), }\n "}, {"sha": "4620815e74e9edd98500a5db2ceaac5429c81ef5", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let mut a = vec!(box 10i);"}, {"sha": "389ca2c18b1bf6b97b27d6c4c7a891268c8195dc", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let vect = vec!(box 100i);\n     assert!(vect[0] == box 100);"}, {"sha": "b36d08364a2f853914aceb03d799ce3dd288ba78", "filename": "src/test/run-pass/unique-init.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-init.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let _i = box 100i;\n }"}, {"sha": "56f7a3f7990e508d6db7a1a84db28a4467f91d32", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::cmp::PartialEq;\n \n fn sendable() {"}, {"sha": "05579796dab904454541400dda486cca609d4095", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 100i;\n     println!(\"{}\", i);"}, {"sha": "a1502c2eb8c0fa3ffda2425bf0e3984a7510fdf2", "filename": "src/test/run-pass/unique-match-discrim.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Issue #961\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn altsimple() {\n     match box true {\n       _ => { }"}, {"sha": "1388c6c5d2ba537fba545755b8928e9a91718f28", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![allow(unused_variable)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() {\n     let i = box 100i;"}, {"sha": "af82d3e14eae5831d532c1cb7fc3859e91b5ce6c", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let mut i;\n     i = box 100i;"}, {"sha": "791c4799bf07b104cdb449746b8a15337facbee5", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let i = box 100i;\n     let mut j;"}, {"sha": "c4f860d930b8c1f20a8f373d079baab59992eba6", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let mut i = box 0i;\n     *i = 1;"}, {"sha": "cec523a06712e025f2e4d1988ffa24ad13b44a03", "filename": "src/test/run-pass/unique-object-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-object-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #5192\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub trait EventLoop { }\n "}, {"sha": "eab775fc1db4e77e2a67e902f62410d1b6241df3", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n struct Foo {a: int, b: uint}\n "}, {"sha": "42a4b1a9c0cbfc5c11db1b5998e8f8955ce88dd0", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n enum bar { u(Box<int>), w(int), }\n \n pub fn main() {"}, {"sha": "ee975b9c81a03c6eb32c41eea4c67f7fbd984f01", "filename": "src/test/run-pass/unique-pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n fn simple() {\n     match box true {\n       box true => { }"}, {"sha": "756911d29fc8c3b3da3390898922bb17442186a6", "filename": "src/test/run-pass/unique-rec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-rec.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n struct X { x: int }\n \n pub fn main() {"}, {"sha": "90f4b2e63444067ee6992ec232b06a71883b8701", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::sync::mpsc::{channel, Sender};\n use std::thread::Thread;\n "}, {"sha": "13728585455578b2a6b751437ecef803f63c51a8", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::sync::mpsc::channel;\n \n pub fn main() {"}, {"sha": "cd3b59a69bab85707ee936548107c693db78e302", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::mem::swap;\n \n pub fn main() {"}, {"sha": "285100dd7197cbdce2620c5b14837580ad5147cc", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n //\n // ignore-lexer-test FIXME #15879\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n // Test sized-ness checking in substitution.\n \n // Unbounded."}, {"sha": "983152cd056d9ba7747bc856f5fed89c8323f275", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -10,6 +10,9 @@\n \n // Test structs with always-unsized fields.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::mem;\n use std::raw;\n "}, {"sha": "27945f469205fc148107599cb29eacf969e69495", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let _x = box 1i;\n     let lam_move = |&:| {};"}, {"sha": "22201c7d83fef43662442ccc0d363d13975554bb", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -13,6 +13,8 @@\n // Abstract: zero-fill to block after drop\n \n #![allow(path_statement)]\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main()\n {"}, {"sha": "371fd677bd981cb1f3a17614562f893f459fc2d2", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n fn f() {"}, {"sha": "40073c2b742197834e58828d75efab50f125ab63", "filename": "src/test/run-pass/vec-dst.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-dst.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n+\n pub fn main() {\n     // Tests for indexing into box/& [T; n]\n     let x: [int; 3] = [1, 2, 3];"}, {"sha": "6391893b9a4845c09475c4608965466935163ec4", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373cbab5b08d6630da58f28d2166c19afc327fa6/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=373cbab5b08d6630da58f28d2166c19afc327fa6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#![allow(unknown_features)]\n+#![feature(box_syntax)]\n \n pub fn main() { let _quux: Box<Vec<uint>> = box Vec::new(); }"}]}