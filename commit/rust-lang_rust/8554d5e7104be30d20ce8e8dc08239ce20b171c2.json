{"sha": "8554d5e7104be30d20ce8e8dc08239ce20b171c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTRkNWU3MTA0YmUzMGQyMGNlOGU4ZGMwODIzOWNlMjBiMTcxYzI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T04:52:03Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-20T04:52:03Z"}, "message": "doc: Mention tuple structs\n\n/cc: #4217", "tree": {"sha": "e6fe3f0f008e8f3bfbc976b2a93a9fa0904fcce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6fe3f0f008e8f3bfbc976b2a93a9fa0904fcce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8554d5e7104be30d20ce8e8dc08239ce20b171c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8554d5e7104be30d20ce8e8dc08239ce20b171c2", "html_url": "https://github.com/rust-lang/rust/commit/8554d5e7104be30d20ce8e8dc08239ce20b171c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8554d5e7104be30d20ce8e8dc08239ce20b171c2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99a2542f38a2d08b863d2e2ab73bfd64647e520", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99a2542f38a2d08b863d2e2ab73bfd64647e520", "html_url": "https://github.com/rust-lang/rust/commit/b99a2542f38a2d08b863d2e2ab73bfd64647e520"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "b16c56be63361a608b00dba6f74036ec9b825578", "filename": "doc/rust.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8554d5e7104be30d20ce8e8dc08239ce20b171c2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8554d5e7104be30d20ce8e8dc08239ce20b171c2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=8554d5e7104be30d20ce8e8dc08239ce20b171c2", "patch": "@@ -1072,6 +1072,15 @@ let p = Point {x: 10, y: 11};\n let px: int = p.x;\n ~~~~\n \n+A _tuple structure_ is a nominal [tuple type](#tuple-types), also defined with the keyword `struct`.\n+For example:\n+\n+~~~~\n+struct Point(int, int);\n+let p = Point(10, 11);\n+let px: int = match p { Point(x, _) => x };\n+~~~~\n+\n ### Enumerations\n \n An _enumeration_ is a simultaneous definition of a nominal [enumerated type](#enumerated-types) as well as a set of *constructors*,\n@@ -1534,22 +1543,32 @@ values.\n ~~~~~~~~{.ebnf .gram}\n struct_expr : expr_path '{' ident ':' expr\n                       [ ',' ident ':' expr ] *\n-                      [ \"..\" expr ] '}'\n+                      [ \"..\" expr ] '}' |\n+              expr_path '(' expr\n+                      [ ',' expr ] * ')'\n ~~~~~~~~\n \n+There are several forms of structure expressions.\n A _structure expression_ consists of the [path](#paths) of a [structure item](#structures),\n followed by a brace-enclosed list of one or more comma-separated name-value pairs,\n providing the field values of a new instance of the structure.\n A field name can be any identifier, and is separated from its value expression by a colon.\n To indicate that a field is mutable, the `mut` keyword is written before its name.\n \n+A _tuple structure expression_ constists of the [path](#paths) of a [structure item](#structures),\n+followed by a parenthesized list of one or more comma-separated expressions\n+(in other words, the path of a structured item followed by a tuple expression).\n+The structure item must be a tuple structure item.\n+\n The following are examples of structure expressions:\n \n ~~~~\n # struct Point { x: float, y: float }\n+# struct TuplePoint(float, float);\n # mod game { pub struct User { name: &str, age: uint, mut score: uint } } \n # use game;\n Point {x: 10f, y: 20f};\n+TuplePoint(10f, 20f);\n let u = game::User {name: \"Joe\", age: 35u, mut score: 100_000};\n ~~~~\n \n@@ -2597,6 +2616,7 @@ the resulting `struct` value will always be laid out in memory in the order spec\n The fields of a `struct` may be qualified by [visibility modifiers](#visibility-modifiers),\n to restrict access to implementation-private data in a structure.\n \n+A `tuple struct` type is just like a structure type, except that the fields are anonymous.\n \n ### Enumerated types\n "}, {"sha": "6ea0aa67e4e1eb4bd4262b48a496b07cb01fc11f", "filename": "doc/tutorial.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8554d5e7104be30d20ce8e8dc08239ce20b171c2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8554d5e7104be30d20ce8e8dc08239ce20b171c2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8554d5e7104be30d20ce8e8dc08239ce20b171c2", "patch": "@@ -902,6 +902,22 @@ match mytup {\n }\n ~~~~\n \n+## Tuple structs\n+\n+Rust also has _nominal tuples_, which behave like both structs and tuples,\n+except that nominal tuple types have names\n+(so `Foo(1, 2)` has a different type from `Bar(1, 2)`),\n+and nominal tuple types' _fields_ do not have names.\n+\n+For example:\n+~~~~\n+struct MyTup(int, int, float);\n+let mytup: MyTup = MyTup(10, 20, 30.0);\n+match mytup {\n+  MyTup(a, b, c) => log(info, a + b + (c as int))\n+}\n+~~~~\n+\n # Functions and methods\n \n We've already seen several function definitions. Like all other static"}]}