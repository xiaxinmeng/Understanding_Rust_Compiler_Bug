{"sha": "9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGU4ODIzYzdjYjU1M2YwNzUzNmZmMmNiZGFhYmRjZDBkYzljYzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T17:49:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T01:26:19Z"}, "message": "Use ty::type_is_sized() so that we handle projection types properly.", "tree": {"sha": "744df44c732fb1900ae06c207a85f93566736f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744df44c732fb1900ae06c207a85f93566736f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "html_url": "https://github.com/rust-lang/rust/commit/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6300a97216998ad92ac0be33ccced089f9d8bf0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6300a97216998ad92ac0be33ccced089f9d8bf0a", "html_url": "https://github.com/rust-lang/rust/commit/6300a97216998ad92ac0be33ccced089f9d8bf0a"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "6bc424fdf9528f3d6a78629a4d249dfff655ea1f", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "patch": "@@ -135,10 +135,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 t\n             }\n \n-            ty::ty_open(..) => {\n-                self.tcx().sess.bug(\"Cannot freshen an open existential type\");\n-            }\n-\n+            ty::ty_open(..) |\n             ty::ty_bool |\n             ty::ty_char |\n             ty::ty_int(..) |"}, {"sha": "756ddd91782b055b1dfac0897da3e3501e4f711d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "patch": "@@ -1457,11 +1457,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(AmbiguousBuiltin)\n             }\n \n+            ty::ty_open(ty) => {\n+                // these only crop up in trans, and represent an\n+                // \"opened\" unsized/existential type (one that has\n+                // been dereferenced)\n+                match bound {\n+                    ty::BoundCopy |\n+                    ty::BoundSync |\n+                    ty::BoundSend => {\n+                        Ok(If(vec!(ty)))\n+                    }\n+\n+                    ty::BoundSized => {\n+                        Err(Unimplemented)\n+                    }\n+                }\n+            }\n             ty::ty_err => {\n                 Ok(If(Vec::new()))\n             }\n \n-            ty::ty_open(_) |\n             ty::ty_infer(ty::FreshTy(_)) |\n             ty::ty_infer(ty::FreshIntTy(_)) => {\n                 self.tcx().sess.bug("}, {"sha": "057c6619d7269cb9d812b528b4997e44d30dd87d", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=9e4e8823c7cb553f07536ff2cbdaabdcd0dc9cc0", "patch": "@@ -50,7 +50,7 @@ use std::vec::Vec;\n use syntax::ast::Ident;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathName};\n-use syntax::codemap::Span;\n+use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use util::common::memoized;\n@@ -114,8 +114,9 @@ pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n }\n \n // Is the type's representation size known at compile time?\n-pub fn type_is_sized<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-ty::type_contents(cx, ty).is_sized(cx)\n+pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    let param_env = ty::empty_parameter_environment(tcx);\n+    ty::type_is_sized(&param_env, DUMMY_SP, ty)\n }\n \n pub fn lltype_is_sized<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {"}]}