{"sha": "6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNGI3ZmEwY2ZmNmJmZTE2MDgyZmVjMWQ4OTFmMDM5OGFlZDBjMjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:57:03Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:57Z"}, "message": "Rollup merge of #59206 - sntdevco:master, r=dtolnay\n\nImproved test output", "tree": {"sha": "0ccab0714e313e269c006fec306c070f16c06622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccab0714e313e269c006fec306c070f16c06622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCvkACgkQ/vbIBR0O\nATzaqxAAlFIKuC/H8RGuOSlp+IVfFLxJAfsC3AsbOwzoR1tnMHBrJMbwcQgboxOI\nYIoCOeF7rNqajeT0z6Md5oy0fbv74xTXffJFVMBId51hNM4FQE1WVFXfCl34iqHm\nNU0UCLjHrBWMhLbJ6uUgYDkcP41DYlF8TxfMMthR+5EV7gtcPPAEScdsNSGJqK1L\nilnqU6UZJ8xZ2ZMqYn0b0tOENrMB7vnLhr1ojsdrfpUN0MqwecnaH9aMGxkM75MJ\nOjF1/+j7XNae8cdtTw4fR+0SuzFOxk0aEF9rs8lg10vUKccakb0FOGbAnwxPQUjF\nHYf24JGSqzgkkbIS970mY7i/pMoLdVRfvAE2+baY2jan8jFfbxT0bY0uC//9vxBK\nbycdl7lq9FbQQXhAvMnBetnJ6TDbKK42JYnN1C4N04nc+4Mh/ic2LkfIeLIQ6Rd4\nO0ccb+ejO1BjOtyQY9hoKDh/vYrUeHEma1tCviUGuvqofeAEngH7tFo/jARBvKJJ\n1BlymMjX66l8K5XQqF+6ytOT3aSETskglyI0+cqFFP38fg46LVeTx2PAGa8jf2mj\nmpV0VoXfuaFP9axpbWfhmXWrcTiOWKHpM8Fmv/A1naKzuNEAhLGZdkTz+nUp90qs\nYPlBE9g/ytb6C+I46WWhRO8yvG8+FouEerrHhJIy2AuRY3WmKPY=\n=BdHw\n-----END PGP SIGNATURE-----", "payload": "tree 0ccab0714e313e269c006fec306c070f16c06622\nparent 2e1104fd9305dd7427da6978b02fdb4428543d60\nparent e9e5a75fd2bc5f7908642129aa462ee15ce17a3b\nauthor kennytm <kennytm@gmail.com> 1552719423 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747257 +0800\n\nRollup merge of #59206 - sntdevco:master, r=dtolnay\n\nImproved test output\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "html_url": "https://github.com/rust-lang/rust/commit/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1104fd9305dd7427da6978b02fdb4428543d60", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1104fd9305dd7427da6978b02fdb4428543d60", "html_url": "https://github.com/rust-lang/rust/commit/2e1104fd9305dd7427da6978b02fdb4428543d60"}, {"sha": "e9e5a75fd2bc5f7908642129aa462ee15ce17a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5a75fd2bc5f7908642129aa462ee15ce17a3b", "html_url": "https://github.com/rust-lang/rust/commit/e9e5a75fd2bc5f7908642129aa462ee15ce17a3b"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b197516403f7818e6a6b9b7a0f2cc08fb5dc799f", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "patch": "@@ -7,7 +7,7 @@ fn test_le() {\n     assert!(\"\" <= \"\");\n     assert!(\"\" <= \"foo\");\n     assert!(\"foo\" <= \"foo\");\n-    assert!(\"foo\" != \"bar\");\n+    assert_ne!(\"foo\", \"bar\");\n }\n \n #[test]"}, {"sha": "7bd7d1874101af0083f3ff9432cf67f6a0b059f8", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "patch": "@@ -5,15 +5,15 @@ use std::mem::drop;\n #[test]\n fn smoketest_cell() {\n     let x = Cell::new(10);\n-    assert!(x == Cell::new(10));\n-    assert!(x.get() == 10);\n+    assert_eq!(x, Cell::new(10));\n+    assert_eq!(x.get(), 10);\n     x.set(20);\n-    assert!(x == Cell::new(20));\n-    assert!(x.get() == 20);\n+    assert_eq!(x, Cell::new(20));\n+    assert_eq!(x.get(), 20);\n \n     let y = Cell::new((30, 40));\n-    assert!(y == Cell::new((30, 40)));\n-    assert!(y.get() == (30, 40));\n+    assert_eq!(y, Cell::new((30, 40)));\n+    assert_eq!(y.get(), (30, 40));\n }\n \n #[test]"}, {"sha": "4881f79ec248aee8d20c00f4e91a6fd7b8dee2ec", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "patch": "@@ -12,7 +12,7 @@ mod tests {\n     fn test_overflows() {\n         assert!(MAX > 0);\n         assert!(MIN <= 0);\n-        assert!(MIN + MAX + 1 == 0);\n+        assert_eq!(MIN + MAX + 1, 0);\n     }\n \n     #[test]\n@@ -22,22 +22,22 @@ mod tests {\n \n     #[test]\n     fn test_rem_euclid() {\n-        assert!((-1 as $T).rem_euclid(MIN) == MAX);\n+        assert_eq!((-1 as $T).rem_euclid(MIN), MAX);\n     }\n \n     #[test]\n     pub fn test_abs() {\n-        assert!((1 as $T).abs() == 1 as $T);\n-        assert!((0 as $T).abs() == 0 as $T);\n-        assert!((-1 as $T).abs() == 1 as $T);\n+        assert_eq!((1 as $T).abs(), 1 as $T);\n+        assert_eq!((0 as $T).abs(), 0 as $T);\n+        assert_eq!((-1 as $T).abs(), 1 as $T);\n     }\n \n     #[test]\n     fn test_signum() {\n-        assert!((1 as $T).signum() == 1 as $T);\n-        assert!((0 as $T).signum() == 0 as $T);\n-        assert!((-0 as $T).signum() == 0 as $T);\n-        assert!((-1 as $T).signum() == -1 as $T);\n+        assert_eq!((1 as $T).signum(), 1 as $T);\n+        assert_eq!((0 as $T).signum(), 0 as $T);\n+        assert_eq!((-0 as $T).signum(), 0 as $T);\n+        assert_eq!((-1 as $T).signum(), -1 as $T);\n     }\n \n     #[test]\n@@ -58,12 +58,12 @@ mod tests {\n \n     #[test]\n     fn test_bitwise_operators() {\n-        assert!(0b1110 as $T == (0b1100 as $T).bitor(0b1010 as $T));\n-        assert!(0b1000 as $T == (0b1100 as $T).bitand(0b1010 as $T));\n-        assert!(0b0110 as $T == (0b1100 as $T).bitxor(0b1010 as $T));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(1));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(1));\n-        assert!(-(0b11 as $T) - (1 as $T) == (0b11 as $T).not());\n+        assert_eq!(0b1110 as $T, (0b1100 as $T).bitor(0b1010 as $T));\n+        assert_eq!(0b1000 as $T, (0b1100 as $T).bitand(0b1010 as $T));\n+        assert_eq!(0b0110 as $T, (0b1100 as $T).bitxor(0b1010 as $T));\n+        assert_eq!(0b1110 as $T, (0b0111 as $T).shl(1));\n+        assert_eq!(0b0111 as $T, (0b1110 as $T).shr(1));\n+        assert_eq!(-(0b11 as $T) - (1 as $T), (0b11 as $T).not());\n     }\n \n     const A: $T = 0b0101100;\n@@ -75,17 +75,17 @@ mod tests {\n \n     #[test]\n     fn test_count_ones() {\n-        assert!(A.count_ones() == 3);\n-        assert!(B.count_ones() == 2);\n-        assert!(C.count_ones() == 5);\n+        assert_eq!(A.count_ones(), 3);\n+        assert_eq!(B.count_ones(), 2);\n+        assert_eq!(C.count_ones(), 5);\n     }\n \n     #[test]\n     fn test_count_zeros() {\n         let bits = mem::size_of::<$T>() * 8;\n-        assert!(A.count_zeros() == bits as u32 - 3);\n-        assert!(B.count_zeros() == bits as u32 - 2);\n-        assert!(C.count_zeros() == bits as u32 - 5);\n+        assert_eq!(A.count_zeros(), bits as u32 - 3);\n+        assert_eq!(B.count_zeros(), bits as u32 - 2);\n+        assert_eq!(C.count_zeros(), bits as u32 - 5);\n     }\n \n     #[test]\n@@ -148,9 +148,9 @@ mod tests {\n \n     #[test]\n     fn test_signed_checked_div() {\n-        assert!((10 as $T).checked_div(2) == Some(5));\n-        assert!((5 as $T).checked_div(0) == None);\n-        assert!(isize::MIN.checked_div(-1) == None);\n+        assert_eq!((10 as $T).checked_div(2), Some(5));\n+        assert_eq!((5 as $T).checked_div(0), None);\n+        assert_eq!(isize::MIN.checked_div(-1), None);\n     }\n \n     #[test]"}, {"sha": "78cf07119e729770a6c1ecf83c77efc912474651", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "patch": "@@ -7,23 +7,23 @@ fn test_range() {\n     let r = Range { start: 2, end: 10 };\n     let mut count = 0;\n     for (i, ri) in r.enumerate() {\n-        assert!(ri == i + 2);\n+        assert_eq!(ri, i + 2);\n         assert!(ri >= 2 && ri < 10);\n         count += 1;\n     }\n-    assert!(count == 8);\n+    assert_eq!(count, 8);\n }\n \n #[test]\n fn test_range_from() {\n     let r = RangeFrom { start: 2 };\n     let mut count = 0;\n     for (i, ri) in r.take(10).enumerate() {\n-        assert!(ri == i + 2);\n+        assert_eq!(ri, i + 2);\n         assert!(ri >= 2 && ri < 12);\n         count += 1;\n     }\n-    assert!(count == 10);\n+    assert_eq!(count, 10);\n }\n \n #[test]"}, {"sha": "cd2c17220655af8db2f75cabf74458b14f3d7f8a", "filename": "src/test/run-pass/array-slice-vec/estr-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4b7fa0cff6bfe16082fec1d891f0398aed0c24/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs?ref=6d4b7fa0cff6bfe16082fec1d891f0398aed0c24", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n \n     let z : &str = \"thing\";\n     assert_eq!(v, x);\n-    assert!(x != z);\n+    assert_ne!(x, z);\n \n     let a = \"aaaa\";\n     let b = \"bbbb\";\n@@ -26,23 +26,23 @@ pub fn main() {\n \n     assert!(a < b);\n     assert!(a <= b);\n-    assert!(a != b);\n+    assert_ne!(a, b);\n     assert!(b >= a);\n     assert!(b > a);\n \n     println!(\"{}\", b);\n \n     assert!(a < c);\n     assert!(a <= c);\n-    assert!(a != c);\n+    assert_ne!(a, c);\n     assert!(c >= a);\n     assert!(c > a);\n \n     println!(\"{}\", c);\n \n     assert!(c < cc);\n     assert!(c <= cc);\n-    assert!(c != cc);\n+    assert_ne!(c, cc);\n     assert!(cc >= c);\n     assert!(cc > c);\n "}]}