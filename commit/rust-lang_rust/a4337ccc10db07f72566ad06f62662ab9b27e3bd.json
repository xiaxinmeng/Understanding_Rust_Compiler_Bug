{"sha": "a4337ccc10db07f72566ad06f62662ab9b27e3bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzM3Y2NjMTBkYjA3ZjcyNTY2YWQwNmY2MjY2MmFiOWIyN2UzYmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-14T21:35:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-15T18:03:34Z"}, "message": "Use `LocalDefId` for import IDs in trait map", "tree": {"sha": "3947d669cf45b31ea3743020adfcbe8d895d8538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3947d669cf45b31ea3743020adfcbe8d895d8538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4337ccc10db07f72566ad06f62662ab9b27e3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4337ccc10db07f72566ad06f62662ab9b27e3bd", "html_url": "https://github.com/rust-lang/rust/commit/a4337ccc10db07f72566ad06f62662ab9b27e3bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4337ccc10db07f72566ad06f62662ab9b27e3bd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "html_url": "https://github.com/rust-lang/rust/commit/ff4a2533a0720f9cdd86e02eafa3725f07aa7752"}], "stats": {"total": 83, "additions": 26, "deletions": 57}, "files": [{"sha": "eb5cd5391236868c435c167aae46912b29322dd2", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -12,6 +12,7 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -2651,25 +2652,11 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n #[derive(Clone, Debug)]\n-pub struct TraitCandidate<ID = HirId> {\n+pub struct TraitCandidate {\n     pub def_id: DefId,\n-    pub import_ids: SmallVec<[ID; 1]>,\n+    pub import_ids: SmallVec<[LocalDefId; 1]>,\n }\n \n-impl<ID> TraitCandidate<ID> {\n-    pub fn map_import_ids<F, T>(self, f: F) -> TraitCandidate<T>\n-    where\n-        F: Fn(ID) -> T,\n-    {\n-        let TraitCandidate { def_id, import_ids } = self;\n-        let import_ids = import_ids.into_iter().map(f).collect();\n-        TraitCandidate { def_id, import_ids }\n-    }\n-}\n-\n-// Trait method resolution\n-pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n-\n #[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),"}, {"sha": "78b9167ddd9679ca96b4f9da13b4bfd28259fe37", "filename": "src/librustc_middle/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_middle%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_middle%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fich%2Fimpls_hir.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -210,16 +210,15 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n-    type KeyType = (DefPathHash, SmallVec<[(DefPathHash, hir::ItemLocalId); 1]>);\n+    type KeyType = (DefPathHash, SmallVec<[DefPathHash; 1]>);\n \n     fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> Self::KeyType {\n         let hir::TraitCandidate { def_id, import_ids } = self;\n \n-        let import_keys = import_ids\n-            .iter()\n-            .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner), hir_id.local_id))\n-            .collect();\n-        (hcx.def_path_hash(*def_id), import_keys)\n+        (\n+            hcx.def_path_hash(*def_id),\n+            import_ids.iter().map(|def_id| hcx.local_def_path_hash(*def_id)).collect(),\n+        )\n     }\n }\n "}, {"sha": "d3160973f23051601e141738a2be3aa9b4bee78a", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -121,7 +121,7 @@ pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n+    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub export_map: ExportMap<LocalDefId>,"}, {"sha": "61f20df8cc6c03151a23cee02aaf63f95c88d501", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -24,6 +24,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::TraitCandidate;\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n@@ -2188,7 +2189,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         mut ident: Ident,\n         ns: Namespace,\n-    ) -> Vec<TraitCandidate<NodeId>> {\n+    ) -> Vec<TraitCandidate> {\n         debug!(\"(getting traits containing item) looking for '{}'\", ident.name);\n \n         let mut found_traits = Vec::new();\n@@ -2233,7 +2234,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         module: Module<'a>,\n-        found_traits: &mut Vec<TraitCandidate<NodeId>>,\n+        found_traits: &mut Vec<TraitCandidate>,\n     ) {\n         assert!(ns == TypeNS || ns == ValueNS);\n         let mut traits = module.traits.borrow_mut();\n@@ -2292,13 +2293,13 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         mut kind: &NameBindingKind<'_>,\n         trait_name: Ident,\n-    ) -> SmallVec<[NodeId; 1]> {\n+    ) -> SmallVec<[LocalDefId; 1]> {\n         let mut import_ids = smallvec![];\n         while let NameBindingKind::Import { import, binding, .. } = kind {\n             let id = self.r.definitions.local_def_id(import.id);\n             self.r.maybe_unused_trait_imports.insert(id);\n             self.r.add_to_glob_map(&import, trait_name);\n-            import_ids.push(import.id);\n+            import_ids.push(id);\n             kind = &binding.kind;\n         }\n         import_ids"}, {"sha": "cf7f1af99d8bda50876985b1dd36f2268403846a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -38,7 +38,7 @@ use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::{DefKey, Definitions};\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc_hir::TraitMap;\n+use rustc_hir::TraitCandidate;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::hir::exports::ExportMap;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoaderDyn};\n@@ -879,7 +879,7 @@ pub struct Resolver<'a> {\n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<LocalDefId>,\n-    trait_map: TraitMap<NodeId>,\n+    trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items\n@@ -1285,14 +1285,7 @@ impl<'a> Resolver<'a> {\n         let trait_map = self\n             .trait_map\n             .into_iter()\n-            .map(|(k, v)| {\n-                (\n-                    definitions.node_id_to_hir_id(k),\n-                    v.into_iter()\n-                        .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect(),\n-                )\n-            })\n+            .map(|(k, v)| (definitions.node_id_to_hir_id(k), v))\n             .collect();\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n@@ -1323,17 +1316,7 @@ impl<'a> Resolver<'a> {\n             trait_map: self\n                 .trait_map\n                 .iter()\n-                .map(|(&k, v)| {\n-                    (\n-                        self.definitions.node_id_to_hir_id(k),\n-                        v.iter()\n-                            .cloned()\n-                            .map(|tc| {\n-                                tc.map_import_ids(|id| self.definitions.node_id_to_hir_id(id))\n-                            })\n-                            .collect(),\n-                    )\n-                })\n+                .map(|(&k, v)| (self.definitions.node_id_to_hir_id(k), v.clone()))\n                 .collect(),\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),"}, {"sha": "e51523c5c2387e21a317ed963b3e969afb1b42ff", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -194,11 +194,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n         for import_id in &pick.import_ids {\n-            let import_def_id = self.tcx.hir().local_def_id(*import_id);\n-            debug!(\"used_trait_import: {:?}\", import_def_id);\n+            debug!(\"used_trait_import: {:?}\", import_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap()\n-                .insert(import_def_id.to_def_id());\n+                .insert(import_id.to_def_id());\n         }\n \n         self.tcx.check_stability(pick.item.def_id, Some(call_expr.hir_id), span);\n@@ -461,9 +460,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut tables = self.tables.borrow_mut();\n             let used_trait_imports = Lrc::get_mut(&mut tables.used_trait_imports).unwrap();\n             for import_id in pick.import_ids {\n-                let import_def_id = tcx.hir().local_def_id(import_id);\n-                debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n-                used_trait_imports.insert(import_def_id.to_def_id());\n+                debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_id);\n+                used_trait_imports.insert(import_id.to_def_id());\n             }\n         }\n "}, {"sha": "89616b1fc7e2f38b544b890927f203dc42407eeb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4337ccc10db07f72566ad06f62662ab9b27e3bd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a4337ccc10db07f72566ad06f62662ab9b27e3bd", "patch": "@@ -28,6 +28,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::config::nightly_options;\n use rustc_session::lint;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n@@ -129,7 +130,7 @@ struct Candidate<'tcx> {\n     xform_ret_ty: Option<Ty<'tcx>>,\n     item: ty::AssocItem,\n     kind: CandidateKind<'tcx>,\n-    import_ids: SmallVec<[hir::HirId; 1]>,\n+    import_ids: SmallVec<[LocalDefId; 1]>,\n }\n \n #[derive(Debug)]\n@@ -158,7 +159,7 @@ enum ProbeResult {\n pub struct Pick<'tcx> {\n     pub item: ty::AssocItem,\n     pub kind: PickKind<'tcx>,\n-    pub import_ids: SmallVec<[hir::HirId; 1]>,\n+    pub import_ids: SmallVec<[LocalDefId; 1]>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -930,7 +931,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     fn assemble_extension_candidates_for_trait(\n         &mut self,\n-        import_ids: &SmallVec<[hir::HirId; 1]>,\n+        import_ids: &SmallVec<[LocalDefId; 1]>,\n         trait_def_id: DefId,\n     ) -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);"}]}