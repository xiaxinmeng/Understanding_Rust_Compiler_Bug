{"sha": "3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "node_id": "C_kwDOAAsO6NoAKDNkYjJiY2Y0ZWJiMDhmN2ZiZTNkZTdmZGVkNDVlOTY2MzljYTNlNjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-18T01:52:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-18T01:53:01Z"}, "message": "Remove return type sized check hack from hir typeck", "tree": {"sha": "b5ee059ffd2f4866cd937e23548df74b6e277bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ee059ffd2f4866cd937e23548df74b6e277bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "html_url": "https://github.com/rust-lang/rust/commit/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795fdf7d619b06ad508e2bd537ef5a4f9d5d4298", "url": "https://api.github.com/repos/rust-lang/rust/commits/795fdf7d619b06ad508e2bd537ef5a4f9d5d4298", "html_url": "https://github.com/rust-lang/rust/commit/795fdf7d619b06ad508e2bd537ef5a4f9d5d4298"}], "stats": {"total": 101, "additions": 9, "deletions": 92}, "files": [{"sha": "186ac536c6e5aa5bbb7c409f639af977741375d8", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -103,24 +103,8 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     fcx.typeck_results.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n \n-    if let ty::Dynamic(_, _, ty::Dyn) = declared_ret_ty.kind() {\n-        // FIXME: We need to verify that the return type is `Sized` after the return expression has\n-        // been evaluated so that we have types available for all the nodes being returned, but that\n-        // requires the coerced evaluated type to be stored. Moving `check_return_expr` before this\n-        // causes unsized errors caused by the `declared_ret_ty` to point at the return expression,\n-        // while keeping the current ordering we will ignore the tail expression's type because we\n-        // don't know it yet. We can't do `check_expr_kind` while keeping `check_return_expr`\n-        // because we will trigger \"unreachable expression\" lints unconditionally.\n-        // Because of all of this, we perform a crude check to know whether the simplest `!Sized`\n-        // case that a newcomer might make, returning a bare trait, and in that case we populate\n-        // the tail expression's type so that the suggestion will be correct, but ignore all other\n-        // possible cases.\n-        fcx.check_expr(&body.value);\n-        fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n-    } else {\n-        fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n-        fcx.check_return_expr(&body.value, false);\n-    }\n+    fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n+    fcx.check_return_expr(&body.value, false);\n \n     // We insert the deferred_generator_interiors entry after visiting the body.\n     // This ensures that all nested generators appear before the entry of this generator."}, {"sha": "af368203de021bc075245e2f4bfa253f68dfb666", "filename": "tests/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -26,7 +26,7 @@ fn bax() -> dyn Trait { //~ ERROR E0746\n     if true {\n         Struct\n     } else {\n-        42 //~ ERROR `if` and `else` have incompatible types\n+        42\n     }\n }\n fn bam() -> Box<dyn Trait> {"}, {"sha": "ed9261d0de578f4d71f6ee603d78a2798e056e68", "filename": "tests/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -100,18 +100,6 @@ LL |     }\n LL ~     Box::new(42)\n    |\n \n-error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:9\n-   |\n-LL | /     if true {\n-LL | |         Struct\n-   | |         ------ expected because of this\n-LL | |     } else {\n-LL | |         42\n-   | |         ^^ expected `Struct`, found integer\n-LL | |     }\n-   | |_____- `if` and `else` have incompatible types\n-\n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:13\n    |\n@@ -305,7 +293,7 @@ LL |     } else {\n LL ~         Box::new(42)\n    |\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0746.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "a8a6288eb56fb3a349d0a6964923aed195a41071", "filename": "tests/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -77,7 +77,7 @@ fn hat() -> dyn std::fmt::Display { //~ ERROR return type cannot have an unboxed\n fn pug() -> dyn std::fmt::Display { //~ ERROR return type cannot have an unboxed trait object\n     match 13 {\n         0 => 0i32,\n-        1 => 1u32, //~ ERROR `match` arms have incompatible types\n+        1 => 1u32,\n         _ => 2u32,\n     }\n }\n@@ -86,7 +86,7 @@ fn man() -> dyn std::fmt::Display { //~ ERROR return type cannot have an unboxed\n     if false {\n         0i32\n     } else {\n-        1u32 //~ ERROR `if` and `else` have incompatible types\n+        1u32\n     }\n }\n "}, {"sha": "9205d74504f6f2d6c43e77213cc7338d66909709", "filename": "tests/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -186,23 +186,6 @@ LL |         _ => {\n LL ~             Box::new(1u32)\n    |\n \n-error[E0308]: `match` arms have incompatible types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:80:14\n-   |\n-LL | /     match 13 {\n-LL | |         0 => 0i32,\n-   | |              ---- this is found to be of type `i32`\n-LL | |         1 => 1u32,\n-   | |              ^^^^ expected `i32`, found `u32`\n-LL | |         _ => 2u32,\n-LL | |     }\n-   | |_____- `match` arms have incompatible types\n-   |\n-help: change the type of the numeric literal from `u32` to `i32`\n-   |\n-LL |         1 => 1i32,\n-   |               ~~~\n-\n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:77:13\n    |\n@@ -222,23 +205,6 @@ LL ~         1 => Box::new(1u32),\n LL ~         _ => Box::new(2u32),\n    |\n \n-error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:89:9\n-   |\n-LL | /     if false {\n-LL | |         0i32\n-   | |         ---- expected because of this\n-LL | |     } else {\n-LL | |         1u32\n-   | |         ^^^^ expected `i32`, found `u32`\n-LL | |     }\n-   | |_____- `if` and `else` have incompatible types\n-   |\n-help: change the type of the numeric literal from `u32` to `i32`\n-   |\n-LL |         1i32\n-   |          ~~~\n-\n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:85:13\n    |\n@@ -258,7 +224,7 @@ LL |     } else {\n LL ~         Box::new(1u32)\n    |\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0308, E0746.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "321c2ebf5a12244eb23e27231f7670743e054788", "filename": "tests/ui/unsized/box-instead-of-dyn-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.rs?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -8,7 +8,6 @@ fn print_on_or_the_other<'a>(a: i32, b: &'a String) -> dyn Fn() + 'a {\n         move || println!(\"{a}\")\n     } else {\n         Box::new(move || println!(\"{}\", b))\n-        //~^ ERROR `if` and `else` have incompatible types\n     }\n }\n "}, {"sha": "6087f5c5465266f570d9f647c5837c9897367ee7", "filename": "tests/ui/unsized/box-instead-of-dyn-fn.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr?ref=3db2bcf4ebb08f7fbe3de7fded45e96639ca3e68", "patch": "@@ -1,22 +1,3 @@\n-error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/box-instead-of-dyn-fn.rs:10:9\n-   |\n-LL | /     if a % 2 == 0 {\n-LL | |         move || println!(\"{a}\")\n-   | |         -----------------------\n-   | |         |\n-   | |         the expected closure\n-   | |         expected because of this\n-LL | |     } else {\n-LL | |         Box::new(move || println!(\"{}\", b))\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found `Box<[closure@box-instead-of-dyn-fn.rs:10:18]>`\n-LL | |\n-LL | |     }\n-   | |_____- `if` and `else` have incompatible types\n-   |\n-   = note: expected closure `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:16]`\n-               found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:25]>`\n-\n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/box-instead-of-dyn-fn.rs:5:56\n    |\n@@ -35,7 +16,6 @@ LL |     if a % 2 == 0 {\n LL ~         Box::new(move || println!(\"{a}\"))\n    |\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0746.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0746`."}]}