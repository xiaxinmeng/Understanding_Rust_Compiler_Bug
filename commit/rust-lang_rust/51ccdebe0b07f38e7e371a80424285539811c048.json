{"sha": "51ccdebe0b07f38e7e371a80424285539811c048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxY2NkZWJlMGIwN2YzOGU3ZTM3MWE4MDQyNDI4NTUzOTgxMWMwNDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T16:29:13Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:00:00Z"}, "message": "Unify associated item parsing more.", "tree": {"sha": "0aafce463717a2c88160c21292524474b5be0631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aafce463717a2c88160c21292524474b5be0631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ccdebe0b07f38e7e371a80424285539811c048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ccdebe0b07f38e7e371a80424285539811c048", "html_url": "https://github.com/rust-lang/rust/commit/51ccdebe0b07f38e7e371a80424285539811c048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ccdebe0b07f38e7e371a80424285539811c048/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "html_url": "https://github.com/rust-lang/rust/commit/0d8a9d74e3bbeed1ad787e1b563e6884496728b2"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "0126297a3586e6173d77913a801b3529fe1b7550", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/51ccdebe0b07f38e7e371a80424285539811c048/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ccdebe0b07f38e7e371a80424285539811c048/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=51ccdebe0b07f38e7e371a80424285539811c048", "patch": "@@ -669,25 +669,6 @@ impl<'a> Parser<'a> {\n         Ok((impl_items, attrs))\n     }\n \n-    /// Parses an impl item.\n-    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n-        maybe_whole!(self, NtImplItem, |x| x);\n-        let attrs = self.parse_outer_attributes()?;\n-        let mut unclosed_delims = vec![];\n-        let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_assoc_item(at_end, attrs, |_| true);\n-            unclosed_delims.append(&mut this.unclosed_delims);\n-            item\n-        })?;\n-        self.unclosed_delims.append(&mut unclosed_delims);\n-\n-        // See `parse_item` for why this clause is here.\n-        if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-            item.tokens = Some(tokens);\n-        }\n-        Ok(item)\n-    }\n-\n     /// Parses defaultness (i.e., `default` or nothing).\n     fn parse_defaultness(&mut self) -> Defaultness {\n         // `pub` is included for better error messages\n@@ -802,20 +783,30 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses the items in a trait declaration.\n+    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n+        maybe_whole!(self, NtImplItem, |x| x);\n+        self.parse_assoc_item(at_end, |_| true)\n+    }\n+\n     pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n         maybe_whole!(self, NtTraitItem, |x| x);\n+        // This is somewhat dubious; We don't want to allow\n+        // param names to be left off if there is a definition...\n+        //\n+        // We don't allow param names to be left off in edition 2018.\n+        self.parse_assoc_item(at_end, |t| t.span.rust_2018())\n+    }\n+\n+    /// Parses associated items.\n+    fn parse_assoc_item(\n+        &mut self,\n+        at_end: &mut bool,\n+        is_name_required: fn(&token::Token) -> bool,\n+    ) -> PResult<'a, AssocItem> {\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            // This is somewhat dubious; We don't want to allow\n-            // param names to be left off if there is a definition...\n-            //\n-            // We don't allow param names to be left off in edition 2018.\n-            //\n-            // FIXME(Centril): bake closure into param parsing.\n-            // Also add semantic restrictions and add tests.\n-            let item = this.parse_assoc_item(at_end, attrs, |t| t.span.rust_2018());\n+            let item = this.parse_assoc_item_(at_end, attrs, is_name_required);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -827,7 +818,7 @@ impl<'a> Parser<'a> {\n         Ok(item)\n     }\n \n-    fn parse_assoc_item(\n+    fn parse_assoc_item_(\n         &mut self,\n         at_end: &mut bool,\n         mut attrs: Vec<Attribute>,"}]}