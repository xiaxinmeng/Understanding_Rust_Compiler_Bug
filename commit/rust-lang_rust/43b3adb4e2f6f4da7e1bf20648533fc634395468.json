{"sha": "43b3adb4e2f6f4da7e1bf20648533fc634395468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYjNhZGI0ZTJmNmY0ZGE3ZTFiZjIwNjQ4NTMzZmM2MzQzOTU0Njg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-05T23:14:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T23:14:09Z"}, "message": "Rollup merge of #81580 - rodrimati1992:patch-2, r=dtolnay\n\nDocument how `MaybeUninit<Struct>` can be initialized.", "tree": {"sha": "ff2209b401953ae58c17a0b8c1b0a44bb003f2aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2209b401953ae58c17a0b8c1b0a44bb003f2aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43b3adb4e2f6f4da7e1bf20648533fc634395468", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHdFBCRBK7hj4Ov3rIwAAdHIIABo2hxY4mX3N/tBGVs6yTFBd\nQeOgem6hzHX/ZSlOevlXQQXpEns+7AT2vQTkQ3OaN1N7gIp43fzlzZaksOopAMXo\nsoDv46h6O3PcdUN5mywylNmXXbYv/aFSRBfqSs/9dOyzwdwOmdNjkc4pHcbLc1aV\nQ2i9Z3ItBCCeBLuctIIm6cQ+JEb+y6BG8XYVsQpoCIk8P0yrqhvLu1r+97DdvJkG\nrPeobfUGKS0oAWmXrpu84XYg/CB2h3k3PTLedocbOPkk53NVOKMfhDy6uUKXGTyg\noi13wRFRkuKoM1MuHB3n4iLPf5GKG3J4WRz7yqB3gdiaw4vSMFlA3NbU2J3Fl5g=\n=zG5n\n-----END PGP SIGNATURE-----\n", "payload": "tree ff2209b401953ae58c17a0b8c1b0a44bb003f2aa\nparent cc882fc3bedec5047f055e5ff5a1908e730130bb\nparent 21c2343d3f95348b10b3b6ff73c3c237eea89c32\nauthor Mara Bos <m-ou.se@m-ou.se> 1612566849 +0100\ncommitter GitHub <noreply@github.com> 1612566849 +0100\n\nRollup merge of #81580 - rodrimati1992:patch-2, r=dtolnay\n\nDocument how `MaybeUninit<Struct>` can be initialized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43b3adb4e2f6f4da7e1bf20648533fc634395468", "html_url": "https://github.com/rust-lang/rust/commit/43b3adb4e2f6f4da7e1bf20648533fc634395468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43b3adb4e2f6f4da7e1bf20648533fc634395468/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc882fc3bedec5047f055e5ff5a1908e730130bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc882fc3bedec5047f055e5ff5a1908e730130bb", "html_url": "https://github.com/rust-lang/rust/commit/cc882fc3bedec5047f055e5ff5a1908e730130bb"}, {"sha": "21c2343d3f95348b10b3b6ff73c3c237eea89c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c2343d3f95348b10b3b6ff73c3c237eea89c32", "html_url": "https://github.com/rust-lang/rust/commit/21c2343d3f95348b10b3b6ff73c3c237eea89c32"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "3760f5c47948146598646c81886c6a81287e2942", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/43b3adb4e2f6f4da7e1bf20648533fc634395468/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b3adb4e2f6f4da7e1bf20648533fc634395468/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=43b3adb4e2f6f4da7e1bf20648533fc634395468", "patch": "@@ -172,11 +172,42 @@ use crate::ptr;\n ///\n /// ## Initializing a struct field-by-field\n ///\n-/// There is currently no supported way to create a raw pointer or reference\n-/// to a field of a struct inside `MaybeUninit<Struct>`. That means it is not possible\n-/// to create a struct by calling `MaybeUninit::uninit::<Struct>()` and then writing\n-/// to its fields.\n+/// You can use `MaybeUninit<T>`, and the [`std::ptr::addr_of_mut`] macro, to initialize structs field by field:\n ///\n+/// ```rust\n+/// use std::mem::MaybeUninit;\n+/// use std::ptr::addr_of_mut;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// pub struct Foo {\n+///     name: String,\n+///     list: Vec<u8>,\n+/// }\n+///\n+/// let foo = {\n+///     let mut uninit: MaybeUninit<Foo> = MaybeUninit::uninit();\n+///     let ptr = uninit.as_mut_ptr();\n+///\n+///     // Initializing the `name` field\n+///     unsafe { addr_of_mut!((*ptr).name).write(\"Bob\".to_string()); }\n+///\n+///     // Initializing the `list` field\n+///     // If there is a panic here, then the `String` in the `name` field leaks.\n+///     unsafe { addr_of_mut!((*ptr).list).write(vec![0, 1, 2]); }\n+///\n+///     // All the fields are initialized, so we call `assume_init` to get an initialized Foo.\n+///     unsafe { uninit.assume_init() }\n+/// };\n+///\n+/// assert_eq!(\n+///     foo,\n+///     Foo {\n+///         name: \"Bob\".to_string(),\n+///         list: vec![0, 1, 2]\n+///     }\n+/// );\n+/// ```\n+/// [`std::ptr::addr_of_mut`]: crate::ptr::addr_of_mut\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Layout"}]}