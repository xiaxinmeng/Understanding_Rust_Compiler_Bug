{"sha": "55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTZmZGI3ZmRhZGQwOWNhOTNmOTFiYjY2MWE1Nzk0MmZkNmVkOGI=", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-01-05T20:51:45Z"}, "committer": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-01-05T20:51:45Z"}, "message": "Add std::process::Command::envs()\n\nCommand::envs() adds a vector of key-value pairs to the child\nprocess environment all at once.  Suggested in #38526.", "tree": {"sha": "053cee43ad511894243133adf909e7dc0751cf1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053cee43ad511894243133adf909e7dc0751cf1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "html_url": "https://github.com/rust-lang/rust/commit/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e5b7d96af721b98474f6d4982b5eb594cd022c", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e5b7d96af721b98474f6d4982b5eb594cd022c", "html_url": "https://github.com/rust-lang/rust/commit/74e5b7d96af721b98474f6d4982b5eb594cd022c"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "676ae286eaa507c41b5383918d5854c5063acdb7", "filename": "src/libstd/process.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "patch": "@@ -377,6 +377,38 @@ impl Command {\n         self\n     }\n \n+    /// Add or update multiple environment variable mappings.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    /// use std::env;\n+    ///\n+    /// let filtered_env : Vec<(String, String)> =\n+    ///     env::vars().filter(|&(ref k, _)|\n+    ///         k == \"TERM\" || k == \"TZ\" || k == \"LANG\" || k == \"PATH\"\n+    ///     ).collect();\n+    ///\n+    /// Command::new(\"printenv\")\n+    ///         .stdin(Stdio::null())\n+    ///         .stdout(Stdio::inherit())\n+    ///         .env_clear()\n+    ///         .envs(&filtered_env)\n+    ///         .spawn()\n+    ///         .expect(\"printenv failed to start\");\n+    /// ```\n+    #[stable(feature = \"process\", since = \"1.16.0\")]\n+    pub fn envs<K, V>(&mut self, vars: &[(K, V)]) -> &mut Command\n+        where K: AsRef<OsStr>, V: AsRef<OsStr>\n+    {\n+        for &(ref key, ref val) in vars {\n+            self.inner.env(key.as_ref(), val.as_ref());\n+        }\n+        self\n+    }\n+\n     /// Removes an environment variable mapping.\n     ///\n     /// # Examples"}, {"sha": "229f8488f19f0848f64aeadb2517320590ccf72f", "filename": "src/test/run-pass/process-envs.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b/src%2Ftest%2Frun-pass%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-envs.rs?ref=55a6fdb7fdadd09ca93f91bb661a57942fd6ed8b", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2014, 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+\n+use std::process::Command;\n+use std::env;\n+\n+#[cfg(all(unix, not(target_os=\"android\")))]\n+pub fn env_cmd() -> Command {\n+    Command::new(\"env\")\n+}\n+#[cfg(target_os=\"android\")]\n+pub fn env_cmd() -> Command {\n+    let mut cmd = Command::new(\"/system/bin/sh\");\n+    cmd.arg(\"-c\").arg(\"set\");\n+    cmd\n+}\n+\n+#[cfg(windows)]\n+pub fn env_cmd() -> Command {\n+    let mut cmd = Command::new(\"cmd\");\n+    cmd.arg(\"/c\").arg(\"set\");\n+    cmd\n+}\n+\n+fn main() {\n+    // save original environment\n+    let old_env = env::var_os(\"RUN_TEST_NEW_ENV\");\n+\n+    env::set_var(\"RUN_TEST_NEW_ENV\", \"123\");\n+\n+    // create filtered environment vector\n+    let filtered_env : Vec<(String, String)> =\n+        env::vars().filter(|&(ref k, _)| k == \"PATH\").collect();\n+\n+    let mut cmd = env_cmd()\n+        .env_clear()\n+        .envs(&filtered_env);\n+\n+    // restore original environment\n+    match old_env {\n+        None => env::remove_var(\"RUN_TEST_NEW_ENV\"),\n+        Some(val) => env::set_var(\"RUN_TEST_NEW_ENV\", &val)\n+    }\n+\n+    let prog = cmd.spawn().unwrap();\n+    let result = prog.wait_with_output().unwrap();\n+    let output = String::from_utf8_lossy(&result.stdout);\n+\n+    assert!(!output.contains(\"RUN_TEST_NEW_ENV\"),\n+            \"found RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);\n+}"}]}