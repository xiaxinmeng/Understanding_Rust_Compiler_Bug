{"sha": "269d15fbf88e6c8ca41f058190ece0e484d5beba", "node_id": "C_kwDOAAsO6NoAKDI2OWQxNWZiZjg4ZTZjOGNhNDFmMDU4MTkwZWNlMGU0ODRkNWJlYmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-02T15:17:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-02T15:17:37Z"}, "message": "Rollup merge of #100057 - GuillaumeGomez:rm-more-clean-impl, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@notriddle``", "tree": {"sha": "2f48dcdb8942fc438e52a6f29d819ed39cb2da0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f48dcdb8942fc438e52a6f29d819ed39cb2da0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269d15fbf88e6c8ca41f058190ece0e484d5beba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6UARCRBK7hj4Ov3rIwAA+FIIAHILVRcsAH5jSoESd4l8hrYu\nu5hvWiXVMByqXTN45QtaEWjamnqz1gd6nO8I81istSRWJZuY7TXzCcqaxSY79Szq\n1YeNowKophzGTq+pfm50MHW5KDWTr0CGsaGT1Yuo8b/XdiN+SkJfAQuB57IfDjss\ndMzH08wvW7t/nKcHY2J+jtLpSu4jn3zOxE+kRP8Mw81sieae3TUE1FlJSg9EJvBk\n/Lubw1Vp3UkgTXgLoaH5X/XAhnlNJ8UFnmWKIbARgCpCQKRtB5MkCaGX+fDZoR+I\nDVTyEeSQ7LC8PFzhj4E1mcUAhWY7S2RuLfgLsTNidkl1kihgpifpVlf8xgaC30E=\n=Df5O\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f48dcdb8942fc438e52a6f29d819ed39cb2da0d\nparent 446895ad21b2dcb1a71044387cd6ebd203fab504\nparent f84a948df1de5cd5e130f64f53d3bf1783ab5af0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659453457 +0200\ncommitter GitHub <noreply@github.com> 1659453457 +0200\n\nRollup merge of #100057 - GuillaumeGomez:rm-more-clean-impl, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269d15fbf88e6c8ca41f058190ece0e484d5beba", "html_url": "https://github.com/rust-lang/rust/commit/269d15fbf88e6c8ca41f058190ece0e484d5beba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269d15fbf88e6c8ca41f058190ece0e484d5beba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446895ad21b2dcb1a71044387cd6ebd203fab504", "url": "https://api.github.com/repos/rust-lang/rust/commits/446895ad21b2dcb1a71044387cd6ebd203fab504", "html_url": "https://github.com/rust-lang/rust/commit/446895ad21b2dcb1a71044387cd6ebd203fab504"}, {"sha": "f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a948df1de5cd5e130f64f53d3bf1783ab5af0", "html_url": "https://github.com/rust-lang/rust/commit/f84a948df1de5cd5e130f64f53d3bf1783ab5af0"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "4c7c9412edda755c99fc9e8cd4ea062c358b61fb", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=269d15fbf88e6c8ca41f058190ece0e484d5beba", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             kind: Box::new(ImplItem(Box::new(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx)),\n+                trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, &[])),\n                 for_: clean_middle_ty(ty, self.cx, None),\n                 items: Vec::new(),\n                 polarity,"}, {"sha": "01dd95e6e409395848bb6eeca124ca3ad9d9bea3", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=269d15fbf88e6c8ca41f058190ece0e484d5beba", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(trait_ref.0.clean(cx)),\n+                            trait_: Some(clean_trait_ref_with_bindings(cx, trait_ref.0, &[])),\n                             for_: clean_middle_ty(ty.0, cx, None),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)"}, {"sha": "f644ecb88b931eaa3ab643204cfed16b9ac9176f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=269d15fbf88e6c8ca41f058190ece0e484d5beba", "patch": "@@ -16,9 +16,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n-    clean_ty_generics, clean_variant_def, clean_visibility, utils, Attributes, AttributesExt,\n-    Clean, ImplKind, ItemId, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty,\n+    clean_trait_ref_with_bindings, clean_ty, clean_ty_generics, clean_variant_def,\n+    clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -450,7 +450,7 @@ pub(crate) fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.map(|t| t.clean(cx));\n+    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, &[]));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "4777f9c96e6eef2e975e005926ff91300cfe4431", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269d15fbf88e6c8ca41f058190ece0e484d5beba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=269d15fbf88e6c8ca41f058190ece0e484d5beba", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n         Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n+            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n@@ -157,7 +157,7 @@ impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     }\n }\n \n-fn clean_trait_ref_with_bindings<'tcx>(\n+pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     bindings: &[TypeBinding],\n@@ -174,12 +174,6 @@ fn clean_trait_ref_with_bindings<'tcx>(\n     path\n }\n \n-impl<'tcx> Clean<'tcx, Path> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        clean_trait_ref_with_bindings(cx, *self, &[])\n-    }\n-}\n-\n fn clean_poly_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -214,21 +208,19 @@ impl<'tcx> Clean<'tcx, GenericBound> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Lifetime> for hir::Lifetime {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Lifetime {\n-        let def = cx.tcx.named_region(self.hir_id);\n-        if let Some(\n-            rl::Region::EarlyBound(_, node_id)\n-            | rl::Region::LateBound(_, _, node_id)\n-            | rl::Region::Free(_, node_id),\n-        ) = def\n-        {\n-            if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n-                return lt;\n-            }\n+fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n+    let def = cx.tcx.named_region(lifetime.hir_id);\n+    if let Some(\n+        rl::Region::EarlyBound(_, node_id)\n+        | rl::Region::LateBound(_, _, node_id)\n+        | rl::Region::Free(_, node_id),\n+    ) = def\n+    {\n+        if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n+            return lt;\n         }\n-        Lifetime(self.name.ident().name)\n     }\n+    Lifetime(lifetime.name.ident().name)\n }\n \n pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n@@ -305,7 +297,7 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n-                lifetime: wrp.lifetime.clean(cx),\n+                lifetime: clean_lifetime(wrp.lifetime, cx),\n                 bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n             },\n \n@@ -426,7 +418,7 @@ fn clean_projection<'tcx>(\n     def_id: Option<DefId>,\n ) -> Type {\n     let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n+    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), &[]);\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -518,7 +510,7 @@ fn clean_generic_param<'tcx>(\n                     .filter(|bp| !bp.in_where_clause)\n                     .flat_map(|bp| bp.bounds)\n                     .map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => lt.clean(cx),\n+                        hir::GenericBound::Outlives(lt) => clean_lifetime(*lt, cx),\n                         _ => panic!(),\n                     })\n                     .collect()\n@@ -1425,7 +1417,8 @@ fn maybe_expand_private_type_alias<'tcx>(\n                 });\n                 if let Some(lt) = lifetime.cloned() {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                    let cleaned = if !lt.is_elided() { lt.clean(cx) } else { Lifetime::elided() };\n+                    let cleaned =\n+                        if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };\n                     substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n@@ -1497,7 +1490,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n             // there's no case where it could cause the function to fail to compile.\n             let elided =\n                 l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n-            let lifetime = if elided { None } else { Some(l.clean(cx)) };\n+            let lifetime = if elided { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }\n         TyKind::Slice(ty) => Slice(Box::new(clean_ty(ty, cx))),\n@@ -1533,7 +1526,8 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::Path(_) => clean_qpath(ty, cx),\n         TyKind::TraitObject(bounds, ref lifetime, _) => {\n             let bounds = bounds.iter().map(|bound| bound.clean(cx)).collect();\n-            let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n+            let lifetime =\n+                if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n@@ -1869,7 +1863,7 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                 .iter()\n                 .map(|arg| match arg {\n                     hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n-                        GenericArg::Lifetime(lt.clean(cx))\n+                        GenericArg::Lifetime(clean_lifetime(*lt, cx))\n                     }\n                     hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                     hir::GenericArg::Type(ty) => GenericArg::Type(clean_ty(ty, cx)),"}]}