{"sha": "125474de07f5391f017b3470ac96a770e52ad60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTQ3NGRlMDdmNTM5MWYwMTdiMzQ3MGFjOTZhNzcwZTUyYWQ2MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T02:30:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-04T02:30:23Z"}, "message": "Auto merge of #37857 - shepmaster:llvm-4.0-dinodes, r=michaelwoerister\n\n[LLVM 4.0] Handle new DIFlags enum", "tree": {"sha": "9940f278607c1d4e9f7e986fa73813f026f1a123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9940f278607c1d4e9f7e986fa73813f026f1a123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125474de07f5391f017b3470ac96a770e52ad60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125474de07f5391f017b3470ac96a770e52ad60c", "html_url": "https://github.com/rust-lang/rust/commit/125474de07f5391f017b3470ac96a770e52ad60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125474de07f5391f017b3470ac96a770e52ad60c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d6623bccf8f7e9a40a47895df75dd9ef2619da", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d6623bccf8f7e9a40a47895df75dd9ef2619da", "html_url": "https://github.com/rust-lang/rust/commit/28d6623bccf8f7e9a40a47895df75dd9ef2619da"}, {"sha": "757a9cea3f106483901deab928ad4688d098be3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/757a9cea3f106483901deab928ad4688d098be3c", "html_url": "https://github.com/rust-lang/rust/commit/757a9cea3f106483901deab928ad4688d098be3c"}], "stats": {"total": 237, "additions": 177, "deletions": 60}, "files": [{"sha": "b3388563adc52519fe572d9833e9499a5f9e2732", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -403,6 +403,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_bitflags 0.0.0\",\n ]\n \n [[package]]"}, {"sha": "17678ef2bbd8fd85162c988f3386c0a78a5d5cc6", "filename": "src/librustc_llvm/Cargo.lock", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.lock?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -0,0 +1,22 @@\n+[root]\n+name = \"rustc_llvm\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"build_helper 0.1.0\",\n+ \"gcc 0.3.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_bitflags 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"build_helper\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"gcc\"\n+version = \"0.3.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rustc_bitflags\"\n+version = \"0.0.0\"\n+"}, {"sha": "f97daa22ff6624c26487dfe8b9a5e1d1a1c43fb0", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -12,6 +12,9 @@ crate-type = [\"dylib\"]\n [features]\n static-libstdcpp = []\n \n+[dependencies]\n+rustc_bitflags = { path = \"../librustc_bitflags\" }\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n gcc = \"0.3.27\""}, {"sha": "b8f1540ad84d67d92773cdca3e02826f99e345a9", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -11,7 +11,7 @@\n use debuginfo::{DIBuilderRef, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType,\n                 DIBasicType, DIDerivedType, DICompositeType, DIScope, DIVariable,\n                 DIGlobalVariable, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n-                DINameSpace};\n+                DINameSpace, DIFlags};\n \n use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n@@ -408,7 +408,6 @@ pub enum Visibility {\n }\n \n pub mod debuginfo {\n-    pub use self::DIDescriptorFlags::*;\n     use super::MetadataRef;\n \n     #[allow(missing_copy_implementations)]\n@@ -433,24 +432,29 @@ pub mod debuginfo {\n     pub type DIEnumerator = DIDescriptor;\n     pub type DITemplateTypeParameter = DIDescriptor;\n \n-    #[derive(Copy, Clone)]\n-    pub enum DIDescriptorFlags {\n-        FlagPrivate = 1 << 0,\n-        FlagProtected = 1 << 1,\n-        FlagFwdDecl = 1 << 2,\n-        FlagAppleBlock = 1 << 3,\n-        FlagBlockByrefStruct = 1 << 4,\n-        FlagVirtual = 1 << 5,\n-        FlagArtificial = 1 << 6,\n-        FlagExplicit = 1 << 7,\n-        FlagPrototyped = 1 << 8,\n-        FlagObjcClassComplete = 1 << 9,\n-        FlagObjectPointer = 1 << 10,\n-        FlagVector = 1 << 11,\n-        FlagStaticMember = 1 << 12,\n-        FlagIndirectVariable = 1 << 13,\n-        FlagLValueReference = 1 << 14,\n-        FlagRValueReference = 1 << 15,\n+    // These values **must** match with LLVMRustDIFlags!!\n+    bitflags! {\n+        #[repr(C)]\n+        #[derive(Debug, Default)]\n+        flags DIFlags: ::libc::uint32_t {\n+            const FlagZero                = 0,\n+            const FlagPrivate             = 1,\n+            const FlagProtected           = 2,\n+            const FlagPublic              = 3,\n+            const FlagFwdDecl             = (1 << 2),\n+            const FlagAppleBlock          = (1 << 3),\n+            const FlagBlockByrefStruct    = (1 << 4),\n+            const FlagVirtual             = (1 << 5),\n+            const FlagArtificial          = (1 << 6),\n+            const FlagExplicit            = (1 << 7),\n+            const FlagPrototyped          = (1 << 8),\n+            const FlagObjcClassComplete   = (1 << 9),\n+            const FlagObjectPointer       = (1 << 10),\n+            const FlagVector              = (1 << 11),\n+            const FlagStaticMember        = (1 << 12),\n+            const FlagLValueReference     = (1 << 13),\n+            const FlagRValueReference     = (1 << 14),\n+        }\n     }\n }\n \n@@ -1343,7 +1347,7 @@ extern \"C\" {\n                                            isLocalToUnit: bool,\n                                            isDefinition: bool,\n                                            ScopeLine: c_uint,\n-                                           Flags: c_uint,\n+                                           Flags: DIFlags,\n                                            isOptimized: bool,\n                                            Fn: ValueRef,\n                                            TParam: DIArray,\n@@ -1371,7 +1375,7 @@ extern \"C\" {\n                                              LineNumber: c_uint,\n                                              SizeInBits: u64,\n                                              AlignInBits: u64,\n-                                             Flags: c_uint,\n+                                             Flags: DIFlags,\n                                              DerivedFrom: DIType,\n                                              Elements: DIArray,\n                                              RunTimeLang: c_uint,\n@@ -1387,7 +1391,7 @@ extern \"C\" {\n                                              SizeInBits: u64,\n                                              AlignInBits: u64,\n                                              OffsetInBits: u64,\n-                                             Flags: c_uint,\n+                                             Flags: DIFlags,\n                                              Ty: DIType)\n                                              -> DIDerivedType;\n \n@@ -1423,7 +1427,7 @@ extern \"C\" {\n                                            LineNo: c_uint,\n                                            Ty: DIType,\n                                            AlwaysPreserve: bool,\n-                                           Flags: c_uint,\n+                                           Flags: DIFlags,\n                                            ArgNo: c_uint)\n                                            -> DIVariable;\n \n@@ -1483,7 +1487,7 @@ extern \"C\" {\n                                             LineNumber: c_uint,\n                                             SizeInBits: u64,\n                                             AlignInBits: u64,\n-                                            Flags: c_uint,\n+                                            Flags: DIFlags,\n                                             Elements: DIArray,\n                                             RunTimeLang: c_uint,\n                                             UniqueId: *const c_char)"}, {"sha": "2fe13d1120fc80897f51ac9102f4f070fc55f5a2", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -29,8 +29,12 @@\n #![feature(link_args)]\n #![feature(linked_from)]\n #![feature(staged_api)]\n+#![cfg_attr(not(stage0), feature(rustc_private))]\n \n extern crate libc;\n+#[macro_use]\n+#[no_link]\n+extern crate rustc_bitflags;\n \n pub use self::IntPredicate::*;\n pub use self::RealPredicate::*;"}, {"sha": "ca76211dc4c95ef48dbfe1ded565c529eda08dc1", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -22,7 +22,8 @@ use context::SharedCrateContext;\n use session::Session;\n \n use llvm::{self, ValueRef};\n-use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType, DILexicalBlock};\n+use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n+                      DICompositeType, DILexicalBlock, DIFlags};\n \n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::DefId;\n@@ -69,8 +70,6 @@ pub const UNKNOWN_COLUMN_NUMBER: c_uint = 0;\n // ptr::null() doesn't work :(\n pub const NO_SCOPE_METADATA: DIScope = (0 as DIScope);\n \n-const FLAGS_NONE: c_uint = 0;\n-\n #[derive(Copy, Debug, Hash, Eq, PartialEq, Clone)]\n pub struct UniqueTypeId(ast::Name);\n \n@@ -347,14 +346,14 @@ fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             llvm_type: member_llvm_types[0],\n             type_metadata: element_type_metadata,\n             offset: ComputedMemberOffset,\n-            flags: FLAGS_NONE\n+            flags: DIFlags::FlagZero,\n         },\n         MemberDescription {\n             name: \"length\".to_string(),\n             llvm_type: member_llvm_types[1],\n             type_metadata: type_metadata(cx, cx.tcx().types.usize, span),\n             offset: ComputedMemberOffset,\n-            flags: FLAGS_NONE\n+            flags: DIFlags::FlagZero,\n         },\n     ];\n \n@@ -838,7 +837,7 @@ struct MemberDescription {\n     llvm_type: Type,\n     type_metadata: DIType,\n     offset: MemberOffset,\n-    flags: c_uint\n+    flags: DIFlags,\n }\n \n // A factory for MemberDescriptions. It produces a list of member descriptions\n@@ -922,7 +921,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n                 llvm_type: type_of::type_of(cx, fty),\n                 type_metadata: type_metadata(cx, fty, self.span),\n                 offset: offset,\n-                flags: FLAGS_NONE,\n+                flags: DIFlags::FlagZero,\n             }\n         }).collect()\n     }\n@@ -987,7 +986,7 @@ impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n                 llvm_type: type_of::type_of(cx, component_type),\n                 type_metadata: type_metadata(cx, component_type, self.span),\n                 offset: ComputedMemberOffset,\n-                flags: FLAGS_NONE,\n+                flags: DIFlags::FlagZero,\n             }\n         }).collect()\n     }\n@@ -1039,7 +1038,7 @@ impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n                 llvm_type: type_of::type_of(cx, fty),\n                 type_metadata: type_metadata(cx, fty, self.span),\n                 offset: FixedMemberOffset { bytes: 0 },\n-                flags: FLAGS_NONE,\n+                flags: DIFlags::FlagZero,\n             }\n         }).collect()\n     }\n@@ -1137,7 +1136,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                             llvm_type: variant_llvm_type,\n                             type_metadata: variant_type_metadata,\n                             offset: FixedMemberOffset { bytes: 0 },\n-                            flags: FLAGS_NONE\n+                            flags: DIFlags::FlagZero\n                         }\n                     }).collect()\n             },\n@@ -1171,7 +1170,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                             llvm_type: variant_llvm_type,\n                             type_metadata: variant_type_metadata,\n                             offset: FixedMemberOffset { bytes: 0 },\n-                            flags: FLAGS_NONE\n+                            flags: DIFlags::FlagZero\n                         }\n                     ]\n                 }\n@@ -1208,7 +1207,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                     llvm_type: non_null_llvm_type,\n                     type_metadata: non_null_type_metadata,\n                     offset: FixedMemberOffset { bytes: 0 },\n-                    flags: FLAGS_NONE\n+                    flags: DIFlags::FlagZero\n                 };\n \n                 let unique_type_id = debug_context(cx).type_map\n@@ -1245,7 +1244,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                         llvm_type: artificial_struct_llvm_type,\n                         type_metadata: artificial_struct_metadata,\n                         offset: FixedMemberOffset { bytes: 0 },\n-                        flags: FLAGS_NONE\n+                        flags: DIFlags::FlagZero\n                     }\n                 ]\n             },\n@@ -1289,7 +1288,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                         llvm_type: variant_llvm_type,\n                         type_metadata: variant_type_metadata,\n                         offset: FixedMemberOffset { bytes: 0 },\n-                        flags: FLAGS_NONE\n+                        flags: DIFlags::FlagZero\n                     }\n                 ]\n             },\n@@ -1318,7 +1317,7 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n                     _ => type_metadata(cx, ty, self.span)\n                 },\n                 offset: ComputedMemberOffset,\n-                flags: FLAGS_NONE\n+                flags: DIFlags::FlagZero\n             }\n         }).collect()\n     }\n@@ -1535,7 +1534,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         UNKNOWN_LINE_NUMBER,\n         bytes_to_bits(enum_type_size),\n         bytes_to_bits(enum_type_align),\n-        0, // Flags\n+        DIFlags::FlagZero,\n         ptr::null_mut(),\n         0, // RuntimeLang\n         unique_type_id_str.as_ptr())\n@@ -1680,7 +1679,7 @@ fn create_struct_stub(cx: &CrateContext,\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(struct_size),\n             bytes_to_bits(struct_align),\n-            0,\n+            DIFlags::FlagZero,\n             ptr::null_mut(),\n             empty_array,\n             0,\n@@ -1717,7 +1716,7 @@ fn create_union_stub(cx: &CrateContext,\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(union_size),\n             bytes_to_bits(union_align),\n-            0, // Flags\n+            DIFlags::FlagZero,\n             empty_array,\n             0, // RuntimeLang\n             unique_type_id.as_ptr())"}, {"sha": "e023e654d51ad696e62f42761725a513f5e51001", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -22,8 +22,7 @@ use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n-use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray,\n-                      FlagPrototyped};\n+use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n \n@@ -286,7 +285,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             is_local_to_unit,\n             true,\n             scope_line as c_uint,\n-            FlagPrototyped as c_uint,\n+            DIFlags::FlagPrototyped,\n             cx.sess().opts.optimize != config::OptLevel::No,\n             llfn,\n             template_parameters,\n@@ -478,7 +477,7 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     loc.line as c_uint,\n                     type_metadata,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n-                    0,\n+                    DIFlags::FlagZero,\n                     argument_index)\n             };\n             source_loc::set_debug_location(cx, None,"}, {"sha": "51859a928c40a4a90be30cfc74b2b96c1843d0ef", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 98, "deletions": 13, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/125474de07f5391f017b3470ac96a770e52ad60c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/125474de07f5391f017b3470ac96a770e52ad60c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=125474de07f5391f017b3470ac96a770e52ad60c", "patch": "@@ -352,6 +352,91 @@ DIT* unwrapDIptr(LLVMRustMetadataRef ref) {\n #define DIArray DINodeArray\n #define unwrapDI unwrapDIptr\n \n+// These values **must** match debuginfo::DIFlags! They also *happen*\n+// to match LLVM, but that isn't required as we do giant sets of\n+// matching below. The value shouldn't be directly passed to LLVM.\n+enum class LLVMRustDIFlags : uint32_t {\n+    FlagZero                = 0,\n+    FlagPrivate             = 1,\n+    FlagProtected           = 2,\n+    FlagPublic              = 3,\n+    FlagFwdDecl             = (1 << 2),\n+    FlagAppleBlock          = (1 << 3),\n+    FlagBlockByrefStruct    = (1 << 4),\n+    FlagVirtual             = (1 << 5),\n+    FlagArtificial          = (1 << 6),\n+    FlagExplicit            = (1 << 7),\n+    FlagPrototyped          = (1 << 8),\n+    FlagObjcClassComplete   = (1 << 9),\n+    FlagObjectPointer       = (1 << 10),\n+    FlagVector              = (1 << 11),\n+    FlagStaticMember        = (1 << 12),\n+    FlagLValueReference     = (1 << 13),\n+    FlagRValueReference     = (1 << 14),\n+    // Do not add values that are not supported by the minimum LLVM\n+    // version we support!\n+};\n+\n+inline LLVMRustDIFlags operator& (LLVMRustDIFlags a, LLVMRustDIFlags b) {\n+    return static_cast<LLVMRustDIFlags>(static_cast<uint32_t>(a) & static_cast<uint32_t>(b));\n+}\n+\n+inline LLVMRustDIFlags operator| (LLVMRustDIFlags a, LLVMRustDIFlags b) {\n+    return static_cast<LLVMRustDIFlags>(static_cast<uint32_t>(a) | static_cast<uint32_t>(b));\n+}\n+\n+inline LLVMRustDIFlags& operator|= (LLVMRustDIFlags& a, LLVMRustDIFlags b) {\n+    return a = a | b;\n+}\n+\n+inline bool is_set(LLVMRustDIFlags f) {\n+    return f != LLVMRustDIFlags::FlagZero;\n+}\n+\n+inline LLVMRustDIFlags visibility(LLVMRustDIFlags f) {\n+    return static_cast<LLVMRustDIFlags>(static_cast<uint32_t>(f) & 0x3);\n+}\n+\n+#if LLVM_VERSION_GE(4, 0)\n+static DINode::DIFlags from_rust(LLVMRustDIFlags flags) {\n+    DINode::DIFlags result = DINode::DIFlags::FlagZero;\n+#else\n+static unsigned from_rust(LLVMRustDIFlags flags) {\n+    unsigned result = 0;\n+#endif\n+\n+    switch (visibility(flags)) {\n+    case LLVMRustDIFlags::FlagPrivate:\n+        result |= DINode::DIFlags::FlagPrivate;\n+        break;\n+    case LLVMRustDIFlags::FlagProtected:\n+        result |= DINode::DIFlags::FlagProtected;\n+        break;\n+    case LLVMRustDIFlags::FlagPublic:\n+        result |= DINode::DIFlags::FlagPublic;\n+        break;\n+    default:\n+        // The rest are handled below\n+        break;\n+    }\n+\n+    if (is_set(flags & LLVMRustDIFlags::FlagFwdDecl))             { result |= DINode::DIFlags::FlagFwdDecl; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagAppleBlock))          { result |= DINode::DIFlags::FlagAppleBlock; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagBlockByrefStruct))    { result |= DINode::DIFlags::FlagBlockByrefStruct; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagVirtual))             { result |= DINode::DIFlags::FlagVirtual; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagArtificial))          { result |= DINode::DIFlags::FlagArtificial; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagExplicit))            { result |= DINode::DIFlags::FlagExplicit; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagPrototyped))          { result |= DINode::DIFlags::FlagPrototyped; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagObjcClassComplete))   { result |= DINode::DIFlags::FlagObjcClassComplete; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagObjectPointer))       { result |= DINode::DIFlags::FlagObjectPointer; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagVector))              { result |= DINode::DIFlags::FlagVector; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagStaticMember))        { result |= DINode::DIFlags::FlagStaticMember; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagLValueReference))     { result |= DINode::DIFlags::FlagLValueReference; }\n+    if (is_set(flags & LLVMRustDIFlags::FlagRValueReference))     { result |= DINode::DIFlags::FlagRValueReference; }\n+\n+    return result;\n+}\n+\n extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n     return DEBUG_METADATA_VERSION;\n }\n@@ -431,7 +516,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n     bool isLocalToUnit,\n     bool isDefinition,\n     unsigned ScopeLine,\n-    unsigned Flags,\n+    LLVMRustDIFlags Flags,\n     bool isOptimized,\n     LLVMValueRef Fn,\n     LLVMRustMetadataRef TParam,\n@@ -443,7 +528,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n         unwrapDI<DIScope>(Scope), Name, LinkageName,\n         unwrapDI<DIFile>(File), LineNo,\n         unwrapDI<DISubroutineType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n-        Flags, isOptimized,\n+        from_rust(Flags), isOptimized,\n         TParams,\n         unwrapDIptr<DISubprogram>(Decl));\n     unwrap<Function>(Fn)->setSubprogram(Sub);\n@@ -453,7 +538,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n         unwrapDI<DIScope>(Scope), Name, LinkageName,\n         unwrapDI<DIFile>(File), LineNo,\n         unwrapDI<DISubroutineType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n-        Flags, isOptimized,\n+        from_rust(Flags), isOptimized,\n         unwrap<Function>(Fn),\n         unwrapDIptr<MDNode>(TParam),\n         unwrapDIptr<MDNode>(Decl)));\n@@ -489,7 +574,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n-    unsigned Flags,\n+    LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef DerivedFrom,\n     LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang,\n@@ -502,7 +587,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n         LineNumber,\n         SizeInBits,\n         AlignInBits,\n-        Flags,\n+        from_rust(Flags),\n         unwrapDI<DIType>(DerivedFrom),\n         DINodeArray(unwrapDI<MDTuple>(Elements)),\n         RunTimeLang,\n@@ -520,12 +605,12 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     uint64_t OffsetInBits,\n-    unsigned Flags,\n+    LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef Ty) {\n     return wrap(Builder->createMemberType(\n         unwrapDI<DIDescriptor>(Scope), Name,\n         unwrapDI<DIFile>(File), LineNo,\n-        SizeInBits, AlignInBits, OffsetInBits, Flags,\n+        SizeInBits, AlignInBits, OffsetInBits, from_rust(Flags),\n         unwrapDI<DIType>(Ty)));\n }\n \n@@ -581,28 +666,28 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     unsigned LineNo,\n     LLVMRustMetadataRef Ty,\n     bool AlwaysPreserve,\n-    unsigned Flags,\n+    LLVMRustDIFlags Flags,\n     unsigned ArgNo) {\n #if LLVM_VERSION_GE(3, 8)\n     if (Tag == 0x100) { // DW_TAG_auto_variable\n         return wrap(Builder->createAutoVariable(\n             unwrapDI<DIDescriptor>(Scope), Name,\n             unwrapDI<DIFile>(File),\n             LineNo,\n-            unwrapDI<DIType>(Ty), AlwaysPreserve, Flags));\n+            unwrapDI<DIType>(Ty), AlwaysPreserve, from_rust(Flags)));\n     } else {\n         return wrap(Builder->createParameterVariable(\n             unwrapDI<DIDescriptor>(Scope), Name, ArgNo,\n             unwrapDI<DIFile>(File),\n             LineNo,\n-            unwrapDI<DIType>(Ty), AlwaysPreserve, Flags));\n+            unwrapDI<DIType>(Ty), AlwaysPreserve, from_rust(Flags)));\n     }\n #else\n     return wrap(Builder->createLocalVariable(Tag,\n         unwrapDI<DIDescriptor>(Scope), Name,\n         unwrapDI<DIFile>(File),\n         LineNo,\n-        unwrapDI<DIType>(Ty), AlwaysPreserve, Flags, ArgNo));\n+        unwrapDI<DIType>(Ty), AlwaysPreserve, from_rust(Flags), ArgNo));\n #endif\n }\n \n@@ -701,7 +786,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n-    unsigned Flags,\n+    LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang,\n     const char* UniqueId)\n@@ -713,7 +798,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n         LineNumber,\n         SizeInBits,\n         AlignInBits,\n-        Flags,\n+        from_rust(Flags),\n         DINodeArray(unwrapDI<MDTuple>(Elements)),\n         RunTimeLang,\n         UniqueId"}]}