{"sha": "cf2d88db3840dd46bb6897978a3adc421769d5f9", "node_id": "C_kwDOAAsO6NoAKGNmMmQ4OGRiMzg0MGRkNDZiYjY4OTc5NzhhM2FkYzQyMTc2OWQ1Zjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-05T17:06:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-05T17:06:07Z"}, "message": "Rollup merge of #103972 - oli-obk:unoptional, r=fee1-dead\n\nRemove an option and choose a behaviour-preserving default instead.\n\nr? ``@fee1-dead``", "tree": {"sha": "ec552285e6c995237f3fc9f9c0a86bd8ed3b232b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec552285e6c995237f3fc9f9c0a86bd8ed3b232b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2d88db3840dd46bb6897978a3adc421769d5f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZpf/CRBK7hj4Ov3rIwAAqVsIABbw7H+EMNieavG+8HkDN/vz\nu7YfpPEfxY4uQplzWcuyQyTisAUxOBsCgTaR1E4cZt1K0cxKg9CwDay7GKWlqYDj\nN9Z/XhrPwVuRTFXEF/2VjlRsy9HUg9XaXppNvydEHyWb3uzBEUXhTtI/O/V2gYXy\n3TeC8ZRNCKH3t9Wr9FAJ5Au2INcs2K9nKSOTlWD6KKYM83fha/wapR1203lw9QP0\nPEZ7zUj7WW/k49ZKf2b6PpaFkg/PFduNNB105GpbXuuI+1L612aZAVdyUZNMBKRA\nNTDDUWO6R9Ik7n1Zl3W7BVLxqD0gzwGElnwIPti9kS3YFFaMvBR6Z3o76K89KdM=\n=C/6h\n-----END PGP SIGNATURE-----\n", "payload": "tree ec552285e6c995237f3fc9f9c0a86bd8ed3b232b\nparent 51287f264ca92285108d7866901a2d29eee49725\nparent a2325fe3a97f1820a4bd18d180e24c1ac07b9368\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667667967 +0100\ncommitter GitHub <noreply@github.com> 1667667967 +0100\n\nRollup merge of #103972 - oli-obk:unoptional, r=fee1-dead\n\nRemove an option and choose a behaviour-preserving default instead.\n\nr? ``@fee1-dead``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2d88db3840dd46bb6897978a3adc421769d5f9", "html_url": "https://github.com/rust-lang/rust/commit/cf2d88db3840dd46bb6897978a3adc421769d5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2d88db3840dd46bb6897978a3adc421769d5f9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51287f264ca92285108d7866901a2d29eee49725", "url": "https://api.github.com/repos/rust-lang/rust/commits/51287f264ca92285108d7866901a2d29eee49725", "html_url": "https://github.com/rust-lang/rust/commit/51287f264ca92285108d7866901a2d29eee49725"}, {"sha": "a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2325fe3a97f1820a4bd18d180e24c1ac07b9368", "html_url": "https://github.com/rust-lang/rust/commit/a2325fe3a97f1820a4bd18d180e24c1ac07b9368"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8b1cc50a3a1f9e6655dbb9d37078c8ad144fe9a9", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d88db3840dd46bb6897978a3adc421769d5f9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d88db3840dd46bb6897978a3adc421769d5f9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=cf2d88db3840dd46bb6897978a3adc421769d5f9", "patch": "@@ -274,7 +274,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n-            None,\n+            ty::BoundConstness::NotConst,\n         );\n         if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n@@ -324,7 +324,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generic_args: &'a hir::GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Option<Ty<'tcx>>,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n@@ -538,7 +538,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             &mut substs_ctx,\n         );\n \n-        if let Some(ty::BoundConstness::ConstIfConst) = constness\n+        if let ty::BoundConstness::ConstIfConst = constness\n             && generics.has_self && !tcx.has_attr(def_id, sym::const_trait)\n         {\n             tcx.sess.emit_err(crate::errors::ConstBoundForNonConstTrait { span } );\n@@ -611,7 +611,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.args(),\n             item_segment.infer_args,\n             None,\n-            None,\n+            ty::BoundConstness::NotConst,\n         );\n \n         if let Some(b) = item_segment.args().bindings.first() {\n@@ -641,7 +641,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n             true,\n-            Some(constness),\n+            constness,\n         )\n     }\n \n@@ -668,7 +668,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             Some(self_ty),\n-            Some(constness),\n+            constness,\n         );\n \n         let tcx = self.tcx();\n@@ -798,7 +798,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &hir::PathSegment<'_>,\n         is_impl: bool,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> ty::TraitRef<'tcx> {\n         let (substs, _) = self.create_substs_for_ast_trait_ref(\n             span,\n@@ -822,7 +822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         trait_segment: &'a hir::PathSegment<'a>,\n         is_impl: bool,\n-        constness: Option<ty::BoundConstness>,\n+        constness: ty::BoundConstness,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n         self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment, is_impl);\n \n@@ -2129,7 +2129,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty,\n             trait_segment,\n             false,\n-            Some(constness),\n+            constness,\n         );\n \n         let item_substs = self.create_substs_for_associated_item(\n@@ -2700,7 +2700,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     &GenericArgs::none(),\n                     true,\n                     None,\n-                    None,\n+                    ty::BoundConstness::NotConst,\n                 );\n                 EarlyBinder(self.normalize_ty(span, tcx.at(span).type_of(def_id)))\n                     .subst(tcx, substs)"}]}