{"sha": "48ea3825b8951a39e27503ea16cacc9147255d79", "node_id": "C_kwDOAAsO6NoAKDQ4ZWEzODI1Yjg5NTFhMzllMjc1MDNlYTE2Y2FjYzkxNDcyNTVkNzk", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:39:42Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-18T23:39:42Z"}, "message": "Introduce and use get_fn_target_info", "tree": {"sha": "d5ada7628b328f7ca7299d1301c879ebac047558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ada7628b328f7ca7299d1301c879ebac047558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ea3825b8951a39e27503ea16cacc9147255d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ea3825b8951a39e27503ea16cacc9147255d79", "html_url": "https://github.com/rust-lang/rust/commit/48ea3825b8951a39e27503ea16cacc9147255d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ea3825b8951a39e27503ea16cacc9147255d79/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e7419c647ff1cd24263fb8e6fbfd609d17d05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e7419c647ff1cd24263fb8e6fbfd609d17d05b", "html_url": "https://github.com/rust-lang/rust/commit/d8e7419c647ff1cd24263fb8e6fbfd609d17d05b"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "e26c76da1891649c0a035706e5eb278aa325b99e", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/48ea3825b8951a39e27503ea16cacc9147255d79/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea3825b8951a39e27503ea16cacc9147255d79/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=48ea3825b8951a39e27503ea16cacc9147255d79", "patch": "@@ -104,13 +104,10 @@ fn fn_target_info(\n     call: &CallExpr,\n     fn_name: &str,\n ) -> Option<TargetInfo> {\n-    let target_module;\n-    let adt_name = None;\n-    let (target, file, insert_offset) = match path.qualifier() {\n+    match path.qualifier() {\n         Some(qualifier) => match ctx.sema.resolve_path(&qualifier) {\n             Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) => {\n-                target_module = Some(module);\n-                get_fn_target(ctx, &target_module, call.clone())?\n+                get_fn_target_info(ctx, &Some(module), call.clone())\n             }\n             Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) => {\n                 if let hir::Adt::Enum(_) = adt {\n@@ -120,22 +117,16 @@ fn fn_target_info(\n                     }\n                 }\n \n-                return assoc_fn_target_info(ctx, call, adt, fn_name);\n+                assoc_fn_target_info(ctx, call, adt, fn_name)\n             }\n             Some(hir::PathResolution::SelfType(impl_)) => {\n                 let adt = impl_.self_ty(ctx.db()).as_adt()?;\n-                return assoc_fn_target_info(ctx, call, adt, fn_name);\n-            }\n-            _ => {\n-                return None;\n+                assoc_fn_target_info(ctx, call, adt, fn_name)\n             }\n+            _ => None,\n         },\n-        _ => {\n-            target_module = None;\n-            get_fn_target(ctx, &target_module, call.clone())?\n-        }\n-    };\n-    Some(TargetInfo::new(target_module, adt_name, target, file, insert_offset))\n+        _ => get_fn_target_info(ctx, &None, call.clone()),\n+    }\n }\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n@@ -391,6 +382,15 @@ fn make_return_type(\n     (ret_type, should_focus_return_type)\n }\n \n+fn get_fn_target_info(\n+    ctx: &AssistContext<'_>,\n+    target_module: &Option<Module>,\n+    call: CallExpr,\n+) -> Option<TargetInfo> {\n+    let (target, file, insert_offset) = get_fn_target(ctx, target_module, call)?;\n+    Some(TargetInfo::new(*target_module, None, target, file, insert_offset))\n+}\n+\n fn get_fn_target(\n     ctx: &AssistContext<'_>,\n     target_module: &Option<Module>,"}]}