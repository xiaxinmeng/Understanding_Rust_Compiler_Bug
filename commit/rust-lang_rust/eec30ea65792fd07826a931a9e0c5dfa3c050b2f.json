{"sha": "eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYzMwZWE2NTc5MmZkMDc4MjZhOTMxYTllMGM1ZGZhM2MwNTBiMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-14T06:37:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T06:37:11Z"}, "message": "Auto merge of #35453 - jseyfried:hygienize_metavariables, r=nrc\n\nmacros: Make metavariables hygienic\n\nThis PR makes metavariables hygienic. For example, consider:\n```rust\nmacro_rules! foo {\n    ($x:tt) => { // Suppose that this token tree argument is always a metavariable.\n        macro_rules! bar { ($x:expr, $y:expr) => { ($x, $y) } }\n    }\n}\n\nfn main() {\n    foo!($z); // This currently compiles.\n    foo!($y); // This is an error today but compiles after this PR.\n}\n```\nToday, the `macro_rules! bar { ... }` definition is only valid when the metavariable passed to `foo` is not `$y` (since it unhygienically conflicts with the `$y` in the definition of `bar`) or `$x` (c.f. #35450).\n\nAfter this PR, the definition of `bar` is always valid (and `bar!(a, b)` always expands to `(a, b)` as expected).\n\nThis can break code that was allowed in #34925 (landed two weeks ago). For example,\n```rust\nmacro_rules! outer {\n    ($t:tt) => {\n        macro_rules! inner { ($i:item) => { $t } }\n    }\n}\n\nouter!($i); // This `$i` should not interact with the `$i` in the definition of `inner!`.\ninner!(fn main() {}); // After this PR, this is an error (\"unknown macro variable `i`\").\n```\n\nDue to the severe limitations on nested `macro_rules!` before #34925, this is not a breaking change for stable/beta.\n\nFixes #35450.\n\nr? @nrc", "tree": {"sha": "c4f14a765997dc294bc19ff6ce7e48501ef5b962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f14a765997dc294bc19ff6ce7e48501ef5b962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "html_url": "https://github.com/rust-lang/rust/commit/eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b7ea14cc492fa010f8a914044faebd6c27333ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7ea14cc492fa010f8a914044faebd6c27333ab", "html_url": "https://github.com/rust-lang/rust/commit/2b7ea14cc492fa010f8a914044faebd6c27333ab"}, {"sha": "95b68aa5eacac7fb6340829289871da6e517e8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b68aa5eacac7fb6340829289871da6e517e8b0", "html_url": "https://github.com/rust-lang/rust/commit/95b68aa5eacac7fb6340829289871da6e517e8b0"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "7db03e9a8634a9031cc16ecbf9d5b389506d2e8f", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -79,7 +79,7 @@ pub use self::ParseResult::*;\n use self::TokenTreeOrTokenTreeVec::*;\n \n use ast;\n-use ast::{Name, Ident};\n+use ast::Ident;\n use syntax_pos::{self, BytePos, mk_sp, Span};\n use codemap::Spanned;\n use errors::FatalError;\n@@ -202,9 +202,9 @@ pub enum NamedMatch {\n }\n \n pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n-            -> ParseResult<HashMap<Name, Rc<NamedMatch>>> {\n+            -> ParseResult<HashMap<Ident, Rc<NamedMatch>>> {\n     fn n_rec(p_s: &ParseSess, m: &TokenTree, res: &[Rc<NamedMatch>],\n-             ret_val: &mut HashMap<Name, Rc<NamedMatch>>, idx: &mut usize)\n+             ret_val: &mut HashMap<Ident, Rc<NamedMatch>>, idx: &mut usize)\n              -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => {\n@@ -218,7 +218,7 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n                 }\n             }\n             TokenTree::Token(sp, MatchNt(bind_name, _)) => {\n-                match ret_val.entry(bind_name.name) {\n+                match ret_val.entry(bind_name) {\n                     Vacant(spot) => {\n                         spot.insert(res[*idx].clone());\n                         *idx += 1;\n@@ -257,7 +257,7 @@ pub enum ParseResult<T> {\n     Error(syntax_pos::Span, String)\n }\n \n-pub type NamedParseResult = ParseResult<HashMap<Name, Rc<NamedMatch>>>;\n+pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n pub type PositionalParseResult = ParseResult<Vec<Rc<NamedMatch>>>;\n \n /// Perform a token equality check, ignoring syntax context (that is, an"}, {"sha": "d197741e9a367bc39d6726cfafc850afe0def94e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -302,7 +302,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n     let mut valid = true;\n \n     // Extract the arguments:\n-    let lhses = match **argument_map.get(&lhs_nm.name).unwrap() {\n+    let lhses = match **argument_map.get(&lhs_nm).unwrap() {\n         MatchedSeq(ref s, _) => {\n             s.iter().map(|m| match **m {\n                 MatchedNonterminal(NtTT(ref tt)) => {\n@@ -315,7 +315,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured lhs\")\n     };\n \n-    let rhses = match **argument_map.get(&rhs_nm.name).unwrap() {\n+    let rhses = match **argument_map.get(&rhs_nm).unwrap() {\n         MatchedSeq(ref s, _) => {\n             s.iter().map(|m| match **m {\n                 MatchedNonterminal(NtTT(ref tt)) => (**tt).clone(),"}, {"sha": "939425378def699da15025a14cff36795f30c360", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n use self::LockstepIterSize::*;\n \n-use ast::{Ident, Name};\n+use ast::Ident;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n@@ -38,7 +38,7 @@ pub struct TtReader<'a> {\n     /// the unzipped tree:\n     stack: Vec<TtFrame>,\n     /* for MBE-style macro transcription */\n-    interpolations: HashMap<Name, Rc<NamedMatch>>,\n+    interpolations: HashMap<Ident, Rc<NamedMatch>>,\n     imported_from: Option<Ident>,\n \n     // Some => return imported_from as the next token\n@@ -57,7 +57,7 @@ pub struct TtReader<'a> {\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n pub fn new_tt_reader(sp_diag: &Handler,\n-                     interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                     interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                      imported_from: Option<Ident>,\n                      src: Vec<tokenstream::TokenTree>)\n                      -> TtReader {\n@@ -71,7 +71,7 @@ pub fn new_tt_reader(sp_diag: &Handler,\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n-                                   interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                                   interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                                    imported_from: Option<Ident>,\n                                    src: Vec<tokenstream::TokenTree>,\n                                    desugar_doc_comments: bool)\n@@ -119,7 +119,7 @@ fn lookup_cur_matched_by_matched(r: &TtReader, start: Rc<NamedMatch>) -> Rc<Name\n }\n \n fn lookup_cur_matched(r: &TtReader, name: Ident) -> Option<Rc<NamedMatch>> {\n-    let matched_opt = r.interpolations.get(&name.name).cloned();\n+    let matched_opt = r.interpolations.get(&name).cloned();\n     matched_opt.map(|s| lookup_cur_matched_by_matched(r, s))\n }\n "}, {"sha": "d890d02a910478f978cdca71137bbd28ef05bedc", "filename": "src/test/compile-fail/issue-35450.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Fcompile-fail%2Fissue-35450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Fcompile-fail%2Fissue-35450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35450.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m { ($t:tt) => { $t } }\n+\n+fn main() {\n+    m!($t); //~ ERROR unknown macro variable\n+            //~| ERROR expected expression\n+}"}, {"sha": "945490cefb95a80ece1c29dea3e4dea0244a2419", "filename": "src/test/compile-fail/macro-tt-matchers.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-tt-matchers.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -16,5 +16,16 @@ macro_rules! foo {\n \n foo!(Box);\n \n+macro_rules! bar {\n+    ($x:tt) => {\n+        macro_rules! baz {\n+            ($x:tt, $y:tt) => { ($x, $y) }\n+        }\n+    }\n+}\n+\n #[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() { //~ ERROR compilation successful\n+    bar!($y);\n+    let _: (i8, i16) = baz!(0i8, 0i16);\n+}"}, {"sha": "2b50c4fe11e9328f3bc5fb595d4c400018f33ff5", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec30ea65792fd07826a931a9e0c5dfa3c050b2f/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "patch": "@@ -36,7 +36,7 @@ fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n \n     let mac_expr = match TokenTree::parse(cx, &mbe_matcher[..], args) {\n         Success(map) => {\n-            match (&*map[&str_to_ident(\"matched\").name], &*map[&str_to_ident(\"pat\").name]) {\n+            match (&*map[&str_to_ident(\"matched\")], &*map[&str_to_ident(\"pat\")]) {\n                 (&MatchedNonterminal(NtExpr(ref matched_expr)),\n                  &MatchedSeq(ref pats, seq_sp)) => {\n                     let pats: Vec<P<Pat>> = pats.iter().map(|pat_nt|"}]}