{"sha": "0583181d036834788f24a0e4060f09a6615b0868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ODMxODFkMDM2ODM0Nzg4ZjI0YTBlNDA2MGYwOWE2NjE1YjA4Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T15:26:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-09T15:26:33Z"}, "message": "Auto merge of #4615 - nikofil:suspicious_unary_op_formatting, r=flip1995\n\nNew lint: suspicious_unary_op_formatting\n\nfixes #4228\n\nchangelog: New lint: [`suspicious_unary_op_formatting`]", "tree": {"sha": "62b405013d5693a031e8b5b412d438b233cc4a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62b405013d5693a031e8b5b412d438b233cc4a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0583181d036834788f24a0e4060f09a6615b0868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0583181d036834788f24a0e4060f09a6615b0868", "html_url": "https://github.com/rust-lang/rust/commit/0583181d036834788f24a0e4060f09a6615b0868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0583181d036834788f24a0e4060f09a6615b0868/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97fbdbb42c28ec9e051b23138d7898bae6836c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97fbdbb42c28ec9e051b23138d7898bae6836c4", "html_url": "https://github.com/rust-lang/rust/commit/d97fbdbb42c28ec9e051b23138d7898bae6836c4"}, {"sha": "5143fe1a789ae5bec7aeaa36e19720b7be640a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/5143fe1a789ae5bec7aeaa36e19720b7be640a21", "html_url": "https://github.com/rust-lang/rust/commit/5143fe1a789ae5bec7aeaa36e19720b7be640a21"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "86088231109699f521394ca77456b0294c6750d4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -1191,6 +1191,7 @@ Released 2018-09-13\n [`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n+[`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments"}, {"sha": "3ccf5fcc250ebb00b17317a690e7ac9210a69a20", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 320 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 321 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "821e79e8c7717bfec9421ac9974be2b4cae3e9f0", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, snippet_opt, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, snippet_opt, span_help_and_lint, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -22,6 +22,28 @@ declare_clippy_lint! {\n     \"suspicious formatting of `*=`, `-=` or `!=`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks the formatting of a unary operator on the right hand side\n+    /// of a binary operator. It lints if there is no space between the binary and unary operators,\n+    /// but there is a space between the unary and its operand.\n+    ///\n+    /// **Why is this bad?** This is either a typo in the binary operator or confusing.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// if foo <- 30 { // this should be `foo < -30` but looks like a different operator\n+    /// }\n+    ///\n+    /// if foo &&! bar { // this should be `foo && !bar` but looks like a different operator\n+    /// }\n+    /// ```\n+    pub SUSPICIOUS_UNARY_OP_FORMATTING,\n+    style,\n+    \"suspicious formatting of unary `-` or `!` on the RHS of a BinOp\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for formatting of `else`. It lints if the `else`\n     /// is followed immediately by a newline or the `else` seems to be missing.\n@@ -80,6 +102,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(Formatting => [\n     SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+    SUSPICIOUS_UNARY_OP_FORMATTING,\n     SUSPICIOUS_ELSE_FORMATTING,\n     POSSIBLE_MISSING_COMMA\n ]);\n@@ -99,6 +122,7 @@ impl EarlyLintPass for Formatting {\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         check_assign(cx, expr);\n+        check_unop(cx, expr);\n         check_else(cx, expr);\n         check_array(cx, expr);\n     }\n@@ -133,6 +157,45 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n     }\n }\n \n+/// Implementation of the `SUSPICIOUS_UNARY_OP_FORMATTING` lint.\n+fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n+    if_chain! {\n+        if let ExprKind::Binary(ref binop, ref lhs, ref rhs) = expr.kind;\n+        if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion();\n+        // span between BinOp LHS and RHS\n+        let binop_span = lhs.span.between(rhs.span);\n+        // if RHS is a UnOp\n+        if let ExprKind::Unary(op, ref un_rhs) = rhs.kind;\n+        // from UnOp operator to UnOp operand\n+        let unop_operand_span = rhs.span.until(un_rhs.span);\n+        if let Some(binop_snippet) = snippet_opt(cx, binop_span);\n+        if let Some(unop_operand_snippet) = snippet_opt(cx, unop_operand_span);\n+        let binop_str = BinOpKind::to_string(&binop.node);\n+        // no space after BinOp operator and space after UnOp operator\n+        if binop_snippet.ends_with(binop_str) && unop_operand_snippet.ends_with(' ');\n+        then {\n+            let unop_str = UnOp::to_string(op);\n+            let eqop_span = lhs.span.between(un_rhs.span);\n+            span_help_and_lint(\n+                cx,\n+                SUSPICIOUS_UNARY_OP_FORMATTING,\n+                eqop_span,\n+                &format!(\n+                    \"by not having a space between `{binop}` and `{unop}` it looks like \\\n+                     `{binop}{unop}` is a single operator\",\n+                    binop = binop_str,\n+                    unop = unop_str\n+                ),\n+                &format!(\n+                    \"put a space between `{binop}` and `{unop}` and remove the space after `{unop}`\",\n+                    binop = binop_str,\n+                    unop = unop_str\n+                ),\n+            );\n+        }\n+    }\n+}\n+\n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else`.\n fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n     if_chain! {"}, {"sha": "ec12e06b1aacf088c2ec6e7a4684d918113a8991", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -743,6 +743,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         formatting::POSSIBLE_MISSING_COMMA,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         functions::TOO_MANY_ARGUMENTS,\n         get_last_with_len::GET_LAST_WITH_LEN,\n@@ -953,6 +954,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         excessive_precision::EXCESSIVE_PRECISION,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         inherent_to_string::INHERENT_TO_STRING,\n         len_zero::LEN_WITHOUT_IS_EMPTY,"}, {"sha": "28f212fb2b2d47ec0bc10718e558b95383e02980", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 320] = [\n+pub const ALL_LINTS: [Lint; 321] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1799,6 +1799,13 @@ pub const ALL_LINTS: [Lint; 320] = [\n         deprecation: None,\n         module: \"suspicious_trait_impl\",\n     },\n+    Lint {\n+        name: \"suspicious_unary_op_formatting\",\n+        group: \"style\",\n+        desc: \"suspicious formatting of unary `-` or `!` on the RHS of a BinOp\",\n+        deprecation: None,\n+        module: \"formatting\",\n+    },\n     Lint {\n         name: \"temporary_assignment\",\n         group: \"complexity\","}, {"sha": "9564e373c246d7094c89821734c285de7c867d18", "filename": "tests/ui/suspicious_unary_op_formatting.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/tests%2Fui%2Fsuspicious_unary_op_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/tests%2Fui%2Fsuspicious_unary_op_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_unary_op_formatting.rs?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::suspicious_unary_op_formatting)]\n+\n+#[rustfmt::skip]\n+fn main() {\n+    // weird binary operator formatting:\n+    let a = 42;\n+\n+    if a >- 30 {}\n+    if a >=- 30 {}\n+\n+    let b = true;\n+    let c = false;\n+\n+    if b &&! c {}\n+\n+    if a >-   30 {}\n+\n+    // those are ok:\n+    if a >-30 {}\n+    if a < -30 {}\n+    if b && !c {}\n+    if a > -   30 {}\n+}"}, {"sha": "581527dcff8e46da31c6e6d425e7e7144e9d4fde", "filename": "tests/ui/suspicious_unary_op_formatting.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0583181d036834788f24a0e4060f09a6615b0868/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0583181d036834788f24a0e4060f09a6615b0868/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_unary_op_formatting.stderr?ref=0583181d036834788f24a0e4060f09a6615b0868", "patch": "@@ -0,0 +1,35 @@\n+error: by not having a space between `>` and `-` it looks like `>-` is a single operator\n+  --> $DIR/suspicious_unary_op_formatting.rs:8:9\n+   |\n+LL |     if a >- 30 {}\n+   |         ^^^^\n+   |\n+   = note: `-D clippy::suspicious-unary-op-formatting` implied by `-D warnings`\n+   = help: put a space between `>` and `-` and remove the space after `-`\n+\n+error: by not having a space between `>=` and `-` it looks like `>=-` is a single operator\n+  --> $DIR/suspicious_unary_op_formatting.rs:9:9\n+   |\n+LL |     if a >=- 30 {}\n+   |         ^^^^^\n+   |\n+   = help: put a space between `>=` and `-` and remove the space after `-`\n+\n+error: by not having a space between `&&` and `!` it looks like `&&!` is a single operator\n+  --> $DIR/suspicious_unary_op_formatting.rs:14:9\n+   |\n+LL |     if b &&! c {}\n+   |         ^^^^^\n+   |\n+   = help: put a space between `&&` and `!` and remove the space after `!`\n+\n+error: by not having a space between `>` and `-` it looks like `>-` is a single operator\n+  --> $DIR/suspicious_unary_op_formatting.rs:16:9\n+   |\n+LL |     if a >-   30 {}\n+   |         ^^^^^^\n+   |\n+   = help: put a space between `>` and `-` and remove the space after `-`\n+\n+error: aborting due to 4 previous errors\n+"}]}