{"sha": "422ebd5328e485462c675af9304f3b5b86e5b893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmViZDUzMjhlNDg1NDYyYzY3NWFmOTMwNGYzYjViODZlNWI4OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-27T09:26:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-27T09:26:37Z"}, "message": "Auto merge of #33312 - Byron:double-ended-iterator-for-args, r=alexcrichton\n\nDoubleEndedIterator for Args\n\nThis PR implements the DoubleEndedIterator trait for the `std::env::Args[Os]` structure, as well\nas the internal implementations.\n\nIt is primarily motivated by me, as I happened to implement a simple `reversor` program many times\nnow, which so far had to use code like this:\n\n```Rust\nfor arg in std::env::args().skip(1).collect::<Vec<_>>().iter().rev() {}\n```\n\n... even though I would have loved to do this instead:\n\n```Rust\nfor arg in std::env::args().skip(1).rev() {}\n```\n\nThe latter is more natural, and I did not find a reason for not implementing it.\nAfter all, on every system, the number of arguments passed to the program are known\nat runtime.\n\nTo my mind, it follows KISS, and does not try to be smart at all. Also, there are no unit-tests,\nprimarily as I did not find any existing tests for the `Args` struct either.\n\nThe windows implementation is basically a copy-pasted variant of the `next()` method implementation,\nand I could imagine sharing most of the code instead. Actually I would be happy if the reviewer would\nask for it.", "tree": {"sha": "35f53690722646ff39eddc7398feef0d2b2fe6d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f53690722646ff39eddc7398feef0d2b2fe6d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422ebd5328e485462c675af9304f3b5b86e5b893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422ebd5328e485462c675af9304f3b5b86e5b893", "html_url": "https://github.com/rust-lang/rust/commit/422ebd5328e485462c675af9304f3b5b86e5b893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422ebd5328e485462c675af9304f3b5b86e5b893/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edecc57cbf4fb2444224c5c9492d58221ec885f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/edecc57cbf4fb2444224c5c9492d58221ec885f0", "html_url": "https://github.com/rust-lang/rust/commit/edecc57cbf4fb2444224c5c9492d58221ec885f0"}, {"sha": "1aa8dad854155221db7cec19b6105c673e4a871e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa8dad854155221db7cec19b6105c673e4a871e", "html_url": "https://github.com/rust-lang/rust/commit/1aa8dad854155221db7cec19b6105c673e4a871e"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "d6d62ce79d4e6ff94aa780736adcce7d8b9da3ba", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=422ebd5328e485462c675af9304f3b5b86e5b893", "patch": "@@ -625,6 +625,13 @@ impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<String> {\n+        self.inner.next_back().map(|s| s.into_string().unwrap())\n+    }\n+}\n+\n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for ArgsOs {\n     type Item = OsString;\n@@ -637,6 +644,10 @@ impl ExactSizeIterator for ArgsOs {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+impl DoubleEndedIterator for ArgsOs {\n+    fn next_back(&mut self) -> Option<OsString> { self.inner.next_back() }\n+}\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {"}, {"sha": "4c3558f91f5f22e65cf3c3892f45af47576e9a60", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=422ebd5328e485462c675af9304f3b5b86e5b893", "patch": "@@ -317,6 +317,10 @@ impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> { self.iter.next_back() }\n+}\n+\n /// Returns the command line arguments\n ///\n /// Returns a list of the command line arguments."}, {"sha": "0cea7f81e363237fa745023505916db18df864fc", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=422ebd5328e485462c675af9304f3b5b86e5b893", "patch": "@@ -278,23 +278,30 @@ pub struct Args {\n     cur: *mut *mut u16,\n }\n \n+unsafe fn os_string_from_ptr(ptr: *mut u16) -> OsString {\n+    let mut len = 0;\n+    while *ptr.offset(len) != 0 { len += 1; }\n+\n+    // Push it onto the list.\n+    let ptr = ptr as *const u16;\n+    let buf = slice::from_raw_parts(ptr, len as usize);\n+    OsStringExt::from_wide(buf)\n+}\n+\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> {\n-        self.range.next().map(|i| unsafe {\n-            let ptr = *self.cur.offset(i);\n-            let mut len = 0;\n-            while *ptr.offset(len) != 0 { len += 1; }\n-\n-            // Push it onto the list.\n-            let ptr = ptr as *const u16;\n-            let buf = slice::from_raw_parts(ptr, len as usize);\n-            OsStringExt::from_wide(buf)\n-        })\n+        self.range.next().map(|i| unsafe { os_string_from_ptr(*self.cur.offset(i)) } )\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n }\n \n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> {\n+        self.range.next_back().map(|i| unsafe { os_string_from_ptr(*self.cur.offset(i)) } )\n+    }\n+}\n+\n impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.range.len() }\n }"}, {"sha": "d22fa6494f03631ddc74a243778122a01dc20d4a", "filename": "src/test/run-pass/env-args-reverse-iterator.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ebd5328e485462c675af9304f3b5b86e5b893/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-args-reverse-iterator.rs?ref=422ebd5328e485462c675af9304f3b5b86e5b893", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env::args;\n+use std::process::Command;\n+\n+fn assert_reverse_iterator_for_program_arguments(program_name: &str) {\n+    let args: Vec<_> = args().rev().collect();\n+\n+    assert!(args.len() == 4);\n+    assert_eq!(args[0], \"c\");\n+    assert_eq!(args[1], \"b\");\n+    assert_eq!(args[2], \"a\");\n+    assert_eq!(args[3], program_name);\n+\n+    println!(\"passed\");\n+}\n+\n+fn main() {\n+    let mut args = args();\n+    let me = args.next().unwrap();\n+\n+    if let Some(_) = args.next() {\n+        assert_reverse_iterator_for_program_arguments(&me);\n+        return\n+    }\n+\n+    let output = Command::new(&me)\n+        .arg(\"a\")\n+        .arg(\"b\")\n+        .arg(\"c\")\n+        .output()\n+        .unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+}"}]}