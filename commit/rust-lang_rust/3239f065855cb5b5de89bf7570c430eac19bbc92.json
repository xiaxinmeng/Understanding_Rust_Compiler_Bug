{"sha": "3239f065855cb5b5de89bf7570c430eac19bbc92", "node_id": "C_kwDOAAsO6NoAKDMyMzlmMDY1ODU1Y2I1YjVkZTg5YmY3NTcwYzQzMGVhYzE5YmJjOTI", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-23T10:38:01Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-25T07:16:30Z"}, "message": "rustdoc: Don't show hidden trait methods\n\nBy skipping trait items whose attributes include `hidden`, we void\nshowing\nsuch trait methods.", "tree": {"sha": "5efe618dc8f6274b6de2a0f9cd32e009e958bb09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efe618dc8f6274b6de2a0f9cd32e009e958bb09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3239f065855cb5b5de89bf7570c430eac19bbc92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3239f065855cb5b5de89bf7570c430eac19bbc92", "html_url": "https://github.com/rust-lang/rust/commit/3239f065855cb5b5de89bf7570c430eac19bbc92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3239f065855cb5b5de89bf7570c430eac19bbc92/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67365d64bcdfeae1334bf2ff49587c27d1c973f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/67365d64bcdfeae1334bf2ff49587c27d1c973f0", "html_url": "https://github.com/rust-lang/rust/commit/67365d64bcdfeae1334bf2ff49587c27d1c973f0"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "e2084667363f1762b07fa87723ebce9a4cdc8d04", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3239f065855cb5b5de89bf7570c430eac19bbc92", "patch": "@@ -389,13 +389,45 @@ crate fn build_impl(\n         }\n     }\n \n+    let document_hidden = cx.render_options.document_hidden;\n     let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = match impl_item {\n         Some(impl_) => (\n             impl_\n                 .items\n                 .iter()\n-                .map(|item| tcx.hir().impl_item(item.id).clean(cx))\n+                .map(|item| tcx.hir().impl_item(item.id))\n+                .filter(|item| {\n+                    // Filter out impl items whose corresponding trait item has `doc(hidden)`\n+                    // not to document such impl items.\n+                    // For inherent impls, we don't do any filtering.\n+\n+                    // When `--document-hidden-items` is passed, we don't\n+                    // do any filtering, too.\n+                    if document_hidden {\n+                        return true;\n+                    }\n+                    if let Some(associated_trait) = associated_trait {\n+                        let assoc_kind = match item.kind {\n+                            hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n+                            hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n+                            hir::ImplItemKind::TyAlias(..) => ty::AssocKind::Type,\n+                        };\n+                        let trait_item = tcx\n+                            .associated_items(associated_trait.def_id)\n+                            .find_by_name_and_kind(\n+                                tcx,\n+                                item.ident,\n+                                assoc_kind,\n+                                associated_trait.def_id,\n+                            )\n+                            .unwrap(); // SAFETY: For all impl items there exists trait item that has the same name.\n+                        !tcx.get_attrs(trait_item.def_id).lists(sym::doc).has_word(sym::hidden)\n+                    } else {\n+                        true\n+                    }\n+                })\n+                .map(|item| item.clean(cx))\n                 .collect::<Vec<_>>(),\n             impl_.generics.clean(cx),\n         ),"}, {"sha": "95b3e9b652303e2599421f1689847604a92e3821", "filename": "src/test/rustdoc/hidden-trait-methods-with-document-hidden-items.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs?ref=3239f065855cb5b5de89bf7570c430eac19bbc92", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -Z unstable-options --document-hidden-items\n+\n+// test for trait methods with `doc(hidden)` with `--document-hidden-items` passed.\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Trait.html\n+// @has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @has - '//*[@id=\"tymethod.f\"]' 'fn f()'\n+// @has - '//*[@id=\"tymethod.g\"]' 'fn g()'\n+pub trait Trait {\n+    #[doc(hidden)]\n+    type Foo;\n+    type Bar;\n+    #[doc(hidden)]\n+    fn f();\n+    fn g();\n+}\n+\n+// @has foo/struct.S.html\n+// @has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @has - '//*[@id=\"method.f\"]' 'fn f()'\n+// @has - '//*[@id=\"method.g\"]' 'fn g()'\n+pub struct S;\n+impl Trait for S {\n+    type Foo = ();\n+    type Bar = ();\n+    fn f() {}\n+    fn g() {}\n+}"}, {"sha": "e924ba7d0acded047481a38786c27a0b19671bb2", "filename": "src/test/rustdoc/hidden-trait-methods.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3239f065855cb5b5de89bf7570c430eac19bbc92/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs?ref=3239f065855cb5b5de89bf7570c430eac19bbc92", "patch": "@@ -0,0 +1,29 @@\n+// test for trait methods with `doc(hidden)`.\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Trait.html\n+// @!has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @!has - '//*[@id=\"tymethod.f\"]' 'fn f()'\n+// @has - '//*[@id=\"tymethod.g\"]' 'fn g()'\n+pub trait Trait {\n+    #[doc(hidden)]\n+    type Foo;\n+    type Bar;\n+    #[doc(hidden)]\n+    fn f();\n+    fn g();\n+}\n+\n+// @has foo/struct.S.html\n+// @!has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @!has - '//*[@id=\"method.f\"]' 'fn f()'\n+// @has - '//*[@id=\"method.g\"]' 'fn g()'\n+pub struct S;\n+impl Trait for S {\n+    type Foo = ();\n+    type Bar = ();\n+    fn f() {}\n+    fn g() {}\n+}"}]}