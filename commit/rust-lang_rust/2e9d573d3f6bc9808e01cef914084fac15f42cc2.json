{"sha": "2e9d573d3f6bc9808e01cef914084fac15f42cc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOWQ1NzNkM2Y2YmM5ODA4ZTAxY2VmOTE0MDg0ZmFjMTVmNDJjYzI=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-05T03:30:44Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-05T03:52:37Z"}, "message": "Option's panics are all #[track_caller].\n\nAlso includes a simple test with a custom panic hook to ensure we don't regress.", "tree": {"sha": "f8c69760319e92f9afc123d7c61996f2f98c7984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c69760319e92f9afc123d7c61996f2f98c7984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9d573d3f6bc9808e01cef914084fac15f42cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9d573d3f6bc9808e01cef914084fac15f42cc2", "html_url": "https://github.com/rust-lang/rust/commit/2e9d573d3f6bc9808e01cef914084fac15f42cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9d573d3f6bc9808e01cef914084fac15f42cc2/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ce94c69ca510d44087291c311296f6d9ccdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ce94c69ca510d44087291c311296f6d9ccdf5", "html_url": "https://github.com/rust-lang/rust/commit/760ce94c69ca510d44087291c311296f6d9ccdf5"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "fb534586fc615e2c52e5fcee5197bb641e48b55b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e9d573d3f6bc9808e01cef914084fac15f42cc2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9d573d3f6bc9808e01cef914084fac15f42cc2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2e9d573d3f6bc9808e01cef914084fac15f42cc2", "patch": "@@ -341,6 +341,7 @@ impl<T> Option<T> {\n     /// x.expect(\"the world is ending\"); // panics with `the world is ending`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n@@ -374,6 +375,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.unwrap(), \"air\"); // fails\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap(self) -> T {\n         match self {\n@@ -1015,6 +1017,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"62633\")]\n     pub fn expect_none(self, msg: &str) {\n         if let Some(val) = self {\n@@ -1057,6 +1060,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"62633\")]\n     pub fn unwrap_none(self) {\n         if let Some(val) = self {\n@@ -1184,13 +1188,15 @@ impl<T, E> Option<Result<T, E>> {\n // This is a separate function to reduce the code size of .expect() itself.\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n // This is a separate function to reduce the code size of .expect_none() itself.\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, value)\n }"}, {"sha": "96620d6440fb69878a352c87218920cfab69dd38", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2e9d573d3f6bc9808e01cef914084fac15f42cc2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9d573d3f6bc9808e01cef914084fac15f42cc2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=2e9d573d3f6bc9808e01cef914084fac15f42cc2", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+\n+#![feature(option_expect_none, option_unwrap_none)]\n+\n+//! Test that panic locations for `#[track_caller]` functions in std have the correct\n+//! location reported.\n+\n+fn main() {\n+    // inspect the `PanicInfo` we receive to ensure the right file is the source\n+    std::panic::set_hook(Box::new(|info| {\n+        let actual = info.location().unwrap();\n+        if actual.file() != file!(){\n+            eprintln!(\"expected a location in the test file, found {:?}\", actual);\n+            panic!();\n+        }\n+    }));\n+\n+    fn assert_panicked(f: impl FnOnce() + std::panic::UnwindSafe) {\n+        std::panic::catch_unwind(f).unwrap_err();\n+    }\n+\n+    let nope: Option<()> = None;\n+    assert_panicked(|| nope.unwrap());\n+    assert_panicked(|| nope.expect(\"\"));\n+\n+    let yep: Option<()> = Some(());\n+    assert_panicked(|| yep.unwrap_none());\n+    assert_panicked(|| yep.expect_none(\"\"));\n+}"}]}