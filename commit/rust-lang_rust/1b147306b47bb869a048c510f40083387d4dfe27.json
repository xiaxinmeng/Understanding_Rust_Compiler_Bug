{"sha": "1b147306b47bb869a048c510f40083387d4dfe27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTQ3MzA2YjQ3YmI4NjlhMDQ4YzUxMGY0MDA4MzM4N2Q0ZGZlMjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-07T10:45:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-07T10:45:09Z"}, "message": "Merge #6490\n\n6490: Minimize convert_integer_literal tests r=matklad a=m-ysk\n\nCloses #6455 \r\n\r\nThis PR removes some redundant tests around convert_integer_literal.\r\n\r\nFirst, it removes test cases about converting integer with underscores except for just one case. This is because the process of removing of underscores in given integer literals is independent from radix.\r\n\r\nSecond, as well as underscore cases, it removes test cases about converting integer with suffix except for just one case. This is because the process of handling suffix is independent from radix.\r\n\r\nFinally, it removes small decimal integer cases. This is because \"special case where they return early\" has been removed by the PR #6482, so we have no need to retain this cases.\r\n\n\nCo-authored-by: m-ysk <myskjp@gmail.com>", "tree": {"sha": "f9e1f9805a3fea9e0d58a25b29ed6a2118081f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e1f9805a3fea9e0d58a25b29ed6a2118081f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b147306b47bb869a048c510f40083387d4dfe27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpnq1CRBK7hj4Ov3rIwAAdHIIAB6NnzJ5peOYCbyp0Agm0xvF\n9Hq59I8+yBrqD9/aTxvLweNOGBtsgnil1IsvlaxevSdF1CWAdiTVjj612tk/ujzS\n5yD8U0m1XJBXrDuVO4oiTqKbNnHySRTP5a1Ym3TdZJqpzvSYSZatdhvHCTFYF1w8\nGFTP9mYTq6QhMjrKK51L4Q7LBH4gMG8zXXvIIASzSvcBN8iwXxFj9h4UULHmPhd4\nF5ifVuSePcBKpth/9AXTVaaL+bzQj1Byv9oF9E5BUwVkcE8j2BUUgyPgyx496+3a\nkZ4tqIKNVr9Dx3F6dkDOI2a2vI3S7T3QTjCOM8k12vhh3HNe1aDJ97GstWy5wkM=\n=eVFA\n-----END PGP SIGNATURE-----\n", "payload": "tree f9e1f9805a3fea9e0d58a25b29ed6a2118081f16\nparent fa03bfb115f49a681fb1ea6a9ea1209c847ac0be\nparent 69ba62e6cd5d3a637477310522acef6e599197fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604745909 +0000\ncommitter GitHub <noreply@github.com> 1604745909 +0000\n\nMerge #6490\n\n6490: Minimize convert_integer_literal tests r=matklad a=m-ysk\n\nCloses #6455 \r\n\r\nThis PR removes some redundant tests around convert_integer_literal.\r\n\r\nFirst, it removes test cases about converting integer with underscores except for just one case. This is because the process of removing of underscores in given integer literals is independent from radix.\r\n\r\nSecond, as well as underscore cases, it removes test cases about converting integer with suffix except for just one case. This is because the process of handling suffix is independent from radix.\r\n\r\nFinally, it removes small decimal integer cases. This is because \"special case where they return early\" has been removed by the PR #6482, so we have no need to retain this cases.\r\n\n\nCo-authored-by: m-ysk <myskjp@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b147306b47bb869a048c510f40083387d4dfe27", "html_url": "https://github.com/rust-lang/rust/commit/1b147306b47bb869a048c510f40083387d4dfe27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b147306b47bb869a048c510f40083387d4dfe27/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa03bfb115f49a681fb1ea6a9ea1209c847ac0be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa03bfb115f49a681fb1ea6a9ea1209c847ac0be", "html_url": "https://github.com/rust-lang/rust/commit/fa03bfb115f49a681fb1ea6a9ea1209c847ac0be"}, {"sha": "69ba62e6cd5d3a637477310522acef6e599197fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ba62e6cd5d3a637477310522acef6e599197fb", "html_url": "https://github.com/rust-lang/rust/commit/69ba62e6cd5d3a637477310522acef6e599197fb"}], "stats": {"total": 370, "additions": 2, "deletions": 368}, "files": [{"sha": "66711538251420312518aeade8e71f9c44112288", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 2, "deletions": 368, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/1b147306b47bb869a048c510f40083387d4dfe27/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b147306b47bb869a048c510f40083387d4dfe27/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=1b147306b47bb869a048c510f40083387d4dfe27", "patch": "@@ -129,34 +129,6 @@ mod tests {\n         );\n     }\n \n-    // Decimal numbers under 3 digits have a special case where they return early because we can't fit a\n-    // other base's prefix, so we have a separate test for that.\n-    #[test]\n-    fn convert_small_decimal_integer() {\n-        let before = \"const _: i32 = 10<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010;\",\n-            \"Convert 10 to 0b1010\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12;\",\n-            \"Convert 10 to 0o12\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xA;\",\n-            \"Convert 10 to 0xA\",\n-        );\n-    }\n-\n     #[test]\n     fn convert_hexadecimal_integer() {\n         let before = \"const _: i32 = 0xFF<|>;\";\n@@ -236,7 +208,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn convert_decimal_integer_with_underscores() {\n+    fn convert_integer_with_underscores() {\n         let before = \"const _: i32 = 1_00_0<|>;\";\n \n         check_assist_by_label(\n@@ -262,111 +234,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn convert_small_decimal_integer_with_underscores() {\n-        let before = \"const _: i32 = 1_0<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010;\",\n-            \"Convert 1_0 to 0b1010\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12;\",\n-            \"Convert 1_0 to 0o12\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xA;\",\n-            \"Convert 1_0 to 0xA\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_underscores() {\n-        let before = \"const _: i32 = 0x_F_F<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111;\",\n-            \"Convert 0x_F_F to 0b11111111\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377;\",\n-            \"Convert 0x_F_F to 0o377\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0x_F_F to 255\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_underscores() {\n-        let before = \"const _: i32 = 0b1111_1111<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377;\",\n-            \"Convert 0b1111_1111 to 0o377\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0b1111_1111 to 255\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFF;\",\n-            \"Convert 0b1111_1111 to 0xFF\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_underscores() {\n-        let before = \"const _: i32 = 0o3_77<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111;\",\n-            \"Convert 0o3_77 to 0b11111111\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255;\",\n-            \"Convert 0o3_77 to 255\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFF;\",\n-            \"Convert 0o3_77 to 0xFF\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_decimal_integer_with_suffix() {\n+    fn convert_integer_with_suffix() {\n         let before = \"const _: i32 = 1000i32<|>;\";\n \n         check_assist_by_label(\n@@ -391,240 +259,6 @@ mod tests {\n         );\n     }\n \n-    #[test]\n-    fn convert_small_decimal_integer_with_suffix() {\n-        let before = \"const _: i32 = 10i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010i32;\",\n-            \"Convert 10i32 to 0b1010i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12i32;\",\n-            \"Convert 10i32 to 0o12i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xAi32;\",\n-            \"Convert 10i32 to 0xAi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_suffix() {\n-        let before = \"const _: i32 = 0xFFi32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0xFFi32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0xFFi32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0xFFi32 to 255i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_suffix() {\n-        let before = \"const _: i32 = 0b11111111i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b11111111i32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0b11111111i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b11111111i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_suffix() {\n-        let before = \"const _: i32 = 0o377i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o377i32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0o377i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o377i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_decimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 1_00_0i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1111101000i32;\",\n-            \"Convert 1_00_0i32 to 0b1111101000i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o1750i32;\",\n-            \"Convert 1_00_0i32 to 0o1750i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0x3E8i32;\",\n-            \"Convert 1_00_0i32 to 0x3E8i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_small_decimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 1_0i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b1010i32;\",\n-            \"Convert 1_0i32 to 0b1010i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o12i32;\",\n-            \"Convert 1_0i32 to 0o12i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xAi32;\",\n-            \"Convert 1_0i32 to 0xAi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_hexadecimal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0x_F_Fi32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0x_F_Fi32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0x_F_Fi32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0x_F_Fi32 to 255i32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_binary_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0b1111_1111i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b1111_1111i32 to 0o377i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0b1111_1111i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b1111_1111i32 to 0xFFi32\",\n-        );\n-    }\n-\n-    #[test]\n-    fn convert_octal_integer_with_underscores_and_suffix() {\n-        let before = \"const _: i32 = 0o3_77i32<|>;\";\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o3_77i32 to 0b11111111i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 255i32;\",\n-            \"Convert 0o3_77i32 to 255i32\",\n-        );\n-\n-        check_assist_by_label(\n-            convert_integer_literal,\n-            before,\n-            \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o3_77i32 to 0xFFi32\",\n-        );\n-    }\n-\n     #[test]\n     fn convert_overflowing_literal() {\n         let before = \"const _: i32 ="}]}