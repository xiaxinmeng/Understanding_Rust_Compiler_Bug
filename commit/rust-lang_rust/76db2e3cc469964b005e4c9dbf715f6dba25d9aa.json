{"sha": "76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZGIyZTNjYzQ2OTk2NGIwMDVlNGM5ZGJmNzE1ZjZkYmEyNWQ5YWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T18:46:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T18:46:10Z"}, "message": "Rollup merge of #67487 - GuillaumeGomez:rustdoc-mutability-removal, r=Centril\n\nRustdoc mutability removal\n\nFixes #67470.\n\nAs discussed in another PR, the `clean::Mutability` type in rustdoc is useless. So let's remove it!\n\nr? @Centril", "tree": {"sha": "3d46b1574e60328f42b3d5df994244b31213fb0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d46b1574e60328f42b3d5df994244b31213fb0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/7nyCRBK7hj4Ov3rIwAAdHIIAG5iLqUOR3TNzicFLijZMM9T\ndTfZqED+JAmkoJV1C0Gx97dyZIgNVYd64b25CkxuLI0MHikubX4IODUV7Rar23YA\n6aHcG5VyvEiVAaaJXKeeeYQTk84aZg/umv2HlxMy0l5dRChHHULnLC+0dUUz4jeY\nEpLuTuTxuuld1MlC7Mtt4fjbuAn9BaZWBWg82V4Vqir2/qdRDDADdK2iAErv95QJ\n1lHgbCGawduKJjhLGYQ6rLYG/88Pb+VPtpqhI9A4wTYdMSR4vyuRppvLCAYFl/6T\nRDZKfbkVAY1jOIhtXeucAdD/F2B21NxAY1JCSpCGzAcyv8623Wm3akpB75fnRoA=\n=kVVF\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d46b1574e60328f42b3d5df994244b31213fb0a\nparent 2b2cc38f5c0a278c12cb7e365da4b38b94b6be53\nparent 0d7a49d3563246f193e11ae63e713c0a65319f8c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577040370 +0100\ncommitter GitHub <noreply@github.com> 1577040370 +0100\n\nRollup merge of #67487 - GuillaumeGomez:rustdoc-mutability-removal, r=Centril\n\nRustdoc mutability removal\n\nFixes #67470.\n\nAs discussed in another PR, the `clean::Mutability` type in rustdoc is useless. So let's remove it!\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "html_url": "https://github.com/rust-lang/rust/commit/76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53", "html_url": "https://github.com/rust-lang/rust/commit/2b2cc38f5c0a278c12cb7e365da4b38b94b6be53"}, {"sha": "0d7a49d3563246f193e11ae63e713c0a65319f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7a49d3563246f193e11ae63e713c0a65319f8c", "html_url": "https://github.com/rust-lang/rust/commit/0d7a49d3563246f193e11ae63e713c0a65319f8c"}], "stats": {"total": 63, "additions": 23, "deletions": 40}, "files": [{"sha": "b7e01708fbfcfee0fd89d755bc382150f93f0e13", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "patch": "@@ -7,7 +7,7 @@ use syntax::symbol::sym;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc_metadata::creader::LoadedMacro;\n@@ -472,7 +472,7 @@ fn build_const(cx: &DocContext<'_>, did: DefId) -> clean::Constant {\n fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {\n     clean::Static {\n         type_: cx.tcx.type_of(did).clean(cx),\n-        mutability: if mutable {clean::Mutable} else {clean::Immutable},\n+        mutability: if mutable { Mutability::Mut } else { Mutability::Not },\n         expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n     }\n }"}, {"sha": "4afa0be55a64c692521786ce9c42391fc55aa06c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "patch": "@@ -45,7 +45,6 @@ pub use utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n pub use self::types::*;\n pub use self::types::Type::*;\n-pub use self::types::Mutability::*;\n pub use self::types::ItemEnum::*;\n pub use self::types::SelfTy::*;\n pub use self::types::FunctionRetTy::*;\n@@ -1327,15 +1326,14 @@ impl Clean<Type> for hir::Ty {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl.clean(cx), box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 let lifetime = if l.is_elided() {\n                     None\n                 } else {\n                     Some(l.clean(cx))\n                 };\n-                BorrowedRef {lifetime, mutability: m.mutbl.clean(cx),\n-                             type_: box m.ty.clean(cx)}\n+                BorrowedRef {lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx)}\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n@@ -1538,10 +1536,10 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n             ty::Ref(r, ty, mutbl) => BorrowedRef {\n                 lifetime: r.clean(cx),\n-                mutability: mutbl.clean(cx),\n+                mutability: mutbl,\n                 type_: box ty.clean(cx),\n             },\n             ty::FnDef(..) |\n@@ -2064,7 +2062,7 @@ impl Clean<Item> for doctree::Static<'_> {\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n-                mutability: self.mutability.clean(cx),\n+                mutability: self.mutability,\n                 expr: print_const_expr(cx, self.expr),\n             }),\n         }\n@@ -2089,15 +2087,6 @@ impl Clean<Item> for doctree::Constant<'_> {\n     }\n }\n \n-impl Clean<Mutability> for hir::Mutability {\n-    fn clean(&self, _: &DocContext<'_>) -> Mutability {\n-        match self {\n-            &hir::Mutability::Mut => Mutable,\n-            &hir::Mutability::Not => Immutable,\n-        }\n-    }\n-}\n-\n impl Clean<ImplPolarity> for ty::ImplPolarity {\n     fn clean(&self, _: &DocContext<'_>) -> ImplPolarity {\n         match self {\n@@ -2287,7 +2276,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n             hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n-                    mutability: mutbl.clean(cx),\n+                    mutability: *mutbl,\n                     expr: String::new(),\n                 })\n             }"}, {"sha": "706aef720310f5f266e1c67f29f898630da951e8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n \n use rustc::middle::lang_items;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::hir::def::Res;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::ty::layout::VariantIdx;\n@@ -1450,12 +1450,6 @@ pub struct Constant {\n     pub expr: String,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Copy, Hash)]\n-pub enum Mutability {\n-    Mutable,\n-    Immutable,\n-}\n-\n #[derive(Clone, PartialEq, Debug)]\n pub enum ImplPolarity {\n     Positive,"}, {"sha": "501147ed4593ba6748c724eba77a70016a42a8ff", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "patch": "@@ -670,8 +670,8 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n         clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n         clean::RawPointer(m, ref t) => {\n             let m = match m {\n-                clean::Immutable => \"const\",\n-                clean::Mutable => \"mut\",\n+                hir::Mutability::Mut => \"mut\",\n+                hir::Mutability::Not => \"const\",\n             };\n             match **t {\n                 clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n@@ -1082,6 +1082,15 @@ impl PrintWithSpace for hir::IsAsync {\n     }\n }\n \n+impl PrintWithSpace for hir::Mutability {\n+    fn print_with_space(&self) -> &str {\n+        match self {\n+            hir::Mutability::Not => \"\",\n+            hir::Mutability::Mut => \"mut \",\n+        }\n+    }\n+}\n+\n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| {\n@@ -1151,15 +1160,6 @@ impl clean::TypeBinding {\n     }\n }\n \n-impl clean::Mutability {\n-    crate fn print_with_space(&self) -> &str {\n-        match self {\n-            clean::Immutable => \"\",\n-            clean::Mutable => \"mut \",\n-        }\n-    }\n-}\n-\n crate fn print_abi_with_space(abi: Abi) -> impl fmt::Display {\n     display_fn(move |f| {\n         let quot = if f.alternate() { \"\\\"\" } else { \"&quot;\" };"}, {"sha": "100aed1af193a227da168a05b0847ab6190272d5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76db2e3cc469964b005e4c9dbf715f6dba25d9aa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "patch": "@@ -54,12 +54,12 @@ use syntax_pos::hygiene::MacroKind;\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::hir;\n+use rustc::hir::{self, Mutability};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n use rustc_feature::UnstableFeatures;\n \n-use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n+use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, ErrorStorage, PathError};\n use crate::doctree;\n@@ -3298,7 +3298,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n         let (by_mut_ref, by_box, by_value) = match self_ty {\n             SelfTy::SelfBorrowed(_, mutability) |\n             SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n-                (mutability == Mutability::Mutable, false, false)\n+                (mutability == Mutability::Mut, false, false)\n             },\n             SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n                 (false, Some(did) == cache().owned_box_did, false)"}]}