{"sha": "a88414e007d9740c1c3d483ff778f7f2d3f32749", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ODQxNGUwMDdkOTc0MGMxYzNkNDgzZmY3NzhmN2YyZDNmMzI3NDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-21T10:08:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T09:39:49Z"}, "message": "libcore: avoid mem::uninitialized and raw ptr casts", "tree": {"sha": "aa605affdf11df380d4adb3bfb729eaff1710e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa605affdf11df380d4adb3bfb729eaff1710e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88414e007d9740c1c3d483ff778f7f2d3f32749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88414e007d9740c1c3d483ff778f7f2d3f32749", "html_url": "https://github.com/rust-lang/rust/commit/a88414e007d9740c1c3d483ff778f7f2d3f32749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88414e007d9740c1c3d483ff778f7f2d3f32749/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11e514e9dfd44eebe435408b32de4193d87860c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11e514e9dfd44eebe435408b32de4193d87860c", "html_url": "https://github.com/rust-lang/rust/commit/c11e514e9dfd44eebe435408b32de4193d87860c"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "ff284d2978e70d16cb61507af99cb392b04a52c6", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=a88414e007d9740c1c3d483ff778f7f2d3f32749", "patch": "@@ -6,7 +6,7 @@ use ops::{Div, Rem, Sub};\n use str;\n use slice;\n use ptr;\n-use mem;\n+use mem::MaybeUninit;\n \n #[doc(hidden)]\n trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n@@ -51,7 +51,12 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        let mut buf: [u8; 128] = unsafe { mem::uninitialized() };\n+        // Creating a `[MaybeUninit; N]` array by first creating a\n+        // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n+        // array does not require initialization.\n+        let mut buf: [MaybeUninit<u8>; 128] = unsafe {\n+            MaybeUninit::uninitialized().into_inner()\n+        };\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -60,7 +65,7 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = x % base;               // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n+                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -72,15 +77,19 @@ trait GenericRadix {\n             for byte in buf.iter_mut().rev() {\n                 let n = zero - (x % base);      // Get the current place value.\n                 x = x / base;                   // Deaccumulate the number.\n-                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n+                byte.set(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n                     break\n                 };\n             }\n         }\n-        let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n+        let buf = &buf[curr..];\n+        let buf = unsafe { str::from_utf8_unchecked(slice::from_raw_parts(\n+            MaybeUninit::first_ptr(buf),\n+            buf.len()\n+        )) };\n         f.pad_integral(is_nonnegative, Self::PREFIX, buf)\n     }\n }\n@@ -194,9 +203,14 @@ macro_rules! impl_Display {\n                 // convert the negative num to positive by summing 1 to it's 2 complement\n                 (!self.$conv_fn()).wrapping_add(1)\n             };\n-            let mut buf: [u8; 39] = unsafe { mem::uninitialized() };\n+            // Creating a `[MaybeUninit; N]` array by first creating a\n+            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n+            // array does not require initialization.\n+            let mut buf: [MaybeUninit<u8>; 39] = unsafe {\n+                MaybeUninit::uninitialized().into_inner()\n+            };\n             let mut curr = buf.len() as isize;\n-            let buf_ptr = buf.as_mut_ptr();\n+            let buf_ptr = MaybeUninit::first_mut_ptr(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n \n             unsafe {"}, {"sha": "dbf0b15818909f5446188f0b07fcab179fc485eb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a88414e007d9740c1c3d483ff778f7f2d3f32749", "patch": "@@ -60,6 +60,7 @@\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![no_core]\n+#![warn(deprecated_in_future)]\n #![deny(missing_docs)]\n #![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]"}, {"sha": "4631d32d186f6c34ebb7b2cb9cdf07587513d996", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=a88414e007d9740c1c3d483ff778f7f2d3f32749", "patch": "@@ -1148,4 +1148,18 @@ impl<T> MaybeUninit<T> {\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         unsafe { &mut *self.value as *mut T }\n     }\n+\n+    /// Get a pointer to the first contained values.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+        this as *const [MaybeUninit<T>] as *const T\n+    }\n+\n+    /// Get a mutable pointer to the first contained values.\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    pub fn first_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+        this as *mut [MaybeUninit<T>] as *mut T\n+    }\n }"}, {"sha": "8eb6a4d54c0f6423a3ae2fba637b2e850dea4722", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88414e007d9740c1c3d483ff778f7f2d3f32749/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=a88414e007d9740c1c3d483ff778f7f2d3f32749", "patch": "@@ -216,14 +216,21 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n+    // Creating a `[MaybeUninit; N]` array by first creating a\n+    // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n+    // array does not require initialization.\n+    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = unsafe {\n+        MaybeUninit::uninitialized().into_inner()\n+    };\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n+    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = unsafe {\n+        MaybeUninit::uninitialized().into_inner()\n+    };\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n@@ -262,8 +269,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = offsets_l.as_mut_ptr() as *mut u8;\n-            end_l = offsets_l.as_mut_ptr() as *mut u8;\n+            start_l = MaybeUninit::first_mut_ptr(&mut offsets_l);\n+            end_l = MaybeUninit::first_mut_ptr(&mut offsets_l);\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -278,8 +285,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = offsets_r.as_mut_ptr() as *mut u8;\n-            end_r = offsets_r.as_mut_ptr() as *mut u8;\n+            start_r = MaybeUninit::first_mut_ptr(&mut offsets_r);\n+            end_r = MaybeUninit::first_mut_ptr(&mut offsets_r);\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}