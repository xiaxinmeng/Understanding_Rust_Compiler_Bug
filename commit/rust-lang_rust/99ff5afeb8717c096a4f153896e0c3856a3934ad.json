{"sha": "99ff5afeb8717c096a4f153896e0c3856a3934ad", "node_id": "C_kwDOAAsO6NoAKDk5ZmY1YWZlYjg3MTdjMDk2YTRmMTUzODk2ZTBjMzg1NmEzOTM0YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T10:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T10:40:32Z"}, "message": "Auto merge of #111329 - jyn514:metadata-ice, r=bjorn3\n\nLoad only the crate header for `locator::crate_matches`\n\nPreviously, we used the following info to determine whether to load the crate:\n1. The METADATA_HEADER, which includes a METADATA_VERSION constant\n2. The embedded rustc version\n3. Various metadata in the `CrateRoot`, including the SVH\n\nThis worked ok most of the time. Unfortunately, when building locally the rustc version is always\nthe same because `omit-git-hash` is on by default. That meant that we depended only on 1 and 3, and\nwe are not very good about bumping METADATA_VERSION (it's currently at 7) so in practice we were\nonly depending on 3. `CrateRoot` is a very large struct and changes somewhat regularly, so this led\nto a steady stream of crashes from trying to load it.\n\nChange the logic to add an intermediate step between 2 and 3: introduce a new `CrateHeader` struct\nthat contains only the minimum info needed to decide whether the crate should be loaded or not. That\navoids having to load all of `CrateRoot`, which in practice means we should crash much less often.\n\nNote that this works because the SVH should be different between any two dependencies, even if the\ncompiler has changed, because we use `-Zbinary-dep-depinfo` in bootstrap. See\nhttps://github.com/rust-lang/rust/pull/111329#issuecomment-1538303474 for more details about how the\noriginal crash happened.", "tree": {"sha": "4da038c2d54b852a369c05f64dcd6b49056194d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da038c2d54b852a369c05f64dcd6b49056194d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ff5afeb8717c096a4f153896e0c3856a3934ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ff5afeb8717c096a4f153896e0c3856a3934ad", "html_url": "https://github.com/rust-lang/rust/commit/99ff5afeb8717c096a4f153896e0c3856a3934ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ff5afeb8717c096a4f153896e0c3856a3934ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e04bd88d85cab8ed110ace5a278fab106d0ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e04bd88d85cab8ed110ace5a278fab106d0ef5", "html_url": "https://github.com/rust-lang/rust/commit/70e04bd88d85cab8ed110ace5a278fab106d0ef5"}, {"sha": "60e95e76d059e3bbeb19d819914df3bcf7684a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e95e76d059e3bbeb19d819914df3bcf7684a82", "html_url": "https://github.com/rust-lang/rust/commit/60e95e76d059e3bbeb19d819914df3bcf7684a82"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "a89d7b464e2e92033b0c2441cd0e20d41579e346", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -666,31 +666,30 @@ impl<'a> CrateLocator<'a> {\n             return None;\n         }\n \n-        let root = metadata.get_root();\n-        if root.is_proc_macro_crate() != self.is_proc_macro {\n+        let header = metadata.get_header();\n+        if header.is_proc_macro_crate != self.is_proc_macro {\n             info!(\n                 \"Rejecting via proc macro: expected {} got {}\",\n-                self.is_proc_macro,\n-                root.is_proc_macro_crate(),\n+                self.is_proc_macro, header.is_proc_macro_crate,\n             );\n             return None;\n         }\n \n-        if self.exact_paths.is_empty() && self.crate_name != root.name() {\n+        if self.exact_paths.is_empty() && self.crate_name != header.name {\n             info!(\"Rejecting via crate name\");\n             return None;\n         }\n \n-        if root.triple() != &self.triple {\n-            info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, root.triple());\n+        if header.triple != self.triple {\n+            info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, header.triple);\n             self.crate_rejections.via_triple.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n-                got: root.triple().to_string(),\n+                got: header.triple.to_string(),\n             });\n             return None;\n         }\n \n-        let hash = root.hash();\n+        let hash = header.hash;\n         if let Some(expected_hash) = self.hash {\n             if hash != expected_hash {\n                 info!(\"Rejecting via hash: expected {} got {}\", expected_hash, hash);"}, {"sha": "06fdc6fe0308439a48f514ee9e21eb26820d81e9", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -74,6 +74,7 @@ pub(crate) struct CrateMetadata {\n     blob: MetadataBlob,\n \n     // --- Some data pre-decoded from the metadata blob, usually for performance ---\n+    /// Data about the top-level items in a crate, as well as various crate-level metadata.\n     root: CrateRoot,\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n@@ -449,7 +450,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n                 You need to explicitly pass `(crate_metadata_ref, tcx)` to `decode` instead of just `crate_metadata_ref`.\");\n         };\n \n-        let cname = cdata.root.name;\n+        let cname = cdata.root.name();\n         rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {\n             debug!(\"SpecializedDecoder<SyntaxContext>: decoding {}\", id);\n             cdata\n@@ -564,7 +565,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n                 let cnum = u32::decode(decoder);\n                 panic!(\n                     \"Decoding of crate {:?} tried to access proc-macro dep {:?}\",\n-                    decoder.cdata().root.name,\n+                    decoder.cdata().root.header.name,\n                     cnum\n                 );\n             }\n@@ -671,6 +672,16 @@ impl MetadataBlob {\n             .decode(self)\n     }\n \n+    pub(crate) fn get_header(&self) -> CrateHeader {\n+        let slice = &self.blob()[..];\n+        let offset = METADATA_HEADER.len();\n+\n+        let pos_bytes = slice[offset..][..4].try_into().unwrap();\n+        let pos = u32::from_be_bytes(pos_bytes) as usize;\n+\n+        LazyValue::<CrateHeader>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)\n+    }\n+\n     pub(crate) fn get_root(&self) -> CrateRoot {\n         let slice = &self.blob()[..];\n         let offset = METADATA_HEADER.len();\n@@ -684,8 +695,8 @@ impl MetadataBlob {\n     pub(crate) fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {\n         let root = self.get_root();\n         writeln!(out, \"Crate info:\")?;\n-        writeln!(out, \"name {}{}\", root.name, root.extra_filename)?;\n-        writeln!(out, \"hash {} stable_crate_id {:?}\", root.hash, root.stable_crate_id)?;\n+        writeln!(out, \"name {}{}\", root.name(), root.extra_filename)?;\n+        writeln!(out, \"hash {} stable_crate_id {:?}\", root.hash(), root.stable_crate_id)?;\n         writeln!(out, \"proc_macro {:?}\", root.proc_macro_data.is_some())?;\n         writeln!(out, \"=External Dependencies=\")?;\n \n@@ -709,21 +720,17 @@ impl CrateRoot {\n     }\n \n     pub(crate) fn name(&self) -> Symbol {\n-        self.name\n+        self.header.name\n     }\n \n     pub(crate) fn hash(&self) -> Svh {\n-        self.hash\n+        self.header.hash\n     }\n \n     pub(crate) fn stable_crate_id(&self) -> StableCrateId {\n         self.stable_crate_id\n     }\n \n-    pub(crate) fn triple(&self) -> &TargetTriple {\n-        &self.triple\n-    }\n-\n     pub(crate) fn decode_crate_deps<'a>(\n         &self,\n         metadata: &'a MetadataBlob,\n@@ -794,7 +801,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             bug!(\n                 \"CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}\",\n                 item_id,\n-                self.root.name,\n+                self.root.name(),\n                 self.cnum,\n             )\n         })\n@@ -1702,11 +1709,11 @@ impl CrateMetadata {\n     }\n \n     pub(crate) fn name(&self) -> Symbol {\n-        self.root.name\n+        self.root.header.name\n     }\n \n     pub(crate) fn hash(&self) -> Svh {\n-        self.root.hash\n+        self.root.header.hash\n     }\n \n     fn num_def_ids(&self) -> usize {"}, {"sha": "3d8991d99b5290d493c42bbcf142c1c679a98042", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -317,9 +317,9 @@ provide! { tcx, def_id, other, cdata,\n     }\n     native_libraries => { cdata.get_native_libraries(tcx.sess).collect() }\n     foreign_modules => { cdata.get_foreign_modules(tcx.sess).map(|m| (m.def_id, m)).collect() }\n-    crate_hash => { cdata.root.hash }\n+    crate_hash => { cdata.root.header.hash }\n     crate_host_hash => { cdata.host_hash }\n-    crate_name => { cdata.root.name }\n+    crate_name => { cdata.root.header.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -581,7 +581,7 @@ impl CrateStore for CStore {\n     }\n \n     fn crate_name(&self, cnum: CrateNum) -> Symbol {\n-        self.get_crate_data(cnum).root.name\n+        self.get_crate_data(cnum).root.header.name\n     }\n \n     fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId {"}, {"sha": "f2a7762f00386abd1e23053efc31786412ac32ca", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -662,10 +662,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let root = stat!(\"final\", || {\n             let attrs = tcx.hir().krate_attrs();\n             self.lazy(CrateRoot {\n-                name: tcx.crate_name(LOCAL_CRATE),\n+                header: CrateHeader {\n+                    name: tcx.crate_name(LOCAL_CRATE),\n+                    triple: tcx.sess.opts.target_triple.clone(),\n+                    hash: tcx.crate_hash(LOCAL_CRATE),\n+                    is_proc_macro_crate: proc_macro_data.is_some(),\n+                },\n                 extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n-                triple: tcx.sess.opts.target_triple.clone(),\n-                hash: tcx.crate_hash(LOCAL_CRATE),\n                 stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n                 required_panic_strategy: tcx.required_panic_strategy(LOCAL_CRATE),\n                 panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,"}, {"sha": "ce2fe70a8b272cf5af14c1c0878faa631f883d95", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn rustc_version(cfg_version: &'static str) -> String {\n /// Metadata encoding version.\n /// N.B., increment this if you change the format of metadata such that\n /// the rustc version can't be found to compare with `rustc_version()`.\n-const METADATA_VERSION: u8 = 7;\n+const METADATA_VERSION: u8 = 8;\n \n /// Metadata header which includes `METADATA_VERSION`.\n ///\n@@ -199,7 +199,27 @@ pub(crate) struct ProcMacroData {\n     macros: LazyArray<DefIndex>,\n }\n \n-/// Serialized metadata for a crate.\n+/// Serialized crate metadata.\n+///\n+/// This contains just enough information to determine if we should load the `CrateRoot` or not.\n+/// Prefer [`CrateRoot`] whenever possible to avoid ICEs when using `omit-git-hash` locally.\n+/// See #76720 for more details.\n+///\n+/// If you do modify this struct, also bump the [`METADATA_VERSION`] constant.\n+#[derive(MetadataEncodable, MetadataDecodable)]\n+pub(crate) struct CrateHeader {\n+    pub(crate) triple: TargetTriple,\n+    pub(crate) hash: Svh,\n+    pub(crate) name: Symbol,\n+    /// Whether this is the header for a proc-macro crate.\n+    ///\n+    /// This is separate from [`ProcMacroData`] to avoid having to update [`METADATA_VERSION`] every\n+    /// time ProcMacroData changes.\n+    pub(crate) is_proc_macro_crate: bool,\n+}\n+\n+/// Serialized `.rmeta` data for a crate.\n+///\n /// When compiling a proc-macro crate, we encode many of\n /// the `LazyArray<T>` fields as `Lazy::empty()`. This serves two purposes:\n ///\n@@ -217,10 +237,10 @@ pub(crate) struct ProcMacroData {\n /// to being unused.\n #[derive(MetadataEncodable, MetadataDecodable)]\n pub(crate) struct CrateRoot {\n-    name: Symbol,\n-    triple: TargetTriple,\n+    /// A header used to detect if this is the right crate to load.\n+    header: CrateHeader,\n+\n     extra_filename: String,\n-    hash: Svh,\n     stable_crate_id: StableCrateId,\n     required_panic_strategy: Option<PanicStrategy>,\n     panic_in_drop_strategy: PanicStrategy,\n@@ -465,6 +485,7 @@ trivially_parameterized_over_tcx! {\n     RawDefId,\n     TraitImpls,\n     IncoherentImpls,\n+    CrateHeader,\n     CrateRoot,\n     CrateDep,\n     AttrFlags,"}, {"sha": "13f67a0128a7e8f2ecb0870915be012d15666eb2", "filename": "src/tools/rust-analyzer/crates/proc-macro-api/src/version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99ff5afeb8717c096a4f153896e0c3856a3934ad/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ff5afeb8717c096a4f153896e0c3856a3934ad/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-api%2Fsrc%2Fversion.rs?ref=99ff5afeb8717c096a4f153896e0c3856a3934ad", "patch": "@@ -122,7 +122,7 @@ pub fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     // https://github.com/rust-lang/rust/commit/0696e79f2740ad89309269b460579e548a5cd632\n     let snappy_portion = match version {\n         5 | 6 => &dot_rustc[8..],\n-        7 => {\n+        7 | 8 => {\n             let len_bytes = &dot_rustc[8..12];\n             let data_len = u32::from_be_bytes(len_bytes.try_into().unwrap()) as usize;\n             &dot_rustc[12..data_len + 12]"}]}