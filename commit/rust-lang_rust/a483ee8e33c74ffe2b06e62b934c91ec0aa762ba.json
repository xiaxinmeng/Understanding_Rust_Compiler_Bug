{"sha": "a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ODNlZThlMzNjNzRmZmUyYjA2ZTYyYjkzNGM5MWVjMGFhNzYyYmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:03:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` the trait map", "tree": {"sha": "9e854727898e04ba03ec03a08ab6ad0bcb1791a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e854727898e04ba03ec03a08ab6ad0bcb1791a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "html_url": "https://github.com/rust-lang/rust/commit/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fc7b9918c7225351985b84463c85879964acb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fc7b9918c7225351985b84463c85879964acb0", "html_url": "https://github.com/rust-lang/rust/commit/d3fc7b9918c7225351985b84463c85879964acb0"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "062872187f123290b9baf373fc81d5e30904335f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "patch": "@@ -46,7 +46,7 @@ struct binding_info {\n type BindingMap = HashMap<Name,binding_info>;\n \n // Trait method resolution\n-pub type TraitMap = HashMap<NodeId,@mut ~[DefId]>;\n+pub type TraitMap = HashMap<NodeId,@RefCell<~[DefId]>>;\n \n // This is the replacement export map. It maps a module to all of the exports\n // within.\n@@ -5244,14 +5244,14 @@ impl Resolver {\n                 // the field name so that we can do some nice error reporting\n                 // later on in typeck.\n                 let traits = self.search_for_traits_containing_method(ident);\n-                self.trait_map.insert(expr.id, @mut traits);\n+                self.trait_map.insert(expr.id, @RefCell::new(traits));\n             }\n             ExprMethodCall(_, _, ident, _, _, _) => {\n                 debug!(\"(recording candidate traits for expr) recording \\\n                         traits for {}\",\n                        expr.id);\n                 let traits = self.search_for_traits_containing_method(ident);\n-                self.trait_map.insert(expr.id, @mut traits);\n+                self.trait_map.insert(expr.id, @RefCell::new(traits));\n             }\n             ExprBinary(_, BiAdd, _, _) | ExprAssignOp(_, BiAdd, _, _) => {\n                 let i = self.lang_items.add_trait();\n@@ -5442,7 +5442,7 @@ impl Resolver {\n                                     trait_id: Option<DefId>) {\n         match trait_id {\n             Some(trait_id) => {\n-                self.trait_map.insert(expr_id, @mut ~[trait_id]);\n+                self.trait_map.insert(expr_id, @RefCell::new(~[trait_id]));\n             }\n             None => {}\n         }"}, {"sha": "0d0c26baf9c8afa995c1acfc4f75992fe48e8104", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a483ee8e33c74ffe2b06e62b934c91ec0aa762ba/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=a483ee8e33c74ffe2b06e62b934c91ec0aa762ba", "patch": "@@ -347,7 +347,8 @@ impl<'a> LookupContext<'a> {\n         let trait_map: &resolve::TraitMap = &self.fcx.ccx.trait_map;\n         let opt_applicable_traits = trait_map.find(&self.expr.id);\n         for applicable_traits in opt_applicable_traits.iter() {\n-            for trait_did in applicable_traits.iter() {\n+            let applicable_traits = applicable_traits.borrow();\n+            for trait_did in applicable_traits.get().iter() {\n                 ty::populate_implementations_for_trait_if_necessary(\n                     self.tcx(),\n                     *trait_did);"}]}