{"sha": "a219917e3f762af49f5ccf7a0975122e04f9d764", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTk5MTdlM2Y3NjJhZjQ5ZjVjY2Y3YTA5NzUxMjJlMDRmOWQ3NjQ=", "commit": {"author": {"name": "Lee Jeffery", "email": "lee@leejeffery.co.uk", "date": "2015-07-15T18:57:47Z"}, "committer": {"name": "Lee Jeffery", "email": "lee@leejeffery.co.uk", "date": "2015-07-18T10:34:59Z"}, "message": "Fix doc comment parsing in macros.", "tree": {"sha": "cd8001141ab432697bbd1c0a230be6b9d7aa62fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd8001141ab432697bbd1c0a230be6b9d7aa62fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a219917e3f762af49f5ccf7a0975122e04f9d764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a219917e3f762af49f5ccf7a0975122e04f9d764", "html_url": "https://github.com/rust-lang/rust/commit/a219917e3f762af49f5ccf7a0975122e04f9d764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a219917e3f762af49f5ccf7a0975122e04f9d764/comments", "author": null, "committer": null, "parents": [{"sha": "3f50dca3865fa510a1d80c94f2272c5ff78dc373", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f50dca3865fa510a1d80c94f2272c5ff78dc373", "html_url": "https://github.com/rust-lang/rust/commit/3f50dca3865fa510a1d80c94f2272c5ff78dc373"}], "stats": {"total": 155, "additions": 142, "deletions": 13}, "files": [{"sha": "8683689bbbe24c05e95a8f41818f00494006af35", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -636,10 +636,10 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        #[doc=\"Created with the method `.split()`.\"]\n+        /// Created with the method `.split()`.\n         struct Split;\n     reverse:\n-        #[doc=\"Created with the method `.rsplit()`.\"]\n+        /// Created with the method `.rsplit()`.\n         struct RSplit;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -650,10 +650,10 @@ generate_pattern_iterators! {\n \n generate_pattern_iterators! {\n     forward:\n-        #[doc=\"Created with the method `.split_terminator()`.\"]\n+        /// Created with the method `.split_terminator()`.\n         struct SplitTerminator;\n     reverse:\n-        #[doc=\"Created with the method `.rsplit_terminator()`.\"]\n+        /// Created with the method `.rsplit_terminator()`.\n         struct RSplitTerminator;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -696,10 +696,10 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        #[doc=\"Created with the method `.splitn()`.\"]\n+        /// Created with the method `.splitn()`.\n         struct SplitN;\n     reverse:\n-        #[doc=\"Created with the method `.rsplitn()`.\"]\n+        /// Created with the method `.rsplitn()`.\n         struct RSplitN;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -730,10 +730,10 @@ impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        #[doc=\"Created with the method `.match_indices()`.\"]\n+        /// Created with the method `.match_indices()`.\n         struct MatchIndices;\n     reverse:\n-        #[doc=\"Created with the method `.rmatch_indices()`.\"]\n+        /// Created with the method `.rmatch_indices()`.\n         struct RMatchIndices;\n     stability:\n         #[unstable(feature = \"str_match_indices\",\n@@ -771,10 +771,10 @@ impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n \n generate_pattern_iterators! {\n     forward:\n-        #[doc=\"Created with the method `.matches()`.\"]\n+        /// Created with the method `.matches()`.\n         struct Matches;\n     reverse:\n-        #[doc=\"Created with the method `.rmatches()`.\"]\n+        /// Created with the method `.rmatches()`.\n         struct RMatches;\n     stability:\n         #[stable(feature = \"str_matches\", since = \"1.2.0\")]"}, {"sha": "a0059d33bed840c53d80a0c64cc12e0b8aee029d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -63,6 +63,7 @@ use owned_slice::OwnedSlice;\n use parse::token::{InternedString, str_to_ident};\n use parse::token;\n use parse::lexer;\n+use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use print::pprust;\n use ptr::P;\n \n@@ -1079,7 +1080,12 @@ pub enum TokenTree {\n impl TokenTree {\n     pub fn len(&self) -> usize {\n         match *self {\n-            TtToken(_, token::DocComment(_)) => 2,\n+            TtToken(_, token::DocComment(name)) => {\n+                match doc_comment_style(name.as_str()) {\n+                    AttrOuter => 2,\n+                    AttrInner => 3\n+                }\n+            }\n             TtToken(_, token::SpecialVarNt(..)) => 2,\n             TtToken(_, token::MatchNt(..)) => 3,\n             TtDelimited(_, ref delimed) => {\n@@ -1097,14 +1103,20 @@ impl TokenTree {\n             (&TtToken(sp, token::DocComment(_)), 0) => {\n                 TtToken(sp, token::Pound)\n             }\n-            (&TtToken(sp, token::DocComment(name)), 1) => {\n+            (&TtToken(sp, token::DocComment(name)), 1)\n+            if doc_comment_style(name.as_str()) == AttrInner => {\n+                TtToken(sp, token::Not)\n+            }\n+            (&TtToken(sp, token::DocComment(name)), _) => {\n+                let stripped = strip_doc_comment_decoration(name.as_str());\n                 TtDelimited(sp, Rc::new(Delimited {\n                     delim: token::Bracket,\n                     open_span: sp,\n                     tts: vec![TtToken(sp, token::Ident(token::str_to_ident(\"doc\"),\n                                                        token::Plain)),\n                               TtToken(sp, token::Eq),\n-                              TtToken(sp, token::Literal(token::StrRaw(name, 0), None))],\n+                              TtToken(sp, token::Literal(\n+                                  token::StrRaw(token::intern(&stripped), 0), None))],\n                     close_span: sp,\n                 }))\n             }"}, {"sha": "03bcef4fa5ee07f1c25755b4122f75af5d7a7e29", "filename": "src/test/parse-fail/macro-doc-comments-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-1.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! outer {\n+    (#[$outer:meta]) => ()\n+}\n+\n+outer! {\n+    //! Inner\n+} //~^ ERROR no rules expected the token `!`\n+\n+fn main() { }"}, {"sha": "a1b112c29b6e0fa9e87645ea37c64e3b40d34571", "filename": "src/test/parse-fail/macro-doc-comments-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmacro-doc-comments-2.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! inner {\n+    (#![$inner:meta]) => ()\n+}\n+\n+inner! {\n+    /// Outer\n+} //~^ ERROR no rules expected the token `[`\n+\n+fn main() { }"}, {"sha": "506813df5b374cd825665e138cb86821e5b12a5f", "filename": "src/test/run-pass/macro-doc-comments.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Frun-pass%2Fmacro-doc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Frun-pass%2Fmacro-doc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-doc-comments.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! doc {\n+    (\n+        $(#[$outer:meta])*\n+        mod $i:ident {\n+            $(#![$inner:meta])*\n+        }\n+    ) =>\n+    (\n+        $(#[$outer])*\n+        pub mod $i {\n+            $(#![$inner])*\n+        }\n+    )\n+}\n+\n+doc! {\n+    /// Outer doc\n+    mod Foo {\n+        //! Inner doc\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "37f6749694c40ddb5c323babc2362f73ab612aa3", "filename": "src/test/rustdoc/issue-23812.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219917e3f762af49f5ccf7a0975122e04f9d764/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23812.rs?ref=a219917e3f762af49f5ccf7a0975122e04f9d764", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! doc {\n+    (#[$outer:meta] mod $i:ident { #![$inner:meta] }) =>\n+    (\n+        #[$outer]\n+        pub mod $i {\n+            #![$inner]\n+        }\n+    )\n+}\n+\n+doc! {\n+    /// Outer comment\n+    mod Foo {\n+        //! Inner comment\n+    }\n+}\n+\n+// @has issue_23812/Foo/index.html\n+// @has - 'Outer comment'\n+// @!has - '/// Outer comment'\n+// @has - 'Inner comment'\n+// @!has - '//! Inner comment'\n+\n+\n+doc! {\n+    /** Outer block comment */\n+    mod Bar {\n+        /*! Inner block comment */\n+    }\n+}\n+\n+// @has issue_23812/Bar/index.html\n+// @has - 'Outer block comment'\n+// @!has - '/** Outer block comment */'\n+// @has - 'Inner block comment'\n+// @!has - '/*! Inner block comment */'"}]}