{"sha": "a0c290f951076d781b0ff08370445517446cee05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzI5MGY5NTEwNzZkNzgxYjBmZjA4MzcwNDQ1NTE3NDQ2Y2VlMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T12:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-13T12:43:12Z"}, "message": "Auto merge of #75212 - JulianKnodt:array_map, r=LukasKalbertodt\n\nAdd `array` lang item and `[T; N]::map(f: FnMut(T) -> S)`\n\nThis introduces an `array` lang item so functions can be defined on top of `[T; N]`. This was previously not done because const-generics was not complete enough to allow for this. Now it is in a state that is usable enough to start adding functions.\n\nThe function added is a monadic (I think?) map from `[T; N] -> [S; N]`. Until transmute can function on arrays, it also allocates an extra temporary array, but this can be removed at some point.\n\nr? @lcnr", "tree": {"sha": "19eb1d8ba7b30c480dddd4a86dcb3e8de42f5b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19eb1d8ba7b30c480dddd4a86dcb3e8de42f5b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c290f951076d781b0ff08370445517446cee05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c290f951076d781b0ff08370445517446cee05", "html_url": "https://github.com/rust-lang/rust/commit/a0c290f951076d781b0ff08370445517446cee05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c290f951076d781b0ff08370445517446cee05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7d9f52bc3545631c7485dce65b31742ef81c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7d9f52bc3545631c7485dce65b31742ef81c4d", "html_url": "https://github.com/rust-lang/rust/commit/1a7d9f52bc3545631c7485dce65b31742ef81c4d"}, {"sha": "af32db21c8e1b1970886eb64b9955f9590e4c445", "url": "https://api.github.com/repos/rust-lang/rust/commits/af32db21c8e1b1970886eb64b9955f9590e4c445", "html_url": "https://github.com/rust-lang/rust/commit/af32db21c8e1b1970886eb64b9955f9590e4c445"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "6b28ab7d755631f68860ed2cd402f9d1cb20c418", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -364,3 +364,66 @@ macro_rules! array_impl_default {\n }\n \n array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\n+\n+#[cfg(not(bootstrap))]\n+#[lang = \"array\"]\n+impl<T, const N: usize> [T; N] {\n+    /// Returns an array of the same size as `self`, with function `f` applied to each element\n+    /// in order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_map)]\n+    /// let x = [1, 2, 3];\n+    /// let y = x.map(|v| v + 1);\n+    /// assert_eq!(y, [2, 3, 4]);\n+    ///\n+    /// let x = [1, 2, 3];\n+    /// let mut temp = 0;\n+    /// let y = x.map(|v| { temp += 1; v * temp });\n+    /// assert_eq!(y, [1, 4, 9]);\n+    ///\n+    /// let x = [\"Ferris\", \"Bueller's\", \"Day\", \"Off\"];\n+    /// let y = x.map(|v| v.len());\n+    /// assert_eq!(y, [6, 9, 3, 3]);\n+    /// ```\n+    #[unstable(feature = \"array_map\", issue = \"75243\")]\n+    pub fn map<F, U>(self, mut f: F) -> [U; N]\n+    where\n+        F: FnMut(T) -> U,\n+    {\n+        use crate::mem::MaybeUninit;\n+        struct Guard<T, const N: usize> {\n+            dst: *mut T,\n+            initialized: usize,\n+        }\n+\n+        impl<T, const N: usize> Drop for Guard<T, N> {\n+            fn drop(&mut self) {\n+                debug_assert!(self.initialized <= N);\n+\n+                let initialized_part =\n+                    crate::ptr::slice_from_raw_parts_mut(self.dst, self.initialized);\n+                // SAFETY: this raw slice will contain only initialized objects\n+                // that's why, it is allowed to drop it.\n+                unsafe {\n+                    crate::ptr::drop_in_place(initialized_part);\n+                }\n+            }\n+        }\n+        let mut dst = MaybeUninit::uninit_array::<N>();\n+        let mut guard: Guard<U, N> =\n+            Guard { dst: MaybeUninit::first_ptr_mut(&mut dst), initialized: 0 };\n+        for (src, dst) in IntoIter::new(self).zip(&mut dst) {\n+            dst.write(f(src));\n+            guard.initialized += 1;\n+        }\n+        // FIXME: Convert to crate::mem::transmute once it works with generics.\n+        // unsafe { crate::mem::transmute::<[MaybeUninit<U>; N], [U; N]>(dst) }\n+        crate::mem::forget(guard);\n+        // SAFETY: At this point we've properly initialized the whole array\n+        // and we just need to cast it to the correct type.\n+        unsafe { crate::mem::transmute_copy::<_, [U; N]>(&dst) }\n+    }\n+}"}, {"sha": "763457d485da451a7195dffeb7fb50b62b2b6531", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -145,6 +145,7 @@\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice)]\n+#![feature(maybe_uninit_extra)]\n #![feature(external_doc)]\n #![feature(associated_type_bounds)]\n #![feature(const_caller_location)]"}, {"sha": "5aba1a5d958d1dfe38f66230be09f0a5b3deec99", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -290,3 +290,43 @@ fn empty_array_is_always_default() {\n \n     let _arr = <[DoesNotImplDefault; 0]>::default();\n }\n+\n+#[test]\n+fn array_map() {\n+    let a = [1, 2, 3];\n+    let b = a.map(|v| v + 1);\n+    assert_eq!(b, [2, 3, 4]);\n+\n+    let a = [1u8, 2, 3];\n+    let b = a.map(|v| v as u64);\n+    assert_eq!(b, [1, 2, 3]);\n+}\n+\n+// See note on above test for why `should_panic` is used.\n+#[test]\n+#[should_panic(expected = \"test succeeded\")]\n+fn array_map_drop_safety() {\n+    use core::sync::atomic::AtomicUsize;\n+    use core::sync::atomic::Ordering;\n+    static DROPPED: AtomicUsize = AtomicUsize::new(0);\n+    struct DropCounter;\n+    impl Drop for DropCounter {\n+        fn drop(&mut self) {\n+            DROPPED.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let num_to_create = 5;\n+    let success = std::panic::catch_unwind(|| {\n+        let items = [0; 10];\n+        let mut nth = 0;\n+        items.map(|_| {\n+            assert!(nth < num_to_create);\n+            nth += 1;\n+            DropCounter\n+        });\n+    });\n+    assert!(success.is_err());\n+    assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n+    panic!(\"test succeeded\")\n+}"}, {"sha": "904e3f7284049b982ae68af411759276dc6eb3b4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -1,5 +1,6 @@\n #![feature(alloc_layout_extra)]\n #![feature(array_chunks)]\n+#![feature(array_map)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}, {"sha": "2f7edeb405ffec710ef43cf2a9226e7adc5c7bf8", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -165,6 +165,7 @@ language_item_table! {\n     BoolImplItem,                  sym::bool,               bool_impl,               Target::Impl;\n     CharImplItem,                  sym::char,               char_impl,               Target::Impl;\n     StrImplItem,                   sym::str,                str_impl,                Target::Impl;\n+    ArrayImplItem,                 sym::array,              array_impl,              Target::Impl;\n     SliceImplItem,                 sym::slice,              slice_impl,              Target::Impl;\n     SliceU8ImplItem,               sym::slice_u8,           slice_u8_impl,           Target::Impl;\n     StrAllocImplItem,              sym::str_alloc,          str_alloc_impl,          Target::Impl;"}, {"sha": "9078dc40041aa376c9648aca6b14791d442677bd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -649,6 +649,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     self.assemble_inherent_impl_for_primitive(lang_def_id);\n                 }\n             }\n+            ty::Array(_, _) => {\n+                let lang_def_id = lang_items.array_impl();\n+                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n                 let (lang_def_id1, lang_def_id2) = match mutbl {\n                     hir::Mutability::Not => {"}, {"sha": "cd7429f166f26aa6fc141461aa70ea9d1282a9fa", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -112,6 +112,16 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n+            ty::Array(_, _) => {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.array_impl(),\n+                    None,\n+                    \"array\",\n+                    \"[T; N]\",\n+                    item.span,\n+                );\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Not })\n                 if matches!(inner.kind, ty::Slice(_)) =>\n             {"}, {"sha": "168967cdeb7cf8e7e79858bafe2ecb21830a4f1b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -388,7 +388,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n             Bool => tcx.lang_items().bool_impl(),\n             Str => tcx.lang_items().str_impl(),\n             Slice => tcx.lang_items().slice_impl(),\n-            Array => tcx.lang_items().slice_impl(),\n+            Array => tcx.lang_items().array_impl(),\n             Tuple => None,\n             Unit => None,\n             RawPointer => tcx.lang_items().const_ptr_impl(),"}, {"sha": "a40b45f9a7e2c2f75471c095740183c3f53f998b", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c290f951076d781b0ff08370445517446cee05/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=a0c290f951076d781b0ff08370445517446cee05", "patch": "@@ -55,6 +55,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         lang_items.bool_impl(),\n         lang_items.char_impl(),\n         lang_items.str_impl(),\n+        lang_items.array_impl(),\n         lang_items.slice_impl(),\n         lang_items.slice_u8_impl(),\n         lang_items.str_alloc_impl(),"}]}