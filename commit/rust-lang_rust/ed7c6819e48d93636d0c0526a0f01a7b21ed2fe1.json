{"sha": "ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkN2M2ODE5ZTQ4ZDkzNjM2ZDBjMDUyNmEwZjAxYTdiMjFlZDJmZTE=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-14T08:58:12Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-18T09:01:08Z"}, "message": "Early return to decrease indentation", "tree": {"sha": "b86dd7243b87a34a03dfa7f95b68c081e3f112a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b86dd7243b87a34a03dfa7f95b68c081e3f112a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1", "html_url": "https://github.com/rust-lang/rust/commit/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e548bf8d647620b8a0fda0e128df024a5823346", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e548bf8d647620b8a0fda0e128df024a5823346", "html_url": "https://github.com/rust-lang/rust/commit/8e548bf8d647620b8a0fda0e128df024a5823346"}], "stats": {"total": 83, "additions": 39, "deletions": 44}, "files": [{"sha": "dba2cc1d3793acf13547ce7edf26051e3c80a589", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 39, "deletions": 44, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ed7c6819e48d93636d0c0526a0f01a7b21ed2fe1", "patch": "@@ -1186,52 +1186,47 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                          input| {\n                             match used_regs.entry(r) {\n                                 Entry::Occupied(o) => {\n-                                    if !skip {\n-                                        skip = true;\n-\n-                                        let idx2 = *o.get();\n-                                        let op2 = &operands[idx2];\n-                                        let op_sp2 = asm.operands[idx2].1;\n-                                        let reg2 = match op2.reg() {\n-                                            Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n-                                            _ => unreachable!(),\n-                                        };\n-\n-                                        let msg = format!(\n-                                            \"register `{}` conflicts with register `{}`\",\n-                                            reg.name(),\n-                                            reg2.name()\n-                                        );\n-                                        let mut err = sess.struct_span_err(op_sp, &msg);\n-                                        err.span_label(\n-                                            op_sp,\n-                                            &format!(\"register `{}`\", reg.name()),\n-                                        );\n-                                        err.span_label(\n-                                            op_sp2,\n-                                            &format!(\"register `{}`\", reg2.name()),\n-                                        );\n-\n-                                        match (op, op2) {\n-                                            (\n-                                                hir::InlineAsmOperand::In { .. },\n-                                                hir::InlineAsmOperand::Out { late, .. },\n-                                            )\n-                                            | (\n-                                                hir::InlineAsmOperand::Out { late, .. },\n-                                                hir::InlineAsmOperand::In { .. },\n-                                            ) => {\n-                                                assert!(!*late);\n-                                                let out_op_sp = if input { op_sp2 } else { op_sp };\n-                                                let msg = \"use `lateout` instead of \\\n-                                                     `out` to avoid conflict\";\n-                                                err.span_help(out_op_sp, msg);\n-                                            }\n-                                            _ => {}\n+                                    if skip {\n+                                        return;\n+                                    }\n+                                    skip = true;\n+\n+                                    let idx2 = *o.get();\n+                                    let op2 = &operands[idx2];\n+                                    let op_sp2 = asm.operands[idx2].1;\n+                                    let reg2 = match op2.reg() {\n+                                        Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n+                                        _ => unreachable!(),\n+                                    };\n+\n+                                    let msg = format!(\n+                                        \"register `{}` conflicts with register `{}`\",\n+                                        reg.name(),\n+                                        reg2.name()\n+                                    );\n+                                    let mut err = sess.struct_span_err(op_sp, &msg);\n+                                    err.span_label(op_sp, &format!(\"register `{}`\", reg.name()));\n+                                    err.span_label(op_sp2, &format!(\"register `{}`\", reg2.name()));\n+\n+                                    match (op, op2) {\n+                                        (\n+                                            hir::InlineAsmOperand::In { .. },\n+                                            hir::InlineAsmOperand::Out { late, .. },\n+                                        )\n+                                        | (\n+                                            hir::InlineAsmOperand::Out { late, .. },\n+                                            hir::InlineAsmOperand::In { .. },\n+                                        ) => {\n+                                            assert!(!*late);\n+                                            let out_op_sp = if input { op_sp2 } else { op_sp };\n+                                            let msg = \"use `lateout` instead of \\\n+                                                    `out` to avoid conflict\";\n+                                            err.span_help(out_op_sp, msg);\n                                         }\n-\n-                                        err.emit();\n+                                        _ => {}\n                                     }\n+\n+                                    err.emit();\n                                 }\n                                 Entry::Vacant(v) => {\n                                     v.insert(idx);"}]}