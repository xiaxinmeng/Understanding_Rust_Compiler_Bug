{"sha": "1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjZmN2E0ZWRkY2RiYjNkOGZhYjBhNmFlM2NhMWNhZjMyN2RmNTU=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-26T11:41:10Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:26Z"}, "message": "Fix lint findings in librustc_typeck", "tree": {"sha": "71ad60a07ac3c166b9080f7e8f3e532f8f6ac42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ad60a07ac3c166b9080f7e8f3e532f8f6ac42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L4ACgkQaTCGhp1Q\nZjdgsA//eL5fk0fuiQSbEDtZGaMZ01tQP73gqIGHnvTDgmNuzKbUoODhyulY6RQf\niEInZrPjUvgdQsrXQaURqv3c44Un+R077IDHZTws1GdJpf8xNwYD7gDK5NHAQlth\nCtJhVjmhJ8BgnNkCbG0rHGxcWEiy+c3IrkPt9VBx8nazVpxZ2uevVzgJyNtcFJFG\n6UOy+An9JidtXJBw7RuRUkg4yXUBRVizXx+6+zElZhhnCoUVYu2qBTANE1GTdKBK\ncEqZ0anKxSrRTe9ISfFrxuFu4nlWkCYwXgDzN96VlFyI2BGAlyZLya++hnsSYdYs\n+yFgXlG3/O1Wdos1bkqWx7tE5mZJL6JOoqim9nBhMiZbpNtL+7MexRQc4ybLZiQt\noHOKXeWU3zsZiFziYxIT139Q+ARpr7Am1dtmbQktOkOu56pMA3ndNlqVLwErnhTd\nOBE5aZgDYoncQbmgPw8OJAw+GVISEoBp5ytnkJBcVqC0RrQRA9eLI48lOM511N29\nPeMXJS2FdBJ/pdXXJioIBnJunyTz17UJFuXjTX8qlAhVXU5iUqegOUXJ05j8XE+B\nsoz07Jv+50IZhDXryTwuNvGNtll4ps2zugw/7mc5Xqd1sTr07GXTBEor+jNZDGxo\nK/YXucvk35F+3cLKZjEEI3iaTxeJdlBYRGNhmzg+fXBZkhy0gzw=\n=H4Qy\n-----END PGP SIGNATURE-----", "payload": "tree 71ad60a07ac3c166b9080f7e8f3e532f8f6ac42a\nparent 02f7de1be5a1ca385a63b66b8d0af47ff5babf77\nauthor flip1995 <hello@philkrones.com> 1556278870 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479166 +0200\n\nFix lint findings in librustc_typeck\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "html_url": "https://github.com/rust-lang/rust/commit/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f7de1be5a1ca385a63b66b8d0af47ff5babf77", "html_url": "https://github.com/rust-lang/rust/commit/02f7de1be5a1ca385a63b66b8d0af47ff5babf77"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "35d4568bd9c4c1fa01b90da615f1277d36236c96", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "patch": "@@ -26,7 +26,7 @@ use super::{MethodError, NoMatchData, CandidateSource};\n use super::probe::Mode;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    fn is_fn_ty(&self, ty: &Ty<'tcx>, span: Span) -> bool {\n+    fn is_fn_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n         let tcx = self.tcx;\n         match ty.sty {\n             // Not all of these (e.g., unsafe fns) implement `FnOnce`,"}, {"sha": "f11638478923f09bc80ff8a4d6143e1a60995e44", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "patch": "@@ -1026,10 +1026,10 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n /// points.\n struct GeneratorTypes<'tcx> {\n     /// Type of value that is yielded.\n-    yield_ty: ty::Ty<'tcx>,\n+    yield_ty: Ty<'tcx>,\n \n     /// Types that are captured (see `GeneratorInterior` for more).\n-    interior: ty::Ty<'tcx>,\n+    interior: Ty<'tcx>,\n \n     /// Indicates if the generator is movable or static (immovable).\n     movability: hir::GeneratorMovability,"}, {"sha": "e4f690c6ec0622a9a1ed35bf1a1ff4bc7acd6815", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "patch": "@@ -405,7 +405,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 c_ty\n             } else {\n                 span_bug!(\n-                    hir_id.to_span(&self.fcx.tcx),\n+                    hir_id.to_span(self.fcx.tcx),\n                     \"writeback: `{:?}` missing from the global type context\",\n                     c_ty\n                 );\n@@ -730,7 +730,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             lifted\n         } else {\n             span_bug!(\n-                span.to_span(&self.fcx.tcx),\n+                span.to_span(self.fcx.tcx),\n                 \"writeback: `{:?}` missing from the global type context\",\n                 x\n             );\n@@ -739,24 +739,24 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n }\n \n trait Locatable {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span;\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span;\n }\n \n impl Locatable for Span {\n-    fn to_span(&self, _: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         *self\n     }\n }\n \n impl Locatable for DefIndex {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);\n         tcx.hir().span_by_hir_id(hir_id)\n     }\n }\n \n impl Locatable for hir::HirId {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.hir().span_by_hir_id(*self)\n     }\n }\n@@ -789,7 +789,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(Some(self.body.id()), self.span.to_span(&self.tcx), t)\n+                .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t)\n                 .emit();\n         }\n     }"}, {"sha": "b4f6ae9baae1b2a178da2e234ce21c4ddef3fa66", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1526f7a4eddcdbb3d8fab0a6ae3ca1caf327df55", "patch": "@@ -1451,8 +1451,8 @@ pub fn checked_type_of<'a, 'tcx>(\n fn find_existential_constraints<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> ty::Ty<'tcx> {\n-    use rustc::hir::*;\n+) -> Ty<'tcx> {\n+    use rustc::hir::{ImplItem, Item, TraitItem};\n \n     struct ConstraintLocator<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1463,7 +1463,7 @@ fn find_existential_constraints<'a, 'tcx>(\n         // The mapping is an index for each use site of a generic parameter in the concrete type\n         //\n         // The indices index into the generic parameters on the existential type.\n-        found: Option<(Span, ty::Ty<'tcx>, Vec<usize>)>,\n+        found: Option<(Span, Ty<'tcx>, Vec<usize>)>,\n     }\n \n     impl<'a, 'tcx> ConstraintLocator<'a, 'tcx> {\n@@ -1519,7 +1519,7 @@ fn find_existential_constraints<'a, 'tcx>(\n                         ty::Param(p) => Some(*index_map.get(p).unwrap()),\n                         _ => None,\n                     }).collect();\n-                let is_param = |ty: ty::Ty<'_>| match ty.sty {\n+                let is_param = |ty: Ty<'_>| match ty.sty {\n                     ty::Param(_) => true,\n                     _ => false,\n                 };"}]}