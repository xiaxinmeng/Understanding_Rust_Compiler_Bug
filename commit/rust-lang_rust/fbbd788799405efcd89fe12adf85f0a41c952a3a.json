{"sha": "fbbd788799405efcd89fe12adf85f0a41c952a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYmQ3ODg3OTk0MDVlZmNkODlmZTEyYWRmODVmMGE0MWM5NTJhM2E=", "commit": {"author": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-30T22:33:15Z"}, "committer": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-31T23:06:50Z"}, "message": "Add some structs for cleaning up lint logic later.\n\nDigitInfo for storing radix, type, digits of a literal.\nWarningType for making warning messages consistent.", "tree": {"sha": "8d6c51563a9305fe3df63800572e9031002f3bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d6c51563a9305fe3df63800572e9031002f3bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbbd788799405efcd89fe12adf85f0a41c952a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbbd788799405efcd89fe12adf85f0a41c952a3a", "html_url": "https://github.com/rust-lang/rust/commit/fbbd788799405efcd89fe12adf85f0a41c952a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbbd788799405efcd89fe12adf85f0a41c952a3a/comments", "author": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017b77ae0577c4a446b8a43443023f5e67edbdab", "url": "https://api.github.com/repos/rust-lang/rust/commits/017b77ae0577c4a446b8a43443023f5e67edbdab", "html_url": "https://github.com/rust-lang/rust/commit/017b77ae0577c4a446b8a43443023f5e67edbdab"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "9b26cc53d471c5d56948e7f07557d2816555f185", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/fbbd788799405efcd89fe12adf85f0a41c952a3a/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbbd788799405efcd89fe12adf85f0a41c952a3a/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=fbbd788799405efcd89fe12adf85f0a41c952a3a", "patch": "@@ -62,6 +62,127 @@ declare_lint! {\n     \"grouping digits into groups that are too large\"\n }\n \n+#[derive(Debug)]\n+enum Radix {\n+    Binary,\n+    Octal,\n+    Decimal,\n+    Hexadecimal,\n+}\n+\n+impl Radix {\n+    /// Return a reasonable digit group size for this radix.\n+    pub fn suggest_grouping(&self) -> usize {\n+        match *self {\n+            Radix::Binary | Radix::Hexadecimal => 4,\n+            Radix::Octal | Radix::Decimal => 3,\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct DigitInfo<'a> {\n+    /// Characters of a literal between the radix prefix and type suffix.\n+    pub digits: &'a str,\n+    /// Which radix the literal was represented in.\n+    pub radix: Radix,\n+    /// The radix prefix, if present.\n+    pub prefix: Option<&'a str>,\n+    /// The type suffix, including preceding underscore if present.\n+    pub suffix: Option<&'a str>,\n+    /// True for floating-point literals.\n+    pub float: bool,\n+}\n+\n+impl<'a> DigitInfo<'a> {\n+    pub fn new(lit: &str, float: bool) -> DigitInfo {\n+        // Determine delimiter for radix prefix, if present, and radix.\n+        let radix = if lit.starts_with(\"0x\") {\n+            Radix::Hexadecimal\n+        } else if lit.starts_with(\"0b\") {\n+            Radix::Binary\n+        } else if lit.starts_with(\"0o\") {\n+            Radix::Octal\n+        } else {\n+            Radix::Decimal\n+        };\n+\n+        // Grab part of the literal after prefix, if present.\n+        let (prefix, sans_prefix) = if let Radix::Decimal = radix {\n+            (None, lit)\n+        } else {\n+            let (p, s) = lit.split_at(2);\n+            (Some(p), s)\n+        };\n+\n+        let mut last_d = '\\0';\n+        for (d_idx, d) in sans_prefix.char_indices() {\n+            if !float && (d == 'i' || d == 'u') || float && d == 'f' {\n+                let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n+                let (digits, suffix) = sans_prefix.split_at(suffix_start);\n+                return DigitInfo {\n+                    digits: digits,\n+                    radix: radix,\n+                    prefix: prefix,\n+                    suffix: Some(suffix),\n+                    float: float,\n+                };\n+            }\n+            last_d = d\n+        }\n+\n+        // No suffix found\n+        DigitInfo {\n+            digits: sans_prefix,\n+            radix: radix,\n+            prefix: prefix,\n+            suffix: None,\n+            float: float,\n+        }\n+    }\n+}\n+\n+enum WarningType {\n+    UnreadableLiteral,\n+    InconsistentDigitGrouping,\n+    LargeDigitGroups,\n+}\n+\n+\n+impl WarningType {\n+    pub fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: &syntax_pos::Span) {\n+        match *self {\n+            WarningType::UnreadableLiteral => {\n+                span_help_and_lint(\n+                    cx,\n+                    UNREADABLE_LITERAL,\n+                    *span,\n+                    \"long literal lacking separators\",\n+                    &format!(\"consider: {}\", grouping_hint),\n+                )\n+            },\n+            WarningType::LargeDigitGroups => {\n+                span_help_and_lint(\n+                    cx,\n+                    LARGE_DIGIT_GROUPS,\n+                    *span,\n+                    \"digit groups should be smaller\",\n+                    &format!(\"consider: {}\", grouping_hint),\n+                )\n+            },\n+            WarningType::InconsistentDigitGrouping => {\n+                span_help_and_lint(\n+                    cx,\n+                    INCONSISTENT_DIGIT_GROUPING,\n+                    *span,\n+                    \"digits grouped inconsistently by underscores\",\n+                    &format!(\"consider: {}\", grouping_hint),\n+                )\n+            },\n+        };\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct LiteralDigitGrouping;\n "}]}