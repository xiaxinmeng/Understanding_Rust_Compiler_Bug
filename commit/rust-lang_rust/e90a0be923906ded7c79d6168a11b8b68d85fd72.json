{"sha": "e90a0be923906ded7c79d6168a11b8b68d85fd72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MGEwYmU5MjM5MDZkZWQ3Yzc5ZDYxNjhhMTFiOGI2OGQ4NWZkNzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-17T14:34:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-25T08:40:25Z"}, "message": "simplify `mut_mut` lint", "tree": {"sha": "d3928eb4505340c71255f43f952ac8b34239487a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3928eb4505340c71255f43f952ac8b34239487a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90a0be923906ded7c79d6168a11b8b68d85fd72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXRWT6AAoJEFbW7qD8Z6xGVBoQAKYwvhYaBn+y9CTufWCOSJJI\n456D1Wl44NOEgF9Avh0r01B57C8Ou0OIJezyh4QwdIZQGVSbSL/kLaOfPWkV90kr\nPg8cthjuyyLtRigHnK/w+pUBhrbuf5A7kVu0BWWC+VJUjjsNaOrRpht+wXi4jHA0\nnN4mQUuRvvk/bA4vkwMqmvH3uSKqXdN/K7qcT0JWVoilSQsD0b3TnSUcX0bndo7A\nkhvOQYDSh/xiGJQJDugfKl18RiKswHfFdYDRRKjNJMzVAgpKNSNTPcSaUiq5L/Ro\nc5dUJCs8HnfEl2Rmp6Z1BuExJ25PxPjqDtY1q8XZrQgBcSJnGVXc3+h5LMAv6fbb\nWtIEdokIf2YnKnZRETyH2zraTjWd4nP96zU2uqTSmyiItHSia7mizLztz9J0EPaT\n4AAZWKLiBNixccwsRX4zNvo2F29P5xYT/fH/wGpGVVb/7Jdk5KLyXDPixhS9vd+H\ntG18bTZOVwEfxNZ/wCnnt1lKmoS0+GmTBk+orlrnyk+nl5H1LUFdcdFz08aPIuhi\n7XhLZTngV6YB3cacE5nOtgxy5S1Cv9kYmaXOBtZAjRtrXi3yhgIHkqYgxdyDC/hP\nL0ukAn5EyWRreYjrumEZDconzwj15UibGr3B8SwqBErpr1Wd/JT8/eKCbtduHIV1\n9nDGU8zEcDINbnyzEzzm\n=AxKy\n-----END PGP SIGNATURE-----", "payload": "tree d3928eb4505340c71255f43f952ac8b34239487a\nparent d71e030cd7dfbc1596b641576104494bbcb6d331\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1463495655 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464165625 +0200\n\nsimplify `mut_mut` lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90a0be923906ded7c79d6168a11b8b68d85fd72", "html_url": "https://github.com/rust-lang/rust/commit/e90a0be923906ded7c79d6168a11b8b68d85fd72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90a0be923906ded7c79d6168a11b8b68d85fd72/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71e030cd7dfbc1596b641576104494bbcb6d331", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71e030cd7dfbc1596b641576104494bbcb6d331", "html_url": "https://github.com/rust-lang/rust/commit/d71e030cd7dfbc1596b641576104494bbcb6d331"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "4147e288c4f60b3028f0aa666d1be611c3623058", "filename": "src/mut_mut.rs", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e90a0be923906ded7c79d6168a11b8b68d85fd72/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90a0be923906ded7c79d6168a11b8b68d85fd72/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=e90a0be923906ded7c79d6168a11b8b68d85fd72", "patch": "@@ -28,50 +28,32 @@ impl LintPass for MutMut {\n \n impl LateLintPass for MutMut {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        check_expr_mut(cx, expr)\n-    }\n-\n-    fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n-        unwrap_mut(ty).and_then(unwrap_mut).map_or((), |_| {\n-            span_lint(cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n-        });\n-    }\n-}\n-\n-fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n-    fn unwrap_addr(expr: &Expr) -> Option<&Expr> {\n-        match expr.node {\n-            ExprAddrOf(MutMutable, ref e) => Some(e),\n-            _ => None,\n+        if in_external_macro(cx, expr.span) {\n+            return;\n         }\n-    }\n \n-    if in_external_macro(cx, expr.span) {\n-        return;\n+        if let ExprAddrOf(MutMutable, ref e) = expr.node {\n+            if let ExprAddrOf(MutMutable, _) = e.node {\n+                span_lint(cx,\n+                          MUT_MUT,\n+                          expr.span,\n+                          \"generally you want to avoid `&mut &mut _` if possible\");\n+            } else {\n+                if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n+                    span_lint(cx,\n+                              MUT_MUT,\n+                              expr.span,\n+                              \"this expression mutably borrows a mutable reference. Consider reborrowing\");\n+                }\n+            }\n+        }\n     }\n \n-    unwrap_addr(expr).map_or((), |e| {\n-        unwrap_addr(e).map_or_else(|| {\n-                                       if let TyRef(_, TypeAndMut { mutbl: MutMutable, .. }) = cx.tcx.expr_ty(e).sty {\n-                                           span_lint(cx,\n-                                                     MUT_MUT,\n-                                                     expr.span,\n-                                                     \"this expression mutably borrows a mutable reference. Consider \\\n-                                                      reborrowing\");\n-                                       }\n-                                   },\n-                                   |_| {\n-                                       span_lint(cx,\n-                                                 MUT_MUT,\n-                                                 expr.span,\n-                                                 \"generally you want to avoid `&mut &mut _` if possible\");\n-                                   })\n-    })\n-}\n-\n-fn unwrap_mut(ty: &Ty) -> Option<&Ty> {\n-    match ty.node {\n-        TyRptr(_, MutTy { ty: ref pty, mutbl: MutMutable }) => Some(pty),\n-        _ => None,\n+    fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n+        if let TyRptr(_, MutTy { ty: ref pty, mutbl: MutMutable }) = ty.node {\n+            if let TyRptr(_, MutTy { mutbl: MutMutable, .. }) = pty.node {\n+                span_lint(cx, MUT_MUT, ty.span, \"generally you want to avoid `&mut &mut _` if possible\");\n+            }\n+        }\n     }\n }"}]}