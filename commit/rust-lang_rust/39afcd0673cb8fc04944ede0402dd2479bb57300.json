{"sha": "39afcd0673cb8fc04944ede0402dd2479bb57300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YWZjZDA2NzNjYjhmYzA0OTQ0ZWRlMDQwMmRkMjQ3OWJiNTczMDA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-13T17:46:52Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-26T13:21:26Z"}, "message": "document this feature in the unstable book", "tree": {"sha": "15b33411137ed3a421780941d27ace0ebae0b046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b33411137ed3a421780941d27ace0ebae0b046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39afcd0673cb8fc04944ede0402dd2479bb57300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39afcd0673cb8fc04944ede0402dd2479bb57300", "html_url": "https://github.com/rust-lang/rust/commit/39afcd0673cb8fc04944ede0402dd2479bb57300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39afcd0673cb8fc04944ede0402dd2479bb57300/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0907ce51f51bbedeb63b482041e4a8e1239364", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0907ce51f51bbedeb63b482041e4a8e1239364", "html_url": "https://github.com/rust-lang/rust/commit/3c0907ce51f51bbedeb63b482041e4a8e1239364"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "56cb6409201e4d320a15c2480f8e09b575109377", "filename": "src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/39afcd0673cb8fc04944ede0402dd2479bb57300/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/39afcd0673cb8fc04944ede0402dd2479bb57300/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Femit-stack-sizes.md?ref=39afcd0673cb8fc04944ede0402dd2479bb57300", "patch": "@@ -0,0 +1,153 @@\n+# `emit-stack-sizes`\n+\n+The tracking issue for this feature is: [#54192]\n+\n+[#54192]: https://github.com/rust-lang/rust/issues/54192\n+\n+------------------------\n+\n+The rustc flag `-Z emit-stack-sizes` makes LLVM emit stack size metadata.\n+\n+Consider this crate:\n+\n+```\n+#![crate_type = \"lib\"]\n+\n+use std::ptr;\n+\n+pub fn foo() {\n+    // this function doesn't use the stack\n+}\n+\n+pub fn bar() {\n+    let xs = [0u32; 2];\n+\n+    // force LLVM to allocate `xs` on the stack\n+    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n+}\n+```\n+\n+Using the `-Z emit-stack-sizes` flag produces extra linker sections in the\n+output *object file*.\n+\n+``` console\n+$ rustc -C opt-level=3 --emit=obj foo.rs\n+\n+$ size -A foo.o\n+foo.o  :\n+section                                 size   addr\n+.text                                      0      0\n+.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n+.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n+.note.GNU-stack                            0      0\n+.eh_frame                                 72      0\n+Total                                     95\n+\n+$ rustc -C opt-level=3 --emit=obj -Z emit-stack-sizes foo.rs\n+\n+$ size -A foo.o\n+foo.o  :\n+section                                 size   addr\n+.text                                      0      0\n+.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0\n+.stack_sizes                               9      0\n+.text._ZN3foo3bar17h1acb594305f70c2eE     22      0\n+.stack_sizes                               9      0\n+.note.GNU-stack                            0      0\n+.eh_frame                                 72      0\n+Total                                    113\n+```\n+\n+As of LLVM 7.0 the data will be written into a section named `.stack_sizes` and\n+the format is \"an array of pairs of function symbol values (pointer size) and\n+stack sizes (unsigned LEB128)\".\n+\n+``` console\n+$ objdump -d foo.o\n+\n+foo.o:     file format elf64-x86-64\n+\n+Disassembly of section .text._ZN3foo3foo17he211d7b4a3a0c16eE:\n+\n+0000000000000000 <_ZN3foo3foo17he211d7b4a3a0c16eE>:\n+   0:   c3                      retq\n+\n+Disassembly of section .text._ZN3foo3bar17h1acb594305f70c2eE:\n+\n+0000000000000000 <_ZN3foo3bar17h1acb594305f70c2eE>:\n+   0:   48 83 ec 10             sub    $0x10,%rsp\n+   4:   48 8d 44 24 08          lea    0x8(%rsp),%rax\n+   9:   48 89 04 24             mov    %rax,(%rsp)\n+   d:   48 8b 04 24             mov    (%rsp),%rax\n+  11:   48 83 c4 10             add    $0x10,%rsp\n+  15:   c3                      retq\n+\n+$ objdump -s -j .stack_sizes foo.o\n+\n+foo.o:     file format elf64-x86-64\n+\n+Contents of section .stack_sizes:\n+ 0000 00000000 00000000 00                 .........\n+Contents of section .stack_sizes:\n+ 0000 00000000 00000000 10                 .........\n+```\n+\n+It's important to note that linkers will discard this linker section by default.\n+To preserve the section you can use a linker script like the one shown below.\n+\n+``` text\n+/* file: keep-stack-sizes.x */\n+SECTIONS\n+{\n+  .stack_sizes :\n+  {\n+    KEEP(*(.stack_sizes));\n+  }\n+}\n+```\n+\n+The linker script must be passed to the linker using a rustc flag like `-C\n+link-arg`.\n+\n+```\n+// file: src/main.rs\n+use std::ptr;\n+\n+#[inline(never)]\n+fn main() {\n+    let xs = [0u32; 2];\n+\n+    // force LLVM to allocate `xs` on the stack\n+    unsafe { ptr::read_volatile(&xs.as_ptr()); }\n+}\n+```\n+\n+``` console\n+$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo build --release\n+\n+$ size -A target/release/hello | grep stack_sizes || echo section was not found\n+section was not found\n+\n+$ RUSTFLAGS=\"-Z emit-stack-sizes\" cargo rustc --release -- \\\n+    -C link-arg=-Wl,-Tkeep-stack-sizes.x \\\n+    -C link-arg=-N\n+\n+$ size -A target/release/hello | grep stack_sizes\n+.stack_sizes                               90   205368\n+\n+$ objdump -s -j .stack_sizes target/release/hello\n+\n+target/release/hello:     file format elf64-x86-64\n+\n+Contents of section .stack_sizes:\n+ 32238 c0040000 00000000 08f00400 00000000  ................\n+ 32248 00080005 00000000 00000810 05000000  ................\n+ 32258 00000000 20050000 00000000 10400500  .... ........@..\n+ 32268 00000000 00087005 00000000 00000080  ......p.........\n+ 32278 05000000 00000000 90050000 00000000  ................\n+ 32288 00a00500 00000000 0000               ..........\n+```\n+\n+> Author note: I'm not entirely sure why, in *this* case, `-N` is required in\n+> addition to `-Tkeep-stack-sizes.x`. For example, it's not required when\n+> producing statically linked files for the ARM Cortex-M architecture."}]}