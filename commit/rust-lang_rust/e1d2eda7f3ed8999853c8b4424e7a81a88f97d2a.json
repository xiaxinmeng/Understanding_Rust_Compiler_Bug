{"sha": "e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDJlZGE3ZjNlZDg5OTk4NTNjOGI0NDI0ZTdhODFhODhmOTdkMmE=", "commit": {"author": {"name": "Emanuel Czirai", "email": "res.pe.cing+commits@gmail.com", "date": "2016-03-28T12:41:55Z"}, "committer": {"name": "Emanuel Czirai", "email": "res.pe.cing+commits@gmail.com", "date": "2016-03-31T21:02:59Z"}, "message": "allow RUST_BACKTRACE=0 to act as if unset\n\n/# This is a combination of 16 commits.\n/# The first commit's message is:\nallow RUST_BACKTRACE=disabled to act as if unset\n\nWhen RUST_BACKTRACE is set to \"disabled\" then this acts as if the env.\nvar is unset.\n\n/# This is the 2nd commit message:\n\ncase insensitive \"DiSaBLeD\" RUST_BACKTRACE value\n\npreviously it expected a lowercase \"disabled\" to treat the env. var as\nunset\n\n/# This is the 3rd commit message:\n\nRUST_BACKTRACE=0 acts as if unset\n\npreviously RUST_BACKTRACE=disabled was doing the same thing\n\n/# This is the 4th commit message:\n\nRUST_BACKTRACE=0|n|no|off acts as if unset\n\npreviously only RUST_BACKTRACE=0 acted as if RUST_BACKTRACE was unset\nNow added more options (case-insensitive): 'n','no' and 'off'\neg. RUST_BACKTRACE=oFF\n\n/# This is the 5th commit message:\n\nDRY on the value of 2\n\nDRY=don't repeat yourself\nBecause having to remember to keep the two places of '2' in sync is not\nideal, even though this is a simple enough case.\n\n/# This is the 6th commit message:\n\nRevert \"DRY on the value of 2\"\n\nThis reverts commit 95a0479d5cf72a2b2d9d21ec0bed2823ed213fef.\n\nNevermind this DRY on 2, because we already have a RY on 1,\nbesides the code is less readable this way...\n\n/# This is the 7th commit message:\n\nattempt to document unsetting RUST_BACKTRACE\n\n/# This is the 8th commit message:\n\ncurb allocations when checking for RUST_BACKTRACE\n\nthis means we don't check for case-insensitivity anymore\n\n/# This is the 9th commit message:\n\nas decided, RUST_BACKTRACE=0 turns off backtrace\n\n/# This is the 10th commit message:\n\nRUST_TEST_NOCAPTURE=0 acts as if unset\n\n(that is, capture is on)\n\nAny other value acts as if nocapture is enabled (that is, capture is off)\n\n/# This is the 11th commit message:\n\nupdate other RUST_TEST_NOCAPTURE occurrences\n\napparently only one place needs updating\n\n/# This is the 12th commit message:\n\nupdate RUST_BACKTRACE in man page\n\n/# This is the 13th commit message:\n\nhandle an occurrence of RUST_BACKTRACE\n\n/# This is the 14th commit message:\n\nensure consistency with new rules for backtrace\n\n/# This is the 15th commit message:\n\na more concise comment for RUST_TEST_NOCAPTURE\n\n/# This is the 16th commit message:\n\nupdate RUST_TEST_NOCAPTURE in man page", "tree": {"sha": "42724043aea3bbb74ef6ff20be3544fa1506eb71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42724043aea3bbb74ef6ff20be3544fa1506eb71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "html_url": "https://github.com/rust-lang/rust/commit/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/comments", "author": {"login": "respeccing", "id": 17984080, "node_id": "MDQ6VXNlcjE3OTg0MDgw", "avatar_url": "https://avatars.githubusercontent.com/u/17984080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respeccing", "html_url": "https://github.com/respeccing", "followers_url": "https://api.github.com/users/respeccing/followers", "following_url": "https://api.github.com/users/respeccing/following{/other_user}", "gists_url": "https://api.github.com/users/respeccing/gists{/gist_id}", "starred_url": "https://api.github.com/users/respeccing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respeccing/subscriptions", "organizations_url": "https://api.github.com/users/respeccing/orgs", "repos_url": "https://api.github.com/users/respeccing/repos", "events_url": "https://api.github.com/users/respeccing/events{/privacy}", "received_events_url": "https://api.github.com/users/respeccing/received_events", "type": "User", "site_admin": false}, "committer": {"login": "respeccing", "id": 17984080, "node_id": "MDQ6VXNlcjE3OTg0MDgw", "avatar_url": "https://avatars.githubusercontent.com/u/17984080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/respeccing", "html_url": "https://github.com/respeccing", "followers_url": "https://api.github.com/users/respeccing/followers", "following_url": "https://api.github.com/users/respeccing/following{/other_user}", "gists_url": "https://api.github.com/users/respeccing/gists{/gist_id}", "starred_url": "https://api.github.com/users/respeccing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/respeccing/subscriptions", "organizations_url": "https://api.github.com/users/respeccing/orgs", "repos_url": "https://api.github.com/users/respeccing/repos", "events_url": "https://api.github.com/users/respeccing/events{/privacy}", "received_events_url": "https://api.github.com/users/respeccing/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3399d19a2c9503d991e4a315118b2d6146f66046", "url": "https://api.github.com/repos/rust-lang/rust/commits/3399d19a2c9503d991e4a315118b2d6146f66046", "html_url": "https://github.com/rust-lang/rust/commit/3399d19a2c9503d991e4a315118b2d6146f66046"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "10598e78ec5cb50c58f11e254d8c17362edf5e72", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -71,7 +71,8 @@ which includes important information about what platform you're on, what\n version of Rust you're using, etc.\n \n Sometimes, a backtrace is helpful, and so including that is nice. To get\n-a backtrace, set the `RUST_BACKTRACE` environment variable. The easiest way\n+a backtrace, set the `RUST_BACKTRACE` environment variable to a value\n+other than `0`. The easiest way\n to do this is to invoke `rustc` like this:\n \n ```bash"}, {"sha": "a034e471b6efcd9b88800d7a8490bd587fb4539f", "filename": "man/rustc.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -268,15 +268,15 @@ the maximum number of threads used for this purpose.\n \n .TP\n \\fBRUST_TEST_NOCAPTURE\\fR\n-A synonym for the --nocapture flag.\n+If set to a value other than \"0\", a synonym for the --nocapture flag.\n \n .TP\n \\fBRUST_MIN_STACK\\fR\n Sets the minimum stack size for new threads.\n \n .TP\n \\fBRUST_BACKTRACE\\fR\n-If set, produces a backtrace in the output of a program which panics.\n+If set to a value different than \"0\", produces a backtrace in the output of a program which panics.\n \n .SH \"EXAMPLES\"\n To build an executable from a source file with a main function:"}, {"sha": "787d77bc56c3833985b584729f00553b06b5e79c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -263,7 +263,10 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         bench_benchmarks: true,\n-        nocapture: env::var(\"RUST_TEST_NOCAPTURE\").is_ok(),\n+        nocapture: match env::var(\"RUST_TEST_NOCAPTURE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false\n+        },\n         color: test::AutoColor,\n     }\n }"}, {"sha": "8a2444323f1ec61bf47c55297fe130a13b7b7d9d", "filename": "src/doc/book/functions.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Fdoc%2Fbook%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Fdoc%2Fbook%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ffunctions.md?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -246,6 +246,19 @@ stack backtrace:\n   13:                0x0 - <unknown>\n ```\n \n+If you need to override an already set `RUST_BACKTRACE`, \n+in cases when you cannot just unset the variable, \n+then set it to `0` to avoid getting a backtrace. \n+Any other value(even no value at all) turns on backtrace.\n+\n+```text\n+$ export RUST_BACKTRACE=1\n+...\n+$ RUST_BACKTRACE=0 ./diverges \n+thread '<main>' panicked at 'This function never returns!', hello.rs:2\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n+```\n+\n `RUST_BACKTRACE` also works with Cargo\u2019s `run` command:\n \n ```text"}, {"sha": "3444b770cc8b1443ff6183bcfe2e1839c57b2780", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -1059,7 +1059,10 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n             for note in &xs {\n                 emitter.emit(None, &note[..], None, errors::Level::Note)\n             }\n-            if let None = env::var_os(\"RUST_BACKTRACE\") {\n+            if match env::var_os(\"RUST_BACKTRACE\") {\n+                Some(val) => &val != \"0\",\n+                None => false,\n+            } {\n                 emitter.emit(None,\n                              \"run with `RUST_BACKTRACE=1` for a backtrace\",\n                              None,"}, {"sha": "24e1a82a593bad2d248a3da706e55a5fb07d50c8", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -36,7 +36,7 @@ pub fn log_enabled() -> bool {\n     }\n \n     let val = match env::var_os(\"RUST_BACKTRACE\") {\n-        Some(..) => 2,\n+        Some(x) => if &x == \"0\" { 1 } else { 2 },\n         None => 1,\n     };\n     ENABLED.store(val, Ordering::SeqCst);"}, {"sha": "e7fe128a7ae8d46539850bcb97348320205aadcc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -349,8 +349,8 @@ By default, all tests are run in parallel. This can be altered with the\n RUST_TEST_THREADS environment variable when running tests (set it to 1).\n \n All tests have their standard output and standard error captured by default.\n-This can be overridden with the --nocapture flag or the RUST_TEST_NOCAPTURE=1\n-environment variable. Logging is not captured by default.\n+This can be overridden with the --nocapture flag or setting RUST_TEST_NOCAPTURE\n+environment variable to a value other than \"0\". Logging is not captured by default.\n \n Test Attributes:\n \n@@ -399,7 +399,10 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let mut nocapture = matches.opt_present(\"nocapture\");\n     if !nocapture {\n-        nocapture = env::var(\"RUST_TEST_NOCAPTURE\").is_ok();\n+        nocapture = match env::var(\"RUST_TEST_NOCAPTURE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false\n+        };\n     }\n \n     let color = match matches.opt_str(\"color\").as_ref().map(|s| &**s) {"}, {"sha": "a2108ff041dac959df70fe8bf91903dbe72ec1d0", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -86,6 +86,16 @@ fn runtest(me: &str) {\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(&expected(\"foo\")),\n             \"bad output2: {}\", s);\n \n+    // Make sure the stack trace is *not* printed\n+    // (RUST_BACKTRACE=0 acts as if it were unset from our own environment,\n+    // in case developer is running `make check` with it set.)\n+    let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\",\"0\").spawn().unwrap();\n+    let out = p.wait_with_output().unwrap();\n+    assert!(!out.status.success());\n+    let s = str::from_utf8(&out.stderr).unwrap();\n+    assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n+            \"bad output3: {}\", s);\n+\n     // Make sure a stack trace is printed\n     let p = template(me).arg(\"double-fail\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();"}, {"sha": "8e0b14128c83b0896cb93b218ad8c5b61829c460", "filename": "src/test/run-pass/multi-panic.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=e1d2eda7f3ed8999853c8b4424e7a81a88f97d2a", "patch": "@@ -8,6 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn check_for_no_backtrace(test: std::process::Output) {\n+    assert!(!test.status.success());\n+    let err = String::from_utf8_lossy(&test.stderr);\n+    let mut it = err.lines();\n+\n+    assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n+    assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\n+    assert_eq!(it.next().map(|l| l.starts_with(\"thread '<main>' panicked at\")), Some(true));\n+    assert_eq!(it.next(), None);\n+}\n+\n fn main() {\n     let args: Vec<String> = std::env::args().collect();\n     if args.len() > 1 && args[1] == \"run_test\" {\n@@ -21,13 +32,11 @@ fn main() {\n                                                        .env_remove(\"RUST_BACKTRACE\")\n                                                        .output()\n                                                        .unwrap();\n-        assert!(!test.status.success());\n-        let err = String::from_utf8_lossy(&test.stderr);\n-        let mut it = err.lines();\n-\n-        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n-        assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` for a backtrace.\"));\n-        assert_eq!(it.next().map(|l| l.starts_with(\"thread '<main>' panicked at\")), Some(true));\n-        assert_eq!(it.next(), None);\n+        check_for_no_backtrace(test);\n+        let test = std::process::Command::new(&args[0]).arg(\"run_test\")\n+                                                       .env(\"RUST_BACKTRACE\",\"0\")\n+                                                       .output()\n+                                                       .unwrap();\n+        check_for_no_backtrace(test);\n     }\n }"}]}