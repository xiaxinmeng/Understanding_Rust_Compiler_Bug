{"sha": "8e7f76db9af907a0217bc5803f2327c51de4c278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlN2Y3NmRiOWFmOTA3YTAyMTdiYzU4MDNmMjMyN2M1MWRlNGMyNzg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-23T14:54:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-23T14:54:35Z"}, "message": "Merge pull request #2362 from flip1995/master\n\nLint for numeric literals that have a better representation", "tree": {"sha": "26ab1fa8a4a353ca47d9ed88da00a6001419af1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ab1fa8a4a353ca47d9ed88da00a6001419af1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7f76db9af907a0217bc5803f2327c51de4c278", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaZ0yrCRBK7hj4Ov3rIwAAdHIIABcdMIkpdf690109XNPpA4Pn\nKo5mY4Sava7XnMRtPAN26kzD6+gBTheP2tLpwKnNAwIpBND+hzLf4q9nve5O/ABu\n3lVByUevnpEt507X4iC9jP1O2NxnQ3JwPHif3AiQWmR2ItYQ4L4uyCwS641CZJ+D\n3+PP54gyo0cA5A91p2/w5g1Y4T5QwcdP7YDyroabAH4OiLFT99DXs/S1IRd3DGKy\nHpGaEPB7gcDOjuJ5A4zyKbBfZJV88WqIWLx0twKHSKX/R2z+atwKLrA8v5pFvRgm\nkQZt2RcuCjn69hQaLNXsH1aLvfLkQ3aGbjqpRghuA/6lRCkMS7IkQY5fd9tluUM=\n=V9dd\n-----END PGP SIGNATURE-----\n", "payload": "tree 26ab1fa8a4a353ca47d9ed88da00a6001419af1a\nparent ca1439d4a7d7f8128a73589e1e19a72b3e28d327\nparent 600147926bfd18b67ac53b6800dc23c09fb60704\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1516719275 +0100\ncommitter GitHub <noreply@github.com> 1516719275 +0100\n\nMerge pull request #2362 from flip1995/master\n\nLint for numeric literals that have a better representation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7f76db9af907a0217bc5803f2327c51de4c278", "html_url": "https://github.com/rust-lang/rust/commit/8e7f76db9af907a0217bc5803f2327c51de4c278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7f76db9af907a0217bc5803f2327c51de4c278/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1439d4a7d7f8128a73589e1e19a72b3e28d327", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1439d4a7d7f8128a73589e1e19a72b3e28d327", "html_url": "https://github.com/rust-lang/rust/commit/ca1439d4a7d7f8128a73589e1e19a72b3e28d327"}, {"sha": "600147926bfd18b67ac53b6800dc23c09fb60704", "url": "https://api.github.com/repos/rust-lang/rust/commits/600147926bfd18b67ac53b6800dc23c09fb60704", "html_url": "https://github.com/rust-lang/rust/commit/600147926bfd18b67ac53b6800dc23c09fb60704"}], "stats": {"total": 238, "additions": 228, "deletions": 10}, "files": [{"sha": "037b9f827292c292eb1546aec6c40db4e13b6abf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8e7f76db9af907a0217bc5803f2327c51de4c278", "patch": "@@ -117,7 +117,7 @@ pub mod large_enum_variant;\n pub mod len_zero;\n pub mod let_if_seq;\n pub mod lifetimes;\n-pub mod literal_digit_grouping;\n+pub mod literal_representation;\n pub mod loops;\n pub mod map_clone;\n pub mod matches;\n@@ -354,7 +354,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n-    reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n+    reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n+    reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new(\n+            conf.literal_representation_threshold\n+    ));\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n@@ -487,9 +490,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         let_if_seq::USELESS_LET_IF_SEQ,\n         lifetimes::NEEDLESS_LIFETIMES,\n         lifetimes::UNUSED_LIFETIMES,\n-        literal_digit_grouping::INCONSISTENT_DIGIT_GROUPING,\n-        literal_digit_grouping::LARGE_DIGIT_GROUPS,\n-        literal_digit_grouping::UNREADABLE_LITERAL,\n+        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+        literal_representation::LARGE_DIGIT_GROUPS,\n+        literal_representation::UNREADABLE_LITERAL,\n+        literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_INTO_ITER_LOOP,"}, {"sha": "a0c4f537a1550c3445a4a722a16ca07bedddabf8", "filename": "clippy_lints/src/literal_representation.rs", "status": "renamed", "additions": 140, "deletions": 5, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=8e7f76db9af907a0217bc5803f2327c51de4c278", "patch": "@@ -62,7 +62,25 @@ declare_lint! {\n     \"grouping digits into groups that are too large\"\n }\n \n-#[derive(Debug)]\n+/// **What it does:** Warns if there is a better representation for a numeric literal.\n+///\n+/// **Why is this bad?** Especially for big powers of 2 a hexadecimal representation is more\n+/// readable than a decimal representation.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// `255` => `0xFF`\n+/// `65_535` => `0xFFFF`\n+/// `4_042_322_160` => `0xF0F0_F0F0`\n+declare_lint! {\n+    pub DECIMAL_LITERAL_REPRESENTATION,\n+    Warn,\n+    \"using decimal representation when hexadecimal would be better\"\n+}\n+\n+#[derive(Debug, PartialEq)]\n enum Radix {\n     Binary,\n     Octal,\n@@ -168,7 +186,12 @@ impl<'a> DigitInfo<'a> {\n                 .map(|chunk| chunk.into_iter().collect())\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n-            format!(\"{}.{}{}\", int_part_hint, frac_part_hint, self.suffix.unwrap_or(\"\"))\n+            format!(\n+                \"{}.{}{}\",\n+                int_part_hint,\n+                frac_part_hint,\n+                self.suffix.unwrap_or(\"\")\n+            )\n         } else {\n             let hint = self.digits\n                 .chars()\n@@ -180,7 +203,12 @@ impl<'a> DigitInfo<'a> {\n                 .rev()\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n-            format!(\"{}{}{}\", self.prefix.unwrap_or(\"\"), hint, self.suffix.unwrap_or(\"\"))\n+            format!(\n+                \"{}{}{}\",\n+                self.prefix.unwrap_or(\"\"),\n+                hint,\n+                self.suffix.unwrap_or(\"\")\n+            )\n         }\n     }\n }\n@@ -189,9 +217,9 @@ enum WarningType {\n     UnreadableLiteral,\n     InconsistentDigitGrouping,\n     LargeDigitGroups,\n+    DecimalRepresentation,\n }\n \n-\n impl WarningType {\n     pub fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: &syntax_pos::Span) {\n         match *self {\n@@ -216,6 +244,13 @@ impl WarningType {\n                 \"digits grouped inconsistently by underscores\",\n                 &format!(\"consider: {}\", grouping_hint),\n             ),\n+            WarningType::DecimalRepresentation => span_help_and_lint(\n+                cx,\n+                DECIMAL_LITERAL_REPRESENTATION,\n+                *span,\n+                \"integer literal has a better hexadecimal representation\",\n+                &format!(\"consider: {}\", grouping_hint),\n+            ),\n         };\n     }\n }\n@@ -225,7 +260,11 @@ pub struct LiteralDigitGrouping;\n \n impl LintPass for LiteralDigitGrouping {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNREADABLE_LITERAL, INCONSISTENT_DIGIT_GROUPING, LARGE_DIGIT_GROUPS)\n+        lint_array!(\n+            UNREADABLE_LITERAL,\n+            INCONSISTENT_DIGIT_GROUPING,\n+            LARGE_DIGIT_GROUPS\n+        )\n     }\n }\n \n@@ -353,3 +392,99 @@ impl LiteralDigitGrouping {\n         }\n     }\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct LiteralRepresentation {\n+    threshold: u64,\n+}\n+\n+impl LintPass for LiteralRepresentation {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DECIMAL_LITERAL_REPRESENTATION)\n+    }\n+}\n+\n+impl EarlyLintPass for LiteralRepresentation {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        if in_external_macro(cx, expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Lit(ref lit) = expr.node {\n+            self.check_lit(cx, lit)\n+        }\n+    }\n+}\n+\n+impl LiteralRepresentation {\n+    pub fn new(threshold: u64) -> Self {\n+        Self {\n+            threshold: threshold,\n+        }\n+    }\n+    fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n+        // Lint integral literals.\n+        if_chain! {\n+            if let LitKind::Int(..) = lit.node;\n+            if let Some(src) = snippet_opt(cx, lit.span);\n+            if let Some(firstch) = src.chars().next();\n+            if char::to_digit(firstch, 10).is_some();\n+            then {\n+                let digit_info = DigitInfo::new(&src, false);\n+                if digit_info.radix == Radix::Decimal {\n+                    let val = digit_info.digits\n+                        .chars()\n+                        .filter(|&c| c != '_')\n+                        .collect::<String>()\n+                        .parse::<u128>().unwrap();\n+                    if val < self.threshold as u128 {\n+                        return\n+                    }\n+                    let hex = format!(\"{:#X}\", val);\n+                    let digit_info = DigitInfo::new(&hex[..], false);\n+                    let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n+                        warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    fn do_lint(digits: &str) -> Result<(), WarningType> {\n+        if digits.len() == 1 {\n+            // Lint for 1 digit literals, if someone really sets the threshold that low\n+            if digits == \"1\" || digits == \"2\" || digits == \"4\" || digits == \"8\" || digits == \"3\" || digits == \"7\"\n+                || digits == \"F\"\n+            {\n+                return Err(WarningType::DecimalRepresentation);\n+            }\n+        } else if digits.len() < 4 {\n+            // Lint for Literals with a hex-representation of 2 or 3 digits\n+            let f = &digits[0..1]; // first digit\n+            let s = &digits[1..]; // suffix\n+            // Powers of 2\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n+                // Powers of 2 minus 1\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == 'F'))\n+            {\n+                return Err(WarningType::DecimalRepresentation);\n+            }\n+        } else {\n+            // Lint for Literals with a hex-representation of 4 digits or more\n+            let f = &digits[0..1]; // first digit\n+            let m = &digits[1..digits.len() - 1]; // middle digits, except last\n+            let s = &digits[1..]; // suffix\n+            // Powers of 2 with a margin of +15/-16\n+            if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n+                || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n+                // Lint for representations with only 0s and Fs, while allowing 7 as the first\n+                // digit\n+                || ((f.eq(\"7\") || f.eq(\"F\")) && s.chars().all(|c| c == '0' || c == 'F'))\n+            {\n+                return Err(WarningType::DecimalRepresentation);\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}", "previous_filename": "clippy_lints/src/literal_digit_grouping.rs"}, {"sha": "2906da3c02843018de32d4eac0f3bf6cbd009e18", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7f76db9af907a0217bc5803f2327c51de4c278/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=8e7f76db9af907a0217bc5803f2327c51de4c278", "patch": "@@ -177,6 +177,8 @@ define_Conf! {\n     (enum_variant_size_threshold, \"enum_variant_size_threshold\", 200 => u64),\n     /// Lint: VERBOSE_BIT_MASK. The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n     (verbose_bit_mask_threshold, \"verbose_bit_mask_threshold\", 1 => u64),\n+    /// Lint: DECIMAL_LITERAL_REPRESENTATION. The lower bound for linting decimal literals\n+    (literal_representation_threshold, \"literal_representation_threshold\", 4096 => u64),\n }\n \n /// Search for the configuration file."}, {"sha": "3ac33d7ac4ad353068c01aaed6b954052699e343", "filename": "tests/ui/decimal_literal_representation.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e7f76db9af907a0217bc5803f2327c51de4c278/tests%2Fui%2Fdecimal_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7f76db9af907a0217bc5803f2327c51de4c278/tests%2Fui%2Fdecimal_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.rs?ref=8e7f76db9af907a0217bc5803f2327c51de4c278", "patch": "@@ -0,0 +1,18 @@\n+\n+\n+\n+#[warn(decimal_literal_representation)]\n+#[allow(unused_variables)]\n+fn main() {\n+    // Hex:      7F,  80, 100, 1FF,  800,  FFA,   F0F3,     7F0F_F00D\n+    let good = (127, 128, 256, 511, 2048, 4090, 61_683, 2_131_750_925);\n+    let bad = (        // Hex:\n+        4096,          // 0x1000\n+        16_371,        // 0x3FF3\n+        32_773,        // 0x8005\n+        65_280,        // 0xFF00\n+        2_131_750_927, // 0x7F0F_F00F\n+        2_147_483_647, // 0x7FFF_FFFF\n+        4_042_322_160, // 0xF0F0_F0F0\n+    );\n+}"}, {"sha": "bd3c727b72890d2d52f7c8080fa20aa80ae00575", "filename": "tests/ui/decimal_literal_representation.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8e7f76db9af907a0217bc5803f2327c51de4c278/tests%2Fui%2Fdecimal_literal_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e7f76db9af907a0217bc5803f2327c51de4c278/tests%2Fui%2Fdecimal_literal_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.stderr?ref=8e7f76db9af907a0217bc5803f2327c51de4c278", "patch": "@@ -0,0 +1,59 @@\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:10:9\n+   |\n+10 |         4096,          // 0x1000\n+   |         ^^^^\n+   |\n+   = note: `-D decimal-literal-representation` implied by `-D warnings`\n+   = help: consider: 0x1000\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:11:9\n+   |\n+11 |         16_371,        // 0x3FF3\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0x3FF3\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:12:9\n+   |\n+12 |         32_773,        // 0x8005\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0x8005\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:13:9\n+   |\n+13 |         65_280,        // 0xFF00\n+   |         ^^^^^^\n+   |\n+   = help: consider: 0xFF00\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:14:9\n+   |\n+14 |         2_131_750_927, // 0x7F0F_F00F\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0x7F0F_F00F\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:15:9\n+   |\n+15 |         2_147_483_647, // 0x7FFF_FFFF\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0x7FFF_FFFF\n+\n+error: integer literal has a better hexadecimal representation\n+  --> $DIR/decimal_literal_representation.rs:16:9\n+   |\n+16 |         4_042_322_160, // 0xF0F0_F0F0\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = help: consider: 0xF0F0_F0F0\n+\n+error: aborting due to 7 previous errors\n+"}]}