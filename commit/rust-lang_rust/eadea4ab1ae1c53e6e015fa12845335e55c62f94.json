{"sha": "eadea4ab1ae1c53e6e015fa12845335e55c62f94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGVhNGFiMWFlMWM1M2U2ZTAxNWZhMTI4NDUzMzVlNTVjNjJmOTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-01T07:33:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-01T17:29:37Z"}, "message": "Rollup merge of #48405 - kennytm:autotoolstate-follow-up, r=Mark-Simulacrum\n\nAuto-toolstate management follow-up.\n\nTracking comment: https://github.com/rust-lang/rust/issues/45861#issuecomment-367302777\n\n* Fixed rust-lang-nursery/rust-toolstate#1, a proper link to the PR will be included.\n* Fixed rust-lang-nursery/rust-toolstate#2, a comment will be posted to the PR if the toolstate changed\n* Toolstate regression will be rejected at the last week of the 6-week cycle (currently entirely date-based).\n* Implemented https://internals.rust-lang.org/t/the-current-submodule-setup-is-not-tenable/6593, moved doc tests of Nomicon, Reference, Rust-by-Example and The Book to the \"tools\" job and thus allowed to fail like other external tools.", "tree": {"sha": "32a7dbda40821f5a85de6712f2363f39dfe32c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a7dbda40821f5a85de6712f2363f39dfe32c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eadea4ab1ae1c53e6e015fa12845335e55c62f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eadea4ab1ae1c53e6e015fa12845335e55c62f94", "html_url": "https://github.com/rust-lang/rust/commit/eadea4ab1ae1c53e6e015fa12845335e55c62f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eadea4ab1ae1c53e6e015fa12845335e55c62f94/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eeb5a665e313c5b281820099e04d4c6c8188b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeb5a665e313c5b281820099e04d4c6c8188b46", "html_url": "https://github.com/rust-lang/rust/commit/3eeb5a665e313c5b281820099e04d4c6c8188b46"}, {"sha": "a9f940e320bccc86dc7ab8b6179e918d3c05454d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f940e320bccc86dc7ab8b6179e918d3c05454d", "html_url": "https://github.com/rust-lang/rust/commit/a9f940e320bccc86dc7ab8b6179e918d3c05454d"}], "stats": {"total": 255, "additions": 208, "deletions": 47}, "files": [{"sha": "0d8641e45ed157b90b56fb3dd940ad611b89da99", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -188,7 +188,7 @@ matrix:\n       script:\n         MESSAGE_FILE=$(mktemp -t msg.XXXXXX);\n         . src/ci/docker/x86_64-gnu-tools/repo.sh;\n-        commit_toolstate_change \"$MESSAGE_FILE\" \"$TRAVIS_BUILD_DIR/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\"\n+        commit_toolstate_change \"$MESSAGE_FILE\" \"$TRAVIS_BUILD_DIR/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\" \"$TOOLSTATE_REPO_ACCESS_TOKEN\";\n \n env:\n   global:"}, {"sha": "1df85323c41ef203ebbc4899d93bb24a60606737", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -231,7 +231,7 @@ pub struct ShouldRun<'a> {\n     paths: BTreeSet<PathSet>,\n \n     // If this is a default rule, this is an additional constraint placed on\n-    // it's run. Generally something like compiler docs being enabled.\n+    // its run. Generally something like compiler docs being enabled.\n     is_really_default: bool,\n }\n \n@@ -326,7 +326,9 @@ impl<'a> Builder<'a> {\n                 test::RunPassPretty, test::RunFailPretty, test::RunPassValgrindPretty,\n                 test::RunPassFullDepsPretty, test::RunFailFullDepsPretty, test::RunMake,\n                 test::Crate, test::CrateLibrustc, test::Rustdoc, test::Linkcheck, test::Cargotest,\n-                test::Cargo, test::Rls, test::Docs, test::ErrorIndex, test::Distcheck,\n+                test::Cargo, test::Rls, test::ErrorIndex, test::Distcheck,\n+                test::Nomicon, test::Reference, test::RustdocBook, test::RustByExample,\n+                test::TheBook, test::UnstableBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,"}, {"sha": "408d63be6c6bfeed21bbeadfe722bb66f9b220d3", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -629,6 +629,8 @@ impl Step for CodegenBackend {\n             .arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n         rustc_cargo_env(build, &mut cargo);\n \n+        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n+\n         match &*self.backend {\n             \"llvm\" | \"emscripten\" => {\n                 // Build LLVM for our target. This will implicitly build the\n@@ -642,7 +644,6 @@ impl Step for CodegenBackend {\n                     features.push_str(\" emscripten\");\n                 }\n \n-                let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n                 println!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n                          compiler.stage, &compiler.host, target, self.backend);\n "}, {"sha": "b27ddfdbc5e583e2a3a91dfe7907390caf412e74", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -78,15 +78,17 @@ fn try_run(build: &Build, cmd: &mut Command) -> bool {\n     true\n }\n \n-fn try_run_quiet(build: &Build, cmd: &mut Command) {\n+fn try_run_quiet(build: &Build, cmd: &mut Command) -> bool {\n     if !build.fail_fast {\n         if !build.try_run_quiet(cmd) {\n             let mut failures = build.delayed_failures.borrow_mut();\n             failures.push(format!(\"{:?}\", cmd));\n+            return false;\n         }\n     } else {\n         build.run_quiet(cmd);\n     }\n+    true\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -994,23 +996,19 @@ impl Step for Compiletest {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Docs {\n+struct DocTest {\n     compiler: Compiler,\n+    path: &'static str,\n+    name: &'static str,\n+    is_ext_doc: bool,\n }\n \n-impl Step for Docs {\n+impl Step for DocTest {\n     type Output = ();\n-    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/doc\")\n-    }\n-\n-    fn make_run(run: RunConfig) {\n-        run.builder.ensure(Docs {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n-        });\n+        run.never()\n     }\n \n     /// Run `rustdoc --test` for all documentation in `src/doc`.\n@@ -1026,9 +1024,9 @@ impl Step for Docs {\n \n         // Do a breadth-first traversal of the `src/doc` directory and just run\n         // tests for all files that end in `*.md`\n-        let mut stack = vec![build.src.join(\"src/doc\")];\n+        let mut stack = vec![build.src.join(self.path)];\n         let _time = util::timeit();\n-        let _folder = build.fold_output(|| \"test_docs\");\n+        let _folder = build.fold_output(|| format!(\"test_{}\", self.name));\n \n         while let Some(p) = stack.pop() {\n             if p.is_dir() {\n@@ -1046,11 +1044,64 @@ impl Step for Docs {\n                 continue;\n             }\n \n-            markdown_test(builder, compiler, &p);\n+            let test_result = markdown_test(builder, compiler, &p);\n+            if self.is_ext_doc {\n+                let toolstate = if test_result {\n+                    ToolState::TestPass\n+                } else {\n+                    ToolState::TestFail\n+                };\n+                build.save_toolstate(self.name, toolstate);\n+            }\n         }\n     }\n }\n \n+macro_rules! test_book {\n+    ($($name:ident, $path:expr, $book_name:expr, default=$default:expr;)+) => {\n+        $(\n+            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+            pub struct $name {\n+                compiler: Compiler,\n+            }\n+\n+            impl Step for $name {\n+                type Output = ();\n+                const DEFAULT: bool = $default;\n+                const ONLY_HOSTS: bool = true;\n+\n+                fn should_run(run: ShouldRun) -> ShouldRun {\n+                    run.path($path)\n+                }\n+\n+                fn make_run(run: RunConfig) {\n+                    run.builder.ensure($name {\n+                        compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+                    });\n+                }\n+\n+                fn run(self, builder: &Builder) {\n+                    builder.ensure(DocTest {\n+                        compiler: self.compiler,\n+                        path: $path,\n+                        name: $book_name,\n+                        is_ext_doc: !$default,\n+                    });\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+test_book!(\n+    Nomicon, \"src/doc/nomicon\", \"nomicon\", default=false;\n+    Reference, \"src/doc/reference\", \"reference\", default=false;\n+    RustdocBook, \"src/doc/rustdoc\", \"rustdoc\", default=true;\n+    RustByExample, \"src/doc/rust-by-example\", \"rust-by-example\", default=false;\n+    TheBook, \"src/doc/book\", \"book\", default=false;\n+    UnstableBook, \"src/doc/unstable-book\", \"unstable-book\", default=true;\n+);\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ErrorIndex {\n     compiler: Compiler,\n@@ -1101,13 +1152,13 @@ impl Step for ErrorIndex {\n     }\n }\n \n-fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n+fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) -> bool {\n     let build = builder.build;\n     let mut file = t!(File::open(markdown));\n     let mut contents = String::new();\n     t!(file.read_to_string(&mut contents));\n     if !contents.contains(\"```\") {\n-        return;\n+        return true;\n     }\n \n     println!(\"doc tests for: {}\", markdown.display());\n@@ -1121,9 +1172,9 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if build.config.quiet_tests {\n-        try_run_quiet(build, &mut cmd);\n+        try_run_quiet(build, &mut cmd)\n     } else {\n-        try_run(build, &mut cmd);\n+        try_run(build, &mut cmd)\n     }\n }\n "}, {"sha": "bab9145cbcb9c78ed68ee5c5a06fdf28cca932a6", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -17,6 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY x86_64-gnu-tools/checkregression.py /tmp/\n COPY x86_64-gnu-tools/checktools.sh /tmp/\n COPY x86_64-gnu-tools/repo.sh /tmp/\n "}, {"sha": "df791d12645fdea798b18f5df759de51019a5501", "filename": "src/ci/docker/x86_64-gnu-tools/checkregression.py", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -0,0 +1,40 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import sys\n+import json\n+\n+if __name__ == '__main__':\n+    os_name = sys.argv[1]\n+    toolstate_file = sys.argv[2]\n+    current_state = sys.argv[3]\n+\n+    with open(toolstate_file, 'r') as f:\n+        toolstate = json.load(f)\n+    with open(current_state, 'r') as f:\n+        current = json.load(f)\n+\n+    regressed = False\n+    for cur in current:\n+        tool = cur['tool']\n+        state = cur[os_name]\n+        new_state = toolstate.get(tool, '')\n+        if new_state < state:\n+            print(\n+                'Error: The state of \"{}\" has regressed from \"{}\" to \"{}\"'\n+                .format(tool, state, new_state)\n+            )\n+            regressed = True\n+\n+    if regressed:\n+        sys.exit(1)"}, {"sha": "da89aa9423b2daa18cf9a9bc500fd63c717ecc64", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -17,39 +17,57 @@ TOOLSTATE_FILE=\"$(realpath $2)\"\n OS=\"$3\"\n COMMIT=\"$(git rev-parse HEAD)\"\n CHANGED_FILES=\"$(git diff --name-status HEAD HEAD^)\"\n+SIX_WEEK_CYCLE=\"$(( ($(date +%s) / 604800 - 3) % 6 ))\"\n+# ^ 1970 Jan 1st is a Thursday, and our release dates are also on Thursdays,\n+#   thus we could divide by 604800 (7 days in seconds) directly.\n \n touch \"$TOOLSTATE_FILE\"\n \n set +e\n python2.7 \"$X_PY\" test --no-fail-fast \\\n+    src/doc/book \\\n+    src/doc/nomicon \\\n+    src/doc/reference \\\n+    src/doc/rust-by-example \\\n     src/tools/rls \\\n     src/tools/rustfmt \\\n     src/tools/miri \\\n     src/tools/clippy\n set -e\n \n cat \"$TOOLSTATE_FILE\"\n+echo\n \n-# If this PR is intended to update one of these tools, do not let the build pass\n-# when they do not test-pass.\n-for TOOL in rls rustfmt clippy; do\n-    echo \"Verifying status of $TOOL...\"\n-    if echo \"$CHANGED_FILES\" | grep -q \"^M[[:blank:]]src/tools/$TOOL$\"; then\n-        echo \"This PR updated 'src/tools/$TOOL', verifying if status is 'test-pass'...\"\n-        if grep -vq '\"'\"$TOOL\"'[^\"]*\":\"test-pass\"' \"$TOOLSTATE_FILE\"; then\n+verify_status() {\n+    echo \"Verifying status of $1...\"\n+    if echo \"$CHANGED_FILES\" | grep -q \"^M[[:blank:]]$2$\"; then\n+        echo \"This PR updated '$2', verifying if status is 'test-pass'...\"\n+        if grep -vq '\"'\"$1\"'\":\"test-pass\"' \"$TOOLSTATE_FILE\"; then\n             echo\n-            echo \"\u26a0\ufe0f We detected that this PR updated '$TOOL', but its tests failed.\"\n+            echo \"\u26a0\ufe0f We detected that this PR updated '$1', but its tests failed.\"\n             echo\n-            echo \"If you do intend to update '$TOOL', please check the error messages above and\"\n+            echo \"If you do intend to update '$1', please check the error messages above and\"\n             echo \"commit another update.\"\n             echo\n-            echo \"If you do NOT intend to update '$TOOL', please ensure you did not accidentally\"\n-            echo \"change the submodule at 'src/tools/$TOOL'. You may ask your reviewer for the\"\n+            echo \"If you do NOT intend to update '$1', please ensure you did not accidentally\"\n+            echo \"change the submodule at '$2'. You may ask your reviewer for the\"\n             echo \"proper steps.\"\n             exit 3\n         fi\n     fi\n-done\n+}\n+\n+# If this PR is intended to update one of these tools, do not let the build pass\n+# when they do not test-pass.\n+\n+verify_status book src/doc/book\n+verify_status nomicon src/doc/nomicon\n+verify_status reference src/doc/reference\n+verify_status rust-by-example src/doc/rust-by-example\n+verify_status rls src/tool/rls\n+verify_status rustfmt src/tool/rustfmt\n+verify_status clippy-driver src/tool/clippy\n+#verify_status miri src/tool/miri\n \n if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n     . \"$(dirname $0)/repo.sh\"\n@@ -59,6 +77,11 @@ if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_s\n         sed -i \"1 a\\\\\n $COMMIT\\t$(cat \"$TOOLSTATE_FILE\")\n \" \"history/$OS.tsv\"\n+    # if we are at the last week in the 6-week release cycle, reject any kind of regression.\n+    if [ $SIX_WEEK_CYCLE -eq 5 ]; then\n+        python2.7 \"$(dirname $0)/checkregression.py\" \\\n+            \"$OS\" \"$TOOLSTATE_FILE\" \"rust-toolstate/_data/latest.json\"\n+    fi\n     rm -f \"$MESSAGE_FILE\"\n     exit 0\n fi"}, {"sha": "8e23519f57ebca5130913b5ceda69605ff964cfa", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/eadea4ab1ae1c53e6e015fa12845335e55c62f94/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=eadea4ab1ae1c53e6e015fa12845335e55c62f94", "patch": "@@ -17,13 +17,22 @@\n import copy\n import datetime\n import collections\n+import textwrap\n+try:\n+    import urllib2\n+except ImportError:\n+    import urllib.request as urllib2\n \n # List of people to ping when the status of a tool changed.\n MAINTAINERS = {\n     'miri': '@oli-obk @RalfJung @eddyb',\n     'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk',\n     'rls': '@nrc',\n     'rustfmt': '@nrc',\n+    'book': '@carols10cents @steveklabnik',\n+    'nomicon': '@frewsxcv @Gankro',\n+    'reference': '@steveklabnik @Havvy @matthewjasper @alercah',\n+    'rust-by-example': '@steveklabnik @marioidival @projektir',\n }\n \n \n@@ -38,7 +47,12 @@ def read_current_status(current_commit, path):\n     return {}\n \n \n-def update_latest(current_commit, relevant_pr_number, current_datetime):\n+def update_latest(\n+    current_commit,\n+    relevant_pr_number,\n+    relevant_pr_url,\n+    current_datetime\n+):\n     '''Updates `_data/latest.json` to match build result of the given commit.\n     '''\n     with open('_data/latest.json', 'rb+') as f:\n@@ -50,8 +64,13 @@ def update_latest(current_commit, relevant_pr_number, current_datetime):\n         }\n \n         slug = 'rust-lang/rust'\n-        message = '\ud83d\udce3 Toolstate changed by {}!\\n\\nTested on commit {}@{}.\\n\\n' \\\n-            .format(relevant_pr_number, slug, current_commit)\n+        message = textwrap.dedent('''\\\n+            \ud83d\udce3 Toolstate changed by {}!\n+\n+            Tested on commit {}@{}.\n+            Direct link to PR: <{}>\n+\n+        ''').format(relevant_pr_number, slug, current_commit, relevant_pr_url)\n         anything_changed = False\n         for status in latest:\n             tool = status['tool']\n@@ -68,7 +87,7 @@ def update_latest(current_commit, relevant_pr_number, current_datetime):\n                 elif new < old:\n                     changed = True\n                     message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}).\\n' \\\n-                        .format(tool, os, old, new, MAINTAINERS[tool])\n+                        .format(tool, os, old, new, MAINTAINERS.get(tool))\n \n             if changed:\n                 status['commit'] = current_commit\n@@ -89,17 +108,41 @@ def update_latest(current_commit, relevant_pr_number, current_datetime):\n     cur_datetime = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\n     cur_commit_msg = sys.argv[2]\n     save_message_to_path = sys.argv[3]\n+    github_token = sys.argv[4]\n \n-    relevant_pr_match = re.search('#[0-9]+', cur_commit_msg)\n+    relevant_pr_match = re.search('#([0-9]+)', cur_commit_msg)\n     if relevant_pr_match:\n-        relevant_pr_number = 'rust-lang/rust' + relevant_pr_match.group(0)\n+        number = relevant_pr_match.group(1)\n+        relevant_pr_number = 'rust-lang/rust#' + number\n+        relevant_pr_url = 'https://github.com/rust-lang/rust/pull/' + number\n     else:\n+        number = '-1'\n         relevant_pr_number = '<unknown PR>'\n-\n-    message = update_latest(cur_commit, relevant_pr_number, cur_datetime)\n-    if message:\n-        print(message)\n-        with open(save_message_to_path, 'w') as f:\n-            f.write(message)\n-    else:\n+        relevant_pr_url = '<unknown>'\n+\n+    message = update_latest(\n+        cur_commit,\n+        relevant_pr_number,\n+        relevant_pr_url,\n+        cur_datetime\n+    )\n+    if not message:\n         print('<Nothing changed>')\n+        sys.exit(0)\n+\n+    print(message)\n+    with open(save_message_to_path, 'w') as f:\n+        f.write(message)\n+\n+    # Write the toolstate comment on the PR as well.\n+    gh_url = 'https://api.github.com/repos/rust-lang/rust/issues/{}/comments' \\\n+        .format(number)\n+    response = urllib2.urlopen(urllib2.Request(\n+        gh_url,\n+        json.dumps({'body': message}),\n+        {\n+            'Authorization': 'token ' + github_token,\n+            'Content-Type': 'application/json',\n+        }\n+    ))\n+    response.read()"}]}