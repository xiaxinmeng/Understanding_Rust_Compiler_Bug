{"sha": "18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "node_id": "C_kwDOAAsO6NoAKDE4YmQyZGQ1Y2RhMDhiMDlhY2U2ZTM3YzFhMDMxMmU5YjJiYjRiZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T10:22:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T10:22:07Z"}, "message": "Auto merge of #96853 - davidtwco:diagnostic-translation-unit-and-more-porting, r=oli-obk\n\ndiagnostics: port more diagnostics to derive + support for `()` fields\n\n- Extend diagnostic derive so that spanless subdiagnostics (e.g. some uses of `help`/`note`) can be applied via attributes to fields of type `()` (currently spanless subdiagnostics are applied via attributes on the diagnostic struct itself). A consequence of this is that `Option<()>` fields can be used to represent optional spanless subdiagnostics, which are sometimes useful (e.g. for a `help` that should only show on nightly builds).\n- Simplify the \"explicit generic args with impl trait\" diagnostic struct (from #96760) using support for `Option<()>` spanless subdiagnostics.\n- Change `DiagnosticBuilder::set_arg`, used to provide context for Fluent messages, so that it takes anything that implements `IntoDiagnosticArg`, rather than `DiagnosticArgValue` - this improves the ergonomics of manual implementations of `SessionDiagnostic` which are translatable.\n- Port \"the type parameter `T` must be explicitly specified\", \"manual implementations of `X` are experimental\", \"could not resolve substs on overridden impl\" diagnostics to diagnostic structs.\n- When testing macros from `rustc_macros` in `ui-fulldeps` tests, sometimes paths from the compiler source tree can be shown in error messages - these need to be normalized in `compiletest`.\n\nr? `@oli-obk`\ncc `@pvdrz`", "tree": {"sha": "c419def06148595c6765e3cf04ae84b45fe43c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c419def06148595c6765e3cf04ae84b45fe43c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "html_url": "https://github.com/rust-lang/rust/commit/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8e2e3ad9fce35dc356ee1e87170814e4112d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8e2e3ad9fce35dc356ee1e87170814e4112d76", "html_url": "https://github.com/rust-lang/rust/commit/4f8e2e3ad9fce35dc356ee1e87170814e4112d76"}, {"sha": "47582471c61e15f9e409b45e11f2f15e61a88e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/47582471c61e15f9e409b45e11f2f15e61a88e29", "html_url": "https://github.com/rust-lang/rust/commit/47582471c61e15f9e409b45e11f2f15e61a88e29"}], "stats": {"total": 397, "additions": 254, "deletions": 143}, "files": [{"sha": "95b348ec61353e5bca87292dc00084aefae38d08", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -99,6 +99,33 @@ typeck-explicit-generic-args-with-impl-trait =\n     cannot provide explicit generic arguments when `impl Trait` is used in argument position\n     .label = explicit generic argument not allowed\n     .note = see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n+    .help = add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n \n-typeck-explicit-generic-args-with-impl-trait-feature =\n-    add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n+typeck-missing-type-params =\n+    the type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } {$parameters} must be explicitly specified\n+    .label = type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } {$parameters} must be specified for this\n+    .suggestion = set the type {$parameterCount ->\n+        [one] parameter\n+        *[other] parameters\n+    } to the desired {$parameterCount ->\n+        [one] type\n+        *[other] types\n+    }\n+    .no-suggestion-label = missing {$parameterCount ->\n+        [one] reference\n+        *[other] references\n+    } to {$parameters}\n+    .note = because of the default `Self` reference, type parameters must be specified on object types\n+\n+typeck-manual-implementation =\n+    manual implementations of `{$trait_name}` are experimental\n+    .label = manual implementations of `{$trait_name}` are experimental\n+    .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+typeck-substs-on-overridden-impl = could not resolve substs on overridden impl"}, {"sha": "909ed566f64ea9c45d11b234bed23a6269f44174", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -821,9 +821,9 @@ impl Diagnostic {\n     pub fn set_arg(\n         &mut self,\n         name: impl Into<Cow<'static, str>>,\n-        arg: DiagnosticArgValue<'static>,\n+        arg: impl IntoDiagnosticArg,\n     ) -> &mut Self {\n-        self.args.push((name.into(), arg));\n+        self.args.push((name.into(), arg.into_diagnostic_arg()));\n         self\n     }\n "}, {"sha": "53ad6e5a0edea56ce07c06bb7a2e3188024e1a38", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -1,4 +1,4 @@\n-use crate::diagnostic::DiagnosticArgValue;\n+use crate::diagnostic::IntoDiagnosticArg;\n use crate::{Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, ErrorGuaranteed};\n use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n@@ -528,7 +528,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     forward!(pub fn set_arg(\n         &mut self,\n         name: impl Into<Cow<'static, str>>,\n-        arg: DiagnosticArgValue<'static>,\n+        arg: impl IntoDiagnosticArg,\n     ) -> &mut Self);\n \n     forward!(pub fn subdiagnostic("}, {"sha": "dac3e986e7ad4bc142377300304f92262f8c3f68", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -5,10 +5,10 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    report_error_if_not_applied_to_span, type_matches_path, Applicability, FieldInfo, FieldInnerTy,\n-    HasFieldMap, SetOnce,\n+    report_error_if_not_applied_to_span, report_type_error, type_is_unit, type_matches_path,\n+    Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n };\n-use proc_macro2::TokenStream;\n+use proc_macro2::{Ident, TokenStream};\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::str::FromStr;\n@@ -113,7 +113,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         quote! {\n                             #diag.set_arg(\n                                 stringify!(#ident),\n-                                #field_binding.into_diagnostic_arg()\n+                                #field_binding\n                             );\n                         }\n                     } else {\n@@ -388,7 +388,8 @@ impl SessionDiagnosticDeriveBuilder {\n     ) -> Result<TokenStream, SessionDiagnosticDeriveError> {\n         let diag = &self.diag;\n \n-        let name = attr.path.segments.last().unwrap().ident.to_string();\n+        let ident = &attr.path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n         let name = name.as_str();\n \n         let meta = attr.parse_meta()?;\n@@ -405,9 +406,18 @@ impl SessionDiagnosticDeriveBuilder {\n                         #diag.set_span(#binding);\n                     })\n                 }\n-                \"label\" | \"note\" | \"help\" => {\n+                \"label\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_subdiagnostic(binding, name, name))\n+                    Ok(self.add_spanned_subdiagnostic(binding, ident, name))\n+                }\n+                \"note\" | \"help\" => {\n+                    if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        Ok(self.add_spanned_subdiagnostic(binding, ident, name))\n+                    } else if type_is_unit(&info.ty) {\n+                        Ok(self.add_subdiagnostic(ident, name))\n+                    } else {\n+                        report_type_error(attr, \"`Span` or `()`\")?;\n+                    }\n                 }\n                 \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(#binding); }),\n                 _ => throw_invalid_attr!(attr, &meta, |diag| {\n@@ -416,9 +426,18 @@ impl SessionDiagnosticDeriveBuilder {\n                 }),\n             },\n             Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(ref s), .. }) => match name {\n-                \"label\" | \"note\" | \"help\" => {\n+                \"label\" => {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n-                    Ok(self.add_subdiagnostic(binding, name, &s.value()))\n+                    Ok(self.add_spanned_subdiagnostic(binding, ident, &s.value()))\n+                }\n+                \"note\" | \"help\" => {\n+                    if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n+                        Ok(self.add_spanned_subdiagnostic(binding, ident, &s.value()))\n+                    } else if type_is_unit(&info.ty) {\n+                        Ok(self.add_subdiagnostic(ident, &s.value()))\n+                    } else {\n+                        report_type_error(attr, \"`Span` or `()`\")?;\n+                    }\n                 }\n                 _ => throw_invalid_attr!(attr, &meta, |diag| {\n                     diag.help(\"only `label`, `note` and `help` are valid field attributes\")\n@@ -510,12 +529,12 @@ impl SessionDiagnosticDeriveBuilder {\n         }\n     }\n \n-    /// Adds a subdiagnostic by generating a `diag.span_$kind` call with the current slug and\n-    /// `fluent_attr_identifier`.\n-    fn add_subdiagnostic(\n+    /// Adds a spanned subdiagnostic by generating a `diag.span_$kind` call with the current slug\n+    /// and `fluent_attr_identifier`.\n+    fn add_spanned_subdiagnostic(\n         &self,\n         field_binding: TokenStream,\n-        kind: &str,\n+        kind: &Ident,\n         fluent_attr_identifier: &str,\n     ) -> TokenStream {\n         let diag = &self.diag;\n@@ -531,6 +550,16 @@ impl SessionDiagnosticDeriveBuilder {\n         }\n     }\n \n+    /// Adds a subdiagnostic by generating a `diag.span_$kind` call with the current slug\n+    /// and `fluent_attr_identifier`.\n+    fn add_subdiagnostic(&self, kind: &Ident, fluent_attr_identifier: &str) -> TokenStream {\n+        let diag = &self.diag;\n+        let slug = self.slug.as_ref().map(|(slug, _)| slug.as_str()).unwrap_or(\"missing-slug\");\n+        quote! {\n+            #diag.#kind(rustc_errors::DiagnosticMessage::fluent_attr(#slug, #fluent_attr_identifier));\n+        }\n+    }\n+\n     fn span_and_applicability_of_ty(\n         &self,\n         info: FieldInfo<'_>,"}, {"sha": "ae5b9dbd9ba1c2677c604253eccefbd36b82eceb", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -349,7 +349,7 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n         let generated = quote! {\n             #diag.set_arg(\n                 stringify!(#ident),\n-                #binding.into_diagnostic_arg()\n+                #binding\n             );\n         };\n "}, {"sha": "af5a30880e05f2fdce5c5eaa4f19cf97d85d3c0c", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -4,7 +4,7 @@ use proc_macro2::TokenStream;\n use quote::{format_ident, quote, ToTokens};\n use std::collections::BTreeSet;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Attribute, Meta, Type, Visibility};\n+use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple, Visibility};\n use synstructure::BindingInfo;\n \n /// Checks whether the type name of `ty` matches `name`.\n@@ -25,31 +25,43 @@ pub(crate) fn type_matches_path(ty: &Type, name: &[&str]) -> bool {\n     }\n }\n \n-/// Reports an error if the field's type is not `Applicability`.\n+/// Checks whether the type `ty` is `()`.\n+pub(crate) fn type_is_unit(ty: &Type) -> bool {\n+    if let Type::Tuple(TypeTuple { elems, .. }) = ty { elems.is_empty() } else { false }\n+}\n+\n+/// Reports a type error for field with `attr`.\n+pub(crate) fn report_type_error(\n+    attr: &Attribute,\n+    ty_name: &str,\n+) -> Result<!, SessionDiagnosticDeriveError> {\n+    let name = attr.path.segments.last().unwrap().ident.to_string();\n+    let meta = attr.parse_meta()?;\n+\n+    throw_span_err!(\n+        attr.span().unwrap(),\n+        &format!(\n+            \"the `#[{}{}]` attribute can only be applied to fields of type {}\",\n+            name,\n+            match meta {\n+                Meta::Path(_) => \"\",\n+                Meta::NameValue(_) => \" = ...\",\n+                Meta::List(_) => \"(...)\",\n+            },\n+            ty_name\n+        )\n+    );\n+}\n+\n+/// Reports an error if the field's type does not match `path`.\n fn report_error_if_not_applied_to_ty(\n     attr: &Attribute,\n     info: &FieldInfo<'_>,\n     path: &[&str],\n     ty_name: &str,\n ) -> Result<(), SessionDiagnosticDeriveError> {\n     if !type_matches_path(&info.ty, path) {\n-        let name = attr.path.segments.last().unwrap().ident.to_string();\n-        let name = name.as_str();\n-        let meta = attr.parse_meta()?;\n-\n-        throw_span_err!(\n-            attr.span().unwrap(),\n-            &format!(\n-                \"the `#[{}{}]` attribute can only be applied to fields of type `{}`\",\n-                name,\n-                match meta {\n-                    Meta::Path(_) => \"\",\n-                    Meta::NameValue(_) => \" = ...\",\n-                    Meta::List(_) => \"(...)\",\n-                },\n-                ty_name\n-            )\n-        );\n+        report_type_error(attr, ty_name)?;\n     }\n \n     Ok(())\n@@ -64,7 +76,7 @@ pub(crate) fn report_error_if_not_applied_to_applicability(\n         attr,\n         info,\n         &[\"rustc_errors\", \"Applicability\"],\n-        \"Applicability\",\n+        \"`Applicability`\",\n     )\n }\n \n@@ -73,7 +85,7 @@ pub(crate) fn report_error_if_not_applied_to_span(\n     attr: &Attribute,\n     info: &FieldInfo<'_>,\n ) -> Result<(), SessionDiagnosticDeriveError> {\n-    report_error_if_not_applied_to_ty(attr, info, &[\"rustc_span\", \"Span\"], \"Span\")\n+    report_error_if_not_applied_to_ty(attr, info, &[\"rustc_span\", \"Span\"], \"`Span`\")\n }\n \n /// Inner type of a field and type of wrapper."}, {"sha": "0baebdb713062eba1c1ada8c8cdd8f16ee0aaddb", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -1,5 +1,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(let_else)]\n+#![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![allow(rustc::default_hash_types)]\n #![recursion_limit = \"128\"]"}, {"sha": "8fe89c66389c266098f686cc18e71de125cbe29a", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 7, "deletions": 70, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -1,4 +1,5 @@\n use crate::astconv::AstConv;\n+use crate::errors::{ManualImplementation, MissingTypeParams};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -24,65 +25,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if missing_type_params.is_empty() {\n             return;\n         }\n-        let display =\n-            missing_type_params.iter().map(|n| format!(\"`{}`\", n)).collect::<Vec<_>>().join(\", \");\n-        let mut err = struct_span_err!(\n-            self.tcx().sess,\n+\n+        self.tcx().sess.emit_err(MissingTypeParams {\n             span,\n-            E0393,\n-            \"the type parameter{} {} must be explicitly specified\",\n-            pluralize!(missing_type_params.len()),\n-            display,\n-        );\n-        err.span_label(\n-            self.tcx().def_span(def_id),\n-            &format!(\n-                \"type parameter{} {} must be specified for this\",\n-                pluralize!(missing_type_params.len()),\n-                display,\n-            ),\n-        );\n-        let mut suggested = false;\n-        if let (Ok(snippet), true) = (\n-            self.tcx().sess.source_map().span_to_snippet(span),\n-            // Don't suggest setting the type params if there are some already: the order is\n-            // tricky to get right and the user will already know what the syntax is.\n+            def_span: self.tcx().def_span(def_id),\n+            missing_type_params,\n             empty_generic_args,\n-        ) {\n-            if snippet.ends_with('>') {\n-                // The user wrote `Trait<'a, T>` or similar. To provide an accurate suggestion\n-                // we would have to preserve the right order. For now, as clearly the user is\n-                // aware of the syntax, we do nothing.\n-            } else {\n-                // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n-                // least we can clue them to the correct syntax `Iterator<Type>`.\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"set the type parameter{plural} to the desired type{plural}\",\n-                        plural = pluralize!(missing_type_params.len()),\n-                    ),\n-                    format!(\"{}<{}>\", snippet, missing_type_params.join(\", \")),\n-                    Applicability::HasPlaceholders,\n-                );\n-                suggested = true;\n-            }\n-        }\n-        if !suggested {\n-            err.span_label(\n-                span,\n-                format!(\n-                    \"missing reference{} to {}\",\n-                    pluralize!(missing_type_params.len()),\n-                    display,\n-                ),\n-            );\n-        }\n-        err.note(\n-            \"because of the default `Self` reference, type parameters must be \\\n-                  specified on object types\",\n-        );\n-        err.emit();\n+        });\n     }\n \n     /// When the code is using the `Fn` traits directly, instead of the `Fn(A) -> B` syntax, emit\n@@ -172,19 +121,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         if is_impl {\n             let trait_name = self.tcx().def_path_str(trait_def_id);\n-            struct_span_err!(\n-                self.tcx().sess,\n-                span,\n-                E0183,\n-                \"manual implementations of `{}` are experimental\",\n-                trait_name,\n-            )\n-            .span_label(\n-                span,\n-                format!(\"manual implementations of `{}` are experimental\", trait_name),\n-            )\n-            .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to enable\")\n-            .emit();\n+            self.tcx().sess.emit_err(ManualImplementation { span, trait_name });\n         }\n     }\n "}, {"sha": "dc4bc8fb55a17fe280e48447d6a0f1c1c53cc072", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -3,10 +3,7 @@ use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n     GenericArgCountResult, GenericArgPosition,\n };\n-use crate::errors::{\n-    AssocTypeBindingNotAllowed, ExplicitGenericArgsWithImplTrait,\n-    ExplicitGenericArgsWithImplTraitFeature,\n-};\n+use crate::errors::{AssocTypeBindingNotAllowed, ExplicitGenericArgsWithImplTrait};\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n@@ -639,11 +636,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 })\n                 .collect::<Vec<_>>();\n \n-            let mut err = tcx.sess.create_err(ExplicitGenericArgsWithImplTrait { spans });\n-            if tcx.sess.is_nightly_build() {\n-                err.subdiagnostic(ExplicitGenericArgsWithImplTraitFeature);\n-            }\n-            err.emit();\n+            tcx.sess.emit_err(ExplicitGenericArgsWithImplTrait {\n+                spans,\n+                is_nightly_build: tcx.sess.is_nightly_build().then_some(()),\n+            });\n         }\n \n         impl_trait"}, {"sha": "cd3813ca4f5b536db118ef918e15c26ab2ed47cc", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 82, "deletions": 4, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -1,7 +1,10 @@\n //! Errors emitted by typeck.\n-use rustc_errors::Applicability;\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n+};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -247,8 +250,83 @@ pub struct ExplicitGenericArgsWithImplTrait {\n     #[primary_span]\n     #[label]\n     pub spans: Vec<Span>,\n+    #[help]\n+    pub is_nightly_build: Option<()>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n-#[help(slug = \"typeck-explicit-generic-args-with-impl-trait-feature\")]\n-pub struct ExplicitGenericArgsWithImplTraitFeature;\n+pub struct MissingTypeParams {\n+    pub span: Span,\n+    pub def_span: Span,\n+    pub missing_type_params: Vec<String>,\n+    pub empty_generic_args: bool,\n+}\n+\n+// Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n+impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        static SLUG: &'static str = \"typeck-missing-type-params\";\n+        let mut err = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            DiagnosticMessage::fluent(SLUG),\n+            error_code!(E0393),\n+        );\n+        err.set_arg(\"parameterCount\", self.missing_type_params.len());\n+        err.set_arg(\n+            \"parameters\",\n+            self.missing_type_params\n+                .iter()\n+                .map(|n| format!(\"`{}`\", n))\n+                .collect::<Vec<_>>()\n+                .join(\", \"),\n+        );\n+\n+        err.span_label(self.def_span, DiagnosticMessage::fluent_attr(SLUG, \"label\"));\n+\n+        let mut suggested = false;\n+        if let (Ok(snippet), true) = (\n+            sess.source_map().span_to_snippet(self.span),\n+            // Don't suggest setting the type params if there are some already: the order is\n+            // tricky to get right and the user will already know what the syntax is.\n+            self.empty_generic_args,\n+        ) {\n+            if snippet.ends_with('>') {\n+                // The user wrote `Trait<'a, T>` or similar. To provide an accurate suggestion\n+                // we would have to preserve the right order. For now, as clearly the user is\n+                // aware of the syntax, we do nothing.\n+            } else {\n+                // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n+                // least we can clue them to the correct syntax `Iterator<Type>`.\n+                err.span_suggestion(\n+                    self.span,\n+                    DiagnosticMessage::fluent_attr(SLUG, \"suggestion\"),\n+                    format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n+                    Applicability::HasPlaceholders,\n+                );\n+                suggested = true;\n+            }\n+        }\n+        if !suggested {\n+            err.span_label(self.span, DiagnosticMessage::fluent_attr(SLUG, \"no-suggestion-label\"));\n+        }\n+\n+        err.note(DiagnosticMessage::fluent_attr(SLUG, \"note\"));\n+        err\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0183\", slug = \"typeck-manual-implementation\")]\n+#[help]\n+pub struct ManualImplementation {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub trait_name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"typeck-substs-on-overridden-impl\")]\n+pub struct SubstsOnOverriddenImpl {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "bb97d00be32ccf41af60926b0944753c4e5b7284", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -66,6 +66,7 @@\n //! on traits with methods can.\n \n use crate::constrained_generic_params as cgp;\n+use crate::errors::SubstsOnOverriddenImpl;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -165,7 +166,7 @@ fn get_impl_substs<'tcx>(\n     let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n     infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env, RegionckMode::default());\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n-        tcx.sess.struct_span_err(span, \"could not resolve substs on overridden impl\").emit();\n+        tcx.sess.emit_err(SubstsOnOverriddenImpl { span });\n         return None;\n     };\n     Some((impl1_substs, impl2_substs))"}, {"sha": "1cdc5d18c28983cb8506f78cbd3f19f311e0e9b1", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -327,7 +327,7 @@ struct ErrorWithDefaultLabelAttr<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-//~^ ERROR no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n+//~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n@@ -482,3 +482,25 @@ struct VecField {\n     #[label]\n     spans: Vec<Span>,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct UnitField {\n+    #[primary_span]\n+    spans: Span,\n+    #[help]\n+    foo: (),\n+    #[help = \"a\"]\n+    bar: (),\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct OptUnitField {\n+    #[primary_span]\n+    spans: Span,\n+    #[help]\n+    foo: Option<()>,\n+    #[help = \"a\"]\n+    bar: Option<()>,\n+}"}, {"sha": "2583363120a2950e1e2a1c2ab7acfaca436a757f", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -349,17 +349,26 @@ error: cannot find attribute `nonsense` in this scope\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n-error[E0599]: no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n+error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n   --> $DIR/diagnostic-derive.rs:329:10\n    |\n-LL | struct Hello {}\n-   | ------------ method `into_diagnostic_arg` not found for this\n-...\n LL | #[derive(SessionDiagnostic)]\n-   |          ^^^^^^^^^^^^^^^^^ method not found in `Hello`\n-   |\n+   |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n+   |\n+   = help: the following other types implement trait `IntoDiagnosticArg`:\n+             &'a str\n+             Ident\n+             String\n+             Symbol\n+             rustc_middle::ty::Ty<'tcx>\n+             usize\n+note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:531:19\n+   |\n+LL |         arg: impl IntoDiagnosticArg,\n+   |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 43 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a59a0584d5e99245753b2d39621d534345af6d53", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=18bd2dd5cda08b09ace6e37c1a0312e9b2bb4beb", "patch": "@@ -3494,22 +3494,21 @@ impl<'test> TestCx<'test> {\n         normalize_path(parent_dir, \"$DIR\");\n \n         // Paths into the libstd/libcore\n-        let src_dir = self\n-            .config\n-            .src_base\n-            .parent()\n-            .unwrap()\n-            .parent()\n-            .unwrap()\n-            .parent()\n-            .unwrap()\n-            .join(\"library\");\n+        let base_dir = self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n+        let src_dir = base_dir.join(\"library\");\n         normalize_path(&src_dir, \"$SRC_DIR\");\n \n+        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+        // `rustc_macros`\n+        // eg. /home/user/rust/compiler\n+        let compiler_src_dir = base_dir.join(\"compiler\");\n+        normalize_path(&compiler_src_dir, \"$COMPILER_DIR\");\n+\n         if let Some(virtual_rust_source_base_dir) =\n             option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n         {\n             normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$SRC_DIR\");\n+            normalize_path(&virtual_rust_source_base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n         }\n \n         // Paths into the build directory"}]}