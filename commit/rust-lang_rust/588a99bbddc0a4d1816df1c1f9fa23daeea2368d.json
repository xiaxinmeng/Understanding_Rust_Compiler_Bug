{"sha": "588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "node_id": "C_kwDOAAsO6NoAKDU4OGE5OWJiZGRjMGE0ZDE4MTZkZjFjMWY5ZmEyM2RhZWVhMjM2OGQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-27T13:37:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-30T21:46:28Z"}, "message": "Fix display for \"const\" deref methods in rustdoc", "tree": {"sha": "d510781318805848ef469327de2adb9eb57089ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d510781318805848ef469327de2adb9eb57089ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "html_url": "https://github.com/rust-lang/rust/commit/588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588a99bbddc0a4d1816df1c1f9fa23daeea2368d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9981e56d3b820f429fac62b4ff916f2a871340b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9981e56d3b820f429fac62b4ff916f2a871340b4", "html_url": "https://github.com/rust-lang/rust/commit/9981e56d3b820f429fac62b4ff916f2a871340b4"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "5a2c1ea214dfa71150d3758321ef4f3fcbb29c8e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/588a99bbddc0a4d1816df1c1f9fa23daeea2368d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588a99bbddc0a4d1816df1c1f9fa23daeea2368d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "patch": "@@ -861,6 +861,7 @@ fn render_assoc_item(\n     link: AssocItemLink<'_>,\n     parent: ItemType,\n     cx: &Context<'_>,\n+    render_mode: RenderMode,\n ) {\n     fn method(\n         w: &mut Buffer,\n@@ -871,6 +872,7 @@ fn render_assoc_item(\n         link: AssocItemLink<'_>,\n         parent: ItemType,\n         cx: &Context<'_>,\n+        render_mode: RenderMode,\n     ) {\n         let name = meth.name.as_ref().unwrap();\n         let href = match link {\n@@ -893,8 +895,14 @@ fn render_assoc_item(\n             }\n         };\n         let vis = meth.visibility.print_with_space(meth.def_id, cx).to_string();\n-        let constness =\n-            print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()));\n+        // FIXME: Once https://github.com/rust-lang/rust/issues/67792 is implemented, we can remove\n+        // this condition.\n+        let constness = match render_mode {\n+            RenderMode::Normal => {\n+                print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()))\n+            }\n+            RenderMode::ForDeref { .. } => \"\",\n+        };\n         let asyncness = header.asyncness.print_with_space();\n         let unsafety = header.unsafety.print_with_space();\n         let defaultness = print_default_space(meth.is_default());\n@@ -945,10 +953,10 @@ fn render_assoc_item(\n     match *item.kind {\n         clean::StrippedItem(..) => {}\n         clean::TyMethodItem(ref m) => {\n-            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx, render_mode)\n         }\n         clean::MethodItem(ref m, _) => {\n-            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent, cx, render_mode)\n         }\n         clean::AssocConstItem(ref ty, ref default) => assoc_const(\n             w,\n@@ -1415,7 +1423,7 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n-                    render_rightside(w, cx, item, containing_item);\n+                    render_rightside(w, cx, item, containing_item, render_mode);\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                     render_assoc_item(\n@@ -1424,6 +1432,7 @@ fn render_impl(\n                         link.anchor(source_id.as_ref().unwrap_or(&id)),\n                         ItemType::Impl,\n                         cx,\n+                        render_mode,\n                     );\n                     w.write_str(\"</h4>\");\n                     w.write_str(\"</div>\");\n@@ -1459,7 +1468,7 @@ fn render_impl(\n                     \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n-                render_rightside(w, cx, item, containing_item);\n+                render_rightside(w, cx, item, containing_item, render_mode);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"<h4 class=\\\"code-header\\\">\");\n                 assoc_const(\n@@ -1638,16 +1647,28 @@ fn render_rightside(\n     cx: &Context<'_>,\n     item: &clean::Item,\n     containing_item: &clean::Item,\n+    render_mode: RenderMode,\n ) {\n     let tcx = cx.tcx();\n \n+    let const_stable_since;\n+    // FIXME: Once https://github.com/rust-lang/rust/issues/67792 is implemented, we can remove\n+    // this condition.\n+    let (const_stability, const_stable_since) = match render_mode {\n+        RenderMode::Normal => {\n+            const_stable_since = containing_item.const_stable_since(tcx);\n+            (item.const_stability(tcx), const_stable_since.as_deref())\n+        }\n+        RenderMode::ForDeref { .. } => (None, None),\n+    };\n+\n     write!(w, \"<div class=\\\"rightside\\\">\");\n     render_stability_since_raw(\n         w,\n         item.stable_since(tcx).as_deref(),\n-        item.const_stability(tcx),\n+        const_stability,\n         containing_item.stable_since(tcx).as_deref(),\n-        containing_item.const_stable_since(tcx).as_deref(),\n+        const_stable_since,\n     );\n \n     write_srclink(cx, item, w);\n@@ -1683,7 +1704,7 @@ pub(crate) fn render_impl_summary(\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n     write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n-    render_rightside(w, cx, &i.impl_item, containing_item);\n+    render_rightside(w, cx, &i.impl_item, containing_item, RenderMode::Normal);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n "}, {"sha": "fc65b1d63cb05b493e1c5587156a7cd2fe47eead", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/588a99bbddc0a4d1816df1c1f9fa23daeea2368d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588a99bbddc0a4d1816df1c1f9fa23daeea2368d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=588a99bbddc0a4d1816df1c1f9fa23daeea2368d", "patch": "@@ -556,7 +556,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     );\n                 }\n                 for t in &types {\n-                    render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        t,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n                 }\n                 // If there are too many associated constants, hide everything after them\n@@ -580,7 +587,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for t in &consts {\n-                    render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        t,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n                 }\n                 if !toggle && should_hide_fields(count_methods) {\n@@ -591,7 +605,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for (pos, m) in required.iter().enumerate() {\n-                    render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        m,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     w.write_str(\";\\n\");\n \n                     if pos < required.len() - 1 {\n@@ -602,7 +623,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"\\n\");\n                 }\n                 for (pos, m) in provided.iter().enumerate() {\n-                    render_assoc_item(w, m, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n+                    render_assoc_item(\n+                        w,\n+                        m,\n+                        AssocItemLink::Anchor(None),\n+                        ItemType::Trait,\n+                        cx,\n+                        RenderMode::Normal,\n+                    );\n                     match *m.kind {\n                         clean::MethodItem(ref inner, _)\n                             if !inner.generics.where_predicates.is_empty() =>\n@@ -655,7 +683,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         write_srclink(cx, m, w);\n         write!(w, \"</div>\");\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n-        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n+        render_assoc_item(\n+            w,\n+            m,\n+            AssocItemLink::Anchor(Some(&id)),\n+            ItemType::Impl,\n+            cx,\n+            RenderMode::Normal,\n+        );\n         w.write_str(\"</h4>\");\n         w.write_str(\"</div>\");\n         if toggled {"}]}