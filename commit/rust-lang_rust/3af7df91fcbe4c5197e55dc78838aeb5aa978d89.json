{"sha": "3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "node_id": "C_kwDOAAsO6NoAKDNhZjdkZjkxZmNiZTRjNTE5N2U1NWRjNzg4MzhhZWI1YWE5NzhkODk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T15:17:46Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T15:17:46Z"}, "message": "use &str / String literals instead of format!()", "tree": {"sha": "7f5c77c2f156c2c26978c21e1cf66c194a88d9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5c77c2f156c2c26978c21e1cf66c194a88d9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "html_url": "https://github.com/rust-lang/rust/commit/3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 92, "additions": 37, "deletions": 55}, "files": [{"sha": "8d5c5a7124f88aeee0e472d5557d80b74cbea1ad", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -649,7 +649,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if !assign_value.is_empty() {\n             err.span_suggestion_verbose(\n                 sugg_span.shrink_to_hi(),\n-                format!(\"consider assigning a value\"),\n+                \"consider assigning a value\",\n                 format!(\" = {}\", assign_value),\n                 Applicability::MaybeIncorrect,\n             );"}, {"sha": "00f5e8a83972f9c6456c51635867e2a7bfa59227", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 for extra in extra_info {\n                     match extra {\n                         ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n-                            err.span_note(*span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n+                            err.span_note(*span, \"due to current limitations in the borrow checker, this implies a `'static` lifetime\");\n                         }\n                     }\n                 }"}, {"sha": "b5a0044e9e8cd5512cd9a6041d344a5f515f8bd9", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         for extra in extra_info {\n             match extra {\n                 ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n-                    diag.span_note(span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n+                    diag.span_note(span, \"due to current limitations in the borrow checker, this implies a `'static` lifetime\");\n                 }\n             }\n         }"}, {"sha": "606f710641fc0e25a17fd6f2b598058328a1e6b4", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -144,7 +144,7 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     // We prefer the latter because it matches the behavior of\n                     // Clang.\n                     if late && matches!(reg, InlineAsmRegOrRegClass::Reg(_)) {\n-                        constraints.push(format!(\"{}\", reg_to_llvm(reg, Some(&in_value.layout))));\n+                        constraints.push(reg_to_llvm(reg, Some(&in_value.layout)).to_string());\n                     } else {\n                         constraints.push(format!(\"{}\", op_idx[&idx]));\n                     }"}, {"sha": "e4c16ef9efa19f397ea0e7ea169a038af4bdef76", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -2240,7 +2240,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ),\n                     \"s\",\n                 ),\n-                [only] => (format!(\"{only}\"), \"\"),\n+                [only] => (only.to_string(), \"\"),\n                 [] => unreachable!(),\n             };\n             let last_span = *arg_spans.last().unwrap();"}, {"sha": "f02db43f73af6142d4dbead2b24045f01d35622f", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n \n                     let note_about_variant_field_privacy = (field_is_local && !field_is_accessible)\n-                        .then(|| format!(\" (its field is private, but it's local to this crate and its privacy can be changed)\"));\n+                        .then(|| \" (its field is private, but it's local to this crate and its privacy can be changed)\".to_string());\n \n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {"}, {"sha": "240044fe92d28b9bc01c3065fbebb93a1b333318", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             } else {\n                                 args_span\n                             };\n-                            labels.push((span, format!(\"multiple arguments are missing\")));\n+                            labels.push((span, \"multiple arguments are missing\".to_string()));\n                             suggestion_text = match suggestion_text {\n                                 SuggestionText::None | SuggestionText::Provide(_) => {\n                                     SuggestionText::Provide(true)"}, {"sha": "59c9d219d33d3b361e334faa5f0b573c0531d013", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -319,11 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            err.multipart_suggestion_verbose(\n-                format!(\"use parentheses to call these\"),\n-                sugg,\n-                applicability,\n-            );\n+            err.multipart_suggestion_verbose(\"use parentheses to call these\", sugg, applicability);\n \n             true\n         } else {"}, {"sha": "7c5a9a333feba56da059e18d4b90b1cf1563db56", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if def_kind == DefKind::AssocFn && lev_candidate.fn_has_self_parameter {\n                             err.span_suggestion(\n                                 span,\n-                                &format!(\"there is a method with a similar name\",),\n+                                \"there is a method with a similar name\",\n                                 lev_candidate.name,\n                                 Applicability::MaybeIncorrect,\n                             );"}, {"sha": "269fc95420adef2dda18ea8e0ffd0051b7d393d6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -184,7 +184,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n             let text = if br.has_name() {\n                 format!(\"the lifetime `{}` as defined here\", br.name)\n             } else {\n-                format!(\"the anonymous lifetime as defined here\")\n+                \"the anonymous lifetime as defined here\".to_string()\n             };\n             (text, sp)\n         }\n@@ -203,7 +203,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n                             sp = param.span;\n                         }\n                         let text = if name == kw::UnderscoreLifetime {\n-                            format!(\"the anonymous lifetime as defined here\")\n+                            \"the anonymous lifetime as defined here\".to_string()\n                         } else {\n                             format!(\"the lifetime `{}` as defined here\", name)\n                         };"}, {"sha": "9534bce54ef0e7217fff7b76ba8337eb886093dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                         );\n                     }\n                     (Some(sub_span), Some(sup_span), _, Some(sup_symbol)) => {\n-                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n+                        err.span_note(sub_span, \"the lifetime defined here...\");\n                         err.span_note(\n                             sup_span,\n                             format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n@@ -55,17 +55,11 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                             sub_span,\n                             format!(\"the lifetime `{sub_symbol}` defined here...\"),\n                         );\n-                        err.span_note(\n-                            sup_span,\n-                            format!(\"...must outlive the lifetime defined here\"),\n-                        );\n+                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n                     }\n                     (Some(sub_span), Some(sup_span), _, _) => {\n-                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n-                        err.span_note(\n-                            sup_span,\n-                            format!(\"...must outlive the lifetime defined here\"),\n-                        );\n+                        err.span_note(sub_span, \"the lifetime defined here...\");\n+                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n                     }\n                     _ => {}\n                 }"}, {"sha": "182734fa9fc8fc72970117c5c32e7746de87e62e", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -71,11 +71,11 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n                 );\n             } else {\n                 lint.multipart_suggestion_verbose(\n-                    format!(\"to check pattern in a loop use `while let`\"),\n+                    \"to check pattern in a loop use `while let`\",\n                     vec![\n                         // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n                         (expr.span.with_hi(pat.span.lo()), format!(\"while let {var}(\")),\n-                        (pat.span.between(arg.span), format!(\") = \")),\n+                        (pat.span.between(arg.span), \") = \".to_string()),\n                     ],\n                     Applicability::MaybeIncorrect\n                 );\n@@ -95,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n                 vec![\n                     // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n                     (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n-                    (pat.span.between(arg.span), format!(\") = \")),\n+                    (pat.span.between(arg.span), \") = \".to_string()),\n                 ],\n                 Applicability::MaybeIncorrect,\n             )"}, {"sha": "9ff944864047753173598cdbe56778f022e2e919", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -39,10 +39,8 @@ impl<'a> DiagnosticDerive<'a> {\n             let init = match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(format!(\n-                            \"specify the slug as the first argument to the `#[diag(...)]` \\\n-                            attribute, such as `#[diag(hir_analysis_example_error)]`\",\n-                        ))\n+                        .help(\"specify the slug as the first argument to the `#[diag(...)]` \\\n+                            attribute, such as `#[diag(hir_analysis_example_error)]`\")\n                         .emit();\n                     return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                 }\n@@ -133,10 +131,8 @@ impl<'a> LintDiagnosticDerive<'a> {\n             match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(format!(\n-                            \"specify the slug as the first argument to the attribute, such as \\\n-                            `#[diag(compiletest_example)]`\",\n-                        ))\n+                        .help(\"specify the slug as the first argument to the attribute, such as \\\n+                            `#[diag(compiletest_example)]`\")\n                         .emit();\n                     DiagnosticDeriveError::ErrorHandled.to_compile_error()\n                 }"}, {"sha": "1ebfdbbd6ef000b61ba2f04c191247b10f7999e7", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -448,15 +448,15 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n \n             // FIXME: this is a poor version of `pretty_print_const_value`.\n             let fmt_val = |val: &ConstValue<'tcx>| match val {\n-                ConstValue::ZeroSized => format!(\"<ZST>\"),\n+                ConstValue::ZeroSized => \"<ZST>\".to_string(),\n                 ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n-                ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n-                ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n+                ConstValue::Slice { .. } => \"Slice(..)\".to_string(),\n+                ConstValue::ByRef { .. } => \"ByRef(..)\".to_string(),\n             };\n \n             let fmt_valtree = |valtree: &ty::ValTree<'tcx>| match valtree {\n                 ty::ValTree::Leaf(leaf) => format!(\"ValTree::Leaf({:?})\", leaf),\n-                ty::ValTree::Branch(_) => format!(\"ValTree::Branch(..)\"),\n+                ty::ValTree::Branch(_) => \"ValTree::Branch(..)\".to_string(),\n             };\n \n             let val = match literal {"}, {"sha": "7c39a93a8eb9e4b90c97a482c9c4849ed4d1608a", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -76,7 +76,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         let Some((otherwise, rest)) = arms.split_last() else {\n             return Err(ParseError {\n                 span,\n-                item_description: format!(\"no arms\"),\n+                item_description: \"no arms\".to_string(),\n                 expected: \"at least one arm\".to_string(),\n             })\n         };"}, {"sha": "600308b6508db9931c3b6974acf48493421d8bfc", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -277,11 +277,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 let override_suggestion =\n                     if [\"true\", \"false\"].contains(&item_str.to_string().to_lowercase().as_str()) {\n                         let item_typo = item_str.to_string().to_lowercase();\n-                        Some((\n-                            item_span,\n-                            \"you may want to use a bool value instead\",\n-                            format!(\"{}\", item_typo),\n-                        ))\n+                        Some((item_span, \"you may want to use a bool value instead\", item_typo))\n                     // FIXME(vincenzopalazzo): make the check smarter,\n                     // and maybe expand with levenshtein distance checks\n                     } else if item_str.as_str() == \"printf\" {\n@@ -2324,7 +2320,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         let message = format!(\"consider introducing lifetime `{}` here\", name);\n                         should_continue = suggest(err, false, span, &message, sugg);\n                     } else {\n-                        let message = format!(\"consider introducing a named lifetime parameter\");\n+                        let message = \"consider introducing a named lifetime parameter\";\n                         should_continue = suggest(err, false, span, &message, sugg);\n                     }\n                 }"}, {"sha": "f8efe9bfa9f827b3d98c2544ebb544d73849e339", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -138,10 +138,10 @@ pub fn is_const_evaluatable<'tcx>(\n                 } else if uv.has_non_region_param() {\n                     NotConstEvaluatable::MentionsParam\n                 } else {\n-                    let guar = infcx.tcx.sess.delay_span_bug(\n-                        span,\n-                        format!(\"Missing value for constant, but no error reported?\"),\n-                    );\n+                    let guar = infcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(span, \"Missing value for constant, but no error reported?\");\n                     NotConstEvaluatable::Error(guar)\n                 };\n "}, {"sha": "11eac0528134f79a41fd4c9a346d4ea214c0b8ae", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -2332,9 +2332,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // get rid of :: between Trait and <type>\n                                 // must be '::' between them, otherwise the parser won't accept the code\n                                 suggestions.push((between_span, \"\".to_string(),));\n-                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), format!(\">\")));\n+                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), \">\".to_string()));\n                             } else {\n-                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), format!(\">\")));\n+                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), \">\".to_string()));\n                             }\n                             err.multipart_suggestion(\n                                 message,"}, {"sha": "5a4c87c56d5da382f863f4dd2b8f684509004c01", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af7df91fcbe4c5197e55dc78838aeb5aa978d89/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3af7df91fcbe4c5197e55dc78838aeb5aa978d89", "patch": "@@ -2740,7 +2740,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             }\n                             ty::Closure(def_id, _) => err.span_note(\n                                 self.tcx.def_span(def_id),\n-                                &format!(\"required because it's used within this closure\"),\n+                                \"required because it's used within this closure\",\n                             ),\n                             _ => err.note(&msg),\n                         };\n@@ -3386,7 +3386,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             err.span_note(\n                 multi_span,\n-                format!(\"the method call chain might not have had the expected associated types\"),\n+                \"the method call chain might not have had the expected associated types\",\n             );\n         }\n     }"}]}