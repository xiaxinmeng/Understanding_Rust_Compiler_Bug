{"sha": "0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "node_id": "C_kwDOAAsO6NoAKDAwMDMyODBiOWI0ZWY1M2UxMWI4OWVmNjlkMGEyYzRmZmM3MjU0NTk", "commit": {"author": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-12-11T14:42:25Z"}, "committer": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-12-19T10:52:33Z"}, "message": "Fix an ICE when lowering a float with missing exponent magnitude\n\nCo-authored-by: Simonas Kazlauskas <github@kazlauskas.me>", "tree": {"sha": "8376e03e4d816da40a605bac4c8644a466d5057a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8376e03e4d816da40a605bac4c8644a466d5057a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "html_url": "https://github.com/rust-lang/rust/commit/0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/comments", "author": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af5c6562deed1878000e791f2cb21b981a53959", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af5c6562deed1878000e791f2cb21b981a53959", "html_url": "https://github.com/rust-lang/rust/commit/2af5c6562deed1878000e791f2cb21b981a53959"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "9b54db0d7de86534a4fe8c12e3072b97d8c54a90", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "patch": "@@ -46,7 +46,9 @@ crate fn lit_to_const<'tcx>(\n         (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n             trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n         }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => parse_float(*n, *fty, neg),\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n+            parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n+        }\n         (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n         (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n         (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n@@ -55,14 +57,15 @@ crate fn lit_to_const<'tcx>(\n     Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n-fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tcx> {\n+fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> Option<ConstValue<'tcx>> {\n     let num = num.as_str();\n     use rustc_apfloat::ieee::{Double, Single};\n     let scalar = match fty {\n         ty::FloatTy::F32 => {\n-            let rust_f = num\n-                .parse::<f32>()\n-                .unwrap_or_else(|e| panic!(\"f32 failed to parse `{}`: {:?}\", num, e));\n+            let rust_f = match num.parse::<f32>() {\n+                Ok(f) => f,\n+                Err(_) => return None,\n+            };\n             let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n             });\n@@ -82,9 +85,10 @@ fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tc\n             Scalar::from_f32(f)\n         }\n         ty::FloatTy::F64 => {\n-            let rust_f = num\n-                .parse::<f64>()\n-                .unwrap_or_else(|e| panic!(\"f64 failed to parse `{}`: {:?}\", num, e));\n+            let rust_f = match num.parse::<f64>() {\n+                Ok(f) => f,\n+                Err(_) => return None,\n+            };\n             let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n             });\n@@ -105,5 +109,5 @@ fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> ConstValue<'tc\n         }\n     };\n \n-    ConstValue::Scalar(scalar)\n+    Some(ConstValue::Scalar(scalar))\n }"}, {"sha": "fc7731291b371a33906f3d56b03adad01a989a24", "filename": "src/test/ui/consts/issue-91434.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.rs?ref=0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    [9; [[9E; h]]];\n+    //~^ ERROR: expected at least one digit in exponent\n+    //~| ERROR: cannot find value `h` in this scope [E0425]\n+    //~| ERROR: constant expression depends on a generic parameter\n+}"}, {"sha": "9d3fe5f201656be94c13f8fc2f50415d3876b2c8", "filename": "src/test/ui/consts/issue-91434.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0003280b9b4ef53e11b89ef69d0a2c4ffc725459/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91434.stderr?ref=0003280b9b4ef53e11b89ef69d0a2c4ffc725459", "patch": "@@ -0,0 +1,23 @@\n+error: expected at least one digit in exponent\n+  --> $DIR/issue-91434.rs:2:11\n+   |\n+LL |     [9; [[9E; h]]];\n+   |           ^^\n+\n+error[E0425]: cannot find value `h` in this scope\n+  --> $DIR/issue-91434.rs:2:15\n+   |\n+LL |     [9; [[9E; h]]];\n+   |               ^ not found in this scope\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-91434.rs:2:9\n+   |\n+LL |     [9; [[9E; h]]];\n+   |         ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}