{"sha": "9b0fc6202bf295e2518f7a781ca069c71c81698f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMGZjNjIwMmJmMjk1ZTI1MThmN2E3ODFjYTA2OWM3MWM4MTY5OGY=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-03T17:48:27Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-06T09:51:44Z"}, "message": "Generalize to Eq(true, _place) and Eq(_place, true)", "tree": {"sha": "97ff92407b32d7742abe621f8f4d9749eeb3b75d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ff92407b32d7742abe621f8f4d9749eeb3b75d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0fc6202bf295e2518f7a781ca069c71c81698f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0fc6202bf295e2518f7a781ca069c71c81698f", "html_url": "https://github.com/rust-lang/rust/commit/9b0fc6202bf295e2518f7a781ca069c71c81698f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0fc6202bf295e2518f7a781ca069c71c81698f/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2693db264900005ceb13f917dc1fab0cbf8d459", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2693db264900005ceb13f917dc1fab0cbf8d459", "html_url": "https://github.com/rust-lang/rust/commit/c2693db264900005ceb13f917dc1fab0cbf8d459"}], "stats": {"total": 89, "additions": 74, "deletions": 15}, "files": [{"sha": "c4924cf16ab647e0249dcc58297915a9edddb3d7", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9b0fc6202bf295e2518f7a781ca069c71c81698f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0fc6202bf295e2518f7a781ca069c71c81698f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=9b0fc6202bf295e2518f7a781ca069c71c81698f", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n             *rvalue = Rvalue::Use(Operand::Constant(box constant));\n         }\n \n-        if let Some(operand) = self.optimizations.unneeded_not_equal.remove(&location) {\n+        if let Some(operand) = self.optimizations.unneeded_equality_comparison.remove(&location) {\n             debug!(\"replacing {:?} with {:?}\", rvalue, operand);\n             *rvalue = Rvalue::Use(operand);\n         }\n@@ -87,14 +87,39 @@ impl OptimizationFinder<'b, 'tcx> {\n         OptimizationFinder { body, tcx, optimizations: OptimizationList::default() }\n     }\n \n-    fn find_operand_in_ne_false_pattern(\n+    fn find_unneeded_equality_comparison(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        // find Ne(_place, false) or Ne(false, _place)\n+        // or   Eq(_place, true) or Eq(true, _place)\n+        if let Rvalue::BinaryOp(op, l, r) = rvalue {\n+            let const_to_find = if *op == BinOp::Ne {\n+                false\n+            } else if *op == BinOp::Eq {\n+                true\n+            } else {\n+                return;\n+            };\n+            // (const, _place)\n+            if let Some(o) = self.find_operand_in_equality_comparison_pattern(l, r, const_to_find) {\n+                self.optimizations.unneeded_equality_comparison.insert(location, o.clone());\n+            }\n+            // (_place, const)\n+            else if let Some(o) =\n+                self.find_operand_in_equality_comparison_pattern(r, l, const_to_find)\n+            {\n+                self.optimizations.unneeded_equality_comparison.insert(location, o.clone());\n+            }\n+        }\n+    }\n+\n+    fn find_operand_in_equality_comparison_pattern(\n         &self,\n         l: &Operand<'tcx>,\n         r: &'a Operand<'tcx>,\n+        const_to_find: bool,\n     ) -> Option<&'a Operand<'tcx>> {\n         let const_ = l.constant()?;\n         if const_.literal.ty == self.tcx.types.bool\n-            && const_.literal.val.try_to_bool() == Some(false)\n+            && const_.literal.val.try_to_bool() == Some(const_to_find)\n         {\n             if r.place().is_some() {\n                 return Some(r);\n@@ -128,17 +153,7 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             }\n         }\n \n-        // find Ne(_place, false) or Ne(false, _place)\n-        if let Rvalue::BinaryOp(BinOp::Ne, l, r) = rvalue {\n-            // (false, _place)\n-            if let Some(o) = self.find_operand_in_ne_false_pattern(l, r) {\n-                self.optimizations.unneeded_not_equal.insert(location, o.clone());\n-            }\n-            // (_place, false)\n-            else if let Some(o) = self.find_operand_in_ne_false_pattern(r, l) {\n-                self.optimizations.unneeded_not_equal.insert(location, o.clone());\n-            }\n-        }\n+        self.find_unneeded_equality_comparison(rvalue, location);\n \n         self.super_rvalue(rvalue, location)\n     }\n@@ -148,5 +163,5 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n struct OptimizationList<'tcx> {\n     and_stars: FxHashSet<Location>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n-    unneeded_not_equal: FxHashMap<Location, Operand<'tcx>>,\n+    unneeded_equality_comparison: FxHashMap<Location, Operand<'tcx>>,\n }"}, {"sha": "a26776e70d6b9dc3bc26168450266cbcff381500", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9b0fc6202bf295e2518f7a781ca069c71c81698f/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9b0fc6202bf295e2518f7a781ca069c71c81698f/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=9b0fc6202bf295e2518f7a781ca069c71c81698f", "patch": "@@ -0,0 +1,35 @@\n+- // MIR for `opt` before InstCombine\n++ // MIR for `opt` after InstCombine\n+  \n+  fn opt(_1: bool) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/equal_true.rs:3:8: 3:9\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/equal_true.rs:3:20: 3:23\n+      let mut _2: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:17\n+      let mut _3: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:9\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageLive(_3);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n+          _3 = _1;                         // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n+-         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n++         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:4:16: 4:17\n+          switchInt(_2) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:4:31: 4:32\n+          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21\n+          goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/equal_true.rs:5:1: 5:2\n+          return;                          // scope 0 at $DIR/equal_true.rs:5:2: 5:2\n+      }\n+  }\n+  "}, {"sha": "994cd194a45e259934639a94135a8c88b9af9100", "filename": "src/test/mir-opt/equal_true.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b0fc6202bf295e2518f7a781ca069c71c81698f/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0fc6202bf295e2518f7a781ca069c71c81698f/src%2Ftest%2Fmir-opt%2Fequal_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.rs?ref=9b0fc6202bf295e2518f7a781ca069c71c81698f", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR equal_true.opt.InstCombine.diff\n+\n+fn opt(x: bool) -> i32 {\n+    if x == true { 0 } else { 1 }\n+}\n+\n+fn main() {\n+    opt(true);\n+}"}]}