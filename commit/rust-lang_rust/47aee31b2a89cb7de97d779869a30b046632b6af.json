{"sha": "47aee31b2a89cb7de97d779869a30b046632b6af", "node_id": "C_kwDOAAsO6NoAKDQ3YWVlMzFiMmE4OWNiN2RlOTdkNzc5ODY5YTMwYjA0NjYzMmI2YWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T00:26:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T00:26:37Z"}, "message": "Auto merge of #97849 - matthiaskrgr:rollup-1yodhvw, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97829 (Add regresion test for #95307)\n - #97831 (Remove `AlwaysLiveLocals` wrapper struct)\n - #97832 (Change `Direction::{is_forward,is_backward}` functions into constants)\n - #97840 (RustWrapper: adapt to APInt API changes in LLVM 15)\n - #97845 (Use more targeted suggestion when confusing i8 with std::i8)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "465b27c8fd03e46261efc3f0cda426e23b2f7810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465b27c8fd03e46261efc3f0cda426e23b2f7810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47aee31b2a89cb7de97d779869a30b046632b6af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47aee31b2a89cb7de97d779869a30b046632b6af", "html_url": "https://github.com/rust-lang/rust/commit/47aee31b2a89cb7de97d779869a30b046632b6af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47aee31b2a89cb7de97d779869a30b046632b6af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "html_url": "https://github.com/rust-lang/rust/commit/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f"}, {"sha": "c2d84852e5a5e6869acbeaab8a4794e792ad9334", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d84852e5a5e6869acbeaab8a4794e792ad9334", "html_url": "https://github.com/rust-lang/rust/commit/c2d84852e5a5e6869acbeaab8a4794e792ad9334"}], "stats": {"total": 193, "additions": 107, "deletions": 86}, "files": [{"sha": "4c23f84bd0075aa30f53150df2fbb5a3b44a12ef", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::storage::always_live_locals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n@@ -715,7 +715,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Now mark those locals as dead that we do not want to initialize\n         // Mark locals that use `Storage*` annotations as dead on function entry.\n-        let always_live = AlwaysLiveLocals::new(self.body());\n+        let always_live = always_live_locals(self.body());\n         for local in locals.indices() {\n             if !always_live.contains(local) {\n                 locals[local].value = LocalValue::Dead;"}, {"sha": "3f54d8642970c05c3afb918cb54fdc51fa4964ae", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n-use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::storage::always_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::{Size, VariantIdx};\n \n@@ -48,7 +48,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n         let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n \n-        let always_live_locals = AlwaysLiveLocals::new(body);\n+        let always_live_locals = always_live_locals(body);\n         let storage_liveness = MaybeStorageLive::new(always_live_locals)\n             .into_engine(tcx, body)\n             .iterate_to_fixpoint()"}, {"sha": "f90bb7f236868a44c0136ec6820a8d849c4b6848", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -1542,11 +1542,19 @@ extern \"C\" bool LLVMRustConstInt128Get(LLVMValueRef CV, bool sext, uint64_t *hig\n     auto C = unwrap<llvm::ConstantInt>(CV);\n     if (C->getBitWidth() > 128) { return false; }\n     APInt AP;\n+#if LLVM_VERSION_GE(15, 0)\n+    if (sext) {\n+        AP = C->getValue().sext(128);\n+    } else {\n+        AP = C->getValue().zext(128);\n+    }\n+#else\n     if (sext) {\n         AP = C->getValue().sextOrSelf(128);\n     } else {\n         AP = C->getValue().zextOrSelf(128);\n     }\n+#endif\n     *low = AP.getLoBits(64).getZExtValue();\n     *high = AP.getHiBits(64).getZExtValue();\n     return true;"}, {"sha": "f3b5544aa8b9d4bc35710723d703c0461f076f83", "filename": "compiler/rustc_mir_dataflow/src/framework/cursor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -109,7 +109,7 @@ where\n     /// For backward analyses, this is the state that will be propagated to its\n     /// predecessors (ignoring edge-specific effects).\n     pub fn seek_to_block_start(&mut self, block: BasicBlock) {\n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             self.seek_to_block_entry(block)\n         } else {\n             self.seek_after(Location { block, statement_index: 0 }, Effect::Primary)\n@@ -123,7 +123,7 @@ where\n     /// For forward analyses, this is the state that will be propagated to its\n     /// successors (ignoring edge-specific effects).\n     pub fn seek_to_block_end(&mut self, block: BasicBlock) {\n-        if A::Direction::is_backward() {\n+        if A::Direction::IS_BACKWARD {\n             self.seek_to_block_entry(block)\n         } else {\n             self.seek_after(self.body.terminator_loc(block), Effect::Primary)\n@@ -157,7 +157,7 @@ where\n             self.seek_to_block_entry(target.block);\n         } else if let Some(curr_effect) = self.pos.curr_effect_index {\n             let mut ord = curr_effect.statement_index.cmp(&target.statement_index);\n-            if A::Direction::is_backward() {\n+            if A::Direction::IS_BACKWARD {\n                 ord = ord.reverse()\n             }\n \n@@ -173,7 +173,7 @@ where\n         debug_assert_eq!(target.block, self.pos.block);\n \n         let block_data = &self.body[target.block];\n-        let next_effect = if A::Direction::is_forward() {\n+        let next_effect = if A::Direction::IS_FORWARD {\n             #[rustfmt::skip]\n             self.pos.curr_effect_index.map_or_else(\n                 || Effect::Before.at_index(0),"}, {"sha": "05a4d7bbf3e6fc692221a69be5e1bd14d304d8b2", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -9,11 +9,9 @@ use super::{\n };\n \n pub trait Direction {\n-    fn is_forward() -> bool;\n+    const IS_FORWARD: bool;\n \n-    fn is_backward() -> bool {\n-        !Self::is_forward()\n-    }\n+    const IS_BACKWARD: bool = !Self::IS_FORWARD;\n \n     /// Applies all effects between the given `EffectIndex`s.\n     ///\n@@ -68,9 +66,7 @@ pub trait Direction {\n pub struct Backward;\n \n impl Direction for Backward {\n-    fn is_forward() -> bool {\n-        false\n-    }\n+    const IS_FORWARD: bool = false;\n \n     fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n@@ -338,9 +334,7 @@ where\n pub struct Forward;\n \n impl Direction for Forward {\n-    fn is_forward() -> bool {\n-        true\n-    }\n+    const IS_FORWARD: bool = true;\n \n     fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,"}, {"sha": "20e14a77c1e57b466705df31910a77a1c8faf29b", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -147,7 +147,7 @@ where\n         let mut entry_sets = IndexVec::from_elem(bottom_value.clone(), body.basic_blocks());\n         analysis.initialize_start_block(body, &mut entry_sets[mir::START_BLOCK]);\n \n-        if A::Direction::is_backward() && entry_sets[mir::START_BLOCK] != bottom_value {\n+        if A::Direction::IS_BACKWARD && entry_sets[mir::START_BLOCK] != bottom_value {\n             bug!(\"`initialize_start_block` is not yet supported for backward dataflow analyses\");\n         }\n \n@@ -200,7 +200,7 @@ where\n         let mut dirty_queue: WorkQueue<BasicBlock> =\n             WorkQueue::with_none(body.basic_blocks().len());\n \n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             for (bb, _) in traversal::reverse_postorder(body) {\n                 dirty_queue.insert(bb);\n             }"}, {"sha": "59a2053ec7000879631a47939a99ae74b8edce7d", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -216,7 +216,7 @@ where\n         // Write the full dataflow state immediately after the terminator if it differs from the\n         // state at block entry.\n         self.results.seek_to_block_end(block);\n-        if self.results.get() != &block_start_state || A::Direction::is_backward() {\n+        if self.results.get() != &block_start_state || A::Direction::IS_BACKWARD {\n             let after_terminator_name = match terminator.kind {\n                 mir::TerminatorKind::Call { target: Some(_), .. } => \"(on unwind)\",\n                 _ => \"(on end)\",\n@@ -390,7 +390,7 @@ where\n         let mut afters = diffs.after.into_iter();\n \n         let next_in_dataflow_order = |it: &mut std::vec::IntoIter<_>| {\n-            if A::Direction::is_forward() { it.next().unwrap() } else { it.next_back().unwrap() }\n+            if A::Direction::IS_FORWARD { it.next().unwrap() } else { it.next_back().unwrap() }\n         };\n \n         for (i, statement) in body[block].statements.iter().enumerate() {\n@@ -527,7 +527,7 @@ where\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n-        if A::Direction::is_forward() {\n+        if A::Direction::IS_FORWARD {\n             self.prev_state.clone_from(state);\n         }\n     }\n@@ -538,7 +538,7 @@ where\n         _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n-        if A::Direction::is_backward() {\n+        if A::Direction::IS_BACKWARD {\n             self.prev_state.clone_from(state);\n         }\n     }"}, {"sha": "d9461fd3abd8164cbdb78e991ecc0f9ba7cdb477", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -140,7 +140,7 @@ impl<D: Direction> MockAnalysis<'_, D> {\n             SeekTarget::After(loc) => Effect::Primary.at_index(loc.statement_index),\n         };\n \n-        let mut pos = if D::is_forward() {\n+        let mut pos = if D::IS_FORWARD {\n             Effect::Before.at_index(0)\n         } else {\n             Effect::Before.at_index(self.body[block].statements.len())\n@@ -153,7 +153,7 @@ impl<D: Direction> MockAnalysis<'_, D> {\n                 return ret;\n             }\n \n-            if D::is_forward() {\n+            if D::IS_FORWARD {\n                 pos = pos.next_in_forward_order();\n             } else {\n                 pos = pos.next_in_backward_order();"}, {"sha": "33d294181472931b760f91473eec1e5f1f82a709", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -1,18 +1,17 @@\n pub use super::*;\n \n-use crate::storage::AlwaysLiveLocals;\n use crate::{CallReturnPlaces, GenKill, Results, ResultsRefCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::cell::RefCell;\n \n #[derive(Clone)]\n pub struct MaybeStorageLive {\n-    always_live_locals: AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n }\n \n impl MaybeStorageLive {\n-    pub fn new(always_live_locals: AlwaysLiveLocals) -> Self {\n+    pub fn new(always_live_locals: BitSet<Local>) -> Self {\n         MaybeStorageLive { always_live_locals }\n     }\n }"}, {"sha": "4a354c4c65b08430964665479d3bec6fc73e0ffb", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -7,35 +7,17 @@ use rustc_middle::mir::{self, Local};\n //\n // FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n // as a field in the `LocalDecl` for each `Local`.\n-#[derive(Debug, Clone)]\n-pub struct AlwaysLiveLocals(BitSet<Local>);\n+pub fn always_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n+    let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n \n-impl AlwaysLiveLocals {\n-    pub fn new(body: &mir::Body<'_>) -> Self {\n-        let mut always_live_locals = AlwaysLiveLocals(BitSet::new_filled(body.local_decls.len()));\n-\n-        for block in body.basic_blocks() {\n-            for statement in &block.statements {\n-                use mir::StatementKind::{StorageDead, StorageLive};\n-                if let StorageLive(l) | StorageDead(l) = statement.kind {\n-                    always_live_locals.0.remove(l);\n-                }\n+    for block in body.basic_blocks() {\n+        for statement in &block.statements {\n+            use mir::StatementKind::{StorageDead, StorageLive};\n+            if let StorageLive(l) | StorageDead(l) = statement.kind {\n+                always_live_locals.remove(l);\n             }\n         }\n-\n-        always_live_locals\n     }\n \n-    pub fn into_inner(self) -> BitSet<Local> {\n-        self.0\n-    }\n-}\n-\n-impl std::ops::Deref for AlwaysLiveLocals {\n-    type Target = BitSet<Local>;\n-\n-    #[inline]\n-    fn deref(&self) -> &Self::Target {\n-        &self.0\n-    }\n+    always_live_locals\n }"}, {"sha": "89895fddd0cfabd8f6cf1847e4968f7ff5fca872", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -228,7 +228,7 @@ struct TransformVisitor<'tcx> {\n     suspension_points: Vec<SuspensionPoint<'tcx>>,\n \n     // The set of locals that have no `StorageLive`/`StorageDead` annotations.\n-    always_live_locals: storage::AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n \n     // The original RETURN_PLACE local\n     new_ret_local: Local,\n@@ -450,7 +450,7 @@ struct LivenessInfo {\n fn locals_live_across_suspend_points<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n-    always_live_locals: &storage::AlwaysLiveLocals,\n+    always_live_locals: &BitSet<Local>,\n     movable: bool,\n ) -> LivenessInfo {\n     let body_ref: &Body<'_> = &body;\n@@ -615,7 +615,7 @@ impl ops::Deref for GeneratorSavedLocals {\n fn compute_storage_conflicts<'mir, 'tcx>(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n-    always_live_locals: storage::AlwaysLiveLocals,\n+    always_live_locals: BitSet<Local>,\n     requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), saved_locals.domain_size());\n@@ -625,7 +625,7 @@ fn compute_storage_conflicts<'mir, 'tcx>(\n \n     // Locals that are always live or ones that need to be stored across\n     // suspension points are not eligible for overlap.\n-    let mut ineligible_locals = always_live_locals.into_inner();\n+    let mut ineligible_locals = always_live_locals;\n     ineligible_locals.intersect(&**saved_locals);\n \n     // Compute the storage conflicts for all eligible locals.\n@@ -1300,7 +1300,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             },\n         );\n \n-        let always_live_locals = storage::AlwaysLiveLocals::new(&body);\n+        let always_live_locals = storage::always_live_locals(&body);\n \n         let liveness_info =\n             locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);"}, {"sha": "b9f49c19465d5b14027835550cfc1511b56b810f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -1577,18 +1577,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         name: Symbol,\n     ) -> ErrorGuaranteed {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n-        if let (true, Ok(snippet)) = (\n-            self.tcx()\n-                .resolutions(())\n-                .confused_type_with_std_module\n-                .keys()\n-                .any(|full_span| full_span.contains(span)),\n-            self.tcx().sess.source_map().span_to_snippet(span),\n-        ) {\n+        if self\n+            .tcx()\n+            .resolutions(())\n+            .confused_type_with_std_module\n+            .keys()\n+            .any(|full_span| full_span.contains(span))\n+        {\n             err.span_suggestion(\n-                span,\n+                span.shrink_to_lo(),\n                 \"you are looking for the module in `std`, not the primitive type\",\n-                format!(\"std::{}\", snippet),\n+                \"std::\".to_string(),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "4071c389266d3b1cfcb2bd8d0965e118eeadad65", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -327,26 +327,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n                 if let Some(span) = tcx.resolutions(()).confused_type_with_std_module.get(&span) {\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*span) {\n-                        err.span_suggestion(\n-                            *span,\n-                            \"you are looking for the module in `std`, \\\n-                                     not the primitive type\",\n-                            format!(\"std::{}\", snippet),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n+                    err.span_suggestion(\n+                        span.shrink_to_lo(),\n+                        \"you are looking for the module in `std`, not the primitive type\",\n+                        \"std::\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n                 if let ty::RawPtr(_) = &actual.kind() {\n                     err.note(\n                         \"try using `<*const T>::as_ref()` to get a reference to the \\\n-                                      type behind the pointer: https://doc.rust-lang.org/std/\\\n-                                      primitive.pointer.html#method.as_ref\",\n+                         type behind the pointer: https://doc.rust-lang.org/std/\\\n+                         primitive.pointer.html#method.as_ref\",\n                     );\n                     err.note(\n-                        \"using `<*const T>::as_ref()` on a pointer \\\n-                                      which is unaligned or points to invalid \\\n-                                      or uninitialized memory is undefined behavior\",\n+                        \"using `<*const T>::as_ref()` on a pointer which is unaligned or points \\\n+                         to invalid or uninitialized memory is undefined behavior\",\n                     );\n                 }\n "}, {"sha": "f7e48070ccde6f948e8a52c6a5f3823b8f29faaf", "filename": "src/test/ui/async-await/issues/issue-95307.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.rs?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+// Regression test for #95307.\n+// The ICE occurred on all the editions, specifying edition:2018 to reduce diagnostics.\n+\n+pub trait C {\n+    async fn new() -> [u8; _];\n+    //~^ ERROR: functions in traits cannot be declared `async`\n+    //~| ERROR: using `_` for array lengths is unstable\n+    //~| ERROR: in expressions, `_` can only be used on the left-hand side of an assignment\n+}\n+\n+fn main() {}"}, {"sha": "60fca71eb4b62d86edb3fb145cac57d5a2b2254f", "filename": "src/test/ui/async-await/issues/issue-95307.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -0,0 +1,30 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-95307.rs:7:5\n+   |\n+LL |     async fn new() -> [u8; _];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/issue-95307.rs:7:28\n+   |\n+LL |     async fn new() -> [u8; _];\n+   |                            ^\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/issue-95307.rs:7:28\n+   |\n+LL |     async fn new() -> [u8; _];\n+   |                            ^ `_` not allowed here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0658, E0706.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "2840fa121a75f630ab5a944d1c43a39662a4fe2e", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47aee31b2a89cb7de97d779869a30b046632b6af/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=47aee31b2a89cb7de97d779869a30b046632b6af", "patch": "@@ -7,7 +7,7 @@ LL |     let pi = f32::consts::PI;\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |     let pi = std::f32::consts::PI;\n-   |              ~~~~~~~~~~~~~~~~\n+   |              +++++\n \n error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n   --> $DIR/suggest-std-when-using-type.rs:5:14\n@@ -18,7 +18,7 @@ LL |         str::from_utf8(bytes)\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |         std::str::from_utf8(bytes)\n-   |         ~~~~~~~~~~~~~~~~~~~\n+   |         +++++\n \n error: aborting due to 2 previous errors\n "}]}