{"sha": "907aebcf8b092bddb74ee8c1bd4bc7cf572f4581", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2FlYmNmOGIwOTJiZGRiNzRlZThjMWJkNGJjN2NmNTcyZjQ1ODE=", "commit": {"author": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-08-23T20:51:44Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-08-23T20:51:44Z"}, "message": "Use more if-chains", "tree": {"sha": "fe5f5a551b1796feb58ff83045cc9948c520fd00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe5f5a551b1796feb58ff83045cc9948c520fd00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl1gUeAACgkQj1SKWi7R\nP1j0SA//WwWeGe15R6xRc8BnRnuV3MtnI98t3fXifkHbk+PymoeuafiwFhN0Nr3Q\nVEBHPosn7JP6KMV4f3ZiJ4O6s25i9wBrlegIuJrkhDBfj3r0mTx9v+5oPDsqqNc/\n7xzJ8/naHPNyJLLAap7Z9cElYxxIgxl65gdVxbVhgG+9QwcYpntuyVbUB77RewRO\nY+wrXWxcmfgNwQ2Qh2KqdyajNrCLwoL3BFyY599NQsJCilYrsE1WCe8ekIOFf4so\ngvXlLgAmaWr+NKMau9GTEdbRkzcFwmHThU7EkxrRiXWvi3rCUCZqsamRdgvuZ6uq\nWoHMLdlKLYXdYl47aESe86Nx9IeUk1i+TXHZd3uxQWNihvC4jUlpa5EUybWbTxd5\nFS6oNuau0AODnkpPCE6E/GZrLu73mLb3cDgwJIiWMb7LTecZrXzM8n2+7mDuGR93\n/7xg6HZ4nqZJ7Jjzu5lU+tCwsvik7KrW5uB8w7Uyer+otw+lMBB1CXzZ1hy/B7fc\nu+TjSbnU7QsrJq+TIPpxA8enZj5Ojp+RyGuyr+34bExYAvWqyL+8jX+0j/PU6cYW\n1X29MNrQz3jh2OWgNonjWyK4TfZrwqyS65bJG288LVVaDw26EM7RMncltAgfY5iU\nGiVIsjaho7QdFztcHi8t85Fb8ad8+//Obac8kTWCLh3NbQdMOgA=\n=oc0e\n-----END PGP SIGNATURE-----", "payload": "tree fe5f5a551b1796feb58ff83045cc9948c520fd00\nparent 4130dfba2efa4ea75e1a9ac28d4486e3b1de63c5\nauthor Jeremy Stucki <stucki.jeremy@gmail.com> 1566593504 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1566593504 +0200\n\nUse more if-chains\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581", "html_url": "https://github.com/rust-lang/rust/commit/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4130dfba2efa4ea75e1a9ac28d4486e3b1de63c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4130dfba2efa4ea75e1a9ac28d4486e3b1de63c5", "html_url": "https://github.com/rust-lang/rust/commit/4130dfba2efa4ea75e1a9ac28d4486e3b1de63c5"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "68fe1fed9b2459e0506094223e7e3318fb55987d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907aebcf8b092bddb74ee8c1bd4bc7cf572f4581/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=907aebcf8b092bddb74ee8c1bd4bc7cf572f4581", "patch": "@@ -1396,18 +1396,20 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         a: &hir::Expr,\n         applicability: &mut Applicability,\n     ) -> Vec<String> {\n-        if let hir::ExprKind::AddrOf(_, ref format_arg) = a.node {\n-            if let hir::ExprKind::Match(ref format_arg_expr, _, _) = format_arg.node {\n-                if let hir::ExprKind::Tup(ref format_arg_expr_tup) = format_arg_expr.node {\n-                    return format_arg_expr_tup\n-                        .iter()\n-                        .map(|a| snippet_with_applicability(cx, a.span, \"..\", applicability).into_owned())\n-                        .collect();\n-                }\n-            }\n-        };\n+        if_chain! {\n+            if let hir::ExprKind::AddrOf(_, ref format_arg) = a.node;\n+            if let hir::ExprKind::Match(ref format_arg_expr, _, _) = format_arg.node;\n+            if let hir::ExprKind::Tup(ref format_arg_expr_tup) = format_arg_expr.node;\n \n-        unreachable!()\n+            then {\n+                format_arg_expr_tup\n+                    .iter()\n+                    .map(|a| snippet_with_applicability(cx, a.span, \"..\", applicability).into_owned())\n+                    .collect()\n+            } else {\n+                unreachable!()\n+            }\n+        }\n     }\n \n     fn is_call(node: &hir::ExprKind) -> bool {\n@@ -1671,20 +1673,22 @@ fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, source: &hir:\n }\n \n fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_args: &'tcx [hir::Expr]) {\n-    if match_type(cx, cx.tables.expr_ty(expr), &paths::VEC) {\n-        if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])) {\n-            if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite()) {\n-                span_lint_and_sugg(\n-                    cx,\n-                    ITER_CLONED_COLLECT,\n-                    to_replace,\n-                    \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                     more readable\",\n-                    \"try\",\n-                    \".to_vec()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+    if_chain! {\n+        if match_type(cx, cx.tables.expr_ty(expr), &paths::VEC);\n+        if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0]));\n+        if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n+\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_CLONED_COLLECT,\n+                to_replace,\n+                \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n+                 more readable\",\n+                \"try\",\n+                \".to_vec()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n         }\n     }\n }\n@@ -1944,18 +1948,20 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, unwrap_args: &[hir::E\n \n /// lint use of `ok().expect()` for `Result`s\n fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, ok_args: &[hir::Expr]) {\n-    // lint if the caller of `ok()` is a `Result`\n-    if match_type(cx, cx.tables.expr_ty(&ok_args[0]), &paths::RESULT) {\n+    if_chain! {\n+        // lint if the caller of `ok()` is a `Result`\n+        if match_type(cx, cx.tables.expr_ty(&ok_args[0]), &paths::RESULT);\n         let result_type = cx.tables.expr_ty(&ok_args[0]);\n-        if let Some(error_type) = get_error_type(cx, result_type) {\n-            if has_debug_impl(error_type, cx) {\n-                span_lint(\n-                    cx,\n-                    OK_EXPECT,\n-                    expr.span,\n-                    \"called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\",\n-                );\n-            }\n+        if let Some(error_type) = get_error_type(cx, result_type);\n+        if has_debug_impl(error_type, cx);\n+\n+        then {\n+            span_lint(\n+                cx,\n+                OK_EXPECT,\n+                expr.span,\n+                \"called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\",\n+            );\n         }\n     }\n }"}]}