{"sha": "569676b9b05cd150da3dadcd886cbbf5b40c4fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OTY3NmI5YjA1Y2QxNTBkYTNkYWRjZDg4NmNiYmY1YjQwYzRmY2U=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T14:13:19Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T19:35:11Z"}, "message": "Use .map() to modify data inside Options instead of using .and_then(|x| Some(y)) (clippy::option_and_then_some)", "tree": {"sha": "48d34ac3b68b16b98419ec9af4729d688e809eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d34ac3b68b16b98419ec9af4729d688e809eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569676b9b05cd150da3dadcd886cbbf5b40c4fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569676b9b05cd150da3dadcd886cbbf5b40c4fce", "html_url": "https://github.com/rust-lang/rust/commit/569676b9b05cd150da3dadcd886cbbf5b40c4fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569676b9b05cd150da3dadcd886cbbf5b40c4fce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07168f9cdcaae65550ea04395bef1258e8bbe9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/07168f9cdcaae65550ea04395bef1258e8bbe9c3", "html_url": "https://github.com/rust-lang/rust/commit/07168f9cdcaae65550ea04395bef1258e8bbe9c3"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "63d7124ee91f9d1f06a6e9e788c5194dcfc097db", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=569676b9b05cd150da3dadcd886cbbf5b40c4fce", "patch": "@@ -415,9 +415,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ReferenceOutlivesReferent(ty) => {\n                 tcx.lift(&ty).map(super::ReferenceOutlivesReferent)\n             }\n-            super::ObjectTypeBound(ty, r) => tcx\n-                .lift(&ty)\n-                .and_then(|ty| tcx.lift(&r).and_then(|r| Some(super::ObjectTypeBound(ty, r)))),\n+            super::ObjectTypeBound(ty, r) => {\n+                tcx.lift(&ty).and_then(|ty| tcx.lift(&r).map(|r| super::ObjectTypeBound(ty, r)))\n+            }\n             super::ObjectCastObligation(ty) => tcx.lift(&ty).map(super::ObjectCastObligation),\n             super::Coercion { source, target } => {\n                 Some(super::Coercion { source: tcx.lift(&source)?, target: tcx.lift(&target)? })"}, {"sha": "2dccb04f6cce1c1cca0ac434e3b25869ddf5b14b", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=569676b9b05cd150da3dadcd886cbbf5b40c4fce", "patch": "@@ -37,7 +37,7 @@ impl<'a> Parser<'a> {\n                     let inner_parse_policy = InnerAttributeParsePolicy::NotPermitted {\n                         reason: inner_error_reason,\n                         saw_doc_comment: just_parsed_doc_comment,\n-                        prev_attr_sp: attrs.last().and_then(|a| Some(a.span)),\n+                        prev_attr_sp: attrs.last().map(|a| a.span),\n                     };\n                     let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     attrs.push(attr);"}, {"sha": "58354c891a2b3e503e279384c439054950f6e0b8", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=569676b9b05cd150da3dadcd886cbbf5b40c4fce", "patch": "@@ -1551,21 +1551,18 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n             let method_names = pcx.candidate_method_names();\n             pcx.allow_similar_names = false;\n-            let applicable_close_candidates: Vec<ty::AssocItem> =\n-                method_names\n-                    .iter()\n-                    .filter_map(|&method_name| {\n-                        pcx.reset();\n-                        pcx.method_name = Some(method_name);\n-                        pcx.assemble_inherent_candidates();\n-                        pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n-                            .map_or(None, |_| {\n-                                pcx.pick_core()\n-                                    .and_then(|pick| pick.ok())\n-                                    .and_then(|pick| Some(pick.item))\n-                            })\n-                    })\n-                    .collect();\n+            let applicable_close_candidates: Vec<ty::AssocItem> = method_names\n+                .iter()\n+                .filter_map(|&method_name| {\n+                    pcx.reset();\n+                    pcx.method_name = Some(method_name);\n+                    pcx.assemble_inherent_candidates();\n+                    pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n+                        .map_or(None, |_| {\n+                            pcx.pick_core().and_then(|pick| pick.ok()).map(|pick| pick.item)\n+                        })\n+                })\n+                .collect();\n \n             if applicable_close_candidates.is_empty() {\n                 Ok(None)"}, {"sha": "21e3d24cc968b18c3a2e21ab8cdc4c39fa4f8d43", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569676b9b05cd150da3dadcd886cbbf5b40c4fce/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=569676b9b05cd150da3dadcd886cbbf5b40c4fce", "patch": "@@ -121,9 +121,7 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => {\n-                lt.clean(cx).and_then(|lt| Some(GenericArg::Lifetime(lt)))\n-            }\n+            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(|lt| GenericArg::Lifetime(lt)),\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None"}]}