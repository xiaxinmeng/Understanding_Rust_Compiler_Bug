{"sha": "8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzZjYjU4NjAzOGUyYzEyZTZlY2VhZTU3ZjdhOTU2ODRmYzZjNmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T12:28:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T12:28:45Z"}, "message": "Simplify", "tree": {"sha": "178c95a19df6a463e0db472b51123355f794ad90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178c95a19df6a463e0db472b51123355f794ad90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "html_url": "https://github.com/rust-lang/rust/commit/8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e36cb586038e2c12e6eceae57f7a95684fc6c6d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "151180057b0304ee4dee75401e8f1aaa7aaaec21", "url": "https://api.github.com/repos/rust-lang/rust/commits/151180057b0304ee4dee75401e8f1aaa7aaaec21", "html_url": "https://github.com/rust-lang/rust/commit/151180057b0304ee4dee75401e8f1aaa7aaaec21"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "7d8f0d915e69577c62cf5ce809d392df4370e580", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e36cb586038e2c12e6eceae57f7a95684fc6c6d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e36cb586038e2c12e6eceae57f7a95684fc6c6d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "patch": "@@ -144,17 +144,7 @@ impl Attr {\n         }\n     }\n \n-    pub fn as_path(&self) -> Option<&SmolStr> {\n-        if !self.is_simple_atom(\"path\") {\n-            return None;\n-        }\n-        match &self.input {\n-            Some(AttrInput::Literal(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n+    pub(crate) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n         cfg_options.is_cfg_enabled(self.as_cfg()?)\n     }\n }"}, {"sha": "15941a1cb7c1aa03d48de327d520f508e1d609d0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e36cb586038e2c12e6eceae57f7a95684fc6c6d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e36cb586038e2c12e6eceae57f7a95684fc6c6d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8e36cb586038e2c12e6eceae57f7a95684fc6c6d", "patch": "@@ -7,7 +7,7 @@ use hir_expand::{\n };\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n-use ra_syntax::{ast, SmolStr};\n+use ra_syntax::ast;\n use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::tested_by;\n \n@@ -599,7 +599,7 @@ where\n     }\n \n     fn collect_module(&mut self, module: &raw::ModuleData, attrs: &Attrs) {\n-        let path_attr = self.path_attr(attrs);\n+        let path_attr = attrs.find_string_value(\"path\");\n         let is_macro_use = attrs.has_atom(\"macro_use\");\n         match module {\n             // inline module, just recurse\n@@ -612,7 +612,7 @@ where\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n-                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n+                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr.as_ref()),\n                 }\n                 .collect(&*items);\n                 if is_macro_use {\n@@ -626,7 +626,7 @@ where\n                     self.def_collector.db,\n                     self.file_id,\n                     name,\n-                    path_attr,\n+                    path_attr.as_ref(),\n                 ) {\n                     Ok((file_id, mod_dir)) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -798,10 +798,6 @@ where\n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n         attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n     }\n-\n-    fn path_attr<'a>(&self, attrs: &'a Attrs) -> Option<&'a SmolStr> {\n-        attrs.iter().find_map(|attr| attr.as_path())\n-    }\n }\n \n fn is_macro_rules(path: &Path) -> bool {"}]}