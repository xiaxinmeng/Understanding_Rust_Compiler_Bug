{"sha": "23aa4831026b96869d0e0c283d39ba5fb35e786f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYWE0ODMxMDI2Yjk2ODY5ZDBlMGMyODNkMzliYTVmYjM1ZTc4NmY=", "commit": {"author": {"name": "Sebastian K\u00f6ln", "email": "sebk@rynx.org", "date": "2018-05-09T16:03:13Z"}, "committer": {"name": "Sebastian K\u00f6ln", "email": "sebk@rynx.org", "date": "2018-05-09T16:03:13Z"}, "message": "add fn `into_inner(self) -> (Idx, Idx)` to RangeInclusive (#49022)", "tree": {"sha": "0c9a79f68109a1974fa7adf31ef0ffd2708a8a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9a79f68109a1974fa7adf31ef0ffd2708a8a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23aa4831026b96869d0e0c283d39ba5fb35e786f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23aa4831026b96869d0e0c283d39ba5fb35e786f", "html_url": "https://github.com/rust-lang/rust/commit/23aa4831026b96869d0e0c283d39ba5fb35e786f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23aa4831026b96869d0e0c283d39ba5fb35e786f/comments", "author": null, "committer": null, "parents": [{"sha": "8ff4b42064b374bb62043f7729f84b6d979c7667", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff4b42064b374bb62043f7729f84b6d979c7667", "html_url": "https://github.com/rust-lang/rust/commit/8ff4b42064b374bb62043f7729f84b6d979c7667"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "697e6a3efde284356e5ce023691e2b0de8a3dc29", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23aa4831026b96869d0e0c283d39ba5fb35e786f/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aa4831026b96869d0e0c283d39ba5fb35e786f/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=23aa4831026b96869d0e0c283d39ba5fb35e786f", "patch": "@@ -411,6 +411,21 @@ impl<Idx> RangeInclusive<Idx> {\n     pub fn end(&self) -> &Idx {\n         &self.end\n     }\n+\n+    /// Destructures the RangeInclusive into (lower bound, upper (inclusive) bound).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inclusive_range_methods)]\n+    ///\n+    /// assert_eq!((3..=5).into_inner(), (3, 5));\n+    /// ```\n+    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[inline]\n+    pub fn into_inner(self) -> (Idx, Idx) {\n+        (self.start, self.end)\n+    }\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"}]}