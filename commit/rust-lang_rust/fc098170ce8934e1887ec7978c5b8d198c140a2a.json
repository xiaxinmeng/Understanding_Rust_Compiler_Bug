{"sha": "fc098170ce8934e1887ec7978c5b8d198c140a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDk4MTcwY2U4OTM0ZTE4ODdlYzc5NzhjNWI4ZDE5OGMxNDBhMmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T18:18:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-16T18:18:55Z"}, "message": "Rollup merge of #74370 - Manishearth:re-spotlight, r=GuillaumeGomez\n\nReintroduce spotlight / \"important traits\" feature\n\n(Reopened version of https://github.com/rust-lang/rust/pull/74111 because Github is broken, see discussion there)\n\nFixes https://github.com/rust-lang/rust/issues/73785\n\nThis PR reintroduces the \"spotlight\" (\"important traits\") feature.\n\nA couple changes have been made:\n\nAs there were concerns about its visibility, it has been moved to be next to the return type, as opposed to being on the side.\n\nIt also no longer produces a modal, it shows the traits on hover, and it can be clicked on to pin the hover bubble.\n\n![image](https://user-images.githubusercontent.com/1617736/86674555-a82d2600-bfad-11ea-9a4a-a1a9ffd66ae5.png)\n\n![image](https://user-images.githubusercontent.com/1617736/86674533-a1061800-bfad-11ea-9e8a-c62ad86ed0d7.png)\n\nIt also works fine on mobile:\n\n![image](https://user-images.githubusercontent.com/1617736/86674638-bda25000-bfad-11ea-8d8d-1798b608923e.png)", "tree": {"sha": "46e4cdabeb12a1cb268e8b19c03d224c8777960b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e4cdabeb12a1cb268e8b19c03d224c8777960b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc098170ce8934e1887ec7978c5b8d198c140a2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEJoPCRBK7hj4Ov3rIwAAdHIIAAZLUiDqokZJ/WSgGPQAWARY\npGTzqwDZ9bEThI1W1Ji1GZH1p4cLzB9qxRhwxiBIaMx2IXKSpFFKyVllyshFlNkj\nIis0Snt8KPDph3fu/yRnuckh6/oo7b3F/+77ynYtaZq+ll6Z/YNEiZpQZCD7zGrl\nNevfV6Hiq5PCd9m7LrCazLscshVe3fo2BqmD28yqWF+9x4Ak04gu/LvpPjd/nDic\nWIOBZooZI8i02BaztY6je/6OAP4wwIAoRUyr97+Ba61LuUAH2bvj/T5otulMRCOi\nv9j2/KTk4iD5q739vkxrsI3lLLO8ZQeHr1TLJdbPOmCn8B4KsEPxyZSoGZDu5c4=\n=gyjQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 46e4cdabeb12a1cb268e8b19c03d224c8777960b\nparent 61fccf05f90b1a99a62ccd811152c4eeec57fba3\nparent c621a54eeb71248927dff8ac0c76f279cf756f28\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594923535 -0700\ncommitter GitHub <noreply@github.com> 1594923535 -0700\n\nRollup merge of #74370 - Manishearth:re-spotlight, r=GuillaumeGomez\n\nReintroduce spotlight / \"important traits\" feature\n\n(Reopened version of https://github.com/rust-lang/rust/pull/74111 because Github is broken, see discussion there)\n\nFixes https://github.com/rust-lang/rust/issues/73785\n\nThis PR reintroduces the \"spotlight\" (\"important traits\") feature.\n\nA couple changes have been made:\n\nAs there were concerns about its visibility, it has been moved to be next to the return type, as opposed to being on the side.\n\nIt also no longer produces a modal, it shows the traits on hover, and it can be clicked on to pin the hover bubble.\n\n![image](https://user-images.githubusercontent.com/1617736/86674555-a82d2600-bfad-11ea-9a4a-a1a9ffd66ae5.png)\n\n![image](https://user-images.githubusercontent.com/1617736/86674533-a1061800-bfad-11ea-9e8a-c62ad86ed0d7.png)\n\nIt also works fine on mobile:\n\n![image](https://user-images.githubusercontent.com/1617736/86674638-bda25000-bfad-11ea-8d8d-1798b608923e.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc098170ce8934e1887ec7978c5b8d198c140a2a", "html_url": "https://github.com/rust-lang/rust/commit/fc098170ce8934e1887ec7978c5b8d198c140a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc098170ce8934e1887ec7978c5b8d198c140a2a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61fccf05f90b1a99a62ccd811152c4eeec57fba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/61fccf05f90b1a99a62ccd811152c4eeec57fba3", "html_url": "https://github.com/rust-lang/rust/commit/61fccf05f90b1a99a62ccd811152c4eeec57fba3"}, {"sha": "c621a54eeb71248927dff8ac0c76f279cf756f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c621a54eeb71248927dff8ac0c76f279cf756f28", "html_url": "https://github.com/rust-lang/rust/commit/c621a54eeb71248927dff8ac0c76f279cf756f28"}], "stats": {"total": 299, "additions": 284, "deletions": 15}, "files": [{"sha": "d16c2a9d0342c71f4512a02c4db1a1dab0d5abea", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -150,6 +150,27 @@ Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n [unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n [issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n \n+### Adding your trait to the \"Important Traits\" dialog\n+\n+Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to a given type when\n+implemented on it. These traits are intended to be the primary interface for their types, and are\n+often the only thing available to be documented on their types. For this reason, Rustdoc will track\n+when a given type implements one of these traits and call special attention to it when a function\n+returns one of these types. This is the \"Important Traits\" dialog, visible as a circle-i button next\n+to the function, which, when clicked, shows the dialog.\n+\n+In the standard library, the traits that qualify for inclusion are `Iterator`, `io::Read`, and\n+`io::Write`. However, rather than being implemented as a hard-coded list, these traits have a\n+special marker attribute on them: `#[doc(spotlight)]`. This means that you could apply this\n+attribute to your own trait to include it in the \"Important Traits\" dialog in documentation.\n+\n+The `#[doc(spotlight)]` attribute currently requires the `#![feature(doc_spotlight)]` feature gate.\n+For more information, see [its chapter in the Unstable Book][unstable-spotlight] and [its tracking\n+issue][issue-spotlight].\n+\n+[unstable-spotlight]: ../unstable-book/language-features/doc-spotlight.html\n+[issue-spotlight]: https://github.com/rust-lang/rust/issues/45040\n+\n ### Exclude certain dependencies from documentation\n \n The standard library uses several dependencies which, in turn, use several types and traits from the"}, {"sha": "8117755fef1c8741f45648c178c98d37f4e3928d", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -0,0 +1,30 @@\n+# `doc_spotlight`\n+\n+The tracking issue for this feature is: [#45040]\n+\n+The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n+to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n+attribute to a trait definition will make rustdoc print extra information for functions which return\n+a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n+`io::Write` traits in the standard library.\n+\n+You can do this on your own traits, like this:\n+\n+```\n+#![feature(doc_spotlight)]\n+\n+#[doc(spotlight)]\n+pub trait MyTrait {}\n+\n+pub struct MyStruct;\n+impl MyTrait for MyStruct {}\n+\n+/// The docs for this function will have an extra line about `MyStruct` implementing `MyTrait`,\n+/// without having to write that yourself!\n+pub fn my_fn() -> MyStruct { MyStruct }\n+```\n+\n+This feature was originally implemented in PR [#45039].\n+\n+[#45040]: https://github.com/rust-lang/rust/issues/45040\n+[#45039]: https://github.com/rust-lang/rust/pull/45039"}, {"sha": "733ebdc0e97f236e3c88120c51431696e0df9aca", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -24,6 +24,7 @@ use crate::task::{Context, Poll};\n /// `.await` the value.\n ///\n /// [`Waker`]: ../task/struct.Waker.html\n+#[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[lang = \"future_trait\"]"}, {"sha": "692eed80c0252b32eca4fd2317966fe9f6e0d980", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -92,6 +92,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n     label = \"`{Self}` is not an iterator\",\n     message = \"`{Self}` is not an iterator\"\n )]\n+#[doc(spotlight)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "c2dc3e5985f3435fe8bddc9280d86a1dd5d1d4e8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -96,6 +96,7 @@\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n+#![cfg_attr(not(bootstrap), feature(doc_spotlight))]\n #![feature(duration_consts_2)]\n #![feature(extern_types)]\n #![feature(fundamental)]"}, {"sha": "b424c8afb34717121efaf16fbbe025e3c33bb6c5", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -253,6 +253,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     include => external_doc\n                     cfg => doc_cfg\n                     masked => doc_masked\n+                    spotlight => doc_spotlight\n                     alias => doc_alias\n                     keyword => doc_keyword\n                 );"}, {"sha": "d7c310a8b4c8b2111e3a77f3e6564ac100fae3bb", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -368,6 +368,9 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n+    /// Allows `#[doc(spotlight)]`.\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n+\n     /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n "}, {"sha": "ccb6ccb57fa404c8538e62f5d43b2056d7347a98", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -400,6 +400,7 @@ symbols! {\n         doc_cfg,\n         doc_keyword,\n         doc_masked,\n+        doc_spotlight,\n         doctest,\n         document_private_items,\n         dotdot_in_tuple_patterns,\n@@ -968,6 +969,7 @@ symbols! {\n         soft,\n         specialization,\n         speed,\n+        spotlight,\n         sqrtf32,\n         sqrtf64,\n         sse4a_target_feature,"}, {"sha": "491daa80e5c859ddd0f8692fe4cf0e99c85f9a11", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -12,7 +12,7 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty;\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};\n@@ -194,13 +194,15 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n+    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         auto: auto_trait,\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n+        is_spotlight,\n         is_auto,\n     }\n }"}, {"sha": "8a4ee91df405fcb8b033ec6911e8916b71154aaf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -1007,6 +1007,7 @@ impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n impl Clean<Item> for doctree::Trait<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let attrs = self.attrs.clean(cx);\n+        let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n@@ -1021,6 +1022,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n                 items: self.items.iter().map(|ti| ti.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }"}, {"sha": "6a03722cd0802786f31710bb146e981c3fecf13e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -967,6 +967,7 @@ pub struct Trait {\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n+    pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n "}, {"sha": "0d8284029afc72f87143d5367a6a8fd84e6bab08", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -63,10 +63,22 @@ impl Buffer {\n         Buffer { for_html: false, buffer: String::new() }\n     }\n \n+    crate fn is_empty(&self) -> bool {\n+        self.buffer.is_empty()\n+    }\n+\n     crate fn into_inner(self) -> String {\n         self.buffer\n     }\n \n+    crate fn insert_str(&mut self, idx: usize, s: &str) {\n+        self.buffer.insert_str(idx, s);\n+    }\n+\n+    crate fn push_str(&mut self, s: &str) {\n+        self.buffer.push_str(s);\n+    }\n+\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "31e35125dac57ba548cd3d4aafda7fc134c07ca2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -2415,7 +2415,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-           {name}{generics}{decl}{where_clause}</pre>\",\n+           {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -2425,7 +2425,8 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         generics = f.generics.print(),\n         where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n         decl = Function { decl: &f.decl, header_len, indent: 0, asyncness: f.header.asyncness }\n-            .print()\n+            .print(),\n+        spotlight = spotlight_decl(&f.decl),\n     );\n     document(w, cx, it)\n }\n@@ -2612,7 +2613,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n+        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id,);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2926,7 +2927,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}{where_clause}\",\n+                   {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n@@ -2938,6 +2939,7 @@ fn render_assoc_item(\n             name = name,\n             generics = g.print(),\n             decl = Function { decl: d, header_len, indent, asyncness: header.asyncness }.print(),\n+            spotlight = spotlight_decl(&d),\n             where_clause = WhereClause { gens: g, indent, end_newline }\n         )\n     }\n@@ -3559,6 +3561,62 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n+fn spotlight_decl(decl: &clean::FnDecl) -> String {\n+    let mut out = Buffer::html();\n+    let mut trait_ = String::new();\n+\n+    if let Some(did) = decl.output.def_id() {\n+        let c = cache();\n+        if let Some(impls) = c.impls.get(&did) {\n+            for i in impls {\n+                let impl_ = i.inner_impl();\n+                if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n+                    if out.is_empty() {\n+                        out.push_str(&format!(\n+                            \"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n+                                      <code class=\\\"content\\\">\",\n+                            impl_.for_.print()\n+                        ));\n+                        trait_.push_str(&impl_.for_.print().to_string());\n+                    }\n+\n+                    //use the \"where\" class here to make it small\n+                    out.push_str(&format!(\n+                        \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n+                        impl_.print()\n+                    ));\n+                    let t_did = impl_.trait_.def_id().unwrap();\n+                    for it in &impl_.items {\n+                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                            assoc_type(\n+                                &mut out,\n+                                it,\n+                                &[],\n+                                Some(&tydef.type_),\n+                                AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n+                                \"\",\n+                            );\n+                            out.push_str(\";</span>\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    if !out.is_empty() {\n+        out.insert_str(\n+            0,\n+            \"<span class=\\\"important-traits\\\"><span class=\\\"important-traits-tooltip\\\">\u24d8<div class='important-traits-tooltiptext'><span class=\\\"docblock\\\">\"\n+\n+        );\n+        out.push_str(\"</code></span></div></span></span>\");\n+    }\n+\n+    out.into_inner()\n+}\n+\n fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n@@ -3670,7 +3728,8 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n+                    write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);"}, {"sha": "082f9cca064f133560460d5496d472223a2c2bcd", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -2636,6 +2636,13 @@ function defocusSearchBar() {\n         });\n     }());\n \n+    onEachLazy(document.getElementsByClassName(\"important-traits\"), function(e) {\n+        e.onclick = function() {\n+            this.getElementsByClassName('important-traits-tooltiptext')[0]\n+                .classList.toggle(\"force-tooltip\");\n+        };\n+    });\n+\n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n         if (nb === 0 || nb === 1 || nb === 2) {"}, {"sha": "f5551446bf22029089965344477262486614084f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -146,9 +146,12 @@ code, pre, a.test-arrow {\n \tborder-radius: 3px;\n \tpadding: 0 0.1em;\n }\n-.docblock pre code, .docblock-short pre code {\n+.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n }\n+.docblock code.spotlight :last-child {\n+\tpadding-bottom: 0.6em;\n+}\n pre {\n \tpadding: 14px;\n }\n@@ -523,7 +526,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div {\n+.content .methods > div:not(.important-traits) {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -1079,10 +1082,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 16px;\n }\n \n-.tooltip:hover .tooltiptext {\n-\tdisplay: inline;\n-}\n-\n .tooltip .tooltiptext::after {\n \tcontent: \" \";\n \tposition: absolute;\n@@ -1098,13 +1097,52 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 20px;\n }\n \n-.tooltip .tooltiptext {\n+.important-traits-tooltip {\n+\tdisplay: inline-block;\n+\tcursor: pointer;\n+}\n+\n+.important-traits:hover .important-traits-tooltiptext,\n+.important-traits .important-traits-tooltiptext.force-tooltip {\n+\tdisplay: inline-block;\n+}\n+\n+.important-traits .important-traits-tooltiptext {\n+\tdisplay: none;\n+\tpadding: 5px 3px 3px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+\tz-index: 10;\n+\tfont-size: 16px;\n+\tcursor: default;\n+\tposition: absolute;\n \tborder: 1px solid;\n-\tfont-weight: normal;\n }\n \n-pre.rust {\n+.important-traits-tooltip::after {\n+\t/* The margin on the tooltip does not capture hover events,\n+\t   this extends the area of hover enough so that mouse hover is not\n+\t   lost when moving the mouse to the tooltip */\n+    content: \"\\00a0\\00a0\\00a0\";\n+}\n+\n+.important-traits .important, .important-traits .docblock {\n+\tmargin: 0;\n+}\n+\n+.important-traits .docblock code.content{\n+    margin: 0;\n+    padding: 0;\n+    font-size: 20px;\n+}\n+\n+/* Example code has the \"Run\" button that\n+   needs to be positioned relative to the pre */\n+pre.rust.rust-example-rendered {\n \tposition: relative;\n+}\n+\n+pre.rust {\n \ttab-size: 4;\n \t-moz-tab-size: 4;\n }\n@@ -1144,6 +1182,18 @@ pre.rust {\n \tfont-size: 16px;\n }\n \n+.important-traits {\n+\tcursor: pointer;\n+\tz-index: 2;\n+\tmargin-left: 5px;\n+}\n+\n+h4 > .important-traits {\n+\tposition: absolute;\n+\tleft: -44px;\n+\ttop: 2px;\n+}\n+\n #all-types {\n \ttext-align: center;\n \tborder: 1px solid;\n@@ -1370,6 +1420,12 @@ pre.rust {\n \t\tz-index: 1;\n \t}\n \n+\th4 > .important-traits {\n+\t\tposition: absolute;\n+\t\tleft: -22px;\n+\t\ttop: 24px;\n+\t}\n+\n \t#titles > div > div.count {\n \t\tfloat: left;\n \t\twidth: 100%;"}, {"sha": "b436997da5816f72f140f0dc29cf2d9346b6f214", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -394,6 +394,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent #314559 transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+    background-color: #314559;\n+    border-color: #5c6773;\n+}\n+\n #titles > div.selected {\n     background-color: #141920 !important;\n \tborder-bottom: 1px solid #ffb44c !important;"}, {"sha": "f4ca67f8540a9cff5158b467af2e065f165e834d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -337,6 +337,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+\tbackground-color: #111;\n+\tborder-color: #777;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;"}, {"sha": "b5a0ba4775c2454355d1c4483d58d6ac4843f7d0", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -331,6 +331,11 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n+.important-traits-tooltiptext {\n+\tbackground-color: #eee;\n+\tborder-color: #999;\n+}\n+\n #titles > div:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;"}, {"sha": "d5af4f25102d1de3c31bb63f3105a49278d36dc9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -499,6 +499,7 @@ where\n /// [`&str`]: ../../std/primitive.str.html\n /// [slice]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -1261,6 +1262,7 @@ impl Initializer {\n ///\n /// [`write_all`]: #method.write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///"}, {"sha": "cbc24009a949ade70a68b8116101e4c66969dd66", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -261,6 +261,7 @@\n #![feature(doc_cfg)]\n #![feature(doc_keyword)]\n #![feature(doc_masked)]\n+#![cfg_attr(not(bootstrap), feature(doc_spotlight))]\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]"}, {"sha": "ddd46c3c2155f8b74a55aa30144381499c3498d3", "filename": "src/test/rustdoc/doc-spotlight.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -0,0 +1,36 @@\n+#![feature(doc_spotlight)]\n+\n+pub struct Wrapper<T> {\n+    inner: T,\n+}\n+\n+impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n+\n+#[doc(spotlight)]\n+pub trait SomeTrait {\n+    // @has doc_spotlight/trait.SomeTrait.html\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n+        Wrapper {\n+            inner: self,\n+        }\n+    }\n+}\n+\n+pub struct SomeStruct;\n+impl SomeTrait for SomeStruct {}\n+\n+impl SomeStruct {\n+    // @has doc_spotlight/struct.SomeStruct.html\n+    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    pub fn new() -> SomeStruct {\n+        SomeStruct\n+    }\n+}\n+\n+// @has doc_spotlight/fn.bare_fn.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+pub fn bare_fn() -> SomeStruct {\n+    SomeStruct\n+}"}, {"sha": "452b45b34456bbb37771e3bbe31eefc1602cfa39", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -0,0 +1,4 @@\n+#[doc(spotlight)] //~ ERROR: `#[doc(spotlight)]` is experimental\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "010d74054a4120fa3b687afc2e8e9f21a0405164", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc098170ce8934e1887ec7978c5b8d198c140a2a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=fc098170ce8934e1887ec7978c5b8d198c140a2a", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[doc(spotlight)]` is experimental\n+  --> $DIR/feature-gate-doc_spotlight.rs:1:1\n+   |\n+LL | #[doc(spotlight)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #45040 <https://github.com/rust-lang/rust/issues/45040> for more information\n+   = help: add `#![feature(doc_spotlight)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}