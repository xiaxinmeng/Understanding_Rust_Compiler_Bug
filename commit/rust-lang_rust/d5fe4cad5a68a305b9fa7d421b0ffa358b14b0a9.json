{"sha": "d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "node_id": "C_kwDOAAsO6NoAKGQ1ZmU0Y2FkNWE2OGEzMDViOWZhN2Q0MjFiMGZmYTM1OGIxNGIwYTk", "commit": {"author": {"name": "Eric Seppanen", "email": "eds@reric.net", "date": "2022-03-15T23:47:26Z"}, "committer": {"name": "Eric Seppanen", "email": "eds@reric.net", "date": "2022-03-18T22:46:49Z"}, "message": "add CStr::from_bytes_until_nul\n\nThis adds a member fn that converts a slice into a CStr; it is intended\nto be safer than from_ptr (which is unsafe and may read out of bounds),\nand more useful than from_bytes_with_nul (which requires that the caller\nalready know where the nul byte is).\n\nfeature gate: cstr_from_bytes_until_nul\n\nAlso add an error type FromBytesUntilNulError for this fn.", "tree": {"sha": "cdae84e7294252b09030d812d04cda15ecbc7b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdae84e7294252b09030d812d04cda15ecbc7b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "html_url": "https://github.com/rust-lang/rust/commit/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9/comments", "author": {"login": "ericseppanen", "id": 36317762, "node_id": "MDQ6VXNlcjM2MzE3NzYy", "avatar_url": "https://avatars.githubusercontent.com/u/36317762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericseppanen", "html_url": "https://github.com/ericseppanen", "followers_url": "https://api.github.com/users/ericseppanen/followers", "following_url": "https://api.github.com/users/ericseppanen/following{/other_user}", "gists_url": "https://api.github.com/users/ericseppanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericseppanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericseppanen/subscriptions", "organizations_url": "https://api.github.com/users/ericseppanen/orgs", "repos_url": "https://api.github.com/users/ericseppanen/repos", "events_url": "https://api.github.com/users/ericseppanen/events{/privacy}", "received_events_url": "https://api.github.com/users/ericseppanen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ericseppanen", "id": 36317762, "node_id": "MDQ6VXNlcjM2MzE3NzYy", "avatar_url": "https://avatars.githubusercontent.com/u/36317762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericseppanen", "html_url": "https://github.com/ericseppanen", "followers_url": "https://api.github.com/users/ericseppanen/followers", "following_url": "https://api.github.com/users/ericseppanen/following{/other_user}", "gists_url": "https://api.github.com/users/ericseppanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericseppanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericseppanen/subscriptions", "organizations_url": "https://api.github.com/users/ericseppanen/orgs", "repos_url": "https://api.github.com/users/ericseppanen/repos", "events_url": "https://api.github.com/users/ericseppanen/events{/privacy}", "received_events_url": "https://api.github.com/users/ericseppanen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfe40d11c3630254504fb73eeccfca28d50df52", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe40d11c3630254504fb73eeccfca28d50df52", "html_url": "https://github.com/rust-lang/rust/commit/1bfe40d11c3630254504fb73eeccfca28d50df52"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a68def1e83dbb42c7435f3360c261013b91ecf5f", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "patch": "@@ -328,6 +328,27 @@ impl FromVecWithNulError {\n     }\n }\n \n+/// An error indicating that no nul byte was present.\n+///\n+/// A slice used to create a [`CStr`] must contain a nul byte somewhere\n+/// within the slice.\n+///\n+/// This error is created by the [`CStr::from_bytes_until_nul`] method.\n+///\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+pub struct FromBytesUntilNulError(());\n+\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+impl Error for FromBytesUntilNulError {}\n+\n+#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+impl fmt::Display for FromBytesUntilNulError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"data provided does not contain a nul\")\n+    }\n+}\n+\n /// An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n ///\n /// `CString` is just a wrapper over a buffer of bytes with a nul terminator;\n@@ -1239,12 +1260,60 @@ impl CStr {\n         }\n     }\n \n+    /// Creates a C string wrapper from a byte slice.\n+    ///\n+    /// This method will create a `CStr` from any byte slice that contains at\n+    /// least one nul byte. The caller does not need to know or specify where\n+    /// the nul byte is located.\n+    ///\n+    /// If the first byte is a nul character, this method will return an\n+    /// empty `CStr`. If multiple nul characters are present, the `CStr` will\n+    /// end at the first one.\n+    ///\n+    /// If the slice only has a single nul byte at the end, this method is\n+    /// equivalent to [`CStr::from_bytes_with_nul`].\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(cstr_from_bytes_until_nul)]\n+    ///\n+    /// use std::ffi::CStr;\n+    ///\n+    /// let mut buffer = [0u8; 16];\n+    /// unsafe {\n+    ///     // Here we might call an unsafe C function that writes a string\n+    ///     // into the buffer.\n+    ///     let buf_ptr = buffer.as_mut_ptr();\n+    ///     buf_ptr.write_bytes(b'A', 8);\n+    /// }\n+    /// // Attempt to extract a C nul-terminated string from the buffer.\n+    /// let c_str = CStr::from_bytes_until_nul(&buffer[..]).unwrap();\n+    /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n+    /// ```\n+    ///\n+    #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    pub fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n+        let nul_pos = memchr::memchr(0, bytes);\n+        match nul_pos {\n+            Some(nul_pos) => {\n+                // SAFETY: We know there is a nul byte at nul_pos, so this slice\n+                // (ending at the nul byte) is a well-formed C string.\n+                let subslice = &bytes[..nul_pos + 1];\n+                Ok(unsafe { CStr::from_bytes_with_nul_unchecked(subslice) })\n+            }\n+            None => Err(FromBytesUntilNulError(())),\n+        }\n+    }\n+\n     /// Creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr`\n     /// wrapper after ensuring that the byte slice is nul-terminated\n     /// and does not contain any interior nul bytes.\n     ///\n+    /// If the nul byte may not be at the end,\n+    /// [`CStr::from_bytes_until_nul`] can be used instead.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c20da138a18d074d24548335e38a3e6f5e455472", "filename": "library/std/src/ffi/c_str/tests.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str%2Ftests.rs?ref=d5fe4cad5a68a305b9fa7d421b0ffa358b14b0a9", "patch": "@@ -117,6 +117,43 @@ fn from_bytes_with_nul_interior() {\n     assert!(cstr.is_err());\n }\n \n+#[test]\n+fn cstr_from_bytes_until_nul() {\n+    // Test an empty slice. This should fail because it\n+    // does not contain a nul byte.\n+    let b = b\"\";\n+    assert_eq!(CStr::from_bytes_until_nul(&b[..]), Err(FromBytesUntilNulError(())));\n+\n+    // Test a non-empty slice, that does not contain a nul byte.\n+    let b = b\"hello\";\n+    assert_eq!(CStr::from_bytes_until_nul(&b[..]), Err(FromBytesUntilNulError(())));\n+\n+    // Test an empty nul-terminated string\n+    let b = b\"\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"\");\n+\n+    // Test a slice with the nul byte in the middle\n+    let b = b\"hello\\0world!\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice with the nul byte at the end\n+    let b = b\"hello\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice with two nul bytes at the end\n+    let b = b\"hello\\0\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"hello\");\n+\n+    // Test a slice containing lots of nul bytes\n+    let b = b\"\\0\\0\\0\\0\";\n+    let r = CStr::from_bytes_until_nul(&b[..]).unwrap();\n+    assert_eq!(r.to_bytes(), b\"\");\n+}\n+\n #[test]\n fn into_boxed() {\n     let orig: &[u8] = b\"Hello, world!\\0\";"}]}