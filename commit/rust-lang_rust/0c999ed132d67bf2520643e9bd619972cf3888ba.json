{"sha": "0c999ed132d67bf2520643e9bd619972cf3888ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTk5ZWQxMzJkNjdiZjI1MjA2NDNlOWJkNjE5OTcyY2YzODg4YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T15:44:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-03T15:44:43Z"}, "message": "Auto merge of #56451 - kennytm:rollup, r=kennytm\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #56141 ([std] Osstr len clarity)\n - #56366 (Stabilize self_in_typedefs feature)\n - #56395 (Stabilize dbg!(...))\n - #56401 (Move VecDeque::resize_with out of the impl<T:Clone> block)\n - #56402 (Improve the unstable book example for #[marker] trait)\n - #56412 (Update tracking issue for `extern_crate_self`)\n - #56416 (Remove unneeded body class selector)\n - #56418 (Fix failing tidy (line endings on Windows))\n - #56419 (Remove some uses of try!)\n - #56432 (Update issue number of `shrink_to` methods to point the tracking issue)\n - #56433 (Add description about `crate` for parse_visibility's comment)\n - #56435 (make the C part of compiler-builtins opt-out)\n - #56438 (Remove not used `DotEq` token)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e9dfee00ab60ea6aaa3fb48c0867fe4d5db3cf1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9dfee00ab60ea6aaa3fb48c0867fe4d5db3cf1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c999ed132d67bf2520643e9bd619972cf3888ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c999ed132d67bf2520643e9bd619972cf3888ba", "html_url": "https://github.com/rust-lang/rust/commit/0c999ed132d67bf2520643e9bd619972cf3888ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c999ed132d67bf2520643e9bd619972cf3888ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cd3bef4cfaaac2a608682d4b0834cda344249e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd3bef4cfaaac2a608682d4b0834cda344249e0", "html_url": "https://github.com/rust-lang/rust/commit/9cd3bef4cfaaac2a608682d4b0834cda344249e0"}, {"sha": "ac363d8793a1c6b69822a583e6f7d0b2f9904c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac363d8793a1c6b69822a583e6f7d0b2f9904c86", "html_url": "https://github.com/rust-lang/rust/commit/ac363d8793a1c6b69822a583e6f7d0b2f9904c86"}], "stats": {"total": 364, "additions": 140, "deletions": 224}, "files": [{"sha": "201129b92df054f6ef8e3a5a26bcda8a4f754f64", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -915,13 +915,13 @@ fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()>\n     }\n     if let Ok(m) = fs::symlink_metadata(dst) {\n         if m.file_type().is_dir() {\n-            try!(fs::remove_dir_all(dst));\n+            fs::remove_dir_all(dst)?;\n         } else {\n             // handle directory junctions on windows by falling back to\n             // `remove_dir`.\n-            try!(fs::remove_file(dst).or_else(|_| {\n+            fs::remove_file(dst).or_else(|_| {\n                 fs::remove_dir(dst)\n-            }));\n+            })?;\n         }\n     }\n "}, {"sha": "be24ae0ce664815e96f42e65c00cd094e2bd6a47", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -203,11 +203,11 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n         // We're using low-level APIs to create the junction, and these are more\n         // picky about paths. For example, forward slashes cannot be used as a\n         // path separator, so we should try to canonicalize the path first.\n-        let target = try!(fs::canonicalize(target));\n+        let target = fs::canonicalize(target)?;\n \n-        try!(fs::create_dir(junction));\n+        fs::create_dir(junction)?;\n \n-        let path = try!(to_u16s(junction));\n+        let path = to_u16s(junction)?;\n \n         unsafe {\n             let h = CreateFileW(path.as_ptr(),"}, {"sha": "850ea159d0fcf44dfbff16148faf9b5162481f89", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1 +1 @@\n-Subproject commit ad895867b675199a7f597ce7045a56875a7e516a\n+Subproject commit 850ea159d0fcf44dfbff16148faf9b5162481f89"}, {"sha": "344c4e437ba4cfa5c14db643ec4d6b68dcd164c5", "filename": "src/doc/rustc-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1 +1 @@\n-Subproject commit 3a804956e3c28d7e44e38804207a00013594e1d3\n+Subproject commit 344c4e437ba4cfa5c14db643ec4d6b68dcd164c5"}, {"sha": "dedc7d3015d4d65c88c7568d8c6be850dac291aa", "filename": "src/doc/unstable-book/src/language-features/marker-trait-attr.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -17,15 +17,17 @@ when they'd need to do the same thing for every type anyway).\n ```rust\n #![feature(marker_trait_attr)]\n \n-use std::fmt::{Debug, Display};\n+#[marker] trait CheapToClone: Clone {}\n \n-#[marker] trait MyMarker {}\n+impl<T: Copy> CheapToClone for T {}\n \n-impl<T: Debug> MyMarker for T {}\n-impl<T: Display> MyMarker for T {}\n+// These could potentally overlap with the blanket implementation above,\n+// so are only allowed because CheapToClone is a marker trait.\n+impl<T: CheapToClone, U: CheapToClone> CheapToClone for (T, U) {}\n+impl<T: CheapToClone> CheapToClone for std::ops::Range<T> {}\n \n-fn foo<T: MyMarker>(t: T) -> T {\n-    t\n+fn cheap_clone<T: CheapToClone>(t: T) -> T {\n+    t.clone()\n }\n ```\n "}, {"sha": "2416e85c17d1f68601ce0963670c286527e588b7", "filename": "src/doc/unstable-book/src/language-features/self-in-typedefs.md", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "raw_url": "https://github.com/rust-lang/rust/raw/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md?ref=9cd3bef4cfaaac2a608682d4b0834cda344249e0", "patch": "@@ -1,24 +0,0 @@\n-# `self_in_typedefs`\n-\n-The tracking issue for this feature is: [#49303]\n-\n-[#49303]: https://github.com/rust-lang/rust/issues/49303\n-\n-------------------------\n-\n-The `self_in_typedefs` feature gate lets you use the special `Self` identifier\n-in `struct`, `enum`, and `union` type definitions.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(self_in_typedefs)]\n-\n-enum List<T>\n-where\n-    Self: PartialOrd<Self> // can write `Self` instead of `List<T>`\n-{\n-    Nil,\n-    Cons(T, Box<Self>) // likewise here\n-}\n-```"}, {"sha": "8c36962a299c2eef03ac89c4dae89cbbb35db1de", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -529,7 +529,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert!(heap.capacity() >= 10);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.data.shrink_to(min_capacity)\n     }"}, {"sha": "c8ee40f3d2735365560e037fc88977d847cbf305", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -19,7 +19,7 @@\n \n use core::cmp::Ordering;\n use core::fmt;\n-use core::iter::{repeat, repeat_with, FromIterator, FusedIterator};\n+use core::iter::{repeat_with, FromIterator, FusedIterator};\n use core::mem;\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{Index, IndexMut, RangeBounds};\n@@ -701,7 +701,7 @@ impl<T> VecDeque<T> {\n     /// buf.shrink_to(0);\n     /// assert!(buf.capacity() >= 4);\n     /// ```\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n \n@@ -1886,16 +1886,16 @@ impl<T> VecDeque<T> {\n             debug_assert!(!self.is_full());\n         }\n     }\n-}\n \n-impl<T: Clone> VecDeque<T> {\n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n-    /// either by removing excess elements from the back or by appending clones of `value`\n-    /// to the back.\n+    /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n+    /// either by removing excess elements from the back or by appending\n+    /// elements generated by calling `generator` to the back.\n     ///\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(vec_resize_with)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1904,32 +1904,36 @@ impl<T: Clone> VecDeque<T> {\n     /// buf.push_back(15);\n     /// assert_eq!(buf, [5, 10, 15]);\n     ///\n-    /// buf.resize(2, 0);\n+    /// buf.resize_with(5, Default::default);\n+    /// assert_eq!(buf, [5, 10, 15, 0, 0]);\n+    ///\n+    /// buf.resize_with(2, || unreachable!());\n     /// assert_eq!(buf, [5, 10]);\n     ///\n-    /// buf.resize(5, 20);\n-    /// assert_eq!(buf, [5, 10, 20, 20, 20]);\n+    /// let mut state = 100;\n+    /// buf.resize_with(5, || { state += 1; state });\n+    /// assert_eq!(buf, [5, 10, 101, 102, 103]);\n     /// ```\n-    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n-    pub fn resize(&mut self, new_len: usize, value: T) {\n+    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    pub fn resize_with(&mut self, new_len: usize, generator: impl FnMut()->T) {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend(repeat(value).take(new_len - len))\n+            self.extend(repeat_with(generator).take(new_len - len))\n         } else {\n             self.truncate(new_len);\n         }\n     }\n+}\n \n-    /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n-    /// either by removing excess elements from the back or by appending\n-    /// elements generated by calling `generator` to the back.\n+impl<T: Clone> VecDeque<T> {\n+    /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n+    /// either by removing excess elements from the back or by appending clones of `value`\n+    /// to the back.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_resize_with)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1938,25 +1942,15 @@ impl<T: Clone> VecDeque<T> {\n     /// buf.push_back(15);\n     /// assert_eq!(buf, [5, 10, 15]);\n     ///\n-    /// buf.resize_with(5, Default::default);\n-    /// assert_eq!(buf, [5, 10, 15, 0, 0]);\n-    ///\n-    /// buf.resize_with(2, || unreachable!());\n+    /// buf.resize(2, 0);\n     /// assert_eq!(buf, [5, 10]);\n     ///\n-    /// let mut state = 100;\n-    /// buf.resize_with(5, || { state += 1; state });\n-    /// assert_eq!(buf, [5, 10, 101, 102, 103]);\n+    /// buf.resize(5, 20);\n+    /// assert_eq!(buf, [5, 10, 20, 20, 20]);\n     /// ```\n-    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n-    pub fn resize_with(&mut self, new_len: usize, generator: impl FnMut()->T) {\n-        let len = self.len();\n-\n-        if new_len > len {\n-            self.extend(repeat_with(generator).take(new_len - len))\n-        } else {\n-            self.truncate(new_len);\n-        }\n+    #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n+    pub fn resize(&mut self, new_len: usize, value: T) {\n+        self.resize_with(new_len, || value.clone());\n     }\n }\n "}, {"sha": "662f8ae614fcbed729514b50ce9e70c897cd3c7a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1050,7 +1050,7 @@ impl String {\n     /// assert!(s.capacity() >= 3);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.vec.shrink_to(min_capacity)\n     }"}, {"sha": "ca7c766e413307a268a828212b31f84ae57db622", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -613,7 +613,7 @@ impl<T> Vec<T> {\n     /// vec.shrink_to(0);\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n     }"}, {"sha": "8b1855800c2fd25bddb976ac69698d3de3d9a507", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -278,14 +278,14 @@ macro_rules! debug_assert_ne {\n ///\n /// // The previous method of quick returning Errors\n /// fn write_to_file_using_try() -> Result<(), MyError> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n-///     try!(file.write_all(b\"This is a list of my best friends.\"));\n+///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n+///     r#try!(file.write_all(b\"This is a list of my best friends.\"));\n ///     Ok(())\n /// }\n ///\n /// // This is equivalent to:\n /// fn write_to_file_using_match() -> Result<(), MyError> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n ///         Err(e) => return Err(From::from(e)),\n@@ -296,14 +296,14 @@ macro_rules! debug_assert_ne {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"?\")]\n-macro_rules! try {\n+macro_rules! r#try {\n     ($expr:expr) => (match $expr {\n         $crate::result::Result::Ok(val) => val,\n         $crate::result::Result::Err(err) => {\n             return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     });\n-    ($expr:expr,) => (try!($expr));\n+    ($expr:expr,) => (r#try!($expr));\n }\n \n /// Write formatted data into a buffer."}, {"sha": "b629fb820b34dd85fc6e043b5d982c2974620c9a", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -314,7 +314,6 @@ fn hash_token<'a, 'gcx, W: StableHasherResult>(\n         token::Token::DotDot |\n         token::Token::DotDotDot |\n         token::Token::DotDotEq |\n-        token::Token::DotEq |\n         token::Token::Comma |\n         token::Token::Semi |\n         token::Token::Colon |"}, {"sha": "75cdefaf49f0042f523a6d7bfdaa135f1f87169e", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -659,7 +659,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     let mut session_directories = FxHashSet::default();\n     let mut lock_files = FxHashSet::default();\n \n-    for dir_entry in try!(crate_directory.read_dir()) {\n+    for dir_entry in crate_directory.read_dir()? {\n         let dir_entry = match dir_entry {\n             Ok(dir_entry) => dir_entry,\n             _ => {\n@@ -887,7 +887,7 @@ fn all_except_most_recent(deletion_candidates: Vec<(SystemTime, PathBuf, Option<\n /// into the '\\\\?\\' format, which supports much longer paths.\n fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n     if p.exists() {\n-        let canonicalized = try!(p.canonicalize());\n+        let canonicalized = p.canonicalize()?;\n         std_fs::remove_dir_all(canonicalized)\n     } else {\n         Ok(())\n@@ -896,7 +896,7 @@ fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n \n fn safe_remove_file(p: &Path) -> io::Result<()> {\n     if p.exists() {\n-        let canonicalized = try!(p.canonicalize());\n+        let canonicalized = p.canonicalize()?;\n         std_fs::remove_file(canonicalized)\n     } else {\n         Ok(())"}, {"sha": "7fe27e97d3d3bab0488e05d0a0a237b0f5980da2", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -128,7 +128,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                                 proj: &PlaceProjection<'tcx>)\n                                 -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n-        let base = try!(self.move_path_for(&proj.base));\n+        let base = self.move_path_for(&proj.base)?;\n         let mir = self.builder.mir;\n         let tcx = self.builder.tcx;\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);"}, {"sha": "fdac1e3b8165239b744c51b95c7fe4415040f33c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -2373,13 +2373,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.with_current_self_item(item, |this| {\n             this.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                 let item_def_id = this.definitions.local_def_id(item.id);\n-                if this.session.features_untracked().self_in_typedefs {\n-                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n-                        visit::walk_item(this, item);\n-                    });\n-                } else {\n+                this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n                     visit::walk_item(this, item);\n-                }\n+                });\n             });\n         });\n     }\n@@ -3185,16 +3181,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n                 err.code(DiagnosticId::Error(\"E0411\".into()));\n-                let available_in = if this.session.features_untracked().self_in_typedefs {\n-                    \"impls, traits, and type definitions\"\n-                } else {\n-                    \"traits and impls\"\n-                };\n-                err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n-                if this.current_self_item.is_some() && nightly_options::is_nightly_build() {\n-                    err.help(\"add #![feature(self_in_typedefs)] to the crate attributes \\\n-                              to enable\");\n-                }\n+                err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n+                                              and type definitions\"));\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "1c654bf91925e89c8bd71ee9ec86c00207abde54", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -995,7 +995,7 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(linker, optional);\n-        try!(key!(lld_flavor, LldFlavor));\n+        key!(lld_flavor, LldFlavor)?;\n         key!(pre_link_args, link_args);\n         key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n@@ -1038,7 +1038,7 @@ impl Target {\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n         key!(needs_plt, bool);\n-        try!(key!(relro_level, RelroLevel));\n+        key!(relro_level, RelroLevel)?;\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n@@ -1048,7 +1048,7 @@ impl Target {\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         key!(atomic_cas, bool);\n-        try!(key!(panic_strategy, PanicStrategy));\n+        key!(panic_strategy, PanicStrategy)?;\n         key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);"}, {"sha": "8fb91cc23f7ba87b6f21499cfed0c1445b0a2be8", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -346,7 +346,7 @@ impl<'a> Classifier<'a> {\n             token::Lifetime(..) => Class::Lifetime,\n \n             token::Eof | token::Interpolated(..) |\n-            token::Tilde | token::At | token::DotEq | token::SingleQuote => Class::None,\n+            token::Tilde | token::At| token::SingleQuote => Class::None,\n         };\n \n         // Anything that didn't return above is the simple case where we the"}, {"sha": "c50c968f36002b3ec1d360749f0083e64c0a9166", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -282,7 +282,7 @@ nav.sub {\n \tpadding-left: 0;\n }\n \n-body:not(.source) .example-wrap {\n+:not(.source) .example-wrap {\n \tdisplay: inline-flex;\n \tmargin-bottom: 10px;\n }\n@@ -300,7 +300,7 @@ body:not(.source) .example-wrap {\n \ttext-align: right;\n }\n \n-body:not(.source) .example-wrap > pre.rust {\n+:not(.source) .example-wrap > pre.rust {\n \twidth: 100%;\n }\n "}, {"sha": "cae2f405318be7a6cc8284dd0a193257fac3148d", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -43,9 +43,12 @@ cc = \"1.0\"\n build_helper = { path = \"../build_helper\" }\n \n [features]\n+default = [\"compiler_builtins_c\"]\n+\n backtrace = []\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n+compiler_builtins_c = [\"compiler_builtins/c\"]\n \n # Make panics and failed asserts immediately abort without formatting any message\n panic_immediate_abort = [\"core/panic_immediate_abort\"]"}, {"sha": "536ce2e16a09b5e03b84da937e6aa061669a791f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1018,7 +1018,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// map.shrink_to(0);\n     /// assert!(map.capacity() >= 2);\n     /// ```\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n "}, {"sha": "4bb3ce0cf4489e76b7417cb04a4acbe2e732500b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -315,7 +315,7 @@ impl<T, S> HashSet<T, S>\n     /// assert!(set.capacity() >= 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.map.shrink_to(min_capacity)\n     }"}, {"sha": "9c40a31986cea69554febabb678d768cf9211fb4", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -42,6 +42,13 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// in each pair are owned strings; the latter are borrowed\n /// references.\n ///\n+/// Note, `OsString` and `OsStr` internally do not necessarily hold strings in\n+/// the form native to the platform; While on Unix, strings are stored as a\n+/// sequence of 8-bit values, on Windows, where strings are 16-bit value based\n+/// as just discussed, strings are also actually stored as a sequence of 8-bit\n+/// values, encoded in a less-strict variant of UTF-8. This is useful to\n+/// understand when handling capacity and length values.\n+///\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n@@ -324,7 +331,7 @@ impl OsString {\n     /// assert!(s.capacity() >= 3);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.inner.shrink_to(min_capacity)\n     }\n@@ -583,14 +590,19 @@ impl OsStr {\n \n     /// Returns the length of this `OsStr`.\n     ///\n-    /// Note that this does **not** return the number of bytes in this string\n-    /// as, for example, OS strings on Windows are encoded as a list of [`u16`]\n-    /// rather than a list of bytes. This number is simply useful for passing to\n-    /// other methods like [`OsString::with_capacity`] to avoid reallocations.\n+    /// Note that this does **not** return the number of bytes in the string in\n+    /// OS string form.\n+    ///\n+    /// The length returned is that of the underlying storage used by `OsStr`;\n+    /// As discussed in the [`OsString`] introduction, [`OsString`] and `OsStr`\n+    /// store strings in a form best suited for cheap inter-conversion between\n+    /// native-platform and Rust string forms, which may differ significantly\n+    /// from both of them, including in storage size and encoding.\n     ///\n-    /// See `OsStr` introduction for more information about encoding.\n+    /// This number is simply useful for passing to other methods, like\n+    /// [`OsString::with_capacity`] to avoid reallocations.\n     ///\n-    /// [`u16`]: ../primitive.u16.html\n+    /// [`OsString`]: struct.OsString.html\n     /// [`OsString::with_capacity`]: struct.OsString.html#method.with_capacity\n     ///\n     /// # Examples"}, {"sha": "7d054a347f4c31f5cc5fe051e0ecbf1b7ab20fdf", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -2065,7 +2065,7 @@ impl DirBuilder {\n             Err(e) => return Err(e),\n         }\n         match path.parent() {\n-            Some(p) => try!(self.create_dir_all(p)),\n+            Some(p) => self.create_dir_all(p)?,\n             None => return Err(io::Error::new(io::ErrorKind::Other, \"failed to create whole tree\")),\n         }\n         match self.inner.mkdir(path) {"}, {"sha": "94827d2a0355f93bc89f409f240ede21d1ca4db5", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -224,11 +224,9 @@ macro_rules! eprintln {\n /// the value of a given expression. An example:\n ///\n /// ```rust\n-/// #![feature(dbg_macro)]\n-///\n /// let a = 2;\n /// let b = dbg!(a * 2) + 1;\n-/// //      ^-- prints: [src/main.rs:4] a * 2 = 4\n+/// //      ^-- prints: [src/main.rs:2] a * 2 = 4\n /// assert_eq!(b, 5);\n /// ```\n ///\n@@ -262,8 +260,6 @@ macro_rules! eprintln {\n /// With a method call:\n ///\n /// ```rust\n-/// #![feature(dbg_macro)]\n-///\n /// fn foo(n: usize) {\n ///     if let Some(_) = dbg!(n.checked_sub(4)) {\n ///         // ...\n@@ -282,8 +278,6 @@ macro_rules! eprintln {\n /// Naive factorial implementation:\n ///\n /// ```rust\n-/// #![feature(dbg_macro)]\n-///\n /// fn factorial(n: u32) -> u32 {\n ///     if dbg!(n <= 1) {\n ///         dbg!(1)\n@@ -312,8 +306,6 @@ macro_rules! eprintln {\n /// The `dbg!(..)` macro moves the input:\n ///\n /// ```compile_fail\n-/// #![feature(dbg_macro)]\n-///\n /// /// A wrapper around `usize` which importantly is not Copyable.\n /// #[derive(Debug)]\n /// struct NoCopy(usize);\n@@ -325,7 +317,7 @@ macro_rules! eprintln {\n ///\n /// [stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\n #[macro_export]\n-#[unstable(feature = \"dbg_macro\", issue = \"54306\")]\n+#[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes"}, {"sha": "c3a94698a0f3648093f614149b96b6a25482a0bc", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -48,7 +48,7 @@ pub fn get(handle: c::DWORD) -> io::Result<Output> {\n }\n \n fn write(handle: c::DWORD, data: &[u8]) -> io::Result<usize> {\n-    let handle = match try!(get(handle)) {\n+    let handle = match get(handle)? {\n         Output::Console(c) => c,\n         Output::Pipe(p) => {\n             let handle = Handle::new(p);\n@@ -99,7 +99,7 @@ impl Stdin {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        let handle = match try!(get(c::STD_INPUT_HANDLE)) {\n+        let handle = match get(c::STD_INPUT_HANDLE)? {\n             Output::Console(c) => c,\n             Output::Pipe(p) => {\n                 let handle = Handle::new(p);"}, {"sha": "69ed318b0498fbd2a4f5ba50faf38159489094ec", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -703,7 +703,6 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::At           => \"At\",\n         token::Dot          => \"Dot\",\n         token::DotDot       => \"DotDot\",\n-        token::DotEq        => \"DotEq\",\n         token::DotDotDot    => \"DotDotDot\",\n         token::DotDotEq     => \"DotDotEq\",\n         token::Comma        => \"Comma\","}, {"sha": "fac7ff2bf342da06826b5516e621761655e85ffa", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -462,9 +462,6 @@ declare_features! (\n     // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n \n-    // Allows `Self` in type definitions\n-    (active, self_in_typedefs, \"1.30.0\", Some(49303), None),\n-\n     // Allows unsized rvalues at arguments and parameters\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n@@ -494,7 +491,7 @@ declare_features! (\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n     // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n-    (active, extern_crate_self, \"1.31.0\", Some(54658), None),\n+    (active, extern_crate_self, \"1.31.0\", Some(56409), None),\n );\n \n declare_features! (\n@@ -675,21 +672,23 @@ declare_features! (\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n     // Parentheses in patterns\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n+    // Allows the definition of `const fn` functions\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n     // Scoped lints\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    // `extern crate foo as bar;` puts `bar` into extern prelude\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Self struct constructor  (RFC 2302)\n+    // `Self` struct constructor (RFC 2302)\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n+    // `Self` in type definitions (RFC 2300)\n+    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "1cd5006f3304cefc7a7d0ab8374691a4a5a9825d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -3145,7 +3145,7 @@ impl<'a> Parser<'a> {\n                     RangeLimits::Closed\n                 };\n \n-                let r = try!(self.mk_range(Some(lhs), rhs, limits));\n+                let r = self.mk_range(Some(lhs), rhs, limits)?;\n                 lhs = self.mk_expr(lhs_span.to(rhs_span), r, ThinVec::new());\n                 break\n             }\n@@ -3353,9 +3353,7 @@ impl<'a> Parser<'a> {\n             RangeLimits::Closed\n         };\n \n-        let r = try!(self.mk_range(None,\n-                                   opt_end,\n-                                   limits));\n+        let r = self.mk_range(None, opt_end, limits)?;\n         Ok(self.mk_expr(lo.to(hi), r, attrs))\n     }\n \n@@ -6282,9 +6280,10 @@ impl<'a> Parser<'a> {\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)`\n-    /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n-    /// a function definition, it's not a tuple struct field) and the contents within the parens\n+    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n+    /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    /// If the following element can't be a tuple (i.e. it's a function definition,\n+    /// it's not a tuple struct field) and the contents within the parens\n     /// isn't valid, emit a proper diagnostic.\n     pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);"}, {"sha": "4a5f3e240daee798d42fc7372dcb2202931f1e2e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -163,7 +163,6 @@ pub enum Token {\n     DotDot,\n     DotDotDot,\n     DotDotEq,\n-    DotEq, // HACK(durka42) never produced by the parser, only used for libproc_macro\n     Comma,\n     Semi,\n     Colon,\n@@ -454,7 +453,6 @@ impl Token {\n             Dot => match joint {\n                 Dot => DotDot,\n                 DotDot => DotDotDot,\n-                DotEq => DotDotEq,\n                 _ => return None,\n             },\n             DotDot => match joint {\n@@ -477,7 +475,7 @@ impl Token {\n                 _ => return None,\n             },\n \n-            Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot | DotEq |\n+            Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot |\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |\n             Question | OpenDelim(..) | CloseDelim(..) => return None,\n \n@@ -606,7 +604,6 @@ impl Token {\n             (&DotDot, &DotDot) |\n             (&DotDotDot, &DotDotDot) |\n             (&DotDotEq, &DotDotEq) |\n-            (&DotEq, &DotEq) |\n             (&Comma, &Comma) |\n             (&Semi, &Semi) |\n             (&Colon, &Colon) |"}, {"sha": "a9f08fdd4112691799619b70ddd4cad2bd09a5f8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -210,7 +210,6 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::DotDot               => \"..\".to_string(),\n         token::DotDotDot            => \"...\".to_string(),\n         token::DotDotEq             => \"..=\".to_string(),\n-        token::DotEq                => \".=\".to_string(),\n         token::Comma                => \",\".to_string(),\n         token::Semi                 => \";\".to_string(),\n         token::Colon                => \":\".to_string(),\n@@ -1527,7 +1526,7 @@ impl<'a> State<'a> {\n \n     pub fn print_defaultness(&mut self, defaultness: ast::Defaultness) -> io::Result<()> {\n         if let ast::Defaultness::Default = defaultness {\n-            try!(self.word_nbsp(\"default\"));\n+            self.word_nbsp(\"default\")?;\n         }\n         Ok(())\n     }"}, {"sha": "9c854019de6f85e9997d9d5db9d2847aa8342452", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -264,7 +264,7 @@ pub mod printf {\n             match *self {\n                 Num::Num(n) => write!(s, \"{}\", n),\n                 Num::Arg(n) => {\n-                    let n = try!(n.checked_sub(1).ok_or(::std::fmt::Error));\n+                    let n = n.checked_sub(1).ok_or(::std::fmt::Error)?;\n                     write!(s, \"{}$\", n)\n                 },\n                 Num::Next => write!(s, \"*\"),"}, {"sha": "4babc2e612fd8680323dc79ad47ca8791119ae71", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -213,7 +213,6 @@ impl FromInternal<(TokenStream, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 })\n             }\n \n-            DotEq => op!('.', '='),\n             OpenDelim(..) | CloseDelim(..) => unreachable!(),\n             Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n         }"}, {"sha": "9804177280f66b147a26773402ab102127a34915", "filename": "src/rustc/compiler_builtins_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -34,7 +34,7 @@ cc = \"1.0.1\"\n \n [features]\n c = []\n-default = [\"c\", \"rustbuild\", \"compiler-builtins\"]\n+default = [\"rustbuild\", \"compiler-builtins\"]\n mem = []\n rustbuild = []\n compiler-builtins = []"}, {"sha": "84a7e18f91ad2cbd70d036252e3a770f3ea2d14e", "filename": "src/test/run-pass/self/self-in-typedefs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n // run-pass\n-#![allow(unions_with_drop_fields)]\n \n-#![feature(self_in_typedefs)]\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n+#![allow(unions_with_drop_fields)]\n \n enum A<'a, T: 'a>\n where"}, {"sha": "4e85f651b5533443daa616449059d964247672de", "filename": "src/test/ui/error-codes/E0411.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -2,7 +2,7 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/E0411.rs:12:6\n    |\n LL |     <Self>::foo; //~ ERROR E0411\n-   |      ^^^^ `Self` is only available in traits and impls\n+   |      ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "530015b2cb71266fccf77500418973744356e13d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `extern crate self` is unstable (see issue #54658)\n+error[E0658]: `extern crate self` is unstable (see issue #56409)\n   --> $DIR/feature-gate-extern_crate_self.rs:1:1\n    |\n LL | extern crate self as foo; //~ ERROR `extern crate self` is unstable"}, {"sha": "4b476a0a645b1541900a37d9536985c75ceb5e98", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs?ref=9cd3bef4cfaaac2a608682d4b0834cda344249e0", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum StackList<'a, T: 'a> {\n-    Nil,\n-    Cons(T, &'a Self)\n-    //~^ ERROR cannot find type `Self` in this scope\n-    //~| `Self` is only available in traits and impls\n-}\n-\n-fn main() {}"}, {"sha": "ab04953f3e50c1f6943d8e3b656e886b490a362f", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr?ref=9cd3bef4cfaaac2a608682d4b0834cda344249e0", "patch": "@@ -1,11 +0,0 @@\n-error[E0411]: cannot find type `Self` in this scope\n-  --> $DIR/feature-gate-self_in_typedefs.rs:13:17\n-   |\n-LL |     Cons(T, &'a Self)\n-   |                 ^^^^ `Self` is only available in traits and impls\n-   |\n-   = help: add #![feature(self_in_typedefs)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0411`."}, {"sha": "acb501c29fcebc7ca820f172cd03aa3dfd6938ec", "filename": "src/test/ui/issues/issue-36638.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -12,6 +12,7 @@\n \n struct Foo<Self>(Self);\n //~^ ERROR expected identifier, found keyword `Self`\n+//~^^ ERROR E0392\n \n trait Bar<Self> {}\n //~^ ERROR expected identifier, found keyword `Self`"}, {"sha": "155eb170b091faaa3c4148dc7a39fa54389bacde", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -5,10 +5,19 @@ LL | struct Foo<Self>(Self);\n    |            ^^^^ expected identifier, found keyword\n \n error: expected identifier, found keyword `Self`\n-  --> $DIR/issue-36638.rs:16:11\n+  --> $DIR/issue-36638.rs:17:11\n    |\n LL | trait Bar<Self> {}\n    |           ^^^^ expected identifier, found keyword\n \n-error: aborting due to 2 previous errors\n+error[E0392]: parameter `Self` is never used\n+  --> $DIR/issue-36638.rs:13:12\n+   |\n+LL | struct Foo<Self>(Self);\n+   |            ^^^^ unused type parameter\n+   |\n+   = help: consider removing `Self` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "cfb20340504851f1e78a7cadd6cfadec71d418f6", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -2,7 +2,7 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-24968.rs:11:11\n    |\n LL | fn foo(_: Self) {\n-   |           ^^^^ `Self` is only available in traits and impls\n+   |           ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "b3a8261bcfc747479c3d58140a724c0770ddfa95", "filename": "src/test/ui/resolve/resolve-self-in-impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl-2.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -2,7 +2,7 @@ error[E0411]: expected trait, found self type `Self`\n   --> $DIR/resolve-self-in-impl-2.rs:14:6\n    |\n LL | impl Self for S {} //~ ERROR expected trait, found self type `Self`\n-   |      ^^^^ `Self` is only available in traits and impls\n+   |      ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error[E0405]: cannot find trait `N` in `Self`\n   --> $DIR/resolve-self-in-impl-2.rs:15:12"}, {"sha": "3d24f49ad75096b9ed13a4ba977c22d3b9b13bff", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -5,8 +5,6 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n-#![feature(dbg_macro)]\n-\n #[derive(Copy, Clone, Debug)]\n struct Unit;\n \n@@ -57,31 +55,31 @@ fn test() {\n \n fn validate_stderr(stderr: Vec<String>) {\n     assert_eq!(stderr, &[\n-        \":23] Unit = Unit\",\n+        \":21] Unit = Unit\",\n \n-        \":24] a = Unit\",\n+        \":22] a = Unit\",\n \n-        \":30] Point{x: 42, y: 24,} = Point {\",\n+        \":28] Point{x: 42, y: 24,} = Point {\",\n         \"    x: 42,\",\n         \"    y: 24\",\n         \"}\",\n \n-        \":31] b = Point {\",\n+        \":29] b = Point {\",\n         \"    x: 42,\",\n         \"    y: 24\",\n         \"}\",\n \n-        \":40] &a = NoCopy(\",\n+        \":38] &a = NoCopy(\",\n         \"    1337\",\n         \")\",\n \n-        \":40] dbg!(& a) = NoCopy(\",\n+        \":38] dbg!(& a) = NoCopy(\",\n         \"    1337\",\n         \")\",\n-        \":45] f(&42) = 42\",\n+        \":43] f(&42) = 42\",\n \n         \"before\",\n-        \":50] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n+        \":48] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n     ]);\n }\n "}, {"sha": "b237c6f147bf77a04a463d44f4a80656d6e1be0a", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs?ref=9cd3bef4cfaaac2a608682d4b0834cda344249e0", "patch": "@@ -1,5 +0,0 @@\n-// Feature gate test for `dbg!(..)`.\n-\n-fn main() {\n-    dbg!(1);\n-}"}, {"sha": "64df1e196d28593ca40194137c63c120f36a9a4d", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cd3bef4cfaaac2a608682d4b0834cda344249e0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr?ref=9cd3bef4cfaaac2a608682d4b0834cda344249e0", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: macro dbg! is unstable (see issue #54306)\n-  --> $DIR/dbg-macro-feature-gate.rs:4:5\n-   |\n-LL |     dbg!(1);\n-   |     ^^^^^^^^\n-   |\n-   = help: add #![feature(dbg_macro)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "218a1d5b5fd12758158125012f9478d484803991", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/dbg-macro-move-semantics.rs:11:18\n+  --> $DIR/dbg-macro-move-semantics.rs:9:18\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here"}, {"sha": "06a23ea1767b09a6c609cfb84752479d93ce1069", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,7 +1,5 @@\n // Test ensuring that `dbg!(expr)` will take ownership of the argument.\n \n-#![feature(dbg_macro)]\n-\n #[derive(Debug)]\n struct NoCopy(usize);\n "}, {"sha": "cfc318c1cd0f3961f95df652f25f2a6819f3ca2f", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/dbg-macro-move-semantics.rs:11:18\n+  --> $DIR/dbg-macro-move-semantics.rs:9:18\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n@@ -10,7 +10,7 @@ LL |     let _ = dbg!(a);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0382]: use of moved value: `a`\n-  --> $DIR/dbg-macro-move-semantics.rs:11:13\n+  --> $DIR/dbg-macro-move-semantics.rs:9:13\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here"}, {"sha": "365e62c80867356df6df5fd17cc92c26e9bf64b8", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,7 +1,5 @@\n // Test ensuring that `dbg!(expr)` requires the passed type to implement `Debug`.\n \n-#![feature(dbg_macro)]\n-\n struct NotDebug;\n \n fn main() {"}, {"sha": "ecab673953d6d6c30bf442365fb36ec946af3d8b", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c999ed132d67bf2520643e9bd619972cf3888ba/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=0c999ed132d67bf2520643e9bd619972cf3888ba", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `NotDebug` doesn't implement `std::fmt::Debug`\n-  --> $DIR/dbg-macro-requires-debug.rs:8:23\n+  --> $DIR/dbg-macro-requires-debug.rs:6:23\n    |\n LL |     let _: NotDebug = dbg!(NotDebug);\n    |                       ^^^^^^^^^^^^^^ `NotDebug` cannot be formatted using `{:?}`"}]}