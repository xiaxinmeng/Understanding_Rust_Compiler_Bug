{"sha": "120ce12016005e73dfe01a67aa34c02f0eb432e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMGNlMTIwMTYwMDVlNzNkZmUwMWE2N2FhMzRjMDJmMGViNDMyZTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T21:35:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T21:35:14Z"}, "message": "Rename `TraitOrImpl` to `Assoc` and `trait_or_impl` to `assoc`.", "tree": {"sha": "0e245f13108efa1274a67ed5674d656b3e36e9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e245f13108efa1274a67ed5674d656b3e36e9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120ce12016005e73dfe01a67aa34c02f0eb432e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120ce12016005e73dfe01a67aa34c02f0eb432e2", "html_url": "https://github.com/rust-lang/rust/commit/120ce12016005e73dfe01a67aa34c02f0eb432e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120ce12016005e73dfe01a67aa34c02f0eb432e2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "721268583759224d0f6476e0b8b196cc8afbdea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/721268583759224d0f6476e0b8b196cc8afbdea0", "html_url": "https://github.com/rust-lang/rust/commit/721268583759224d0f6476e0b8b196cc8afbdea0"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "a08c028390bf7a86b1184a5a118b8b47ed882111", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/120ce12016005e73dfe01a67aa34c02f0eb432e2/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ce12016005e73dfe01a67aa34c02f0eb432e2/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=120ce12016005e73dfe01a67aa34c02f0eb432e2", "patch": "@@ -1703,8 +1703,13 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_trait_or_impl_item(&self, hir_id: hir::HirId, assoc_item_kind: AssocItemKind,\n-                                defaultness: hir::Defaultness, vis: ty::Visibility) {\n+    fn check_assoc_item(\n+        &self,\n+        hir_id: hir::HirId,\n+        assoc_item_kind: AssocItemKind,\n+        defaultness: hir::Defaultness,\n+        vis: ty::Visibility,\n+    ) {\n         let mut check = self.check(hir_id, vis);\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n@@ -1754,8 +1759,12 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n                 for trait_item_ref in trait_item_refs {\n-                    self.check_trait_or_impl_item(trait_item_ref.id.hir_id, trait_item_ref.kind,\n-                                                  trait_item_ref.defaultness, item_visibility);\n+                    self.check_assoc_item(\n+                        trait_item_ref.id.hir_id,\n+                        trait_item_ref.kind,\n+                        trait_item_ref.defaultness,\n+                        item_visibility,\n+                    );\n                 }\n             }\n             hir::ItemKind::TraitAlias(..) => {\n@@ -1803,8 +1812,12 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     } else {\n                         impl_vis\n                     };\n-                    self.check_trait_or_impl_item(impl_item_ref.id.hir_id, impl_item_ref.kind,\n-                                                  impl_item_ref.defaultness, impl_item_vis);\n+                    self.check_assoc_item(\n+                        impl_item_ref.id.hir_id,\n+                        impl_item_ref.kind,\n+                        impl_item_ref.defaultness,\n+                        impl_item_vis,\n+                    );\n                 }\n             }\n         }"}, {"sha": "9b7b44025c13f73043590e2edca2d2dddbeea68a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120ce12016005e73dfe01a67aa34c02f0eb432e2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120ce12016005e73dfe01a67aa34c02f0eb432e2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=120ce12016005e73dfe01a67aa34c02f0eb432e2", "patch": "@@ -860,7 +860,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n             FnKind::ItemFn(_, ref header, ..) =>\n                 (FnItemRibKind, &header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n-                (TraitOrImplItemRibKind, &sig.header.asyncness.node),\n+                (AssocItemRibKind, &sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n                 // Async closures aren't resolved through `visit_fn`-- they're\n                 // processed separately\n@@ -1033,7 +1033,7 @@ enum RibKind<'a> {\n     /// methods or associated types. Allow references to ty params that impl or trait\n     /// binds. Disallow any other upvars (including other ty params that are\n     /// upvars).\n-    TraitOrImplItemRibKind,\n+    AssocItemRibKind,\n \n     /// We passed through a function definition. Disallow upvars.\n     /// Permit only those const parameters that are specified in the function's generics.\n@@ -2612,7 +2612,7 @@ impl<'a> Resolver<'a> {\n \n                         for trait_item in trait_items {\n                             let generic_params = HasGenericParams(&trait_item.generics,\n-                                                                    TraitOrImplItemRibKind);\n+                                                                    AssocItemRibKind);\n                             this.with_generic_param_rib(generic_params, |this| {\n                                 match trait_item.node {\n                                     TraitItemKind::Const(ref ty, ref default) => {\n@@ -2899,7 +2899,7 @@ impl<'a> Resolver<'a> {\n \n                                     // We also need a new scope for the impl item type parameters.\n                                     let generic_params = HasGenericParams(&impl_item.generics,\n-                                                                          TraitOrImplItemRibKind);\n+                                                                          AssocItemRibKind);\n                                     this.with_generic_param_rib(generic_params, |this| {\n                                         use self::ResolutionError::*;\n                                         match impl_item.node {\n@@ -4074,7 +4074,7 @@ impl<'a> Resolver<'a> {\n                                 seen.insert(node_id, depth);\n                             }\n                         }\n-                        ItemRibKind | FnItemRibKind | TraitOrImplItemRibKind => {\n+                        ItemRibKind | FnItemRibKind | AssocItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -4103,7 +4103,7 @@ impl<'a> Resolver<'a> {\n             Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind | TraitOrImplItemRibKind | ClosureRibKind(..) |\n+                        NormalRibKind | AssocItemRibKind | ClosureRibKind(..) |\n                         ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n                         ConstantItemRibKind | TyParamAsConstParamTy => {\n                             // Nothing to do. Continue."}]}