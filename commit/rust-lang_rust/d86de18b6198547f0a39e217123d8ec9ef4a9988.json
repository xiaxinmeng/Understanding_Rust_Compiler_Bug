{"sha": "d86de18b6198547f0a39e217123d8ec9ef4a9988", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NmRlMThiNjE5ODU0N2YwYTM5ZTIxNzEyM2Q4ZWM5ZWY0YTk5ODg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T15:22:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand::reseeding: seed the reseeder in the SeedableRng impl.\n\nThis stops us relying on Default here.", "tree": {"sha": "16fe3ff6012e6395db3b80c5b01eb92b76db05d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16fe3ff6012e6395db3b80c5b01eb92b76db05d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86de18b6198547f0a39e217123d8ec9ef4a9988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86de18b6198547f0a39e217123d8ec9ef4a9988", "html_url": "https://github.com/rust-lang/rust/commit/d86de18b6198547f0a39e217123d8ec9ef4a9988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86de18b6198547f0a39e217123d8ec9ef4a9988/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c", "html_url": "https://github.com/rust-lang/rust/commit/649c1759e8b56f0ac31dd31e46eae81b7ffd1e2c"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "f68bf71ba7f5dc6b2a79c15e0e6ed2e71232b7c4", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d86de18b6198547f0a39e217123d8ec9ef4a9988/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86de18b6198547f0a39e217123d8ec9ef4a9988/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=d86de18b6198547f0a39e217123d8ec9ef4a9988", "patch": "@@ -762,8 +762,7 @@ pub fn task_rng() -> @mut TaskRng {\n /// ```\n pub fn seed_task_rng(seed: &[uint]) {\n     let t_r = task_rng();\n-    (*t_r).reseed(seed);\n-    t_r.reseeder = DontReseed;\n+    (*t_r).reseed((DontReseed, seed));\n }\n \n // Allow direct chaining with `task_rng`"}, {"sha": "3b4919392fc2995bab8f010a5f244b1acf4385fb", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d86de18b6198547f0a39e217123d8ec9ef4a9988/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86de18b6198547f0a39e217123d8ec9ef4a9988/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=d86de18b6198547f0a39e217123d8ec9ef4a9988", "patch": "@@ -76,19 +76,21 @@ impl<R: Rng, Rsdr: Reseeder<R>> Rng for ReseedingRng<R, Rsdr> {\n     }\n }\n \n-impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default> SeedableRng<S> for ReseedingRng<R, Rsdr> {\n-    fn reseed(&mut self, seed: S) {\n+impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R>>\n+     SeedableRng<(Rsdr, S)> for ReseedingRng<R, Rsdr> {\n+    fn reseed(&mut self, (rsdr, seed): (Rsdr, S)) {\n         self.rng.reseed(seed);\n+        self.reseeder = rsdr;\n         self.bytes_generated = 0;\n     }\n-    /// Create a new `ReseedingRng` from the given seed. This uses\n-    /// default values for both `generation_threshold` and `reseeder`.\n-    fn from_seed(seed: S) -> ReseedingRng<R, Rsdr> {\n+    /// Create a new `ReseedingRng` from the given reseeder and\n+    /// seed. This uses a default value for `generation_threshold`.\n+    fn from_seed((rsdr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> {\n         ReseedingRng {\n             rng: SeedableRng::from_seed(seed),\n             generation_threshold: DEFAULT_GENERATION_THRESHOLD,\n             bytes_generated: 0,\n-            reseeder: Default::default()\n+            reseeder: rsdr\n         }\n     }\n }\n@@ -184,17 +186,17 @@ mod test {\n \n     #[test]\n     fn test_rng_seeded() {\n-        let mut ra: MyRng = SeedableRng::from_seed(2);\n-        let mut rb: MyRng = SeedableRng::from_seed(2);\n+        let mut ra: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n+        let mut rb: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n \n     #[test]\n     fn test_rng_reseed() {\n-        let mut r: MyRng = SeedableRng::from_seed(3);\n+        let mut r: MyRng = SeedableRng::from_seed((ReseedWithDefault, 3));\n         let string1 = r.gen_ascii_str(100);\n \n-        r.reseed(3);\n+        r.reseed((ReseedWithDefault, 3));\n \n         let string2 = r.gen_ascii_str(100);\n         assert_eq!(string1, string2);"}]}