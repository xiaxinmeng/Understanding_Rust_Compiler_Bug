{"sha": "a2dde9a69218ab350b442caec00d2b991ba2262c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZGRlOWE2OTIxOGFiMzUwYjQ0MmNhZWMwMGQyYjk5MWJhMjI2MmM=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T23:19:45Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:49Z"}, "message": "Allow anti-quotes to also be ast::ty rather than just ast::expr.", "tree": {"sha": "c66979892a5229502d56c586f2327ef97f872e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c66979892a5229502d56c586f2327ef97f872e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2dde9a69218ab350b442caec00d2b991ba2262c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dde9a69218ab350b442caec00d2b991ba2262c", "html_url": "https://github.com/rust-lang/rust/commit/a2dde9a69218ab350b442caec00d2b991ba2262c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2dde9a69218ab350b442caec00d2b991ba2262c/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7fab77102057b55202992c7e73d62d7123f6356", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fab77102057b55202992c7e73d62d7123f6356", "html_url": "https://github.com/rust-lang/rust/commit/f7fab77102057b55202992c7e73d62d7123f6356"}], "stats": {"total": 97, "additions": 77, "deletions": 20}, "files": [{"sha": "d8044ae3807abd6accefa20220c66844e8987e7b", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=a2dde9a69218ab350b442caec00d2b991ba2262c", "patch": "@@ -285,7 +285,7 @@ enum mac_ {\n     // the span is used by the quoter/anti-quoter ...\n     mac_qq(span /* span of expr */, @expr), // quasi-quote\n     mac_aq(span /* span of quote */, @expr), // anti-quote\n-    mac_var(uint),\n+    mac_var(uint)\n }\n \n type lit = spanned<lit_>;"}, {"sha": "23e6eba27759f031c3e4faec03c15a3adb1eee66", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=a2dde9a69218ab350b442caec00d2b991ba2262c", "patch": "@@ -2,7 +2,7 @@ import driver::session;\n \n import option::{none, some};\n \n-import syntax::ast::{crate, expr_, expr_mac, mac_invoc,\n+import syntax::ast::{crate, expr_, mac_invoc,\n                      mac_qq, mac_aq, mac_var};\n import syntax::fold::*;\n import syntax::visit::*;\n@@ -17,68 +17,98 @@ import std::io::*;\n import codemap::span;\n \n type aq_ctxt = @{lo: uint,\n-                 mutable gather: [{lo: uint, hi: uint, e: @ast::expr}]};\n+                 mutable gather: [{lo: uint, hi: uint,\n+                                   e: @ast::expr, constr: str}]};\n+enum fragment {\n+    from_expr(@ast::expr),\n+    from_ty(@ast::ty)\n+}\n \n iface qq_helper {\n     fn span() -> span;\n     fn visit(aq_ctxt, vt<aq_ctxt>);\n+    fn extract_mac() -> option<ast::mac_>;\n     fn mk_parse_fn(ext_ctxt,span) -> @ast::expr;\n }\n impl of qq_helper for @ast::expr {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_expr(self, cx, v);}\n+    fn extract_mac() -> option<ast::mac_> {\n+        alt (self.node) {\n+          ast::expr_mac({node: mac, _}) {some(mac)}\n+          _ {none}\n+        }\n+    }\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_expr\"])\n     }\n }\n impl of qq_helper for @ast::ty {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_ty(self, cx, v);}\n+    fn extract_mac() -> option<ast::mac_> {\n+        alt (self.node) {\n+          ast::ty_mac({node: mac, _}) {some(mac)}\n+          _ {none}\n+        }\n+    }\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_ty\"])\n     }\n }\n impl of qq_helper for @ast::item {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_item(self, cx, v);}\n+    fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_item\"])\n     }\n }\n impl of qq_helper for @ast::stmt {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_stmt(self, cx, v);}\n+    fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_stmt\"])\n     }\n }\n impl of qq_helper for @ast::pat {\n     fn span() -> span {self.span}\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_pat(self, cx, v);}\n+    fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n         mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_pat\"])\n     }\n }\n \n fn gather_anti_quotes<N: qq_helper>(lo: uint, node: N) -> aq_ctxt\n {\n-    let v = @{visit_expr: visit_expr_aq\n+    let v = @{visit_expr: visit_aq_expr,\n+              visit_ty: visit_aq_ty\n               with *default_visitor()};\n     let cx = @{lo:lo, mutable gather: []};\n     node.visit(cx, mk_vt(v));\n     ret cx;\n }\n \n-fn visit_expr_aq(expr: @ast::expr, &&cx: aq_ctxt, v: vt<aq_ctxt>)\n+fn visit_aq<T:qq_helper>(node: T, constr: str, &&cx: aq_ctxt, v: vt<aq_ctxt>)\n {\n-    alt (expr.node) {\n-      expr_mac({node: mac_aq(sp, e), _}) {\n+    alt (node.extract_mac()) {\n+      some(mac_aq(sp, e)) {\n         cx.gather += [{lo: sp.lo - cx.lo, hi: sp.hi - cx.lo,\n-                       e: e}];\n+                       e: e, constr: constr}];\n       }\n-      _ {visit_expr(expr, cx, v);}\n+      _ {node.visit(cx, v);}\n     }\n }\n+// FIXME: these are only here because I (kevina) couldn't figure out how to\n+// get bind to work in gather_anti_quotes\n+fn visit_aq_expr(node: @ast::expr, &&cx: aq_ctxt, v: vt<aq_ctxt>) {\n+    visit_aq(node,\"from_expr\",cx,v);\n+}\n+fn visit_aq_ty(node: @ast::ty, &&cx: aq_ctxt, v: vt<aq_ctxt>) {\n+    visit_aq(node,\"from_ty\",cx,v);\n+}\n \n fn is_space(c: char) -> bool {\n     syntax::parse::lexer::is_whitespace(c)\n@@ -211,28 +241,51 @@ fn expand_qquote<N: qq_helper>\n         rcall = mk_call(cx,sp,\n                         [\"syntax\", \"ext\", \"qquote\", \"replace\"],\n                         [pcall,\n-                         mk_vec_e(cx,sp, vec::map(qcx.gather, {|g| g.e}))]);\n+                         mk_vec_e(cx,sp, vec::map(qcx.gather) {|g|\n+                             mk_call(cx,sp,\n+                                     [\"syntax\", \"ext\", \"qquote\", g.constr],\n+                                     [g.e])\n+                         })]);\n     }\n \n     ret rcall;\n }\n \n-fn replace(e: @ast::expr, repls: [@ast::expr]) -> @ast::expr {\n+fn replace(e: @ast::expr, repls: [fragment]) -> @ast::expr {\n     let aft = default_ast_fold();\n     let f_pre = {fold_expr: bind replace_expr(repls, _, _, _,\n-                                              aft.fold_expr)\n+                                              aft.fold_expr),\n+                 fold_ty: bind replace_ty(repls, _, _, _,\n+                                          aft.fold_ty)\n                  with *aft};\n     let f = make_fold(f_pre);\n     ret f.fold_expr(e);\n }\n \n-fn replace_expr(repls: [@ast::expr],\n+fn replace_expr(repls: [fragment],\n                 e: ast::expr_, s: span, fld: ast_fold,\n                 orig: fn@(ast::expr_, span, ast_fold)->(ast::expr_, span))\n     -> (ast::expr_, span)\n {\n     alt e {\n-      expr_mac({node: mac_var(i), _}) {let r = repls[i]; (r.node, r.span)}\n+      ast::expr_mac({node: mac_var(i), _}) {\n+        alt (repls[i]) {\n+          from_expr(r) {(r.node, r.span)}\n+          _ {fail /* fixme error message */}}}\n+      _ {orig(e,s,fld)}\n+    }\n+}\n+\n+fn replace_ty(repls: [fragment],\n+                e: ast::ty_, s: span, fld: ast_fold,\n+                orig: fn@(ast::ty_, span, ast_fold)->(ast::ty_, span))\n+    -> (ast::ty_, span)\n+{\n+    alt e {\n+      ast::ty_mac({node: mac_var(i), _}) {\n+        alt (repls[i]) {\n+          from_ty(r) {(r.node, r.span)}\n+          _ {fail /* fixme error message */}}}\n       _ {orig(e,s,fld)}\n     }\n }"}, {"sha": "7253109d022feae6ddc36a8219fcd97adbd4597e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a2dde9a69218ab350b442caec00d2b991ba2262c", "patch": "@@ -420,6 +420,13 @@ fn parse_ret_ty(p: parser) -> (ast::ret_style, @ast::ty) {\n \n fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     let lo = p.span.lo;\n+\n+    alt have_dollar(p) {\n+      some(e) {ret @spanned(lo, p.span.hi,\n+                            ast::ty_mac(spanned(lo, p.span.hi, e)))}\n+      none {}\n+    }\n+\n     let t: ast::ty_;\n     // FIXME: do something with this\n "}, {"sha": "ac9f3b23495014671b49b98fa09b76d9b3ad244b", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2dde9a69218ab350b442caec00d2b991ba2262c/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=a2dde9a69218ab350b442caec00d2b991ba2262c", "patch": "@@ -50,12 +50,6 @@ fn main() {\n     let abc = #ast{23};\n     check_pp(abc,  pprust::print_expr, \"23\");\n \n-    let expr = #ast{1 - $0 + 8};\n-    check_pp(expr,  pprust::print_expr, \"1 - $0 + 8\");\n-\n-    let expr2 = rustc::syntax::ext::qquote::replace(expr, [abc]);\n-    check_pp(expr2,  pprust::print_expr, \"1 - 23 + 8\");\n-\n     let expr3 = #ast{2 - $(abc) + 7};\n     check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n \n@@ -68,6 +62,9 @@ fn main() {\n     let item = #ast(item){const x : int = 10;};\n     check_pp(item, pprust::print_item, \"const x: int = 10;\");\n \n+    //let item2: @ast::item = #ast(item){const x : int = $(abc);};\n+    //check_pp(item2, pprust::print_item, \"const x: int = 23;\");\n+\n     let stmt = #ast(stmt){let x = 20;};\n     check_pp(*stmt, pprust::print_stmt, \"let x = 20;\");\n "}]}