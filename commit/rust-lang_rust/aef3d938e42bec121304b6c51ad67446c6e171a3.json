{"sha": "aef3d938e42bec121304b6c51ad67446c6e171a3", "node_id": "C_kwDOAAsO6NoAKGFlZjNkOTM4ZTQyYmVjMTIxMzA0YjZjNTFhZDY3NDQ2YzZlMTcxYTM", "commit": {"author": {"name": "Qiu Chaofan", "email": "qcf@ecnelises.com", "date": "2022-08-25T06:37:29Z"}, "committer": {"name": "Qiu Chaofan", "email": "qcf@ecnelises.com", "date": "2022-11-17T08:36:54Z"}, "message": "Add powerpc64-ibm-aix as Tier-3 target", "tree": {"sha": "85f9c3772312c7eb98c39b7a6ad04c4055a87430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f9c3772312c7eb98c39b7a6ad04c4055a87430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef3d938e42bec121304b6c51ad67446c6e171a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef3d938e42bec121304b6c51ad67446c6e171a3", "html_url": "https://github.com/rust-lang/rust/commit/aef3d938e42bec121304b6c51ad67446c6e171a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef3d938e42bec121304b6c51ad67446c6e171a3/comments", "author": {"login": "ecnelises", "id": 10329663, "node_id": "MDQ6VXNlcjEwMzI5NjYz", "avatar_url": "https://avatars.githubusercontent.com/u/10329663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecnelises", "html_url": "https://github.com/ecnelises", "followers_url": "https://api.github.com/users/ecnelises/followers", "following_url": "https://api.github.com/users/ecnelises/following{/other_user}", "gists_url": "https://api.github.com/users/ecnelises/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecnelises/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecnelises/subscriptions", "organizations_url": "https://api.github.com/users/ecnelises/orgs", "repos_url": "https://api.github.com/users/ecnelises/repos", "events_url": "https://api.github.com/users/ecnelises/events{/privacy}", "received_events_url": "https://api.github.com/users/ecnelises/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecnelises", "id": 10329663, "node_id": "MDQ6VXNlcjEwMzI5NjYz", "avatar_url": "https://avatars.githubusercontent.com/u/10329663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecnelises", "html_url": "https://github.com/ecnelises", "followers_url": "https://api.github.com/users/ecnelises/followers", "following_url": "https://api.github.com/users/ecnelises/following{/other_user}", "gists_url": "https://api.github.com/users/ecnelises/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecnelises/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecnelises/subscriptions", "organizations_url": "https://api.github.com/users/ecnelises/orgs", "repos_url": "https://api.github.com/users/ecnelises/repos", "events_url": "https://api.github.com/users/ecnelises/events{/privacy}", "received_events_url": "https://api.github.com/users/ecnelises/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251831ece9601d64172127b6caae9087358c2386", "url": "https://api.github.com/repos/rust-lang/rust/commits/251831ece9601d64172127b6caae9087358c2386", "html_url": "https://github.com/rust-lang/rust/commit/251831ece9601d64172127b6caae9087358c2386"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "c71c4ba2cc9020d6b15d0b57b2fed2b974d1605a", "filename": "compiler/rustc_target/src/spec/aix_base.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs?ref=aef3d938e42bec121304b6c51ad67446c6e171a3", "patch": "@@ -0,0 +1,32 @@\n+use crate::abi::Endian;\n+use crate::spec::{crt_objects, cvs, Cc, CodeModel, LinkOutputKind, LinkerFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        abi: \"vec-extabi\".into(),\n+        code_model: Some(CodeModel::Small),\n+        cpu: \"pwr7\".into(),\n+        os: \"aix\".into(),\n+        vendor: \"ibm\".into(),\n+        dynamic_linking: true,\n+        endian: Endian::Big,\n+        executables: true,\n+        archive_format: \"aix_big\".into(),\n+        families: cvs![\"unix\"],\n+        has_rpath: false,\n+        has_thread_local: true,\n+        crt_static_respected: true,\n+        linker_flavor: LinkerFlavor::Unix(Cc::No),\n+        linker: Some(\"ld\".into()),\n+        eh_frame_header: false,\n+        is_like_aix: true,\n+        default_dwarf_version: 3,\n+        function_sections: true,\n+        pre_link_objects: crt_objects::new(&[\n+            (LinkOutputKind::DynamicNoPicExe, &[\"/usr/lib/crt0_64.o\", \"/usr/lib/crti_64.o\"]),\n+            (LinkOutputKind::DynamicPicExe, &[\"/usr/lib/crt0_64.o\", \"/usr/lib/crti_64.o\"]),\n+        ]),\n+        dll_suffix: \".a\".into(),\n+        ..Default::default()\n+    }\n+}"}, {"sha": "d4b06c46cd752dbb028752877ef7e5a3029025e0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=aef3d938e42bec121304b6c51ad67446c6e171a3", "patch": "@@ -57,6 +57,7 @@ use rustc_macros::HashStable_Generic;\n pub mod abi;\n pub mod crt_objects;\n \n+mod aix_base;\n mod android_base;\n mod apple_base;\n mod avr_gnu_base;\n@@ -1026,6 +1027,7 @@ supported_targets! {\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnuspe\", powerpc_unknown_linux_gnuspe),\n     (\"powerpc-unknown-linux-musl\", powerpc_unknown_linux_musl),\n+    (\"powerpc64-ibm-aix\", powerpc64_ibm_aix),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n     (\"powerpc64-unknown-linux-musl\", powerpc64_unknown_linux_musl),\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n@@ -1453,6 +1455,9 @@ pub struct TargetOptions {\n     pub families: StaticCow<[StaticCow<str>]>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n+    /// Whether the target toolchain is like AIX's. Linker options on AIX are special and it uses\n+    /// XCOFF as binary format. Defaults to false.\n+    pub is_like_aix: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n     /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     /// Also indiates whether to use Apple-specific ABI changes, such as extending function\n@@ -1808,6 +1813,7 @@ impl Default for TargetOptions {\n             staticlib_suffix: \".a\".into(),\n             families: cvs![],\n             abi_return_struct_as_int: false,\n+            is_like_aix: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n             is_like_windows: false,\n@@ -2465,6 +2471,7 @@ impl Target {\n         key!(staticlib_suffix);\n         key!(families, TargetFamilies);\n         key!(abi_return_struct_as_int, bool);\n+        key!(is_like_aix, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n         key!(is_like_windows, bool);\n@@ -2716,6 +2723,7 @@ impl ToJson for Target {\n         target_option_val!(staticlib_suffix);\n         target_option_val!(families, \"target-family\");\n         target_option_val!(abi_return_struct_as_int);\n+        target_option_val!(is_like_aix);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n         target_option_val!(is_like_windows);"}, {"sha": "e3eb9bccd5ed78d5001471c83cec143a3586d02c", "filename": "compiler/rustc_target/src/spec/powerpc64_ibm_aix.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef3d938e42bec121304b6c51ad67446c6e171a3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs?ref=aef3d938e42bec121304b6c51ad67446c6e171a3", "patch": "@@ -0,0 +1,23 @@\n+use crate::spec::{Cc, LinkerFlavor, Target};\n+\n+pub fn target() -> Target {\n+    let mut base = super::aix_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Unix(Cc::No),\n+        &[\n+            \"-b64\".into(),\n+            \"-bpT:0x100000000\".into(),\n+            \"-bpD:0x110000000\".into(),\n+            \"-bcdtors:all:0:s\".into(),\n+        ],\n+    );\n+\n+    Target {\n+        llvm_target: \"powerpc64-ibm-aix\".into(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:a-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: base,\n+    }\n+}"}, {"sha": "27e911c6be5a25a8082490822d3a8e92e97bd7fa", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef3d938e42bec121304b6c51ad67446c6e171a3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/aef3d938e42bec121304b6c51ad67446c6e171a3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=aef3d938e42bec121304b6c51ad67446c6e171a3", "patch": "@@ -283,6 +283,7 @@ target | std | host | notes\n `powerpc64-wrs-vxworks` | ? |  |\n `powerpc64le-unknown-linux-musl` | ? |  |\n [`powerpc64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/powerpc64\n+`powerpc64-ibm-aix` | ? |  | 64-bit AIX (7.2 and newer)\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n `riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n `riscv32im-unknown-none-elf` | * |  | Bare RISC-V (RV32IM ISA)"}, {"sha": "29ececea5d3941ea4f61099ef1deb17155bcc425", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef3d938e42bec121304b6c51ad67446c6e171a3/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef3d938e42bec121304b6c51ad67446c6e171a3/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=aef3d938e42bec121304b6c51ad67446c6e171a3", "patch": "@@ -6,7 +6,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value"}]}