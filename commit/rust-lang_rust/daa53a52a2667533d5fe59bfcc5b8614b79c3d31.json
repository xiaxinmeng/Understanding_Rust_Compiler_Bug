{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTUzYTUyYTI2Njc1MzNkNWZlNTliZmNjNWI4NjE0Yjc5YzNkMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-17T10:15:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-17T10:15:57Z"}, "message": "Auto merge of #57694 - pietroalbini:revert-beta-on-master, r=pietroalbini\n\nRevert \"Auto merge of #57670 - rust-lang:beta-next, r=Mark-Simulacrum\"\n\nFor whatever reason bors merged this in master `:/`\n\nr? @ghost", "tree": {"sha": "cb3eaabda0fe9eb084f5596cf1a4808fa5c14d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3eaabda0fe9eb084f5596cf1a4808fa5c14d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659994627234ce7d95a1a52ad8756ce661059adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/659994627234ce7d95a1a52ad8756ce661059adf", "html_url": "https://github.com/rust-lang/rust/commit/659994627234ce7d95a1a52ad8756ce661059adf"}, {"sha": "d158ef64e820041110bc5519abb9012010cc2cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d158ef64e820041110bc5519abb9012010cc2cf0", "html_url": "https://github.com/rust-lang/rust/commit/d158ef64e820041110bc5519abb9012010cc2cf0"}], "stats": {"total": 32, "additions": 6, "deletions": 26}, "files": [{"sha": "b0e1b1651055f6b7788d7c107c76f385d780e585", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "patch": "@@ -43,7 +43,7 @@ fi\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n-export RUST_RELEASE_CHANNEL=beta\n+export RUST_RELEASE_CHANNEL=nightly\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\""}, {"sha": "6827364c0f805d34f153596b93d8cefe9cefe5f3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "patch": "@@ -47,8 +47,6 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n-                // FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n-                #[cfg_attr(stage0, allow(unused_attributes))]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n                 pub struct $Ty($Int);\n             }\n@@ -70,8 +68,6 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n-                        // FIXME: this unsafe block is actually needed\n-                        #[cfg_attr(stage0, allow(unused_unsafe))]\n                         Some(unsafe { $Ty(n) })\n                     } else {\n                         None"}, {"sha": "02eef07afd7ab6890cad3ecdd7bd717b9b11d1fa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "patch": "@@ -2718,8 +2718,6 @@ impl<T: ?Sized> PartialOrd for *mut T {\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[doc(hidden)]\n #[repr(transparent)]\n-// FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n-#[cfg_attr(stage0, allow(unused_attributes))]\n #[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n     pointer: *const T,\n@@ -2785,8 +2783,6 @@ impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n-            // FIXME: this unsafe block is actually needed\n-            #[cfg_attr(stage0, allow(unused_unsafe))]\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n@@ -2843,26 +2839,20 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     fn from(p: NonNull<T>) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: p.pointer, _marker: PhantomData } }\n     }\n }\n@@ -3052,8 +3042,6 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: unique.pointer } }\n     }\n }\n@@ -3062,8 +3050,6 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n@@ -3072,8 +3058,6 @@ impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n-        // FIXME: this unsafe block is actually needed\n-        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "2e376ed1cede5d3f12829b527f46e8218b87d0c4", "filename": "src/stage0.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "patch": "@@ -12,9 +12,9 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-01-16\n-rustc: 1.32.0\n-cargo: 0.33.0\n+date: 2019-01-04\n+rustc: beta\n+cargo: beta\n \n # When making a stable release the process currently looks like:\n #\n@@ -34,4 +34,4 @@ cargo: 0.33.0\n # looking at a beta source tarball and it's uncommented we'll shortly comment it\n # out.\n \n-dev: 1\n+#dev: 1"}, {"sha": "2b4a5f1f0bb6e13759e88ea9512527b0beba154f", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "patch": "@@ -1 +1 @@\n-Subproject commit 9b5d4b755617d60dd841912b354be8a6b6b3849a\n+Subproject commit 2b4a5f1f0bb6e13759e88ea9512527b0beba154f"}]}