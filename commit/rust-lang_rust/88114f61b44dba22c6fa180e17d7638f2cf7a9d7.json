{"sha": "88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTE0ZjYxYjQ0ZGJhMjJjNmZhMTgwZTE3ZDc2MzhmMmNmN2E5ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T21:33:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-29T22:07:51Z"}, "message": "rustc: Group linked libraries where needed\n\nThis commit fixes a longstanding issue with the compiler with circular\ndependencies between libcore and libstd. The `core` crate requires at least one\nsymbol, the ability to unwind. The `std` crate is the crate which actually\ndefines this symbol, but the `std` crate also depends on the `core` crate.\n\nThis circular dependency is in general disallowed in Rust as crates cannot have\ncycles amongst them. A special exception is made just for core/std, but this is\nalso unfortunately incompatible with how GNU linkers work. GNU linkers will\nprocess undefined symbols in a left-to-right fashion, only actually linking an\nrlib like libstd if there are any symbols used from it. This strategy is\nincompatible with circular dependencies because if we otherwise don't use\nsymbols from libstd we don't discover that we needed it until we're later\nprocessing libcore's symbols!\n\nTo fix this GNU linkers support the `--start-group` and `--end-group` options\nwhich indicate \"libraries between these markers may have circular dependencies\namongst them. The linker invocation has been updated to automatically pass these\narguments when we're invoking a GNU linker and automatically calculate where the\narguments need to go (around libstd and libcore)\n\nCloses #18807\nCloses #47074", "tree": {"sha": "c5e4446bfcc983fd1b7c3cb4bc615eee80cdf310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e4446bfcc983fd1b7c3cb4bc615eee80cdf310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "html_url": "https://github.com/rust-lang/rust/commit/88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae544ee1c90afc0f939753014dc5e884cb2749a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae544ee1c90afc0f939753014dc5e884cb2749a0", "html_url": "https://github.com/rust-lang/rust/commit/ae544ee1c90afc0f939753014dc5e884cb2749a0"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "6ba3ad879b7d5555435795600df72ba4024639ac", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -32,6 +32,7 @@ use rustc::hir::def_id::CrateNum;\n use tempdir::TempDir;\n use rustc_back::{PanicStrategy, RelroLevel};\n use rustc_back::target::TargetTriple;\n+use rustc_data_structures::fx::FxHashSet;\n use context::get_reloc_model;\n use llvm;\n \n@@ -1188,9 +1189,56 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // crates.\n     let deps = &trans.crate_info.used_crates_dynamic;\n \n+    // There's a few internal crates in the standard library (aka libcore and\n+    // libstd) which actually have a circular dependence upon one another. This\n+    // currently arises through \"weak lang items\" where libcore requires things\n+    // like `rust_begin_unwind` but libstd ends up defining it. To get this\n+    // circular dependence to work correctly in all situations we'll need to be\n+    // sure to correctly apply the `--start-group` and `--end-group` options to\n+    // GNU linkers, otherwise if we don't use any other symbol from the standard\n+    // library it'll get discarded and the whole application won't link.\n+    //\n+    // In this loop we're calculating the `group_end`, after which crate to\n+    // pass `--end-group` and `group_start`, before which crate to pass\n+    // `--start-group`. We currently do this by passing `--end-group` after\n+    // the first crate (when iterating backwards) that requires a lang item\n+    // defined somewhere else. Once that's set then when we've defined all the\n+    // necessary lang items we'll pass `--start-group`.\n+    //\n+    // Note that this isn't amazing logic for now but it should do the trick\n+    // for the current implementation of the standard library.\n+    let mut group_end = None;\n+    let mut group_start = None;\n+    let mut end_with = FxHashSet();\n+    let info = &trans.crate_info;\n+    for &(cnum, _) in deps.iter().rev() {\n+        if let Some(missing) = info.missing_lang_items.get(&cnum) {\n+            end_with.extend(missing.iter().cloned());\n+            if end_with.len() > 0 && group_end.is_none() {\n+                group_end = Some(cnum);\n+            }\n+        }\n+        end_with.retain(|item| info.lang_item_to_crate.get(item) != Some(&cnum));\n+        if end_with.len() == 0 && group_end.is_some() {\n+            group_start = Some(cnum);\n+            break\n+        }\n+    }\n+\n+    // If we didn't end up filling in all lang items from upstream crates then\n+    // we'll be filling it in with our crate. This probably means we're the\n+    // standard library itself, so skip this for now.\n+    if group_end.is_some() && group_start.is_none() {\n+        group_end = None;\n+    }\n+\n     let mut compiler_builtins = None;\n \n     for &(cnum, _) in deps.iter() {\n+        if group_start == Some(cnum) {\n+            cmd.group_start();\n+        }\n+\n         // We may not pass all crates through to the linker. Some crates may\n         // appear statically in an existing dylib, meaning we'll pick up all the\n         // symbols from the dylib.\n@@ -1217,6 +1265,10 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 add_dynamic_crate(cmd, sess, &src.dylib.as_ref().unwrap().0)\n             }\n         }\n+\n+        if group_end == Some(cnum) {\n+            cmd.group_end();\n+        }\n     }\n \n     // compiler-builtins are always placed last to ensure that they're"}, {"sha": "ebcf06d63be26c74e8baf9cba6c6f46a2883bcd0", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -125,6 +125,8 @@ pub trait Linker {\n     fn args(&mut self, args: &[String]);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);\n     fn subsystem(&mut self, subsystem: &str);\n+    fn group_start(&mut self);\n+    fn group_end(&mut self);\n     // Should have been finalize(self), but we don't support self-by-value on trait objects (yet?).\n     fn finalize(&mut self) -> Command;\n }\n@@ -420,6 +422,18 @@ impl<'a> Linker for GccLinker<'a> {\n         ::std::mem::swap(&mut cmd, &mut self.cmd);\n         cmd\n     }\n+\n+    fn group_start(&mut self) {\n+        if !self.sess.target.target.options.is_like_osx {\n+            self.linker_arg(\"--start-group\");\n+        }\n+    }\n+\n+    fn group_end(&mut self) {\n+        if !self.sess.target.target.options.is_like_osx {\n+            self.linker_arg(\"--end-group\");\n+        }\n+    }\n }\n \n pub struct MsvcLinker<'a> {\n@@ -648,6 +662,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         ::std::mem::swap(&mut cmd, &mut self.cmd);\n         cmd\n     }\n+\n+    // MSVC doesn't need group indicators\n+    fn group_start(&mut self) {}\n+    fn group_end(&mut self) {}\n }\n \n pub struct EmLinker<'a> {\n@@ -810,6 +828,10 @@ impl<'a> Linker for EmLinker<'a> {\n         ::std::mem::swap(&mut cmd, &mut self.cmd);\n         cmd\n     }\n+\n+    // Appears not necessary on Emscripten\n+    fn group_start(&mut self) {}\n+    fn group_end(&mut self) {}\n }\n \n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n@@ -953,4 +975,8 @@ impl Linker for WasmLd {\n         ::std::mem::swap(&mut cmd, &mut self.cmd);\n         cmd\n     }\n+\n+    // Not needed for now with LLD\n+    fn group_start(&mut self) {}\n+    fn group_end(&mut self) {}\n }"}, {"sha": "7ab3499ead3696623d262d0c7608f028ca4f928d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -1082,7 +1082,10 @@ impl CrateInfo {\n             used_crate_source: FxHashMap(),\n             wasm_custom_sections: BTreeMap::new(),\n             wasm_imports: FxHashMap(),\n+            lang_item_to_crate: FxHashMap(),\n+            missing_lang_items: FxHashMap(),\n         };\n+        let lang_items = tcx.lang_items();\n \n         let load_wasm_items = tcx.sess.crate_types.borrow()\n             .iter()\n@@ -1128,6 +1131,13 @@ impl CrateInfo {\n                 }\n                 info.load_wasm_imports(tcx, cnum);\n             }\n+            let missing = tcx.missing_lang_items(cnum);\n+            for &item in missing.iter() {\n+                if let Ok(id) = lang_items.require(item) {\n+                    info.lang_item_to_crate.insert(item, id.krate);\n+                }\n+            }\n+            info.missing_lang_items.insert(cnum, missing);\n         }\n \n         return info"}, {"sha": "e8a1eb3071a2959b7033c6015b1b10cb04ab500b", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -78,6 +78,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::middle::cstore::{NativeLibrary, CrateSource, LibSource};\n+use rustc::middle::lang_items::LangItem;\n use rustc::session::{Session, CompileIncomplete};\n use rustc::session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc::ty::{self, TyCtxt};\n@@ -405,6 +406,8 @@ struct CrateInfo {\n     used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n     wasm_custom_sections: BTreeMap<String, Vec<u8>>,\n     wasm_imports: FxHashMap<String, String>,\n+    lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n+    missing_lang_items: FxHashMap<CrateNum, Lrc<Vec<LangItem>>>,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "adc5be8016cf447ca614a1ac3af2a4ddf3375cd7", "filename": "src/test/run-make-fulldeps/std-core-cycle/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+ifeq ($(UNAME),Darwin)\n+FLAGS :=\n+else\n+ifdef IS_WINDOWS\n+FLAGS :=\n+else\n+FLAGS := -C link-args=-Wl,--no-undefined\n+endif\n+endif\n+\n+all:\n+\t$(RUSTC) bar.rs\n+\t$(RUSTC) foo.rs $(FLAGS)"}, {"sha": "6def5b6f5e18148cdd93854d00a48bcfd8d12f53", "filename": "src/test/run-make-fulldeps/std-core-cycle/bar.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Fbar.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(allocator_api)]\n+#![crate_type = \"rlib\"]\n+\n+use std::heap::*;\n+\n+pub struct A;\n+\n+unsafe impl<'a> Alloc for &'a A {\n+    unsafe fn alloc(&mut self, _: Layout) -> Result<*mut u8, AllocErr> {\n+        loop {}\n+    }\n+\n+    unsafe fn dealloc(&mut self, _ptr: *mut u8, _: Layout) {\n+        loop {}\n+    }\n+}"}, {"sha": "04742bba3c8773ebac939aac51e0e24e2cd078f1", "filename": "src/test/run-make-fulldeps/std-core-cycle/foo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88114f61b44dba22c6fa180e17d7638f2cf7a9d7/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs?ref=88114f61b44dba22c6fa180e17d7638f2cf7a9d7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(global_allocator)]\n+#![crate_type = \"cdylib\"]\n+\n+extern crate bar;\n+\n+#[global_allocator]\n+static A: bar::A = bar::A;\n+\n+#[no_mangle]\n+pub extern fn a(a: u32, b: u32) -> u32 {\n+    a / b\n+}"}]}