{"sha": "6d9e270a4ddf517b008537f0d8b3768db20d5436", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOWUyNzBhNGRkZjUxN2IwMDg1MzdmMGQ4YjM3NjhkYjIwZDU0MzY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-01-12T10:19:19Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Fix and test nested impl Trait", "tree": {"sha": "88b297296b6e535c674ea18dd99c1cbefb61f53d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b297296b6e535c674ea18dd99c1cbefb61f53d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9e270a4ddf517b008537f0d8b3768db20d5436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9e270a4ddf517b008537f0d8b3768db20d5436", "html_url": "https://github.com/rust-lang/rust/commit/6d9e270a4ddf517b008537f0d8b3768db20d5436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9e270a4ddf517b008537f0d8b3768db20d5436/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6", "html_url": "https://github.com/rust-lang/rust/commit/78e0ab53fb4ac444e7d62735f0b8dcc9a42004f6"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "52d54f7b53c79e490fd63193c6743396c7ad8e78", "filename": "src/librustc_mir/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d9e270a4ddf517b008537f0d8b3768db20d5436/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9e270a4ddf517b008537f0d8b3768db20d5436/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=6d9e270a4ddf517b008537f0d8b3768db20d5436", "patch": "@@ -13,8 +13,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// For example consider `fn f<'a>(x: &'a i32) -> impl Sized + 'a { x }`.\n     /// This is lowered to give HIR something like\n     ///\n-    /// type _Return<'_a> = impl Sized + '_a;\n-    /// fn f<'a>(x: &'a i32) -> _Return<'a> { x }\n+    /// type f<'a>::_Return<'_a> = impl Sized + '_a;\n+    /// fn f<'a>(x: &'a i32) -> f<'static>::_Return<'a> { x }\n     ///\n     /// When checking the return type record the type from the return and the\n     /// type used in the return value. In this case they might be `_Return<'1>`\n@@ -34,9 +34,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// `fn f<'a: 'b, 'b: 'a>(x: *mut &'b i32) -> impl Sized + 'a { x }`\n     ///\n     /// Then we map the regions in both the type and the subst to their\n-    /// `external_name` giving `concrete_type = &'a i32, substs = ['a]`. This\n-    /// will then allow `infer_opaque_definition_from_instantiation` to\n-    /// determine that `_Return<'_a> = &'_a i32`.\n+    /// `external_name` giving `concrete_type = &'a i32`,\n+    /// `substs = ['static, 'a]`. This will then allow\n+    /// `infer_opaque_definition_from_instantiation` to determine that\n+    /// `_Return<'_a> = &'_a i32`.\n     ///\n     /// There's a slight complication around closures. Given\n     /// `fn f<'a: 'a>() { || {} }` the closure's type is something like\n@@ -72,6 +73,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                                 infcx.tcx.lifetimes.re_static\n                             })\n                         }\n+                        // We don't fold regions in the predicates of opaque\n+                        // types to `ReVar`s. This means that in a case like\n+                        //\n+                        // fn f<'a: 'a>() -> impl Iterator<Item = impl Sized>\n+                        //\n+                        // The inner opaque type has `'static` in its substs.\n+                        ty::ReStatic => region,\n                         _ => {\n                             infcx.tcx.sess.delay_span_bug(\n                                 span,"}, {"sha": "7d7a084b89046ca64f759f3c455cd7ac8c0ee6e1", "filename": "src/test/ui/impl-trait/nested-return-type.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d9e270a4ddf517b008537f0d8b3768db20d5436/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9e270a4ddf517b008537f0d8b3768db20d5436/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type.rs?ref=6d9e270a4ddf517b008537f0d8b3768db20d5436", "patch": "@@ -0,0 +1,16 @@\n+// Check that nested impl Trait items work in functions with generic parameters.\n+// check-pass\n+\n+trait Captures<'a> {}\n+\n+impl<T> Captures<'_> for T {}\n+\n+fn nested_assoc_type<'a: 'a, T>() -> impl Iterator<Item = impl Sized> {\n+    [1].iter()\n+}\n+\n+fn nested_assoc_lifetime<'a: 'a, T>() -> impl Iterator<Item = impl Captures<'a>> {\n+    [1].iter()\n+}\n+\n+fn main() {}"}]}