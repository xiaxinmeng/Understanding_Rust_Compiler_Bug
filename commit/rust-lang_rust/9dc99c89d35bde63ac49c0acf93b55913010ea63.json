{"sha": "9dc99c89d35bde63ac49c0acf93b55913010ea63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzk5Yzg5ZDM1YmRlNjNhYzQ5YzBhY2Y5M2I1NTkxMzAxMGVhNjM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T00:25:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:20:12Z"}, "message": "rustc: de-@ stats.", "tree": {"sha": "3dfbd4d3610428b596b9312cc6fed1c0316a330d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfbd4d3610428b596b9312cc6fed1c0316a330d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc99c89d35bde63ac49c0acf93b55913010ea63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc99c89d35bde63ac49c0acf93b55913010ea63", "html_url": "https://github.com/rust-lang/rust/commit/9dc99c89d35bde63ac49c0acf93b55913010ea63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc99c89d35bde63ac49c0acf93b55913010ea63/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "938eaaa304445101e2c516a9d339dcbc0a416d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/938eaaa304445101e2c516a9d339dcbc0a416d58", "html_url": "https://github.com/rust-lang/rust/commit/938eaaa304445101e2c516a9d339dcbc0a416d58"}], "stats": {"total": 146, "additions": 70, "deletions": 76}, "files": [{"sha": "848fd8d362e12a30851a865175c5555bad978b72", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 52, "deletions": 58, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9dc99c89d35bde63ac49c0acf93b55913010ea63", "patch": "@@ -27,7 +27,7 @@ use util::nodemap::{NodeMap, NodeSet};\n \n use serialize::Encodable;\n use std::cast;\n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n use std::hash;\n use std::hash::Hash;\n use std::io::MemWriter;\n@@ -76,26 +76,9 @@ pub struct EncodeParams<'a> {\n     pub encode_inlined_item: EncodeInlinedItem<'a>,\n }\n \n-pub struct Stats {\n-    inline_bytes: Cell<u64>,\n-    attr_bytes: Cell<u64>,\n-    dep_bytes: Cell<u64>,\n-    lang_item_bytes: Cell<u64>,\n-    native_lib_bytes: Cell<u64>,\n-    macro_registrar_fn_bytes: Cell<u64>,\n-    macro_defs_bytes: Cell<u64>,\n-    impl_bytes: Cell<u64>,\n-    misc_bytes: Cell<u64>,\n-    item_bytes: Cell<u64>,\n-    index_bytes: Cell<u64>,\n-    zero_bytes: Cell<u64>,\n-    total_bytes: Cell<u64>,\n-}\n-\n pub struct EncodeContext<'a> {\n     pub diag: &'a SpanHandler,\n     pub tcx: &'a ty::ctxt,\n-    pub stats: @Stats,\n     pub reexports2: &'a middle::resolve::ExportMap2,\n     pub item_symbols: &'a RefCell<NodeMap<~str>>,\n     pub non_inlineable_statics: &'a RefCell<NodeSet>,\n@@ -1701,20 +1684,33 @@ pub fn encode_metadata(parms: EncodeParams, krate: &Crate) -> Vec<u8> {\n }\n \n fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate) {\n-    let stats = Stats {\n-        inline_bytes: Cell::new(0),\n-        attr_bytes: Cell::new(0),\n-        dep_bytes: Cell::new(0),\n-        lang_item_bytes: Cell::new(0),\n-        native_lib_bytes: Cell::new(0),\n-        macro_registrar_fn_bytes: Cell::new(0),\n-        macro_defs_bytes: Cell::new(0),\n-        impl_bytes: Cell::new(0),\n-        misc_bytes: Cell::new(0),\n-        item_bytes: Cell::new(0),\n-        index_bytes: Cell::new(0),\n-        zero_bytes: Cell::new(0),\n-        total_bytes: Cell::new(0),\n+    struct Stats {\n+        attr_bytes: u64,\n+        dep_bytes: u64,\n+        lang_item_bytes: u64,\n+        native_lib_bytes: u64,\n+        macro_registrar_fn_bytes: u64,\n+        macro_defs_bytes: u64,\n+        impl_bytes: u64,\n+        misc_bytes: u64,\n+        item_bytes: u64,\n+        index_bytes: u64,\n+        zero_bytes: u64,\n+        total_bytes: u64,\n+    }\n+    let mut stats = Stats {\n+        attr_bytes: 0,\n+        dep_bytes: 0,\n+        lang_item_bytes: 0,\n+        native_lib_bytes: 0,\n+        macro_registrar_fn_bytes: 0,\n+        macro_defs_bytes: 0,\n+        impl_bytes: 0,\n+        misc_bytes: 0,\n+        item_bytes: 0,\n+        index_bytes: 0,\n+        zero_bytes: 0,\n+        total_bytes: 0,\n     };\n     let EncodeParams {\n         item_symbols,\n@@ -1730,7 +1726,6 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     let ecx = EncodeContext {\n         diag: diag,\n         tcx: tcx,\n-        stats: @stats,\n         reexports2: reexports2,\n         item_symbols: item_symbols,\n         non_inlineable_statics: non_inlineable_statics,\n@@ -1748,76 +1743,75 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     let mut i = ebml_w.writer.tell().unwrap();\n     let crate_attrs = synthesize_crate_attrs(&ecx, krate);\n     encode_attributes(&mut ebml_w, crate_attrs.as_slice());\n-    ecx.stats.attr_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.attr_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     i = ebml_w.writer.tell().unwrap();\n     encode_crate_deps(&mut ebml_w, ecx.cstore);\n-    ecx.stats.dep_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.dep_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode the language items.\n     i = ebml_w.writer.tell().unwrap();\n     encode_lang_items(&ecx, &mut ebml_w);\n-    ecx.stats.lang_item_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.lang_item_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode the native libraries used\n     i = ebml_w.writer.tell().unwrap();\n     encode_native_libraries(&ecx, &mut ebml_w);\n-    ecx.stats.native_lib_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.native_lib_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode the macro registrar function\n     i = ebml_w.writer.tell().unwrap();\n     encode_macro_registrar_fn(&ecx, &mut ebml_w);\n-    ecx.stats.macro_registrar_fn_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.macro_registrar_fn_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode macro definitions\n     i = ebml_w.writer.tell().unwrap();\n     encode_macro_defs(&ecx, krate, &mut ebml_w);\n-    ecx.stats.macro_defs_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.macro_defs_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode the def IDs of impls, for coherence checking.\n     i = ebml_w.writer.tell().unwrap();\n     encode_impls(&ecx, krate, &mut ebml_w);\n-    ecx.stats.impl_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.impl_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode miscellaneous info.\n     i = ebml_w.writer.tell().unwrap();\n     encode_misc_info(&ecx, krate, &mut ebml_w);\n-    ecx.stats.misc_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.misc_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     // Encode and index the items.\n     ebml_w.start_tag(tag_items);\n     i = ebml_w.writer.tell().unwrap();\n     let items_index = encode_info_for_items(&ecx, &mut ebml_w, krate);\n-    ecx.stats.item_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.item_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     i = ebml_w.writer.tell().unwrap();\n     encode_index(&mut ebml_w, items_index, write_i64);\n-    ecx.stats.index_bytes.set(ebml_w.writer.tell().unwrap() - i);\n+    stats.index_bytes = ebml_w.writer.tell().unwrap() - i;\n     ebml_w.end_tag();\n \n-    ecx.stats.total_bytes.set(ebml_w.writer.tell().unwrap());\n+    stats.total_bytes = ebml_w.writer.tell().unwrap();\n \n     if tcx.sess.meta_stats() {\n         for e in ebml_w.writer.get_ref().iter() {\n             if *e == 0 {\n-                ecx.stats.zero_bytes.set(ecx.stats.zero_bytes.get() + 1);\n+                stats.zero_bytes += 1;\n             }\n         }\n \n         println!(\"metadata stats:\");\n-        println!(\"         inline bytes: {}\", ecx.stats.inline_bytes.get());\n-        println!(\"      attribute bytes: {}\", ecx.stats.attr_bytes.get());\n-        println!(\"            dep bytes: {}\", ecx.stats.dep_bytes.get());\n-        println!(\"      lang item bytes: {}\", ecx.stats.lang_item_bytes.get());\n-        println!(\"         native bytes: {}\", ecx.stats.native_lib_bytes.get());\n-        println!(\"macro registrar bytes: {}\", ecx.stats.macro_registrar_fn_bytes.get());\n-        println!(\"      macro def bytes: {}\", ecx.stats.macro_defs_bytes.get());\n-        println!(\"           impl bytes: {}\", ecx.stats.impl_bytes.get());\n-        println!(\"           misc bytes: {}\", ecx.stats.misc_bytes.get());\n-        println!(\"           item bytes: {}\", ecx.stats.item_bytes.get());\n-        println!(\"          index bytes: {}\", ecx.stats.index_bytes.get());\n-        println!(\"           zero bytes: {}\", ecx.stats.zero_bytes.get());\n-        println!(\"          total bytes: {}\", ecx.stats.total_bytes.get());\n+        println!(\"      attribute bytes: {}\", stats.attr_bytes);\n+        println!(\"            dep bytes: {}\", stats.dep_bytes);\n+        println!(\"      lang item bytes: {}\", stats.lang_item_bytes);\n+        println!(\"         native bytes: {}\", stats.native_lib_bytes);\n+        println!(\"macro registrar bytes: {}\", stats.macro_registrar_fn_bytes);\n+        println!(\"      macro def bytes: {}\", stats.macro_defs_bytes);\n+        println!(\"           impl bytes: {}\", stats.impl_bytes);\n+        println!(\"           misc bytes: {}\", stats.misc_bytes);\n+        println!(\"           item bytes: {}\", stats.item_bytes);\n+        println!(\"          index bytes: {}\", stats.index_bytes);\n+        println!(\"           zero bytes: {}\", stats.zero_bytes);\n+        println!(\"          total bytes: {}\", stats.total_bytes);\n     }\n }\n "}, {"sha": "edb98db416ad302f0e9fc6c6555b6e24b87582d4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9dc99c89d35bde63ac49c0acf93b55913010ea63", "patch": "@@ -154,21 +154,6 @@ pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n \n-pub struct Stats {\n-    pub n_static_tydescs: Cell<uint>,\n-    pub n_glues_created: Cell<uint>,\n-    pub n_null_glues: Cell<uint>,\n-    pub n_real_glues: Cell<uint>,\n-    pub n_fns: Cell<uint>,\n-    pub n_monos: Cell<uint>,\n-    pub n_inlines: Cell<uint>,\n-    pub n_closures: Cell<uint>,\n-    pub n_llvm_insns: Cell<uint>,\n-    pub llvm_insns: RefCell<HashMap<~str, uint>>,\n-    // (ident, time-in-ms, llvm-instructions)\n-    pub fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n-}\n-\n pub struct BuilderRef_res {\n     pub b: BuilderRef,\n }"}, {"sha": "144ffe494b2b1e3005d6a9edbed53b835fe16e11", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc99c89d35bde63ac49c0acf93b55913010ea63/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=9dc99c89d35bde63ac49c0acf93b55913010ea63", "patch": "@@ -20,7 +20,7 @@ use middle::resolve;\n use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::builder::Builder;\n-use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res,Stats};\n+use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res};\n use middle::trans::debuginfo;\n use middle::trans::monomorphize::MonoId;\n use middle::trans::type_::Type;\n@@ -36,6 +36,21 @@ use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::parse::token::InternedString;\n \n+pub struct Stats {\n+    pub n_static_tydescs: Cell<uint>,\n+    pub n_glues_created: Cell<uint>,\n+    pub n_null_glues: Cell<uint>,\n+    pub n_real_glues: Cell<uint>,\n+    pub n_fns: Cell<uint>,\n+    pub n_monos: Cell<uint>,\n+    pub n_inlines: Cell<uint>,\n+    pub n_closures: Cell<uint>,\n+    pub n_llvm_insns: Cell<uint>,\n+    pub llvm_insns: RefCell<HashMap<~str, uint>>,\n+    // (ident, time-in-ms, llvm-instructions)\n+    pub fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n+}\n+\n pub struct CrateContext {\n     pub llmod: ModuleRef,\n     pub llcx: ContextRef,\n@@ -99,7 +114,7 @@ pub struct CrateContext {\n     pub all_llvm_symbols: RefCell<HashSet<~str>>,\n     pub tcx: ty::ctxt,\n     pub maps: astencode::Maps,\n-    pub stats: @Stats,\n+    pub stats: Stats,\n     pub int_type: Type,\n     pub opaque_vec_type: Type,\n     pub builder: BuilderRef_res,\n@@ -181,7 +196,7 @@ impl CrateContext {\n                 all_llvm_symbols: RefCell::new(HashSet::new()),\n                 tcx: tcx,\n                 maps: maps,\n-                stats: @Stats {\n+                stats: Stats {\n                     n_static_tydescs: Cell::new(0u),\n                     n_glues_created: Cell::new(0u),\n                     n_null_glues: Cell::new(0u),"}]}