{"sha": "3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZjg2M2JmZGZiOTE3M2EwYWQ1NWQyNGUyMDIwMjk0OGRkYTZiYmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-02T17:00:07Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-07T12:41:33Z"}, "message": "Place unions, pointer casts and pointer derefs behind extra feature gates", "tree": {"sha": "88363d22f4c514b1b5ca7f7e086258506096d306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88363d22f4c514b1b5ca7f7e086258506096d306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "html_url": "https://github.com/rust-lang/rust/commit/3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e472c2acea2b7714985390abb6b7fe420a4f346", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e472c2acea2b7714985390abb6b7fe420a4f346", "html_url": "https://github.com/rust-lang/rust/commit/9e472c2acea2b7714985390abb6b7fe420a4f346"}], "stats": {"total": 249, "additions": 118, "deletions": 131}, "files": [{"sha": "dc4a2d7c0d7b15ebdc9e3946a4c4fb01538ccddf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -82,6 +82,7 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n+#![feature(const_fn_union)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]"}, {"sha": "e38b8633108c8f739a56311410d0c8204061d142", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -619,38 +619,6 @@ If you really want global mutable state, try using `static mut` or a global\n `UnsafeCell`.\n \"##,\n \n-E0018: r##\"\n-\n-The value of static and constant integers must be known at compile time. You\n-can't cast a pointer to an integer because the address of a pointer can\n-vary.\n-\n-For example, if you write:\n-\n-```compile_fail,E0018\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n-static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n-```\n-\n-Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However,\n-the address can change when the program is linked, as well as change\n-between different executions due to ASLR, and many linkers would\n-not be able to calculate the value of `WHAT`.\n-\n-On the other hand, static and constant pointers can point either to\n-a known numeric address or to the address of a symbol.\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n-```\n-\n-This does not pose a problem by itself because they can't be\n-accessed directly.\n-\"##,\n-\n E0019: r##\"\n A function call isn't allowed in the const's initialization expression\n because the expression's value must be known at compile-time. Erroneous code\n@@ -1208,29 +1176,6 @@ fn main() {\n ```\n \"##,\n \n-E0396: r##\"\n-The value behind a raw pointer can't be determined at compile-time\n-(or even link-time), which means it can't be used in a constant\n-expression. Erroneous code example:\n-\n-```compile_fail,E0396\n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n-\n-const VALUE: u8 = unsafe { *REG_ADDR };\n-// error: raw pointers cannot be dereferenced in constants\n-```\n-\n-A possible fix is to dereference your pointer at some point in run-time.\n-\n-For example:\n-\n-```\n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n-\n-let reg_value = unsafe { *REG_ADDR };\n-```\n-\"##,\n-\n E0492: r##\"\n A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:"}, {"sha": "025e639d9282bcd615f0e5173e79207f1b6a06cf", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 37, "deletions": 60, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -495,37 +495,41 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n-                                if this.mode != Mode::Fn {\n-                                    let mut err = struct_span_err!(\n-                                        this.tcx.sess,\n-                                        this.span,\n-                                        E0396,\n-                                        \"raw pointers cannot be dereferenced in {}s\",\n-                                        this.mode\n+                                if this.mode != Mode::Fn &&\n+                                   !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                    emit_feature_err(\n+                                        &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n+                                        this.span, GateIssue::Language,\n+                                        &format!(\n+                                            \"dereferencing raw pointers in {}s is unstable\",\n+                                            this.mode,\n+                                        ),\n                                     );\n-                                    err.span_label(this.span,\n-                                                   \"dereference of raw pointer in constant\");\n-                                    if this.tcx.sess.teach(&err.get_code().unwrap()) {\n-                                        err.note(\n-                                            \"The value behind a raw pointer can't be determined \\\n-                                             at compile-time (or even link-time), which means it \\\n-                                             can't be used in a constant expression.\"\n-                                        );\n-                                        err.help(\"A possible fix is to dereference your pointer \\\n-                                                  at some point in run-time.\");\n-                                    }\n-                                    err.emit();\n                                 }\n                             }\n                         }\n \n                         ProjectionElem::Field(..) |\n                         ProjectionElem::Index(_) => {\n-                            if this.mode == Mode::Fn {\n-                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                                if let Some(def) = base_ty.ty_adt_def() {\n-                                    if def.is_union() {\n-                                        this.not_const();\n+                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                            if let Some(def) = base_ty.ty_adt_def() {\n+                                if def.is_union() {\n+                                    match this.mode {\n+                                        Mode::Fn => {},\n+                                        Mode::ConstFn => {\n+                                            if !this.tcx.sess.features_untracked().const_fn_union {\n+                                                emit_feature_err(\n+                                                    &this.tcx.sess.parse_sess, \"const_fn_union\",\n+                                                    this.span, GateIssue::Language,\n+                                                    \"unions in const fn are unstable\",\n+                                                );\n+                                            }\n+                                        },\n+\n+                                        | Mode::Static\n+                                        | Mode::StaticMut\n+                                        | Mode::Const\n+                                        => {},\n                                     }\n                                 }\n                             }\n@@ -723,43 +727,16 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     (CastTy::Ptr(_), CastTy::Int(_)) |\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.add(Qualif::NOT_CONST);\n-                        if self.mode != Mode::Fn {\n-                            let mut err = struct_span_err!(\n-                                self.tcx.sess,\n-                                self.span,\n-                                E0018,\n-                                \"raw pointers cannot be cast to integers in {}s\",\n-                                self.mode\n+                        if self.mode != Mode::Fn &&\n+                           !self.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                            emit_feature_err(\n+                                &self.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n+                                self.span, GateIssue::Language,\n+                                &format!(\n+                                    \"casting pointers to integers in {}s is unstable\",\n+                                    self.mode,\n+                                ),\n                             );\n-                            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                                err.note(\"\\\n-The value of static and constant integers must be known at compile time. You can't cast a pointer \\\n-to an integer because the address of a pointer can vary.\n-\n-For example, if you write:\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n-static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n-```\n-\n-Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However, the address can change \\\n-when the program is linked, as well as change between different executions due to ASLR, and many \\\n-linkers would not be able to calculate the value of `WHAT`.\n-\n-On the other hand, static and constant pointers can point either to a known numeric address or to \\\n-the address of a symbol.\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n-```\n-\n-This does not pose a problem by itself because they can't be accessed directly.\");\n-                            }\n-                            err.emit();\n                         }\n                     }\n                     _ => {}"}, {"sha": "5ae9ae7f404a3a711f0baac222ba4b15f34261b8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -216,6 +216,15 @@ declare_features! (\n     // Allows let bindings and destructuring in `const fn` functions and constants.\n     (active, const_let, \"1.22.1\", Some(48821), None),\n \n+    // Allows accessing fields of unions inside const fn\n+    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n+\n+    // Allows casting raw pointers to `usize` during const eval\n+    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n+\n+    // Allows dereferencing raw pointers during const eval\n+    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+\n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal"}, {"sha": "30f94e1b5da03402a8006d64f2e573e9312f6144", "filename": "src/test/compile-fail/cast-ptr-to-int-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    const X: u32 = main as u32; //~ ERROR E0018\n+    const X: u32 = main as u32; //~ ERROR casting pointers to integers in constants is unstable\n     const Y: u32 = 0;\n-    const Z: u32 = &Y as *const u32 as u32; //~ ERROR E0018\n+    const Z: u32 = &Y as *const u32 as u32; //~ ERROR is unstable\n }"}, {"sha": "3d0477feb2060a2ffa024ba83940691878d53245", "filename": "src/test/ui/const-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -11,6 +11,7 @@\n // Check that you can't dereference raw pointers in constants.\n \n fn main() {\n-    static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+    static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n+    //~^ ERROR dereferencing raw pointers in statics is unstable\n     println!(\"{}\", C);\n }"}, {"sha": "94a383bcf16209420b534ca032a548482e679ed8", "filename": "src/test/ui/const-deref-ptr.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -1,9 +1,11 @@\n-error[E0396]: raw pointers cannot be dereferenced in statics\n+error[E0658]: dereferencing raw pointers in statics is unstable (see issue #51911)\n   --> $DIR/const-deref-ptr.rs:14:29\n    |\n-LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer in constant\n+LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0396`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8dd1476d25a77d080ac2385e50532b2c911c4411", "filename": "src/test/ui/const-eval/const_transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -11,6 +11,8 @@\n // compile-pass\n // run-pass\n \n+#![feature(const_fn_union)]\n+\n union Transmute<T: Copy, U: Copy> {\n     t: T,\n     u: U,"}, {"sha": "19db07dd330ae895a09c4d002735981c04c6dbd2", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_fn_union)]\n \n #![deny(const_err)]\n "}, {"sha": "1758ac72b633b73c720b3c10f0fbfa7f7f8614c0", "filename": "src/test/ui/const-eval/ref_to_float_transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -10,6 +10,8 @@\n \n //compile-pass\n \n+#![feature(const_fn_union)]\n+\n fn main() {}\n \n static FOO: u32 = 42;"}, {"sha": "cb942f465e40f3c6f4d9e0ce9349118d084ee432", "filename": "src/test/ui/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn_union)]\n+\n fn main() {\n     let n: Int = 40;\n     match n {"}, {"sha": "e82a16c066fdb7d7a1629323bef2d090358de39e", "filename": "src/test/ui/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -1,5 +1,5 @@\n error[E0030]: lower range bound must be less than or equal to upper\n-  --> $DIR/ref_to_int_match.rs:15:9\n+  --> $DIR/ref_to_int_match.rs:17:9\n    |\n LL |         10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n    |         ^^ lower bound larger than upper bound"}, {"sha": "ea95a8b42a4804c2cbdda7524de7762850b450b3", "filename": "src/test/ui/const-eval/union_promotion.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion_promotion.nll.stderr?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -0,0 +1,11 @@\n+error: internal compiler error: unexpected region for local data ReStatic\n+  --> $DIR/union_promotion.rs:19:29\n+   |\n+LL |       let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n+   |  _____________________________^\n+LL | |         Foo { a: &1 }.b == Foo { a: &2 }.b\n+LL | |     };\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "08d20e7850d9440c6f5bd1cb2c266799072c92a9", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_deref)]\n+\n+const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n+\n+const VALUE: u8 = unsafe { *REG_ADDR };\n+//~^ ERROR this constant cannot be used\n+\n+fn main() {\n+}"}, {"sha": "7d3c98c8ea80893e76746aa2831b82f136e0cf3a", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -0,0 +1,12 @@\n+error: this constant cannot be used\n+  --> $DIR/E0396-fixed.rs:15:1\n+   |\n+LL | const VALUE: u8 = unsafe { *REG_ADDR };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^^\n+   |                            |\n+   |                            a memory access tried to interpret some bytes as a pointer\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "6434620d26ab22c473334c8b68156f35ef1e2789", "filename": "src/test/ui/error-codes/E0396.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -10,7 +10,8 @@\n \n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n-const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n+const VALUE: u8 = unsafe { *REG_ADDR };\n+//~^ ERROR dereferencing raw pointers in constants is unstable\n \n fn main() {\n }"}, {"sha": "70331acc0e9a6c6a777c217ce0eefa7a58cfa03a", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -1,9 +1,11 @@\n-error[E0396]: raw pointers cannot be dereferenced in constants\n+error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n   --> $DIR/E0396.rs:13:28\n    |\n-LL | const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n-   |                            ^^^^^^^^^ dereference of raw pointer in constant\n+LL | const VALUE: u8 = unsafe { *REG_ADDR };\n+   |                            ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0396`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "354d389158d611093e189c6b607a2cd95ca77599", "filename": "src/test/ui/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17458.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n static X: usize = 0 as *const usize as usize;\n-//~^ ERROR: raw pointers cannot be cast to integers in statics\n+//~^ ERROR: casting pointers to integers in statics is unstable\n \n fn main() {\n     assert_eq!(X, 0);"}, {"sha": "28dc6846f69e172bfcda1a4bfe19299458b2804f", "filename": "src/test/ui/issue-18294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fissue-18294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Fissue-18294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18294.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     const X: u32 = 1;\n-    const Y: usize = &X as *const u32 as usize; //~ ERROR E0018\n+    const Y: usize = &X as *const u32 as usize; //~ ERROR is unstable\n     println!(\"{}\", Y);\n }"}, {"sha": "c640acec05e80bf6674ec9b9ad2287df88a32b8f", "filename": "src/test/ui/union/union-const-eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef863bfdfb9173a0ad55d24e20202948dda6bbe/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs?ref=3ef863bfdfb9173a0ad55d24e20202948dda6bbe", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-pass\n+#![feature(const_fn_union)]\n \n union U {\n     a: usize,"}]}