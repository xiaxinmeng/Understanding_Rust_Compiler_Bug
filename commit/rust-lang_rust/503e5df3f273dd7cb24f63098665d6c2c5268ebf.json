{"sha": "503e5df3f273dd7cb24f63098665d6c2c5268ebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwM2U1ZGYzZjI3M2RkN2NiMjRmNjMwOTg2NjVkNmMyYzUyNjhlYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-28T00:47:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-28T00:47:14Z"}, "message": "auto merge of #10621 : Florob/rust/unicode63, r=cmr\n\nThis update the unicode.rs file to the latest Unicode version released 2013-09-30.", "tree": {"sha": "4f78eeccdb39227916b8cf46a3e8fc81b0697087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f78eeccdb39227916b8cf46a3e8fc81b0697087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503e5df3f273dd7cb24f63098665d6c2c5268ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503e5df3f273dd7cb24f63098665d6c2c5268ebf", "html_url": "https://github.com/rust-lang/rust/commit/503e5df3f273dd7cb24f63098665d6c2c5268ebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503e5df3f273dd7cb24f63098665d6c2c5268ebf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c405eeff3930bf0c0777f06108a2eedcd456f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c405eeff3930bf0c0777f06108a2eedcd456f6", "html_url": "https://github.com/rust-lang/rust/commit/d2c405eeff3930bf0c0777f06108a2eedcd456f6"}, {"sha": "dfe38dbca4b62132d7512f767bca6ebe6ddfe931", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe38dbca4b62132d7512f767bca6ebe6ddfe931", "html_url": "https://github.com/rust-lang/rust/commit/dfe38dbca4b62132d7512f767bca6ebe6ddfe931"}], "stats": {"total": 2293, "additions": 1479, "deletions": 814}, "files": [{"sha": "d35263c100f4b400dd4b1eea62fa5e33080e1685", "filename": "src/etc/unicode.py", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=503e5df3f273dd7cb24f63098665d6c2c5268ebf", "patch": "@@ -5,7 +5,7 @@\n # code covering the core properties. Since this is a pretty rare event we\n # just store this out-of-line and check the unicode.rs file into git.\n #\n-# The emitted code is \"the minimum we think is necessary for libcore\", that\n+# The emitted code is \"the minimum we think is necessary for libstd\", that\n # is, to support basic operations of the compiler and \"most nontrivial rust\n # programs\". It is not meant to be a complete implementation of unicode.\n # For that we recommend you use a proper binding to libicu.\n@@ -41,7 +41,7 @@ def load_unicode_data(f):\n             continue\n         [code, name, gencat, combine, bidi,\n          decomp, deci, digit, num, mirror,\n-         old, iso, upcase, lowcsae, titlecase ] = fields\n+         old, iso, upcase, lowcase, titlecase ] = fields\n \n         code = int(code, 16)\n \n@@ -89,11 +89,9 @@ def load_unicode_data(f):\n \n     return (canon_decomp, compat_decomp, gencats, combines)\n \n-\n-def load_derived_core_properties(f):\n+def load_properties(f, interestingprops):\n     fetch(f)\n-    derivedprops = {}\n-    interestingprops = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\"]\n+    props = {}\n     re1 = re.compile(\"^([0-9A-F]+) +; (\\w+)\")\n     re2 = re.compile(\"^([0-9A-F]+)\\.\\.([0-9A-F]+) +; (\\w+)\")\n \n@@ -118,10 +116,10 @@ def load_derived_core_properties(f):\n             continue\n         d_lo = int(d_lo, 16)\n         d_hi = int(d_hi, 16)\n-        if prop not in derivedprops:\n-            derivedprops[prop] = []\n-        derivedprops[prop].append((d_lo, d_hi))\n-    return derivedprops\n+        if prop not in props:\n+            props[prop] = []\n+        props[prop].append((d_lo, d_hi))\n+    return props\n \n def escape_char(c):\n     if c <= 0xff:\n@@ -144,7 +142,7 @@ def emit_bsearch_range_table(f):\n         use cmp::{Equal, Less, Greater};\n         use vec::ImmutableVector;\n         use option::None;\n-        (do r.bsearch |&(lo,hi)| {\n+        r.bsearch(|&(lo,hi)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n             else { Greater }\n@@ -302,14 +300,14 @@ def emit_decomp_module(f, canon, compat, combine):\n         ix += 1\n     f.write(\"\\n    ];\\n\")\n \n-    f.write(\"    pub fn canonical(c: char, i: &fn(char)) \"\n+    f.write(\"    pub fn canonical(c: char, i: |char|) \"\n         + \"{ d(c, i, false); }\\n\\n\")\n-    f.write(\"    pub fn compatibility(c: char, i: &fn(char)) \"\n+    f.write(\"    pub fn compatibility(c: char, i: |char|) \"\n             +\"{ d(c, i, true); }\\n\\n\")\n     f.write(\"    pub fn canonical_combining_class(c: char) -> u8 {\\n\"\n         + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n         + \"    }\\n\\n\")\n-    f.write(\"    fn d(c: char, i: &fn(char), k: bool) {\\n\")\n+    f.write(\"    fn d(c: char, i: |char|, k: bool) {\\n\")\n     f.write(\"        use iter::Iterator;\\n\");\n \n     f.write(\"        if c <= '\\\\x7f' { i(c); return; }\\n\")\n@@ -376,5 +374,9 @@ def emit_decomp_module(f, canon, compat, combine):\n \n emit_decomp_module(rf, canon_decomp, compat_decomp, combines)\n \n-derived = load_derived_core_properties(\"DerivedCoreProperties.txt\")\n+derived = load_properties(\"DerivedCoreProperties.txt\",\n+        [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"])\n emit_property_module(rf, \"derived_property\", derived)\n+\n+props = load_properties(\"PropList.txt\", [\"White_Space\"])\n+emit_property_module(rf, \"property\", props)"}, {"sha": "3019e47c9f93e7e7be7e1486c8c1c62c5ee8f133", "filename": "src/libstd/char.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=503e5df3f273dd7cb24f63098665d6c2c5268ebf", "patch": "@@ -14,7 +14,7 @@ use cast::transmute;\n use option::{None, Option, Some};\n use iter::{Iterator, range_step};\n use str::StrSlice;\n-use unicode::{derived_property, general_category, decompose};\n+use unicode::{derived_property, property, general_category, decompose};\n use to_str::ToStr;\n use str;\n \n@@ -89,30 +89,28 @@ pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n \n ///\n /// Indicates whether a character is in lower case, defined\n-/// in terms of the Unicode General Category 'Ll'\n+/// in terms of the Unicode Derived Core Property 'Lowercase'.\n ///\n #[inline]\n-pub fn is_lowercase(c: char) -> bool { general_category::Ll(c) }\n+pub fn is_lowercase(c: char) -> bool { derived_property::Lowercase(c) }\n \n ///\n /// Indicates whether a character is in upper case, defined\n-/// in terms of the Unicode General Category 'Lu'.\n+/// in terms of the Unicode Derived Core Property 'Uppercase'.\n ///\n #[inline]\n-pub fn is_uppercase(c: char) -> bool { general_category::Lu(c) }\n+pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n \n ///\n /// Indicates whether a character is whitespace. Whitespace is defined in\n-/// terms of the Unicode General Categories 'Zs', 'Zl', 'Zp'\n-/// additional 'Cc'-category control codes in the range [0x09, 0x0d]\n+/// terms of the Unicode Property 'White_Space'.\n ///\n #[inline]\n pub fn is_whitespace(c: char) -> bool {\n+    // As an optimization ASCII whitespace characters are checked separately\n     c == ' '\n         || ('\\x09' <= c && c <= '\\x0d')\n-        || general_category::Zs(c)\n-        || general_category::Zl(c)\n-        || general_category::Zp(c)\n+        || property::White_Space(c)\n }\n \n ///"}, {"sha": "f19ce98ff1a331e440064db208b7ba62e8df8dca", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1406, "deletions": 739, "changes": 2145, "blob_url": "https://github.com/rust-lang/rust/blob/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=503e5df3f273dd7cb24f63098665d6c2c5268ebf"}, {"sha": "15e6e52e3baf324dde31be4ff64a960b37bdde35", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=503e5df3f273dd7cb24f63098665d6c2c5268ebf", "patch": "@@ -51,34 +51,34 @@\n       CR4+2:                         (should align)\n     */\n     /*\n-    // (NEL deliberately omitted)\n+      NEL4+2:                        (should align)\n     */\n     /*\n       Ogham Space Mark 4+2:          (should align)\n     */\n     /*\n-      Mongolian Vowel Separator 4+2: (should align)\n+      Ogham Space Mark 4+2: (should align)\n     */\n     /*\n       Four-per-em space 4+2:         (should align)\n     */\n \n     /*\n-      Mongolian Vowel Sep   count 1: (should align)\n-      Mongolian Vowel Sep   count 2: (should align)\n-      Mongolian Vowel Sep   count 3: (should align)\n-      Mongolian Vowel Sep   count 4: (should align)\n-      Mongolian Vowel Sep   count 5: (should align)\n-      Mongolian Vowel Sep   count 6: (should align)\n-      Mongolian Vowel Sep   count 7: (should align)\n-      Mongolian Vowel Sep   count 8: (should align)\n-      Mongolian Vowel Sep   count 9: (should align)\n-      Mongolian Vowel Sep   count A: (should align)\n-      Mongolian Vowel Sep   count B: (should align)\n-      Mongolian Vowel Sep   count C: (should align)\n-      Mongolian Vowel Sep   count D: (should align)\n-      Mongolian Vowel Sep   count E: (should align)\n-      Mongolian Vowel Sep   count F: (should align)\n+      Ogham Space Mark   count 1: (should align)\n+      Ogham Space Mark   count 2: (should align)\n+      Ogham Space Mark   count 3: (should align)\n+      Ogham Space Mark   count 4: (should align)\n+      Ogham Space Mark   count 5: (should align)\n+      Ogham Space Mark   count 6: (should align)\n+      Ogham Space Mark   count 7: (should align)\n+      Ogham Space Mark   count 8: (should align)\n+      Ogham Space Mark   count 9: (should align)\n+      Ogham Space Mark   count A: (should align)\n+      Ogham Space Mark   count B: (should align)\n+      Ogham Space Mark   count C: (should align)\n+      Ogham Space Mark   count D: (should align)\n+      Ogham Space Mark   count E: (should align)\n+      Ogham Space Mark   count F: (should align)\n     */\n \n \n@@ -88,26 +88,25 @@\n     /*\n       Hello from offset 6\n       Space 6+2:                     compare A\n-      Mongolian Vowel Separator 6+2: compare B\n+      Ogham Space Mark 6+2: compare B\n     */\n \n-    /*\u180e*/\n+    /*\u1680*/\n \n     /*\n       Hello from another offset 6 with wchars establishing column offset\n       Space 6+2:                     compare C\n-      Mongolian Vowel Separator 6+2: compare D\n+      Ogham Space Mark 6+2: compare D\n     */\n }\n \n fn main() {\n-    // Taken from http://en.wikipedia.org/wiki/Whitespace_character\n+    // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n-        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20',\n-         // '\\x85', // for some reason Rust thinks NEL isn't whitespace\n-         '\\xA0', '\\u1680', '\\u180E', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n-         '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200A',\n-         '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\x85', '\\xA0', '\\u1680',\n+         '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006',\n+         '\\u2007', '\\u2008', '\\u2009', '\\u200A', '\\u2028', '\\u2029', '\\u202F',\n+         '\\u205F', '\\u3000'];\n     for c in chars.iter() {\n         let ws = c.is_whitespace();\n         println!(\"{:?} {:?}\" , c , ws);"}, {"sha": "98b9fd0507799fc4d0c0284fcf514aa12eb52b9d", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e5df3f273dd7cb24f63098665d6c2c5268ebf/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=503e5df3f273dd7cb24f63098665d6c2c5268ebf", "patch": "@@ -51,55 +51,54 @@ fn f() {\n \r\r\r\r  CR4+2:                         (should align)\n     */\n     /*\n-    // (NEL deliberately omitted)\n+\u0085\u0085\u0085\u0085  NEL4+2:                        (should align)\n     */\n     /*\n \u1680\u1680\u1680\u1680  Ogham Space Mark 4+2:          (should align)\n     */\n     /*\n-\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 4+2: (should align)\n+\u1680\u1680\u1680\u1680  Ogham Space Mark 4+2: (should align)\n     */\n     /*\n \u2005\u2005\u2005\u2005  Four-per-em space 4+2:         (should align)\n     */\n \n     /*\n-   \u180e  Mongolian Vowel Sep   count 1: (should align)\n-  \u180e   Mongolian Vowel Sep   count 2: (should align)\n-  \u180e\u180e  Mongolian Vowel Sep   count 3: (should align)\n- \u180e    Mongolian Vowel Sep   count 4: (should align)\n- \u180e \u180e  Mongolian Vowel Sep   count 5: (should align)\n- \u180e\u180e   Mongolian Vowel Sep   count 6: (should align)\n- \u180e\u180e\u180e  Mongolian Vowel Sep   count 7: (should align)\n-\u180e     Mongolian Vowel Sep   count 8: (should align)\n-\u180e  \u180e  Mongolian Vowel Sep   count 9: (should align)\n-\u180e \u180e   Mongolian Vowel Sep   count A: (should align)\n-\u180e \u180e\u180e  Mongolian Vowel Sep   count B: (should align)\n-\u180e\u180e    Mongolian Vowel Sep   count C: (should align)\n-\u180e\u180e \u180e  Mongolian Vowel Sep   count D: (should align)\n-\u180e\u180e\u180e   Mongolian Vowel Sep   count E: (should align)\n-\u180e\u180e\u180e\u180e  Mongolian Vowel Sep   count F: (should align)\n+   \u1680  Ogham Space Mark   count 1: (should align)\n+  \u1680   Ogham Space Mark   count 2: (should align)\n+  \u1680\u1680  Ogham Space Mark   count 3: (should align)\n+ \u1680    Ogham Space Mark   count 4: (should align)\n+ \u1680 \u1680  Ogham Space Mark   count 5: (should align)\n+ \u1680\u1680   Ogham Space Mark   count 6: (should align)\n+ \u1680\u1680\u1680  Ogham Space Mark   count 7: (should align)\n+\u1680     Ogham Space Mark   count 8: (should align)\n+\u1680  \u1680  Ogham Space Mark   count 9: (should align)\n+\u1680 \u1680   Ogham Space Mark   count A: (should align)\n+\u1680 \u1680\u1680  Ogham Space Mark   count B: (should align)\n+\u1680\u1680    Ogham Space Mark   count C: (should align)\n+\u1680\u1680 \u1680  Ogham Space Mark   count D: (should align)\n+\u1680\u1680\u1680   Ogham Space Mark   count E: (should align)\n+\u1680\u1680\u1680\u1680  Ogham Space Mark   count F: (should align)\n     */\n \n \n /* */ /*\n         Hello from offset 6\n         Space 6+2:                     compare A\n-\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare B\n+\u1680\u1680\u1680\u1680\u1680\u1680  Ogham Space Mark 6+2: compare B\n       */\n-/*\u180e*/ /*\n+/*\u1680*/ /*\n         Hello from another offset 6 with wchars establishing column offset\n         Space 6+2:                     compare C\n-\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare D\n+\u1680\u1680\u1680\u1680\u1680\u1680  Ogham Space Mark 6+2: compare D\n       */\n }\n \n fn main() {\n-    // Taken from http://en.wikipedia.org/wiki/Whitespace_character\n+    // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n-        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20',\n-         // '\\x85', // for some reason Rust thinks NEL isn't whitespace\n-         '\\xA0', '\\u1680', '\\u180E', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\x85',\n+         '\\xA0', '\\u1680', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n          '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200A',\n          '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n     for c in chars.iter() {"}]}