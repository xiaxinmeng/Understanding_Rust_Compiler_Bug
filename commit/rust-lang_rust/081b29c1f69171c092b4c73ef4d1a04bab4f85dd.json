{"sha": "081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MWIyOWMxZjY5MTcxYzA5MmI0YzczZWY0ZDFhMDRiYWI0Zjg1ZGQ=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-28T03:23:16Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T02:34:48Z"}, "message": "stop using monomorphize::resolve()", "tree": {"sha": "a20defeaed45516a6c6b3f8fe97349d00750de68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20defeaed45516a6c6b3f8fe97349d00750de68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "html_url": "https://github.com/rust-lang/rust/commit/081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5800e1d45a5d4960f3e889cff01923be05e1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5800e1d45a5d4960f3e889cff01923be05e1ce", "html_url": "https://github.com/rust-lang/rust/commit/8a5800e1d45a5d4960f3e889cff01923be05e1ce"}], "stats": {"total": 177, "additions": 49, "deletions": 128}, "files": [{"sha": "dbdca1266af9d3cc910d5f99dcc5a667d0e6ee97", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -118,7 +118,10 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n \n     /// The point where linking happens. Resolve a (def_id, substs)\n     /// pair to an instance.\n-    pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>, param_env: ty::ParamEnv<'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+    pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                   param_env: ty::ParamEnv<'tcx>,\n+                   def_id: DefId,\n+                   substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n             debug!(\" => associated item, attempting to find impl\");\n@@ -154,7 +157,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n                     }\n                 }\n             };\n-            Some(Instance { \n+            Some(Instance {\n                 def: def,\n                 substs: substs\n             })"}, {"sha": "9d32861aedade2e9609c67f08a7c0ec34023897e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -91,7 +91,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                             let caller_def_id = self.tcx.hir.local_def_id(caller_id);\n                             let param_env = self.tcx.param_env(caller_def_id);\n \n-                            if let Some(instance) = Instance::resolve(self.tcx, param_env, callee_def_id, substs) {\n+                            if let Some(instance) = Instance::resolve(self.tcx,\n+                                                                      param_env,\n+                                                                      callee_def_id,\n+                                                                      substs) {\n                                 callsites.push_back(CallSite {\n                                     callee: instance.def_id(),\n                                     substs: instance.substs,"}, {"sha": "5231a516f62f255a845274b8b84844e38452533f", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -19,9 +19,10 @@ use common::{self, CrateContext};\n use consts;\n use declare;\n use llvm::{self, ValueRef};\n-use monomorphize::{self, Instance};\n+use monomorphize::Instance;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::TypeFoldable;\n+use rustc::ty::{self, TypeFoldable};\n+use rustc::traits;\n use rustc::ty::subst::Substs;\n use type_of;\n \n@@ -179,5 +180,8 @@ pub fn resolve_and_get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     substs: &'tcx Substs<'tcx>)\n                                     -> ValueRef\n {\n-    get_fn(ccx, monomorphize::resolve(ccx.tcx(), def_id, substs))\n+    get_fn(ccx, ty::Instance::resolve(ccx.tcx(),\n+    ty::ParamEnv::empty(traits::Reveal::All),\n+    def_id,\n+    substs).unwrap())\n }"}, {"sha": "285a1fb7c7365f77032fc946cff72365b7c5d247", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -566,7 +566,10 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n             let substs = self.tcx.trans_apply_param_substs(self.param_substs,\n                                                            &substs);\n-            let instance = monomorphize::resolve(self.tcx, def_id, substs);\n+            let instance = ty::Instance::resolve(self.tcx,\n+                                                 ty::ParamEnv::empty(traits::Reveal::All),\n+                                                 def_id,\n+                                                 substs).unwrap();\n             collect_neighbours(self.tcx, instance, true, self.output);\n         }\n \n@@ -587,7 +590,11 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n                 let constness = match (self.const_context, &callee_ty.sty) {\n                     (true, &ty::TyFnDef(def_id, substs)) if self.tcx.is_const_fn(def_id) => {\n-                        let instance = monomorphize::resolve(self.tcx, def_id, substs);\n+                        let instance =\n+                            ty::Instance::resolve(self.tcx,\n+                                                  ty::ParamEnv::empty(traits::Reveal::All),\n+                                                  def_id,\n+                                                  substs).unwrap();\n                         Some(instance)\n                     }\n                     _ => None\n@@ -657,7 +664,10 @@ fn visit_fn_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           output: &mut Vec<TransItem<'tcx>>)\n {\n     if let ty::TyFnDef(def_id, substs) = ty.sty {\n-        let instance = monomorphize::resolve(tcx, def_id, substs);\n+        let instance = ty::Instance::resolve(tcx,\n+                                             ty::ParamEnv::empty(traits::Reveal::All),\n+                                             def_id,\n+                                             substs).unwrap();\n         visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }\n@@ -845,7 +855,11 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Walk all methods of the trait, including those of its supertraits\n             let methods = traits::get_vtable_methods(tcx, poly_trait_ref);\n             let methods = methods.filter_map(|method| method)\n-                .map(|(def_id, substs)| monomorphize::resolve(tcx, def_id, substs))\n+                .map(|(def_id, substs)| ty::Instance::resolve(\n+                        tcx,\n+                        ty::ParamEnv::empty(traits::Reveal::All),\n+                        def_id,\n+                        substs).unwrap())\n                 .filter(|&instance| should_trans_locally(tcx, &instance))\n                 .map(|instance| create_fn_trans_item(instance));\n             output.extend(methods);\n@@ -1000,8 +1014,10 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         continue;\n                     }\n \n-                    let instance =\n-                        monomorphize::resolve(tcx, method.def_id, callee_substs);\n+                    let instance = ty::Instance::resolve(tcx,\n+                                                         ty::ParamEnv::empty(traits::Reveal::All),\n+                                                         method.def_id,\n+                                                         callee_substs).unwrap();\n \n                     let trans_item = create_fn_trans_item(instance);\n                     if trans_item.is_instantiable(tcx) && should_trans_locally(tcx, &instance) {"}, {"sha": "6e27c0dafafd902154c392f0fa622cfabac0ceb3", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -13,6 +13,7 @@ use rustc::middle::lang_items;\n use rustc::middle::const_val::{ConstEvalErr, ConstInt, ErrKind};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutTyper};\n+use rustc::traits;\n use rustc::mir;\n use abi::{Abi, FnType, ArgType};\n use adt;\n@@ -429,7 +430,10 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 let (instance, mut llfn) = match callee.ty.sty {\n                     ty::TyFnDef(def_id, substs) => {\n-                        (Some(monomorphize::resolve(bcx.ccx.tcx(), def_id, substs)),\n+                        (Some(ty::Instance::resolve(bcx.ccx.tcx(),\n+                        ty::ParamEnv::empty(traits::Reveal::All),\n+                        def_id,\n+                        substs).unwrap()),\n                          None)\n                     }\n                     ty::TyFnPtr(_) => {"}, {"sha": "1ccf6d256204ff18aa0b0252922e59ac76ffcfad", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -14,6 +14,7 @@ use rustc_const_math::ConstInt::*;\n use rustc_const_math::{ConstInt, ConstMathErr};\n use rustc::hir::def_id::DefId;\n use rustc::infer::TransNormalize;\n+use rustc::traits;\n use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -30,7 +31,6 @@ use common::{C_array, C_bool, C_bytes, C_int, C_uint, C_big_integral, C_u32, C_u\n use common::{C_null, C_struct, C_str_slice, C_undef, C_usize, C_vector, is_undef};\n use common::const_to_opt_u128;\n use consts;\n-use monomorphize;\n use type_of;\n use type_::Type;\n use value::Value;\n@@ -261,7 +261,10 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                  substs: &'tcx Substs<'tcx>,\n                  args: IndexVec<mir::Local, Result<Const<'tcx>, ConstEvalErr<'tcx>>>)\n                  -> Result<Const<'tcx>, ConstEvalErr<'tcx>> {\n-        let instance = monomorphize::resolve(ccx.tcx(), def_id, substs);\n+        let instance = ty::Instance::resolve(ccx.tcx(),\n+        ty::ParamEnv::empty(traits::Reveal::All),\n+        def_id,\n+        substs).unwrap();\n         let mir = ccx.tcx().instance_mir(instance.def);\n         MirConstContext::new(ccx, &mir, instance.substs, args).trans()\n     }"}, {"sha": "cd2a881451cd35625282ba5db9f24aae4da85882", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 113, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/081b29c1f69171c092b4c73ef4d1a04bab4f85dd/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=081b29c1f69171c092b4c73ef4d1a04bab4f85dd", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::Abi;\n-use common::*;\n-\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n@@ -99,123 +96,14 @@ pub fn resolve_closure<'a, 'tcx> (\n     }\n }\n \n-fn resolve_associated_item<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    trait_item: &ty::AssociatedItem,\n-    trait_id: DefId,\n-    rcvr_substs: &'tcx Substs<'tcx>\n-) -> Instance<'tcx> {\n-    let def_id = trait_item.def_id;\n-    debug!(\"resolve_associated_item(trait_item={:?}, \\\n-                                    trait_id={:?}, \\\n-                                    rcvr_substs={:?})\",\n-           def_id, trait_id, rcvr_substs);\n-\n-    let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.trans_fulfill_obligation(\n-        DUMMY_SP, ty::ParamEnv::empty(traits::Reveal::All), ty::Binder(trait_ref));\n-\n-    // Now that we know which impl is being used, we can dispatch to\n-    // the actual function:\n-    match vtbl {\n-        traits::VtableImpl(impl_data) => {\n-            let (def_id, substs) = traits::find_associated_item(\n-                tcx, trait_item, rcvr_substs, &impl_data);\n-            let substs = tcx.erase_regions(&substs);\n-            ty::Instance::new(def_id, substs)\n-        }\n-        traits::VtableGenerator(closure_data) => {\n-            Instance {\n-                def: ty::InstanceDef::Item(closure_data.closure_def_id),\n-                substs: closure_data.substs.substs\n-            }\n-        }\n-        traits::VtableClosure(closure_data) => {\n-            let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n-            resolve_closure(tcx, closure_data.closure_def_id, closure_data.substs,\n-                            trait_closure_kind)\n-        }\n-        traits::VtableFnPointer(ref data) => {\n-            Instance {\n-                def: ty::InstanceDef::FnPtrShim(trait_item.def_id, data.fn_ty),\n-                substs: rcvr_substs\n-            }\n-        }\n-        traits::VtableObject(ref data) => {\n-            let index = tcx.get_vtable_index_of_object_method(data, def_id);\n-            Instance {\n-                def: ty::InstanceDef::Virtual(def_id, index),\n-                substs: rcvr_substs\n-            }\n-        }\n-        traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n-            Instance {\n-                def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n-                substs: rcvr_substs\n-            }\n-        }\n-        _ => {\n-            bug!(\"static call to invalid vtable: {:?}\", vtbl)\n-        }\n-    }\n-}\n-\n-/// The point where linking happens. Resolve a (def_id, substs)\n-/// pair to an instance.\n-pub fn resolve<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-    substs: &'tcx Substs<'tcx>\n-) -> Instance<'tcx> {\n-    debug!(\"resolve(def_id={:?}, substs={:?})\",\n-           def_id, substs);\n-    let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n-        debug!(\" => associated item, attempting to find impl\");\n-        let item = tcx.associated_item(def_id);\n-        resolve_associated_item(tcx, &item, trait_def_id, substs)\n-    } else {\n-        let item_type = def_ty(tcx, def_id, substs);\n-        let def = match item_type.sty {\n-            ty::TyFnDef(..) if {\n-                    let f = item_type.fn_sig(tcx);\n-                    f.abi() == Abi::RustIntrinsic ||\n-                    f.abi() == Abi::PlatformIntrinsic\n-                } =>\n-            {\n-                debug!(\" => intrinsic\");\n-                ty::InstanceDef::Intrinsic(def_id)\n-            }\n-            _ => {\n-                if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n-                    let ty = substs.type_at(0);\n-                    if type_needs_drop(tcx, ty) {\n-                        debug!(\" => nontrivial drop glue\");\n-                        ty::InstanceDef::DropGlue(def_id, Some(ty))\n-                    } else {\n-                        debug!(\" => trivial drop glue\");\n-                        ty::InstanceDef::DropGlue(def_id, None)\n-                    }\n-                } else {\n-                    debug!(\" => free item\");\n-                    ty::InstanceDef::Item(def_id)\n-                }\n-            }\n-        };\n-        Instance { def, substs }\n-    };\n-    debug!(\"resolve(def_id={:?}, substs={:?}) = {}\",\n-           def_id, substs, result);\n-    result\n-}\n-\n pub fn resolve_drop_in_place<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty: Ty<'tcx>)\n     -> ty::Instance<'tcx>\n {\n     let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n     let substs = tcx.intern_substs(&[Kind::from(ty)]);\n-    resolve(tcx, def_id, substs)\n+    Instance::resolve(tcx, ty::ParamEnv::empty(traits::Reveal::All), def_id, substs).unwrap()\n }\n \n pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}