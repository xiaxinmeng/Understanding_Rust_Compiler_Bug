{"sha": "c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZmU0YTIyYjlmMzVmMzI2MDM4YjNhMjc0NTEwMmNlN2JkODZmYzE=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2017-12-19T23:24:38Z"}, "committer": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2017-12-19T23:24:38Z"}, "message": "Only mark unions as uninhabited if all of their fields are uninhabited. Fixes #46845.", "tree": {"sha": "5a6f91684ecc470e60584439ccd5022bc446b35b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6f91684ecc470e60584439ccd5022bc446b35b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "html_url": "https://github.com/rust-lang/rust/commit/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1/comments", "author": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76f224af867b198e4051806cc6e1ac686085cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76f224af867b198e4051806cc6e1ac686085cdc", "html_url": "https://github.com/rust-lang/rust/commit/b76f224af867b198e4051806cc6e1ac686085cdc"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "68aa553c529a682d6eb38489f750b0155c072079", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "patch": "@@ -1352,22 +1352,19 @@ impl<'a, 'tcx> LayoutDetails {\n                     }).collect::<Result<Vec<_>, _>>()\n                 }).collect::<Result<Vec<_>, _>>()?;\n \n-                let (inh_first, inh_second) = {\n-                    let mut inh_variants = (0..variants.len()).filter(|&v| {\n-                        variants[v].iter().all(|f| f.abi != Abi::Uninhabited)\n-                    });\n-                    (inh_variants.next(), inh_variants.next())\n-                };\n-                if inh_first.is_none() {\n-                    // Uninhabited because it has no variants, or only uninhabited ones.\n-                    return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n-                }\n-\n                 if def.is_union() {\n                     let packed = def.repr.packed();\n                     if packed && def.repr.align > 0 {\n                         bug!(\"Union cannot be packed and aligned\");\n                     }\n+                    if variants.len() != 1 {\n+                        bug!(\"Union must be represented as a single variant\");\n+                    }\n+\n+                    if variants[0].iter().all(|f| f.abi == Abi::Uninhabited) {\n+                        // Uninhabited because it has only uninhabited variants/fields.\n+                        return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n+                    }\n \n                     let mut align = if def.repr.packed() {\n                         dl.i8_align\n@@ -1400,6 +1397,17 @@ impl<'a, 'tcx> LayoutDetails {\n                     }));\n                 }\n \n+                let (inh_first, inh_second) = {\n+                    let mut inh_variants = (0..variants.len()).filter(|&v| {\n+                        variants[v].iter().all(|f| f.abi != Abi::Uninhabited)\n+                    });\n+                    (inh_variants.next(), inh_variants.next())\n+                };\n+                if inh_first.is_none() {\n+                    // Uninhabited because it has no variants, or only uninhabited ones.\n+                    return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n+                }\n+\n                 let is_struct = !def.is_enum() ||\n                     // Only one variant is inhabited.\n                     (inh_second.is_none() &&"}, {"sha": "235d3982a9c0c897f7dfd8c3127d40cb8206e656", "filename": "src/test/run-pass/issue-46845.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1/src%2Ftest%2Frun-pass%2Fissue-46845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1fe4a22b9f35f326038b3a2745102ce7bd86fc1/src%2Ftest%2Frun-pass%2Fissue-46845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46845.rs?ref=c1fe4a22b9f35f326038b3a2745102ce7bd86fc1", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// To work around #46855\n+// compile-flags: -Z mir-opt-level=0\n+// Regression test for the inhabitedness of unions with uninhabited variants, issue #46845\n+\n+use std::mem;\n+\n+#[derive(Copy, Clone)]\n+enum Never { }\n+\n+// A single uninhabited variant shouldn't make the whole union uninhabited.\n+union Foo {\n+    a: u64,\n+    _b: Never\n+}\n+\n+// If all the variants are uninhabited, however, the union should be uninhabited.\n+union Bar {\n+    _a: (Never, u64),\n+    _b: (u64, Never)\n+}\n+\n+fn main() {\n+    assert_eq!(mem::size_of::<Foo>(), 8);\n+    assert_eq!(mem::size_of::<Bar>(), 0);\n+\n+    let f = [Foo { a: 42 }, Foo { a: 10 }];\n+    println!(\"{}\", unsafe { f[0].a });\n+    assert_eq!(unsafe { f[1].a }, 10);\n+}"}]}