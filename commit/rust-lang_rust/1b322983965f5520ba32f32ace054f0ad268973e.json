{"sha": "1b322983965f5520ba32f32ace054f0ad268973e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzIyOTgzOTY1ZjU1MjBiYTMyZjMyYWNlMDU0ZjBhZDI2ODk3M2U=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T17:47:28Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T17:47:28Z"}, "message": "Move all `Default` docs from module to trait\n\nI had already copied the implementation example in a previous commit;\nthis copies the explanation and usage examples to the general trait\ndescription.", "tree": {"sha": "0a0a4f7614f36bcb499bdd8a4b01861606ddbaa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0a4f7614f36bcb499bdd8a4b01861606ddbaa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b322983965f5520ba32f32ace054f0ad268973e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b322983965f5520ba32f32ace054f0ad268973e", "html_url": "https://github.com/rust-lang/rust/commit/1b322983965f5520ba32f32ace054f0ad268973e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b322983965f5520ba32f32ace054f0ad268973e/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81a999b54f5c2df14a8057ab14ed7161093e353", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81a999b54f5c2df14a8057ab14ed7161093e353", "html_url": "https://github.com/rust-lang/rust/commit/d81a999b54f5c2df14a8057ab14ed7161093e353"}], "stats": {"total": 115, "additions": 42, "deletions": 73}, "files": [{"sha": "485ddae07fbff93b4723c3b9ffe8c45f93028e6c", "filename": "src/libcore/default.rs", "status": "modified", "additions": 42, "deletions": 73, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1b322983965f5520ba32f32ace054f0ad268973e/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b322983965f5520ba32f32ace054f0ad268973e/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=1b322983965f5520ba32f32ace054f0ad268973e", "patch": "@@ -9,87 +9,56 @@\n // except according to those terms.\n \n //! The `Default` trait for types which may have meaningful default values.\n-//!\n-//! Sometimes, you want to fall back to some kind of default value, and\n-//! don't particularly care what it is. This comes up often with `struct`s\n-//! that define a set of options:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//! }\n-//! ```\n-//!\n-//! How can we define some default values? You can use `Default`:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! #[derive(Default)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//! }\n-//!\n-//!\n-//! fn main() {\n-//!     let options: SomeOptions = Default::default();\n-//! }\n-//! ```\n-//!\n-//! Now, you get all of the default values. Rust implements `Default` for various primitives types.\n-//! If you have your own type, you need to implement `Default` yourself:\n-//!\n-//! ```\n-//! # #![allow(dead_code)]\n-//! enum Kind {\n-//!     A,\n-//!     B,\n-//!     C,\n-//! }\n-//!\n-//! impl Default for Kind {\n-//!     fn default() -> Kind { Kind::A }\n-//! }\n-//!\n-//! #[derive(Default)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//!     baz: Kind,\n-//! }\n-//!\n-//!\n-//! fn main() {\n-//!     let options: SomeOptions = Default::default();\n-//! }\n-//! ```\n-//!\n-//! If you want to override a particular option, but still retain the other defaults:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! # #[derive(Default)]\n-//! # struct SomeOptions {\n-//! #     foo: i32,\n-//! #     bar: f32,\n-//! # }\n-//! fn main() {\n-//!     let options = SomeOptions { foo: 42, ..Default::default() };\n-//! }\n-//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use marker::Sized;\n \n /// A trait for giving a type a useful default value.\n ///\n-/// For more information, see\n-/// [the module-level documentation][module].\n+/// Sometimes, you want to fall back to some kind of default value, and\n+/// don't particularly care what it is. This comes up often with `struct`s\n+/// that define a set of options:\n ///\n-/// [module]: ../../std/default/index.html\n+/// ```\n+/// # #[allow(dead_code)]\n+/// struct SomeOptions {\n+///     foo: i32,\n+///     bar: f32,\n+/// }\n+/// ```\n+///\n+/// How can we define some default values? You can use `Default`:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// #[derive(Default)]\n+/// struct SomeOptions {\n+///     foo: i32,\n+///     bar: f32,\n+/// }\n+///\n+///\n+/// fn main() {\n+///     let options: SomeOptions = Default::default();\n+/// }\n+/// ```\n+///\n+/// Now, you get all of the default values. Rust implements `Default` for various primitives types.\n+///\n+/// If you want to override a particular option, but still retain the other defaults:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// # #[derive(Default)]\n+/// # struct SomeOptions {\n+/// #     foo: i32,\n+/// #     bar: f32,\n+/// # }\n+/// fn main() {\n+///     let options = SomeOptions { foo: 42, ..Default::default() };\n+/// }\n+/// ```\n ///\n /// ## Derivable\n ///"}]}