{"sha": "0368abb0a420620c65c9662dcd4322c0276c209e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjhhYmIwYTQyMDYyMGM2NWM5NjYyZGNkNDMyMmMwMjc2YzIwOWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-28T00:29:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T00:38:26Z"}, "message": "std: Implement fs::DirBuilder\n\nThis is the last remaining portion of #24796", "tree": {"sha": "dc5de77e6d2eb997cbc2e42f3de88d3e2a4be0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5de77e6d2eb997cbc2e42f3de88d3e2a4be0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0368abb0a420620c65c9662dcd4322c0276c209e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0368abb0a420620c65c9662dcd4322c0276c209e", "html_url": "https://github.com/rust-lang/rust/commit/0368abb0a420620c65c9662dcd4322c0276c209e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0368abb0a420620c65c9662dcd4322c0276c209e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9348700007c6ac913df97c8e9e1ab7df6f91f130", "url": "https://api.github.com/repos/rust-lang/rust/commits/9348700007c6ac913df97c8e9e1ab7df6f91f130", "html_url": "https://github.com/rust-lang/rust/commit/9348700007c6ac913df97c8e9e1ab7df6f91f130"}], "stats": {"total": 122, "additions": 104, "deletions": 18}, "files": [{"sha": "4dd92b04da5dcc39c389f86056e7fe8caee1fad1", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0368abb0a420620c65c9662dcd4322c0276c209e", "patch": "@@ -864,7 +864,7 @@ fn link_args(cmd: &mut Command,\n     // target descriptor\n     let t = &sess.target.target;\n \n-    cmd.arg(\"-L\").arg(&lib_path);\n+    cmd.arg(\"-L\").arg(&fix_windows_verbatim_for_gcc(&lib_path));\n \n     cmd.arg(\"-o\").arg(out_filename).arg(obj_filename);\n "}, {"sha": "2b15a4ff83ed13a94939240b68d5c45a44f6e056", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0368abb0a420620c65c9662dcd4322c0276c209e", "patch": "@@ -152,6 +152,15 @@ pub struct Permissions(fs_imp::FilePermissions);\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct FileType(fs_imp::FileType);\n \n+/// A builder used to create directories in various manners.\n+///\n+/// This builder also supports platform-specific options.\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+pub struct DirBuilder {\n+    inner: fs_imp::DirBuilder,\n+    recursive: bool,\n+}\n+\n impl File {\n     /// Attempts to open a file in read-only mode.\n     ///\n@@ -997,7 +1006,7 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n-    fs_imp::mkdir(path.as_ref())\n+    DirBuilder::new().create(path.as_ref())\n }\n \n /// Recursively create a directory and all of its parent components if they\n@@ -1022,10 +1031,7 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n-    let path = path.as_ref();\n-    if path == Path::new(\"\") || path.is_dir() { return Ok(()) }\n-    if let Some(p) = path.parent() { try!(create_dir_all(p)) }\n-    create_dir(path)\n+    DirBuilder::new().recursive(true).create(path.as_ref())\n }\n \n /// Removes an existing, empty directory.\n@@ -1286,6 +1292,52 @@ pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions) -> io::Result\n     fs_imp::set_perm(path.as_ref(), perm.0)\n }\n \n+impl DirBuilder {\n+    /// Creates a new set of options with default mode/security settings for all\n+    /// platforms and also non-recursive.\n+    pub fn new() -> DirBuilder {\n+        DirBuilder {\n+            inner: fs_imp::DirBuilder::new(),\n+            recursive: false,\n+        }\n+    }\n+\n+    /// Indicate that directories create should be created recursively, creating\n+    /// all parent directories if they do not exist with the same security and\n+    /// permissions settings.\n+    ///\n+    /// This option defaults to `false`\n+    pub fn recursive(&mut self, recursive: bool) -> &mut Self {\n+        self.recursive = recursive;\n+        self\n+    }\n+\n+    /// Create the specified directory with the options configured in this\n+    /// builder.\n+    pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n+        let path = path.as_ref();\n+        if self.recursive {\n+            self.create_dir_all(path)\n+        } else {\n+            self.inner.mkdir(path)\n+        }\n+    }\n+\n+    fn create_dir_all(&self, path: &Path) -> io::Result<()> {\n+        if path == Path::new(\"\") || path.is_dir() { return Ok(()) }\n+        if let Some(p) = path.parent() {\n+            try!(self.create_dir_all(p))\n+        }\n+        self.inner.mkdir(path)\n+    }\n+}\n+\n+impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n+    fn as_inner_mut(&mut self) -> &mut fs_imp::DirBuilder {\n+        &mut self.inner\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     #![allow(deprecated)] //rand"}, {"sha": "2e4ed38e50fe7c10935e04ffa759f5ef340bcb9d", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=0368abb0a420620c65c9662dcd4322c0276c209e", "patch": "@@ -189,3 +189,19 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n {\n     sys::fs2::symlink(src.as_ref(), dst.as_ref())\n }\n+\n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\")]\n+/// An extension trait for `fs::DirBuilder` for unix-specific options.\n+pub trait DirBuilderExt {\n+    /// Sets the mode to create new directories with. This option defaults to\n+    /// 0o777.\n+    fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n+}\n+\n+impl DirBuilderExt for fs::DirBuilder {\n+    fn mode(&mut self, mode: raw::mode_t) -> &mut fs::DirBuilder {\n+        self.as_inner_mut().set_mode(mode);\n+        self\n+    }\n+}\n+"}, {"sha": "350161c751cb89fa6af78ad8a88cd1f19c880ed9", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=0368abb0a420620c65c9662dcd4322c0276c209e", "patch": "@@ -61,6 +61,8 @@ pub struct FilePermissions { mode: mode_t }\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct FileType { mode: mode_t }\n \n+pub struct DirBuilder { mode: mode_t }\n+\n impl FileAttr {\n     pub fn size(&self) -> u64 { self.stat.st_size as u64 }\n     pub fn perm(&self) -> FilePermissions {\n@@ -342,6 +344,22 @@ impl File {\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n }\n \n+impl DirBuilder {\n+    pub fn new() -> DirBuilder {\n+        DirBuilder { mode: 0o777 }\n+    }\n+\n+    pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n+        let p = try!(cstr(p));\n+        try!(cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) }));\n+        Ok(())\n+    }\n+\n+    pub fn set_mode(&mut self, mode: mode_t) {\n+        self.mode = mode;\n+    }\n+}\n+\n fn cstr(path: &Path) -> io::Result<CString> {\n     path.as_os_str().to_cstring().ok_or(\n         io::Error::new(io::ErrorKind::InvalidInput, \"path contained a null\"))\n@@ -401,12 +419,6 @@ impl fmt::Debug for File {\n     }\n }\n \n-pub fn mkdir(p: &Path) -> io::Result<()> {\n-    let p = try!(cstr(p));\n-    try!(cvt(unsafe { libc::mkdir(p.as_ptr(), 0o777) }));\n-    Ok(())\n-}\n-\n pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n     let root = Arc::new(p.to_path_buf());\n     let p = try!(cstr(p));"}, {"sha": "5b748280986f7258bb4ff1ab64ad03491b4e0c36", "filename": "src/libstd/sys/windows/fs2.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0368abb0a420620c65c9662dcd4322c0276c209e/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs?ref=0368abb0a420620c65c9662dcd4322c0276c209e", "patch": "@@ -70,6 +70,8 @@ pub struct OpenOptions {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct FilePermissions { attrs: libc::DWORD }\n \n+pub struct DirBuilder;\n+\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n@@ -425,12 +427,16 @@ impl FileType {\n     pub fn is_symlink(&self) -> bool { *self == FileType::Symlink }\n }\n \n-pub fn mkdir(p: &Path) -> io::Result<()> {\n-    let p = to_utf16(p);\n-    try!(cvt(unsafe {\n-        libc::CreateDirectoryW(p.as_ptr(), ptr::null_mut())\n-    }));\n-    Ok(())\n+impl DirBuilder {\n+    pub fn new() -> DirBuilder { DirBuilder }\n+\n+    pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n+        let p = to_utf16(p);\n+        try!(cvt(unsafe {\n+            libc::CreateDirectoryW(p.as_ptr(), ptr::null_mut())\n+        }));\n+        Ok(())\n+    }\n }\n \n pub fn readdir(p: &Path) -> io::Result<ReadDir> {"}]}