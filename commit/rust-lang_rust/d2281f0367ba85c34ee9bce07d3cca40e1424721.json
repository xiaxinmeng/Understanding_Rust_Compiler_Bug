{"sha": "d2281f0367ba85c34ee9bce07d3cca40e1424721", "node_id": "C_kwDOAAsO6NoAKGQyMjgxZjAzNjdiYTg1YzM0ZWU5YmNlMDdkM2NjYTQwZTE0MjQ3MjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T22:33:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T22:33:32Z"}, "message": "Auto merge of #13678 - Veykril:hir-file-encode, r=Veykril\n\nEncode the variants of `HirFileId` in a u32 with MSB as the tag\n\nThis saves 10mb on `self` analysis, while this does limit us to 2billion real files and 2 billion macro expansions, I doubt we will ever hit that limit :) `HirFileId` is used a lot, so going from 8 bytes to 4 is a decent win.", "tree": {"sha": "715251db6af0aa4db7a85bc4e4708f7f98eb9f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715251db6af0aa4db7a85bc4e4708f7f98eb9f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2281f0367ba85c34ee9bce07d3cca40e1424721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2281f0367ba85c34ee9bce07d3cca40e1424721", "html_url": "https://github.com/rust-lang/rust/commit/d2281f0367ba85c34ee9bce07d3cca40e1424721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2281f0367ba85c34ee9bce07d3cca40e1424721/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b651646510997948e9b3f26a452b38ea91d47355", "url": "https://api.github.com/repos/rust-lang/rust/commits/b651646510997948e9b3f26a452b38ea91d47355", "html_url": "https://github.com/rust-lang/rust/commit/b651646510997948e9b3f26a452b38ea91d47355"}, {"sha": "7bf2a25dfe8337fe46a2698756cdfab46556ef88", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf2a25dfe8337fe46a2698756cdfab46556ef88", "html_url": "https://github.com/rust-lang/rust/commit/7bf2a25dfe8337fe46a2698756cdfab46556ef88"}], "stats": {"total": 371, "additions": 145, "deletions": 226}, "files": [{"sha": "0096649be1460b2dc1b6c6f79d22b6100cbb510e", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=d2281f0367ba85c34ee9bce07d3cca40e1424721", "patch": "@@ -240,7 +240,7 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n }\n \n fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n-    match file_id.0 {\n+    match file_id.repr() {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n             // FIXME: Note how we convert from `Parse` to `SyntaxNode` here,"}, {"sha": "df1e20256ca3143a65dfa69f4cbbb5ff0d28cbf7", "filename": "crates/hir-expand/src/hygiene.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs?ref=d2281f0367ba85c34ee9bce07d3cca40e1424721", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     db::{self, AstDatabase},\n     fixup,\n     name::{AsName, Name},\n-    HirFileId, HirFileIdRepr, InFile, MacroCallKind, MacroCallLoc, MacroDefKind, MacroFile,\n+    HirFileId, InFile, MacroCallKind, MacroCallLoc, MacroDefKind, MacroFile,\n };\n \n #[derive(Clone, Debug)]\n@@ -216,9 +216,9 @@ fn make_hygiene_info(\n \n impl HygieneFrame {\n     pub(crate) fn new(db: &dyn AstDatabase, file_id: HirFileId) -> HygieneFrame {\n-        let (info, krate, local_inner) = match file_id.0 {\n-            HirFileIdRepr::FileId(_) => (None, None, false),\n-            HirFileIdRepr::MacroFile(macro_file) => {\n+        let (info, krate, local_inner) = match file_id.macro_file() {\n+            None => (None, None, false),\n+            Some(macro_file) => {\n                 let loc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 let info =\n                     make_hygiene_info(db, macro_file, &loc).map(|info| (loc.kind.file_id(), info));"}, {"sha": "bc5f9f3b8afd441ca27bea1cdcb8864d1aeec7c8", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 118, "deletions": 109, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=d2281f0367ba85c34ee9bce07d3cca40e1424721", "patch": "@@ -23,7 +23,11 @@ pub use mbe::{Origin, ValueResult};\n \n use std::{fmt, hash::Hash, iter, sync::Arc};\n \n-use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange, ProcMacroKind};\n+use base_db::{\n+    impl_intern_key,\n+    salsa::{self, InternId},\n+    CrateId, FileId, FileRange, ProcMacroKind,\n+};\n use either::Either;\n use syntax::{\n     algo::{self, skip_trivia_token},\n@@ -79,26 +83,12 @@ impl fmt::Display for ExpandError {\n /// finite (because everything bottoms out at the real `FileId`) and small\n /// (`MacroCallId` uses the location interning. You can check details here:\n /// <https://en.wikipedia.org/wiki/String_interning>).\n+///\n+/// The two variants are encoded in a single u32 which are differentiated by the MSB.\n+/// If the MSB is 0, the value represents a `FileId`, otherwise the remaining 31 bits represent a\n+/// `MacroCallId`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct HirFileId(HirFileIdRepr);\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-enum HirFileIdRepr {\n-    FileId(FileId),\n-    MacroFile(MacroFile),\n-}\n-\n-impl From<FileId> for HirFileId {\n-    fn from(id: FileId) -> Self {\n-        HirFileId(HirFileIdRepr::FileId(id))\n-    }\n-}\n-\n-impl From<MacroFile> for HirFileId {\n-    fn from(id: MacroFile) -> Self {\n-        HirFileId(HirFileIdRepr::MacroFile(id))\n-    }\n-}\n+pub struct HirFileId(u32);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroFile {\n@@ -172,13 +162,37 @@ pub enum MacroCallKind {\n     },\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+enum HirFileIdRepr {\n+    FileId(FileId),\n+    MacroFile(MacroFile),\n+}\n+\n+impl From<FileId> for HirFileId {\n+    fn from(FileId(id): FileId) -> Self {\n+        assert!(id < Self::MAX_FILE_ID);\n+        HirFileId(id)\n+    }\n+}\n+\n+impl From<MacroFile> for HirFileId {\n+    fn from(MacroFile { macro_call_id: MacroCallId(id) }: MacroFile) -> Self {\n+        let id = id.as_u32();\n+        assert!(id < Self::MAX_FILE_ID);\n+        HirFileId(id | Self::MACRO_FILE_TAG_MASK)\n+    }\n+}\n+\n impl HirFileId {\n+    const MAX_FILE_ID: u32 = u32::MAX ^ Self::MACRO_FILE_TAG_MASK;\n+    const MACRO_FILE_TAG_MASK: u32 = 1 << 31;\n+\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n     pub fn original_file(self, db: &dyn db::AstDatabase) -> FileId {\n         let mut file_id = self;\n         loop {\n-            match file_id.0 {\n+            match file_id.repr() {\n                 HirFileIdRepr::FileId(id) => break id,\n                 HirFileIdRepr::MacroFile(MacroFile { macro_call_id }) => {\n                     let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_call_id);\n@@ -194,7 +208,7 @@ impl HirFileId {\n     pub fn expansion_level(self, db: &dyn db::AstDatabase) -> u32 {\n         let mut level = 0;\n         let mut curr = self;\n-        while let HirFileIdRepr::MacroFile(macro_file) = curr.0 {\n+        while let Some(macro_file) = curr.macro_file() {\n             let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n \n             level += 1;\n@@ -205,25 +219,17 @@ impl HirFileId {\n \n     /// If this is a macro call, returns the syntax node of the call.\n     pub fn call_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n-                Some(loc.kind.to_node(db))\n-            }\n-        }\n+        let macro_file = self.macro_file()?;\n+        let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n+        Some(loc.kind.to_node(db))\n     }\n \n     /// If this is a macro call, returns the syntax node of the very first macro call this file resides in.\n     pub fn original_call_node(self, db: &dyn db::AstDatabase) -> Option<(FileId, SyntaxNode)> {\n-        let mut call = match self.0 {\n-            HirFileIdRepr::FileId(_) => return None,\n-            HirFileIdRepr::MacroFile(MacroFile { macro_call_id }) => {\n-                db.lookup_intern_macro_call(macro_call_id).kind.to_node(db)\n-            }\n-        };\n+        let mut call =\n+            db.lookup_intern_macro_call(self.macro_file()?.macro_call_id).kind.to_node(db);\n         loop {\n-            match call.file_id.0 {\n+            match call.file_id.repr() {\n                 HirFileIdRepr::FileId(file_id) => break Some((file_id, call.value)),\n                 HirFileIdRepr::MacroFile(MacroFile { macro_call_id }) => {\n                     call = db.lookup_intern_macro_call(macro_call_id).kind.to_node(db);\n@@ -234,84 +240,74 @@ impl HirFileId {\n \n     /// Return expansion information if it is a macro-expansion file\n     pub fn expansion_info(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n+        let macro_file = self.macro_file()?;\n+        let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n \n-                let arg_tt = loc.kind.arg(db)?;\n+        let arg_tt = loc.kind.arg(db)?;\n \n-                let macro_def = db.macro_def(loc.def).ok()?;\n-                let (parse, exp_map) = db.parse_macro_expansion(macro_file).value?;\n-                let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n+        let macro_def = db.macro_def(loc.def).ok()?;\n+        let (parse, exp_map) = db.parse_macro_expansion(macro_file).value?;\n+        let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n-                let def = loc.def.ast_id().left().and_then(|id| {\n-                    let def_tt = match id.to_node(db) {\n-                        ast::Macro::MacroRules(mac) => mac.token_tree()?,\n-                        ast::Macro::MacroDef(_)\n-                            if matches!(*macro_def, TokenExpander::BuiltinAttr(_)) =>\n-                        {\n-                            return None\n-                        }\n-                        ast::Macro::MacroDef(mac) => mac.body()?,\n-                    };\n-                    Some(InFile::new(id.file_id, def_tt))\n-                });\n-                let attr_input_or_mac_def = def.or_else(|| match loc.kind {\n-                    MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n-                        let tt = ast_id\n-                            .to_node(db)\n-                            .doc_comments_and_attrs()\n-                            .nth(invoc_attr_index as usize)\n-                            .and_then(Either::left)?\n-                            .token_tree()?;\n-                        Some(InFile::new(ast_id.file_id, tt))\n-                    }\n-                    _ => None,\n-                });\n-\n-                Some(ExpansionInfo {\n-                    expanded: InFile::new(self, parse.syntax_node()),\n-                    arg: InFile::new(loc.kind.file_id(), arg_tt),\n-                    attr_input_or_mac_def,\n-                    macro_arg_shift: mbe::Shift::new(&macro_arg.0),\n-                    macro_arg,\n-                    macro_def,\n-                    exp_map,\n-                })\n+        let def = loc.def.ast_id().left().and_then(|id| {\n+            let def_tt = match id.to_node(db) {\n+                ast::Macro::MacroRules(mac) => mac.token_tree()?,\n+                ast::Macro::MacroDef(_) if matches!(*macro_def, TokenExpander::BuiltinAttr(_)) => {\n+                    return None\n+                }\n+                ast::Macro::MacroDef(mac) => mac.body()?,\n+            };\n+            Some(InFile::new(id.file_id, def_tt))\n+        });\n+        let attr_input_or_mac_def = def.or_else(|| match loc.kind {\n+            MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n+                let tt = ast_id\n+                    .to_node(db)\n+                    .doc_comments_and_attrs()\n+                    .nth(invoc_attr_index as usize)\n+                    .and_then(Either::left)?\n+                    .token_tree()?;\n+                Some(InFile::new(ast_id.file_id, tt))\n             }\n-        }\n+            _ => None,\n+        });\n+\n+        Some(ExpansionInfo {\n+            expanded: InFile::new(self, parse.syntax_node()),\n+            arg: InFile::new(loc.kind.file_id(), arg_tt),\n+            attr_input_or_mac_def,\n+            macro_arg_shift: mbe::Shift::new(&macro_arg.0),\n+            macro_arg,\n+            macro_def,\n+            exp_map,\n+        })\n     }\n \n     /// Indicate it is macro file generated for builtin derive\n     pub fn is_builtin_derive(&self, db: &dyn db::AstDatabase) -> Option<InFile<ast::Attr>> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n-                let attr = match loc.def.kind {\n-                    MacroDefKind::BuiltInDerive(..) => loc.kind.to_node(db),\n-                    _ => return None,\n-                };\n-                Some(attr.with_value(ast::Attr::cast(attr.value.clone())?))\n-            }\n-        }\n+        let macro_file = self.macro_file()?;\n+        let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n+        let attr = match loc.def.kind {\n+            MacroDefKind::BuiltInDerive(..) => loc.kind.to_node(db),\n+            _ => return None,\n+        };\n+        Some(attr.with_value(ast::Attr::cast(attr.value.clone())?))\n     }\n \n     pub fn is_custom_derive(&self, db: &dyn db::AstDatabase) -> bool {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => false,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n+        match self.macro_file() {\n+            Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.def.kind, MacroDefKind::ProcMacro(_, ProcMacroKind::CustomDerive, _))\n             }\n+            None => false,\n         }\n     }\n \n     /// Return whether this file is an include macro\n     pub fn is_include_macro(&self, db: &dyn db::AstDatabase) -> bool {\n-        match self.0 {\n-            HirFileIdRepr::MacroFile(macro_file) => {\n+        match self.macro_file() {\n+            Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.eager, Some(EagerCallInfo { included_file: Some(_), .. }))\n             }\n@@ -321,8 +317,8 @@ impl HirFileId {\n \n     /// Return whether this file is an attr macro\n     pub fn is_attr_macro(&self, db: &dyn db::AstDatabase) -> bool {\n-        match self.0 {\n-            HirFileIdRepr::MacroFile(macro_file) => {\n+        match self.macro_file() {\n+            Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.kind, MacroCallKind::Attr { .. })\n             }\n@@ -333,23 +329,36 @@ impl HirFileId {\n     /// Return whether this file is the pseudo expansion of the derive attribute.\n     /// See [`crate::builtin_attr_macro::derive_attr_expand`].\n     pub fn is_derive_attr_pseudo_expansion(&self, db: &dyn db::AstDatabase) -> bool {\n-        match self.0 {\n-            HirFileIdRepr::MacroFile(macro_file) => {\n+        match self.macro_file() {\n+            Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.kind, MacroCallKind::Attr { is_derive: true, .. })\n             }\n-            _ => false,\n+            None => false,\n         }\n     }\n \n+    #[inline]\n     pub fn is_macro(self) -> bool {\n-        matches!(self.0, HirFileIdRepr::MacroFile(_))\n+        self.0 & Self::MACRO_FILE_TAG_MASK != 0\n     }\n \n+    #[inline]\n     pub fn macro_file(self) -> Option<MacroFile> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(m) => Some(m),\n+        match self.0 & Self::MACRO_FILE_TAG_MASK {\n+            0 => None,\n+            _ => Some(MacroFile {\n+                macro_call_id: MacroCallId(InternId::from(self.0 ^ Self::MACRO_FILE_TAG_MASK)),\n+            }),\n+        }\n+    }\n+\n+    fn repr(self) -> HirFileIdRepr {\n+        match self.0 & Self::MACRO_FILE_TAG_MASK {\n+            0 => HirFileIdRepr::FileId(FileId(self.0)),\n+            _ => HirFileIdRepr::MacroFile(MacroFile {\n+                macro_call_id: MacroCallId(InternId::from(self.0 ^ Self::MACRO_FILE_TAG_MASK)),\n+            }),\n         }\n     }\n }\n@@ -442,7 +451,7 @@ impl MacroCallKind {\n     pub fn original_call_range_with_body(self, db: &dyn db::AstDatabase) -> FileRange {\n         let mut kind = self;\n         let file_id = loop {\n-            match kind.file_id().0 {\n+            match kind.file_id().repr() {\n                 HirFileIdRepr::MacroFile(file) => {\n                     kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n                 }\n@@ -467,7 +476,7 @@ impl MacroCallKind {\n     pub fn original_call_range(self, db: &dyn db::AstDatabase) -> FileRange {\n         let mut kind = self;\n         let file_id = loop {\n-            match kind.file_id().0 {\n+            match kind.file_id().repr() {\n                 HirFileIdRepr::MacroFile(file) => {\n                     kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n                 }\n@@ -779,7 +788,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     /// For attributes and derives, this will point back to the attribute only.\n     /// For the entire item `InFile::use original_file_range_full`.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n-        match self.file_id.0 {\n+        match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n                 if let Some(res) = self.original_file_range_opt(db) {\n@@ -846,7 +855,7 @@ impl InFile<SyntaxToken> {\n \n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n-        match self.file_id.0 {\n+        match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n                 if let Some(res) = self.original_file_range_opt(db) {\n@@ -861,7 +870,7 @@ impl InFile<SyntaxToken> {\n \n     /// Attempts to map the syntax node back up its macro calls.\n     pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n-        match self.file_id.0 {\n+        match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => {\n                 Some(FileRange { file_id, range: self.value.text_range() })\n             }"}, {"sha": "8c11408dec5d7fdd8456c99170955dd0a2a75f0c", "filename": "crates/ide-db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 22, "deletions": 112, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d2281f0367ba85c34ee9bce07d3cca40e1424721/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=d2281f0367ba85c34ee9bce07d3cca40e1424721", "patch": "@@ -14,11 +14,7 @@\n                 name: \"Alias\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: TYPE_ALIAS,\n@@ -36,11 +32,7 @@\n                 name: \"CONST\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: CONST,\n@@ -58,11 +50,7 @@\n                 name: \"CONST_WITH_INNER\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: CONST,\n@@ -80,11 +68,7 @@\n                 name: \"Enum\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: ENUM,\n@@ -102,11 +86,7 @@\n                 name: \"Macro\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: MACRO_DEF,\n@@ -124,11 +104,7 @@\n                 name: \"STATIC\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STATIC,\n@@ -146,11 +122,7 @@\n                 name: \"Struct\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -168,13 +140,7 @@\n                 name: \"StructFromMacro\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        MacroFile(\n-                            MacroFile {\n-                                macro_call_id: MacroCallId(\n-                                    0,\n-                                ),\n-                            },\n-                        ),\n+                        2147483648,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -192,11 +158,7 @@\n                 name: \"StructInFn\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -216,11 +178,7 @@\n                 name: \"StructInNamedConst\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -240,11 +198,7 @@\n                 name: \"StructInUnnamedConst\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -262,11 +216,7 @@\n                 name: \"Trait\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: TRAIT,\n@@ -284,11 +234,7 @@\n                 name: \"Union\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: UNION,\n@@ -306,11 +252,7 @@\n                 name: \"a_mod\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: MODULE,\n@@ -328,11 +270,7 @@\n                 name: \"b_mod\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: MODULE,\n@@ -350,11 +288,7 @@\n                 name: \"define_struct\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: MACRO_RULES,\n@@ -372,11 +306,7 @@\n                 name: \"impl_fn\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: FN,\n@@ -394,11 +324,7 @@\n                 name: \"macro_rules_macro\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: MACRO_RULES,\n@@ -416,11 +342,7 @@\n                 name: \"main\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: FN,\n@@ -438,11 +360,7 @@\n                 name: \"trait_fn\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: FN,\n@@ -475,11 +393,7 @@\n                 name: \"StructInModA\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                0,\n-                            ),\n-                        ),\n+                        0,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,\n@@ -510,11 +424,7 @@\n                 name: \"StructInModB\",\n                 loc: DeclarationLocation {\n                     hir_file_id: HirFileId(\n-                        FileId(\n-                            FileId(\n-                                1,\n-                            ),\n-                        ),\n+                        1,\n                     ),\n                     ptr: SyntaxNodePtr {\n                         kind: STRUCT,"}]}