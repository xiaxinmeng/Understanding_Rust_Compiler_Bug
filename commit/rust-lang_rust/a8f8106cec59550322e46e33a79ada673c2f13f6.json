{"sha": "a8f8106cec59550322e46e33a79ada673c2f13f6", "node_id": "C_kwDOAAsO6NoAKGE4ZjgxMDZjZWM1OTU1MDMyMmU0NmUzM2E3OWFkYTY3M2MyZjEzZjY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-26T23:50:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-04T13:32:10Z"}, "message": "Use static dispatch in the visitor", "tree": {"sha": "86c380733bc28cac8226dd1c752a568db7c2dbc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c380733bc28cac8226dd1c752a568db7c2dbc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f8106cec59550322e46e33a79ada673c2f13f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f8106cec59550322e46e33a79ada673c2f13f6", "html_url": "https://github.com/rust-lang/rust/commit/a8f8106cec59550322e46e33a79ada673c2f13f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f8106cec59550322e46e33a79ada673c2f13f6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e71cebd37432c7682f13ab7e779cf4fe036afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e71cebd37432c7682f13ab7e779cf4fe036afe", "html_url": "https://github.com/rust-lang/rust/commit/61e71cebd37432c7682f13ab7e779cf4fe036afe"}], "stats": {"total": 253, "additions": 148, "deletions": 105}, "files": [{"sha": "01ae4320f3bbbfd19710887e66602564afb7af57", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -182,15 +182,15 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n }\n \n impl VisitMachineValues for Thread<'_, '_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let Thread { panic_payload, last_error, stack, state: _, thread_name: _, join_status: _ } =\n             self;\n \n         if let Some(payload) = panic_payload {\n-            visit(&Operand::Immediate(Immediate::Scalar(*payload)))\n+            visit.visit(*payload);\n         }\n         if let Some(error) = last_error {\n-            visit(&Operand::Indirect(**error))\n+            visit.visit(**error);\n         }\n         for frame in stack {\n             frame.visit_machine_values(visit)\n@@ -199,7 +199,7 @@ impl VisitMachineValues for Thread<'_, '_> {\n }\n \n impl VisitMachineValues for Frame<'_, '_, Provenance, FrameData<'_>> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let Frame {\n             return_place,\n             locals,\n@@ -213,12 +213,12 @@ impl VisitMachineValues for Frame<'_, '_, Provenance, FrameData<'_>> {\n \n         // Return place.\n         if let Place::Ptr(mplace) = **return_place {\n-            visit(&Operand::Indirect(mplace));\n+            visit.visit(mplace);\n         }\n         // Locals.\n         for local in locals.iter() {\n             if let LocalValue::Live(value) = &local.value {\n-                visit(value);\n+                visit.visit(value);\n             }\n         }\n \n@@ -299,7 +299,7 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n }\n \n impl VisitMachineValues for ThreadManager<'_, '_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let ThreadManager {\n             threads,\n             thread_local_alloc_ids,\n@@ -313,8 +313,7 @@ impl VisitMachineValues for ThreadManager<'_, '_> {\n             thread.visit_machine_values(visit);\n         }\n         for ptr in thread_local_alloc_ids.borrow().values().copied() {\n-            let ptr: Pointer<Option<Provenance>> = ptr.into();\n-            visit(&Operand::Indirect(MemPlace::from_ptr(ptr)));\n+            visit.visit(ptr);\n         }\n         // FIXME: Do we need to do something for TimeoutCallback? That's a Box<dyn>, not sure what\n         // to do."}, {"sha": "15c6c8e9c0e46a1b4b1ca8e2cf2e27963a631073", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -108,19 +108,15 @@ pub struct StoreBufferAlloc {\n     store_buffers: RefCell<RangeObjectMap<StoreBuffer>>,\n }\n \n-impl VisitProvenance for StoreBufferAlloc {\n-    fn visit_provenance(&self, visitor: &mut impl FnMut(SbTag)) {\n+impl VisitMachineValues for StoreBufferAlloc {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         for val in self\n             .store_buffers\n             .borrow()\n             .iter()\n             .flat_map(|buf| buf.buffer.iter().map(|element| &element.val))\n         {\n-            if let Scalar::Ptr(ptr, _) = val {\n-                if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                    visitor(sb);\n-                }\n-            }\n+            visit.visit(val);\n         }\n     }\n }"}, {"sha": "245bdc51a8a752060037bbd5562b70f8acfc4784", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -112,7 +112,7 @@ pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n     CallId, EvalContextExt as StackedBorEvalContextExt, Item, Permission, SbTag, Stack, Stacks,\n };\n-pub use crate::tag_gc::{EvalContextExt as _, VisitMachineValues, VisitProvenance};\n+pub use crate::tag_gc::{EvalContextExt as _, ProvenanceVisitor, VisitMachineValues};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power."}, {"sha": "523aad22aa5aaf6c52b58205a350eed19ea92270", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n }\n \n impl VisitMachineValues for FrameData<'_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let FrameData { catch_unwind, stacked_borrows: _, timing: _ } = self;\n \n         if let Some(catch_unwind) = catch_unwind {\n@@ -261,6 +261,20 @@ pub struct AllocExtra {\n     pub weak_memory: Option<weak_memory::AllocExtra>,\n }\n \n+impl VisitMachineValues for AllocExtra {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n+        let AllocExtra { stacked_borrows, data_race: _, weak_memory } = self;\n+\n+        if let Some(stacked_borrows) = stacked_borrows {\n+            stacked_borrows.borrow().visit_machine_values(visit);\n+        }\n+\n+        if let Some(weak_memory) = weak_memory {\n+            weak_memory.visit_machine_values(visit);\n+        }\n+    }\n+}\n+\n /// Precomputed layouts of primitive types\n pub struct PrimitiveLayouts<'tcx> {\n     pub unit: TyAndLayout<'tcx>,\n@@ -602,7 +616,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n }\n \n impl VisitMachineValues for MiriMachine<'_, '_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let MiriMachine {\n             threads,\n             tls,\n@@ -621,17 +635,16 @@ impl VisitMachineValues for MiriMachine<'_, '_> {\n         dir_handler.visit_machine_values(visit);\n \n         if let Some(argc) = argc {\n-            visit(&Operand::Indirect(*argc));\n+            visit.visit(argc);\n         }\n         if let Some(argv) = argv {\n-            visit(&Operand::Indirect(*argv));\n+            visit.visit(argv);\n         }\n         if let Some(cmd_line) = cmd_line {\n-            visit(&Operand::Indirect(*cmd_line));\n+            visit.visit(cmd_line);\n         }\n         for ptr in extern_statics.values().copied() {\n-            let ptr: Pointer<Option<Provenance>> = ptr.into();\n-            visit(&Operand::Indirect(MemPlace::from_ptr(ptr)));\n+            visit.visit(ptr);\n         }\n     }\n }"}, {"sha": "d922014c38352f5cbc85ab39b73f40c5897f5d93", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -37,15 +37,14 @@ pub struct EnvVars<'tcx> {\n }\n \n impl VisitMachineValues for EnvVars<'_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let EnvVars { map, environ } = self;\n \n         for ptr in map.values() {\n-            visit(&Operand::Indirect(MemPlace::from_ptr(*ptr)));\n+            visit.visit(*ptr);\n         }\n-\n         if let Some(env) = environ {\n-            visit(&Operand::Indirect(**env));\n+            visit.visit(**env);\n         }\n     }\n }"}, {"sha": "0d681d3e09b598dc43bd8a1d75cb7dda70277754", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -36,10 +36,10 @@ pub struct CatchUnwindData<'tcx> {\n }\n \n impl VisitMachineValues for CatchUnwindData<'_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let CatchUnwindData { catch_fn, data, dest: _, ret: _ } = self;\n-        visit(&Operand::Indirect(MemPlace::from_ptr(*catch_fn)));\n-        visit(&Operand::Immediate(Immediate::Scalar(*data)));\n+        visit.visit(catch_fn);\n+        visit.visit(data);\n     }\n }\n "}, {"sha": "568eb6fa910717eb8947a471524704a040cc2510", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -236,14 +236,14 @@ impl<'tcx> TlsData<'tcx> {\n }\n \n impl VisitMachineValues for TlsData<'_> {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let TlsData { keys, macos_thread_dtors, next_key: _, dtors_running: _ } = self;\n \n         for scalar in keys.values().flat_map(|v| v.data.values()) {\n-            visit(&Operand::Immediate(Immediate::Scalar(*scalar)));\n+            visit.visit(scalar);\n         }\n         for (_, scalar) in macos_thread_dtors.values() {\n-            visit(&Operand::Immediate(Immediate::Scalar(*scalar)));\n+            visit.visit(scalar);\n         }\n     }\n }"}, {"sha": "5024b2ab45f02458103223864d17cadd453df7b2", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -463,11 +463,11 @@ impl Default for DirHandler {\n }\n \n impl VisitMachineValues for DirHandler {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>)) {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         let DirHandler { streams, next_id: _ } = self;\n \n         for dir in streams.values() {\n-            visit(&Operand::Indirect(MemPlace::from_ptr(dir.entry)));\n+            visit.visit(dir.entry);\n         }\n     }\n }"}, {"sha": "b40358e2c15a3eaa885cbd100c57d99fa1e09376", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -513,10 +513,10 @@ impl Stacks {\n     }\n }\n \n-impl VisitProvenance for Stacks {\n-    fn visit_provenance(&self, visit: &mut impl FnMut(SbTag)) {\n+impl VisitMachineValues for Stacks {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n         for tag in self.exposed_tags.iter().copied() {\n-            visit(tag);\n+            visit.visit(tag);\n         }\n     }\n }"}, {"sha": "e2273f055dd9b86bbce74ec4835437e59faebbdc", "filename": "src/tools/miri/src/tag_gc.rs", "status": "modified", "additions": 102, "deletions": 66, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8106cec59550322e46e33a79ada673c2f13f6/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs?ref=a8f8106cec59550322e46e33a79ada673c2f13f6", "patch": "@@ -3,34 +3,120 @@ use rustc_data_structures::fx::FxHashSet;\n use crate::*;\n \n pub trait VisitMachineValues {\n-    fn visit_machine_values(&self, visit: &mut impl FnMut(&Operand<Provenance>));\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor);\n }\n \n-pub trait VisitProvenance {\n-    fn visit_provenance(&self, visit: &mut impl FnMut(SbTag));\n+pub trait MachineValue {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>);\n+}\n+\n+pub struct ProvenanceVisitor {\n+    tags: FxHashSet<SbTag>,\n+}\n+\n+impl ProvenanceVisitor {\n+    pub fn visit<V>(&mut self, v: V)\n+    where\n+        V: MachineValue,\n+    {\n+        v.visit_provenance(&mut self.tags);\n+    }\n+}\n+\n+impl<T: MachineValue> MachineValue for &T {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        (**self).visit_provenance(tags);\n+    }\n+}\n+\n+impl MachineValue for Operand<Provenance> {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        match self {\n+            Operand::Immediate(Immediate::Scalar(s)) => {\n+                s.visit_provenance(tags);\n+            }\n+            Operand::Immediate(Immediate::ScalarPair(s1, s2)) => {\n+                s1.visit_provenance(tags);\n+                s2.visit_provenance(tags);\n+            }\n+            Operand::Immediate(Immediate::Uninit) => {}\n+            Operand::Indirect(p) => {\n+                p.visit_provenance(tags);\n+            }\n+        }\n+    }\n+}\n+\n+impl MachineValue for Scalar<Provenance> {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        if let Scalar::Ptr(ptr, _) = self {\n+            if let Provenance::Concrete { sb, .. } = ptr.provenance {\n+                tags.insert(sb);\n+            }\n+        }\n+    }\n+}\n+\n+impl MachineValue for MemPlace<Provenance> {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        if let Some(Provenance::Concrete { sb, .. }) = self.ptr.provenance {\n+            tags.insert(sb);\n+        }\n+    }\n+}\n+\n+impl MachineValue for SbTag {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        tags.insert(*self);\n+    }\n+}\n+\n+impl MachineValue for Pointer<Provenance> {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        let (prov, _offset) = self.into_parts();\n+        if let Provenance::Concrete { sb, .. } = prov {\n+            tags.insert(sb);\n+        }\n+    }\n+}\n+\n+impl MachineValue for Pointer<Option<Provenance>> {\n+    fn visit_provenance(&self, tags: &mut FxHashSet<SbTag>) {\n+        let (prov, _offset) = self.into_parts();\n+        if let Some(Provenance::Concrete { sb, .. }) = prov {\n+            tags.insert(sb);\n+        }\n+    }\n+}\n+\n+impl VisitMachineValues for Allocation<Provenance, AllocExtra> {\n+    fn visit_machine_values(&self, visit: &mut ProvenanceVisitor) {\n+        for (_size, prov) in self.provenance().iter() {\n+            if let Provenance::Concrete { sb, .. } = prov {\n+                visit.visit(*sb);\n+            }\n+        }\n+\n+        self.extra.visit_machine_values(visit);\n+    }\n }\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n-    /// Generic GC helper to visit everything that can store a value. The `acc` offers some chance to\n-    /// accumulate everything.\n-    fn visit_all_machine_values<T>(\n-        &self,\n-        acc: &mut T,\n-        mut visit_operand: impl FnMut(&mut T, &Operand<Provenance>),\n-        mut visit_alloc: impl FnMut(&mut T, &Allocation<Provenance, AllocExtra>),\n-    ) {\n+    /// GC helper to visit everything that can store provenance. The `ProvenanceVisitor` knows how\n+    /// to extract provenance from the interpreter data types.\n+    fn visit_all_machine_values(&self, acc: &mut ProvenanceVisitor) {\n         let this = self.eval_context_ref();\n \n         // Memory.\n         this.memory.alloc_map().iter(|it| {\n             for (_id, (_kind, alloc)) in it {\n-                visit_alloc(acc, alloc);\n+                alloc.visit_machine_values(acc);\n             }\n         });\n \n         // And all the other machine values.\n-        this.machine.visit_machine_values(&mut |op| visit_operand(acc, op));\n+        this.machine.visit_machine_values(acc);\n     }\n \n     fn garbage_collect_tags(&mut self) -> InterpResult<'tcx> {\n@@ -40,59 +126,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n             return Ok(());\n         }\n \n-        let mut tags = FxHashSet::default();\n-\n-        let visit_scalar = |tags: &mut FxHashSet<SbTag>, s: &Scalar<Provenance>| {\n-            if let Scalar::Ptr(ptr, _) = s {\n-                if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                    tags.insert(sb);\n-                }\n-            }\n-        };\n-\n-        let visit_provenance = |tags: &mut FxHashSet<SbTag>, tag: SbTag| {\n-            tags.insert(tag);\n-        };\n-\n-        this.visit_all_machine_values(\n-            &mut tags,\n-            |tags, op| {\n-                match op {\n-                    Operand::Immediate(Immediate::Scalar(s)) => {\n-                        visit_scalar(tags, s);\n-                    }\n-                    Operand::Immediate(Immediate::ScalarPair(s1, s2)) => {\n-                        visit_scalar(tags, s1);\n-                        visit_scalar(tags, s2);\n-                    }\n-                    Operand::Immediate(Immediate::Uninit) => {}\n-                    Operand::Indirect(MemPlace { ptr, .. }) => {\n-                        if let Some(Provenance::Concrete { sb, .. }) = ptr.provenance {\n-                            tags.insert(sb);\n-                        }\n-                    }\n-                }\n-            },\n-            |tags, alloc| {\n-                for (_size, prov) in alloc.provenance().iter() {\n-                    if let Provenance::Concrete { sb, .. } = prov {\n-                        tags.insert(*sb);\n-                    }\n-                }\n-\n-                let stacks =\n-                    alloc.extra.stacked_borrows.as_ref().expect(\n-                        \"we should not even enter the tag GC if Stacked Borrows is disabled\",\n-                    );\n-                stacks.borrow().visit_provenance(&mut |tag| visit_provenance(tags, tag));\n-\n-                if let Some(store_buffers) = alloc.extra.weak_memory.as_ref() {\n-                    store_buffers.visit_provenance(&mut |tag| visit_provenance(tags, tag));\n-                }\n-            },\n-        );\n-\n-        self.remove_unreachable_tags(tags);\n+        let mut visitor = ProvenanceVisitor { tags: FxHashSet::default() };\n+        this.visit_all_machine_values(&mut visitor);\n+        self.remove_unreachable_tags(visitor.tags);\n \n         Ok(())\n     }"}]}