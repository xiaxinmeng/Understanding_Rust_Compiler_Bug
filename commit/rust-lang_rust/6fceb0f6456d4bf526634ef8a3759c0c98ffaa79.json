{"sha": "6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "node_id": "C_kwDOAAsO6NoAKDZmY2ViMGY2NDU2ZDRiZjUyNjYzNGVmOGEzNzU5YzBjOThmZmFhNzk", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T20:38:48Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T21:22:14Z"}, "message": "Improve `Allocation::hash\n\nExhaustively destructure and ignore `()`", "tree": {"sha": "eff2a54a03d5b75450d0829b4dccb15669a03737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff2a54a03d5b75450d0829b4dccb15669a03737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "html_url": "https://github.com/rust-lang/rust/commit/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a90de8f5e08e736c24348eab1caa62cd57790b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a90de8f5e08e736c24348eab1caa62cd57790b0", "html_url": "https://github.com/rust-lang/rust/commit/5a90de8f5e08e736c24348eab1caa62cd57790b0"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "7b18255f57a8717fceb06d383fec18af9b19170d", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "patch": "@@ -109,26 +109,34 @@ const MAX_HASHED_BUFFER_LEN: usize = 2 * MAX_BYTES_TO_HASH;\n // large.\n impl hash::Hash for Allocation {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        let Self {\n+            bytes,\n+            provenance,\n+            init_mask,\n+            align,\n+            mutability,\n+            extra: _, // don't bother hashing ()\n+        } = self;\n+\n         // Partially hash the `bytes` buffer when it is large. To limit collisions with common\n         // prefixes and suffixes, we hash the length and some slices of the buffer.\n-        let byte_count = self.bytes.len();\n+        let byte_count = bytes.len();\n         if byte_count > MAX_HASHED_BUFFER_LEN {\n             // Hash the buffer's length.\n             byte_count.hash(state);\n \n             // And its head and tail.\n-            self.bytes[..MAX_BYTES_TO_HASH].hash(state);\n-            self.bytes[byte_count - MAX_BYTES_TO_HASH..].hash(state);\n+            bytes[..MAX_BYTES_TO_HASH].hash(state);\n+            bytes[byte_count - MAX_BYTES_TO_HASH..].hash(state);\n         } else {\n-            self.bytes.hash(state);\n+            bytes.hash(state);\n         }\n \n         // Hash the other fields as usual.\n-        self.provenance.hash(state);\n-        self.init_mask.hash(state);\n-        self.align.hash(state);\n-        self.mutability.hash(state);\n-        self.extra.hash(state);\n+        provenance.hash(state);\n+        init_mask.hash(state);\n+        align.hash(state);\n+        mutability.hash(state);\n     }\n }\n "}]}