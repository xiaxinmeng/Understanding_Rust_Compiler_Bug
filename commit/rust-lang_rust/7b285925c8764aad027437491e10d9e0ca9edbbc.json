{"sha": "7b285925c8764aad027437491e10d9e0ca9edbbc", "node_id": "C_kwDOAAsO6NoAKDdiMjg1OTI1Yzg3NjRhYWQwMjc0Mzc0OTFlMTBkOWUwY2E5ZWRiYmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-12T19:04:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-12T19:04:06Z"}, "message": "Ensure res and module are consistent with each other.\n\nThe `record_used` parameter changes the result, so we must pass the same\nvalue for initial and module resolution.", "tree": {"sha": "f0b0c3f5b33a1a000958e57aff82cf171c2874a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b0c3f5b33a1a000958e57aff82cf171c2874a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b285925c8764aad027437491e10d9e0ca9edbbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b285925c8764aad027437491e10d9e0ca9edbbc", "html_url": "https://github.com/rust-lang/rust/commit/7b285925c8764aad027437491e10d9e0ca9edbbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b285925c8764aad027437491e10d9e0ca9edbbc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554aceba49c527d344bc3acab853ee58d0eff5d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/554aceba49c527d344bc3acab853ee58d0eff5d3", "html_url": "https://github.com/rust-lang/rust/commit/554aceba49c527d344bc3acab853ee58d0eff5d3"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "6535765690521a5239ce1f67dc47b68fa6ea4a54", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b285925c8764aad027437491e10d9e0ca9edbbc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b285925c8764aad027437491e10d9e0ca9edbbc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7b285925c8764aad027437491e10d9e0ca9edbbc", "patch": "@@ -1240,15 +1240,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             );\n             let res = res.base_res();\n             if res != Res::Err {\n-                new_id = Some(res.def_id());\n-                let span = trait_ref.path.span;\n                 if let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(\n                     &path,\n                     Some(TypeNS),\n-                    false,\n-                    span,\n+                    true,\n+                    trait_ref.path.span,\n                     CrateLint::SimplePath(trait_ref.ref_id),\n                 ) {\n+                    new_id = Some(res.def_id());\n                     new_val = Some((module, trait_ref.clone()));\n                 }\n             }\n@@ -1413,7 +1412,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn check_trait_item<F>(\n         &mut self,\n         id: NodeId,\n-        ident: Ident,\n+        mut ident: Ident,\n         kind: &AssocItemKind,\n         ns: Namespace,\n         span: Span,\n@@ -1423,32 +1422,23 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n         let Some((module, _)) = &self.current_trait_ref else { return; };\n-        let mut binding = self.r.resolve_ident_in_module(\n-            ModuleOrUniformRoot::Module(module),\n-            ident,\n-            ns,\n-            &self.parent_scope,\n-            false,\n-            span,\n-        );\n-        if binding.is_err() {\n+        ident.span.normalize_to_macros_2_0_and_adjust(module.expansion);\n+        let key = self.r.new_key(ident, ns);\n+        let mut binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n+        debug!(?binding);\n+        if binding.is_none() {\n             // We could not find the trait item in the correct namespace.\n             // Check the other namespace to report an error.\n             let ns = match ns {\n                 ValueNS => TypeNS,\n                 TypeNS => ValueNS,\n                 _ => ns,\n             };\n-            binding = self.r.resolve_ident_in_module(\n-                ModuleOrUniformRoot::Module(module),\n-                ident,\n-                ns,\n-                &self.parent_scope,\n-                false,\n-                span,\n-            );\n+            let key = self.r.new_key(ident, ns);\n+            binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n+            debug!(?binding);\n         }\n-        let Ok(binding) = binding else {\n+        let Some(binding) = binding else {\n             // We could not find the method: report an error.\n             let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n             let path = &self.current_trait_ref.as_ref().unwrap().1.path;"}]}