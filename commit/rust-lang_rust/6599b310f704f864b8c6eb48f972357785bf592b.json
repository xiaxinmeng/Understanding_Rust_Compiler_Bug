{"sha": "6599b310f704f864b8c6eb48f972357785bf592b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OTliMzEwZjcwNGY4NjRiOGM2ZWI0OGY5NzIzNTc3ODViZjU5MmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-19T18:17:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-19T18:17:01Z"}, "message": "rustc: Don't return \"result\" types from glue helper functions. This allows glue to fail.", "tree": {"sha": "6d8eb32559a8e6d948132096ee82d34b87995867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8eb32559a8e6d948132096ee82d34b87995867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6599b310f704f864b8c6eb48f972357785bf592b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6599b310f704f864b8c6eb48f972357785bf592b", "html_url": "https://github.com/rust-lang/rust/commit/6599b310f704f864b8c6eb48f972357785bf592b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6599b310f704f864b8c6eb48f972357785bf592b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b5e91544210e0520edb6056a37c18037c88537", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b5e91544210e0520edb6056a37c18037c88537", "html_url": "https://github.com/rust-lang/rust/commit/37b5e91544210e0520edb6056a37c18037c88537"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "a6c4568dd01e172923047fa909d4be74516c2c32", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6599b310f704f864b8c6eb48f972357785bf592b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6599b310f704f864b8c6eb48f972357785bf592b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6599b310f704f864b8c6eb48f972357785bf592b", "patch": "@@ -1658,7 +1658,7 @@ fn declare_tydesc(@local_ctxt cx, @ty.t t) {\n }\n \n tag make_generic_glue_helper_fn {\n-    mgghf_single(val_and_ty_fn);\n+    mgghf_single(fn(@block_ctxt cx, ValueRef v, @ty.t t));\n     mgghf_cmp;\n }\n \n@@ -1694,7 +1694,6 @@ fn make_generic_glue(@local_ctxt cx,\n     auto bcx = new_top_block_ctxt(fcx);\n     auto lltop = bcx.llbb;\n \n-    auto re;\n     if (!ty.type_is_scalar(t)) {\n \n         // Any nontrivial glue is with values passed *by alias*; this is a\n@@ -1729,39 +1728,40 @@ fn make_generic_glue(@local_ctxt cx,\n \n         alt (helper) {\n             case (mgghf_single(?single_fn)) {\n-                re = single_fn(bcx, llval0, t);\n+                single_fn(bcx, llval0, t);\n             }\n             case (mgghf_cmp) {\n                 auto llrawptr1 = llvm.LLVMGetParam(llfn, 5u);\n                 auto llval1 = bcx.build.BitCast(llrawptr0, llty);\n \n                 auto llcmpval = llvm.LLVMGetParam(llfn, 6u);\n \n-                re = make_cmp_glue(bcx, llval0, llval1, t, llcmpval);\n+                make_cmp_glue(bcx, llval0, llval1, t, llcmpval);\n             }\n         }\n     } else {\n-        re = res(bcx, C_nil());\n+        bcx.build.RetVoid();\n     }\n \n-    re.bcx.build.RetVoid();\n-\n     // Tie up the llallocas -> lltop edge.\n     new_builder(fcx.llallocas).Br(lltop);\n \n     ret llfn;\n }\n \n-fn make_take_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n+fn make_take_glue(@block_ctxt cx, ValueRef v, @ty.t t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n+    auto bcx;\n     if (ty.type_is_boxed(t)) {\n-        ret incr_refcnt_of_boxed(cx, cx.build.Load(v));\n+        bcx = incr_refcnt_of_boxed(cx, cx.build.Load(v)).bcx;\n \n     } else if (ty.type_is_structural(t)) {\n-        ret iter_structural_ty(cx, v, t,\n-                               bind take_ty(_, _, _));\n+        bcx = iter_structural_ty(cx, v, t,\n+                                 bind take_ty(_, _, _)).bcx;\n+    } else {\n+        bcx = cx;\n     }\n-    ret res(cx, C_nil());\n+    bcx.build.RetVoid();\n }\n \n fn incr_refcnt_of_boxed(@block_ctxt cx, ValueRef box_ptr) -> result {\n@@ -1783,12 +1783,13 @@ fn incr_refcnt_of_boxed(@block_ctxt cx, ValueRef box_ptr) -> result {\n     ret res(next_cx, C_nil());\n }\n \n-fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n+fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n+    auto rslt;\n     alt (t.struct) {\n         case (ty.ty_str) {\n             auto v = cx.build.Load(v0);\n-            ret decr_refcnt_and_if_zero\n+            rslt = decr_refcnt_and_if_zero\n                 (cx, v, bind trans_non_gc_free(_, v),\n                  \"free string\",\n                  T_int(), C_int(0));\n@@ -1803,10 +1804,10 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n                 ret trans_non_gc_free(res.bcx, v);\n             }\n             auto v = cx.build.Load(v0);\n-            ret decr_refcnt_and_if_zero(cx, v,\n-                                        bind hit_zero(_, v, t),\n-                                        \"free vector\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, v,\n+                                          bind hit_zero(_, v, t),\n+                                          \"free vector\",\n+                                          T_int(), C_int(0));\n         }\n \n         case (ty.ty_box(?body_mt)) {\n@@ -1822,10 +1823,10 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n                 ret trans_non_gc_free(res.bcx, v);\n             }\n             auto v = cx.build.Load(v0);\n-            ret decr_refcnt_and_if_zero(cx, v,\n-                                        bind hit_zero(_, v, body_mt.ty),\n-                                        \"free box\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, v,\n+                                           bind hit_zero(_, v, body_mt.ty),\n+                                           \"free box\",\n+                                           T_int(), C_int(0));\n         }\n \n         case (ty.ty_port(_)) {\n@@ -1834,10 +1835,10 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n                                  vec(vp2i(cx, v)));\n             }\n             auto v = cx.build.Load(v0);\n-            ret decr_refcnt_and_if_zero(cx, v,\n-                                        bind hit_zero(_, v),\n-                                        \"free port\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, v,\n+                                           bind hit_zero(_, v),\n+                                           \"free port\",\n+                                           T_int(), C_int(0));\n         }\n \n         case (ty.ty_chan(_)) {\n@@ -1846,10 +1847,10 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n                                  vec(vp2i(cx, v)));\n             }\n             auto v = cx.build.Load(v0);\n-            ret decr_refcnt_and_if_zero(cx, v,\n-                                        bind hit_zero(_, v),\n-                                        \"free chan\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, v,\n+                                           bind hit_zero(_, v),\n+                                           \"free chan\",\n+                                           T_int(), C_int(0));\n         }\n \n         case (ty.ty_obj(_)) {\n@@ -1880,10 +1881,10 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n \n             auto boxptr = cx.build.Load(box_cell);\n \n-            ret decr_refcnt_and_if_zero(cx, boxptr,\n-                                        bind hit_zero(_, boxptr),\n-                                        \"free obj\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, boxptr,\n+                                           bind hit_zero(_, boxptr),\n+                                           \"free obj\",\n+                                           T_int(), C_int(0));\n         }\n \n         case (ty.ty_fn(_,_,_)) {\n@@ -1919,27 +1920,26 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, @ty.t t) -> result {\n \n             auto boxptr = cx.build.Load(box_cell);\n \n-            ret decr_refcnt_and_if_zero(cx, boxptr,\n-                                        bind hit_zero(_, boxptr),\n-                                        \"free fn\",\n-                                        T_int(), C_int(0));\n+            rslt = decr_refcnt_and_if_zero(cx, boxptr,\n+                                           bind hit_zero(_, boxptr),\n+                                           \"free fn\",\n+                                           T_int(), C_int(0));\n         }\n \n         case (_) {\n             if (ty.type_is_structural(t)) {\n-                ret iter_structural_ty(cx, v0, t,\n-                                       bind drop_ty(_, _, _));\n+                rslt = iter_structural_ty(cx, v0, t,\n+                                          bind drop_ty(_, _, _));\n \n             } else if (ty.type_is_scalar(t) ||\n                        ty.type_is_native(t) ||\n                        ty.type_is_nil(t)) {\n-                ret res(cx, C_nil());\n+                rslt = res(cx, C_nil());\n             }\n         }\n     }\n-    cx.fcx.lcx.ccx.sess.bug(\"bad type in trans.make_drop_glue_inner: \" +\n-                        ty.ty_to_str(t));\n-    fail;\n+\n+    rslt.bcx.build.RetVoid();\n }\n \n fn decr_refcnt_and_if_zero(@block_ctxt cx,\n@@ -1986,8 +1986,8 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n }\n \n fn make_cmp_glue(@block_ctxt cx, ValueRef v0, ValueRef v1, @ty.t t,\n-        ValueRef llop) -> result {\n-    ret res(cx, C_nil());   // TODO\n+        ValueRef llop) {\n+    cx.build.RetVoid();     // TODO\n }\n \n "}]}