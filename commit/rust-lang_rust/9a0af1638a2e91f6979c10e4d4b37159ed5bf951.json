{"sha": "9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGFmMTYzOGEyZTkxZjY5NzljMTBlNGQ0YjM3MTU5ZWQ1YmY5NTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-25T16:39:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-28T00:56:46Z"}, "message": "rustc: remove unused `bounds` field from `RegionParameterDef`.", "tree": {"sha": "6e2d6bb0f504d5fc6ac5f64dc5924f07de15e046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e2d6bb0f504d5fc6ac5f64dc5924f07de15e046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "html_url": "https://github.com/rust-lang/rust/commit/9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eac052a33f38688d582d3bb5242728f543a3c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eac052a33f38688d582d3bb5242728f543a3c8f", "html_url": "https://github.com/rust-lang/rust/commit/4eac052a33f38688d582d3bb5242728f543a3c8f"}], "stats": {"total": 50, "additions": 12, "deletions": 38}, "files": [{"sha": "cc813d0bf831e068b09372eb3cc3a490bb909045", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -606,20 +606,19 @@ pub struct TypeParameterDef<'tcx> {\n     pub pure_wrt_drop: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub struct RegionParameterDef<'tcx> {\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+pub struct RegionParameterDef {\n     pub name: Name,\n     pub def_id: DefId,\n     pub index: u32,\n-    pub bounds: Vec<&'tcx ty::Region>,\n \n     /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n     /// on generic parameter `'a`, asserts data of lifetime `'a`\n     /// won't be accessed during the parent type's `Drop` impl.\n     pub pure_wrt_drop: bool,\n }\n \n-impl<'tcx> RegionParameterDef<'tcx> {\n+impl RegionParameterDef {\n     pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n         ty::EarlyBoundRegion {\n             index: self.index,\n@@ -640,7 +639,7 @@ pub struct Generics<'tcx> {\n     pub parent: Option<DefId>,\n     pub parent_regions: u32,\n     pub parent_types: u32,\n-    pub regions: Vec<RegionParameterDef<'tcx>>,\n+    pub regions: Vec<RegionParameterDef>,\n     pub types: Vec<TypeParameterDef<'tcx>>,\n     pub has_self: bool,\n }\n@@ -658,7 +657,7 @@ impl<'tcx> Generics<'tcx> {\n         self.parent_count() + self.own_count()\n     }\n \n-    pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef<'tcx> {\n+    pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef {\n         &self.regions[param.index as usize - self.has_self as usize]\n     }\n "}, {"sha": "06ba1b2a1fafc74a47abf190a8e974bd89e42bd5", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -353,7 +353,7 @@ macro_rules! CopyImpls {\n     }\n }\n \n-CopyImpls! { (), hir::Unsafety, abi::Abi }\n+CopyImpls! { (), hir::Unsafety, abi::Abi, ty::RegionParameterDef }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> (T, U) {\n@@ -735,22 +735,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::RegionParameterDef {\n-            name: self.name,\n-            def_id: self.def_id,\n-            index: self.index,\n-            bounds: self.bounds.fold_with(folder),\n-            pure_wrt_drop: self.pure_wrt_drop,\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.bounds.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::Generics {"}, {"sha": "74e27f84fddc24868db13580a413298ee7db1d4e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -336,13 +336,12 @@ impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Debug for ty::RegionParameterDef<'tcx> {\n+impl fmt::Debug for ty::RegionParameterDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"RegionParameterDef({}, {:?}, {}, {:?})\",\n+        write!(f, \"RegionParameterDef({}, {:?}, {})\",\n                self.name,\n                self.def_id,\n-               self.index,\n-               self.bounds)\n+               self.index)\n     }\n }\n "}, {"sha": "d9c639f2bc573dbc4d853e32b62d8c27fb165730", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -256,7 +256,7 @@ pub struct Generics<'tcx> {\n     pub parent: Option<DefId>,\n     pub parent_regions: u32,\n     pub parent_types: u32,\n-    pub regions: LazySeq<ty::RegionParameterDef<'tcx>>,\n+    pub regions: LazySeq<ty::RegionParameterDef>,\n     pub types: LazySeq<ty::TypeParameterDef<'tcx>>,\n     pub has_self: bool,\n     pub object_lifetime_defaults: LazySeq<ObjectLifetimeDefault>,"}, {"sha": "bbd0c8058151f2b6669efce9a17beb374c52330a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -1446,9 +1446,6 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 name: l.lifetime.name,\n                 index: own_start + i as u32,\n                 def_id: tcx.hir.local_def_id(l.lifetime.id),\n-                bounds: l.bounds.iter().map(|l| {\n-                    AstConv::ast_region_to_region(&ccx.icx(&()), l, None)\n-                }).collect(),\n                 pure_wrt_drop: l.pure_wrt_drop,\n             }\n         }).collect::<Vec<_>>();"}, {"sha": "7591475c5d3fa12022d3fe800a68f90b371500ec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0af1638a2e91f6979c10e4d4b37159ed5bf951/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a0af1638a2e91f6979c10e4d4b37159ed5bf951", "patch": "@@ -794,7 +794,7 @@ impl Clean<Lifetime> for hir::LifetimeDef {\n     }\n }\n \n-impl<'tcx> Clean<Lifetime> for ty::RegionParameterDef<'tcx> {\n+impl Clean<Lifetime> for ty::RegionParameterDef {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n         Lifetime(self.name.to_string())\n     }\n@@ -970,11 +970,6 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n                 Some(tp.clean(cx))\n             }\n         }).collect::<Vec<_>>();\n-        let stripped_lifetimes = gens.regions.iter().map(|rp| {\n-            let mut srp = rp.clone();\n-            srp.bounds = Vec::new();\n-            srp.clean(cx)\n-        }).collect::<Vec<_>>();\n \n         let mut where_predicates = preds.predicates.to_vec().clean(cx);\n \n@@ -1017,7 +1012,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n \n         Generics {\n             type_params: simplify::ty_params(stripped_typarams),\n-            lifetimes: stripped_lifetimes,\n+            lifetimes: gens.regions.clean(cx),\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }"}]}