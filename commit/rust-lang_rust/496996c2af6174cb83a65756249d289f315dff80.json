{"sha": "496996c2af6174cb83a65756249d289f315dff80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Njk5NmMyYWY2MTc0Y2I4M2E2NTc1NjI0OWQyODlmMzE1ZGZmODA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-16T10:31:36Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-29T00:41:10Z"}, "message": "Remove code in `syntax::codemap`.", "tree": {"sha": "b91bb711e184cb4a249ee90b1077a5bee68268a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91bb711e184cb4a249ee90b1077a5bee68268a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/496996c2af6174cb83a65756249d289f315dff80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/496996c2af6174cb83a65756249d289f315dff80", "html_url": "https://github.com/rust-lang/rust/commit/496996c2af6174cb83a65756249d289f315dff80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/496996c2af6174cb83a65756249d289f315dff80/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1979f96549fc41b544d2bf05eb868f26941f2b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/1979f96549fc41b544d2bf05eb868f26941f2b25", "html_url": "https://github.com/rust-lang/rust/commit/1979f96549fc41b544d2bf05eb868f26941f2b25"}], "stats": {"total": 189, "additions": 0, "deletions": 189}, "files": [{"sha": "388f3cb732351ce6df77bf576443436cb99e440f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/496996c2af6174cb83a65756249d289f315dff80/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496996c2af6174cb83a65756249d289f315dff80/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=496996c2af6174cb83a65756249d289f315dff80", "patch": "@@ -409,101 +409,6 @@ impl CodeMap {\n                         hi.col.to_usize() + 1)).to_string()\n     }\n \n-    // Returns true if two spans have the same callee\n-    // (Assumes the same ExpnFormat implies same callee)\n-    fn match_callees(&self, sp_a: &Span, sp_b: &Span) -> bool {\n-        let fmt_a = self\n-            .with_expn_info(sp_a.expn_id,\n-                            |ei| ei.map(|ei| ei.callee.format.clone()));\n-\n-        let fmt_b = self\n-            .with_expn_info(sp_b.expn_id,\n-                            |ei| ei.map(|ei| ei.callee.format.clone()));\n-        fmt_a == fmt_b\n-    }\n-\n-    /// Returns a formatted string showing the expansion chain of a span\n-    ///\n-    /// Spans are printed in the following format:\n-    ///\n-    /// filename:start_line:col: end_line:col\n-    /// snippet\n-    ///   Callee:\n-    ///   Callee span\n-    ///   Callsite:\n-    ///   Callsite span\n-    ///\n-    /// Callees and callsites are printed recursively (if available, otherwise header\n-    /// and span is omitted), expanding into their own callee/callsite spans.\n-    /// Each layer of recursion has an increased indent, and snippets are truncated\n-    /// to at most 50 characters. Finally, recursive calls to the same macro are squashed,\n-    /// with '...' used to represent any number of recursive calls.\n-    pub fn span_to_expanded_string(&self, sp: Span) -> String {\n-        self.span_to_expanded_string_internal(sp, \"\")\n-    }\n-\n-    fn span_to_expanded_string_internal(&self, sp:Span, indent: &str) -> String {\n-        let mut indent = indent.to_owned();\n-        let mut output = \"\".to_owned();\n-        let span_str = self.span_to_string(sp);\n-        let mut span_snip = self.span_to_snippet(sp)\n-            .unwrap_or(\"Snippet unavailable\".to_owned());\n-\n-        // Truncate by code points - in worst case this will be more than 50 characters,\n-        // but ensures at least 50 characters and respects byte boundaries.\n-        let char_vec: Vec<(usize, char)> = span_snip.char_indices().collect();\n-        if char_vec.len() > 50 {\n-            span_snip.truncate(char_vec[49].0);\n-            span_snip.push_str(\"...\");\n-        }\n-\n-        output.push_str(&format!(\"{}{}\\n{}`{}`\\n\", indent, span_str, indent, span_snip));\n-\n-        if sp.expn_id == NO_EXPANSION || sp.expn_id == COMMAND_LINE_EXPN {\n-            return output;\n-        }\n-\n-        let mut callee = self.with_expn_info(sp.expn_id,\n-                                             |ei| ei.and_then(|ei| ei.callee.span.clone()));\n-        let mut callsite = self.with_expn_info(sp.expn_id,\n-                                               |ei| ei.map(|ei| ei.call_site.clone()));\n-\n-        indent.push_str(\"  \");\n-        let mut is_recursive = false;\n-\n-        while callee.is_some() && self.match_callees(&sp, &callee.unwrap()) {\n-            callee = self.with_expn_info(callee.unwrap().expn_id,\n-                                         |ei| ei.and_then(|ei| ei.callee.span.clone()));\n-            is_recursive = true;\n-        }\n-        if let Some(span) = callee {\n-            output.push_str(&indent);\n-            output.push_str(\"Callee:\\n\");\n-            if is_recursive {\n-                output.push_str(&indent);\n-                output.push_str(\"...\\n\");\n-            }\n-            output.push_str(&(self.span_to_expanded_string_internal(span, &indent)));\n-        }\n-\n-        is_recursive = false;\n-        while callsite.is_some() && self.match_callees(&sp, &callsite.unwrap()) {\n-            callsite = self.with_expn_info(callsite.unwrap().expn_id,\n-                                           |ei| ei.map(|ei| ei.call_site.clone()));\n-            is_recursive = true;\n-        }\n-        if let Some(span) = callsite {\n-            output.push_str(&indent);\n-            output.push_str(\"Callsite:\\n\");\n-            if is_recursive {\n-                output.push_str(&indent);\n-                output.push_str(\"...\\n\");\n-            }\n-            output.push_str(&(self.span_to_expanded_string_internal(span, &indent)));\n-        }\n-        output\n-    }\n-\n     /// Return the source span - this is either the supplied span, or the span for\n     /// the macro callsite that expanded to it.\n     pub fn source_callsite(&self, sp: Span) -> Span {\n@@ -1069,59 +974,6 @@ mod tests {\n         assert_eq!(sstr, \"blork.rs:2:1: 2:12\");\n     }\n \n-    #[test]\n-    fn t10() {\n-        // Test span_to_expanded_string works in base case (no expansion)\n-        let cm = init_code_map();\n-        let span = Span { lo: BytePos(0), hi: BytePos(11), expn_id: NO_EXPANSION };\n-        let sstr = cm.span_to_expanded_string(span);\n-        assert_eq!(sstr, \"blork.rs:1:1: 1:12\\n`first line.`\\n\");\n-\n-        let span = Span { lo: BytePos(12), hi: BytePos(23), expn_id: NO_EXPANSION };\n-        let sstr =  cm.span_to_expanded_string(span);\n-        assert_eq!(sstr, \"blork.rs:2:1: 2:12\\n`second line`\\n\");\n-    }\n-\n-    #[test]\n-    fn t11() {\n-        // Test span_to_expanded_string works with expansion\n-        let cm = init_code_map();\n-        let root = Span { lo: BytePos(0), hi: BytePos(11), expn_id: NO_EXPANSION };\n-        let format = ExpnFormat::MacroBang(keywords::Invalid.name());\n-        let callee = NameAndSpan { format: format,\n-                                   allow_internal_unstable: false,\n-                                   span: None };\n-\n-        let info = ExpnInfo { call_site: root, callee: callee };\n-        let id = cm.record_expansion(info);\n-        let sp = Span { lo: BytePos(12), hi: BytePos(23), expn_id: id };\n-\n-        let sstr = cm.span_to_expanded_string(sp);\n-        assert_eq!(sstr,\n-                   \"blork.rs:2:1: 2:12\\n`second line`\\n  Callsite:\\n  \\\n-                    blork.rs:1:1: 1:12\\n  `first line.`\\n\");\n-    }\n-\n-    /// Test merging two spans on the same line\n-    #[test]\n-    fn span_merging() {\n-        let cm = CodeMap::new();\n-        let inputtext  = \"bbbb BB bb CCC\\n\";\n-        let selection1 = \"     ~~       \\n\";\n-        let selection2 = \"           ~~~\\n\";\n-        cm.new_filemap_and_lines(\"blork.rs\", None, inputtext);\n-        let span1 = span_from_selection(inputtext, selection1);\n-        let span2 = span_from_selection(inputtext, selection2);\n-\n-        if let Some(sp) = cm.merge_spans(span1, span2) {\n-            let sstr = cm.span_to_expanded_string(sp);\n-            assert_eq!(sstr, \"blork.rs:1:6: 1:15\\n`BB bb CCC`\\n\");\n-        }\n-        else {\n-            assert!(false);\n-        }\n-    }\n-\n     /// Test failing to merge two spans on different lines\n     #[test]\n     fn span_merging_fail() {\n@@ -1221,41 +1073,4 @@ mod tests {\n         let id_end = cm.record_expansion(info_end);\n         Span { lo: BytePos(37), hi: BytePos(48), expn_id: id_end }\n     }\n-\n-    #[test]\n-    fn t12() {\n-        // Test span_to_expanded_string collapses recursive macros and handles\n-        // recursive callsite and callee expansions\n-        let cm = init_code_map();\n-        let end = init_expansion_chain(&cm);\n-        let sstr = cm.span_to_expanded_string(end);\n-        let res_str =\n-r\"blork2.rs:2:1: 2:12\n-`second line`\n-  Callsite:\n-  ...\n-  blork2.rs:1:1: 1:12\n-  `first line.`\n-    Callee:\n-    blork.rs:2:1: 2:12\n-    `second line`\n-      Callee:\n-      blork.rs:1:1: 1:12\n-      `first line.`\n-      Callsite:\n-      blork.rs:1:1: 1:12\n-      `first line.`\n-    Callsite:\n-    ...\n-    blork.rs:2:1: 2:12\n-    `second line`\n-      Callee:\n-      blork.rs:1:1: 1:12\n-      `first line.`\n-      Callsite:\n-      blork.rs:1:1: 1:12\n-      `first line.`\n-\";\n-        assert_eq!(sstr, res_str);\n-    }\n }"}, {"sha": "1b62d62348bc81e2cc893b2ee21f26b74ee1fbb4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/496996c2af6174cb83a65756249d289f315dff80/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496996c2af6174cb83a65756249d289f315dff80/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=496996c2af6174cb83a65756249d289f315dff80", "patch": "@@ -263,10 +263,6 @@ pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n // For code appearing from the command line\n pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n \n-// For code generated by a procedural macro, without knowing which\n-// Used in `qquote!`\n-pub const PROC_EXPN: ExpnId = ExpnId(!2);\n-\n impl ExpnId {\n     pub fn from_u32(id: u32) -> ExpnId {\n         ExpnId(id)"}]}