{"sha": "709d1056b890de640c3d8dabd70562950df98dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWQxMDU2Yjg5MGRlNjQwYzNkOGRhYmQ3MDU2Mjk1MGRmOThkY2Y=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-08-11T11:50:54Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-08-11T11:50:54Z"}, "message": "Fix minor things in the `f32` primitive docs\n\nAll of these were review comments in #74621 that I first fixed\nin that PR, but later accidentally overwrote by a force push.", "tree": {"sha": "da10cbacc3e93b382fc8433b253fe762d7a44f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da10cbacc3e93b382fc8433b253fe762d7a44f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709d1056b890de640c3d8dabd70562950df98dcf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSOpdglyeINwt5bMtWqUCXPHMhXVAUCXzKGJgAKCRCqUCXPHMhX\nVKDCAP0cGbVLo5QQBcD9ncoIWWw8T2Y1kWFXu54jdKsqpKQN+QEA2Rzr55n13+Zs\nT5hq0WoP4Uf1bjFYBgwW9dKh5y4iswk=\n=Q1lc\n-----END PGP SIGNATURE-----", "payload": "tree da10cbacc3e93b382fc8433b253fe762d7a44f39\nparent 441fd2255763c2aeea616aeac61b2c795a4c5330\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1597146654 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1597146654 +0200\n\nFix minor things in the `f32` primitive docs\n\nAll of these were review comments in #74621 that I first fixed\nin that PR, but later accidentally overwrote by a force push.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709d1056b890de640c3d8dabd70562950df98dcf", "html_url": "https://github.com/rust-lang/rust/commit/709d1056b890de640c3d8dabd70562950df98dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709d1056b890de640c3d8dabd70562950df98dcf/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441fd2255763c2aeea616aeac61b2c795a4c5330", "url": "https://api.github.com/repos/rust-lang/rust/commits/441fd2255763c2aeea616aeac61b2c795a4c5330", "html_url": "https://github.com/rust-lang/rust/commit/441fd2255763c2aeea616aeac61b2c795a4c5330"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "0d2aca6bbc3eb78505d8fe6ecb17568566a1c8b8", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/709d1056b890de640c3d8dabd70562950df98dcf/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709d1056b890de640c3d8dabd70562950df98dcf/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=709d1056b890de640c3d8dabd70562950df98dcf", "patch": "@@ -768,7 +768,8 @@ mod prim_tuple {}\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n /// `-113.75`, `0.0078125`, `34359738368`, `0`, `-1`. So unlike integer types\n-/// (like `i32`), floating point types can represent non-integer numbers, too.\n+/// (such as `i32`), floating point types can represent non-integer numbers,\n+/// too.\n ///\n /// However, being able to represent this wide range of numbers comes at the\n /// cost of precision: floats can only represent some of the real numbers and\n@@ -779,15 +780,12 @@ mod prim_tuple {}\n /// often discard insignificant digits: `println!(\"{}\", 1.0f32 / 5.0f32)` will\n /// print `0.2`.\n ///\n-/// The precision is better for numbers near 0 and worse for large numbers. For\n-/// example, above 2<sup>24</sup>, not even all integers are representable.\n-///\n /// Additionally, `f32` can represent a couple of special values:\n ///\n /// - `-0`: this is just due to how floats are encoded. It is semantically\n ///   equivalent to `0` and `-0.0 == 0.0` results in `true`.\n /// - [\u221e](#associatedconstant.INFINITY) and\n-///   [-\u221e](#associatedconstant.NEG_INFINITY): these result from calculations\n+///   [\u2212\u221e](#associatedconstant.NEG_INFINITY): these result from calculations\n ///   like `1.0 / 0.0`.\n /// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n ///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected"}]}