{"sha": "62930d31514d6d9b4b0df3755d643f06f0d4212a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTMwZDMxNTE0ZDZkOWI0YjBkZjM3NTVkNjQzZjA2ZjBkNDIxMmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T09:24:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse/ast: move `Defaultness` into variants.", "tree": {"sha": "77292eac6a4a3ac7f82f8e5fabd07919ba3ef2ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77292eac6a4a3ac7f82f8e5fabd07919ba3ef2ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62930d31514d6d9b4b0df3755d643f06f0d4212a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62930d31514d6d9b4b0df3755d643f06f0d4212a", "html_url": "https://github.com/rust-lang/rust/commit/62930d31514d6d9b4b0df3755d643f06f0d4212a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62930d31514d6d9b4b0df3755d643f06f0d4212a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842027f35bd0c957fff862ef864f4fc57988ed7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/842027f35bd0c957fff862ef864f4fc57988ed7e", "html_url": "https://github.com/rust-lang/rust/commit/842027f35bd0c957fff862ef864f4fc57988ed7e"}], "stats": {"total": 989, "additions": 630, "deletions": 359}, "files": [{"sha": "b5e4fe90d0dce6f2b6e29d4016c5a10caf436c4c", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -173,7 +173,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ids\n             }\n-            ItemKind::Const(ref ty, ..) => {\n+            ItemKind::Const(_, ref ty, ..) => {\n                 let mut ids = smallvec![i.id];\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n                     let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n@@ -264,11 +264,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, m, body_id)\n             }\n-            ItemKind::Const(ref t, ref e) => {\n+            ItemKind::Const(_, ref t, ref e) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n-            ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n+            ItemKind::Fn(_, FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -297,24 +297,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n             ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n-            ItemKind::TyAlias(ref generics, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n+            ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => match ty.kind.opaque_top_hack() {\n                 None => {\n                     let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n-                    let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                    let generics = self.lower_generics(gen, ImplTraitContext::disallowed());\n                     hir::ItemKind::TyAlias(ty, generics)\n                 }\n                 Some(bounds) => {\n                     let ctx = || ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc);\n                     let ty = hir::OpaqueTy {\n-                        generics: self.lower_generics(generics, ctx()),\n+                        generics: self.lower_generics(gen, ctx()),\n                         bounds: self.lower_param_bounds(bounds, ctx()),\n                         impl_trait_fn: None,\n                         origin: hir::OpaqueTyOrigin::TypeAlias,\n                     };\n                     hir::ItemKind::OpaqueTy(ty)\n                 }\n             },\n-            ItemKind::TyAlias(ref generics, _, None) => {\n+            ItemKind::TyAlias(_, ref generics, _, None) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -654,7 +654,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             kind: match i.kind {\n-                ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+                ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                     let fdec = &sig.decl;\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n                         generics,\n@@ -675,7 +675,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n-                ForeignItemKind::Const(ref t, _) => {\n+                ForeignItemKind::Const(_, ref t, _) => {\n                     // For recovery purposes.\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, Mutability::Not)\n@@ -758,24 +758,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Static(ref ty, _, ref default) // Let's pretend this is a `const`.\n-            | AssocItemKind::Const(ref ty, ref default) => {\n+            | AssocItemKind::Const(_, ref ty, ref default) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, None) => {\n+            AssocItemKind::Fn(_, ref sig, ref generics, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, Some(ref body)) => {\n+            AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(ref generics, ref bounds, ref default) => {\n+            AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n@@ -801,11 +801,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n             AssocItemKind::Static(_, _, default) // Let's pretend this is a `const` for recovery.\n-            | AssocItemKind::Const(_, default) => {\n+            | AssocItemKind::Const(_, _, default) => {\n                 (hir::AssocItemKind::Const, default.is_some())\n             }\n-            AssocItemKind::TyAlias(_, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n-            AssocItemKind::Fn(sig, _, default) => {\n+            AssocItemKind::TyAlias(_, _, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n+            AssocItemKind::Fn(_, sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n             }\n             AssocItemKind::Macro(..) => unimplemented!(),\n@@ -823,15 +823,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem<'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n-        let (generics, kind) = match i.kind {\n-            AssocItemKind::Static(ref ty, _, ref expr) | AssocItemKind::Const(ref ty, ref expr) => {\n+        let (generics, kind) = match &i.kind {\n+            AssocItemKind::Static(ty, _, expr) | AssocItemKind::Const(_, ty, expr) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n                 )\n             }\n-            AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            AssocItemKind::Fn(_, sig, generics, body) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n@@ -847,7 +847,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n+            AssocItemKind::TyAlias(_, generics, _, ty) => {\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n@@ -876,7 +876,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n-            defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n+            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n             kind,\n             span: i.span,\n         }\n@@ -890,17 +890,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n-            defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n+            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n             kind: match &i.kind {\n                 AssocItemKind::Static(..) // Let's pretend this is a `const` for recovery.\n                 | AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n-                AssocItemKind::TyAlias(_, _, ty) => {\n+                AssocItemKind::TyAlias(.., ty) => {\n                     match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                         None => hir::AssocItemKind::Type,\n                         Some(_) => hir::AssocItemKind::OpaqueTy,\n                     }\n                 }\n-                AssocItemKind::Fn(sig, _, _) => {\n+                AssocItemKind::Fn(_, sig, ..) => {\n                     hir::AssocItemKind::Method { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::Macro(..) => unimplemented!(),"}, {"sha": "8bf9311bfc7987db433f1976f942bb8cee153a9d", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ItemKind::Struct(_, ref generics)\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(ref generics, ..)\n+                    | ItemKind::TyAlias(_, ref generics, ..)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics\n@@ -490,7 +490,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 let owner = match (&item.kind, ctxt) {\n                     // Ignore patterns in trait methods without bodies.\n-                    (AssocItemKind::Fn(_, _, None), AssocCtxt::Trait) => None,\n+                    (AssocItemKind::Fn(_, _, _, None), AssocCtxt::Trait) => None,\n                     _ => Some(item.id),\n                 };\n                 self.with_hir_id_owner(owner, |this| visit::walk_assoc_item(this, item, ctxt));"}, {"sha": "44fed6dee6628f58d299eb71b16f0862df3b8b6b", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -881,7 +881,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         .emit();\n                 }\n             }\n-            ItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ItemKind::Fn(def, ref sig, ref generics, ref body) => {\n+                self.check_defaultness(item.span, def);\n                 self.check_const_fn_const_generic(item.span, sig, generics);\n \n                 if body.is_none() {\n@@ -965,15 +966,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n             }\n-            ItemKind::Const(.., None) => {\n+            ItemKind::Const(def, .., None) => {\n+                self.check_defaultness(item.span, def);\n                 let msg = \"free constant item without body\";\n                 self.error_item_without_body(item.span, \"constant\", msg, \" = <expr>;\");\n             }\n             ItemKind::Static(.., None) => {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n-            ItemKind::TyAlias(_, ref bounds, ref body) => {\n+            ItemKind::TyAlias(def, _, ref bounds, ref body) => {\n+                self.check_defaultness(item.span, def);\n                 if body.is_none() {\n                     let msg = \"free type alias without body\";\n                     self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n@@ -988,11 +991,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match &fi.kind {\n-            ForeignItemKind::Fn(sig, _, body) => {\n+            ForeignItemKind::Fn(def, sig, _, body) => {\n+                self.check_defaultness(fi.span, *def);\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n             }\n-            ForeignItemKind::TyAlias(generics, bounds, body) => {\n+            ForeignItemKind::TyAlias(def, generics, bounds, body) => {\n+                self.check_defaultness(fi.span, *def);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n                 self.check_foreign_ty_genericless(generics);\n@@ -1233,19 +1238,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n-        if ctxt == AssocCtxt::Trait {\n-            self.check_defaultness(item.span, item.defaultness);\n+        if ctxt == AssocCtxt::Trait || !self.in_trait_impl {\n+            self.check_defaultness(item.span, item.kind.defaultness());\n         }\n \n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n-                AssocItemKind::Const(_, body) => {\n+                AssocItemKind::Const(_, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n                 }\n-                AssocItemKind::Fn(_, _, body) => {\n+                AssocItemKind::Fn(_, _, _, body) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(_, bounds, body) => {\n+                AssocItemKind::TyAlias(_, _, bounds, body) => {\n                     self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n                 }\n@@ -1255,7 +1260,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         if ctxt == AssocCtxt::Trait || self.in_trait_impl {\n             self.invalid_visibility(&item.vis, None);\n-            if let AssocItemKind::Fn(sig, _, _) = &item.kind {\n+            if let AssocItemKind::Fn(_, sig, _, _) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n                 self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }"}, {"sha": "33ff0bc451b3256174c8fee2d5058dde53161fd1", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -372,7 +372,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::TyAlias(_, _, Some(ref ty)) => self.check_impl_trait(&ty),\n+            ast::ItemKind::TyAlias(_, _, _, Some(ref ty)) => self.check_impl_trait(&ty),\n \n             _ => {}\n         }\n@@ -543,17 +543,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {\n-        if let ast::Defaultness::Default(_) = i.defaultness {\n+        if let ast::Defaultness::Default(_) = i.kind.defaultness() {\n             gate_feature_post!(&self, specialization, i.span, \"specialization is unstable\");\n         }\n \n         match i.kind {\n-            ast::AssocItemKind::Fn(ref sig, _, _) => {\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => {\n                 if let (ast::Const::Yes(_), AssocCtxt::Trait) = (sig.header.constness, ctxt) {\n                     gate_feature_post!(&self, const_fn, i.span, \"const fn is unstable\");\n                 }\n             }\n-            ast::AssocItemKind::TyAlias(ref generics, _, ref ty) => {\n+            ast::AssocItemKind::TyAlias(_, ref generics, _, ref ty) => {\n                 if let (Some(_), AssocCtxt::Trait) = (ty, ctxt) {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "2b223d92ff1985e631f8f33dccb67c027fbdf8e1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -1016,8 +1016,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let ast::Item { id, span, ident, attrs, kind, vis, defaultness, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, *defaultness, kind, vis);\n+        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n     }\n \n     fn print_nested_item_kind(\n@@ -1026,7 +1026,6 @@ impl<'a> State<'a> {\n         span: Span,\n         ident: ast::Ident,\n         attrs: &[Attribute],\n-        def: ast::Defaultness,\n         kind: &ast::AssocItemKind,\n         vis: &ast::Visibility,\n     ) {\n@@ -1035,17 +1034,18 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(span.lo());\n         self.print_outer_attributes(attrs);\n         match kind {\n-            ast::ForeignItemKind::Fn(sig, gen, body) => {\n-                self.print_fn_full(sig, ident, gen, vis, def, body.as_deref(), attrs);\n+            ast::ForeignItemKind::Fn(def, sig, gen, body) => {\n+                self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n             }\n-            ast::ForeignItemKind::Const(ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, def);\n+            ast::ForeignItemKind::Const(def, ty, body) => {\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n+                let def = ast::Defaultness::Final;\n                 self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n             }\n-            ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, def);\n+            ast::ForeignItemKind::TyAlias(def, generics, bounds, ty) => {\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n             }\n             ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n@@ -1146,12 +1146,10 @@ impl<'a> State<'a> {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(item.ident, Some(mutbl), ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Const(ref ty, ref body) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::Const(def, ref ty, ref body) => {\n                 self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis, def);\n             }\n-            ast::ItemKind::Fn(ref sig, ref gen, ref body) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::Fn(def, ref sig, ref gen, ref body) => {\n                 let body = body.as_deref();\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, def, body, &item.attrs);\n             }\n@@ -1185,8 +1183,7 @@ impl<'a> State<'a> {\n                 self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n-            ast::ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n-                let def = ast::Defaultness::Final;\n+            ast::ItemKind::TyAlias(def, ref generics, ref bounds, ref ty) => {\n                 let ty = ty.as_deref();\n                 self.print_associated_type(item.ident, generics, bounds, ty, &item.vis, def);\n             }\n@@ -1461,8 +1458,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_assoc_item(&mut self, item: &ast::AssocItem) {\n-        let ast::AssocItem { id, span, ident, attrs, defaultness, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, *defaultness, kind, vis);\n+        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n     }\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {"}, {"sha": "00ed05608b50be317036ec2294411468288b8e96", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -542,9 +542,9 @@ impl<'a> TraitDef<'a> {\n                 span: self.span,\n                 ident,\n                 vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 kind: ast::AssocItemKind::TyAlias(\n+                    ast::Defaultness::Final,\n                     Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n@@ -968,16 +968,16 @@ impl<'a> MethodDef<'a> {\n             header: ast::FnHeader { unsafety, ext: ast::Extern::None, ..ast::FnHeader::default() },\n             decl: fn_decl,\n         };\n+        let def = ast::Defaultness::Final;\n \n         // Create the method.\n         P(ast::AssocItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n-            defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(sig, fn_generics, Some(body_block)),\n+            kind: ast::AssocItemKind::Fn(def, sig, fn_generics, Some(body_block)),\n             tokens: None,\n         })\n     }"}, {"sha": "5a0b1a6b88542c424b7a95ee4713d5ff144276e4", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -66,7 +66,8 @@ impl AllocFnFactory<'_, '_> {\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header };\n-        let kind = ItemKind::Fn(sig, Generics::default(), Some(self.cx.block_expr(output_expr)));\n+        let block = Some(self.cx.block_expr(output_expr));\n+        let kind = ItemKind::Fn(ast::Defaultness::Final, sig, Generics::default(), block);\n         let item = self.cx.item(\n             self.span,\n             self.cx.ident_of(&self.kind.fn_name(method.name), self.span),"}, {"sha": "052e62ee9ffd3da3008a7edb451fcbfd9b056b43", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -30,7 +30,6 @@ pub fn expand_global_asm<'cx>(\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::ItemKind::GlobalAsm(P(global_asm)),\n             vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-            defaultness: ast::Defaultness::Final,\n             span: cx.with_def_site_ctxt(sp),\n             tokens: None,\n         })]),"}, {"sha": "8407352f57714057fa3e45cbc911156734e461e8", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -184,6 +184,7 @@ pub fn expand_test_or_bench(\n         ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(\n+            ast::Defaultness::Final,\n             cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n             // test::TestDescAndFn {\n             Some(\n@@ -378,7 +379,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n     let ref sd = cx.parse_sess.span_diagnostic;\n-    if let ast::ItemKind::Fn(ref sig, ref generics, _) = i.kind {\n+    if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")\n                 .span_label(span, \"`unsafe` because of this\")\n@@ -427,7 +428,7 @@ fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n }\n \n fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n-    let has_sig = if let ast::ItemKind::Fn(ref sig, _, _) = i.kind {\n+    let has_sig = if let ast::ItemKind::Fn(_, ref sig, _, _) = i.kind {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep.\n         sig.decl.inputs.len() == 1"}, {"sha": "4bbab0d257489b7e1a9bd288f5a9d2e22a9a56f1", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -162,7 +162,7 @@ impl MutVisitor for EntryPointCleaner {\n         // #[allow(dead_code)] to avoid printing warnings.\n         let item = match entry::entry_point_type(&item, self.depth) {\n             EntryPointType::MainNamed | EntryPointType::MainAttr | EntryPointType::Start => item\n-                .map(|ast::Item { id, ident, attrs, kind, vis, defaultness, span, tokens }| {\n+                .map(|ast::Item { id, ident, attrs, kind, vis, span, tokens }| {\n                     let allow_ident = Ident::new(sym::allow, self.def_site);\n                     let dc_nested = attr::mk_nested_word_item(Ident::from_str_and_span(\n                         \"dead_code\",\n@@ -176,7 +176,7 @@ impl MutVisitor for EntryPointCleaner {\n                         .chain(iter::once(allow_dead_code))\n                         .collect();\n \n-                    ast::Item { id, ident, attrs, kind, vis, defaultness, span, tokens }\n+                    ast::Item { id, ident, attrs, kind, vis, span, tokens }\n                 }),\n             EntryPointType::None | EntryPointType::OtherMain => item,\n         };\n@@ -298,7 +298,8 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n-    let main = ast::ItemKind::Fn(sig, ast::Generics::default(), Some(main_body));\n+    let def = ast::Defaultness::Final;\n+    let main = ast::ItemKind::Fn(def, sig, ast::Generics::default(), Some(main_body));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {\n@@ -312,7 +313,6 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n         vis: respan(sp, ast::VisibilityKind::Public),\n-        defaultness: ast::Defaultness::Final,\n         span: sp,\n         tokens: None,\n     });"}, {"sha": "bd6823cd4e275f586dbe26e39c00aadca1541c51", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -588,7 +588,6 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             kind,\n             vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-            defaultness: ast::Defaultness::Final,\n             span,\n             tokens: None,\n         })\n@@ -645,7 +644,8 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Const(ty, Some(expr)))\n+        let def = ast::Defaultness::Final;\n+        self.item(span, name, Vec::new(), ast::ItemKind::Const(def, ty, Some(expr)))\n     }\n \n     pub fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {"}, {"sha": "bbea066b048d24e91b2567a5d466d6e617baa12b", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -358,7 +358,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             ident: Ident::invalid(),\n             id: ast::DUMMY_NODE_ID,\n             vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n-            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]);\n "}, {"sha": "c323af4336a4ce498a3212077d93327a307b30e2", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -26,7 +26,6 @@ pub fn placeholder(\n     let ident = ast::Ident::invalid();\n     let attrs = Vec::new();\n     let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n-    let defaultness = ast::Defaultness::Final;\n     let span = DUMMY_SP;\n     let expr_placeholder = || {\n         P(ast::Expr {\n@@ -47,7 +46,6 @@ pub fn placeholder(\n             span,\n             ident,\n             vis,\n-            defaultness,\n             attrs,\n             kind: ast::ItemKind::Mac(mac_placeholder()),\n             tokens: None,\n@@ -59,7 +57,6 @@ pub fn placeholder(\n             vis,\n             attrs,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n-            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![P(ast::AssocItem {\n@@ -69,7 +66,6 @@ pub fn placeholder(\n             vis,\n             attrs,\n             kind: ast::AssocItemKind::Macro(mac_placeholder()),\n-            defaultness: ast::Defaultness::Final,\n             tokens: None,\n         })]),\n         AstFragmentKind::ForeignItems => {\n@@ -78,7 +74,6 @@ pub fn placeholder(\n                 span,\n                 ident,\n                 vis,\n-                defaultness,\n                 attrs,\n                 kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n                 tokens: None,"}, {"sha": "c73f7aafb4860bda8798aaece6d1654d91d9b03a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -677,7 +677,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn visit_item_kind(&mut self, i: &mut ast::ItemKind) {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::ItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_visit_item_kind(i, s))\n@@ -686,7 +686,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     fn flat_map_trait_item(&mut self, i: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {\n         let is_const = match i.kind {\n             ast::AssocItemKind::Const(..) => true,\n-            ast::AssocItemKind::Fn(ref sig, _, _) => Self::is_sig_const(sig),\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n         self.run(is_const, |s| noop_flat_map_assoc_item(i, s))"}, {"sha": "ca3727d1755635632eaf9b29dbff39453c0e1cd1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -640,7 +640,7 @@ declare_lint_pass!(\n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n         match it.kind {\n-            ast::AssocItemKind::Fn(ref sig, _, _) => {\n+            ast::AssocItemKind::Fn(_, ref sig, _, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {\n                         ast::PatKind::Ident(_, ident, None) => {"}, {"sha": "fb7e5541e266eed383eb02a6661b14689d467f40", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -464,7 +464,6 @@ impl CStore {\n                     legacy: def.legacy,\n                 }),\n                 vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                defaultness: ast::Defaultness::Final,\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "451f1fdf14a07ff30f745e86d5bb530a07d81087", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -36,9 +36,6 @@ impl<'a> Parser<'a> {\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n         let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n-        if let Some(ref item) = item {\n-            self.error_on_illegal_default(item.defaultness);\n-        }\n         Ok(item.map(P))\n     }\n \n@@ -98,9 +95,10 @@ impl<'a> Parser<'a> {\n         let mut def = self.parse_defaultness();\n         let kind = self.parse_item_kind(&mut attrs, mac_allowed, lo, &vis, &mut def, req_name)?;\n         if let Some((ident, kind)) = kind {\n+            self.error_on_unconsumed_default(def, &kind);\n             let span = lo.to(self.prev_span);\n             let id = DUMMY_NODE_ID;\n-            let item = Item { ident, attrs, id, kind, vis, defaultness: def, span, tokens: None };\n+            let item = Item { ident, attrs, id, kind, vis, span, tokens: None };\n             return Ok(Some(item));\n         }\n \n@@ -137,9 +135,10 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Error in-case `default` was parsed in an in-appropriate context.\n-    fn error_on_illegal_default(&self, def: Defaultness) {\n+    fn error_on_unconsumed_default(&self, def: Defaultness, kind: &ItemKind) {\n         if let Defaultness::Default(span) = def {\n-            self.struct_span_err(span, \"item cannot be `default`\")\n+            let msg = format!(\"{} {} cannot be `default`\", kind.article(), kind.descr());\n+            self.struct_span_err(span, &msg)\n                 .span_label(span, \"`default` because of this\")\n                 .note(\"only associated `fn`, `const`, and `type` items can be `default`\")\n                 .emit();\n@@ -156,6 +155,8 @@ impl<'a> Parser<'a> {\n         def: &mut Defaultness,\n         req_name: ReqName,\n     ) -> PResult<'a, Option<ItemInfo>> {\n+        let mut def = || mem::replace(def, Defaultness::Final);\n+\n         let info = if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let tree = self.parse_use_tree()?;\n@@ -164,7 +165,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name)?;\n-            (ident, ItemKind::Fn(sig, generics, body))\n+            (ident, ItemKind::Fn(def(), sig, generics, body))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -177,25 +178,27 @@ impl<'a> Parser<'a> {\n             // STATIC ITEM\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n-            self.parse_item_const(Some(m))?\n+            let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n+            (ident, ItemKind::Static(ty, m, expr))\n         } else if let Const::Yes(const_span) = self.parse_constness() {\n             // CONST ITEM\n             self.recover_const_mut(const_span);\n-            self.parse_item_const(None)?\n+            let (ident, ty, expr) = self.parse_item_global(None)?;\n+            (ident, ItemKind::Const(def(), ty, expr))\n         } else if self.check_keyword(kw::Trait) || self.check_auto_or_unsafe_trait_item() {\n             // TRAIT ITEM\n             self.parse_item_trait(attrs, lo)?\n         } else if self.check_keyword(kw::Impl)\n             || self.check_keyword(kw::Unsafe) && self.is_keyword_ahead(1, &[kw::Impl])\n         {\n             // IMPL ITEM\n-            self.parse_item_impl(attrs, mem::replace(def, Defaultness::Final))?\n+            self.parse_item_impl(attrs, def())?\n         } else if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             self.parse_item_mod(attrs)?\n         } else if self.eat_keyword(kw::Type) {\n             // TYPE ITEM\n-            self.parse_type_alias()?\n+            self.parse_type_alias(def())?\n         } else if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n             self.parse_item_enum()?\n@@ -652,19 +655,19 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         let attrs = self.parse_outer_attributes()?;\n         let it = self.parse_item_common(attrs, true, false, req_name)?;\n-        Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n+        Ok(it.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n             let kind = match kind {\n                 ItemKind::Mac(a) => AssocItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c) => AssocItemKind::Fn(a, b, c),\n-                ItemKind::TyAlias(a, b, c) => AssocItemKind::TyAlias(a, b, c),\n-                ItemKind::Const(a, c) => AssocItemKind::Const(a, c),\n+                ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n+                ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n+                ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n                 ItemKind::Static(a, _, b) => {\n                     self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n-                    AssocItemKind::Const(a, b)\n+                    AssocItemKind::Const(Defaultness::Final, a, b)\n                 }\n                 _ => return self.error_bad_item_kind(span, &kind, \"`trait` or `impl`\"),\n             };\n-            Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n+            Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n     }\n \n@@ -673,7 +676,7 @@ impl<'a> Parser<'a> {\n     /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n     /// ```\n     /// The `\"type\"` has already been eaten.\n-    fn parse_type_alias(&mut self) -> PResult<'a, (Ident, ItemKind)> {\n+    fn parse_type_alias(&mut self, def: Defaultness) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut generics = self.parse_generics()?;\n \n@@ -685,7 +688,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(generics, bounds, default)))\n+        Ok((ident, ItemKind::TyAlias(def, generics, bounds, default)))\n     }\n \n     /// Parses a `UseTree`.\n@@ -843,20 +846,19 @@ impl<'a> Parser<'a> {\n \n         let attrs = self.parse_outer_attributes()?;\n         let item = self.parse_item_common(attrs, true, false, |_| true)?;\n-        Ok(item.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n-            self.error_on_illegal_default(defaultness);\n+        Ok(item.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n             let kind = match kind {\n                 ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c) => ForeignItemKind::Fn(a, b, c),\n-                ItemKind::TyAlias(a, b, c) => ForeignItemKind::TyAlias(a, b, c),\n+                ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n+                ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n                 ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n-                ItemKind::Const(a, b) => {\n+                ItemKind::Const(_, a, b) => {\n                     self.error_on_foreign_const(span, ident);\n                     ForeignItemKind::Static(a, Mutability::Not, b)\n                 }\n                 _ => return self.error_bad_item_kind(span, &kind, \"`extern` block\"),\n             };\n-            Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n+            Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n     }\n \n@@ -916,7 +918,10 @@ impl<'a> Parser<'a> {\n     /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n     ///\n     /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n-    fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n+    fn parse_item_global(\n+        &mut self,\n+        m: Option<Mutability>,\n+    ) -> PResult<'a, (Ident, P<Ty>, Option<P<ast::Expr>>)> {\n         let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n \n         // Parse the type of a `const` or `static mut?` item.\n@@ -929,12 +934,7 @@ impl<'a> Parser<'a> {\n \n         let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n-\n-        let item = match m {\n-            Some(m) => ItemKind::Static(ty, m, expr),\n-            None => ItemKind::Const(ty, expr),\n-        };\n-        Ok((id, item))\n+        Ok((id, ty, expr))\n     }\n \n     /// We were supposed to parse `:` but the `:` was missing."}, {"sha": "a81caea4e412a49b150297cc599f77a3c7b41168", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -718,7 +718,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the type namespace.\n-            ItemKind::TyAlias(_, _, ref ty) => {\n+            ItemKind::TyAlias(_, _, _, ref ty) => {\n                 let def_kind = match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                     None => DefKind::TyAlias,\n                     Some(_) => DefKind::OpaqueTy,\n@@ -1253,7 +1253,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let (res, ns) = match item.kind {\n             AssocItemKind::Static(..) // Let's pretend it's a `const` for recovery.\n             | AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n-            AssocItemKind::Fn(ref sig, _, _) => {\n+            AssocItemKind::Fn(_, ref sig, _, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }"}, {"sha": "30089633689c4630d8276c37609fd9a147c83364", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -117,7 +117,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             | ItemKind::ExternCrate(..)\n             | ItemKind::ForeignMod(..)\n             | ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n-            ItemKind::Fn(sig, generics, body) if sig.header.asyncness.is_async() => {\n+            ItemKind::Fn(_, sig, generics, body) if sig.header.asyncness.is_async() => {\n                 return self.visit_async_fn(\n                     i.id,\n                     i.ident.name,\n@@ -215,7 +215,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_assoc_item(&mut self, i: &'a AssocItem, ctxt: visit::AssocCtxt) {\n         let def_data = match &i.kind {\n-            AssocItemKind::Fn(FnSig { header, decl }, generics, body)\n+            AssocItemKind::Fn(_, FnSig { header, decl }, generics, body)\n                 if header.asyncness.is_async() =>\n             {\n                 return self.visit_async_fn("}, {"sha": "5b5180a7e1a44b7952fa4e9fe04128465be3cd30", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -437,8 +437,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n-            ForeignItemKind::Fn(_, ref generics, _)\n-            | ForeignItemKind::TyAlias(ref generics, ..) => {\n+            ForeignItemKind::Fn(_, _, ref generics, _)\n+            | ForeignItemKind::TyAlias(_, ref generics, ..) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -797,7 +797,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n \n         match item.kind {\n-            ItemKind::TyAlias(ref generics, _, _) | ItemKind::Fn(_, ref generics, _) => {\n+            ItemKind::TyAlias(_, ref generics, _, _) | ItemKind::Fn(_, _, ref generics, _) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -837,18 +837,18 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             this.with_trait_items(trait_items, |this| {\n                                 match &item.kind {\n                                     AssocItemKind::Static(ty, _, default)\n-                                    | AssocItemKind::Const(ty, default) => {\n+                                    | AssocItemKind::Const(_, ty, default) => {\n                                         this.visit_ty(ty);\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n                                         if let Some(expr) = default {\n                                             this.with_constant_rib(|this| this.visit_expr(expr));\n                                         }\n                                     }\n-                                    AssocItemKind::Fn(_, generics, _) => {\n+                                    AssocItemKind::Fn(_, _, generics, _) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n-                                    AssocItemKind::TyAlias(generics, _, _) => {\n+                                    AssocItemKind::TyAlias(_, generics, _, _) => {\n                                         walk_assoc_item(this, generics, item);\n                                     }\n                                     AssocItemKind::Macro(_) => {\n@@ -878,7 +878,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n \n-            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(ref ty, ref expr) => {\n+            ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n                 debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n@@ -1015,7 +1015,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             trait_items\n                 .iter()\n                 .filter_map(|item| match &item.kind {\n-                    AssocItemKind::TyAlias(_, bounds, _) if bounds.len() == 0 => Some(item.ident),\n+                    AssocItemKind::TyAlias(_, _, bounds, _) if bounds.len() == 0 => {\n+                        Some(item.ident)\n+                    }\n                     _ => None,\n                 })\n                 .collect(),\n@@ -1125,7 +1127,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n                                             });\n                                         }\n-                                        AssocItemKind::Fn(_, generics, _) => {\n+                                        AssocItemKind::Fn(_, _, generics, _) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1148,7 +1150,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 },\n                                             );\n                                         }\n-                                        AssocItemKind::TyAlias(generics, _, _) => {\n+                                        AssocItemKind::TyAlias(_, generics, _, _) => {\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,"}, {"sha": "b3a8657d80bed8643c44f3c54d1c0a6116f06041", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -1005,7 +1005,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n             ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,\n                     trait_item.ident,\n@@ -1016,7 +1016,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &trait_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_ref().map(|x| &**x),\n@@ -1027,7 +1027,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     trait_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(_, ref bounds, ref default_ty) => {\n+            ast::AssocItemKind::TyAlias(_, _, ref bounds, ref default_ty) => {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\n@@ -1076,7 +1076,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_macro_use(impl_item.span);\n         match impl_item.kind {\n             ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,\n                     impl_item.ident,\n@@ -1087,7 +1087,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     &impl_item.attrs,\n                 );\n             }\n-            ast::AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+            ast::AssocItemKind::Fn(_, ref sig, ref generics, ref body) => {\n                 self.process_method(\n                     sig,\n                     body.as_deref(),\n@@ -1098,8 +1098,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::AssocItemKind::TyAlias(_, _, None) => {}\n-            ast::AssocItemKind::TyAlias(_, _, Some(ref ty)) => {\n+            ast::AssocItemKind::TyAlias(_, _, _, None) => {}\n+            ast::AssocItemKind::TyAlias(_, _, _, Some(ref ty)) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait.\n@@ -1292,11 +1292,11 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref sig, ref ty_params, ref body) => {\n+            Fn(_, ref sig, ref ty_params, ref body) => {\n                 self.process_fn(item, &sig.decl, &sig.header, ty_params, body.as_deref())\n             }\n             Static(ref typ, _, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n-            Const(ref typ, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n+            Const(_, ref typ, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n             Struct(ref def, ref ty_params) | Union(ref def, ref ty_params) => {\n                 self.process_struct(item, def, ty_params)\n             }\n@@ -1311,7 +1311,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.process_mod(item);\n                 visit::walk_mod(self, m);\n             }\n-            TyAlias(ref ty_params, _, ref ty) => {\n+            TyAlias(_, ref ty_params, _, ref ty) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n@@ -1520,7 +1520,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         let access = access_from!(self.save_ctxt, item, hir_id);\n \n         match item.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 let decl = &sig.decl;\n                 if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(fn_data, DefData, item.span);\n@@ -1537,7 +1537,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&ret_ty);\n                 }\n             }\n-            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(_, ref ty, _)\n+            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "b253559dd5cd53049bfe5c5232bd43d14def3a9e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -133,7 +133,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n         );\n         match item.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 Some(Data::DefData(Def {\n@@ -151,7 +151,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(_, ref ty, _)\n+            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);\n@@ -180,7 +181,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.kind {\n-            ast::ItemKind::Fn(ref sig, .., ref generics, _) => {\n+            ast::ItemKind::Fn(_, ref sig, .., ref generics, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n@@ -227,7 +228,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ItemKind::Const(ref typ, _) => {\n+            ast::ItemKind::Const(_, ref typ, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))"}, {"sha": "9670fb1e2c46526e86550e16a6267620f66a83fb", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -345,7 +345,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Const(ref ty, ref expr) => {\n+            ast::ItemKind::Const(_, ref ty, ref expr) => {\n                 let mut text = \"const \".to_owned();\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n@@ -369,7 +369,7 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ast::FnSig { ref decl, header }, ref generics, _) => {\n+            ast::ItemKind::Fn(_, ast::FnSig { ref decl, header }, ref generics, _) => {\n                 let mut text = String::new();\n                 if let ast::Const::Yes(_) = header.constness {\n                     text.push_str(\"const \");\n@@ -423,7 +423,7 @@ impl Sig for ast::Item {\n \n                 Ok(Signature { text, defs, refs: vec![] })\n             }\n-            ast::ItemKind::TyAlias(ref generics, _, ref ty) => {\n+            ast::ItemKind::TyAlias(_, ref generics, _, ref ty) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n \n@@ -732,7 +732,7 @@ impl Sig for ast::ForeignItem {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n         match self.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref generics, _) => {\n+            ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n                 let decl = &sig.decl;\n                 let mut text = String::new();\n                 text.push_str(\"fn \");"}, {"sha": "19c705fa9975385101dcf369b8ff2fec8729e092", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -2421,9 +2421,6 @@ pub struct Item<K = ItemKind> {\n     /// The name of the item.\n     /// It might be a dummy name in case of anonymous items.\n     pub ident: Ident,\n-    /// The `default`ness of this item.\n-    /// This should only occur in syntactically well-formed code in associated contexts.\n-    pub defaultness: Defaultness,\n \n     pub kind: K,\n \n@@ -2509,11 +2506,11 @@ pub enum ItemKind {\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(P<Ty>, Option<P<Expr>>),\n+    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`.\n-    Fn(FnSig, Generics, Option<P<Block>>),\n+    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n     /// A module declaration (`mod`).\n     ///\n     /// E.g., `mod foo;` or `mod foo { .. }`.\n@@ -2527,7 +2524,7 @@ pub enum ItemKind {\n     /// A type alias (`type`).\n     ///\n     /// E.g., `type Foo = Bar<u8>;`.\n-    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// An enum definition (`enum`).\n     ///\n     /// E.g., `enum Foo<A, B> { C<A>, D<B> }`.\n@@ -2607,8 +2604,8 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         match self {\n-            Self::Fn(_, generics, _)\n-            | Self::TyAlias(generics, ..)\n+            Self::Fn(_, _, generics, _)\n+            | Self::TyAlias(_, generics, ..)\n             | Self::Enum(_, generics)\n             | Self::Struct(_, generics)\n             | Self::Union(_, generics)\n@@ -2640,13 +2637,22 @@ pub type AssocItem = Item<AssocItemKind>;\n pub enum AssocItemKind {\n     /// A constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n-    Const(P<Ty>, Option<P<Expr>>),\n+    Const(Defaultness, P<Ty>, Option<P<Expr>>),\n     /// A static item (`static FOO: u8`).\n     Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A function.\n-    Fn(FnSig, Generics, Option<P<Block>>),\n+    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n     /// A type.\n-    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n+    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n     /// A macro expanding to items.\n     Macro(Mac),\n }\n+\n+impl AssocItemKind {\n+    pub fn defaultness(&self) -> Defaultness {\n+        match *self {\n+            Self::Const(def, ..) | Self::Fn(def, ..) | Self::TyAlias(def, ..) => def,\n+            Self::Macro(..) | Self::Static(..) => Defaultness::Final,\n+        }\n+    }\n+}"}, {"sha": "05bb07cd4b90a567a331e1e0130427537f299c9b", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -890,19 +890,19 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _, expr) | ItemKind::Const(ty, expr) => {\n+        ItemKind::Static(ty, _, expr) | ItemKind::Const(_, ty, expr) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n-        ItemKind::Fn(sig, generics, body) => {\n+        ItemKind::Fn(_, sig, generics, body) => {\n             visit_fn_sig(sig, vis);\n             vis.visit_generics(generics);\n             visit_opt(body, |body| vis.visit_block(body));\n         }\n         ItemKind::Mod(m) => vis.visit_mod(m),\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(_ga) => {}\n-        ItemKind::TyAlias(generics, bounds, ty) => {\n+        ItemKind::TyAlias(_, generics, bounds, ty) => {\n             vis.visit_generics(generics);\n             visit_bounds(bounds, vis);\n             visit_opt(ty, |ty| vis.visit_ty(ty));\n@@ -948,7 +948,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     mut item: P<AssocItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<AssocItem>; 1]> {\n-    let Item { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } = item.deref_mut();\n+    let Item { id, ident, vis, attrs, kind, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }\n@@ -967,16 +967,16 @@ pub fn walk_nested_item(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        AssocItemKind::Fn(sig, generics, body) => {\n+        AssocItemKind::Fn(_, sig, generics, body) => {\n             visitor.visit_generics(generics);\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n@@ -1003,7 +1003,6 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n             attrs,\n             id: DUMMY_NODE_ID,\n             vis: respan(span.shrink_to_lo(), VisibilityKind::Public),\n-            defaultness: Defaultness::Final,\n             span,\n             kind: ItemKind::Mod(module),\n             tokens: None,\n@@ -1031,7 +1030,7 @@ pub fn noop_flat_map_item<T: MutVisitor>(\n     mut item: P<Item>,\n     visitor: &mut T,\n ) -> SmallVec<[P<Item>; 1]> {\n-    let Item { ident, attrs, id, kind, vis, defaultness: _, span, tokens: _ } = item.deref_mut();\n+    let Item { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n     visitor.visit_ident(ident);\n     visit_attrs(attrs, visitor);\n     visitor.visit_id(id);\n@@ -1049,7 +1048,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n     mut item: P<ForeignItem>,\n     visitor: &mut T,\n ) -> SmallVec<[P<ForeignItem>; 1]> {\n-    let Item { ident, attrs, id, kind, vis, defaultness: _, span, tokens: _ } = item.deref_mut();\n+    let Item { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n     walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }"}, {"sha": "96149ad7947ce208a0501483d608a146dcd062df", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -298,11 +298,11 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             }\n         }\n         ItemKind::Use(ref use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(ref typ, ref expr) => {\n+        ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(_, ref typ, ref expr) => {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ItemKind::Fn(ref sig, ref generics, ref body) => {\n+        ItemKind::Fn(_, ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(FnCtxt::Free, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id)\n@@ -312,7 +312,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+        ItemKind::TyAlias(_, ref generics, ref bounds, ref ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -526,7 +526,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n }\n \n pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {\n-    let ForeignItem { id, span, ident, vis, defaultness: _, attrs, kind, tokens: _ } = item;\n+    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n     walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Foreign);\n }\n \n@@ -610,7 +610,7 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n }\n \n pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem, ctxt: AssocCtxt) {\n-    let AssocItem { id, span, ident, vis, attrs, kind, tokens: _, defaultness: _ } = item;\n+    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n     walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Assoc(ctxt));\n }\n \n@@ -628,16 +628,16 @@ fn walk_nested_item<'a, V: Visitor<'a>>(\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(sig, generics, body) => {\n+        AssocItemKind::Fn(_, sig, generics, body) => {\n             visitor.visit_generics(generics);\n             let kind = FnKind::Fn(ctxt, ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(generics, bounds, ty) => {\n+        AssocItemKind::TyAlias(_, generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "35e418696f17cfed03df4de8e75985b062533c5e", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"defaultness\":\"Final\",\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "215a2921315213ad680a802ea98155c5ab34766f", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -13,9 +13,11 @@ impl S {\n     //~| ERROR associated constant in `impl` without body\n     default static IC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR a static item cannot be `default`\n     pub(crate) default static ID: u8;\n     //~^ ERROR associated `static` items are not allowed\n     //~| ERROR associated constant in `impl` without body\n+    //~| ERROR a static item cannot be `default`\n }\n \n trait T {\n@@ -25,11 +27,11 @@ trait T {\n     //~^ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n-    //~| ERROR `default` is only allowed on items in\n+    //~| ERROR a static item cannot be `default`\n     pub(crate) default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n-    //~| ERROR `default` is only allowed on items in\n     //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR a static item cannot be `default`\n }\n \n impl T for S {\n@@ -40,8 +42,10 @@ impl T for S {\n     //~| ERROR associated constant in `impl` without body\n     default static TC: u8 = 0;\n     //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR a static item cannot be `default`\n     pub default static TD: u8;\n     //~^ ERROR associated `static` items are not allowed\n     //~| ERROR associated constant in `impl` without body\n     //~| ERROR unnecessary visibility qualifier\n+    //~| ERROR a static item cannot be `default`\n }"}, {"sha": "612297c9cd8b1a9e064b74b13ae69564528420d1", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 63, "deletions": 31, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -10,62 +10,110 @@ error: associated `static` items are not allowed\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:14:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n   --> $DIR/assoc-static-semantic-fail.rs:14:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:17:16\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:16:5\n+  --> $DIR/assoc-static-semantic-fail.rs:17:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:22:5\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+  --> $DIR/assoc-static-semantic-fail.rs:26:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:28:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:26:5\n+  --> $DIR/assoc-static-semantic-fail.rs:28:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:31:16\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:29:5\n+  --> $DIR/assoc-static-semantic-fail.rs:31:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:36:5\n+  --> $DIR/assoc-static-semantic-fail.rs:38:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:41:5\n+  --> $DIR/assoc-static-semantic-fail.rs:43:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-semantic-fail.rs:46:9\n+   |\n+LL |     pub default static TD: u8;\n+   |         ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,57 +127,41 @@ LL |     static IB: u8;\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:16:5\n+  --> $DIR/assoc-static-semantic-fail.rs:17:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                     |\n    |                                     help: provide a definition for the constant: `= <expr>;`\n \n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:26:5\n-   |\n-LL |     default static TC: u8 = 0;\n-   |     -------^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `default` because of this\n-\n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:29:5\n-   |\n-LL |     pub(crate) default static TD: u8;\n-   |     ^^^^^^^^^^^-------^^^^^^^^^^^^^^^\n-   |                |\n-   |                `default` because of this\n-\n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:29:5\n+  --> $DIR/assoc-static-semantic-fail.rs:31:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+  --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^-\n    |                  |\n    |                  help: provide a definition for the constant: `= <expr>;`\n \n error: associated constant in `impl` without body\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                              |\n    |                              help: provide a definition for the constant: `= <expr>;`\n \n error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:43:5\n+  --> $DIR/assoc-static-semantic-fail.rs:46:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^ `pub` not permitted here because it's implied\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 24 previous errors\n \n For more information about this error, try `rustc --explain E0449`."}, {"sha": "492f2ea16ef57ba14b110beb67bd6a042c6d4f19", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -7,21 +7,27 @@ impl S {\n     static IA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static IB: u8; //~ ERROR associated `static` items are not allowed\n     default static IC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub(crate) default static ID: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }\n \n #[cfg(FALSE)]\n trait T {\n     static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static TB: u8; //~ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub(crate) default static TD: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }\n \n #[cfg(FALSE)]\n impl T for S {\n     static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n     static TB: u8; //~ ERROR associated `static` items are not allowed\n     default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n     pub default static TD: u8; //~ ERROR associated `static` items are not allowed\n+    //~^ ERROR a static item cannot be `default`\n }"}, {"sha": "e972361451235856128e34442b9b20cf9f348883", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.stderr", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -10,65 +10,113 @@ error: associated `static` items are not allowed\n LL |     static IB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:9:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n   --> $DIR/assoc-static-syntactic-fail.rs:9:5\n    |\n LL |     default static IC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:11:16\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:10:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:11:5\n    |\n LL |     pub(crate) default static ID: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:15:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:17:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:16:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:18:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:19:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:17:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:19:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:21:16\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |                ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:18:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:21:5\n    |\n LL |     pub(crate) default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:23:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:27:5\n    |\n LL |     static TA: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:24:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:28:5\n    |\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:29:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:25:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:29:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/assoc-static-syntactic-fail.rs:31:9\n+   |\n+LL |     pub default static TD: u8;\n+   |         ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n-  --> $DIR/assoc-static-syntactic-fail.rs:26:5\n+  --> $DIR/assoc-static-syntactic-fail.rs:31:5\n    |\n LL |     pub default static TD: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "982ee6d83b3b868a3b9ef0a2729f0c651c0d4b9b", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -6,135 +6,135 @@ fn main() {}\n \n #[cfg(FALSE)]\n mod free_items {\n-    default extern crate foo; //~ ERROR item cannot be `default`\n-    default use foo; //~ ERROR item cannot be `default`\n-    default static foo: u8; //~ ERROR item cannot be `default`\n-    default const foo: u8; //~ ERROR item cannot be `default`\n-    default fn foo(); //~ ERROR item cannot be `default`\n-    default mod foo {} //~ ERROR item cannot be `default`\n-    default extern \"C\" {} //~ ERROR item cannot be `default`\n-    default type foo = u8; //~ ERROR item cannot be `default`\n-    default enum foo {} //~ ERROR item cannot be `default`\n-    default struct foo {} //~ ERROR item cannot be `default`\n-    default union foo {} //~ ERROR item cannot be `default`\n-    default trait foo {} //~ ERROR item cannot be `default`\n-    default trait foo = Ord; //~ ERROR item cannot be `default`\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    default const foo: u8;\n+    default fn foo();\n+    default mod foo {} //~ ERROR a module cannot be `default`\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n+    default union foo {} //~ ERROR a union cannot be `default`\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n     default impl foo {}\n     default!();\n     default::foo::bar!();\n-    default default!(); //~ ERROR item cannot be `default`\n-    default default::foo::bar!(); //~ ERROR item cannot be `default`\n-    default macro foo {} //~ ERROR item cannot be `default`\n-    default macro_rules! foo {} //~ ERROR item cannot be `default`\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n }\n \n #[cfg(FALSE)]\n extern \"C\" {\n-    default extern crate foo; //~ ERROR item cannot be `default`\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n     //~^ ERROR extern crate not supported in `extern` block\n-    default use foo; //~ ERROR item cannot be `default`\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n     //~^ ERROR `use` import not supported in `extern` block\n-    default static foo: u8; //~ ERROR item cannot be `default`\n-    default const foo: u8; //~ ERROR item cannot be `default`\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n+    default const foo: u8;\n     //~^ ERROR extern items cannot be `const`\n-    default fn foo(); //~ ERROR item cannot be `default`\n-    default mod foo {} //~ ERROR item cannot be `default`\n+    default fn foo();\n+    default mod foo {} //~ ERROR a module cannot be `default`\n     //~^ ERROR module not supported in `extern` block\n-    default extern \"C\" {} //~ ERROR item cannot be `default`\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n     //~^ ERROR extern block not supported in `extern` block\n-    default type foo = u8; //~ ERROR item cannot be `default`\n-    default enum foo {} //~ ERROR item cannot be `default`\n+    default type foo = u8;\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n     //~^ ERROR enum not supported in `extern` block\n-    default struct foo {} //~ ERROR item cannot be `default`\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n     //~^ ERROR struct not supported in `extern` block\n-    default union foo {} //~ ERROR item cannot be `default`\n+    default union foo {} //~ ERROR a union cannot be `default`\n     //~^ ERROR union not supported in `extern` block\n-    default trait foo {} //~ ERROR item cannot be `default`\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n     //~^ ERROR trait not supported in `extern` block\n-    default trait foo = Ord; //~ ERROR item cannot be `default`\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n     //~^ ERROR trait alias not supported in `extern` block\n     default impl foo {}\n     //~^ ERROR implementation not supported in `extern` block\n     default!();\n     default::foo::bar!();\n-    default default!(); //~ ERROR item cannot be `default`\n-    default default::foo::bar!(); //~ ERROR item cannot be `default`\n-    default macro foo {} //~ ERROR item cannot be `default`\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `extern` block\n-    default macro_rules! foo {} //~ ERROR item cannot be `default`\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `extern` block\n }\n \n #[cfg(FALSE)]\n impl S {\n-    default extern crate foo;\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n     //~^ ERROR extern crate not supported in `trait` or `impl`\n-    default use foo;\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n     //~^ ERROR `use` import not supported in `trait` or `impl`\n-    default static foo: u8;\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n-    default mod foo {}\n+    default mod foo {}//~ ERROR a module cannot be `default`\n     //~^ ERROR module not supported in `trait` or `impl`\n-    default extern \"C\" {}\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n     //~^ ERROR extern block not supported in `trait` or `impl`\n     default type foo = u8;\n-    default enum foo {}\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n     //~^ ERROR enum not supported in `trait` or `impl`\n-    default struct foo {}\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n     //~^ ERROR struct not supported in `trait` or `impl`\n-    default union foo {}\n+    default union foo {} //~ ERROR a union cannot be `default`\n     //~^ ERROR union not supported in `trait` or `impl`\n-    default trait foo {}\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n     //~^ ERROR trait not supported in `trait` or `impl`\n-    default trait foo = Ord;\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n     //~^ ERROR trait alias not supported in `trait` or `impl`\n     default impl foo {}\n     //~^ ERROR implementation not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n-    default default!();\n-    default default::foo::bar!();\n-    default macro foo {}\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `trait` or `impl`\n-    default macro_rules! foo {}\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `trait` or `impl`\n }\n \n #[cfg(FALSE)]\n trait T {\n-    default extern crate foo;\n+    default extern crate foo; //~ ERROR an extern crate cannot be `default`\n     //~^ ERROR extern crate not supported in `trait` or `impl`\n-    default use foo;\n+    default use foo; //~ ERROR a `use` import cannot be `default`\n     //~^ ERROR `use` import not supported in `trait` or `impl`\n-    default static foo: u8;\n+    default static foo: u8; //~ ERROR a static item cannot be `default`\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n-    default mod foo {}\n+    default mod foo {}//~ ERROR a module cannot be `default`\n     //~^ ERROR module not supported in `trait` or `impl`\n-    default extern \"C\" {}\n+    default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n     //~^ ERROR extern block not supported in `trait` or `impl`\n     default type foo = u8;\n-    default enum foo {}\n+    default enum foo {} //~ ERROR an enum cannot be `default`\n     //~^ ERROR enum not supported in `trait` or `impl`\n-    default struct foo {}\n+    default struct foo {} //~ ERROR a struct cannot be `default`\n     //~^ ERROR struct not supported in `trait` or `impl`\n-    default union foo {}\n+    default union foo {} //~ ERROR a union cannot be `default`\n     //~^ ERROR union not supported in `trait` or `impl`\n-    default trait foo {}\n+    default trait foo {} //~ ERROR a trait cannot be `default`\n     //~^ ERROR trait not supported in `trait` or `impl`\n-    default trait foo = Ord;\n+    default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n     //~^ ERROR trait alias not supported in `trait` or `impl`\n     default impl foo {}\n     //~^ ERROR implementation not supported in `trait` or `impl`\n     default!();\n     default::foo::bar!();\n-    default default!();\n-    default default::foo::bar!();\n-    default macro foo {}\n+    default default!(); //~ ERROR an item macro invocation cannot be `default`\n+    default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n+    default macro foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `trait` or `impl`\n-    default macro_rules! foo {}\n+    default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n     //~^ ERROR macro definition not supported in `trait` or `impl`\n }"}, {"sha": "d0f3ad4d72b04fcf15300f1584729f40080843de", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 253, "deletions": 77, "changes": 330, "blob_url": "https://github.com/rust-lang/rust/blob/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62930d31514d6d9b4b0df3755d643f06f0d4212a/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=62930d31514d6d9b4b0df3755d643f06f0d4212a", "patch": "@@ -1,140 +1,116 @@\n-error: item cannot be `default`\n+error: an extern crate cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:9:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a `use` import cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:10:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a static item cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:11:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:12:5\n-   |\n-LL |     default const foo: u8;\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:13:5\n-   |\n-LL |     default fn foo();\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n-error: item cannot be `default`\n+error: a module cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:14:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: an extern block cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:15:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:16:5\n-   |\n-LL |     default type foo = u8;\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n-error: item cannot be `default`\n+error: an enum cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:17:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a struct cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:18:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a union cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:19:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a trait cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:20:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a trait alias cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:21:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: an item macro invocation cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:25:5\n    |\n LL |     default default!();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: an item macro invocation cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:26:5\n    |\n LL |     default default::foo::bar!();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a macro definition cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:27:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a macro definition cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:28:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: an extern crate cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:33:5\n    |\n LL |     default extern crate foo;\n@@ -148,7 +124,7 @@ error: extern crate not supported in `extern` block\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a `use` import cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:35:5\n    |\n LL |     default use foo;\n@@ -162,22 +138,14 @@ error: `use` import not supported in `extern` block\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a static item cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:37:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:38:5\n-   |\n-LL |     default const foo: u8;\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n error: extern items cannot be `const`\n   --> $DIR/default-on-wrong-item-kind.rs:38:19\n    |\n@@ -188,15 +156,7 @@ LL |     default const foo: u8;\n    |\n    = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:40:5\n-   |\n-LL |     default fn foo();\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n-error: item cannot be `default`\n+error: a module cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:41:5\n    |\n LL |     default mod foo {}\n@@ -210,7 +170,7 @@ error: module not supported in `extern` block\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: an extern block cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:43:5\n    |\n LL |     default extern \"C\" {}\n@@ -224,15 +184,7 @@ error: extern block not supported in `extern` block\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:45:5\n-   |\n-LL |     default type foo = u8;\n-   |     ^^^^^^^ `default` because of this\n-   |\n-   = note: only associated `fn`, `const`, and `type` items can be `default`\n-\n-error: item cannot be `default`\n+error: an enum cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:46:5\n    |\n LL |     default enum foo {}\n@@ -246,7 +198,7 @@ error: enum not supported in `extern` block\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a struct cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:48:5\n    |\n LL |     default struct foo {}\n@@ -260,7 +212,7 @@ error: struct not supported in `extern` block\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a union cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:50:5\n    |\n LL |     default union foo {}\n@@ -274,7 +226,7 @@ error: union not supported in `extern` block\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a trait cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:52:5\n    |\n LL |     default trait foo {}\n@@ -288,7 +240,7 @@ error: trait not supported in `extern` block\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a trait alias cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:54:5\n    |\n LL |     default trait foo = Ord;\n@@ -308,23 +260,23 @@ error: implementation not supported in `extern` block\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: an item macro invocation cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:60:5\n    |\n LL |     default default!();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: an item macro invocation cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:61:5\n    |\n LL |     default default::foo::bar!();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: item cannot be `default`\n+error: a macro definition cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:62:5\n    |\n LL |     default macro foo {}\n@@ -338,7 +290,7 @@ error: macro definition not supported in `extern` block\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: item cannot be `default`\n+error: a macro definition cannot be `default`\n   --> $DIR/default-on-wrong-item-kind.rs:64:5\n    |\n LL |     default macro_rules! foo {}\n@@ -352,60 +304,140 @@ error: macro definition not supported in `extern` block\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:70:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: extern crate not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:70:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:72:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: `use` import not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:72:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:74:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n   --> $DIR/default-on-wrong-item-kind.rs:74:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:78:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: module not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:78:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:80:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: extern block not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:80:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:83:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: enum not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:83:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:85:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: struct not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:85:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:87:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: union not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:87:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:89:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: trait not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:89:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:91:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: trait alias not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:91:5\n    |\n@@ -418,72 +450,184 @@ error: implementation not supported in `trait` or `impl`\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:97:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:98:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:99:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:99:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:101:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:101:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: an extern crate cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:107:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: extern crate not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:107:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a `use` import cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:109:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: `use` import not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:109:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^^^^^^^^^^\n \n+error: a static item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:111:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: associated `static` items are not allowed\n   --> $DIR/default-on-wrong-item-kind.rs:111:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: a module cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:115:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: module not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:115:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^^^^^^^^^\n \n+error: an extern block cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:117:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: extern block not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:117:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: an enum cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:120:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: enum not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:120:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n+error: a struct cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:122:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: struct not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:122:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: a union cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:124:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: union not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:124:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a trait cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:126:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: trait not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:126:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a trait alias cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:128:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: trait alias not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:128:5\n    |\n@@ -496,17 +640,49 @@ error: implementation not supported in `trait` or `impl`\n LL |     default impl foo {}\n    |     ^^^^^^^^^^^^^^^^\n \n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:134:5\n+   |\n+LL |     default default!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: an item macro invocation cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:135:5\n+   |\n+LL |     default default::foo::bar!();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:136:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:136:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: a macro definition cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:138:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n error: macro definition not supported in `trait` or `impl`\n   --> $DIR/default-on-wrong-item-kind.rs:138:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 95 previous errors\n "}]}