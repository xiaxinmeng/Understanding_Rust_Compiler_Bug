{"sha": "fd6b025e8a5ab0bf0356030cab98575dca397f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmIwMjVlOGE1YWIwYmYwMzU2MDMwY2FiOTg1NzVkY2EzOTdmNjk=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-08-20T20:41:27Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-08-22T17:06:18Z"}, "message": "Preserve visibility on trait items inside trait and impl", "tree": {"sha": "b4859c8d57d114cbb09cc806b4dcc7be547b59af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4859c8d57d114cbb09cc806b4dcc7be547b59af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6b025e8a5ab0bf0356030cab98575dca397f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6b025e8a5ab0bf0356030cab98575dca397f69", "html_url": "https://github.com/rust-lang/rust/commit/fd6b025e8a5ab0bf0356030cab98575dca397f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6b025e8a5ab0bf0356030cab98575dca397f69/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8bd550c8dc9b68d41696e044213a032b3d476d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bd550c8dc9b68d41696e044213a032b3d476d0", "html_url": "https://github.com/rust-lang/rust/commit/c8bd550c8dc9b68d41696e044213a032b3d476d0"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "4fa7190c138d99eb716006db29ec61f622562560", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd6b025e8a5ab0bf0356030cab98575dca397f69/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6b025e8a5ab0bf0356030cab98575dca397f69/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fd6b025e8a5ab0bf0356030cab98575dca397f69", "patch": "@@ -168,14 +168,14 @@ pub(crate) struct FnSig<'a> {\n     constness: ast::Const,\n     defaultness: ast::Defaultness,\n     unsafety: ast::Unsafe,\n-    visibility: ast::Visibility,\n+    visibility: &'a ast::Visibility,\n }\n \n impl<'a> FnSig<'a> {\n     pub(crate) fn from_method_sig(\n         method_sig: &'a ast::FnSig,\n         generics: &'a ast::Generics,\n-        visibility: ast::Visibility,\n+        visibility: &'a ast::Visibility,\n     ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.header.unsafety,\n@@ -198,7 +198,7 @@ impl<'a> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::Fn(fn_ctxt, _, fn_sig, vis, _) => match fn_ctxt {\n                 visit::FnCtxt::Assoc(..) => {\n-                    let mut fn_sig = FnSig::from_method_sig(fn_sig, generics, vis.clone());\n+                    let mut fn_sig = FnSig::from_method_sig(fn_sig, generics, vis);\n                     fn_sig.defaultness = defaultness;\n                     fn_sig\n                 }\n@@ -210,7 +210,7 @@ impl<'a> FnSig<'a> {\n                     is_async: Cow::Borrowed(&fn_sig.header.asyncness),\n                     defaultness,\n                     unsafety: fn_sig.header.unsafety,\n-                    visibility: vis.clone(),\n+                    visibility: vis,\n                 },\n             },\n             _ => unreachable!(),\n@@ -317,6 +317,7 @@ impl<'a> FmtVisitor<'a> {\n         indent: Indent,\n         ident: symbol::Ident,\n         sig: &ast::FnSig,\n+        vis: &ast::Visibility,\n         generics: &ast::Generics,\n         span: Span,\n     ) -> Option<String> {\n@@ -328,7 +329,7 @@ impl<'a> FmtVisitor<'a> {\n             &context,\n             indent,\n             ident,\n-            &FnSig::from_method_sig(sig, generics, DEFAULT_VISIBILITY),\n+            &FnSig::from_method_sig(sig, generics, vis),\n             span,\n             FnBraceStyle::None,\n         )?;\n@@ -1754,7 +1755,7 @@ impl<'a> StaticParts<'a> {\n         };\n         StaticParts {\n             prefix: \"const\",\n-            vis: &DEFAULT_VISIBILITY,\n+            vis: &ti.vis,\n             ident: ti.ident,\n             ty,\n             mutability: ast::Mutability::Not,\n@@ -3110,7 +3111,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&fn_sig, generics, self.vis.clone()),\n+                        &FnSig::from_method_sig(&fn_sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )"}, {"sha": "c67ebe793fd70d59cb2a70032037cd4218691b1b", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd6b025e8a5ab0bf0356030cab98575dca397f69/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6b025e8a5ab0bf0356030cab98575dca397f69/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fd6b025e8a5ab0bf0356030cab98575dca397f69", "patch": "@@ -3,7 +3,7 @@ use std::rc::Rc;\n \n use rustc_ast::{ast, token::DelimToken, visit, AstLike};\n use rustc_data_structures::sync::Lrc;\n-use rustc_span::{symbol, BytePos, Pos, Span, DUMMY_SP};\n+use rustc_span::{symbol, BytePos, Pos, Span};\n \n use crate::attr::*;\n use crate::comment::{contains_comment, rewrite_comment, CodeCharKind, CommentCodeSlices};\n@@ -568,6 +568,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             indent,\n                             item.ident,\n                             &fn_signature,\n+                            &item.vis,\n                             generics,\n                             item.span,\n                         );\n@@ -641,14 +642,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n                 if let Some(ref body) = block {\n                     let inner_attrs = inner_attributes(&ti.attrs);\n-                    let vis = ast::Visibility {\n-                        kind: ast::VisibilityKind::Inherited,\n-                        span: DUMMY_SP,\n-                        tokens: None,\n-                    };\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                     self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &ti.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n                         ti.span,\n@@ -658,7 +654,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ti.ident, sig, generics, ti.span);\n+                        self.rewrite_required_fn(indent, ti.ident, sig, &ti.vis, generics, ti.span);\n                     self.push_rewrite(ti.span, rewrite);\n                 }\n             }\n@@ -708,7 +704,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ii.ident, sig, generics, ii.span);\n+                        self.rewrite_required_fn(indent, ii.ident, sig, &ii.vis, generics, ii.span);\n                     self.push_rewrite(ii.span, rewrite);\n                 }\n             }"}, {"sha": "99e02990e417775ba8a9821a501e9ce0d4f0f960", "filename": "tests/target/impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd6b025e8a5ab0bf0356030cab98575dca397f69/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6b025e8a5ab0bf0356030cab98575dca397f69/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=fd6b025e8a5ab0bf0356030cab98575dca397f69", "patch": "@@ -25,7 +25,7 @@ pub impl Foo for Bar {\n impl Visible for Bar {\n     pub const C: i32;\n     pub type T;\n-    fn f();\n+    pub fn f();\n     pub fn g() {}\n }\n "}, {"sha": "7f067991b267b6e905ccdc23299b78b59ccd8552", "filename": "tests/target/trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd6b025e8a5ab0bf0356030cab98575dca397f69/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6b025e8a5ab0bf0356030cab98575dca397f69/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=fd6b025e8a5ab0bf0356030cab98575dca397f69", "patch": "@@ -213,8 +213,8 @@ where\n         + EEEEEEE;\n \n trait Visible {\n-    const C: i32;\n+    pub const C: i32;\n     pub type T;\n-    fn f();\n-    fn g() {}\n+    pub fn f();\n+    pub fn g() {}\n }"}]}