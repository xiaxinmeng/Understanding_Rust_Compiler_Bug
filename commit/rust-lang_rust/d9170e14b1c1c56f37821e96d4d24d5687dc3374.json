{"sha": "d9170e14b1c1c56f37821e96d4d24d5687dc3374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTcwZTE0YjFjMWM1NmYzNzgyMWU5NmQ0ZDI0ZDU2ODdkYzMzNzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-28T22:41:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-28T22:41:20Z"}, "message": "Tidy", "tree": {"sha": "ccdd2f1f8814bfecf70bdaa6a56b9a49148e81f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccdd2f1f8814bfecf70bdaa6a56b9a49148e81f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9170e14b1c1c56f37821e96d4d24d5687dc3374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9170e14b1c1c56f37821e96d4d24d5687dc3374", "html_url": "https://github.com/rust-lang/rust/commit/d9170e14b1c1c56f37821e96d4d24d5687dc3374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9170e14b1c1c56f37821e96d4d24d5687dc3374/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38939c7e8ca67a3991949cb17bf052b840d1aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38939c7e8ca67a3991949cb17bf052b840d1aa4", "html_url": "https://github.com/rust-lang/rust/commit/d38939c7e8ca67a3991949cb17bf052b840d1aa4"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "608723a6ca55546f206974bbb77483d7139297be", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9170e14b1c1c56f37821e96d4d24d5687dc3374/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9170e14b1c1c56f37821e96d4d24d5687dc3374/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=d9170e14b1c1c56f37821e96d4d24d5687dc3374", "patch": "@@ -809,7 +809,9 @@ fn listen_common(host_ip: ip::IpAddr, port: uint, backlog: uint,\n  * A buffered wrapper that you can cast as an `io::reader` or `io::writer`\n  */\n pub fn socket_buf(sock: TcpSocket) -> TcpSocketBuf {\n-    TcpSocketBuf(@TcpBufferedSocketData { sock: move sock, mut buf: ~[], buf_off: 0 })\n+    TcpSocketBuf(@TcpBufferedSocketData {\n+        sock: move sock, mut buf: ~[], buf_off: 0\n+    })\n }\n \n /// Convenience methods extending `net::tcp::tcp_socket`\n@@ -865,19 +867,19 @@ impl TcpSocketBuf: io::Reader {\n         loop {\n           assert count < len;\n \n-          // If possible, copy up to `len` bytes from the internal \n+          // If possible, copy up to `len` bytes from the internal\n           // `data.buf` into `buf`\n           let nbuffered = self.data.buf.len() - self.data.buf_off;\n           let needed = len - count;\n             if nbuffered > 0 {\n                 unsafe {\n-                    let ncopy = uint::min(nbuffered, needed); \n+                    let ncopy = uint::min(nbuffered, needed);\n                     let dst = ptr::mut_offset(\n                         vec::raw::to_mut_ptr(buf), count);\n                     let src = ptr::const_offset(\n                         vec::raw::to_const_ptr(self.data.buf),\n                         self.data.buf_off);\n-                    ptr::copy_memory(dst, src, ncopy); \n+                    ptr::copy_memory(dst, src, ncopy);\n                     self.data.buf_off += ncopy;\n                     count += ncopy;\n                 }\n@@ -905,7 +907,7 @@ impl TcpSocketBuf: io::Reader {\n                          err_data.err_name, err_data.err_msg);\n                   // As we have already copied data into result buffer,\n                   // we cannot simply return 0 here. Instead the error\n-                  // should show up in a later call to read(). \n+                  // should show up in a later call to read().\n                   break;\n               }\n           }\n@@ -1872,7 +1874,8 @@ pub mod test {\n                         cont_ch.send(());\n                         let sock = result::unwrap(move accept_result);\n                         let peer_addr = sock.get_peer_addr();\n-                        debug!(\"SERVER: successfully accepted connection from %s:%u\",\n+                        debug!(\"SERVER: successfully accepted \\\n+                                connection from %s:%u\",\n                                  ip::format_addr(&peer_addr),\n                                  ip::get_port(&peer_addr));\n                         let received_req_bytes = read(&sock, 0u);"}]}