{"sha": "fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2RlZGEyNzQxOWVhZTYxZGEzY2JmNWE1YjFiNGY1MWFlMTZkMDQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-31T06:06:05Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-31T06:06:05Z"}, "message": "Add #[must_use] to a few standard library methods\n\nChosen to start a precedent of using it on ones that are potentially-expensive and where using it for side effects is particularly discouraged.\n\nDiscuss :)", "tree": {"sha": "9dc51de2af727ff8741edb1c3f2b1665374da21d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc51de2af727ff8741edb1c3f2b1665374da21d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "html_url": "https://github.com/rust-lang/rust/commit/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80785a547d29519dbdb5781437ec318fb210b980", "url": "https://api.github.com/repos/rust-lang/rust/commits/80785a547d29519dbdb5781437ec318fb210b980", "html_url": "https://github.com/rust-lang/rust/commit/80785a547d29519dbdb5781437ec318fb210b980"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "c6741ddb822d5bb9114889bc71fdd2203f72e559", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "patch": "@@ -59,6 +59,7 @@ pub trait ToOwned {\n     /// let vv: Vec<i32> = v.to_owned();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn to_owned(&self) -> Self::Owned;\n \n     /// Uses borrowed data to replace owned data, usually by cloning."}, {"sha": "c175ae15d28fe03636778725b23dbd370c24b684", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "patch": "@@ -105,6 +105,7 @@ pub trait Clone : Sized {\n     /// assert_eq!(\"Hello\", hello.clone());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn clone(&self) -> Self;\n \n     /// Performs copy-assignment from `source`."}, {"sha": "42fd90512923bc4fc1f977fb3a9347931a009694", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "patch": "@@ -1368,6 +1368,7 @@ pub trait Iterator {\n     /// [`Result`]: ../../std/result/enum.Result.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B where Self: Sized {\n         FromIterator::from_iter(self)\n     }"}, {"sha": "6f5fcc9e421cc115d780356092c1563455c30201", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "patch": "@@ -317,7 +317,7 @@ newtype_index!(ScopeId);\n /// macro (and methods below) makes working with `BlockAnd` much more\n /// convenient.\n \n-#[must_use] // if you don't use one of these results, you're leaving a dangling edge\n+#[must_use = \"if you don't use one of these results, you're leaving a dangling edge\"]\n struct BlockAnd<T>(BasicBlock, T);\n \n trait BlockAndExtension {"}]}