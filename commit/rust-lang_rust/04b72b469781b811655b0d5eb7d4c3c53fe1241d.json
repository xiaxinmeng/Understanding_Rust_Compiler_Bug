{"sha": "04b72b469781b811655b0d5eb7d4c3c53fe1241d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjcyYjQ2OTc4MWI4MTE2NTViMGQ1ZWI3ZDRjM2M1M2ZlMTI0MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T02:16:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T02:16:18Z"}, "message": "Auto merge of #76349 - Mark-Simulacrum:dl-llvm, r=alexcrichton\n\nDownload LLVM from CI to bootstrap (linux-only to start)\n\nThis follows #76332, adding support for using CI-built LLVM rather than building it locally. This should essentially \"just work,\" but is left off by default in this PR.\n\nWhile we can support downloading LLVM for multiple host triples, this currently only downloads it for the build triple. That said, it should be possible to expand this relatively easily should multiple host triples be desired. Most people shouldn't be adjusting host/target triples though, so this should cover most use cases.\n\nCurrently this downloads LLVM for the last bors-authored commit in the `git log`. This is a bit suboptimal -- we want the last bors-authored commit that touched the llvm-project submodule in basically all cases. But for now this just adds an extra ~20 MB download when rebasing atop latest master. Once we have a submodule bump landing after #76332, we can fix this behavior to reduce downloads further.", "tree": {"sha": "90beac9be11228661a81409970e0776d8b2b550d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90beac9be11228661a81409970e0776d8b2b550d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b72b469781b811655b0d5eb7d4c3c53fe1241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b72b469781b811655b0d5eb7d4c3c53fe1241d", "html_url": "https://github.com/rust-lang/rust/commit/04b72b469781b811655b0d5eb7d4c3c53fe1241d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b72b469781b811655b0d5eb7d4c3c53fe1241d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498dab02562a67d503fc1cf0eca0968f44cfecfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/498dab02562a67d503fc1cf0eca0968f44cfecfa", "html_url": "https://github.com/rust-lang/rust/commit/498dab02562a67d503fc1cf0eca0968f44cfecfa"}, {"sha": "2e87a6e78dacad9c4acc5fe4fc8bf5aa1ca44a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e87a6e78dacad9c4acc5fe4fc8bf5aa1ca44a51", "html_url": "https://github.com/rust-lang/rust/commit/2e87a6e78dacad9c4acc5fe4fc8bf5aa1ca44a51"}], "stats": {"total": 226, "additions": 187, "deletions": 39}, "files": [{"sha": "b50406a9579f90cb469fe5a80b53a38715acff87", "filename": "config.toml.example", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -14,6 +14,21 @@\n # =============================================================================\n [llvm]\n \n+# Whether to use Rust CI built LLVM instead of locally building it.\n+#\n+# Unless you're developing for a target where Rust CI doesn't build a compiler\n+# toolchain or changing LLVM locally, you probably want to set this to true.\n+#\n+# It's currently false by default due to being newly added; please file bugs if\n+# enabling this did not work for you on Linux (macOS and Windows support is\n+# coming soon).\n+#\n+# We also currently only support this when building LLVM for the build triple.\n+#\n+# Note that many of the LLVM options are not currently supported for\n+# downloading. Currently only the \"assertions\" option can be toggled.\n+#download-ci-llvm = false\n+\n # Indicates whether LLVM rebuild should be skipped when running bootstrap. If\n # this is `false` then the compiler's LLVM will be rebuilt whenever the built\n # version doesn't have the correct hash. If it is `true` then LLVM will never"}, {"sha": "44a17f75451a92d520f2d822642769117647dc1c", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 83, "deletions": 24, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -14,8 +14,17 @@\n \n from time import time\n \n-\n-def get(url, path, verbose=False):\n+def support_xz():\n+    try:\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            temp_path = temp_file.name\n+        with tarfile.open(temp_path, \"w:xz\"):\n+            pass\n+        return True\n+    except tarfile.CompressionError:\n+        return False\n+\n+def get(url, path, verbose=False, do_verify=True):\n     suffix = '.sha256'\n     sha_url = url + suffix\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n@@ -24,19 +33,20 @@ def get(url, path, verbose=False):\n         sha_path = sha_file.name\n \n     try:\n-        download(sha_path, sha_url, False, verbose)\n-        if os.path.exists(path):\n-            if verify(path, sha_path, False):\n-                if verbose:\n-                    print(\"using already-download file\", path)\n-                return\n-            else:\n-                if verbose:\n-                    print(\"ignoring already-download file\",\n-                          path, \"due to failed verification\")\n-                os.unlink(path)\n+        if do_verify:\n+            download(sha_path, sha_url, False, verbose)\n+            if os.path.exists(path):\n+                if verify(path, sha_path, False):\n+                    if verbose:\n+                        print(\"using already-download file\", path)\n+                    return\n+                else:\n+                    if verbose:\n+                        print(\"ignoring already-download file\",\n+                            path, \"due to failed verification\")\n+                    os.unlink(path)\n         download(temp_path, url, True, verbose)\n-        if not verify(temp_path, sha_path, verbose):\n+        if do_verify and not verify(temp_path, sha_path, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n             print(\"moving {} to {}\".format(temp_path, path))\n@@ -365,16 +375,6 @@ def download_stage0(self):\n         cargo_channel = self.cargo_channel\n         rustfmt_channel = self.rustfmt_channel\n \n-        def support_xz():\n-            try:\n-                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n-                    temp_path = temp_file.name\n-                with tarfile.open(temp_path, \"w:xz\"):\n-                    pass\n-                return True\n-            except tarfile.CompressionError:\n-                return False\n-\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n@@ -423,6 +423,19 @@ def support_xz():\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n                     rustfmt_stamp.write(self.date + self.rustfmt_channel)\n \n+        if self.downloading_llvm():\n+            llvm_sha = subprocess.check_output([\"git\", \"log\", \"--author=bors\",\n+                \"--format=%H\", \"-n1\"]).decode(sys.getdefaultencoding()).strip()\n+            llvm_assertions = self.get_toml('assertions', 'llvm') == 'true'\n+            if self.program_out_of_date(self.llvm_stamp(), llvm_sha + str(llvm_assertions)):\n+                self._download_ci_llvm(llvm_sha, llvm_assertions)\n+                with output(self.llvm_stamp()) as llvm_stamp:\n+                    llvm_stamp.write(self.date + llvm_sha + str(llvm_assertions))\n+\n+    def downloading_llvm(self):\n+        opt = self.get_toml('download-ci-llvm', 'llvm')\n+        return opt == \"true\"\n+\n     def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n         if date is None:\n             date = self.date\n@@ -437,6 +450,25 @@ def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n+    def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n+        cache_prefix = \"llvm-{}-{}\".format(llvm_sha, llvm_assertions)\n+        cache_dst = os.path.join(self.build_dir, \"cache\")\n+        rustc_cache = os.path.join(cache_dst, cache_prefix)\n+        if not os.path.exists(rustc_cache):\n+            os.makedirs(rustc_cache)\n+\n+        url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(llvm_sha)\n+        if llvm_assertions:\n+            url = url.replace('rustc-builds', 'rustc-builds-alt')\n+        tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+        filename = \"rust-dev-nightly-\" + self.build + tarball_suffix\n+        tarball = os.path.join(rustc_cache, filename)\n+        if not os.path.exists(tarball):\n+            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=False)\n+        unpack(tarball, tarball_suffix, self.llvm_root(),\n+                match=\"rust-dev\",\n+                verbose=self.verbose)\n+\n     def fix_bin_or_dylib(self, fname):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n         or the RPATH section, to fix the dynamic library search path\n@@ -558,6 +590,17 @@ def rustfmt_stamp(self):\n         \"\"\"\n         return os.path.join(self.bin_root(), '.rustfmt-stamp')\n \n+    def llvm_stamp(self):\n+        \"\"\"Return the path for .rustfmt-stamp\n+\n+        >>> rb = RustBuild()\n+        >>> rb.build_dir = \"build\"\n+        >>> rb.llvm_stamp() == os.path.join(\"build\", \"ci-llvm\", \".llvm-stamp\")\n+        True\n+        \"\"\"\n+        return os.path.join(self.llvm_root(), '.llvm-stamp')\n+\n+\n     def program_out_of_date(self, stamp_path, extra=\"\"):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n@@ -581,6 +624,22 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n+    def llvm_root(self):\n+        \"\"\"Return the CI LLVM root directory\n+\n+        >>> rb = RustBuild()\n+        >>> rb.build_dir = \"build\"\n+        >>> rb.llvm_root() == os.path.join(\"build\", \"ci-llvm\")\n+        True\n+\n+        When the 'build' property is given should be a nested directory:\n+\n+        >>> rb.build = \"devel\"\n+        >>> rb.llvm_root() == os.path.join(\"build\", \"devel\", \"ci-llvm\")\n+        True\n+        \"\"\"\n+        return os.path.join(self.build_dir, self.build, \"ci-llvm\")\n+\n     def get_toml(self, key, section=None):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n "}, {"sha": "08907edef1d1e52b5984070e2a60775ff8bf9d02", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -593,7 +593,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n             let file = compiler_file(builder, builder.cxx(target).unwrap(), target, \"libstdc++.a\");\n             cargo.env(\"LLVM_STATIC_STDCPP\", file);\n         }\n-        if builder.config.llvm_link_shared || builder.config.llvm_thin_lto {\n+        if builder.config.llvm_link_shared {\n             cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n         }\n         if builder.config.llvm_use_libcxx {"}, {"sha": "000f8cef61492438f321d4c6a2fa9b779fca5572", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -15,9 +15,20 @@ use std::process;\n use crate::cache::{Interned, INTERNER};\n use crate::flags::Flags;\n pub use crate::flags::Subcommand;\n+use crate::util::exe;\n use build_helper::t;\n use serde::Deserialize;\n \n+macro_rules! check_ci_llvm {\n+    ($name:expr) => {\n+        assert!(\n+            $name.is_none(),\n+            \"setting {} is incompatible with download-ci-llvm.\",\n+            stringify!($name)\n+        );\n+    };\n+}\n+\n /// Global configuration for the entire build and/or bootstrap.\n ///\n /// This structure is derived from a combination of both `config.toml` and\n@@ -84,6 +95,7 @@ pub struct Config {\n     pub llvm_version_suffix: Option<String>,\n     pub llvm_use_linker: Option<String>,\n     pub llvm_allow_old_toolchain: Option<bool>,\n+    pub llvm_from_ci: bool,\n \n     pub use_lld: bool,\n     pub lld_enabled: bool,\n@@ -344,6 +356,7 @@ struct Llvm {\n     use_libcxx: Option<bool>,\n     use_linker: Option<String>,\n     allow_old_toolchain: Option<bool>,\n+    download_ci_llvm: Option<bool>,\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -624,6 +637,43 @@ impl Config {\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n             config.llvm_use_linker = llvm.use_linker.clone();\n             config.llvm_allow_old_toolchain = llvm.allow_old_toolchain;\n+            config.llvm_from_ci = llvm.download_ci_llvm.unwrap_or(false);\n+\n+            if config.llvm_from_ci {\n+                // None of the LLVM options, except assertions, are supported\n+                // when using downloaded LLVM. We could just ignore these but\n+                // that's potentially confusing, so force them to not be\n+                // explicitly set. The defaults and CI defaults don't\n+                // necessarily match but forcing people to match (somewhat\n+                // arbitrary) CI configuration locally seems bad/hard.\n+                check_ci_llvm!(llvm.optimize);\n+                check_ci_llvm!(llvm.thin_lto);\n+                check_ci_llvm!(llvm.release_debuginfo);\n+                check_ci_llvm!(llvm.link_shared);\n+                check_ci_llvm!(llvm.static_libstdcpp);\n+                check_ci_llvm!(llvm.targets);\n+                check_ci_llvm!(llvm.experimental_targets);\n+                check_ci_llvm!(llvm.link_jobs);\n+                check_ci_llvm!(llvm.link_shared);\n+                check_ci_llvm!(llvm.clang_cl);\n+                check_ci_llvm!(llvm.version_suffix);\n+                check_ci_llvm!(llvm.cflags);\n+                check_ci_llvm!(llvm.cxxflags);\n+                check_ci_llvm!(llvm.ldflags);\n+                check_ci_llvm!(llvm.use_libcxx);\n+                check_ci_llvm!(llvm.use_linker);\n+                check_ci_llvm!(llvm.allow_old_toolchain);\n+\n+                // CI-built LLVM is shared\n+                config.llvm_link_shared = true;\n+            }\n+\n+            if config.llvm_thin_lto {\n+                // If we're building with ThinLTO on, we want to link to LLVM\n+                // shared, to avoid re-doing ThinLTO (which happens in the link\n+                // step) with each stage.\n+                config.llvm_link_shared = true;\n+            }\n         }\n \n         if let Some(ref rust) = toml.rust {\n@@ -706,6 +756,20 @@ impl Config {\n             }\n         }\n \n+        if config.llvm_from_ci {\n+            let triple = &config.build.triple;\n+            let mut build_target = config\n+                .target_config\n+                .entry(config.build)\n+                .or_insert_with(|| Target::from_triple(&triple));\n+\n+            check_ci_llvm!(build_target.llvm_config);\n+            check_ci_llvm!(build_target.llvm_filecheck);\n+            let ci_llvm_bin = config.out.join(&*config.build.triple).join(\"ci-llvm/bin\");\n+            build_target.llvm_config = Some(ci_llvm_bin.join(exe(\"llvm-config\", config.build)));\n+            build_target.llvm_filecheck = Some(ci_llvm_bin.join(exe(\"FileCheck\", config.build)));\n+        }\n+\n         if let Some(ref t) = toml.dist {\n             config.dist_sign_folder = t.sign_folder.clone().map(PathBuf::from);\n             config.dist_gpg_password_file = t.gpg_password_file.clone().map(PathBuf::from);"}, {"sha": "cf73e570fa56f7e432a2f78b13bc80b3e6390600", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -2382,26 +2382,32 @@ impl Step for HashSign {\n /// Note: This function does not yet support Windows, but we also don't support\n ///       linking LLVM tools dynamically on Windows yet.\n fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) {\n-    let src_libdir = builder.llvm_out(target).join(\"lib\");\n+    if !builder.config.llvm_link_shared {\n+        // We do not need to copy LLVM files into the sysroot if it is not\n+        // dynamically linked; it is already included into librustc_llvm\n+        // statically.\n+        return;\n+    }\n \n+    // On macOS for some reason the llvm-config binary behaves differently and\n+    // and fails on missing .a files if run without --link-shared. If run with\n+    // that option, it still fails, but because we only ship a libLLVM.dylib\n+    // rather than libLLVM-11-rust-....dylib file.\n+    //\n+    // For now just don't use llvm-config here on macOS; that will fail to\n+    // support CI-built LLVM, but until we work out the different behavior that\n+    // is fine as it is off by default.\n     if target.contains(\"apple-darwin\") {\n+        let src_libdir = builder.llvm_out(target).join(\"lib\");\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n-        return;\n-    }\n-\n-    // Usually libLLVM.so is a symlink to something like libLLVM-6.0.so.\n-    // Since tools link to the latter rather than the former, we have to\n-    // follow the symlink to find out what to distribute.\n-    let llvm_dylib_path = src_libdir.join(\"libLLVM.so\");\n-    if llvm_dylib_path.exists() {\n-        let llvm_dylib_path = llvm_dylib_path.canonicalize().unwrap_or_else(|e| {\n-            panic!(\"dist: Error calling canonicalize path `{}`: {}\", llvm_dylib_path.display(), e);\n-        });\n-\n-        builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n+    } else if let Ok(llvm_config) = crate::native::prebuilt_llvm_config(builder, target) {\n+        let files = output(Command::new(llvm_config).arg(\"--libfiles\"));\n+        for file in files.lines() {\n+            builder.install(Path::new(file), dst_libdir, 0o644);\n+        }\n     }\n }\n "}, {"sha": "170c93561ef7f7c473cb675c9f3a33b49c0d9aa5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b72b469781b811655b0d5eb7d4c3c53fe1241d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=04b72b469781b811655b0d5eb7d4c3c53fe1241d", "patch": "@@ -611,6 +611,10 @@ impl Build {\n     ///\n     /// If no custom `llvm-config` was specified then Rust's llvm will be used.\n     fn is_rust_llvm(&self, target: TargetSelection) -> bool {\n+        if self.config.llvm_from_ci && target == self.config.build {\n+            return true;\n+        }\n+\n         match self.config.target_config.get(&target) {\n             Some(ref c) => c.llvm_config.is_none(),\n             None => true,"}]}