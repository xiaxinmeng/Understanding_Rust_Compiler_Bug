{"sha": "961f18317dcb427277ac89a89936781fdef31a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWYxODMxN2RjYjQyNzI3N2FjODlhODk5MzY3ODFmZGVmMzFhMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T05:54:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-10T05:54:26Z"}, "message": "Auto merge of #75573 - Aaron1011:feature/const-mutation-lint, r=oli-obk\n\nAdd CONST_ITEM_MUTATION lint\n\nFixes #74053\nFixes #55721\n\nThis PR adds a new lint `CONST_ITEM_MUTATION`.\nGiven an item `const FOO: SomeType = ..`, this lint fires on:\n\n* Attempting to write directly to a field (`FOO.field = some_val`) or\n  array entry (`FOO.array_field[0] = val`)\n* Taking a mutable reference to the `const` item (`&mut FOO`), including\n  through an autoderef `FOO.some_mut_self_method()`\n\nThe lint message explains that since each use of a constant creates a\nnew temporary, the original `const` item will not be modified.", "tree": {"sha": "a164a95b7ba07660068331c92ead686f4643b75d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a164a95b7ba07660068331c92ead686f4643b75d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961f18317dcb427277ac89a89936781fdef31a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961f18317dcb427277ac89a89936781fdef31a17", "html_url": "https://github.com/rust-lang/rust/commit/961f18317dcb427277ac89a89936781fdef31a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961f18317dcb427277ac89a89936781fdef31a17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d", "html_url": "https://github.com/rust-lang/rust/commit/3ffe9f843c1709bce254f98dcb0a08a04ac3fe8d"}, {"sha": "f23670ed68c4871a3048bf24f7ad2aa426555b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23670ed68c4871a3048bf24f7ad2aa426555b6e", "html_url": "https://github.com/rust-lang/rust/commit/f23670ed68c4871a3048bf24f7ad2aa426555b6e"}], "stats": {"total": 72, "additions": 24, "deletions": 48}, "files": [{"sha": "2b6ddadd4c112aca2f5cfc49183c2c2d30079821", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/961f18317dcb427277ac89a89936781fdef31a17/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f18317dcb427277ac89a89936781fdef31a17/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=961f18317dcb427277ac89a89936781fdef31a17", "patch": "@@ -1,5 +1,4 @@\n use crate::utils::{is_adjusted, span_lint};\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -22,10 +21,9 @@ declare_clippy_lint! {\n     \"assignments to temporaries\"\n }\n \n-fn is_temporary(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+fn is_temporary(_cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     match &expr.kind {\n         ExprKind::Struct(..) | ExprKind::Tup(..) => true,\n-        ExprKind::Path(qpath) => matches!(cx.qpath_res(qpath, expr.hir_id), Res::Def(DefKind::Const, ..)),\n         _ => false,\n     }\n }"}, {"sha": "39f87510548503654c7a610837fed55c9ebc64de", "filename": "tests/ui/borrow_interior_mutable_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Fborrow_interior_mutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Fborrow_interior_mutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.rs?ref=961f18317dcb427277ac89a89936781fdef31a17", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::borrow_interior_mutable_const)]\n #![allow(clippy::declare_interior_mutable_const, clippy::ref_in_deref)]\n+#![allow(const_item_mutation)]\n \n use std::borrow::Cow;\n use std::cell::{Cell, UnsafeCell};"}, {"sha": "5800af7e960f4da7247f652d0685bcaf3af32093", "filename": "tests/ui/borrow_interior_mutable_const.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Fborrow_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const.stderr?ref=961f18317dcb427277ac89a89936781fdef31a17", "patch": "@@ -1,5 +1,5 @@\n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:65:5\n+  --> $DIR/borrow_interior_mutable_const.rs:66:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n@@ -8,119 +8,119 @@ LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:66:16\n+  --> $DIR/borrow_interior_mutable_const.rs:67:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:69:22\n+  --> $DIR/borrow_interior_mutable_const.rs:70:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:70:25\n+  --> $DIR/borrow_interior_mutable_const.rs:71:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:71:27\n+  --> $DIR/borrow_interior_mutable_const.rs:72:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:72:26\n+  --> $DIR/borrow_interior_mutable_const.rs:73:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:83:14\n+  --> $DIR/borrow_interior_mutable_const.rs:84:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:84:14\n+  --> $DIR/borrow_interior_mutable_const.rs:85:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:85:19\n+  --> $DIR/borrow_interior_mutable_const.rs:86:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:86:14\n+  --> $DIR/borrow_interior_mutable_const.rs:87:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:87:13\n+  --> $DIR/borrow_interior_mutable_const.rs:88:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:93:13\n+  --> $DIR/borrow_interior_mutable_const.rs:94:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:98:5\n+  --> $DIR/borrow_interior_mutable_const.rs:99:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:99:16\n+  --> $DIR/borrow_interior_mutable_const.rs:100:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:112:5\n+  --> $DIR/borrow_interior_mutable_const.rs:113:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:113:16\n+  --> $DIR/borrow_interior_mutable_const.rs:114:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n    |                ^^^^^^^^^^^"}, {"sha": "d6f56d40c5d4eb8d9664dc2c233f4fe04204c2d7", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=961f18317dcb427277ac89a89936781fdef31a17", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::temporary_assignment)]\n+#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "4cc32c79f05ce3389f36da19d98258e919a34f9f", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/961f18317dcb427277ac89a89936781fdef31a17/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=961f18317dcb427277ac89a89936781fdef31a17", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:47:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:49:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,40 +17,16 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:53:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:55:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^\n \n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:56:5\n-   |\n-LL |     A.0 = 2;\n-   |     ^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:57:5\n-   |\n-LL |     B.field = 2;\n-   |     ^^^^^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:58:5\n-   |\n-LL |     C.structure.field = 2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:59:5\n-   |\n-LL |     D.array[0] = 2;\n-   |     ^^^^^^^^^^^^^^\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n "}]}