{"sha": "48e5199de366ed2945d1103f0b6c8aa542604ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTUxOTlkZTM2NmVkMjk0NWQxMTAzZjBiNmM4YWE1NDI2MDRlYmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-20T14:54:24Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-28T20:31:18Z"}, "message": "libsyntax: clearer names for some AST parts\n\nThis applies the HIR changes from the previous commits to the AST, and\nis thus a syntax-[breaking-change]\n\nRenames `PatKind::Vec` to `PatKind::Slice`, since these are called slice\npatterns, not vec patterns. Renames `TyKind::Vec`, which represents the\ntype `[T]`, to `TyKind::Slice`. Renames `TyKind::FixedLengthVec` to\n`TyKind::Array`.", "tree": {"sha": "d5386e43fc15642d98058fa10a7fa29843237f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5386e43fc15642d98058fa10a7fa29843237f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e5199de366ed2945d1103f0b6c8aa542604ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e5199de366ed2945d1103f0b6c8aa542604ebb", "html_url": "https://github.com/rust-lang/rust/commit/48e5199de366ed2945d1103f0b6c8aa542604ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e5199de366ed2945d1103f0b6c8aa542604ebb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b7bdd0c2920fcf77da6608d4829945a110b7e", "html_url": "https://github.com/rust-lang/rust/commit/cf0b7bdd0c2920fcf77da6608d4829945a110b7e"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "a4f47d6990394b2f55daf61eea24a204618340c3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -222,30 +222,29 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_ty(&mut self, t: &Ty) -> P<hir::Ty> {\n-        use syntax::ast::TyKind::*;\n         P(hir::Ty {\n             id: t.id,\n             node: match t.node {\n-                Infer | ImplicitSelf => hir::TyInfer,\n-                Vec(ref ty) => hir::TySlice(self.lower_ty(ty)),\n-                Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n-                Rptr(ref region, ref mt) => {\n+                TyKind::Infer | TyKind::ImplicitSelf => hir::TyInfer,\n+                TyKind::Slice(ref ty) => hir::TySlice(self.lower_ty(ty)),\n+                TyKind::Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n+                TyKind::Rptr(ref region, ref mt) => {\n                     hir::TyRptr(self.lower_opt_lifetime(region), self.lower_mt(mt))\n                 }\n-                BareFn(ref f) => {\n+                TyKind::BareFn(ref f) => {\n                     hir::TyBareFn(P(hir::BareFnTy {\n                         lifetimes: self.lower_lifetime_defs(&f.lifetimes),\n                         unsafety: self.lower_unsafety(f.unsafety),\n                         abi: f.abi,\n                         decl: self.lower_fn_decl(&f.decl),\n                     }))\n                 }\n-                Never => hir::TyNever,\n-                Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect()),\n-                Paren(ref ty) => {\n+                TyKind::Never => hir::TyNever,\n+                TyKind::Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect()),\n+                TyKind::Paren(ref ty) => {\n                     return self.lower_ty(ty);\n                 }\n-                Path(ref qself, ref path) => {\n+                TyKind::Path(ref qself, ref path) => {\n                     let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                         hir::QSelf {\n                             ty: self.lower_ty(ty),\n@@ -254,22 +253,22 @@ impl<'a> LoweringContext<'a> {\n                     });\n                     hir::TyPath(qself, self.lower_path(path))\n                 }\n-                ObjectSum(ref ty, ref bounds) => {\n+                TyKind::ObjectSum(ref ty, ref bounds) => {\n                     hir::TyObjectSum(self.lower_ty(ty), self.lower_bounds(bounds))\n                 }\n-                FixedLengthVec(ref ty, ref e) => {\n+                TyKind::Array(ref ty, ref e) => {\n                     hir::TyArray(self.lower_ty(ty), self.lower_expr(e))\n                 }\n-                Typeof(ref expr) => {\n+                TyKind::Typeof(ref expr) => {\n                     hir::TyTypeof(self.lower_expr(expr))\n                 }\n-                PolyTraitRef(ref bounds) => {\n+                TyKind::PolyTraitRef(ref bounds) => {\n                     hir::TyPolyTraitRef(self.lower_bounds(bounds))\n                 }\n-                ImplTrait(ref bounds) => {\n+                TyKind::ImplTrait(ref bounds) => {\n                     hir::TyImplTrait(self.lower_bounds(bounds))\n                 }\n-                Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n+                TyKind::Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n             },\n             span: t.span,\n         })\n@@ -891,7 +890,7 @@ impl<'a> LoweringContext<'a> {\n                 PatKind::Range(ref e1, ref e2) => {\n                     hir::PatKind::Range(self.lower_expr(e1), self.lower_expr(e2))\n                 }\n-                PatKind::Vec(ref before, ref slice, ref after) => {\n+                PatKind::Slice(ref before, ref slice, ref after) => {\n                     hir::PatKind::Slice(before.iter().map(|x| self.lower_pat(x)).collect(),\n                                 slice.as_ref().map(|x| self.lower_pat(x)),\n                                 after.iter().map(|x| self.lower_pat(x)).collect())"}, {"sha": "49d889ff08dec6a5aab1436be986bdad355d7322", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -286,7 +286,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n     fn visit_ty(&mut self, ty: &Ty) {\n         match ty.node {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n-            TyKind::FixedLengthVec(_, ref length) => self.visit_ast_const_integer(length),\n+            TyKind::Array(_, ref length) => self.visit_ast_const_integer(length),\n             TyKind::ImplTrait(..) => {\n                 self.create_def(ty.id, DefPathData::ImplTrait);\n             }"}, {"sha": "9364cec8dddafa3fb0fb62ade81be98b5854f672", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -593,7 +593,7 @@ impl Pat {\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk(it)\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 before.iter().all(|p| p.walk(it)) &&\n                 slice.iter().all(|p| p.walk(it)) &&\n                 after.iter().all(|p| p.walk(it))\n@@ -669,8 +669,8 @@ pub enum PatKind {\n     /// A range pattern, e.g. `1...2`\n     Range(P<Expr>, P<Expr>),\n     /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Vec(box [a, b], Some(i), box [y, z])`\n-    Vec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n+    Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n     /// A macro pattern; pre-expansion\n     Mac(Mac),\n }\n@@ -1431,10 +1431,10 @@ pub struct BareFnTy {\n /// The different kinds of types recognized by the compiler\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyKind {\n-    /// A variable-length array (`[T]`)\n-    Vec(P<Ty>),\n+    /// A variable-length slice (`[T]`)\n+    Slice(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n-    FixedLengthVec(P<Ty>, P<Expr>),\n+    Array(P<Ty>, P<Expr>),\n     /// A raw pointer (`*const T` or `*mut T`)\n     Ptr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)"}, {"sha": "81c8e0bdb8262c082835f9713470b87eebd880e4", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -215,7 +215,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n \n     let ty = ecx.ty(\n         span,\n-        ast::TyKind::FixedLengthVec(\n+        ast::TyKind::Array(\n             ecx.ty(\n                 span,\n                 ast::TyKind::Tup(vec![ty_str.clone(), ty_str])"}, {"sha": "88835fc868abad62c656c4c7105e1155844e1830", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -1082,14 +1082,14 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n \n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         match pattern.node {\n-            PatKind::Vec(_, Some(_), ref last) if !last.is_empty() => {\n+            PatKind::Slice(_, Some(_), ref last) if !last.is_empty() => {\n                 gate_feature_post!(&self, advanced_slice_patterns,\n                                   pattern.span,\n                                   \"multiple-element slice matches anywhere \\\n                                    but at the end of a slice (e.g. \\\n                                    `[0, ..xs, 0]`) are experimental\")\n             }\n-            PatKind::Vec(..) => {\n+            PatKind::Slice(..) => {\n                 gate_feature_post!(&self, slice_patterns,\n                                   pattern.span,\n                                   \"slice pattern syntax is experimental\");"}, {"sha": "05adfc430563b883b8987234baf8e8ef418ba4f3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -356,7 +356,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n         id: fld.new_id(id),\n         node: match node {\n             TyKind::Infer | TyKind::ImplicitSelf => node,\n-            TyKind::Vec(ty) => TyKind::Vec(fld.fold_ty(ty)),\n+            TyKind::Slice(ty) => TyKind::Slice(fld.fold_ty(ty)),\n             TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n             TyKind::Rptr(region, mt) => {\n                 TyKind::Rptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n@@ -385,8 +385,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyKind::ObjectSum(fld.fold_ty(ty),\n                             fld.fold_bounds(bounds))\n             }\n-            TyKind::FixedLengthVec(ty, e) => {\n-                TyKind::FixedLengthVec(fld.fold_ty(ty), fld.fold_expr(e))\n+            TyKind::Array(ty, e) => {\n+                TyKind::Array(fld.fold_ty(ty), fld.fold_expr(e))\n             }\n             TyKind::Typeof(expr) => {\n                 TyKind::Typeof(fld.fold_expr(expr))\n@@ -1092,8 +1092,8 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             PatKind::Range(e1, e2) => {\n                 PatKind::Range(folder.fold_expr(e1), folder.fold_expr(e2))\n             },\n-            PatKind::Vec(before, slice, after) => {\n-                PatKind::Vec(before.move_map(|x| folder.fold_pat(x)),\n+            PatKind::Slice(before, slice, after) => {\n+                PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),\n                        slice.map(|x| folder.fold_pat(x)),\n                        after.move_map(|x| folder.fold_pat(x)))\n             }"}, {"sha": "de7baf04b54e27e4b4e9952ee518dadb65c97855", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -1386,8 +1386,8 @@ impl<'a> Parser<'a> {\n             // Parse the `; e` in `[ i32; e ]`\n             // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_length_of_vec()? {\n-                None => TyKind::Vec(t),\n-                Some(suffix) => TyKind::FixedLengthVec(t, suffix)\n+                None => TyKind::Slice(t),\n+                Some(suffix) => TyKind::Array(t, suffix)\n             };\n             self.expect(&token::CloseDelim(token::Bracket))?;\n             t\n@@ -3587,7 +3587,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let (before, slice, after) = self.parse_pat_vec_elements()?;\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n-                pat = PatKind::Vec(before, slice, after);\n+                pat = PatKind::Slice(before, slice, after);\n             }\n             // At this point, token != _, &, &&, (, [\n             _ => if self.eat_keyword(keywords::Mut) {"}, {"sha": "3c106970232cdb4dbf39e516d9db32544fbd5dec", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -972,7 +972,7 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ty.span.lo));\n         try!(self.ibox(0));\n         match ty.node {\n-            ast::TyKind::Vec(ref ty) => {\n+            ast::TyKind::Slice(ref ty) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&ty));\n                 try!(word(&mut self.s, \"]\"));\n@@ -1039,7 +1039,7 @@ impl<'a> State<'a> {\n             ast::TyKind::ImplTrait(ref bounds) => {\n                 try!(self.print_bounds(\"impl \", &bounds[..]));\n             }\n-            ast::TyKind::FixedLengthVec(ref ty, ref v) => {\n+            ast::TyKind::Array(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&ty));\n                 try!(word(&mut self.s, \"; \"));\n@@ -2573,7 +2573,7 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"...\"));\n                 try!(self.print_expr(&end));\n             }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref before, ref slice, ref after) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.commasep(Inconsistent,\n                                    &before[..],"}, {"sha": "2bc5447cccc2f61d40a4a746e819c251d346b5d0", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -564,7 +564,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let static_lt = ecx.lifetime(sp, keywords::StaticLifetime.name());\n     // &'static [self::test::TestDescAndFn]\n     let static_type = ecx.ty_rptr(sp,\n-                                  ecx.ty(sp, ast::TyKind::Vec(struct_type)),\n+                                  ecx.ty(sp, ast::TyKind::Slice(struct_type)),\n                                   Some(static_lt),\n                                   ast::Mutability::Immutable);\n     // static TESTS: $static_type = &[...];"}, {"sha": "49f3a729f1673e09f62001394eb3bbf5bacf36f8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -313,7 +313,7 @@ pub fn walk_variant<V>(visitor: &mut V, variant: &Variant, generics: &Generics,\n \n pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n     match typ.node {\n-        TyKind::Vec(ref ty) | TyKind::Paren(ref ty) => {\n+        TyKind::Slice(ref ty) | TyKind::Paren(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n         TyKind::Ptr(ref mutable_type) => {\n@@ -341,7 +341,7 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyKind::FixedLengthVec(ref ty, ref expression) => {\n+        TyKind::Array(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n@@ -434,7 +434,7 @@ pub fn walk_pat<V: Visitor>(visitor: &mut V, pattern: &Pat) {\n             visitor.visit_expr(upper_bound)\n         }\n         PatKind::Wild => (),\n-        PatKind::Vec(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n+        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);\n             walk_list!(visitor, visit_pat, postpatterns);"}, {"sha": "de78f859f0f616d7f155df7e5e42a4d6d58c2e74", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5199de366ed2945d1103f0b6c8aa542604ebb/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=48e5199de366ed2945d1103f0b6c8aa542604ebb", "patch": "@@ -506,7 +506,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     -> P<ast::Expr> {\n         let sp = piece_ty.span;\n         let ty = ecx.ty_rptr(sp,\n-                             ecx.ty(sp, ast::TyKind::Vec(piece_ty)),\n+                             ecx.ty(sp, ast::TyKind::Slice(piece_ty)),\n                              Some(ecx.lifetime(sp, keywords::StaticLifetime.name())),\n                              ast::Mutability::Immutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);"}]}