{"sha": "37332758543182005740e8e6ef2312bbc82576b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MzMyNzU4NTQzMTgyMDA1NzQwZThlNmVmMjMxMmJiYzgyNTc2YjY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-13T23:05:07Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-02-20T22:19:30Z"}, "message": "Update the bootstrap compiler\n\nNote this does not change `core::derive` since it was merged after the\nbeta bump.", "tree": {"sha": "72b2069370731440c4220831a867166b21bad65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b2069370731440c4220831a867166b21bad65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37332758543182005740e8e6ef2312bbc82576b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37332758543182005740e8e6ef2312bbc82576b6", "html_url": "https://github.com/rust-lang/rust/commit/37332758543182005740e8e6ef2312bbc82576b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37332758543182005740e8e6ef2312bbc82576b6/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b30a639d5abd1270ade35d9bd92271f5a5ba18", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b30a639d5abd1270ade35d9bd92271f5a5ba18", "html_url": "https://github.com/rust-lang/rust/commit/83b30a639d5abd1270ade35d9bd92271f5a5ba18"}], "stats": {"total": 160, "additions": 48, "deletions": 112}, "files": [{"sha": "721cfdd4459e50107df8c989bf6688a56b203a15", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -14,7 +14,6 @@\n #![feature(dropck_eyepatch)]\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n-#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "4ab493d3cc915cedf8a3d7893af36372e6535892", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -26,7 +26,6 @@\n #![feature(thread_id_value)]\n #![feature(extend_one)]\n #![feature(const_panic)]\n-#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "e439ddcdaa9df19d231f17667630d42922ce76f8", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -13,7 +13,6 @@ Core encoding and decoding interfaces.\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n-#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(vec_spare_capacity)]\n #![feature(core_intrinsics)]"}, {"sha": "096fdf3fadb3f283e40a5d4577e1b75100efa372", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -118,7 +118,6 @@\n #![feature(range_bounds_assert_len)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n-#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]"}, {"sha": "58a9ae77244fb803a56794fb0cc6a9fc35152822", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -85,8 +85,6 @@ pub trait Wake {\n     }\n }\n \n-#[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n-#[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n@@ -96,8 +94,6 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     }\n }\n \n-#[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n-#[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {"}, {"sha": "1fb4a51acfd0a2dbc943f6a90d5a50282fea83f6", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -1798,7 +1798,7 @@ fn subslice_patterns() {\n \n     macro_rules! c {\n         ($inp:expr, $typ:ty, $out:expr $(,)?) => {\n-            assert_eq!($out, identity::<$typ>($inp));\n+            assert_eq!($out, identity::<$typ>($inp))\n         };\n     }\n "}, {"sha": "0d1a09a528db96642baefb04d800e26b731d9abd", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -128,7 +128,6 @@\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n-#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]"}, {"sha": "845d43efd6442b4bc6d108e86afc243877012c90", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -1,25 +1,3 @@\n-#[cfg(bootstrap)]\n-#[doc(include = \"panic.md\")]\n-#[macro_export]\n-#[allow_internal_unstable(core_panic)]\n-#[stable(feature = \"core\", since = \"1.6.0\")]\n-#[rustc_diagnostic_item = \"core_panic_macro\"]\n-macro_rules! panic {\n-    () => (\n-        $crate::panic!(\"explicit panic\")\n-    );\n-    ($msg:literal $(,)?) => (\n-        $crate::panicking::panic($msg)\n-    );\n-    ($msg:expr $(,)?) => (\n-        $crate::panicking::panic_str($msg)\n-    );\n-    ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n-    );\n-}\n-\n-#[cfg(not(bootstrap))]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n #[rustc_builtin_macro = \"core_panic\"]"}, {"sha": "87890f92759292f16fd2a686993fb7fbdee99fff", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -4,7 +4,6 @@\n //! types, initializing and manipulating memory.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![cfg_attr(bootstrap, allow(unused_unsafe))]\n \n use crate::clone;\n use crate::cmp;\n@@ -152,13 +151,6 @@ pub const fn forget<T>(t: T) {\n #[inline]\n #[unstable(feature = \"forget_unsized\", issue = \"none\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n-    #[cfg(bootstrap)]\n-    // SAFETY: the forget intrinsic could be safe, but there's no point in making it safe since\n-    // we'll be implementing this function soon via `ManuallyDrop`\n-    unsafe {\n-        intrinsics::forget(t)\n-    }\n-    #[cfg(not(bootstrap))]\n     intrinsics::forget(t)\n }\n "}, {"sha": "9692724545f289708789aad480b63dee63f10e63", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -94,10 +94,7 @@ mod cell;\n mod char;\n mod clone;\n mod cmp;\n-\n-#[cfg(not(bootstrap))]\n mod const_ptr;\n-\n mod fmt;\n mod hash;\n mod intrinsics;"}, {"sha": "c0b75036f4f3eb4107ed241d4c54ae495ee797f0", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -284,7 +284,6 @@ fn uninit_write_slice_cloned_no_drop() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn uninit_const_assume_init_read() {\n     const FOO: u32 = unsafe { MaybeUninit::new(42).assume_init_read() };\n     assert_eq!(FOO, 42);"}, {"sha": "441c68d213c9cecc5d60579057d89188ee3eac9c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -185,8 +185,8 @@\n //! [other]: #what-is-in-the-standard-library-documentation\n //! [primitive types]: ../book/ch03-02-data-types.html\n //! [rust-discord]: https://discord.gg/rust-lang\n-#![cfg_attr(not(bootstrap), doc = \"[array]: prim@array\")]\n-#![cfg_attr(not(bootstrap), doc = \"[slice]: prim@slice\")]\n+//! [array]: prim@array\n+//! [slice]: prim@slice\n #![cfg_attr(not(feature = \"restricted-std\"), stable(feature = \"rust1\", since = \"1.0.0\"))]\n #![cfg_attr(feature = \"restricted-std\", unstable(feature = \"restricted_std\", issue = \"none\"))]\n #![doc("}, {"sha": "c0750f8c0d1b03ab3c180ee360d94d90dcd2d5e6", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -4,21 +4,6 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#[cfg(bootstrap)]\n-#[doc(include = \"../../core/src/macros/panic.md\")]\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(libstd_sys_internals)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_macro\")]\n-macro_rules! panic {\n-    () => ({ $crate::panic!(\"explicit panic\") });\n-    ($msg:expr $(,)?) => ({ $crate::rt::begin_panic($msg) });\n-    ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n-    });\n-}\n-\n-#[cfg(not(bootstrap))]\n #[doc(include = \"../../core/src/macros/panic.md\")]\n #[macro_export]\n #[rustc_builtin_macro = \"std_panic\"]"}, {"sha": "3042a1297b807d060098f9997e2ffd9336d0f166", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -877,8 +877,7 @@ def build_bootstrap(self):\n         target_linker = self.get_toml(\"linker\", build_section)\n         if target_linker is not None:\n             env[\"RUSTFLAGS\"] += \" -C linker=\" + target_linker\n-        # cfg(bootstrap): Add `-Wsemicolon_in_expressions_from_macros` after the next beta bump\n-        env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes\"\n+        env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes -Wsemicolon_in_expressions_from_macros\"\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n "}, {"sha": "290a334827572c563e7463b3c0c9fcdfddc813c4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -1279,12 +1279,7 @@ impl<'a> Builder<'a> {\n             // some code doesn't go through this `rustc` wrapper.\n             lint_flags.push(\"-Wrust_2018_idioms\");\n             lint_flags.push(\"-Wunused_lifetimes\");\n-            // cfg(bootstrap): unconditionally enable this warning after the next beta bump\n-            // This is currently disabled for the stage1 libstd, since build scripts\n-            // will end up using the bootstrap compiler (which doesn't yet support this lint)\n-            if compiler.stage != 0 && mode != Mode::Std {\n-                lint_flags.push(\"-Wsemicolon_in_expressions_from_macros\");\n-            }\n+            lint_flags.push(\"-Wsemicolon_in_expressions_from_macros\");\n \n             if self.config.deny_warnings {\n                 lint_flags.push(\"-Dwarnings\");"}, {"sha": "4a53d1a60d17459c6f039082549195a14c13ce7f", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -12,7 +12,7 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2020-12-30\n+date: 2021-02-14\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some"}, {"sha": "1c19aa8eeefaacd30dbb678ef49c1470c05e84b4", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure#5}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/37332758543182005740e8e6ef2312bbc82576b6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%235%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/37332758543182005740e8e6ef2312bbc82576b6/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%235%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%235%7D.-------.InstrumentCoverage.0.html?ref=37332758543182005740e8e6ef2312bbc82576b6", "patch": "@@ -69,47 +69,47 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 110\"><span class=\"line\">                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"111:23-113:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n-111:23-113:6: @0[6]: _7 = &amp;(*_15)\n-111:23-113:6: @0[7]: _6 = &amp;(*_7)\n-111:23-113:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-112:28-112:61: @0[14]: _13 = ()\n-112:28-112:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n-112:28-112:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n-112:28-112:61: @0[17]: _11 = &amp;(*_14)\n-112:28-112:61: @0[18]: _10 = &amp;(*_11)\n-112:28-112:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-112:28-112:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n-112:9-112:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n-111:23-113:6: @2[5]: _0 = const ()\n-111:23-113:6: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:23-113:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n-111:23-113:6: @0[6]: _7 = &amp;(*_15)\n-111:23-113:6: @0[7]: _6 = &amp;(*_7)\n-111:23-113:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-112:28-112:61: @0[14]: _13 = ()\n-112:28-112:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n-112:28-112:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n-112:28-112:61: @0[17]: _11 = &amp;(*_14)\n-112:28-112:61: @0[18]: _10 = &amp;(*_11)\n-112:28-112:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-112:28-112:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n-112:9-112:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n-111:23-113:6: @2[5]: _0 = const ()\n-111:23-113:6: @2.Return: return\">        $crate::io::_print($crate::format_args_nl!($($arg)*));</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"111:23-113:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n-111:23-113:6: @0[6]: _7 = &amp;(*_15)\n-111:23-113:6: @0[7]: _6 = &amp;(*_7)\n-111:23-113:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-112:28-112:61: @0[14]: _13 = ()\n-112:28-112:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n-112:28-112:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n-112:28-112:61: @0[17]: _11 = &amp;(*_14)\n-112:28-112:61: @0[18]: _10 = &amp;(*_11)\n-112:28-112:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-112:28-112:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n-112:9-112:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n-111:23-113:6: @2[5]: _0 = const ()\n-111:23-113:6: @2.Return: return\">    }<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 95\"><span class=\"line\">                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"96:23-98:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n+96:23-98:6: @0[6]: _7 = &amp;(*_15)\n+96:23-98:6: @0[7]: _6 = &amp;(*_7)\n+96:23-98:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+97:28-97:61: @0[14]: _13 = ()\n+97:28-97:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n+97:28-97:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n+97:28-97:61: @0[17]: _11 = &amp;(*_14)\n+97:28-97:61: @0[18]: _10 = &amp;(*_11)\n+97:28-97:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+97:28-97:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n+97:9-97:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n+96:23-98:6: @2[5]: _0 = const ()\n+96:23-98:6: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"96:23-98:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n+96:23-98:6: @0[6]: _7 = &amp;(*_15)\n+96:23-98:6: @0[7]: _6 = &amp;(*_7)\n+96:23-98:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+97:28-97:61: @0[14]: _13 = ()\n+97:28-97:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n+97:28-97:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n+97:28-97:61: @0[17]: _11 = &amp;(*_14)\n+97:28-97:61: @0[18]: _10 = &amp;(*_11)\n+97:28-97:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+97:28-97:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n+97:9-97:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n+96:23-98:6: @2[5]: _0 = const ()\n+96:23-98:6: @2.Return: return\">        $crate::io::_print($crate::format_args_nl!($($arg)*));</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"96:23-98:6: @0[5]: _15 = const main::{closure#5}::promoted[1]\n+96:23-98:6: @0[6]: _7 = &amp;(*_15)\n+96:23-98:6: @0[7]: _6 = &amp;(*_7)\n+96:23-98:6: @0[8]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+97:28-97:61: @0[14]: _13 = ()\n+97:28-97:61: @0[15]: FakeRead(ForMatchedPlace, _13)\n+97:28-97:61: @0[16]: _14 = const main::{closure#5}::promoted[0]\n+97:28-97:61: @0[17]: _11 = &amp;(*_14)\n+97:28-97:61: @0[18]: _10 = &amp;(*_11)\n+97:28-97:61: @0[19]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+97:28-97:61: @0.Call: _4 = std::fmt::Arguments::new_v1(move _5, move _9) -&gt; [return: bb1, unwind: bb3]\n+97:9-97:62: @1.Call: _3 = std::io::_print(move _4) -&gt; [return: bb2, unwind: bb3]\n+96:23-98:6: @2[5]: _0 = const ()\n+96:23-98:6: @2.Return: return\">    }<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n </body>\n </html>"}]}