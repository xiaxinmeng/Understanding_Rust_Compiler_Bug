{"sha": "6e16f9b10f676e87c5d31263759c3b9a65be0a35", "node_id": "C_kwDOAAsO6NoAKDZlMTZmOWIxMGY2NzZlODdjNWQzMTI2Mzc1OWMzYjlhNjViZTBhMzU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T14:33:53Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T14:33:53Z"}, "message": "Rename RWLock to RwLock in std::sys.", "tree": {"sha": "8e29332b0efc8bcb2e5cf56a157d648889a4a220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e29332b0efc8bcb2e5cf56a157d648889a4a220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e16f9b10f676e87c5d31263759c3b9a65be0a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e16f9b10f676e87c5d31263759c3b9a65be0a35", "html_url": "https://github.com/rust-lang/rust/commit/6e16f9b10f676e87c5d31263759c3b9a65be0a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e16f9b10f676e87c5d31263759c3b9a65be0a35/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1a8131c6cf6973ff5ce2be2b7500232efbdd5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a8131c6cf6973ff5ce2be2b7500232efbdd5f", "html_url": "https://github.com/rust-lang/rust/commit/ce1a8131c6cf6973ff5ce2be2b7500232efbdd5f"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "f1baf077580e672d03f4b924d7940d1dc0908740", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -20,7 +20,7 @@ use crate::process;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace;\n-use crate::sys_common::rwlock::StaticRWLock;\n+use crate::sys_common::rwlock::StaticRwLock;\n use crate::sys_common::thread_info;\n use crate::thread;\n \n@@ -83,7 +83,7 @@ impl Hook {\n     }\n }\n \n-static HOOK_LOCK: StaticRWLock = StaticRWLock::new();\n+static HOOK_LOCK: StaticRwLock = StaticRwLock::new();\n static mut HOOK: Hook = Hook::Default;\n \n /// Registers a custom panic hook, replacing any that was previously registered."}, {"sha": "ed62fa977becab7b56065382c333d2b945b8b5b4", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -76,7 +76,7 @@ use crate::sys_common::rwlock as sys;\n /// [`Mutex`]: super::Mutex\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLock<T: ?Sized> {\n-    inner: sys::MovableRWLock,\n+    inner: sys::MovableRwLock,\n     poison: poison::Flag,\n     data: UnsafeCell<T>,\n }\n@@ -146,7 +146,7 @@ impl<T> RwLock<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> RwLock<T> {\n         RwLock {\n-            inner: sys::MovableRWLock::new(),\n+            inner: sys::MovableRwLock::new(),\n             poison: poison::Flag::new(),\n             data: UnsafeCell::new(t),\n         }"}, {"sha": "690bb155e1a27fea59e59253d524975d007817e1", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,22 +1,22 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{Condvar, Mutex};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     lock: Mutex,\n     cond: Condvar,\n     state: UnsafeCell<State>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n enum State {\n     Unlocked,\n     Reading(usize),\n     Writing,\n }\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n // This rwlock implementation is a relatively simple implementation which has a\n // condition variable for readers/writers as well as a mutex protecting the\n@@ -26,9 +26,9 @@ unsafe impl Sync for RWLock {}\n // hopefully correct this implementation is very likely to want to be changed in\n // the future.\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n     }\n \n     #[inline]"}, {"sha": "47be4c006ec7ec4e1e294d77a6d6b53fabcb7f2b", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -8,25 +8,25 @@ use super::waitqueue::{\n };\n use crate::mem;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     readers: SpinMutex<WaitVariable<Option<NonZeroUsize>>>,\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableRWLock = Box<RWLock>;\n+pub type MovableRwLock = Box<RwLock>;\n \n-// Check at compile time that RWLock size matches C definition (see test_c_rwlock_initializer below)\n+// Check at compile time that RwLock size matches C definition (see test_c_rwlock_initializer below)\n //\n // # Safety\n // Never called, as it is a compile time check.\n #[allow(dead_code)]\n-unsafe fn rw_lock_size_assert(r: RWLock) {\n-    unsafe { mem::transmute::<RWLock, [u8; 144]>(r) };\n+unsafe fn rw_lock_size_assert(r: RwLock) {\n+    unsafe { mem::transmute::<RwLock, [u8; 144]>(r) };\n }\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock {\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock {\n             readers: SpinMutex::new(WaitVariable::new(None)),\n             writer: SpinMutex::new(WaitVariable::new(false)),\n         }\n@@ -180,7 +180,7 @@ const EINVAL: i32 = 22;\n \n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }\n@@ -190,7 +190,7 @@ pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n \n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }\n@@ -199,7 +199,7 @@ pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n }\n #[cfg(not(test))]\n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n+pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RwLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n     }"}, {"sha": "4799961154a475730938d1c42b62ef54c3feb6ef", "filename": "library/std/src/sys/sgx/rwlock/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock%2Ftests.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,7 +1,7 @@\n use super::*;\n \n-// Verify that the byte pattern libunwind uses to initialize an RWLock is\n-// equivalent to the value of RWLock::new(). If the value changes,\n+// Verify that the byte pattern libunwind uses to initialize an RwLock is\n+// equivalent to the value of RwLock::new(). If the value changes,\n // `src/UnwindRustSgx.h` in libunwind needs to be changed too.\n #[test]\n fn test_c_rwlock_initializer() {\n@@ -18,9 +18,9 @@ fn test_c_rwlock_initializer() {\n         /* 0x80 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n     ];\n \n-    // For the test to work, we need the padding/unused bytes in RWLock to be\n+    // For the test to work, we need the padding/unused bytes in RwLock to be\n     // initialized as 0. In practice, this is the case with statics.\n-    static RUST_RWLOCK_INIT: RWLock = RWLock::new();\n+    static RUST_RWLOCK_INIT: RwLock = RwLock::new();\n \n     unsafe {\n         // If the assertion fails, that not necessarily an issue with the value"}, {"sha": "719d95bbe50a81f49ce1b1ad12ed8da032044399", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -8,7 +8,7 @@ use crate::os::{\n     solid::ffi::{OsStrExt, OsStringExt},\n };\n use crate::path::{self, PathBuf};\n-use crate::sys_common::rwlock::StaticRWLock;\n+use crate::sys_common::rwlock::StaticRwLock;\n use crate::vec;\n \n use super::{abi, error, itron, memchr};\n@@ -78,7 +78,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,"}, {"sha": "df16cc680ad848d8e9d57fc9c2eacf3af41b8f40", "filename": "library/std/src/sys/solid/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -7,24 +7,24 @@ use super::{\n     },\n };\n \n-pub struct RWLock {\n+pub struct RwLock {\n     /// The ID of the underlying mutex object\n     rwl: SpinIdOnceCell<()>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n // Safety: `num_readers` is protected by `mtx_num_readers`\n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n fn new_rwl() -> Result<abi::ID, ItronError> {\n     ItronError::err_if_negative(unsafe { abi::rwl_acre_rwl() })\n }\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { rwl: SpinIdOnceCell::new() }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { rwl: SpinIdOnceCell::new() }\n     }\n \n     /// Get the inner mutex's ID, which is lazily created."}, {"sha": "2b8dd168068b5455946f0b5444ef2babcf0d39b4", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -10,15 +10,15 @@ cfg_if::cfg_if! {\n         mod pthread_rwlock; // FIXME: Implement this using a futex\n         pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n         pub use pthread_remutex::ReentrantMutex;\n-        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_rwlock::{RwLock, MovableRwLock};\n     } else {\n         mod pthread_mutex;\n         mod pthread_remutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n         pub use pthread_mutex::{Mutex, MovableMutex};\n         pub use pthread_remutex::ReentrantMutex;\n-        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_rwlock::{RwLock, MovableRwLock};\n         pub use pthread_condvar::{Condvar, MovableCondvar};\n     }\n }"}, {"sha": "11a0c0457cd1aef5bee3e5682516011e965a6060", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,20 +1,20 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n     write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n-pub type MovableRWLock = Box<RWLock>;\n+pub type MovableRwLock = Box<RwLock>;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock {\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock {\n             inner: UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER),\n             write_locked: UnsafeCell::new(false),\n             num_readers: AtomicUsize::new(0),"}, {"sha": "1be733ba106e866828c87a9f8cc1769a1530ba14", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -20,7 +20,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys::memchr;\n-use crate::sys_common::rwlock::{StaticRWLock, StaticRWLockReadGuard};\n+use crate::sys_common::rwlock::{StaticRwLock, StaticRwLockReadGuard};\n use crate::vec;\n \n #[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n@@ -481,9 +481,9 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     ptr::addr_of_mut!(environ)\n }\n \n-static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n \n-pub fn env_read_lock() -> StaticRWLockReadGuard {\n+pub fn env_read_lock() -> StaticRwLockReadGuard {\n     ENV_LOCK.read()\n }\n "}, {"sha": "35bd59130346f2bb7672ea13397cb7c4fbed012b", "filename": "library/std/src/sys/unsupported/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n-pub use rwlock::{MovableRWLock, RWLock};\n+pub use rwlock::{MovableRwLock, RwLock};"}, {"sha": "14fd351314c17a9d87601c79f7f2221ca479e3fa", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,18 +1,18 @@\n use crate::cell::Cell;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     // This platform has no threads, so we can use a Cell here.\n     mode: Cell<isize>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {} // no threads on this platform\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {} // no threads on this platform\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { mode: Cell::new(0) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { mode: Cell::new(0) }\n     }\n \n     #[inline]"}, {"sha": "690bb155e1a27fea59e59253d524975d007817e1", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,22 +1,22 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{Condvar, Mutex};\n \n-pub struct RWLock {\n+pub struct RwLock {\n     lock: Mutex,\n     cond: Condvar,\n     state: UnsafeCell<State>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n enum State {\n     Unlocked,\n     Reading(usize),\n     Writing,\n }\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n // This rwlock implementation is a relatively simple implementation which has a\n // condition variable for readers/writers as well as a mutex protecting the\n@@ -26,9 +26,9 @@ unsafe impl Sync for RWLock {}\n // hopefully correct this implementation is very likely to want to be changed in\n // the future.\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { lock: Mutex::new(), cond: Condvar::new(), state: UnsafeCell::new(State::Unlocked) }\n     }\n \n     #[inline]"}, {"sha": "35bd59130346f2bb7672ea13397cb7c4fbed012b", "filename": "library/std/src/sys/windows/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n-pub use rwlock::{MovableRWLock, RWLock};\n+pub use rwlock::{MovableRwLock, RwLock};"}, {"sha": "12906652e0b7170d617800ae402478ade0448f44", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -1,18 +1,18 @@\n use crate::cell::UnsafeCell;\n use crate::sys::c;\n \n-pub struct RWLock {\n+pub struct RwLock {\n     inner: UnsafeCell<c::SRWLOCK>,\n }\n \n-pub type MovableRWLock = RWLock;\n+pub type MovableRwLock = RwLock;\n \n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n+unsafe impl Send for RwLock {}\n+unsafe impl Sync for RwLock {}\n \n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { inner: UnsafeCell::new(c::SRWLOCK_INIT) }\n+impl RwLock {\n+    pub const fn new() -> RwLock {\n+        RwLock { inner: UnsafeCell::new(c::SRWLOCK_INIT) }\n     }\n     #[inline]\n     pub unsafe fn read(&self) {"}, {"sha": "12e7a72a344dcc46facb8b226d2cbf0ad6694ecb", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e16f9b10f676e87c5d31263759c3b9a65be0a35/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=6e16f9b10f676e87c5d31263759c3b9a65be0a35", "patch": "@@ -4,41 +4,41 @@ use crate::sys::locks as imp;\n ///\n /// This rwlock does not implement poisoning.\n ///\n-/// This rwlock has a const constructor ([`StaticRWLock::new`]), does not\n+/// This rwlock has a const constructor ([`StaticRwLock::new`]), does not\n /// implement `Drop` to cleanup resources.\n-pub struct StaticRWLock(imp::RWLock);\n+pub struct StaticRwLock(imp::RwLock);\n \n-impl StaticRWLock {\n+impl StaticRwLock {\n     /// Creates a new rwlock for use.\n     pub const fn new() -> Self {\n-        Self(imp::RWLock::new())\n+        Self(imp::RwLock::new())\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n     /// thread to do so.\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn read(&'static self) -> StaticRWLockReadGuard {\n+    pub fn read(&'static self) -> StaticRwLockReadGuard {\n         unsafe { self.0.read() };\n-        StaticRWLockReadGuard(&self.0)\n+        StaticRwLockReadGuard(&self.0)\n     }\n \n     /// Acquires write access to the underlying lock, blocking the current thread\n     /// to do so.\n     ///\n     /// The lock is automatically unlocked when the returned guard is dropped.\n     #[inline]\n-    pub fn write(&'static self) -> StaticRWLockWriteGuard {\n+    pub fn write(&'static self) -> StaticRwLockWriteGuard {\n         unsafe { self.0.write() };\n-        StaticRWLockWriteGuard(&self.0)\n+        StaticRwLockWriteGuard(&self.0)\n     }\n }\n \n #[must_use]\n-pub struct StaticRWLockReadGuard(&'static imp::RWLock);\n+pub struct StaticRwLockReadGuard(&'static imp::RwLock);\n \n-impl Drop for StaticRWLockReadGuard {\n+impl Drop for StaticRwLockReadGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -48,9 +48,9 @@ impl Drop for StaticRWLockReadGuard {\n }\n \n #[must_use]\n-pub struct StaticRWLockWriteGuard(&'static imp::RWLock);\n+pub struct StaticRwLockWriteGuard(&'static imp::RwLock);\n \n-impl Drop for StaticRWLockWriteGuard {\n+impl Drop for StaticRwLockWriteGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -66,15 +66,15 @@ impl Drop for StaticRWLockWriteGuard {\n ///\n /// This rwlock does not implement poisoning.\n ///\n-/// This is either a wrapper around `Box<imp::RWLock>` or `imp::RWLock`,\n-/// depending on the platform. It is boxed on platforms where `imp::RWLock` may\n+/// This is either a wrapper around `Box<imp::RwLock>` or `imp::RwLock`,\n+/// depending on the platform. It is boxed on platforms where `imp::RwLock` may\n /// not be moved.\n-pub struct MovableRWLock(imp::MovableRWLock);\n+pub struct MovableRwLock(imp::MovableRwLock);\n \n-impl MovableRWLock {\n+impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     pub fn new() -> Self {\n-        Self(imp::MovableRWLock::from(imp::RWLock::new()))\n+        Self(imp::MovableRwLock::from(imp::RwLock::new()))\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n@@ -127,7 +127,7 @@ impl MovableRWLock {\n     }\n }\n \n-impl Drop for MovableRWLock {\n+impl Drop for MovableRwLock {\n     fn drop(&mut self) {\n         unsafe { self.0.destroy() };\n     }"}]}