{"sha": "c057621527161b9b51f95224b39b2a8084b8d9ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTc2MjE1MjcxNjFiOWI1MWY5NTIyNGIzOWIyYTgwODRiOGQ5YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T07:37:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T07:37:40Z"}, "message": "Auto merge of #6030 - rail-rain:fix_use_snippet_in_types, r=matthiaskrgr\n\nfix some use of `snippet` in `types.rs`\n\nchangelog: none", "tree": {"sha": "9736ba081cdcda814f28a7248d924dd6c7e51b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9736ba081cdcda814f28a7248d924dd6c7e51b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c057621527161b9b51f95224b39b2a8084b8d9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c057621527161b9b51f95224b39b2a8084b8d9ae", "html_url": "https://github.com/rust-lang/rust/commit/c057621527161b9b51f95224b39b2a8084b8d9ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c057621527161b9b51f95224b39b2a8084b8d9ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ecf398284fe74e6fdb741a470525e9dada3de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ecf398284fe74e6fdb741a470525e9dada3de1", "html_url": "https://github.com/rust-lang/rust/commit/f2ecf398284fe74e6fdb741a470525e9dada3de1"}, {"sha": "f3489d4a5ed944b3f62238c13cda6097dfbed0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3489d4a5ed944b3f62238c13cda6097dfbed0c8", "html_url": "https://github.com/rust-lang/rust/commit/f3489d4a5ed944b3f62238c13cda6097dfbed0c8"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "b6d405cca770dd2ca77a4b72477bac980f810cd1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c057621527161b9b51f95224b39b2a8084b8d9ae/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c057621527161b9b51f95224b39b2a8084b8d9ae/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c057621527161b9b51f95224b39b2a8084b8d9ae", "patch": "@@ -321,14 +321,15 @@ impl Types {\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n                                 REDUNDANT_ALLOCATION,\n                                 hir_ty.span,\n                                 \"usage of `Box<&T>`\",\n                                 \"try\",\n-                                snippet(cx, span, \"..\").to_string(),\n-                                Applicability::MachineApplicable,\n+                                snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n+                                applicability,\n                             );\n                             return; // don't recurse into the type\n                         }\n@@ -345,14 +346,15 @@ impl Types {\n                         }\n                     } else if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n                         if let Some(span) = match_type_parameter(cx, qpath, &paths::RC) {\n+                            let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n                                 REDUNDANT_ALLOCATION,\n                                 hir_ty.span,\n                                 \"usage of `Rc<Rc<T>>`\",\n                                 \"try\",\n-                                snippet(cx, span, \"..\").to_string(),\n-                                Applicability::MachineApplicable,\n+                                snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n+                                applicability,\n                             );\n                             return; // don't recurse into the type\n                         }\n@@ -368,26 +370,31 @@ impl Types {\n                                 GenericArg::Type(ty) => ty.span,\n                                 _ => return,\n                             };\n+                            let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n                                 REDUNDANT_ALLOCATION,\n                                 hir_ty.span,\n                                 \"usage of `Rc<Box<T>>`\",\n                                 \"try\",\n-                                format!(\"Rc<{}>\", snippet(cx, inner_span, \"..\")),\n-                                Applicability::MachineApplicable,\n+                                format!(\n+                                    \"Rc<{}>\",\n+                                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                                ),\n+                                applicability,\n                             );\n                             return; // don't recurse into the type\n                         }\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n                                 REDUNDANT_ALLOCATION,\n                                 hir_ty.span,\n                                 \"usage of `Rc<&T>`\",\n                                 \"try\",\n-                                snippet(cx, span, \"..\").to_string(),\n-                                Applicability::MachineApplicable,\n+                                snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n+                                applicability,\n                             );\n                             return; // don't recurse into the type\n                         }\n@@ -546,7 +553,6 @@ impl Types {\n                             // details.\n                             return;\n                         }\n-                        let mut applicability = Applicability::MachineApplicable;\n                         span_lint_and_sugg(\n                             cx,\n                             BORROWED_BOX,\n@@ -556,8 +562,12 @@ impl Types {\n                             format!(\n                                 \"&{}{}\",\n                                 ltopt,\n-                                &snippet_with_applicability(cx, inner.span, \"..\", &mut applicability)\n+                                &snippet(cx, inner.span, \"..\")\n                             ),\n+                            // To make this `MachineApplicable`, at least one needs to check if it isn't a trait item\n+                            // because the trait impls of it will break otherwise;\n+                            // and there may be other cases that result in invalid code.\n+                            // For example, type coercion doesn't work nicely.\n                             Applicability::Unspecified,\n                         );\n                         return; // don't recurse into the type"}]}