{"sha": "20f462d9fcb62ecd52f77e61dad8af4d7d2c1229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjQ2MmQ5ZmNiNjJlY2Q1MmY3N2U2MWRhZDhhZjRkN2QyYzEyMjk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-29T12:41:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T12:41:06Z"}, "message": "Rollup merge of #61261 - spastorino:is-union-return-ty, r=oli-obk\n\nis_union returns ty to avoid computing it twice\n\nr? @oli-obk", "tree": {"sha": "40a7b28ea420c3f4b367164f63cb1c7ab85b68c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40a7b28ea420c3f4b367164f63cb1c7ab85b68c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7n3iCRBK7hj4Ov3rIwAAdHIIAAkV9Uh5kRkDnI6BPeSpgpbM\n9UTVXleEU7oURkId/4Dm9M6PZjg0ZPJDsIS7frjG6vR0TBK3YQvuDDeF9sEv0l9s\np1YRDRcWBuuECII9EfBGS/FaXy45KVAu88Miq95p1THu+UdeNxOzttt8iGjFRMRz\naLBbYLGfDlNUdHBj2aEiw7h1wI5Kp9kXxASI7GkFVP+Ne+MYDtfahM2ckk1bX8HO\nc+7dk9jFuNQCbZLjuvpgEPGS+lU5CU98on4QcHF4vgLAu85Cbh95tR840W4ppNdH\nGaeh0FgmxZEcIpfQnGBvaJydVJus5k6TDPj3oR+w7ugHjmHXxbKwLmA5LPidAcM=\n=MhhP\n-----END PGP SIGNATURE-----\n", "payload": "tree 40a7b28ea420c3f4b367164f63cb1c7ab85b68c1\nparent e83776f3ab90556db3004ab01a217fb06cdc8065\nparent bb94fc00695be648f62751e8f393e11644d938ae\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1559133666 +0200\ncommitter GitHub <noreply@github.com> 1559133666 +0200\n\nRollup merge of #61261 - spastorino:is-union-return-ty, r=oli-obk\n\nis_union returns ty to avoid computing it twice\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229", "html_url": "https://github.com/rust-lang/rust/commit/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e83776f3ab90556db3004ab01a217fb06cdc8065", "url": "https://api.github.com/repos/rust-lang/rust/commits/e83776f3ab90556db3004ab01a217fb06cdc8065", "html_url": "https://github.com/rust-lang/rust/commit/e83776f3ab90556db3004ab01a217fb06cdc8065"}, {"sha": "bb94fc00695be648f62751e8f393e11644d938ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb94fc00695be648f62751e8f393e11644d938ae", "html_url": "https://github.com/rust-lang/rust/commit/bb94fc00695be648f62751e8f393e11644d938ae"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "e3a79b24cabe8c5cfebe606fa5fa107d60e89a38", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f462d9fcb62ecd52f77e61dad8af4d7d2c1229/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=20f462d9fcb62ecd52f77e61dad8af4d7d2c1229", "patch": "@@ -595,12 +595,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     ) -> (String, String, String, String) {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n-        let is_union = |place: &Place<'tcx>| -> bool {\n-            place.ty(self.mir, self.infcx.tcx).ty\n-                .ty_adt_def()\n-                .map(|adt| adt.is_union())\n-                .unwrap_or(false)\n+        let union_ty = |place: &Place<'tcx>| -> Option<Ty<'tcx>> {\n+            let ty = place.ty(self.mir, self.infcx.tcx).ty;\n+            ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };\n+        let describe_place = |place| self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n \n         // Start with an empty tuple, so we can use the functions on `Option` to reduce some\n         // code duplication (particularly around returning an empty description in the failure\n@@ -619,7 +618,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let mut current = first_borrowed_place;\n                 while let Place::Projection(box Projection { base, elem }) = current {\n                     match elem {\n-                        ProjectionElem::Field(field, _) if is_union(base) => {\n+                        ProjectionElem::Field(field, _) if union_ty(base).is_some() => {\n                             return Some((base, field));\n                         },\n                         _ => current = base,\n@@ -632,34 +631,32 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // borrowed place and look for a access to a different field of the same union.\n                 let mut current = second_borrowed_place;\n                 while let Place::Projection(box Projection { base, elem }) = current {\n-                    match elem {\n-                        ProjectionElem::Field(field, _) if {\n-                            is_union(base) && field != target_field && base == target_base\n-                        } => {\n-                            let desc_base = self.describe_place(base)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-                            let desc_first = self.describe_place(first_borrowed_place)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-                            let desc_second = self.describe_place(second_borrowed_place)\n-                                .unwrap_or_else(|| \"_\".to_owned());\n-\n-                            // Also compute the name of the union type, eg. `Foo` so we\n-                            // can add a helpful note with it.\n-                            let ty = base.ty(self.mir, self.infcx.tcx).ty;\n-\n-                            return Some((desc_base, desc_first, desc_second, ty.to_string()));\n-                        },\n-                        _ => current = base,\n+                    if let ProjectionElem::Field(field, _) = elem {\n+                        if let Some(union_ty) = union_ty(base) {\n+                            if field != target_field && base == target_base {\n+                                return Some((\n+                                    describe_place(base),\n+                                    describe_place(first_borrowed_place),\n+                                    describe_place(second_borrowed_place),\n+                                    union_ty.to_string(),\n+                                ));\n+                            }\n+                        }\n                     }\n+\n+                    current = base;\n                 }\n                 None\n             })\n             .unwrap_or_else(|| {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n-                let desc_place = self.describe_place(first_borrowed_place)\n-                    .unwrap_or_else(|| \"_\".to_owned());\n-                (desc_place, \"\".to_string(), \"\".to_string(), \"\".to_string())\n+                (\n+                    describe_place(first_borrowed_place),\n+                    \"\".to_string(),\n+                    \"\".to_string(),\n+                    \"\".to_string(),\n+                )\n             })\n     }\n "}]}