{"sha": "88d60941da317d8e9deee34d2ed5e8dbb54f928c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDYwOTQxZGEzMTdkOGU5ZGVlZTM0ZDJlZDVlOGRiYjU0ZjkyOGM=", "commit": {"author": {"name": "Axary", "email": "bastian_kauschke@hotmail.de", "date": "2018-11-20T13:43:16Z"}, "committer": {"name": "Axary", "email": "bastian_kauschke@hotmail.de", "date": "2018-11-20T13:43:16Z"}, "message": "improve error note", "tree": {"sha": "c4b3fa90ef189c090a0373f24e9b12973a574732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b3fa90ef189c090a0373f24e9b12973a574732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d60941da317d8e9deee34d2ed5e8dbb54f928c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d60941da317d8e9deee34d2ed5e8dbb54f928c", "html_url": "https://github.com/rust-lang/rust/commit/88d60941da317d8e9deee34d2ed5e8dbb54f928c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d60941da317d8e9deee34d2ed5e8dbb54f928c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bfdcc1ab1c94baa4865093b6c36fb15416e6a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfdcc1ab1c94baa4865093b6c36fb15416e6a4d", "html_url": "https://github.com/rust-lang/rust/commit/5bfdcc1ab1c94baa4865093b6c36fb15416e6a4d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e4a4c1f5a7ccb8b356d7fa561f1eb0d55636e5e6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -1828,7 +1828,7 @@ impl<'a> Parser<'a> {\n             let mut err = self.struct_span_err(self.prev_span,\n                 \"unexpected `self` argument in function\");\n             err.span_label(self.prev_span,\n-                \"`self` is only valid as the first argument of a trait function\");\n+                \"`self` is only valid as the first argument of an associated function\");\n             return Err(err);\n         }\n "}, {"sha": "741ba5f41ce16b9caf72e7b40a58bf226f86f64d", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -1,5 +1,5 @@\n fn a(&self) { }\n //~^ ERROR unexpected `self` argument in function\n-//~| NOTE `self` is only valid as the first argument of a trait function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n \n fn main() { }"}, {"sha": "6a878b619d813651d91fa60bb63c34c1481ce960", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` argument in function\n   --> $DIR/bare-fn-start.rs:1:7\n    |\n LL | fn a(&self) { }\n-   |       ^^^^ `self` is only valid as the first argument of a trait function\n+   |       ^^^^ `self` is only valid as the first argument of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "704fa996ca631a73fe1b3333ce1eae9406cbac02", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -1,5 +1,5 @@\n fn b(foo: u32, &mut self) { }\n //~^ ERROR unexpected `self` argument in function\n-//~| NOTE `self` is only valid as the first argument of a trait function\n+//~| NOTE `self` is only valid as the first argument of an associated function\n \n fn main() { }"}, {"sha": "b13f746a4ec584a5bc3e2b62bc0de418247a8bbb", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` argument in function\n   --> $DIR/bare-fn.rs:1:21\n    |\n LL | fn b(foo: u32, &mut self) { }\n-   |                     ^^^^ `self` is only valid as the first argument of a trait function\n+   |                     ^^^^ `self` is only valid as the first argument of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "31e867bc7641f4f263374b28e4814a5a39c6b4ef", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -3,7 +3,7 @@ struct Foo {}\n impl Foo {\n     fn c(foo: u32, self) {}\n     //~^ ERROR unexpected `self` argument in function\n-    //~| NOTE `self` is only valid as the first argument of a trait function\n+    //~| NOTE `self` is only valid as the first argument of an associated function\n \n     fn good(&mut self, foo: u32) {}\n }"}, {"sha": "b3c2cc5b5ebe0874e1f222f695c4b3f0733f5c89", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88d60941da317d8e9deee34d2ed5e8dbb54f928c/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=88d60941da317d8e9deee34d2ed5e8dbb54f928c", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` argument in function\n   --> $DIR/trait-fn.rs:4:20\n    |\n LL |     fn c(foo: u32, self) {}\n-   |                    ^^^^ `self` is only valid as the first argument of a trait function\n+   |                    ^^^^ `self` is only valid as the first argument of an associated function\n \n error: aborting due to previous error\n "}]}