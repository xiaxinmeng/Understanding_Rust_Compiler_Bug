{"sha": "1c9b77643c281a4f7055bc760ffba846744f2b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOWI3NzY0M2MyODFhNGY3MDU1YmM3NjBmZmJhODQ2NzQ0ZjJiNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-04T14:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-04T14:01:48Z"}, "message": "auto merge of #13915 : nick29581/rust/rslt, r=luqmana", "tree": {"sha": "e42ca0347c222b7b8bf768eb27efaa263f8f3330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42ca0347c222b7b8bf768eb27efaa263f8f3330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9b77643c281a4f7055bc760ffba846744f2b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b77643c281a4f7055bc760ffba846744f2b4b", "html_url": "https://github.com/rust-lang/rust/commit/1c9b77643c281a4f7055bc760ffba846744f2b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b77643c281a4f7055bc760ffba846744f2b4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1761d0ab04681ef65c6e589c7c663d917b5eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1761d0ab04681ef65c6e589c7c663d917b5eb7", "html_url": "https://github.com/rust-lang/rust/commit/9c1761d0ab04681ef65c6e589c7c663d917b5eb7"}, {"sha": "5854811082a1b3eaf8e168beeffa0d37e6b2407b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5854811082a1b3eaf8e168beeffa0d37e6b2407b", "html_url": "https://github.com/rust-lang/rust/commit/5854811082a1b3eaf8e168beeffa0d37e6b2407b"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "ba334d20f62d26419d91cf2188f04c5fd4d48720", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -340,30 +340,30 @@ fn trans_opt<'a>(bcx: &'a Block<'a>, o: &Opt) -> opt_result<'a> {\n             let lit_datum = unpack_datum!(bcx, expr::trans(bcx, lit_expr));\n             let lit_datum = lit_datum.assert_rvalue(bcx); // literals are rvalues\n             let lit_datum = unpack_datum!(bcx, lit_datum.to_appropriate_datum(bcx));\n-            return single_result(rslt(bcx, lit_datum.val));\n+            return single_result(Result::new(bcx, lit_datum.val));\n         }\n         lit(UnitLikeStructLit(pat_id)) => {\n             let struct_ty = ty::node_id_to_type(bcx.tcx(), pat_id);\n             let datum = datum::rvalue_scratch_datum(bcx, struct_ty, \"\");\n-            return single_result(rslt(bcx, datum.val));\n+            return single_result(Result::new(bcx, datum.val));\n         }\n         lit(ConstLit(lit_id)) => {\n             let (llval, _) = consts::get_const_val(bcx.ccx(), lit_id);\n-            return single_result(rslt(bcx, llval));\n+            return single_result(Result::new(bcx, llval));\n         }\n         var(disr_val, ref repr) => {\n             return adt::trans_case(bcx, &**repr, disr_val);\n         }\n         range(l1, l2) => {\n             let (l1, _) = consts::const_expr(ccx, l1, true);\n             let (l2, _) = consts::const_expr(ccx, l2, true);\n-            return range_result(rslt(bcx, l1), rslt(bcx, l2));\n+            return range_result(Result::new(bcx, l1), Result::new(bcx, l2));\n         }\n         vec_len(n, vec_len_eq, _) => {\n-            return single_result(rslt(bcx, C_int(ccx, n as int)));\n+            return single_result(Result::new(bcx, C_int(ccx, n as int)));\n         }\n         vec_len(n, vec_len_ge(_), _) => {\n-            return lower_bound(rslt(bcx, C_int(ccx, n as int)));\n+            return lower_bound(Result::new(bcx, C_int(ccx, n as int)));\n         }\n     }\n }\n@@ -1311,7 +1311,7 @@ fn compare_values<'a>(\n     let _icx = push_ctxt(\"compare_values\");\n     if ty::type_is_scalar(rhs_t) {\n         let rs = compare_scalar_types(cx, lhs, rhs, rhs_t, ast::BiEq);\n-        return rslt(rs.bcx, rs.val);\n+        return Result::new(rs.bcx, rs.val);\n     }\n \n     match ty::get(rhs_t).sty {\n@@ -1742,7 +1742,7 @@ fn compile_submatch_continue<'a, 'b>(\n                                   compare_scalar_types(\n                                   bcx, test_val, vend,\n                                   t, ast::BiLe);\n-                              rslt(bcx, And(bcx, llge, llle))\n+                              Result::new(bcx, And(bcx, llge, llle))\n                           }\n                       }\n                   };\n@@ -1757,14 +1757,14 @@ fn compile_submatch_continue<'a, 'b>(\n                               let value = compare_scalar_values(\n                                   bcx, test_val, val,\n                                   signed_int, ast::BiEq);\n-                              rslt(bcx, value)\n+                              Result::new(bcx, value)\n                           }\n                           lower_bound(\n                               Result {bcx, val: val}) => {\n                               let value = compare_scalar_values(\n                                   bcx, test_val, val,\n                                   signed_int, ast::BiGe);\n-                              rslt(bcx, value)\n+                              Result::new(bcx, value)\n                           }\n                           range_result(\n                               Result {val: vbegin, ..},\n@@ -1777,7 +1777,7 @@ fn compile_submatch_continue<'a, 'b>(\n                                   compare_scalar_values(\n                                   bcx, test_val, vend,\n                                   signed_int, ast::BiLe);\n-                              rslt(bcx, And(bcx, llge, llle))\n+                              Result::new(bcx, And(bcx, llge, llle))\n                           }\n                       }\n                   };"}, {"sha": "5046f636e2c6a6ab2ea68235c1129d0401f6eac8", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -579,19 +579,19 @@ pub fn trans_case<'a>(bcx: &'a Block<'a>, r: &Repr, discr: Disr)\n                   -> _match::opt_result<'a> {\n     match *r {\n         CEnum(ity, _, _) => {\n-            _match::single_result(rslt(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n-                                                       discr as u64, true)))\n+            _match::single_result(Result::new(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n+                                                              discr as u64, true)))\n         }\n         General(ity, _) => {\n-            _match::single_result(rslt(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n-                                                       discr as u64, true)))\n+            _match::single_result(Result::new(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n+                                                              discr as u64, true)))\n         }\n         Univariant(..) => {\n             bcx.ccx().sess().bug(\"no cases for univariants or structs\")\n         }\n         NullablePointer{ .. } => {\n             assert!(discr == 0 || discr == 1);\n-            _match::single_result(rslt(bcx, C_i1(bcx.ccx(), discr != 0)))\n+            _match::single_result(Result::new(bcx, C_i1(bcx.ccx(), discr != 0)))\n         }\n     }\n }"}, {"sha": "55f7b8cbf24471b1921e4e593c43c50569a9b766", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -363,7 +363,7 @@ pub fn malloc_raw_dyn<'a>(bcx: &'a Block<'a>,\n         None);\n \n     let llty_ptr = type_of::type_of(ccx, ptr_ty);\n-    rslt(r.bcx, PointerCast(r.bcx, r.val, llty_ptr))\n+    Result::new(r.bcx, PointerCast(r.bcx, r.val, llty_ptr))\n }\n \n pub fn malloc_raw_dyn_managed<'a>(\n@@ -393,7 +393,7 @@ pub fn malloc_raw_dyn_managed<'a>(\n             llalign\n         ],\n         None);\n-    rslt(r.bcx, PointerCast(r.bcx, r.val, llty))\n+    Result::new(r.bcx, PointerCast(r.bcx, r.val, llty))\n }\n \n // Type descriptor and type glue stuff\n@@ -543,7 +543,7 @@ pub fn compare_scalar_types<'a>(\n                             t: ty::t,\n                             op: ast::BinOp)\n                             -> Result<'a> {\n-    let f = |a| rslt(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n+    let f = |a| Result::new(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n \n     match ty::get(t).sty {\n         ty::ty_nil => f(nil_type),"}, {"sha": "37281113978e82ffb02ed15c6dffe2bd9b0012b0", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -746,7 +746,7 @@ pub fn trans_call_inner<'a>(\n         Unreachable(bcx);\n     }\n \n-    rslt(bcx, llresult)\n+    Result::new(bcx, llresult)\n }\n \n pub enum CallArgs<'a> {\n@@ -904,5 +904,5 @@ pub fn trans_arg_datum<'a>(\n     }\n \n     debug!(\"--- trans_arg_datum passing {}\", bcx.val_to_str(val));\n-    rslt(bcx, val)\n+    Result::new(bcx, val)\n }"}, {"sha": "bfbd638be520cef57d8c1ae45691918651cd5397", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -151,7 +151,7 @@ fn allocate_cbox<'a>(bcx: &'a Block<'a>,\n         ty::RegionTraitStore(..) => {\n             let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n             let llbox = alloc_ty(bcx, cbox_ty, \"__closure\");\n-            rslt(bcx, llbox)\n+            Result::new(bcx, llbox)\n         }\n     }\n }"}, {"sha": "93baeb71b4307810992e37ff51a5bc9dd74c0ea4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -466,10 +466,12 @@ pub struct Result<'a> {\n     pub val: ValueRef\n }\n \n-pub fn rslt<'a>(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> {\n-    Result {\n-        bcx: bcx,\n-        val: val,\n+impl<'a> Result<'a> {\n+    pub fn new(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> {\n+        Result {\n+            bcx: bcx,\n+            val: val,\n+        }\n     }\n }\n "}, {"sha": "6af483bce95191bd7aa641fa9a0e03a73406c3ca", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b77643c281a4f7055bc760ffba846744f2b4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=1c9b77643c281a4f7055bc760ffba846744f2b4b", "patch": "@@ -679,6 +679,6 @@ impl<'a> DatumBlock<'a, Expr> {\n \n     pub fn to_llbool(self) -> Result<'a> {\n         let DatumBlock { datum, bcx } = self;\n-        rslt(bcx, datum.to_llbool(bcx))\n+        Result::new(bcx, datum.to_llbool(bcx))\n     }\n }"}]}