{"sha": "14d7501ca4a1710c8e7a8b77280f863a84678d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDc1MDFjYTRhMTcxMGM4ZTdhOGI3NzI4MGY4NjNhODQ2NzhkMzQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-09T14:35:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-09T14:35:15Z"}, "message": "Merge pull request #128 from oli-obk/align_thyself\n\nfix size of dst in size_of_val intrinsic", "tree": {"sha": "b2c422d6a9326183de391c5d034579561e6f532f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c422d6a9326183de391c5d034579561e6f532f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d7501ca4a1710c8e7a8b77280f863a84678d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d7501ca4a1710c8e7a8b77280f863a84678d34", "html_url": "https://github.com/rust-lang/rust/commit/14d7501ca4a1710c8e7a8b77280f863a84678d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d7501ca4a1710c8e7a8b77280f863a84678d34/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5d9b6f8d55006c90fecb9927728b53d6974393", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5d9b6f8d55006c90fecb9927728b53d6974393", "html_url": "https://github.com/rust-lang/rust/commit/bc5d9b6f8d55006c90fecb9927728b53d6974393"}, {"sha": "d23c3ae516d342c0b736075d8720b8bac14d2227", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23c3ae516d342c0b736075d8720b8bac14d2227", "html_url": "https://github.com/rust-lang/rust/commit/d23c3ae516d342c0b736075d8720b8bac14d2227"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "a2798790feb5ab50935663448fa2390cd49fc688", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14d7501ca4a1710c8e7a8b77280f863a84678d34/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d7501ca4a1710c8e7a8b77280f863a84678d34/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=14d7501ca4a1710c8e7a8b77280f863a84678d34", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::layout::Layout;\n+use rustc::ty::layout::{Layout, Size, Align};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n \n@@ -426,17 +426,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     let (sized_size, sized_align) = match *layout {\n                         ty::layout::Layout::Univariant { ref variant, .. } => {\n-                            // The offset of the start of the last field gives the size of the\n-                            // sized part of the type.\n-                            let size = variant.offsets.last().map_or(0, |f| f.bytes());\n-                            (size, variant.align.abi())\n+                            (variant.offsets.last().map_or(0, |o| o.bytes()), variant.align)\n                         }\n                         _ => {\n                             bug!(\"size_and_align_of_dst: expcted Univariant for `{}`, found {:#?}\",\n                                  ty, layout);\n                         }\n                     };\n-                    debug!(\"DST {} statically sized prefix size: {} align: {}\",\n+                    debug!(\"DST {} statically sized prefix size: {} align: {:?}\",\n                            ty, sized_size, sized_align);\n \n                     // Recurse to get the size of the dynamically sized field (must be\n@@ -457,7 +454,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     // Choose max of two known alignments (combined value must\n                     // be aligned according to more restrictive of the two).\n-                    let align = ::std::cmp::max(sized_align, unsized_align);\n+                    let align = sized_align.max(Align::from_bytes(unsized_align, unsized_align).unwrap());\n \n                     // Issue #27023: must add any necessary padding to `size`\n                     // (to make it a multiple of `align`) before returning it.\n@@ -470,11 +467,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     //\n                     //   `(size + (align-1)) & -align`\n \n-                    if size & (align - 1) != 0 {\n-                        Ok((size + align, align))\n-                    } else {\n-                        Ok((size, align))\n-                    }\n+                    let size = Size::from_bytes(size).abi_align(align).bytes();\n+                    Ok((size, align.abi()))\n                 }\n                 ty::TyDynamic(..) => {\n                     let (_, vtable) = value.expect_ptr_vtable_pair(&self.memory)?;"}, {"sha": "216e06c0732c84ee22b9f4e77f4fbcd51d129c4c", "filename": "tests/run-pass/issue-35815.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14d7501ca4a1710c8e7a8b77280f863a84678d34/tests%2Frun-pass%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d7501ca4a1710c8e7a8b77280f863a84678d34/tests%2Frun-pass%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-35815.rs?ref=14d7501ca4a1710c8e7a8b77280f863a84678d34", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+use std::mem;\n+\n+struct Foo<T: ?Sized> {\n+    a: i64,\n+    b: bool,\n+    c: T,\n+}\n+\n+fn main() {\n+    let foo: &Foo<i32> = &Foo { a: 1, b: false, c: 2i32 };\n+    let foo_unsized: &Foo<Send> = foo;\n+    assert_eq!(mem::size_of_val(foo), mem::size_of_val(foo_unsized));\n+}"}]}