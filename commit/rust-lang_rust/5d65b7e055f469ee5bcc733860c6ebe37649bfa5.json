{"sha": "5d65b7e055f469ee5bcc733860c6ebe37649bfa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNjViN2UwNTVmNDY5ZWU1YmNjNzMzODYwYzZlYmUzNzY0OWJmYTU=", "commit": {"author": {"name": "CoffeeBlend", "email": "jonasboettiger@icloud.com", "date": "2021-01-11T22:32:03Z"}, "committer": {"name": "CoffeeBlend", "email": "jonasboettiger@icloud.com", "date": "2021-01-11T22:32:03Z"}, "message": "Simplify array_assume_init", "tree": {"sha": "95a0d713a60e5ddfd5a953f909bf789456f79018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a0d713a60e5ddfd5a953f909bf789456f79018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d65b7e055f469ee5bcc733860c6ebe37649bfa5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAl/80eMACgkQcE4BSbAZ\nSzwASxAAlaRn/4zxLYpW8SySmwfTHPsH43VM9UH0B/koNZvmyC0aNX50tv2R+0ej\nRmALnv66TqisHoYGrHW5/hKYzTqSJGkjehg6y0wdEWo9OFWh9FMEkxIDVBV8XpV9\nYyQPNcgH58hhJbwzgT9yqQINtEGz3dLuZjbdDbG+GyvZIl0rjVRJx6ZrW3/ar7Zg\ndg9sLyqRl1HIENDyDuR2OAUPjiQ9M0B3PTTOWSz4lnDIGe8wWfbhBzzf2Tvz0RwJ\n7UYX+I+A0CHoE6+7qZI437TuPE3S3pkn9OWWUa1WoFsTrLuzon2rb8+IfSaPk53T\nSTJdgUwsQx+iYOjmwWfz/uaZcIJz42HRwZ/+F6vFqoT+Q2+jlfvyAIDWaonZ0bQy\n3LrHi8mCY6H74MT3K0lp/RARBPTOI1dob0qMzVzW+enEm8gbBPOV0ULwC5/PEBcS\nm/JZzg1uwCI8U2thsAwgRZkssyOFBD7J7P5T9gXY3fdZe6wkvkxCqdrrNOb5AA+e\nVvq2ILuT9n6KESBSaP0vhtsJI8ZYCUiUc4+uHSDtxl1AhaTFImddY0aj4S9duWim\nhIkkrO4iW76AJ1lJ/QF5K8oynT+wA7vrWa4LBg7KqGZOgbP2MUZ3Reb/Vj43OTZy\nhXXHYdJ+uFd5mSlrG1p/ZxhjPPB5bRZBuzMXI7LLRdB6NKdECiI=\n=+6+F\n-----END PGP SIGNATURE-----", "payload": "tree 95a0d713a60e5ddfd5a953f909bf789456f79018\nparent dec8c033a3d3287cdb9e0b9f4888b21bbb86d60c\nauthor CoffeeBlend <jonasboettiger@icloud.com> 1610404323 +0100\ncommitter CoffeeBlend <jonasboettiger@icloud.com> 1610404323 +0100\n\nSimplify array_assume_init\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d65b7e055f469ee5bcc733860c6ebe37649bfa5", "html_url": "https://github.com/rust-lang/rust/commit/5d65b7e055f469ee5bcc733860c6ebe37649bfa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d65b7e055f469ee5bcc733860c6ebe37649bfa5/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec8c033a3d3287cdb9e0b9f4888b21bbb86d60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec8c033a3d3287cdb9e0b9f4888b21bbb86d60c", "html_url": "https://github.com/rust-lang/rust/commit/dec8c033a3d3287cdb9e0b9f4888b21bbb86d60c"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "b186aa61eb0eb7b082fef73bf959ed3f4d3ce380", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d65b7e055f469ee5bcc733860c6ebe37649bfa5/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d65b7e055f469ee5bcc733860c6ebe37649bfa5/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=5d65b7e055f469ee5bcc733860c6ebe37649bfa5", "patch": "@@ -833,21 +833,14 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n     #[inline(always)]\n     pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n-        // Convert using a union because mem::transmute does not support const_generics\n-        union ArrayInit<T, const N: usize> {\n-            maybe_uninit: ManuallyDrop<[MaybeUninit<T>; N]>,\n-            init: ManuallyDrop<[T; N]>,\n-        }\n-\n         // SAFETY:\n-        // * The caller guarantees that all elements of the array are initialized,\n-        // * `MaybeUninit<T>` and T are guaranteed to have the same layout,\n-        // Therefore the conversion is safe\n+        // * The caller guarantees that all elements of the array are initialized\n+        // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n+        // * MaybeUnint does not drop, so there are no double-frees\n+        // And thus the conversion is safe\n         unsafe {\n             intrinsics::assert_inhabited::<T>();\n-\n-            let array = ArrayInit { maybe_uninit: ManuallyDrop::new(array) };\n-            ManuallyDrop::into_inner(array.init)\n+            (&array as *const _ as *const T).read()\n         }\n     }\n "}]}