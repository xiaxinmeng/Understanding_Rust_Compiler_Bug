{"sha": "58a723209d170634ecc4f9be02e9bc3659541125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTcyMzIwOWQxNzA2MzRlY2M0ZjliZTAyZTliYzM2NTk1NDExMjU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-20T20:11:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-01T14:34:47Z"}, "message": "Switched to while let in DFS and deriving Ord on ConstraintCategory.", "tree": {"sha": "6b706ac27920fc65555501cdd448efe30fb76c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b706ac27920fc65555501cdd448efe30fb76c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a723209d170634ecc4f9be02e9bc3659541125", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAls45ocACgkQAXYLT59T\n8VR+lg/+PU6CYAvx5/JQyrqVIG0RAlekvCDmbzsW0J0cp3+bNrhMHXgmvNsVrdI0\ng/S8SzvIGOoLn+20WYBCtlgWRSDySnqxeD2BfsM5ahdwIZn6/7a0as1KYlKuDmR1\nHGLUoV3TxsuYueCTy/N7AtyqOnGgIUftbruD++raUY7SgACvchGZA+DZRByZvS+y\nAA+JEgf7DF+FSpDwo6VgsxdTPRqAsq3hWxp/RP1g3TVubAtG0FUzJNWEm44VbYN5\noCqEsSeg8Fyf4S0cSAbKzkia4ZGLkWgHLSRtvUl2DFOvKbtPEJIdAanVcNgCkGfR\nFTMYcdPpzirWFl16ldhKsalQ5sNyjezlZb5LqQ+32+sHjvVCxh5GWOYSQddWDOXk\n1QHk3D8frXYfkkDecBK9zQ6fF/veD8vfS7UVDzzXG9NXj9cSop+igWJmTecY8Joc\nOdH1m0vUAPMtWr8M6W3ERNB8Jul2oD74dk6Ljwvnqtrd96DCgbnXYw0U3BmZhAm6\nnocErclZBNgwRRR3P+P0LVw4dxt15IpTpesbZz6Z0N+Xu9ATuNSTkmaYCOMqDmTK\nlJU5SfuQ0rUIDnPidzMa86fVoCW7xYLQx9+Q/DLU3rvxufwNcEK0YBDNqQIEecCP\nOuMXKmwPkqaNUa3UxgKTKsMSwtzJ+A0x/OjP9+iJ09SbORMPL+c=\n=Zn23\n-----END PGP SIGNATURE-----", "payload": "tree 6b706ac27920fc65555501cdd448efe30fb76c2d\nparent fd0806618c259a31da2c7824610d3224e71dad34\nauthor David Wood <david@davidtw.co> 1529525487 +0100\ncommitter David Wood <david@davidtw.co> 1530455687 +0100\n\nSwitched to while let in DFS and deriving Ord on ConstraintCategory.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a723209d170634ecc4f9be02e9bc3659541125", "html_url": "https://github.com/rust-lang/rust/commit/58a723209d170634ecc4f9be02e9bc3659541125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a723209d170634ecc4f9be02e9bc3659541125/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0806618c259a31da2c7824610d3224e71dad34", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0806618c259a31da2c7824610d3224e71dad34", "html_url": "https://github.com/rust-lang/rust/commit/fd0806618c259a31da2c7824610d3224e71dad34"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "d8c26960a7219bc48e3d9ad4c591007de83db346", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58a723209d170634ecc4f9be02e9bc3659541125/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a723209d170634ecc4f9be02e9bc3659541125/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=58a723209d170634ecc4f9be02e9bc3659541125", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use borrow_check::nll::type_check::Locations;\n \n use std::fmt;\n-use std::cmp::Ordering;\n use std::ops::Deref;\n \n #[derive(Clone, Default)]\n@@ -112,37 +111,12 @@ impl fmt::Debug for OutlivesConstraint {\n \n /// Constraints that are considered interesting can be categorized to\n /// determine why they are interesting.\n-#[derive(Debug, Eq, PartialEq)]\n+#[derive(Debug, Eq, PartialEq, Ord, PartialOrd)]\n crate enum ConstraintCategory {\n     Assignment,\n     CallArgument,\n     Cast,\n     Other,\n }\n \n-impl Ord for ConstraintCategory {\n-    fn cmp(&self, other: &Self) -> Ordering {\n-        if self == other {\n-            return Ordering::Equal;\n-        }\n-\n-        match (self, other) {\n-            (ConstraintCategory::Assignment, _) => Ordering::Greater,\n-            (_, ConstraintCategory::Assignment) => Ordering::Less,\n-            (ConstraintCategory::CallArgument, _) => Ordering::Greater,\n-            (_, ConstraintCategory::CallArgument) => Ordering::Less,\n-            (ConstraintCategory::Cast, _) => Ordering::Greater,\n-            (_, ConstraintCategory::Cast) => Ordering::Less,\n-            (ConstraintCategory::Other, _) => Ordering::Greater,\n-        }\n-    }\n-}\n-\n-impl PartialOrd for ConstraintCategory {\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        Some(self.cmp(other))\n-    }\n-}\n-\n-\n newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });"}, {"sha": "d7e818c50437d0c8286701f3f813f56d8ad688d0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58a723209d170634ecc4f9be02e9bc3659541125/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a723209d170634ecc4f9be02e9bc3659541125/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=58a723209d170634ecc4f9be02e9bc3659541125", "patch": "@@ -978,20 +978,17 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         // Mapping of regions to the previous region and constraint index that led to it.\n         let mut previous = FxHashMap();\n-        // Current region in traversal.\n-        let mut current = r0;\n         // Regions yet to be visited.\n-        let mut next = vec! [ current ];\n+        let mut next = vec! [ r0 ];\n         // Regions that have been visited.\n         let mut visited = FxHashSet();\n         // Ends of paths.\n         let mut end_regions: Vec<RegionVid> = Vec::new();\n \n         // When we've still got points to visit...\n-        while !next.is_empty() {\n+        while let Some(current) = next.pop() {\n             // ...take the next point...\n-            debug!(\"find_constraint_paths_from_region: next={:?}\", next);\n-            current = next.pop().unwrap(); // Can unwrap here as we know the vector is not empty.\n+            debug!(\"find_constraint_paths_from_region: current={:?} next={:?}\", current, next);\n \n             // ...find the edges containing it...\n             let mut upcoming = Vec::new();"}]}