{"sha": "72690d24f02543f5a3c77a8506da48bb32fdc466", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjkwZDI0ZjAyNTQzZjVhM2M3N2E4NTA2ZGE0OGJiMzJmZGM0NjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-23T16:39:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: always hide defaulted generic args, even in verbose mode.", "tree": {"sha": "cc836f798e58230219439f294f57c18baa7b92fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc836f798e58230219439f294f57c18baa7b92fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72690d24f02543f5a3c77a8506da48bb32fdc466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72690d24f02543f5a3c77a8506da48bb32fdc466", "html_url": "https://github.com/rust-lang/rust/commit/72690d24f02543f5a3c77a8506da48bb32fdc466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72690d24f02543f5a3c77a8506da48bb32fdc466/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "381fa7aa18d0440d122c476bdbd074281a93b6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/381fa7aa18d0440d122c476bdbd074281a93b6a9", "html_url": "https://github.com/rust-lang/rust/commit/381fa7aa18d0440d122c476bdbd074281a93b6a9"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "af6f8ba72f078a872e85bc8b13b2842a8284f059", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=72690d24f02543f5a3c77a8506da48bb32fdc466", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::map::DefPathData;\n use crate::hir::def_id::{CrateNum, DefId};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n-use crate::ty::subst::{Subst, SubstsRef};\n+use crate::ty::subst::{Kind, Subst, SubstsRef};\n \n use rustc_data_structures::fx::FxHashSet;\n \n@@ -129,7 +129,7 @@ pub trait Printer: Sized {\n     ) -> Result<Self::Path, Self::Error>;\n }\n \n-impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {\n+impl<P: Printer> PrintCx<'_, 'gcx, 'tcx, P> {\n     pub fn default_print_def_path(\n         self,\n         def_id: DefId,\n@@ -197,8 +197,7 @@ impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {\n                 };\n \n                 if let (Some(generics), Some(substs)) = (generics, substs) {\n-                    let has_own_self = generics.has_self && generics.parent_count == 0;\n-                    let params = &generics.params[has_own_self as usize..];\n+                    let params = self.generic_params_to_print(generics, substs);\n                     self.path_generic_args(print_path, params, substs, projections)\n                 } else {\n                     print_path(self)\n@@ -207,6 +206,30 @@ impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {\n         }\n     }\n \n+    pub fn generic_params_to_print(\n+        &self,\n+        generics: &'a ty::Generics,\n+        substs: SubstsRef<'tcx>,\n+    ) -> &'a [ty::GenericParamDef] {\n+        // Don't print args for `Self` parameters (of traits).\n+        let has_own_self = generics.has_self && generics.parent_count == 0;\n+        let params = &generics.params[has_own_self as usize..];\n+\n+        // Don't print args that are the defaults of their respective parameters.\n+        let num_supplied_defaults = params.iter().rev().take_while(|param| {\n+            match param.kind {\n+                ty::GenericParamDefKind::Lifetime => false,\n+                ty::GenericParamDefKind::Type { has_default, .. } => {\n+                    has_default && substs[param.index as usize] == Kind::from(\n+                        self.tcx.type_of(param.def_id).subst(self.tcx, substs)\n+                    )\n+                }\n+                ty::GenericParamDefKind::Const => false, // FIXME(const_generics:defaults)\n+            }\n+        }).count();\n+        &params[..params.len() - num_supplied_defaults]\n+    }\n+\n     fn default_print_impl_path(\n         self,\n         impl_def_id: DefId,"}, {"sha": "7358dd1932f47cf8bb7d31c66ddf859e3f65141f", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=72690d24f02543f5a3c77a8506da48bb32fdc466", "patch": "@@ -502,25 +502,6 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 _ => false,\n             }\n         });\n-\n-        // Don't print args that are the defaults of their respective parameters.\n-        let num_supplied_defaults = if self.tcx.sess.verbose() {\n-            0\n-        } else {\n-            params.iter().rev().take_while(|param| {\n-                match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => false,\n-                    ty::GenericParamDefKind::Type { has_default, .. } => {\n-                        has_default && substs[param.index as usize] == Kind::from(\n-                            self.tcx.type_of(param.def_id).subst(self.tcx, substs)\n-                        )\n-                    }\n-                    ty::GenericParamDefKind::Const => false, // FIXME(const_generics:defaults)\n-                }\n-            }).count()\n-        };\n-\n-        let params = &params[..params.len() - num_supplied_defaults];\n         let mut args = params.iter().map(|param| {\n             substs[param.index as usize]\n         }).filter(|arg| {\n@@ -657,8 +638,7 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n             })?;\n             if visible_path_success {\n                 return if let (Some(generics), Some(substs)) = (generics, substs) {\n-                    let has_own_self = generics.has_self && generics.parent_count == 0;\n-                    let params = &generics.params[has_own_self as usize..];\n+                    let params = self.generic_params_to_print(generics, substs);\n                     self.path_generic_args(|cx| cx.ok(), params, substs, projections)\n                 } else {\n                     self.ok()"}, {"sha": "129ebd43594cedfaae8444ed68fe71595621e66b", "filename": "src/test/ui/substs-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Ftest%2Fui%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Ftest%2Fui%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.rs?ref=72690d24f02543f5a3c77a8506da48bb32fdc466", "patch": "@@ -25,7 +25,7 @@ fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n     //[verbose]~| expected type `()`\n-    //[verbose]~| found type `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+    //[verbose]~| found type `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n     //[normal]~| expected type `()`\n     //[normal]~| found type `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`"}, {"sha": "86936475f8c145d2a32bde3238c4424ddaf6483a", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72690d24f02543f5a3c77a8506da48bb32fdc466/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=72690d24f02543f5a3c77a8506da48bb32fdc466", "patch": "@@ -14,7 +14,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n    |\n    = note: expected type `()`\n-              found type `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+              found type `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17"}]}