{"sha": "56b39fba563a7ae5ca39eae80b9e26e9890522cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YjM5ZmJhNTYzYTdhZTVjYTM5ZWFlODBiOWUyNmU5ODkwNTIyY2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T09:01:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T18:43:09Z"}, "message": "Add 'span_to_snippet' shortcut.", "tree": {"sha": "48f7f41c5589e7a2587a85e7b0cd11035da6f250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f7f41c5589e7a2587a85e7b0cd11035da6f250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b39fba563a7ae5ca39eae80b9e26e9890522cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b39fba563a7ae5ca39eae80b9e26e9890522cf", "html_url": "https://github.com/rust-lang/rust/commit/56b39fba563a7ae5ca39eae80b9e26e9890522cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b39fba563a7ae5ca39eae80b9e26e9890522cf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b118607ec218e518e43fb9d7aaa859ab7a4f71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b118607ec218e518e43fb9d7aaa859ab7a4f71e", "html_url": "https://github.com/rust-lang/rust/commit/1b118607ec218e518e43fb9d7aaa859ab7a4f71e"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "df572b6506fb25786236352610ddd6ea7e8edf7d", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56b39fba563a7ae5ca39eae80b9e26e9890522cf/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b39fba563a7ae5ca39eae80b9e26e9890522cf/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=56b39fba563a7ae5ca39eae80b9e26e9890522cf", "patch": "@@ -14,7 +14,7 @@ use crate::ThinVec;\n use crate::util::parser::AssocOp;\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_data_structures::fx::FxHashSet;\n-use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n use std::mem;\n \n@@ -199,6 +199,10 @@ impl<'a> Parser<'a> {\n         &self.sess.span_diagnostic\n     }\n \n+    crate fn span_to_snippet(&self, span: Span) -> Result<String, SpanSnippetError> {\n+        self.sess.source_map().span_to_snippet(span)\n+    }\n+\n     crate fn expected_ident_found(&self) -> DiagnosticBuilder<'a> {\n         let mut err = self.struct_span_err(\n             self.token.span,\n@@ -719,8 +723,6 @@ impl<'a> Parser<'a> {\n         path.span = ty_span.to(self.prev_span);\n \n         let ty_str = self\n-            .sess\n-            .source_map()\n             .span_to_snippet(ty_span)\n             .unwrap_or_else(|_| pprust::ty_to_string(&ty));\n         self.diagnostic()\n@@ -891,7 +893,7 @@ impl<'a> Parser<'a> {\n             err.span_label(await_sp, \"while parsing this incorrect await expression\");\n             err\n         })?;\n-        let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+        let expr_str = self.span_to_snippet(expr.span)\n             .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n         let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n         let sp = lo.to(expr.span);\n@@ -940,8 +942,6 @@ impl<'a> Parser<'a> {\n                 self.bump();\n \n                 let pat_str = self\n-                    .sess\n-                    .source_map()\n                     // Remove the `(` from the span of the pattern:\n                     .span_to_snippet(pat.span.trim_start(begin_par_sp).unwrap())\n                     .unwrap_or_else(|_| pprust::pat_to_string(&pat));"}, {"sha": "4c7d41039e73bc15d6ef3c602aee81077b1bcf0a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56b39fba563a7ae5ca39eae80b9e26e9890522cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b39fba563a7ae5ca39eae80b9e26e9890522cf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=56b39fba563a7ae5ca39eae80b9e26e9890522cf", "patch": "@@ -3071,10 +3071,7 @@ impl<'a> Parser<'a> {\n                             id: ast::DUMMY_NODE_ID\n                         }));\n \n-                        let expr_str = self\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(expr.span)\n+                        let expr_str = self.span_to_snippet(expr.span)\n                             .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n \n                         self.struct_span_err(self.token.span, &msg)\n@@ -3796,7 +3793,7 @@ impl<'a> Parser<'a> {\n             let seq_span = pat.span.to(self.prev_span);\n             let mut err = self.struct_span_err(comma_span,\n                                                \"unexpected `,` in pattern\");\n-            if let Ok(seq_snippet) = self.sess.source_map().span_to_snippet(seq_span) {\n+            if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n                 err.span_suggestion(\n                     seq_span,\n                     \"try adding parentheses to match on a tuple..\",\n@@ -4145,7 +4142,7 @@ impl<'a> Parser<'a> {\n                     let parser_snapshot_after_type = self.clone();\n                     mem::replace(self, parser_snapshot_before_type);\n \n-                    let snippet = self.sess.source_map().span_to_snippet(pat.span).unwrap();\n+                    let snippet = self.span_to_snippet(pat.span).unwrap();\n                     err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snippet));\n                     (Some((parser_snapshot_after_type, colon_sp, err)), None)\n                 }\n@@ -4565,7 +4562,7 @@ impl<'a> Parser<'a> {\n                     if self.eat(&token::Semi) {\n                         stmt_span = stmt_span.with_hi(self.prev_span.hi());\n                     }\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(stmt_span) {\n+                    if let Ok(snippet) = self.span_to_snippet(stmt_span) {\n                         e.span_suggestion(\n                             stmt_span,\n                             \"try placing this code inside a block\",\n@@ -4738,7 +4735,7 @@ impl<'a> Parser<'a> {\n                             lo.to(self.prev_span),\n                             \"parenthesized lifetime bounds are not supported\"\n                         );\n-                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(inner_span) {\n+                        if let Ok(snippet) = self.span_to_snippet(inner_span) {\n                             err.span_suggestion_short(\n                                 lo.to(self.prev_span),\n                                 \"remove the parentheses\",\n@@ -4796,7 +4793,7 @@ impl<'a> Parser<'a> {\n                 let mut new_bound_list = String::new();\n                 if !bounds.is_empty() {\n                     let mut snippets = bounds.iter().map(|bound| bound.span())\n-                        .map(|span| self.sess.source_map().span_to_snippet(span));\n+                        .map(|span| self.span_to_snippet(span));\n                     while let Some(Ok(snippet)) = snippets.next() {\n                         new_bound_list.push_str(\" + \");\n                         new_bound_list.push_str(&snippet);\n@@ -7415,7 +7412,7 @@ impl<'a> Parser<'a> {\n                         sp, &suggestion, format!(\" {} \", kw), Applicability::MachineApplicable\n                     );\n                 } else {\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(ident_sp) {\n+                    if let Ok(snippet) = self.span_to_snippet(ident_sp) {\n                         err.span_suggestion(\n                             full_sp,\n                             \"if you meant to call a macro, try\","}]}