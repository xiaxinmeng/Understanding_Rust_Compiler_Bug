{"sha": "7369360c15d8bd317e5e6f9235fe327fb4471612", "node_id": "C_kwDOAAsO6NoAKDczNjkzNjBjMTVkOGJkMzE3ZTVlNmY5MjM1ZmUzMjdmYjQ0NzE2MTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T17:39:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T17:39:36Z"}, "message": "Don't ascribe types in pattern completion for patterns twice", "tree": {"sha": "47d97f5cab2108f43f7c7097ac02c73aac1e5bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d97f5cab2108f43f7c7097ac02c73aac1e5bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7369360c15d8bd317e5e6f9235fe327fb4471612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7369360c15d8bd317e5e6f9235fe327fb4471612", "html_url": "https://github.com/rust-lang/rust/commit/7369360c15d8bd317e5e6f9235fe327fb4471612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7369360c15d8bd317e5e6f9235fe327fb4471612/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726b4dd8bdd063e1c623355244d3be907fc31e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/726b4dd8bdd063e1c623355244d3be907fc31e90", "html_url": "https://github.com/rust-lang/rust/commit/726b4dd8bdd063e1c623355244d3be907fc31e90"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "8fae06f7e2410d2713d509bcfd9f1b9260b8514e", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7369360c15d8bd317e5e6f9235fe327fb4471612", "patch": "@@ -58,6 +58,7 @@ pub(crate) struct PathCompletionContext {\n pub(super) struct PatternContext {\n     pub(super) refutability: PatternRefutability,\n     pub(super) is_param: Option<ParamKind>,\n+    pub(super) has_type_ascription: bool,\n }\n \n #[derive(Debug)]\n@@ -708,15 +709,15 @@ impl<'a> CompletionContext<'a> {\n             return None;\n         }\n         let mut is_param = None;\n-        let refutability = bind_pat\n+        let (refutability, has_type_ascription) = bind_pat\n             .syntax()\n             .ancestors()\n             .skip_while(|it| ast::Pat::can_cast(it.kind()))\n             .next()\n-            .map_or(PatternRefutability::Irrefutable, |node| {\n-                match_ast! {\n+            .map_or((PatternRefutability::Irrefutable, false), |node| {\n+                let refutability = match_ast! {\n                     match node {\n-                        ast::LetStmt(__) => PatternRefutability::Irrefutable,\n+                        ast::LetStmt(let_) => return (PatternRefutability::Irrefutable, let_.ty().is_some()),\n                         ast::Param(param) => {\n                             let is_closure_param = param\n                                 .syntax()\n@@ -729,16 +730,17 @@ impl<'a> CompletionContext<'a> {\n                             } else {\n                                 ParamKind::Function\n                             });\n-                            PatternRefutability::Irrefutable\n+                            return (PatternRefutability::Irrefutable, param.ty().is_some())\n                         },\n                         ast::MatchArm(__) => PatternRefutability::Refutable,\n                         ast::Condition(__) => PatternRefutability::Refutable,\n                         ast::ForExpr(__) => PatternRefutability::Irrefutable,\n                         _ => PatternRefutability::Irrefutable,\n                     }\n-                }\n+                };\n+                (refutability, false)\n             });\n-        Some(PatternContext { refutability, is_param })\n+        Some(PatternContext { refutability, is_param, has_type_ascription })\n     }\n \n     fn classify_name_ref("}, {"sha": "2b4c919493dedca7ffaa8eb41c5c3e4b9def9a58", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=7369360c15d8bd317e5e6f9235fe327fb4471612", "patch": "@@ -85,7 +85,11 @@ fn render_pat(\n \n     if matches!(\n         ctx.completion.pattern_ctx,\n-        Some(PatternContext { is_param: Some(ParamKind::Function), .. })\n+        Some(PatternContext {\n+            is_param: Some(ParamKind::Function),\n+            has_type_ascription: false,\n+            ..\n+        })\n     ) {\n         pat.push(':');\n         pat.push(' ');"}, {"sha": "6dd1b6699881e6016d822ac9a3473af2b75fafa2", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7369360c15d8bd317e5e6f9235fe327fb4471612/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=7369360c15d8bd317e5e6f9235fe327fb4471612", "patch": "@@ -163,6 +163,21 @@ fn foo(a$0) {\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n+    check(\n+        r#\"\n+fn foo(a$0: Tuple) {\n+}\n+\"#,\n+        expect![[r##\"\n+            kw mut\n+            bn Record    Record { field$1 }$0\n+            st Record\n+            bn Tuple     Tuple($1)$0\n+            st Tuple\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n }\n \n #[test]"}]}