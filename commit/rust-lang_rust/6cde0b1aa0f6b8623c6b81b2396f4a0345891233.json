{"sha": "6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZGUwYjFhYTBmNmI4NjIzYzZiODFiMjM5NmY0YTAzNDU4OTEyMzM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-08T18:14:18Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-08T18:14:18Z"}, "message": "Add support for extern crate\n\nThis adds syntax highlighting, hover and goto def\nfunctionality for extern crate", "tree": {"sha": "9d558ee8eeace0aadf241c190248d008e362d17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d558ee8eeace0aadf241c190248d008e362d17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "html_url": "https://github.com/rust-lang/rust/commit/6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69f19a6a5899bdfb6fc498371650bf54263deff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69f19a6a5899bdfb6fc498371650bf54263deff", "html_url": "https://github.com/rust-lang/rust/commit/a69f19a6a5899bdfb6fc498371650bf54263deff"}], "stats": {"total": 284, "additions": 225, "deletions": 59}, "files": [{"sha": "537322a72c3426e7a55843a8ced2851c8a04e791", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let name_ref = ast::NameRef::cast(ident.parent())?;\n     let def = match classify_name_ref(&ctx.sema, &name_ref)? {\n         NameRefClass::Definition(def) => def,\n-        NameRefClass::FieldShorthand { .. } => return None,\n+        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n     };\n     let fun = match def {\n         Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,"}, {"sha": "e392130ab6d57fbf07a4003efb94266d2be47c9f", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{diagnostics::AstDiagnostic, hygiene::Hygiene, ExpansionInfo};\n+use hir_expand::{diagnostics::AstDiagnostic, hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -24,8 +24,8 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, resolve_hir_path_qualifier, SourceAnalyzer},\n-    AssocItem, Callable, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module,\n-    ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, Local, MacroDef,\n+    Module, ModuleDef, Name, Origin, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n use resolver::TypeNs;\n \n@@ -228,6 +228,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n+    pub fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n+        self.imp.resolve_extern_crate(extern_crate)\n+    }\n+\n     pub fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantDef> {\n         self.imp.resolve_variant(record_lit).map(VariantDef::from)\n     }\n@@ -443,6 +447,17 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n+        let krate = self.scope(extern_crate.syntax()).krate()?;\n+        krate.dependencies(self.db).into_iter().find_map(|dep| {\n+            if dep.name == extern_crate.name_ref()?.as_name() {\n+                Some(dep.krate)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n     fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {\n         self.analyze(record_lit.syntax()).resolve_variant(self.db, record_lit)\n     }\n@@ -612,6 +627,10 @@ impl<'a> SemanticsScope<'a> {\n         Some(Module { id: self.resolver.module()? })\n     }\n \n+    pub fn krate(&self) -> Option<Crate> {\n+        Some(Crate { id: self.resolver.krate()? })\n+    }\n+\n     /// Note: `FxHashSet<TraitId>` should be treated as an opaque type, passed into `Type\n     // FIXME: rename to visible_traits to not repeat scope?\n     pub fn traits_in_scope(&self) -> FxHashSet<TraitId> {"}, {"sha": "b5ff9fa2deb605261ccbb4a8d7f1a3fd04b64410", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -47,6 +47,12 @@ impl ShortLabel for ast::Module {\n     }\n }\n \n+impl ShortLabel for ast::SourceFile {\n+    fn short_label(&self) -> Option<String> {\n+        None\n+    }\n+}\n+\n impl ShortLabel for ast::TypeAlias {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"type \")"}, {"sha": "b44b6fe22f97602456e4393130ea9e59b89a97b9", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ra_ide_db::{\n-    defs::{classify_name, classify_name_ref, NameClass},\n+    defs::{classify_name, classify_name_ref},\n     symbol_index, RootDatabase,\n };\n use ra_syntax::{\n@@ -40,10 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = match classify_name(&sema, &name)? {\n-                    NameClass::Definition(def) | NameClass::ConstReference(def) => def,\n-                    NameClass::FieldShorthand { local: _, field } => field,\n-                };\n+                let def = classify_name(&sema, &name)?.definition(sema.db)?;\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n@@ -85,9 +82,7 @@ pub(crate) fn reference_definition(\n     name_ref: &ast::NameRef,\n ) -> ReferenceResult {\n     let name_kind = classify_name_ref(sema, name_ref);\n-    if let Some(def) = name_kind {\n-        let def = def.definition();\n-\n+    if let Some(def) = name_kind.and_then(|def| def.definition(sema.db)) {\n         return match def.try_to_nav(sema.db) {\n             Some(nav) => ReferenceResult::Exact(nav),\n             None => ReferenceResult::Approximate(Vec::new()),\n@@ -133,6 +128,32 @@ mod tests {\n         assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n     }\n \n+    #[test]\n+    fn goto_def_for_extern_crate() {\n+        check(\n+            r#\"\n+            //- /main.rs\n+            extern crate std<|>;\n+            //- /std/lib.rs\n+            // empty\n+            //^ file\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_def_for_renamed_extern_crate() {\n+        check(\n+            r#\"\n+            //- /main.rs\n+            extern crate std as abc<|>;\n+            //- /std/lib.rs\n+            // empty\n+            //^ file\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn goto_def_in_items() {\n         check("}, {"sha": "a632ea6a20852781d0c623081d94a88b1b7f49f1", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -85,8 +85,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition()),\n-            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition()),\n+            ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).and_then(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).and_then(|d| d.definition(sema.db)),\n             _ => None,\n         }\n     };\n@@ -304,7 +304,10 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n                     let docs = Documentation::from_ast(&it).map(Into::into);\n                     hover_markup(docs, it.short_label(), mod_path)\n                 }\n-                _ => None,\n+                ModuleSource::SourceFile(it) => {\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n+                    hover_markup(docs, it.short_label(), mod_path)\n+                }\n             },\n             ModuleDef::Function(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n@@ -1106,6 +1109,46 @@ fn bar() { fo<|>o(); }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_extern_crate() {\n+        check(\n+            r#\"\n+//- /main.rs\n+extern crate st<|>d;\n+//- /std/lib.rs\n+//! Standard library for this test\n+//!\n+//! Printed?\n+//! abc123\n+            \"#,\n+            expect![[r#\"\n+            *std*\n+            Standard library for this test\n+\n+            Printed?\n+            abc123\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- /main.rs\n+extern crate std as ab<|>c;\n+//- /std/lib.rs\n+//! Standard library for this test\n+//!\n+//! Printed?\n+//! abc123\n+            \"#,\n+            expect![[r#\"\n+            *abc*\n+            Standard library for this test\n+\n+            Printed?\n+            abc123\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_mod_with_same_name_as_function() {\n         check("}, {"sha": "9dd228b9c382702b98abd85ad771f346747c8152", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -130,13 +130,13 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?.definition();\n+        let def = classify_name(sema, &name)?.definition(sema.db)?;\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }\n     let name_ref =\n         sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(sema, &name_ref)?.definition();\n+    let def = classify_name_ref(sema, &name_ref)?.definition(sema.db)?;\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, def))\n }"}, {"sha": "ec442bcd837188b8295e6f4953b80f3c538499d8", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -483,6 +483,7 @@ fn highlight_element(\n             };\n \n             match name_kind {\n+                Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n                     highlight_name(db, def) | HighlightModifier::Definition\n                 }\n@@ -500,6 +501,7 @@ fn highlight_element(\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n             match classify_name_ref(sema, &name_ref) {\n                 Some(name_kind) => match name_kind {\n+                    NameRefClass::ExternCrate(_) => HighlightTag::Module.into(),\n                     NameRefClass::Definition(def) => {\n                         if let Definition::Local(local) = &def {\n                             if let Some(name) = local.name(db) {"}, {"sha": "b8d60bdc632795292d5bf4e69bbdad177d23f932", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -380,6 +380,23 @@ macro_rules! noop {\n     );\n }\n \n+#[test]\n+fn test_extern_crate() {\n+    check_highlighting(\n+        r#\"\n+        //- /main.rs\n+        extern crate std;\n+        extern crate alloc as abc;\n+        //- /std/lib.rs\n+        pub struct S;\n+        //- /alloc/lib.rs\n+        pub struct A\n+        \"#,\n+        expect_file![\"crates/ra_ide/test_data/highlight_extern_crate.html\"],\n+        false,\n+    );\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML."}, {"sha": "800d894c7693d2a4649dfe9c691219c6833e4d01", "filename": "crates/ra_ide/test_data/highlight_extern_crate.html", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_extern_crate.html?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -0,0 +1,40 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"punctuation\">;</span>\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "e2a4f2983cd99af63ac905dc23e9ba64da36f42b", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 59, "deletions": 41, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, TypeParam, Visibility,\n+    db::HirDatabase, Crate, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef,\n+    Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n@@ -80,6 +80,7 @@ impl Definition {\n \n #[derive(Debug)]\n pub enum NameClass {\n+    ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n     ConstReference(Definition),\n@@ -90,19 +91,21 @@ pub enum NameClass {\n }\n \n impl NameClass {\n-    pub fn into_definition(self) -> Option<Definition> {\n-        match self {\n-            NameClass::Definition(it) => Some(it),\n-            NameClass::ConstReference(_) => None,\n-            NameClass::FieldShorthand { local, field: _ } => Some(Definition::Local(local)),\n-        }\n+    pub fn into_definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+        Some(match self {\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db)?.into()),\n+            NameClass::Definition(it) => it,\n+            NameClass::ConstReference(_) => return None,\n+            NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n+        })\n     }\n \n-    pub fn definition(self) -> Definition {\n-        match self {\n+    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+        Some(match self {\n+            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db)?.into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::FieldShorthand { local: _, field } => field,\n-        }\n+        })\n     }\n }\n \n@@ -120,32 +123,37 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n     match_ast! {\n         match parent {\n             ast::Rename(it) => {\n-                let use_tree = it.syntax().parent().and_then(ast::UseTree::cast)?;\n-                let path = use_tree.path()?;\n-                let path_segment = path.segment()?;\n-                let name_ref_class = path_segment\n-                    .name_ref()\n-                    // The rename might be from a `self` token, so fallback to the name higher\n-                    // in the use tree.\n-                    .or_else(||{\n-                        if path_segment.self_token().is_none() {\n-                            return None;\n-                        }\n+                if let Some(use_tree) = it.syntax().parent().and_then(ast::UseTree::cast) {\n+                    let path = use_tree.path()?;\n+                    let path_segment = path.segment()?;\n+                    let name_ref_class = path_segment\n+                        .name_ref()\n+                        // The rename might be from a `self` token, so fallback to the name higher\n+                        // in the use tree.\n+                        .or_else(||{\n+                            if path_segment.self_token().is_none() {\n+                                return None;\n+                            }\n \n-                        let use_tree = use_tree\n-                            .syntax()\n-                            .parent()\n-                            .as_ref()\n-                            // Skip over UseTreeList\n-                            .and_then(SyntaxNode::parent)\n-                            .and_then(ast::UseTree::cast)?;\n-                        let path = use_tree.path()?;\n-                        let path_segment = path.segment()?;\n-                        path_segment.name_ref()\n-                    })\n-                    .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n+                            let use_tree = use_tree\n+                                .syntax()\n+                                .parent()\n+                                .as_ref()\n+                                // Skip over UseTreeList\n+                                .and_then(SyntaxNode::parent)\n+                                .and_then(ast::UseTree::cast)?;\n+                            let path = use_tree.path()?;\n+                            let path_segment = path.segment()?;\n+                            path_segment.name_ref()\n+                        })\n+                        .and_then(|name_ref| classify_name_ref(sema, &name_ref))?;\n \n-                Some(NameClass::Definition(name_ref_class.definition()))\n+                    Some(NameClass::Definition(name_ref_class.definition(sema.db)?))\n+                } else {\n+                    let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n+                    let resolved = sema.resolve_extern_crate(&extern_crate)?;\n+                    Some(NameClass::ExternCrate(resolved))\n+                }\n             },\n             ast::IdentPat(it) => {\n                 let local = sema.to_def(&it)?;\n@@ -220,16 +228,20 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n \n #[derive(Debug)]\n pub enum NameRefClass {\n+    ExternCrate(Crate),\n     Definition(Definition),\n     FieldShorthand { local: Local, field: Definition },\n }\n \n impl NameRefClass {\n-    pub fn definition(self) -> Definition {\n-        match self {\n+    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+        Some(match self {\n+            NameRefClass::ExternCrate(krate) => {\n+                Definition::ModuleDef(krate.root_module(db)?.into())\n+            }\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n-        }\n+        })\n     }\n }\n \n@@ -307,9 +319,15 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n-    let resolved = sema.resolve_path(&path)?;\n-    Some(NameRefClass::Definition(resolved.into()))\n+    if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n+        if let Some(resolved) = sema.resolve_path(&path) {\n+            return Some(NameRefClass::Definition(resolved.into()));\n+        }\n+    }\n+\n+    let extern_crate = ast::ExternCrate::cast(parent)?;\n+    let resolved = sema.resolve_extern_crate(&extern_crate)?;\n+    Some(NameRefClass::ExternCrate(resolved))\n }\n \n impl From<PathResolution> for Definition {"}, {"sha": "9e040973b3b3c6adbcc73ba31969140108f2e35a", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cde0b1aa0f6b8623c6b81b2396f4a0345891233/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=6cde0b1aa0f6b8623c6b81b2396f4a0345891233", "patch": "@@ -61,5 +61,5 @@ fn get_name_definition<'a>(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    classify_name(sema, &name)?.into_definition()\n+    classify_name(sema, &name)?.into_definition(sema.db)\n }"}]}