{"sha": "ef23d77633484e4e85f8b37431e3b08ede3e4802", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMjNkNzc2MzM0ODRlNGU4NWY4YjM3NDMxZTNiMDhlZGUzZTQ4MDI=", "commit": {"author": {"name": "Vincent Belliard", "email": "vincent@famillebelliard.fr", "date": "2012-09-26T08:47:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-26T14:48:19Z"}, "message": "fix issue #3535 and add colon between mode and type when dumping funcion prototype", "tree": {"sha": "c7773070f518cc847d120b470bf6ff7fae3b4ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7773070f518cc847d120b470bf6ff7fae3b4ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef23d77633484e4e85f8b37431e3b08ede3e4802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef23d77633484e4e85f8b37431e3b08ede3e4802", "html_url": "https://github.com/rust-lang/rust/commit/ef23d77633484e4e85f8b37431e3b08ede3e4802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef23d77633484e4e85f8b37431e3b08ede3e4802/comments", "author": {"login": "Vincent-Belliard", "id": 2185554, "node_id": "MDQ6VXNlcjIxODU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2185554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vincent-Belliard", "html_url": "https://github.com/Vincent-Belliard", "followers_url": "https://api.github.com/users/Vincent-Belliard/followers", "following_url": "https://api.github.com/users/Vincent-Belliard/following{/other_user}", "gists_url": "https://api.github.com/users/Vincent-Belliard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vincent-Belliard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vincent-Belliard/subscriptions", "organizations_url": "https://api.github.com/users/Vincent-Belliard/orgs", "repos_url": "https://api.github.com/users/Vincent-Belliard/repos", "events_url": "https://api.github.com/users/Vincent-Belliard/events{/privacy}", "received_events_url": "https://api.github.com/users/Vincent-Belliard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95bc32dc4f5041e1e354dd23fbb70431fe8f31ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bc32dc4f5041e1e354dd23fbb70431fe8f31ca", "html_url": "https://github.com/rust-lang/rust/commit/95bc32dc4f5041e1e354dd23fbb70431fe8f31ca"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "bc232f1259e3beb5a6d1245924d3104121de6958", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ef23d77633484e4e85f8b37431e3b08ede3e4802", "patch": "@@ -584,6 +584,29 @@ impl parser {\n         } else { infer(self.get_id()) }\n     }\n \n+    fn is_named_argument() -> bool {\n+        let offset = if self.token == token::BINOP(token::AND) {\n+            1\n+        } else if self.token == token::BINOP(token::MINUS) {\n+            1\n+        } else if self.token == token::ANDAND {\n+            1\n+        } else if self.token == token::BINOP(token::PLUS) {\n+            if self.look_ahead(1) == token::BINOP(token::PLUS) {\n+                2\n+            } else {\n+                1\n+            }\n+        } else { 0 };\n+        if offset == 0 {\n+            is_plain_ident(self.token)\n+                && self.look_ahead(1) == token::COLON\n+        } else {\n+            is_plain_ident(self.look_ahead(offset))\n+                && self.look_ahead(offset + 1) == token::COLON\n+        }\n+    }\n+\n     fn parse_capture_item_or(parse_arg_fn: fn(parser) -> arg_or_capture_item)\n         -> arg_or_capture_item {\n \n@@ -605,29 +628,17 @@ impl parser {\n     // This version of parse arg doesn't necessarily require\n     // identifier names.\n     fn parse_arg_general(require_name: bool) -> arg {\n-        let m = self.parse_arg_mode();\n-        let i = if require_name {\n+        let mut m;\n+        let i = if require_name || self.is_named_argument() {\n+            m = self.parse_arg_mode();\n             let name = self.parse_value_ident();\n             self.expect(token::COLON);\n             name\n         } else {\n-            if is_plain_ident(self.token)\n-                && self.look_ahead(1u) == token::COLON {\n-                let name = self.parse_value_ident();\n-                self.bump();\n-                name\n-            } else { special_idents::invalid }\n+            m = infer(self.get_id());\n+            special_idents::invalid\n         };\n \n-        match m {\n-            expl(_) => {\n-                if i == special_idents::invalid {\n-                    self.obsolete(copy self.span, ObsoleteModeInFnType);\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         let t = self.parse_ty(false);\n \n         {mode: m, ty: t, ident: i, id: self.get_id()}"}, {"sha": "0498a0f95414d47ce8d2336c406f298d180807e8", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=ef23d77633484e4e85f8b37431e3b08ede3e4802", "patch": "@@ -261,7 +261,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n                 m == ty::default_arg_mode_for_ty(cx, ty) {\n                 ~\"\"\n             } else {\n-                mode_to_str(ast::expl(m))\n+                mode_to_str(ast::expl(m)) + \":\"\n             }\n           }\n         };"}, {"sha": "36e6edc96f996a030cb405a3a438727048f375c3", "filename": "src/test/compile-fail/unnamed_argument_mode.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnamed_argument_mode.rs?ref=ef23d77633484e4e85f8b37431e3b08ede3e4802", "patch": "@@ -0,0 +1,14 @@\n+//error-pattern: mismatched types\n+\n+fn bad(&a: int) {\n+}\n+\n+// unnamed argument &int is now parsed x: &int\n+// it's not parsed &x: int anymore\n+\n+fn called(f: fn(&int)) {\n+}\n+\n+fn main() {\n+called(bad);\n+}"}, {"sha": "97e7582e142d904d1bb45f39c52fb63b7e02a16f", "filename": "src/test/run-pass/unnamed_argument_mode.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef23d77633484e4e85f8b37431e3b08ede3e4802/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs?ref=ef23d77633484e4e85f8b37431e3b08ede3e4802", "patch": "@@ -0,0 +1,11 @@\n+fn good(a: &int) {\n+}\n+\n+// unnamed argument &int is now parse x: &int\n+\n+fn called(f: fn(&int)) {\n+}\n+\n+fn main() {\n+called(good);\n+}"}]}