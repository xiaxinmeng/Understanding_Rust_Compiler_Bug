{"sha": "1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOGYzYjAxMWNhY2RjMmU1YzYxNGY5YjA1YzUwOWRiNGE0MjE3ZGI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-11T22:41:06Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-09T03:30:00Z"}, "message": "Remove ONLY_BUILD.\n\nAll uses are replaced with not accessing run.target/run.host, and\ninstead directly using run.builder.build.build.", "tree": {"sha": "d4c907af80d35432b08505cc1ff5e44df5a76045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c907af80d35432b08505cc1ff5e44df5a76045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "html_url": "https://github.com/rust-lang/rust/commit/1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11915108810250f74e0d30ac6f12948a7e94e648", "url": "https://api.github.com/repos/rust-lang/rust/commits/11915108810250f74e0d30ac6f12948a7e94e648", "html_url": "https://github.com/rust-lang/rust/commit/11915108810250f74e0d30ac6f12948a7e94e648"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "7da88bffa4b4a2a1696fdbc4b55c28be4c5d3ffd", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "patch": "@@ -60,9 +60,6 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// Run this rule for all hosts without cross compiling.\n     const ONLY_HOSTS: bool = false;\n \n-    /// Only run this step with the build triple as host and target.\n-    const ONLY_BUILD: bool = false;\n-\n     /// Primary function to execute this rule. Can call `builder.ensure(...)`\n     /// with other steps to run those.\n     fn run(self, builder: &Builder) -> Self::Output;\n@@ -98,7 +95,6 @@ pub struct RunConfig<'a> {\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n-    only_build: bool,\n     should_run: fn(ShouldRun) -> ShouldRun,\n     make_run: fn(RunConfig),\n     name: &'static str,\n@@ -134,7 +130,6 @@ impl StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n             only_hosts: S::ONLY_HOSTS,\n-            only_build: S::ONLY_BUILD,\n             should_run: S::should_run,\n             make_run: S::make_run,\n             name: unsafe { ::std::intrinsics::type_name::<S>() },\n@@ -150,18 +145,12 @@ impl StepDescription {\n                 self.name, builder.config.exclude);\n         }\n         let build = builder.build;\n-        let hosts = if self.only_build {\n-            build.build_triple()\n-        } else {\n-            &build.hosts\n-        };\n+        let hosts = &build.hosts;\n \n         // Determine the targets participating in this rule.\n         let targets = if self.only_hosts {\n             if build.config.run_host_only {\n                 &[]\n-            } else if self.only_build {\n-                build.build_triple()\n             } else {\n                 &build.hosts\n             }"}, {"sha": "17900fc35e0950be6990bc99ff6442e2a267696f", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "patch": "@@ -225,14 +225,39 @@ install!((self, builder, _config),\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", Self::should_build(_config) , only_hosts: true, {\n-        builder.ensure(dist::Src);\n-        install_src(builder, self.stage);\n-    }, ONLY_BUILD;\n     Rustc, \"src/librustc\", true, only_hosts: true, {\n         builder.ensure(dist::Rustc {\n             compiler: builder.compiler(self.stage, self.target),\n         });\n         install_rustc(builder, self.stage, self.target);\n     };\n );\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Src {\n+    pub stage: u32,\n+}\n+\n+impl Step for Src {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        let config = &run.builder.config;\n+        let cond = config.extended &&\n+            config.tools.as_ref().map_or(true, |t| t.contains(\"src\"));\n+        run.path(\"src\").default_condition(cond)\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Src {\n+            stage: run.builder.top_stage,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        builder.ensure(dist::Src);\n+        install_src(builder, self.stage);\n+    }\n+}"}, {"sha": "7054c8005060c0967a64170a202dd9374704ac2f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8f3b011cacdc2e5c614f9b05c509db4a4217db/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1c8f3b011cacdc2e5c614f9b05c509db4a4217db", "patch": "@@ -505,27 +505,23 @@ impl Step for RustdocJS {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Tidy {\n-    host: Interned<String>,\n-}\n+pub struct Tidy;\n \n impl Step for Tidy {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n-    /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n+    /// Runs the `tidy` tool.\n     ///\n     /// This tool in `src/tools` checks up on various bits and pieces of style and\n     /// otherwise just implements a few lint-like checks that are specific to the\n     /// compiler itself.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n-        let host = self.host;\n \n         let _folder = build.fold_output(|| \"tidy\");\n-        println!(\"tidy check ({})\", host);\n+        println!(\"tidy check\");\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(build.src.join(\"src\"));\n         cmd.arg(&build.initial_cargo);\n@@ -543,9 +539,7 @@ impl Step for Tidy {\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(Tidy {\n-            host: run.builder.build.build,\n-        });\n+        run.builder.ensure(Tidy);\n     }\n }\n \n@@ -1607,7 +1601,6 @@ pub struct Distcheck;\n \n impl Step for Distcheck {\n     type Output = ();\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"distcheck\")\n@@ -1673,7 +1666,6 @@ impl Step for Bootstrap {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     /// Test the build system itself\n     fn run(self, builder: &Builder) {"}]}