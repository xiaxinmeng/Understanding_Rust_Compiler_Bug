{"sha": "c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "node_id": "C_kwDOAAsO6NoAKGMyZjBiM2ExYmY1ZWQ0MzdkZjNlMjc2OTYwZjY0YmYzYzQ3MjIyZTA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T19:10:16Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T19:10:16Z"}, "message": "Move copy to incr comp cache to codegen join phase\n\nThe copy depends on Session, which is only available on the main thread.\nAs such the copy can't be done on future codegen threads.", "tree": {"sha": "cdb5557952c1e226182b02ce6f5e4f8fa456ab5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb5557952c1e226182b02ce6f5e4f8fa456ab5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "html_url": "https://github.com/rust-lang/rust/commit/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6206c4e927595afcaef0496025512282f847f645", "url": "https://api.github.com/repos/rust-lang/rust/commits/6206c4e927595afcaef0496025512282f847f645", "html_url": "https://github.com/rust-lang/rust/commit/6206c4e927595afcaef0496025512282f847f645"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "7e5e3453834c5855b98671fd910afa0b8728f880", "filename": "src/driver/aot.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "patch": "@@ -23,7 +23,7 @@ use crate::{prelude::*, BackendConfig};\n struct ModuleCodegenResult {\n     module_regular: CompiledModule,\n     module_global_asm: Option<CompiledModule>,\n-    work_product: Option<(WorkProductId, WorkProduct)>,\n+    existing_work_product: Option<(WorkProductId, WorkProduct)>,\n }\n \n impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n@@ -41,16 +41,44 @@ pub(crate) struct OngoingCodegen {\n }\n \n impl OngoingCodegen {\n-    pub(crate) fn join(self) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n+    pub(crate) fn join(\n+        self,\n+        sess: &Session,\n+        backend_config: &BackendConfig,\n+    ) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n         let mut work_products = FxHashMap::default();\n         let mut modules = vec![];\n \n         for module_codegen_result in self.modules {\n-            let ModuleCodegenResult { module_regular, module_global_asm, work_product } =\n+            let ModuleCodegenResult { module_regular, module_global_asm, existing_work_product } =\n                 module_codegen_result;\n-            if let Some((work_product_id, work_product)) = work_product {\n+\n+            if let Some((work_product_id, work_product)) = existing_work_product {\n                 work_products.insert(work_product_id, work_product);\n+            } else {\n+                let work_product = if backend_config.disable_incr_cache {\n+                    None\n+                } else if let Some(module_global_asm) = &module_global_asm {\n+                    rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n+                        sess,\n+                        &module_regular.name,\n+                        &[\n+                            (\"o\", &module_regular.object.as_ref().unwrap()),\n+                            (\"asm.o\", &module_global_asm.object.as_ref().unwrap()),\n+                        ],\n+                    )\n+                } else {\n+                    rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n+                        sess,\n+                        &module_regular.name,\n+                        &[(\"o\", &module_regular.object.as_ref().unwrap())],\n+                    )\n+                };\n+                if let Some((work_product_id, work_product)) = work_product {\n+                    work_products.insert(work_product_id, work_product);\n+                }\n             }\n+\n             modules.push(module_regular);\n             if let Some(module_global_asm) = module_global_asm {\n                 modules.push(module_global_asm);\n@@ -84,7 +112,6 @@ fn make_module(sess: &Session, backend_config: &BackendConfig, name: String) ->\n \n fn emit_cgu(\n     tcx: TyCtxt<'_>,\n-    backend_config: &BackendConfig,\n     name: String,\n     module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n@@ -101,22 +128,6 @@ fn emit_cgu(\n \n     let module_regular = emit_module(tcx, product.object, ModuleKind::Regular, name.clone());\n \n-    let work_product = if backend_config.disable_incr_cache {\n-        None\n-    } else if let Some(global_asm_object_file) = &global_asm_object_file {\n-        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n-            tcx.sess,\n-            &name,\n-            &[(\"o\", &module_regular.object.as_ref().unwrap()), (\"asm.o\", global_asm_object_file)],\n-        )\n-    } else {\n-        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n-            tcx.sess,\n-            &name,\n-            &[(\"o\", &module_regular.object.as_ref().unwrap())],\n-        )\n-    };\n-\n     ModuleCodegenResult {\n         module_regular,\n         module_global_asm: global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n@@ -126,7 +137,7 @@ fn emit_cgu(\n             dwarf_object: None,\n             bytecode: None,\n         }),\n-        work_product,\n+        existing_work_product: None,\n     }\n }\n \n@@ -205,7 +216,7 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n         } else {\n             None\n         },\n-        work_product: Some((cgu.work_product_id(), work_product)),\n+        existing_work_product: Some((cgu.work_product_id(), work_product)),\n     }\n }\n \n@@ -271,7 +282,6 @@ fn module_codegen(\n     let codegen_result = tcx.sess.time(\"write object file\", || {\n         emit_cgu(\n             tcx,\n-            &backend_config,\n             cgu.name().as_str().to_string(),\n             module,\n             debug_context,"}, {"sha": "909f4f00f1edfcfd4b5e778f423f456ab62accf7", "filename": "src/lib.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "patch": "@@ -25,7 +25,7 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -158,7 +158,7 @@ impl<'tcx> CodegenCx<'tcx> {\n }\n \n pub struct CraneliftCodegenBackend {\n-    pub config: Option<BackendConfig>,\n+    pub config: RefCell<Option<BackendConfig>>,\n }\n \n impl CodegenBackend for CraneliftCodegenBackend {\n@@ -168,6 +168,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             Lto::No | Lto::ThinLocal => {}\n             Lto::Thin | Lto::Fat => sess.warn(\"LTO is not supported. You may get a linker error.\"),\n         }\n+\n+        let mut config = self.config.borrow_mut();\n+        if config.is_none() {\n+            let new_config = BackendConfig::from_opts(&sess.opts.cg.llvm_args)\n+                .unwrap_or_else(|err| sess.fatal(&err));\n+            *config = Some(new_config);\n+        }\n     }\n \n     fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<rustc_span::Symbol> {\n@@ -185,15 +192,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n         tcx.sess.abort_if_errors();\n-        let config = if let Some(config) = self.config.clone() {\n-            config\n-        } else {\n-            if !tcx.sess.unstable_options() && !tcx.sess.opts.cg.llvm_args.is_empty() {\n-                tcx.sess.fatal(\"`-Z unstable-options` must be passed to allow configuring cg_clif\");\n-            }\n-            BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n-                .unwrap_or_else(|err| tcx.sess.fatal(&err))\n-        };\n+        let config = self.config.borrow().clone().unwrap();\n         match config.codegen_mode {\n             CodegenMode::Aot => driver::aot::run_aot(tcx, config, metadata, need_metadata_module),\n             CodegenMode::Jit | CodegenMode::JitLazy => {\n@@ -209,10 +208,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n-        _sess: &Session,\n+        sess: &Session,\n         _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n-        Ok(ongoing_codegen.downcast::<driver::aot::OngoingCodegen>().unwrap().join())\n+        Ok(ongoing_codegen\n+            .downcast::<driver::aot::OngoingCodegen>()\n+            .unwrap()\n+            .join(sess, self.config.borrow().as_ref().unwrap()))\n     }\n \n     fn link(\n@@ -309,5 +311,5 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    Box::new(CraneliftCodegenBackend { config: None })\n+    Box::new(CraneliftCodegenBackend { config: RefCell::new(None) })\n }"}]}