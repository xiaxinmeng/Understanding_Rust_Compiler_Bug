{"sha": "10f439a0116df86f737d83cc620289b14c88660f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjQzOWEwMTE2ZGY4NmY3MzdkODNjYzYyMDI4OWIxNGM4ODY2MGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-25T12:58:02Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-15T09:48:22Z"}, "message": "Promoteds can contain raw pointers, but these must still only point to immutable allocations", "tree": {"sha": "be574a3378413a0098399f9a2f0f5afa6e19a722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be574a3378413a0098399f9a2f0f5afa6e19a722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f439a0116df86f737d83cc620289b14c88660f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f439a0116df86f737d83cc620289b14c88660f", "html_url": "https://github.com/rust-lang/rust/commit/10f439a0116df86f737d83cc620289b14c88660f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f439a0116df86f737d83cc620289b14c88660f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632387f38dfbac0f2b8b8900c840fff7f1fb888e", "url": "https://api.github.com/repos/rust-lang/rust/commits/632387f38dfbac0f2b8b8900c840fff7f1fb888e", "html_url": "https://github.com/rust-lang/rust/commit/632387f38dfbac0f2b8b8900c840fff7f1fb888e"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "aad0e1629359a8523895b2e7f2e9a67c9df8d674", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n \n-use crate::interpret::{intern_const_alloc_recursive, ConstValue, InterpCx};\n+use crate::interpret::{intern_const_alloc_recursive, ConstValue, InternKind, InterpCx};\n \n mod error;\n mod eval_queries;\n@@ -52,7 +52,7 @@ pub(crate) fn const_caller_location<'tcx>(\n \n     let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n-    intern_const_alloc_recursive(&mut ecx, None, loc_place, false).unwrap();\n+    intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place, false).unwrap();\n     let loc_const = ty::Const {\n         ty: loc_ty,\n         val: ty::ConstKind::Value(ConstValue::Scalar(loc_place.ptr.into())),"}, {"sha": "442baf85f2bafea116b28a1f05b6207722f21b04", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -1,9 +1,9 @@\n use super::{error_to_const_error, CompileTimeEvalContext, CompileTimeInterpreter, MemoryExtra};\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n-    intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, ImmTy, Immediate, InterpCx,\n-    InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar, ScalarMaybeUndef,\n-    StackPopCleanup,\n+    intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, ImmTy, Immediate, InternKind,\n+    InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar,\n+    ScalarMaybeUndef, StackPopCleanup,\n };\n use rustc::mir;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n@@ -56,9 +56,14 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n+    let intern_kind = match tcx.static_mutability(cid.instance.def_id()) {\n+        Some(m) => InternKind::Static(m),\n+        None if cid.promoted.is_some() => InternKind::Promoted,\n+        _ => InternKind::Constant,\n+    };\n     intern_const_alloc_recursive(\n         ecx,\n-        tcx.static_mutability(cid.instance.def_id()),\n+        intern_kind,\n         ret,\n         body.ignore_interior_mut_in_const_validation,\n     )?;"}, {"sha": "8ff78ffb5baf995f830bc7d07a7353a0564c5ad9", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -268,19 +268,27 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n     }\n }\n \n+pub enum InternKind {\n+    /// The `mutability` of the static, ignoring the type which may have interior mutability.\n+    Static(hir::Mutability),\n+    Constant,\n+    Promoted,\n+    ConstProp,\n+}\n+\n pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n-    // The `mutability` of the place, ignoring the type.\n-    place_mut: Option<hir::Mutability>,\n+    intern_kind: InternKind,\n     ret: MPlaceTy<'tcx>,\n     ignore_interior_mut_in_const_validation: bool,\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n-    let (base_mutability, base_intern_mode) = match place_mut {\n+    let (base_mutability, base_intern_mode) = match intern_kind {\n         // `static mut` doesn't care about interior mutability, it's mutable anyway\n-        Some(mutbl) => (mutbl, InternMode::Static),\n-        // consts, promoteds. FIXME: what about array lengths, array initializers?\n-        None => (Mutability::Not, InternMode::ConstBase),\n+        InternKind::Static(mutbl) => (mutbl, InternMode::Static),\n+        // FIXME: what about array lengths, array initializers?\n+        InternKind::Constant | InternKind::ConstProp => (Mutability::Not, InternMode::ConstBase),\n+        InternKind::Promoted => (Mutability::Not, InternMode::ConstBase),\n     };\n \n     // Type based interning.\n@@ -338,10 +346,23 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references and a `leftover_allocations` set (where we only have a todo-list here).\n             // So we hand-roll the interning logic here again.\n-            match base_intern_mode {\n-                InternMode::Static => {}\n-                InternMode::Const | InternMode::ConstBase => {\n-                    // If it's not a static, it *must* be immutable.\n+            match intern_kind {\n+                // Mutable statics may contain mutable allocations even behind relocations\n+                InternKind::Static(hir::Mutability::Mut) => {}\n+                // Once we get heap allocations we need to revisit whether immutable statics can\n+                // refer to mutable (e.g. via interior mutability) allocations.\n+                InternKind::Static(hir::Mutability::Not) => {\n+                    alloc.mutability = Mutability::Not;\n+                }\n+                // Raw pointers in promoteds may only point to immutable things so we mark\n+                // everything as immutable. Creating a promoted with interior mutability is UB, but\n+                // there's no way we can check whether the user is using raw pointers correctly.\n+                // So all we can do is mark this as immutable here.\n+                InternKind::Promoted => {\n+                    alloc.mutability = Mutability::Not;\n+                }\n+                InternKind::Constant | InternKind::ConstProp => {\n+                    // If it's a constant, it *must* be immutable.\n                     // We cannot have mutable memory inside a constant.\n                     // We use `delay_span_bug` here, because this can be reached in the presence\n                     // of fancy transmutes.\n@@ -363,7 +384,10 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n-        } else if ecx.tcx.alloc_map.lock().get(alloc_id).is_none() {\n+        } else if let Some(_) = ecx.tcx.alloc_map.lock().get(alloc_id) {\n+            // FIXME: check if the allocation is ok as per the interning rules as if we interned\n+            // it right here.\n+        } else {\n             span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }"}, {"sha": "a519f38e712087dc9215a0aa79a71a77c9dc09f6", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -32,6 +32,6 @@ pub use self::visitor::{MutValueVisitor, ValueVisitor};\n \n pub use self::validity::RefTracking;\n \n-pub use self::intern::intern_const_alloc_recursive;\n+pub use self::intern::{intern_const_alloc_recursive, InternKind};\n \n crate use self::intrinsics::eval_nullary_intrinsic;"}, {"sha": "7dd82e6a6f9dcedf85d4049161780ab20bbb5738", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -29,9 +29,9 @@ use syntax::ast::Mutability;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx,\n-    LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n-    ScalarMaybeUndef, StackPopCleanup,\n+    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InternKind,\n+    InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy,\n+    Pointer, ScalarMaybeUndef, StackPopCleanup,\n };\n use crate::transform::{MirPass, MirSource};\n \n@@ -726,7 +726,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             )) => l.is_bits() && r.is_bits(),\n             interpret::Operand::Indirect(_) if mir_opt_level >= 2 => {\n                 let mplace = op.assert_mem_place(&self.ecx);\n-                intern_const_alloc_recursive(&mut self.ecx, None, mplace, false)\n+                intern_const_alloc_recursive(&mut self.ecx, InternKind::ConstProp, mplace, false)\n                     .expect(\"failed to intern alloc\");\n                 true\n             }"}, {"sha": "4c62ad444a5129e779b675b9f0aabc9e2e50baf4", "filename": "src/test/ui/consts/raw_pointer_promoted.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10f439a0116df86f737d83cc620289b14c88660f/src%2Ftest%2Fui%2Fconsts%2Fraw_pointer_promoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f439a0116df86f737d83cc620289b14c88660f/src%2Ftest%2Fui%2Fconsts%2Fraw_pointer_promoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fraw_pointer_promoted.rs?ref=10f439a0116df86f737d83cc620289b14c88660f", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+\n+pub const FOO: &'static *const i32 = &(&0 as _);\n+\n+fn main() {}"}]}