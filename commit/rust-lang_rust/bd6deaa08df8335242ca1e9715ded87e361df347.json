{"sha": "bd6deaa08df8335242ca1e9715ded87e361df347", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmRlYWEwOGRmODMzNTI0MmNhMWU5NzE1ZGVkODdlMzYxZGYzNDc=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-19T19:45:47Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-03-19T19:45:47Z"}, "message": "Derive PartialEq, Eq and Hash for RangeInclusive\n\nThe manual implementation of PartialEq, Eq and Hash for RangeInclusive was functionally equivalent to a derived implementation.\n\nThis change removes the manual implementation and adds the respective derives.\nA side effect of this change is that the derives also add implementations for StructuralPartialEq and StructuralEq, which enables RangeInclusive to be used in const generics.", "tree": {"sha": "6115663742044410f2e6d1661448357569f9e92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6115663742044410f2e6d1661448357569f9e92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6deaa08df8335242ca1e9715ded87e361df347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6deaa08df8335242ca1e9715ded87e361df347", "html_url": "https://github.com/rust-lang/rust/commit/bd6deaa08df8335242ca1e9715ded87e361df347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6deaa08df8335242ca1e9715ded87e361df347/comments", "author": null, "committer": null, "parents": [{"sha": "f4c675c476c18b1a11041193f2f59d695b126bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c675c476c18b1a11041193f2f59d695b126bc8", "html_url": "https://github.com/rust-lang/rust/commit/f4c675c476c18b1a11041193f2f59d695b126bc8"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "7fdb6dda1f97ec384935d5a425280e6daf180c8d", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd6deaa08df8335242ca1e9715ded87e361df347/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6deaa08df8335242ca1e9715ded87e361df347/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=bd6deaa08df8335242ca1e9715ded87e361df347", "patch": "@@ -330,7 +330,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n-#[derive(Clone)] // not Copy -- see #27186\n+#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     // Note that the fields here are not public to allow changing the\n@@ -350,26 +350,6 @@ pub struct RangeInclusive<Idx> {\n     pub(crate) exhausted: bool,\n }\n \n-#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-impl<Idx: PartialEq> PartialEq for RangeInclusive<Idx> {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.start == other.start && self.end == other.end && self.exhausted == other.exhausted\n-    }\n-}\n-\n-#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-impl<Idx: Eq> Eq for RangeInclusive<Idx> {}\n-\n-#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-impl<Idx: Hash> Hash for RangeInclusive<Idx> {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.start.hash(state);\n-        self.end.hash(state);\n-        self.exhausted.hash(state);\n-    }\n-}\n-\n impl<Idx> RangeInclusive<Idx> {\n     /// Creates a new inclusive range. Equivalent to writing `start..=end`.\n     ///"}]}