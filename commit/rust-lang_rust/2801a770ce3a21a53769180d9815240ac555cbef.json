{"sha": "2801a770ce3a21a53769180d9815240ac555cbef", "node_id": "C_kwDOAAsO6NoAKDI4MDFhNzcwY2UzYTIxYTUzNzY5MTgwZDk4MTUyNDBhYzU1NWNiZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T21:30:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T21:30:51Z"}, "message": "Auto merge of #89345 - jackh726:89333, r=estebank\n\nDon't lose binders when printing trait bound suggestion\n\nFixes #89333", "tree": {"sha": "64ae8554ffa1636b17e6070ef4e2bed3011f6365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ae8554ffa1636b17e6070ef4e2bed3011f6365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2801a770ce3a21a53769180d9815240ac555cbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2801a770ce3a21a53769180d9815240ac555cbef", "html_url": "https://github.com/rust-lang/rust/commit/2801a770ce3a21a53769180d9815240ac555cbef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2801a770ce3a21a53769180d9815240ac555cbef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03eb6bef8ced8a243858b819e013b9caf83d757", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb6bef8ced8a243858b819e013b9caf83d757", "html_url": "https://github.com/rust-lang/rust/commit/f03eb6bef8ced8a243858b819e013b9caf83d757"}, {"sha": "4bd1751d4c6fa824002d11a5be892699cf436da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd1751d4c6fa824002d11a5be892699cf436da9", "html_url": "https://github.com/rust-lang/rust/commit/4bd1751d4c6fa824002d11a5be892699cf436da9"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "c74667643c4a636f65d17d7edab5ca2122c0fece", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2801a770ce3a21a53769180d9815240ac555cbef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2801a770ce3a21a53769180d9815240ac555cbef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2801a770ce3a21a53769180d9815240ac555cbef", "patch": "@@ -676,7 +676,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        poly_trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         has_custom_message: bool,\n     ) -> bool {\n         let span = obligation.cause.span;\n@@ -705,7 +705,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         never_suggest_borrow.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n \n         let param_env = obligation.param_env;\n-        let trait_ref = trait_ref.skip_binder();\n+        let trait_ref = poly_trait_ref.skip_binder();\n \n         let found_ty = trait_ref.self_ty();\n         let found_ty_str = found_ty.to_string();\n@@ -715,25 +715,25 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |new_imm_trait_ref: ty::TraitRef<'tcx>,\n-                                 new_mut_trait_ref: ty::TraitRef<'tcx>,\n-                                 expected_trait_ref: ty::TraitRef<'tcx>,\n+        let mut try_borrowing = |new_imm_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+                                 new_mut_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+                                 expected_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n                                  blacklist: &[DefId]|\n          -> bool {\n-            if blacklist.contains(&expected_trait_ref.def_id) {\n+            if blacklist.contains(&expected_trait_ref.def_id()) {\n                 return false;\n             }\n \n             let imm_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                ty::Binder::dummy(new_imm_trait_ref).without_const().to_predicate(self.tcx),\n+                new_imm_trait_ref.without_const().to_predicate(self.tcx),\n             ));\n \n             let mut_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                ty::Binder::dummy(new_mut_trait_ref).without_const().to_predicate(self.tcx),\n+                new_mut_trait_ref.without_const().to_predicate(self.tcx),\n             ));\n \n             if imm_result || mut_result {\n@@ -806,19 +806,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         if let ObligationCauseCode::ImplDerivedObligation(obligation) = &*code {\n-            let expected_trait_ref = obligation.parent_trait_ref.skip_binder();\n-            let new_imm_trait_ref =\n-                ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs);\n-            let new_mut_trait_ref =\n-                ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs);\n+            let expected_trait_ref = obligation.parent_trait_ref;\n+            let new_imm_trait_ref = poly_trait_ref\n+                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs));\n+            let new_mut_trait_ref = poly_trait_ref\n+                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs));\n             return try_borrowing(new_imm_trait_ref, new_mut_trait_ref, expected_trait_ref, &[]);\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n             return try_borrowing(\n-                ty::TraitRef::new(trait_ref.def_id, imm_substs),\n-                ty::TraitRef::new(trait_ref.def_id, mut_substs),\n-                trait_ref,\n+                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, imm_substs)),\n+                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, mut_substs)),\n+                *poly_trait_ref,\n                 &never_suggest_borrow[..],\n             );\n         } else {"}, {"sha": "03ed28ede21d88a296f21b134d2c056e18dc42f4", "filename": "src/test/ui/suggestions/issue-89333.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2801a770ce3a21a53769180d9815240ac555cbef/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2801a770ce3a21a53769180d9815240ac555cbef/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.rs?ref=2801a770ce3a21a53769180d9815240ac555cbef", "patch": "@@ -0,0 +1,11 @@\n+// check-fail\n+// Ensure we don't error when emitting trait bound not satisfied when self type\n+// has late bound var\n+\n+fn main() {\n+    test(&|| 0); //~ ERROR the trait bound\n+}\n+\n+trait Trait {}\n+\n+fn test<T>(arg: &impl Fn() -> T) where for<'a> &'a T: Trait {}"}, {"sha": "f73f1147d5d9c9e46d0f026832e1c1074f1296c4", "filename": "src/test/ui/suggestions/issue-89333.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2801a770ce3a21a53769180d9815240ac555cbef/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2801a770ce3a21a53769180d9815240ac555cbef/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89333.stderr?ref=2801a770ce3a21a53769180d9815240ac555cbef", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `for<'a> &'a _: Trait` is not satisfied\n+  --> $DIR/issue-89333.rs:6:5\n+   |\n+LL |     test(&|| 0);\n+   |     ^^^^ the trait `for<'a> Trait` is not implemented for `&'a _`\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/issue-89333.rs:11:55\n+   |\n+LL | fn test<T>(arg: &impl Fn() -> T) where for<'a> &'a T: Trait {}\n+   |                                                       ^^^^^ required by this bound in `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}