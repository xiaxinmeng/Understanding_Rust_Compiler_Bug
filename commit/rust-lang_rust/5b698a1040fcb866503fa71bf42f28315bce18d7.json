{"sha": "5b698a1040fcb866503fa71bf42f28315bce18d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjk4YTEwNDBmY2I4NjY1MDNmYTcxYmY0MmYyODMxNWJjZTE4ZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-06T13:04:35Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:17Z"}, "message": "Unregress error spans in constant errors", "tree": {"sha": "0fe928bd31c73a93e68a71bd2d1d828c46982116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe928bd31c73a93e68a71bd2d1d828c46982116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b698a1040fcb866503fa71bf42f28315bce18d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53kACgkQpp+NIls6\n19muRA/+MW7BgRdmIm7LufIrdqXaFdTgwLPzjCuJaFqvCewwRIhNN7iFS/cXsWkp\nPNnDkcnl8e2G5oFBpsL7PysAyjrXPJL+kNabc+23Q86MTkRM8+cGZ0eAgeLynowZ\ngIRmVFV5YqYb0dRJLghM+Vr43tb5RXWH9IGvri2Pw92B/Ff5okeyXG1Kepl+D3Pl\n5BMziKGLjkPQmcz75egNK+VuEyHs4i2hdUW8f90GGg21l+aNnQ+IkzG2K8UcV6wc\nl4t2dUTpwlaLV42Xqv7O7GFu1A69SQ/kqkJHP9fw6q7wwDiCOW1Y+xgFb9vuxUlS\nMUU4o2SAKOl54pvkeyRT2mOj0cTmVk2rJBgSeS/KasjNhJCCvYxqPiwXcC6sTCFN\nxTPIvRV4R8dw9eD3HOTAaLqIIZJZQpnRHeB5SINZfLV0AaMMgYibxQpUflw0zYbr\na8p7EOHQzctVYrwYLf3jRSrVvyOjBTKp4FSO5styAUfaASS4ATyHGbsZh0kGOtHT\nhqHgE4fWtovnJXnZlsNqGLalrz35IS/hw4lHuH0I5ygx8PbFPjjYJhhFfO8vO2Y7\nIvwm+I/nmdBvYBF/IWIJqPPZYK5UHoyYeiecmER7Fv6g4ucovzmNA7VTSQE/pVC5\nKOi4k9njY1SWKkszDhh9rgpgmRssFmzZBjkXdSAizEt2G4kmSfE=\n=jV5w\n-----END PGP SIGNATURE-----", "payload": "tree 0fe928bd31c73a93e68a71bd2d1d828c46982116\nparent 421622d8f79756b0b8629f5779dc0071a5012bc0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517922275 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494457 +0100\n\nUnregress error spans in constant errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b698a1040fcb866503fa71bf42f28315bce18d7", "html_url": "https://github.com/rust-lang/rust/commit/5b698a1040fcb866503fa71bf42f28315bce18d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b698a1040fcb866503fa71bf42f28315bce18d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "421622d8f79756b0b8629f5779dc0071a5012bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/421622d8f79756b0b8629f5779dc0071a5012bc0", "html_url": "https://github.com/rust-lang/rust/commit/421622d8f79756b0b8629f5779dc0071a5012bc0"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "8c3dfd0bce752e51463411de9b2618e98f9d48e8", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             ConstEvalErrDescription::Backtrace(miri, frames) => {\n                 diag.span_label(self.span, format!(\"{}\", miri));\n                 for frame in frames {\n-                    diag.span_label(frame.span, format!(\"inside call to {}\", frame.location));\n+                    diag.span_label(frame.span, format!(\"inside call to `{}`\", frame.location));\n                 }\n             }\n         }"}, {"sha": "1314f5eb58d32b5be3172415e6344aa1dd64e89a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             let field = Field::new(i);\n             let val = match cv.val {\n                 ConstVal::Value(miri) => const_val_field(\n-                    self.tcx, self.param_env, instance, span,\n+                    self.tcx, self.param_env, instance,\n                     variant_opt, field, miri, cv.ty,\n                 ).unwrap(),\n                 _ => bug!(\"{:#?} is not a valid adt\", cv),"}, {"sha": "ebb620701407ef4030736a7fedabae83bff75270", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -61,7 +61,7 @@ pub fn eval_body_with_mir<'a, 'mir, 'tcx>(\n     mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Option<(Value, Pointer, Ty<'tcx>)> {\n-    let (res, ecx, _) = eval_body_and_ecx(tcx, cid, Some(mir), param_env);\n+    let (res, ecx) = eval_body_and_ecx(tcx, cid, Some(mir), param_env);\n     match res {\n         Ok(val) => Some(val),\n         Err(mut err) => {\n@@ -76,7 +76,7 @@ pub fn eval_body<'a, 'tcx>(\n     cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> Option<(Value, Pointer, Ty<'tcx>)> {\n-    let (res, ecx, _) = eval_body_and_ecx(tcx, cid, None, param_env);\n+    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, param_env);\n     match res {\n         Ok(val) => Some(val),\n         Err(mut err) => {\n@@ -91,7 +91,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     cid: GlobalId<'tcx>,\n     mir: Option<&'mir mir::Mir<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>, Span) {\n+) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>) {\n     debug!(\"eval_body: {:?}, {:?}\", cid, param_env);\n     let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n     // we start out with the best span we have\n@@ -155,7 +155,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n         };\n         Ok((value, ptr, layout.ty))\n     })();\n-    (res, ecx, span)\n+    (res, ecx)\n }\n \n pub struct CompileTimeEvaluator;\n@@ -367,7 +367,6 @@ pub fn const_val_field<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n-    span: Span,\n     variant: Option<usize>,\n     field: mir::Field,\n     value: Value,\n@@ -403,7 +402,7 @@ pub fn const_val_field<'a, 'tcx>(\n             ty,\n         })),\n         Err(err) => {\n-            let trace = ecx.generate_stacktrace(None);\n+            let (trace, span) = ecx.generate_stacktrace(None);\n             let err = ErrKind::Miri(err, trace);\n             Err(ConstEvalErr {\n                 kind: err.into(),\n@@ -490,7 +489,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         }\n     };\n \n-    let (res, ecx, span) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n+    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n     res.map(|(miri_value, _, miri_ty)| {\n         tcx.mk_const(ty::Const {\n             val: ConstVal::Value(miri_value),\n@@ -500,7 +499,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         if tcx.is_static(def_id).is_some() {\n             ecx.report(&mut err, true, None);\n         }\n-        let trace = ecx.generate_stacktrace(None);\n+        let (trace, span) = ecx.generate_stacktrace(None);\n         let err = ErrKind::Miri(err, trace);\n         ConstEvalErr {\n             kind: err.into(),"}, {"sha": "2dc23e759c87083d19fb2e2345b027b0f94618e0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -1570,7 +1570,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(())\n     }\n \n-    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo> {\n+    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> (Vec<FrameInfo>, Span) {\n         let mut last_span = None;\n         let mut frames = Vec::new();\n         // skip 1 because the last frame is just the environment of the constant\n@@ -1594,7 +1594,15 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             };\n             frames.push(FrameInfo { span, location });\n         }\n-        frames\n+        let frame = self.frame();\n+        let bb = &frame.mir.basic_blocks()[frame.block];\n+        let span = if let Some(stmt) = bb.statements.get(frame.stmt) {\n+            stmt.source_info.span\n+        } else {\n+            bb.terminator().source_info.span\n+        };\n+        trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n+        (frames, span)\n     }\n \n     pub fn report(&self, e: &mut EvalError, as_err: bool, explicit_span: Option<Span>) {\n@@ -1658,9 +1666,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     \"constant evaluation error\",\n                 )\n             };\n+            let (frames, span) = self.generate_stacktrace(explicit_span);\n             err.span_label(span, e.to_string());\n-            for FrameInfo { span, location } in self.generate_stacktrace(explicit_span) {\n-                err.span_note(span, &format!(\"inside call to {}\", location));\n+            for FrameInfo { span, location } in frames {\n+                err.span_note(span, &format!(\"inside call to `{}`\", location));\n             }\n             err.emit();\n         } else {"}, {"sha": "de17872e96ff258635dd937c97025c820ef70d90", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -80,7 +80,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         let value = match self.tcx.const_eval(self.param_env.and(cid)) {\n             Ok(val) => val,\n             Err(err) => {\n-                err.report(self.tcx, span, \"constant propagated\");\n+                err.report(self.tcx, err.span, \"constant propagated\");\n                 return None;\n             },\n         };"}, {"sha": "6aa8b7e5449fd1e6037d0e0ef7cfa2b41ee762df", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -203,7 +203,6 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         bx.tcx(),\n                         ty::ParamEnv::empty(traits::Reveal::All),\n                         self.instance,\n-                        constant.span,\n                         None,\n                         mir::Field::new(field as usize),\n                         c,"}, {"sha": "e7ffbe81b9ae7469175c3d6ffaeda9d6aeb70e30", "filename": "src/test/ui/const-eval/index_out_of_bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -10,6 +10,5 @@\n \n static FOO: i32 = [][0];\n //~^ ERROR E0080\n-//~| ERROR E0080\n \n fn main() {}"}, {"sha": "9e09f66776c9b04d23a541c11ffcc6932b321a57", "filename": "src/test/ui/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -18,6 +18,7 @@ const fn f(x: usize) -> usize {\n     for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0019\n+        //~| ERROR E0080\n         sum += i;\n     }\n     sum\n@@ -26,5 +27,4 @@ const fn f(x: usize) -> usize {\n #[allow(unused_variables)]\n fn main() {\n     let a : [i32; f(X)];\n-    //~^ ERROR E0080\n }"}, {"sha": "51de304405a0abbea65f06a46f01e5b39a1f7e48", "filename": "src/test/ui/infinite-recursion-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b698a1040fcb866503fa71bf42f28315bce18d7/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs?ref=5b698a1040fcb866503fa71bf42f28315bce18d7", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(const_fn)]\n const fn a() -> usize { b() }\n-const fn b() -> usize { a() }\n-const ARR: [i32; a()] = [5; 6]; //~ ERROR constant evaluation error\n+const fn b() -> usize { a() } //~ ERROR constant evaluation error\n+const ARR: [i32; a()] = [5; 6];\n \n fn main(){}"}]}