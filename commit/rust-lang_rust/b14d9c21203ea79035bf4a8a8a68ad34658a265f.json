{"sha": "b14d9c21203ea79035bf4a8a8a68ad34658a265f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNGQ5YzIxMjAzZWE3OTAzNWJmNGE4YThhNjhhZDM0NjU4YTI2NWY=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-11-30T02:46:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-30T02:46:09Z"}, "message": "Rollup merge of #66847 - dtolnay:_fmt, r=joshtriplett\n\nAllow any identifier as format arg name\n\nPreviously:\n\n```console\nerror: invalid format string: invalid argument name `_x`\n --> src/main.rs:2:16\n  |\n2 |     println!(\"{_x}\", _x=0);\n  |                ^^ invalid argument name in format string\n  |\n  = note: argument names cannot start with an underscore\n```\n\nNot supporting identifiers starting with underscore appears to have been an arbitrary limitation from 2013 in code that was most likely never reviewed: https://github.com/rust-lang/rust/pull/8245/files#diff-0347868ef389c805e97636623e4a4ea6R277\n\nThe error message was dutifully improved in #50610 but is there any reason that leading underscore would be a special case?\n\nThis commit updates the format_args parser to accept identifiers with leading underscores.", "tree": {"sha": "03ce6db2344426871cedabbc4c4bf81ee243fa28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ce6db2344426871cedabbc4c4bf81ee243fa28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14d9c21203ea79035bf4a8a8a68ad34658a265f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4dfxCRBK7hj4Ov3rIwAAdHIIAEFzIzqGUwPQJOlTUv278pA6\n+gbjgoNQUl0/tVsQOI2kVLytuOo7kxQn8s6F30MfClNtRcIqebtA3PKAm+DWWySk\nQQih2z7tj2GIvTB+hNSkPwR8iDB4htHauKgPgBtjXj2xsiyCekc2cJVVn8tPcuwm\nxR/ZkBpVhNVN/31AnUQ1ehIHGrLl8LT84w2x18qYZQXsSPYBwMcA81xfUdGdjtjZ\nSN0A8y+4xTtvh0TtW7G9fiM017YzpJ6OyuZbeRA11qJ2kkE33Aqwqh7j48yDA7WE\nlSfxxiMV/evGN/IR7xW0scz2T5DR79i3VY4JGPBPSU+AH41kukGrsJaWDBMsU6g=\n=dCpc\n-----END PGP SIGNATURE-----\n", "payload": "tree 03ce6db2344426871cedabbc4c4bf81ee243fa28\nparent 27710d28b7779200fcd0b3a91a0713374d3e6854\nparent 423a5d3e858630e549640763d9022c18bdd68f7a\nauthor David Tolnay <dtolnay@gmail.com> 1575081969 -0800\ncommitter GitHub <noreply@github.com> 1575081969 -0800\n\nRollup merge of #66847 - dtolnay:_fmt, r=joshtriplett\n\nAllow any identifier as format arg name\n\nPreviously:\n\n```console\nerror: invalid format string: invalid argument name `_x`\n --> src/main.rs:2:16\n  |\n2 |     println!(\"{_x}\", _x=0);\n  |                ^^ invalid argument name in format string\n  |\n  = note: argument names cannot start with an underscore\n```\n\nNot supporting identifiers starting with underscore appears to have been an arbitrary limitation from 2013 in code that was most likely never reviewed: https://github.com/rust-lang/rust/pull/8245/files#diff-0347868ef389c805e97636623e4a4ea6R277\n\nThe error message was dutifully improved in #50610 but is there any reason that leading underscore would be a special case?\n\nThis commit updates the format_args parser to accept identifiers with leading underscores.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14d9c21203ea79035bf4a8a8a68ad34658a265f", "html_url": "https://github.com/rust-lang/rust/commit/b14d9c21203ea79035bf4a8a8a68ad34658a265f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14d9c21203ea79035bf4a8a8a68ad34658a265f/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27710d28b7779200fcd0b3a91a0713374d3e6854", "url": "https://api.github.com/repos/rust-lang/rust/commits/27710d28b7779200fcd0b3a91a0713374d3e6854", "html_url": "https://github.com/rust-lang/rust/commit/27710d28b7779200fcd0b3a91a0713374d3e6854"}, {"sha": "423a5d3e858630e549640763d9022c18bdd68f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/423a5d3e858630e549640763d9022c18bdd68f7a", "html_url": "https://github.com/rust-lang/rust/commit/423a5d3e858630e549640763d9022c18bdd68f7a"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "900c6ed5ff32235d487ec6a187a0f8970ad8ef9f", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b14d9c21203ea79035bf4a8a8a68ad34658a265f", "patch": "@@ -442,20 +442,9 @@ impl<'a> Parser<'a> {\n             Some(ArgumentIs(i))\n         } else {\n             match self.cur.peek() {\n-                Some(&(_, c)) if c.is_alphabetic() => {\n+                Some(&(_, c)) if rustc_lexer::is_id_start(c) => {\n                     Some(ArgumentNamed(Symbol::intern(self.word())))\n                 }\n-                Some(&(pos, c)) if c == '_' => {\n-                    let invalid_name = self.string(pos);\n-                    self.err_with_note(format!(\"invalid argument name `{}`\", invalid_name),\n-                                       \"invalid argument name\",\n-                                       \"argument names cannot start with an underscore\",\n-                                        self.to_span_index(pos).to(\n-                                            self.to_span_index(pos + invalid_name.len())\n-                                        ),\n-                                        );\n-                    Some(ArgumentNamed(Symbol::intern(invalid_name)))\n-                },\n \n                 // This is an `ArgumentNext`.\n                 // Record the fact and do the resolution after parsing the\n@@ -611,22 +600,34 @@ impl<'a> Parser<'a> {\n     /// Rust identifier, except that it can't start with `_` character.\n     fn word(&mut self) -> &'a str {\n         let start = match self.cur.peek() {\n-            Some(&(pos, c)) if c != '_' && rustc_lexer::is_id_start(c) => {\n+            Some(&(pos, c)) if rustc_lexer::is_id_start(c) => {\n                 self.cur.next();\n                 pos\n             }\n             _ => {\n-                return &self.input[..0];\n+                return \"\";\n             }\n         };\n+        let mut end = None;\n         while let Some(&(pos, c)) = self.cur.peek() {\n             if rustc_lexer::is_id_continue(c) {\n                 self.cur.next();\n             } else {\n-                return &self.input[start..pos];\n+                end = Some(pos);\n+                break;\n             }\n         }\n-        &self.input[start..self.input.len()]\n+        let end = end.unwrap_or(self.input.len());\n+        let word = &self.input[start..end];\n+        if word == \"_\" {\n+            self.err_with_note(\n+                \"invalid argument name `_`\",\n+                \"invalid argument name\",\n+                \"argument name cannot be a single underscore\",\n+                self.to_span_index(start).to(self.to_span_index(end)),\n+            );\n+        }\n+        word\n     }\n \n     /// Optionally parses an integer at the current position. This doesn't deal"}, {"sha": "eae4f3cb5479fc3ab5e602dc82fd15904e405696", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=b14d9c21203ea79035bf4a8a8a68ad34658a265f", "patch": "@@ -6,10 +6,12 @@ fn main() {\n     println!(\"{{}}\");\n     println!(\"}\");\n     //~^ ERROR invalid format string: unmatched `}` found\n-    let _ = format!(\"{_foo}\", _foo = 6usize);\n-    //~^ ERROR invalid format string: invalid argument name `_foo`\n     let _ = format!(\"{_}\", _ = 6usize);\n     //~^ ERROR invalid format string: invalid argument name `_`\n+    let _ = format!(\"{a:_}\", a = \"\", _ = 0);\n+    //~^ ERROR invalid format string: invalid argument name `_`\n+    let _ = format!(\"{a:._$}\", a = \"\", _ = 0);\n+    //~^ ERROR invalid format string: invalid argument name `_`\n     let _ = format!(\"{\");\n     //~^ ERROR invalid format string: expected `'}'` but string was terminated\n     let _ = format!(\"}\");"}, {"sha": "8b018480fb082cec80ee4f39d733a0a6da03da53", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=b14d9c21203ea79035bf4a8a8a68ad34658a265f", "patch": "@@ -16,24 +16,32 @@ LL |     println!(\"}\");\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n-error: invalid format string: invalid argument name `_foo`\n+error: invalid format string: invalid argument name `_`\n   --> $DIR/format-string-error.rs:9:23\n    |\n-LL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n-   |                       ^^^^ invalid argument name in format string\n+LL |     let _ = format!(\"{_}\", _ = 6usize);\n+   |                       ^ invalid argument name in format string\n    |\n-   = note: argument names cannot start with an underscore\n+   = note: argument name cannot be a single underscore\n \n error: invalid format string: invalid argument name `_`\n-  --> $DIR/format-string-error.rs:11:23\n+  --> $DIR/format-string-error.rs:11:25\n    |\n-LL |     let _ = format!(\"{_}\", _ = 6usize);\n-   |                       ^ invalid argument name in format string\n+LL |     let _ = format!(\"{a:_}\", a = \"\", _ = 0);\n+   |                         ^ invalid argument name in format string\n+   |\n+   = note: argument name cannot be a single underscore\n+\n+error: invalid format string: invalid argument name `_`\n+  --> $DIR/format-string-error.rs:13:26\n+   |\n+LL |     let _ = format!(\"{a:._$}\", a = \"\", _ = 0);\n+   |                          ^ invalid argument name in format string\n    |\n-   = note: argument names cannot start with an underscore\n+   = note: argument name cannot be a single underscore\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:13:23\n+  --> $DIR/format-string-error.rs:15:23\n    |\n LL |     let _ = format!(\"{\");\n    |                      -^ expected `'}'` in format string\n@@ -43,15 +51,15 @@ LL |     let _ = format!(\"{\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:15:22\n+  --> $DIR/format-string-error.rs:17:22\n    |\n LL |     let _ = format!(\"}\");\n    |                      ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: expected `'}'`, found `'\\'`\n-  --> $DIR/format-string-error.rs:17:23\n+  --> $DIR/format-string-error.rs:19:23\n    |\n LL |     let _ = format!(\"{\\}\");\n    |                      -^ expected `}` in format string\n@@ -61,7 +69,7 @@ LL |     let _ = format!(\"{\\}\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:19:35\n+  --> $DIR/format-string-error.rs:21:35\n    |\n LL |     let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n    |                            -      ^ expected `'}'` in format string\n@@ -71,7 +79,7 @@ LL |     let _ = format!(\"\\n\\n\\n{\\n\\n\\n\");\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:25:3\n+  --> $DIR/format-string-error.rs:27:3\n    |\n LL |     {\"###);\n    |     -^ expected `'}'` in format string\n@@ -81,7 +89,7 @@ LL |     {\"###);\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:33:1\n+  --> $DIR/format-string-error.rs:35:1\n    |\n LL |     {\n    |     - because of this opening brace\n@@ -92,26 +100,26 @@ LL | \"###);\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:39:2\n+  --> $DIR/format-string-error.rs:41:2\n    |\n LL |     }\n    |     ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:47:9\n+  --> $DIR/format-string-error.rs:49:9\n    |\n LL |         }\n    |         ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: 3 positional arguments in format string, but there are 2 arguments\n-  --> $DIR/format-string-error.rs:51:15\n+  --> $DIR/format-string-error.rs:53:15\n    |\n LL |     println!(\"{} {} {}\", 1, 2);\n    |               ^^ ^^ ^^   -  -\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "1a070843cc4468af85d2b13ce64a1e3c715089b3", "filename": "src/test/ui/ifmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14d9c21203ea79035bf4a8a8a68ad34658a265f/src%2Ftest%2Fui%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt.rs?ref=b14d9c21203ea79035bf4a8a8a68ad34658a265f", "patch": "@@ -90,6 +90,7 @@ pub fn main() {\n     t!(format!(\"{foo} {bar}\", foo=0, bar=1), \"0 1\");\n     t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n+    t!(format!(\"{_foo}\", _foo = 6usize), \"6\");\n     t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n     t!(format!(\"{}\", 5 + 5), \"10\");\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n@@ -125,6 +126,7 @@ pub fn main() {\n     t!(format!(\"{:.*}\", 4, \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:.1$}\", \"aaaaaaaaaaaaaaaaaa\", 4), \"aaaa\");\n     t!(format!(\"{:.a$}\", \"aaaaaaaaaaaaaaaaaa\", a=4), \"aaaa\");\n+    t!(format!(\"{:._a$}\", \"aaaaaaaaaaaaaaaaaa\", _a=4), \"aaaa\");\n     t!(format!(\"{:1$}\", \"a\", 4), \"a   \");\n     t!(format!(\"{1:0$}\", 4, \"a\"), \"a   \");\n     t!(format!(\"{:a$}\", \"a\", a=4), \"a   \");"}]}