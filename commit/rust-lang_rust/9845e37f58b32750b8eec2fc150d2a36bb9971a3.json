{"sha": "9845e37f58b32750b8eec2fc150d2a36bb9971a3", "node_id": "C_kwDOAAsO6NoAKDk4NDVlMzdmNThiMzI3NTBiOGVlYzJmYzE1MGQyYTM2YmI5OTcxYTM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-19T19:20:43Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-19T19:37:34Z"}, "message": "Ensure at least one trait bound in `TyKind::DynTy`", "tree": {"sha": "013bcc33a60f42c1b6745cf0f421d0993a86c335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013bcc33a60f42c1b6745cf0f421d0993a86c335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9845e37f58b32750b8eec2fc150d2a36bb9971a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMoxP4ACgkQ4laYqTBY\nYXGeFBAAsdqGTMEXriaV2kH4sG2cCcrmrmztTBpYDOljOXdB5W4QDk6TlVY8DuVx\njJlPwFiNdpOKTK4I8C1NcbwIdKBO2abDzsuhUcMoRBwTutKAPvDeFKKGYv7KtSIr\nJPLe/qieTmVTXvCqsMBN/QKHpbapaBfmb+Fn6Dm3zdnDCt9D38iW0KLgDjpMM0Ph\ncUNjSg6Fi/3+PfT7fdKhVcc/Iz4qK+x+MfXhNpZ6vD2QajNsTPFHBT9Fi9ddzTFx\n1gQGOJJ/Xxkz8DUoN7mY3mIMYW69EzdM/7larKl39epYDGcnImT0ZML8SRXG2gUr\n6jjD/k/rrf8hE+gbtZ/rIQVZC/0cltk4Ew4NxvfgXFu3C6Q4X02nC//sSb+Fa+mi\nwQlFqtt3rZPSbhoruwHDGWh/EAUHOnXJA+RwAbFhGsaoXCU6qUw1tvR3yAwWv/Sl\nHlOpyt0y7B0ydlfdTCQFjwYlU9DURWKYY08dTLIX4IvE1/dokPcKXoJ8ZlGp+895\n5io2eRlp3YYsyOA6Q3Pmaz4AeEekkzc9+ZenR0jR2KrtI9kAue/JLfhK3Jr3u9/p\nZRW8HNz0upObbwe3GB+0IEW+grK5BwtwnMo7/ZSM3VqFCnXR6t3BdNbgBJ68BAIF\nblmjbXh9eKhVWyz0s4UZm8SzYqItI9mQYVmzNKpPjfCrew7g9j0=\n=RF0a\n-----END PGP SIGNATURE-----", "payload": "tree 013bcc33a60f42c1b6745cf0f421d0993a86c335\nparent 4d989b546558a873ea2376e4d4f0c7f22c762e81\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1663615243 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1663616254 +0900\n\nEnsure at least one trait bound in `TyKind::DynTy`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9845e37f58b32750b8eec2fc150d2a36bb9971a3", "html_url": "https://github.com/rust-lang/rust/commit/9845e37f58b32750b8eec2fc150d2a36bb9971a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9845e37f58b32750b8eec2fc150d2a36bb9971a3/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d989b546558a873ea2376e4d4f0c7f22c762e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d989b546558a873ea2376e4d4f0c7f22c762e81", "html_url": "https://github.com/rust-lang/rust/commit/4d989b546558a873ea2376e4d4f0c7f22c762e81"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "ed97bd2da4f38000a45c48b6dcf43501417e52f9", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=9845e37f58b32750b8eec2fc150d2a36bb9971a3", "patch": "@@ -166,6 +166,8 @@ impl TyExt for Ty {\n         let trait_ref = match self.kind(Interner) {\n             // The principal trait bound should be the first element of the bounds. This is an\n             // invariant ensured by `TyLoweringContext::lower_dyn_trait()`.\n+            // FIXME: dyn types may not have principal trait and we don't want to return auto trait\n+            // here.\n             TyKind::Dyn(dyn_ty) => dyn_ty.bounds.skip_binders().interned().get(0).and_then(|b| {\n                 match b.skip_binders() {\n                     WhereClause::Implemented(trait_ref) => Some(trait_ref),"}, {"sha": "e28c87dfa46b89d920c4eb92d9b4f2d0f0f6d58c", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=9845e37f58b32750b8eec2fc150d2a36bb9971a3", "patch": "@@ -981,10 +981,11 @@ impl<'a> TyLoweringContext<'a> {\n \n     fn lower_dyn_trait(&self, bounds: &[Interned<TypeBound>]) -> Ty {\n         let self_ty = TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(Interner);\n-        // INVARIANT: The principal trait bound must come first. Others may be in any order but\n-        // should be in the same order for the same set but possibly different order of bounds in\n-        // the input.\n-        // This invariant is used by `TyExt::dyn_trait()` and chalk.\n+        // INVARIANT: The principal trait bound, if present, must come first. Others may be in any\n+        // order but should be in the same order for the same set but possibly different order of\n+        // bounds in the input.\n+        // INVARIANT: If this function returns `DynTy`, there should be at least one trait bound.\n+        // These invariants are utilized by `TyExt::dyn_trait()` and chalk.\n         let bounds = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n             let mut bounds: Vec<_> = bounds\n                 .iter()\n@@ -1035,6 +1036,12 @@ impl<'a> TyLoweringContext<'a> {\n                 return None;\n             }\n \n+            if bounds.first().and_then(|b| b.trait_id()).is_none() {\n+                // When there's no trait bound, that's an error. This happens when the trait refs\n+                // are unresolved.\n+                return None;\n+            }\n+\n             // As multiple occurrences of the same auto traits *are* permitted, we dedulicate the\n             // bounds. We shouldn't have repeated elements besides auto traits at this point.\n             bounds.dedup();\n@@ -1046,7 +1053,8 @@ impl<'a> TyLoweringContext<'a> {\n             let bounds = crate::make_single_type_binders(bounds);\n             TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n         } else {\n-            // FIXME: report error (additional non-auto traits or associated type rebound)\n+            // FIXME: report error\n+            // (additional non-auto traits, associated type rebound, or no resolved trait)\n             TyKind::Error.intern(Interner)\n         }\n     }"}, {"sha": "47cc3341e70764a6cf865e4a63927ba6e26ed457", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845e37f58b32750b8eec2fc150d2a36bb9971a3/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=9845e37f58b32750b8eec2fc150d2a36bb9971a3", "patch": "@@ -1691,3 +1691,15 @@ fn macrostmts() -> u8 {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn dyn_with_unresolved_trait() {\n+    check_types(\n+        r#\"\n+fn foo(a: &dyn DoesNotExist) {\n+    a.bar();\n+  //^&{unknown}\n+}\n+        \"#,\n+    );\n+}"}]}