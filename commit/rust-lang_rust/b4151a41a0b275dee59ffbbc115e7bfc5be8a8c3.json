{"sha": "b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "node_id": "C_kwDOAAsO6NoAKGI0MTUxYTQxYTBiMjc1ZGVlNTlmZmJiYzExNWU3YmZjNWJlOGE4YzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T09:16:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T09:16:02Z"}, "message": "Auto merge of #93429 - fee1-dead-contrib:allow-super-trait-tilde-const, r=oli-obk\n\nAllow `trait A: ~const B`\n\nWhat's included: a minimal working change set for `~const` supertraits to work.\n\nr? `@oli-obk`", "tree": {"sha": "a44b07711a72af3d7445e27c3b3e4be68ddfeeed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44b07711a72af3d7445e27c3b3e4be68ddfeeed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "html_url": "https://github.com/rust-lang/rust/commit/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a061724802377a21fc6dac1ebcbb9b8d1f558a", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a061724802377a21fc6dac1ebcbb9b8d1f558a", "html_url": "https://github.com/rust-lang/rust/commit/35a061724802377a21fc6dac1ebcbb9b8d1f558a"}, {"sha": "666022730ffc40e2f4dc7802954b9c0a5697cf22", "url": "https://api.github.com/repos/rust-lang/rust/commits/666022730ffc40e2f4dc7802954b9c0a5697cf22", "html_url": "https://github.com/rust-lang/rust/commit/666022730ffc40e2f4dc7802954b9c0a5697cf22"}], "stats": {"total": 165, "additions": 153, "deletions": 12}, "files": [{"sha": "60560b1c00e251ee262e7f10f092c3d1aee109ef", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -1272,7 +1272,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n-                self.with_banned_tilde_const(|this| {\n+                self.with_tilde_const_allowed(|this| {\n                     walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits)\n                 });\n                 walk_list!(self, visit_assoc_item, items, AssocCtxt::Trait);"}, {"sha": "38ff9343537dc08957047865b0e5af8f7dc31596", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -145,7 +145,12 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|&(pred, _)| {\n+                let obligations = predicates.predicates.iter().map(|&(mut pred, _)| {\n+                    // when parent predicate is non-const, elaborate it to non-const predicates.\n+                    if data.constness == ty::BoundConstness::NotConst {\n+                        pred = pred.without_const(tcx);\n+                    }\n+\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &bound_predicate.rebind(data.trait_ref)),\n                         obligation.param_env,"}, {"sha": "414857f0acc8096b4f938f9e6e3c85405ab06c91", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -85,7 +85,7 @@ pub fn trait_obligations<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n-    trait_ref: &ty::TraitRef<'tcx>,\n+    trait_pred: &ty::TraitPredicate<'tcx>,\n     span: Span,\n     item: &'tcx hir::Item<'tcx>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n@@ -98,7 +98,7 @@ pub fn trait_obligations<'a, 'tcx>(\n         recursion_depth: 0,\n         item: Some(item),\n     };\n-    wf.compute_trait_ref(trait_ref, Elaborate::All);\n+    wf.compute_trait_pred(trait_pred, Elaborate::All);\n     debug!(obligations = ?wf.out);\n     wf.normalize(infcx)\n }\n@@ -123,7 +123,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     // It's ok to skip the binder here because wf code is prepared for it\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(t) => {\n-            wf.compute_trait_ref(&t.trait_ref, Elaborate::None);\n+            wf.compute_trait_pred(&t, Elaborate::None);\n         }\n         ty::PredicateKind::RegionOutlives(..) => {}\n         ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _reg)) => {\n@@ -301,11 +301,18 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     /// Pushes the obligations required for `trait_ref` to be WF into `self.out`.\n-    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n+    fn compute_trait_pred(&mut self, trait_pred: &ty::TraitPredicate<'tcx>, elaborate: Elaborate) {\n         let tcx = self.tcx;\n-        let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n+        let trait_ref = &trait_pred.trait_ref;\n \n-        debug!(\"compute_trait_ref obligations {:?}\", obligations);\n+        // if the trait predicate is not const, the wf obligations should not be const as well.\n+        let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n+            self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n+        } else {\n+            self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n+        };\n+\n+        debug!(\"compute_trait_pred obligations {:?}\", obligations);\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n \n@@ -685,10 +692,11 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn nominal_obligations(\n+    fn nominal_obligations_inner(\n         &mut self,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+        remap_constness: bool,\n     ) -> Vec<traits::PredicateObligation<'tcx>> {\n         let predicates = self.tcx.predicates_of(def_id);\n         let mut origins = vec![def_id; predicates.predicates.len()];\n@@ -703,19 +711,38 @@ impl<'tcx> WfPredicates<'tcx> {\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n-            .map(|((pred, span), origin_def_id)| {\n+            .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n                     traits::MiscObligation\n                 } else {\n                     traits::BindingObligation(origin_def_id, span)\n                 };\n                 let cause = self.cause(code);\n+                if remap_constness {\n+                    pred = pred.without_const(self.tcx);\n+                }\n                 traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())\n             .collect()\n     }\n \n+    fn nominal_obligations(\n+        &mut self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Vec<traits::PredicateObligation<'tcx>> {\n+        self.nominal_obligations_inner(def_id, substs, false)\n+    }\n+\n+    fn nominal_obligations_without_const(\n+        &mut self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Vec<traits::PredicateObligation<'tcx>> {\n+        self.nominal_obligations_inner(def_id, substs, true)\n+    }\n+\n     fn from_object_ty(\n         &mut self,\n         ty: Ty<'tcx>,"}, {"sha": "b8e998229ba8eba4e869169a1d119d0de23bdf43", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -183,7 +183,7 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n             // We match on both `ty::ImplPolarity` and `ast::ImplPolarity` just to get the `!` span.\n             match (tcx.impl_polarity(def_id), impl_.polarity) {\n                 (ty::ImplPolarity::Positive, _) => {\n-                    check_impl(tcx, item, impl_.self_ty, &impl_.of_trait);\n+                    check_impl(tcx, item, impl_.self_ty, &impl_.of_trait, impl_.constness);\n                 }\n                 (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n@@ -1242,6 +1242,7 @@ fn check_impl<'tcx>(\n     item: &'tcx hir::Item<'tcx>,\n     ast_self_ty: &hir::Ty<'_>,\n     ast_trait_ref: &Option<hir::TraitRef<'_>>,\n+    constness: hir::Constness,\n ) {\n     enter_wf_checking_ctxt(tcx, item.span, item.def_id, |wfcx| {\n         match *ast_trait_ref {\n@@ -1251,11 +1252,19 @@ fn check_impl<'tcx>(\n                 // won't hold).\n                 let trait_ref = tcx.impl_trait_ref(item.def_id).unwrap();\n                 let trait_ref = wfcx.normalize(ast_trait_ref.path.span, None, trait_ref);\n+                let trait_pred = ty::TraitPredicate {\n+                    trait_ref,\n+                    constness: match constness {\n+                        hir::Constness::Const => ty::BoundConstness::ConstIfConst,\n+                        hir::Constness::NotConst => ty::BoundConstness::NotConst,\n+                    },\n+                    polarity: ty::ImplPolarity::Positive,\n+                };\n                 let obligations = traits::wf::trait_obligations(\n                     wfcx.infcx,\n                     wfcx.param_env,\n                     wfcx.body_id,\n-                    &trait_ref,\n+                    &trait_pred,\n                     ast_trait_ref.path.span,\n                     item,\n                 );"}, {"sha": "7b38c15afc20b238a4566626b71dbb2232f4af4d", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+const fn foo<T: Bar>(x: &T) {\n+    x.a();\n+    //~^ ERROR the trait bound\n+    //~| ERROR cannot call\n+}\n+\n+fn main() {}"}, {"sha": "1766cdbee8af2b11d217576dff986e85bc76be5a", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^ the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^\n+\n+error[E0015]: cannot call non-const fn `<T as Foo>::a` in constant functions\n+  --> $DIR/super-traits-fail-2.rs:9:7\n+   |\n+LL |     x.a();\n+   |       ^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "af465cad3d2400c7dfc59f72e5bfac59f45fcb07", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+struct S;\n+impl Foo for S {\n+    fn a(&self) {}\n+}\n+\n+impl const Bar for S {}\n+//~^ ERROR the trait bound\n+\n+fn main() {}"}, {"sha": "9e8b8f8c6ba1f7fce18d85fb0eace9c747141b92", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail.rs:13:12\n+   |\n+LL | impl const Bar for S {}\n+   |            ^^^ the trait `~const Foo` is not implemented for `S`\n+   |\n+note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail.rs:13:12\n+   |\n+LL | impl const Bar for S {}\n+   |            ^^^\n+note: required by a bound in `Bar`\n+  --> $DIR/super-traits-fail.rs:6:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^ required by this bound in `Bar`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | impl const Bar for S where S: ~const Foo {}\n+   |                      +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aded4ca9a998cbe0b4c749e1f2d3e9afa5b6bdca", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits.rs?ref=b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+trait Foo {\n+    fn a(&self);\n+}\n+trait Bar: ~const Foo {}\n+\n+struct S;\n+impl const Foo for S {\n+    fn a(&self) {}\n+}\n+\n+impl const Bar for S {}\n+\n+const fn foo<T: ~const Bar>(t: &T) {\n+    t.a();\n+}\n+\n+const _: () = foo(&S);\n+\n+fn main() {}"}]}