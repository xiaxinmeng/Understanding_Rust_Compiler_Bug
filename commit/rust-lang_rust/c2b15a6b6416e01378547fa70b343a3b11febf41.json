{"sha": "c2b15a6b6416e01378547fa70b343a3b11febf41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjE1YTZiNjQxNmUwMTM3ODU0N2ZhNzBiMzQzYTNiMTFmZWJmNDE=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-04-05T13:37:11Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-05-08T08:58:08Z"}, "message": "Support -C passes in NewPM\n\nAnd report an error if parsing the additional pass pipeline fails.\nThreading through the error accounts for most of the changes here.", "tree": {"sha": "8b5f8e9961b4e898c217af56ad148e577bd072ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5f8e9961b4e898c217af56ad148e577bd072ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b15a6b6416e01378547fa70b343a3b11febf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b15a6b6416e01378547fa70b343a3b11febf41", "html_url": "https://github.com/rust-lang/rust/commit/c2b15a6b6416e01378547fa70b343a3b11febf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b15a6b6416e01378547fa70b343a3b11febf41/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "html_url": "https://github.com/rust-lang/rust/commit/5519cbfe334182f57047ea00368f3fd0b9ca0d1c"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "f612785e5a416c582321e4efa0b7c1aec41e91b6", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -568,10 +568,11 @@ fn thin_lto(\n \n pub(crate) fn run_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n+    diag_handler: &Handler,\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n     thin: bool,\n-) {\n+) -> Result<(), FatalError> {\n     let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &module.name[..]);\n \n     // Now we have one massive module inside of llmod. Time to run the\n@@ -584,9 +585,16 @@ pub(crate) fn run_pass_manager(\n         if write::should_use_new_llvm_pass_manager(config) {\n             let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n             let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n-            write::optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n+            write::optimize_with_new_llvm_pass_manager(\n+                cgcx,\n+                diag_handler,\n+                module,\n+                config,\n+                opt_level,\n+                opt_stage,\n+            )?;\n             debug!(\"lto done\");\n-            return;\n+            return Ok(());\n         }\n \n         let pm = llvm::LLVMCreatePassManager();\n@@ -628,6 +636,7 @@ pub(crate) fn run_pass_manager(\n         llvm::LLVMDisposePassManager(pm);\n     }\n     debug!(\"lto done\");\n+    Ok(())\n }\n \n pub struct ModuleBuffer(&'static mut llvm::ModuleBuffer);\n@@ -850,7 +859,7 @@ pub unsafe fn optimize_thin_module(\n         {\n             info!(\"running thin lto passes over {}\", module.name);\n             let config = cgcx.config(module.kind);\n-            run_pass_manager(cgcx, &module, config, true);\n+            run_pass_manager(cgcx, &diag_handler, &module, config, true)?;\n             save_temp_bitcode(cgcx, &module, \"thin-lto-after-pm\");\n         }\n     }"}, {"sha": "4219797c5cdd0b007bb485025108cf292133bb61", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -415,11 +415,12 @@ pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n+    diag_handler: &Handler,\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n     opt_level: config::OptLevel,\n     opt_stage: llvm::OptStage,\n-) {\n+) -> Result<(), FatalError> {\n     let unroll_loops =\n         opt_level != config::OptLevel::Size && opt_level != config::OptLevel::SizeMin;\n     let using_thin_buffers = opt_stage == llvm::OptStage::PreLinkThinLTO || config.bitcode_needed();\n@@ -449,13 +450,12 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         std::ptr::null_mut()\n     };\n \n+    let extra_passes = config.passes.join(\",\");\n+\n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams.\n     // We would have to add upstream support for this first, before we can support\n     // config.inline_threshold and our more aggressive default thresholds.\n-    // FIXME: NewPM uses an different and more explicit way to textually represent\n-    // pass pipelines. It would probably make sense to expose this, but it would\n-    // require a different format than the current -C passes.\n-    llvm::LLVMRustOptimizeWithNewPassManager(\n+    let result = llvm::LLVMRustOptimizeWithNewPassManager(\n         module.module_llvm.llmod(),\n         &*module.module_llvm.tm,\n         to_pass_builder_opt_level(opt_level),\n@@ -477,7 +477,10 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         llvm_selfprofiler,\n         selfprofile_before_pass_callback,\n         selfprofile_after_pass_callback,\n+        extra_passes.as_ptr().cast(),\n+        extra_passes.len(),\n     );\n+    result.into_result().map_err(|()| llvm_err(diag_handler, \"failed to run LLVM passes\"))\n }\n \n // Unsafe due to LLVM calls.\n@@ -486,7 +489,7 @@ pub(crate) unsafe fn optimize(\n     diag_handler: &Handler,\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n-) {\n+) -> Result<(), FatalError> {\n     let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_optimize\", &module.name[..]);\n \n     let llmod = module.module_llvm.llmod();\n@@ -511,8 +514,14 @@ pub(crate) unsafe fn optimize(\n                 _ if cgcx.opts.cg.linker_plugin_lto.enabled() => llvm::OptStage::PreLinkThinLTO,\n                 _ => llvm::OptStage::PreLinkNoLTO,\n             };\n-            optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n-            return;\n+            return optimize_with_new_llvm_pass_manager(\n+                cgcx,\n+                diag_handler,\n+                module,\n+                config,\n+                opt_level,\n+                opt_stage,\n+            );\n         }\n \n         if cgcx.prof.llvm_recording_enabled() {\n@@ -647,6 +656,7 @@ pub(crate) unsafe fn optimize(\n         llvm::LLVMDisposePassManager(fpm);\n         llvm::LLVMDisposePassManager(mpm);\n     }\n+    Ok(())\n }\n \n unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static mut llvm::Pass>) {"}, {"sha": "bc35aa72965681b9a7bab3532cdd50813049bb67", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -162,7 +162,7 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n         module: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n     ) -> Result<(), FatalError> {\n-        Ok(back::write::optimize(cgcx, diag_handler, module, config))\n+        back::write::optimize(cgcx, diag_handler, module, config)\n     }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n@@ -189,8 +189,9 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n         module: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n         thin: bool,\n-    ) {\n-        back::lto::run_pass_manager(cgcx, module, config, thin)\n+    ) -> Result<(), FatalError> {\n+        let diag_handler = cgcx.create_diag_handler();\n+        back::lto::run_pass_manager(cgcx, &diag_handler, module, config, thin)\n     }\n }\n "}, {"sha": "32fdde9b42e5f0c3abc69eb506e5209b97211758", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -2208,7 +2208,9 @@ extern \"C\" {\n         llvm_selfprofiler: *mut c_void,\n         begin_callback: SelfProfileBeforePassCallback,\n         end_callback: SelfProfileAfterPassCallback,\n-    );\n+        ExtraPasses: *const c_char,\n+        ExtraPassesLen: size_t,\n+    ) -> LLVMRustResult;\n     pub fn LLVMRustPrintModule(\n         M: &'a Module,\n         Output: *const c_char,"}, {"sha": "d6ae689f254b1508b2f48d7ce75b5378ce43838f", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -72,7 +72,7 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n                 let module = module.take().unwrap();\n                 {\n                     let config = cgcx.config(module.kind);\n-                    B::run_lto_pass_manager(cgcx, &module, config, false);\n+                    B::run_lto_pass_manager(cgcx, &module, config, false)?;\n                 }\n                 Ok(module)\n             }"}, {"sha": "93fbee2b49bb57a84c9921982cf00e5543e6e15a", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -58,7 +58,7 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n         llmod: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n         thin: bool,\n-    );\n+    ) -> Result<(), FatalError>;\n }\n \n pub trait ThinBufferMethods: Send + Sync {"}, {"sha": "99ce13a6ed59c8b95ba939a84a904f4fe9adc639", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -736,7 +736,7 @@ struct LLVMRustSanitizerOptions {\n   bool SanitizeHWAddressRecover;\n };\n \n-extern \"C\" void\n+extern \"C\" LLVMRustResult\n LLVMRustOptimizeWithNewPassManager(\n     LLVMModuleRef ModuleRef,\n     LLVMTargetMachineRef TMRef,\n@@ -750,7 +750,8 @@ LLVMRustOptimizeWithNewPassManager(\n     bool InstrumentCoverage, bool InstrumentGCOV,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n-    LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n+    LLVMRustSelfProfileAfterPassCallback AfterPassCallback,\n+    const char *ExtraPasses, size_t ExtraPassesLen) {\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n   PassBuilder::OptimizationLevel OptLevel = fromRust(OptLevelRust);\n@@ -1062,6 +1063,14 @@ LLVMRustOptimizeWithNewPassManager(\n     }\n   }\n \n+  if (ExtraPassesLen) {\n+    if (auto Err = PB.parsePassPipeline(MPM, StringRef(ExtraPasses, ExtraPassesLen))) {\n+      std::string ErrMsg = toString(std::move(Err));\n+      LLVMRustSetLastError(ErrMsg.c_str());\n+      return LLVMRustResult::Failure;\n+    }\n+  }\n+\n   if (NeedThinLTOBufferPasses) {\n     MPM.addPass(CanonicalizeAliasesPass());\n     MPM.addPass(NameAnonGlobalPass());\n@@ -1072,6 +1081,7 @@ LLVMRustOptimizeWithNewPassManager(\n     UpgradeCallsToIntrinsic(&*I++); // must be post-increment, as we remove\n \n   MPM.run(*TheModule, MAM);\n+  return LLVMRustResult::Success;\n }\n \n // Callback to demangle function name"}, {"sha": "ca3c6230af04a57d8bc66eaf440b136ac48cc40d", "filename": "src/test/ui/invalid/invalid-llvm-passes.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -0,0 +1,4 @@\n+// build-fail\n+// compile-flags: -Cpasses=unknown-pass -Z new-llvm-pass-manager=yes\n+\n+fn main() {}"}, {"sha": "ae1f85e41e410768295a2fdf4e19af289a9dbf47", "filename": "src/test/ui/invalid/invalid-llvm-passes.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b15a6b6416e01378547fa70b343a3b11febf41/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b15a6b6416e01378547fa70b343a3b11febf41/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.stderr?ref=c2b15a6b6416e01378547fa70b343a3b11febf41", "patch": "@@ -0,0 +1,4 @@\n+error: failed to run LLVM passes: unknown pass name 'unknown-pass'\n+\n+error: aborting due to previous error\n+"}]}