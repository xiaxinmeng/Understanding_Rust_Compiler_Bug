{"sha": "9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzE4MmE5OWQ4ZmM2M2Y0NjRhNTNlNTJkZTlhMmE3ZmEyMmRlZjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T01:45:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T01:45:26Z"}, "message": "Add lookup checks and intrinsics table to trans.", "tree": {"sha": "613d4755bcb5cc915e0aba0cc46227f28d0d1375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613d4755bcb5cc915e0aba0cc46227f28d0d1375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "html_url": "https://github.com/rust-lang/rust/commit/9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3182a99d8fc63f464a53e52de9a2a7fa22def8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2f2058660ecf0819eee09319d314b3343a03fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2f2058660ecf0819eee09319d314b3343a03fc", "html_url": "https://github.com/rust-lang/rust/commit/7e2f2058660ecf0819eee09319d314b3343a03fc"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "3c2f680073aed13f9a3e58055945af50926a2981", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b3182a99d8fc63f464a53e52de9a2a7fa22def8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3182a99d8fc63f464a53e52de9a2a7fa22def8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "patch": "@@ -44,6 +44,7 @@ type glue_fns = rec(ValueRef activate_glue,\n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n                             hashmap[str, ValueRef] upcalls,\n+                            hashmap[str, ValueRef] intrinsics,\n                             hashmap[str, ValueRef] fn_names,\n                             hashmap[ast.def_id, ValueRef] fn_ids,\n                             hashmap[ast.def_id, @ast.item] items,\n@@ -632,7 +633,8 @@ fn build_memcpy(@block_ctxt cx,\n                 ValueRef dst,\n                 ValueRef src,\n                 TypeRef llty) -> result {\n-    auto memcpy = cx.fcx.ccx.fn_names.get(\"llvm.memcpy\");\n+    check (cx.fcx.ccx.intrinsics.contains_key(\"llvm.memcpy\"));\n+    auto memcpy = cx.fcx.ccx.intrinsics.get(\"llvm.memcpy\");\n     auto src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     auto dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n     auto size = lib.llvm.llvm.LLVMSizeOf(llty);\n@@ -1059,14 +1061,17 @@ fn trans_lval(@block_ctxt cx, &ast.expr e)\n                 case (some[ast.def](?def)) {\n                     alt (def) {\n                         case (ast.def_arg(?did)) {\n+                            check (cx.fcx.llargs.contains_key(did));\n                             ret tup(res(cx, cx.fcx.llargs.get(did)),\n                                     false, did);\n                         }\n                         case (ast.def_local(?did)) {\n+                            check (cx.fcx.lllocals.contains_key(did));\n                             ret tup(res(cx, cx.fcx.lllocals.get(did)),\n                                     true, did);\n                         }\n                         case (ast.def_fn(?did)) {\n+                            check (cx.fcx.ccx.fn_ids.contains_key(did));\n                             ret tup(res(cx, cx.fcx.ccx.fn_ids.get(did)),\n                                     false, did);\n                         }\n@@ -1359,6 +1364,7 @@ impure fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n                 case (ast.decl_local(?local)) {\n                     alt (local.init) {\n                         case (some[@ast.expr](?e)) {\n+                            check (cx.fcx.lllocals.contains_key(local.id));\n                             auto llptr = cx.fcx.lllocals.get(local.id);\n                             sub = trans_expr(cx, *e);\n                             sub.val = sub.bcx.build.Store(sub.val, llptr);\n@@ -1468,6 +1474,7 @@ fn new_fn_ctxt(@crate_ctxt cx,\n                &ast._fn f,\n                ast.def_id fid) -> @fn_ctxt {\n \n+    check (cx.fn_ids.contains_key(fid));\n     let ValueRef llfn = cx.fn_ids.get(fid);\n     cx.fn_names.insert(cx.path, llfn);\n \n@@ -1636,6 +1643,7 @@ fn trans_main_fn(@crate_ctxt cx, ValueRef llcrate) {\n \n     auto llargc = llvm.LLVMGetParam(llmain, 0u);\n     auto llargv = llvm.LLVMGetParam(llmain, 1u);\n+    check (cx.fn_names.contains_key(\"_rust.main\"));\n     auto llrust_main = cx.fn_names.get(\"_rust.main\");\n \n     //\n@@ -1656,14 +1664,22 @@ fn trans_main_fn(@crate_ctxt cx, ValueRef llcrate) {\n \n }\n \n-fn declare_intrinsics(ModuleRef llmod) {\n+fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n+\n     let vec[TypeRef] T_trap_args = vec();\n     // FIXME: switch this to 64-bit memcpy when targeting a 64-bit system.\n     let vec[TypeRef] T_memcpy_args = vec(T_ptr(T_i8()),\n                                          T_ptr(T_i8()),\n                                          T_i32(), T_i32(), T_i1());\n-    decl_cdecl_fn(llmod, \"llvm.trap\", T_fn(T_trap_args, T_void()));\n-    decl_cdecl_fn(llmod, \"llvm.memcpy\", T_fn(T_memcpy_args, T_void()));\n+    auto trap = decl_cdecl_fn(llmod, \"llvm.trap\",\n+                              T_fn(T_trap_args, T_void()));\n+    auto memcpy = decl_cdecl_fn(llmod, \"llvm.memcpy\",\n+                                T_fn(T_memcpy_args, T_void()));\n+\n+    auto intrinsics = new_str_hash[ValueRef]();\n+    intrinsics.insert(\"llvm.trap\", trap);\n+    intrinsics.insert(\"llvm.memcpy\", memcpy);\n+    ret intrinsics;\n }\n \n fn trans_crate(session.session sess, @ast.crate crate, str output) {\n@@ -1673,7 +1689,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n \n     llvm.LLVMSetModuleInlineAsm(llmod, _str.buf(x86.get_module_asm()));\n \n-    declare_intrinsics(llmod);\n+    auto intrinsics = declare_intrinsics(llmod);\n \n     auto glues = @rec(activate_glue = decl_glue(llmod,\n                                                 abi.activate_glue_name()),\n@@ -1701,6 +1717,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n     auto cx = @rec(sess = sess,\n                    llmod = llmod,\n                    upcalls = new_str_hash[ValueRef](),\n+                   intrinsics = intrinsics,\n                    fn_names = new_str_hash[ValueRef](),\n                    fn_ids = new_def_hash[ValueRef](),\n                    items = new_def_hash[@ast.item](),"}, {"sha": "84421a4c1cdfa79662f9f9bf3be1bc1f852f20b3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3182a99d8fc63f464a53e52de9a2a7fa22def8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3182a99d8fc63f464a53e52de9a2a7fa22def8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9b3182a99d8fc63f464a53e52de9a2a7fa22def8", "patch": "@@ -619,6 +619,7 @@ fn unify(&fn_ctxt fcx, @ty expected, @ty actual) -> unify_result {\n                 }\n             }\n             case (ty_local(?actual_id)) {\n+                check (fcx.locals.contains_key(actual_id));\n                 auto actual_ty = fcx.locals.get(actual_id);\n                 auto result = unify_step(fcx, bindings, expected, actual_ty);\n                 alt (result) {\n@@ -828,6 +829,7 @@ fn unify(&fn_ctxt fcx, @ty expected, @ty actual) -> unify_result {\n             }\n \n             case (ty_local(?expected_id)) {\n+                check (fcx.locals.contains_key(expected_id));\n                 auto expected_ty = fcx.locals.get(expected_id);\n                 auto result = unify_step(fcx, bindings, expected_ty, actual);\n                 alt (result) {"}]}