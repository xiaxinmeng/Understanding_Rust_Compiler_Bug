{"sha": "d839d2ecc274f4633bbb621d169d84347ffc2ba9", "node_id": "C_kwDOAAsO6NoAKGQ4MzlkMmVjYzI3NGY0NjMzYmJiNjIxZDE2OWQ4NDM0N2ZmYzJiYTk", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-19T05:47:45Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-05-19T05:47:45Z"}, "message": "let `generate_field_attrs_code` create `FieldInfo`\n\nthis simplifies the code inside the `structure.each` closure argument\nand allows to remove the `vis` field from `FieldInfo`.", "tree": {"sha": "8fcedc33bc4049d8f2ac34720ee51521cee47f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcedc33bc4049d8f2ac34720ee51521cee47f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d839d2ecc274f4633bbb621d169d84347ffc2ba9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYoXawQAKCRAnUl7150IK\nUISQAQC7j2h+aLLVeEqmAJUyKni0VkE1Yl6cv2KVO6aJFSp7UAD/bqHOMMrjbCu4\nkI/CmcAPIUMSbhZbGrC9dEIx5Fx9cws=\n=jIA0\n-----END PGP SIGNATURE-----", "payload": "tree 8fcedc33bc4049d8f2ac34720ee51521cee47f62\nparent 7e9be9240cf1f3c2fc48fffbb202b249821c61b2\nauthor Christian Poveda <git@pvdrz.com> 1652939265 -0500\ncommitter Christian Poveda <git@pvdrz.com> 1652939265 -0500\n\nlet `generate_field_attrs_code` create `FieldInfo`\n\nthis simplifies the code inside the `structure.each` closure argument\nand allows to remove the `vis` field from `FieldInfo`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d839d2ecc274f4633bbb621d169d84347ffc2ba9", "html_url": "https://github.com/rust-lang/rust/commit/d839d2ecc274f4633bbb621d169d84347ffc2ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d839d2ecc274f4633bbb621d169d84347ffc2ba9/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9be9240cf1f3c2fc48fffbb202b249821c61b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9be9240cf1f3c2fc48fffbb202b249821c61b2", "html_url": "https://github.com/rust-lang/rust/commit/7e9be9240cf1f3c2fc48fffbb202b249821c61b2"}], "stats": {"total": 60, "additions": 14, "deletions": 46}, "files": [{"sha": "8c5b64fab5fc13b8baad371a8b678a3975913fa8", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=d839d2ecc274f4633bbb621d169d84347ffc2ba9", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, Type};\n-use synstructure::Structure;\n+use synstructure::{BindingInfo, Structure};\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n pub(crate) struct SessionDiagnosticDerive<'a> {\n@@ -95,20 +95,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                                 false\n                             }\n                     })\n-                    .each(|field_binding| {\n-                        let field = field_binding.ast();\n-                        let field_span = field.span();\n-\n-                        builder.generate_field_attrs_code(\n-                            &field.attrs,\n-                            FieldInfo {\n-                                vis: &field.vis,\n-                                binding: field_binding,\n-                                ty: &field.ty,\n-                                span: &field_span,\n-                            },\n-                        )\n-                    });\n+                    .each(|field_binding| builder.generate_field_attrs_code(field_binding));\n \n                 structure.bind_with(|_| synstructure::BindStyle::Move);\n                 // When a field has attributes like `#[label]` or `#[note]` then it doesn't\n@@ -119,20 +106,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     .filter(|field_binding| {\n                         subdiagnostics_or_empty.contains(&field_binding.binding)\n                     })\n-                    .each(|field_binding| {\n-                        let field = field_binding.ast();\n-                        let field_span = field.span();\n-\n-                        builder.generate_field_attrs_code(\n-                            &field.attrs,\n-                            FieldInfo {\n-                                vis: &field.vis,\n-                                binding: field_binding,\n-                                ty: &field.ty,\n-                                span: &field_span,\n-                            },\n-                        )\n-                    });\n+                    .each(|field_binding| builder.generate_field_attrs_code(field_binding));\n \n                 let span = ast.span().unwrap();\n                 let (diag, sess) = (&builder.diag, &builder.sess);\n@@ -360,30 +334,27 @@ impl SessionDiagnosticDeriveBuilder {\n         Ok(tokens.drain(..).collect())\n     }\n \n-    fn generate_field_attrs_code(\n-        &mut self,\n-        attrs: &[syn::Attribute],\n-        info: FieldInfo<'_>,\n-    ) -> TokenStream {\n-        let field_binding = &info.binding.binding;\n+    fn generate_field_attrs_code(&mut self, binding_info: &BindingInfo<'_>) -> TokenStream {\n+        let field = binding_info.ast();\n+        let field_binding = &binding_info.binding;\n \n-        let inner_ty = FieldInnerTy::from_type(&info.ty);\n+        let inner_ty = FieldInnerTy::from_type(&field.ty);\n \n         // When generating `set_arg` or `add_subdiagnostic` calls, move data rather than\n         // borrow it to avoid requiring clones - this must therefore be the last use of\n         // each field (for example, any formatting machinery that might refer to a field\n         // should be generated already).\n-        if attrs.is_empty() {\n+        if field.attrs.is_empty() {\n             let diag = &self.diag;\n-            let ident = info.binding.ast().ident.as_ref().unwrap();\n+            let ident = field.ident.as_ref().unwrap();\n             quote! {\n                 #diag.set_arg(\n                     stringify!(#ident),\n                     #field_binding\n                 );\n             }\n         } else {\n-            attrs\n+            field.attrs\n                 .iter()\n                 .map(move |attr| {\n                     let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -401,10 +372,9 @@ impl SessionDiagnosticDeriveBuilder {\n                         .generate_inner_field_code(\n                             attr,\n                             FieldInfo {\n-                                vis: info.vis,\n-                                binding: info.binding,\n-                                ty: inner_ty.inner_type().unwrap_or(&info.ty),\n-                                span: info.span,\n+                                binding: binding_info,\n+                                ty: inner_ty.inner_type().unwrap_or(&field.ty),\n+                                span: &field.span(),\n                             },\n                             binding,\n                         )"}, {"sha": "df01419c82a8eea2cbe1e02b4a2ee7cd20b7dcb0", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=d839d2ecc274f4633bbb621d169d84347ffc2ba9", "patch": "@@ -303,7 +303,6 @@ impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n \n         let inner_ty = FieldInnerTy::from_type(&ast.ty);\n         let info = FieldInfo {\n-            vis: &ast.vis,\n             binding: binding,\n             ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n             span: &ast.span(),"}, {"sha": "636bcf1f7b1d930cce6b7b99bf07e50ebf2c2032", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d839d2ecc274f4633bbb621d169d84347ffc2ba9/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=d839d2ecc274f4633bbb621d169d84347ffc2ba9", "patch": "@@ -4,7 +4,7 @@ use proc_macro2::TokenStream;\n use quote::{format_ident, quote, ToTokens};\n use std::collections::BTreeSet;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple, Visibility};\n+use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple};\n use synstructure::BindingInfo;\n \n /// Checks whether the type name of `ty` matches `name`.\n@@ -158,7 +158,6 @@ impl<'ty> FieldInnerTy<'ty> {\n /// Field information passed to the builder. Deliberately omits attrs to discourage the\n /// `generate_*` methods from walking the attributes themselves.\n pub(crate) struct FieldInfo<'a> {\n-    pub(crate) vis: &'a Visibility,\n     pub(crate) binding: &'a BindingInfo<'a>,\n     pub(crate) ty: &'a Type,\n     pub(crate) span: &'a proc_macro2::Span,"}]}