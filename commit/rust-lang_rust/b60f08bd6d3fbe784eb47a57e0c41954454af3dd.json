{"sha": "b60f08bd6d3fbe784eb47a57e0c41954454af3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGYwOGJkNmQzZmJlNzg0ZWI0N2E1N2UwYzQxOTU0NDU0YWYzZGQ=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2019-09-24T01:39:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-01-30T12:38:25Z"}, "message": "rustdoc: NodeId is now DefId", "tree": {"sha": "33c998342ad86f9e2538d73efc6044bdd86b9b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c998342ad86f9e2538d73efc6044bdd86b9b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60f08bd6d3fbe784eb47a57e0c41954454af3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60f08bd6d3fbe784eb47a57e0c41954454af3dd", "html_url": "https://github.com/rust-lang/rust/commit/b60f08bd6d3fbe784eb47a57e0c41954454af3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60f08bd6d3fbe784eb47a57e0c41954454af3dd/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "url": "https://api.github.com/repos/rust-lang/rust/commits/320ada6479b3e29c7d9a66bc56ac44c2d2b57566", "html_url": "https://github.com/rust-lang/rust/commit/320ada6479b3e29c7d9a66bc56ac44c2d2b57566"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "3acfb82fe78407e9f4ffebcb5626817ba56732c6", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b60f08bd6d3fbe784eb47a57e0c41954454af3dd/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60f08bd6d3fbe784eb47a57e0c41954454af3dd/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=b60f08bd6d3fbe784eb47a57e0c41954454af3dd", "patch": "@@ -43,7 +43,7 @@ crate struct Cache {\n     /// found on that implementation.\n     pub impls: FxHashMap<DefId, Vec<Impl>>,\n \n-    /// Maintains a mapping of local crate `NodeId`s to the fully qualified name\n+    /// Maintains a mapping of local crate `DefId`s to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n@@ -358,6 +358,7 @@ impl DocFolder for Cache {\n             | clean::ForeignTypeItem\n             | clean::MacroItem(..)\n             | clean::ProcMacroItem(..)\n+            | clean::VariantItem(..)\n                 if !self.stripped_mod =>\n             {\n                 // Re-exported items mean that the same id can show up twice\n@@ -373,13 +374,6 @@ impl DocFolder for Cache {\n                 }\n                 self.add_aliases(&item);\n             }\n-            // Link variants to their parent enum because pages aren't emitted\n-            // for each variant.\n-            clean::VariantItem(..) if !self.stripped_mod => {\n-                let mut stack = self.stack.clone();\n-                stack.pop();\n-                self.paths.insert(item.def_id, (stack, ItemType::Enum));\n-            }\n \n             clean::PrimitiveItem(..) => {\n                 self.add_aliases(&item);\n@@ -396,7 +390,8 @@ impl DocFolder for Cache {\n             | clean::EnumItem(..)\n             | clean::ForeignTypeItem\n             | clean::StructItem(..)\n-            | clean::UnionItem(..) => {\n+            | clean::UnionItem(..)\n+            | clean::VariantItem(..) => {\n                 self.parent_stack.push(item.def_id);\n                 self.parent_is_trait_impl = false;\n                 true\n@@ -564,7 +559,7 @@ fn extern_location(\n \n /// Builds the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n-    let mut nodeid_to_pathid = FxHashMap::default();\n+    let mut defid_to_pathid = FxHashMap::default();\n     let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = vec![];\n \n@@ -586,21 +581,21 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         }\n     }\n \n-    // Reduce `NodeId` in paths into smaller sequential numbers,\n+    // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n     let mut lastpath = String::new();\n     let mut lastpathid = 0usize;\n \n     for item in search_index {\n-        item.parent_idx = item.parent.map(|nodeid| {\n-            if nodeid_to_pathid.contains_key(&nodeid) {\n-                *nodeid_to_pathid.get(&nodeid).expect(\"no pathid\")\n+        item.parent_idx = item.parent.map(|defid| {\n+            if defid_to_pathid.contains_key(&defid) {\n+                *defid_to_pathid.get(&defid).expect(\"no pathid\")\n             } else {\n                 let pathid = lastpathid;\n-                nodeid_to_pathid.insert(nodeid, pathid);\n+                defid_to_pathid.insert(defid, pathid);\n                 lastpathid += 1;\n \n-                let &(ref fqp, short) = paths.get(&nodeid).unwrap();\n+                let &(ref fqp, short) = paths.get(&defid).unwrap();\n                 crate_paths.push((short, fqp.last().unwrap().clone()));\n                 pathid\n             }"}]}