{"sha": "a7d98c78377e5083d5add5d3ae8d26ffa938c005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDk4Yzc4Mzc3ZTUwODNkNWFkZDVkM2FlOGQyNmZmYTkzOGMwMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-02T08:30:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-02T08:30:03Z"}, "message": "Auto merge of #45630 - joshleeb:iss35241, r=estebank\n\nImprove display of error E0308\n\nRef. Forgetting to call a variant constructor causes a confusing error message #35241.\n\nThis PR modifies [`note_type_err`](https://github.com/rust-lang/rust/blob/b7041bfab3a83702a8026fb7a18d8ea7d54cc648/src/librustc/infer/error_reporting/mod.rs#L669-L674) to display a `help` message when a `TyFnPtr` or `TyFnDef` are found and the return type, of the function or function pointer, is the same as the type that is expected.\n\nThe output of compiling\n\n```rust\nstruct Foo(u32);\n\nfn test() -> Foo { Foo }\n\nfn main() {}\n```\n\nis now\n\n```bash\n$ rustc src/test/ui/issue-35241.rs\nerror[E0308]: mismatched types\n  --> src/test/ui/issue-35241.rs:13:20\n   |\n13 | fn test() -> Foo { Foo }\n   |              ---   ^^^ expected struct `Foo`, found fn item\n   |              |\n   |              expected `Foo` because of return type\n   |\n   = help: did you mean `Foo { /* fields */ }`?\n   = note: expected type `Foo`\n              found type `fn(u32) -> Foo {Foo::{{constructor}}}`\n\nerror: aborting due to previous error\n```", "tree": {"sha": "b476c024bb7cf49cf4cbd706564d58b4ddb63a1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b476c024bb7cf49cf4cbd706564d58b4ddb63a1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d98c78377e5083d5add5d3ae8d26ffa938c005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d98c78377e5083d5add5d3ae8d26ffa938c005", "html_url": "https://github.com/rust-lang/rust/commit/a7d98c78377e5083d5add5d3ae8d26ffa938c005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d98c78377e5083d5add5d3ae8d26ffa938c005/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2379faa933923a97158a4939b9fc82dcbd45430f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2379faa933923a97158a4939b9fc82dcbd45430f", "html_url": "https://github.com/rust-lang/rust/commit/2379faa933923a97158a4939b9fc82dcbd45430f"}, {"sha": "87c951da0f36405ee9d7226f63a7208c58a16d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c951da0f36405ee9d7226f63a7208c58a16d07", "html_url": "https://github.com/rust-lang/rust/commit/87c951da0f36405ee9d7226f63a7208c58a16d07"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "aac67b528c2d08d3b6a2b28d21d8a38c4bc407e1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a7d98c78377e5083d5add5d3ae8d26ffa938c005", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, Region, Ty, TyCtxt, TypeFoldable, TypeVariants};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -673,14 +673,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                          values: Option<ValuePairs<'tcx>>,\n                          terr: &TypeError<'tcx>)\n     {\n-        let (expected_found, is_simple_error) = match values {\n-            None => (None, false),\n+        let (expected_found, exp_found, is_simple_error) = match values {\n+            None => (None, None, false),\n             Some(values) => {\n-                let is_simple_error = match values {\n+                let (is_simple_error, exp_found) = match values {\n                     ValuePairs::Types(exp_found) => {\n-                        exp_found.expected.is_primitive() && exp_found.found.is_primitive()\n+                        let is_simple_err = exp_found.expected.is_primitive()\n+                            && exp_found.found.is_primitive();\n+\n+                        (is_simple_err, Some(exp_found))\n                     }\n-                    _ => false,\n+                    _ => (false, None),\n                 };\n                 let vals = match self.values_str(&values) {\n                     Some((expected, found)) => Some((expected, found)),\n@@ -690,12 +693,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         return\n                     }\n                 };\n-                (vals, is_simple_error)\n+                (vals, exp_found, is_simple_error)\n             }\n         };\n \n         let span = cause.span;\n \n+        diag.span_label(span, terr.to_string());\n+        if let Some((sp, msg)) = secondary_span {\n+            diag.span_label(sp, msg);\n+        }\n+\n         if let Some((expected, found)) = expected_found {\n             match (terr, is_simple_error, expected == found) {\n                 (&TypeError::Sorts(ref values), false, true) => {\n@@ -704,18 +712,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n                         &format!(\" ({})\", values.found.sort_string(self.tcx)));\n                 }\n-                (_, false,  _) => {\n+                (_, false, _) => {\n+                    if let Some(exp_found) = exp_found {\n+                        let (def_id, ret_ty) = match exp_found.found.sty {\n+                            TypeVariants::TyFnDef(def, _) => {\n+                                (Some(def), Some(self.tcx.fn_sig(def).output()))\n+                            }\n+                            _ => (None, None)\n+                        };\n+\n+                        let exp_is_struct = match exp_found.expected.sty {\n+                            TypeVariants::TyAdt(def, _) => def.is_struct(),\n+                            _ => false\n+                        };\n+\n+                        if let (Some(def_id), Some(ret_ty)) = (def_id, ret_ty) {\n+                            if exp_is_struct && exp_found.expected == ret_ty.0 {\n+                                let message = format!(\n+                                    \"did you mean `{}(/* fields */)`?\",\n+                                    self.tcx.item_path_str(def_id)\n+                                );\n+                                diag.span_label(cause.span, message);\n+                            }\n+                        }\n+                    }\n+\n                     diag.note_expected_found(&\"type\", expected, found);\n                 }\n                 _ => (),\n             }\n         }\n \n-        diag.span_label(span, terr.to_string());\n-        if let Some((sp, msg)) = secondary_span {\n-            diag.span_label(sp, msg);\n-        }\n-\n         self.note_error_origin(diag, &cause);\n         self.check_and_note_conflicting_crates(diag, terr, span);\n         self.tcx.note_and_explain_type_err(diag, terr, span);"}, {"sha": "7ec3974854b3373d403233c6d731534f4c730f6f", "filename": "src/test/ui/issue-35241.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Ftest%2Fui%2Fissue-35241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Ftest%2Fui%2Fissue-35241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35241.rs?ref=a7d98c78377e5083d5add5d3ae8d26ffa938c005", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(u32);\n+\n+fn test() -> Foo { Foo }\n+\n+fn main() {}"}, {"sha": "bb1bba152bbd358d48f8fb6e9d4b423c4359f176", "filename": "src/test/ui/issue-35241.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Ftest%2Fui%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7d98c78377e5083d5add5d3ae8d26ffa938c005/src%2Ftest%2Fui%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35241.stderr?ref=a7d98c78377e5083d5add5d3ae8d26ffa938c005", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-35241.rs:13:20\n+   |\n+13 | fn test() -> Foo { Foo }\n+   |              ---   ^^^\n+   |              |     |\n+   |              |     expected struct `Foo`, found fn item\n+   |              |     did you mean `Foo(/* fields */)`?\n+   |              expected `Foo` because of return type\n+   |\n+   = note: expected type `Foo`\n+              found type `fn(u32) -> Foo {Foo::{{constructor}}}`\n+\n+error: aborting due to previous error\n+"}]}