{"sha": "b77aefb76ebb9e73cf5a26885c131674495f434d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3N2FlZmI3NmViYjllNzNjZjVhMjY4ODVjMTMxNjc0NDk1ZjQzNGQ=", "commit": {"author": {"name": "Patrick Mooney", "email": "pmooney@oxide.computer", "date": "2020-04-13T23:37:22Z"}, "committer": {"name": "Patrick Mooney", "email": "pmooney@oxide.computer", "date": "2020-04-14T20:36:07Z"}, "message": "Add illumos triple\n\nCo-Authored-By: Jason King <jason.brian.king@gmail.com>\nCo-Authored-By: Joshua M. Clulow <jmc@oxide.computer>", "tree": {"sha": "f7feb6eb191a95f958b548d4a946537c7cc9c54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7feb6eb191a95f958b548d4a946537c7cc9c54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77aefb76ebb9e73cf5a26885c131674495f434d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77aefb76ebb9e73cf5a26885c131674495f434d", "html_url": "https://github.com/rust-lang/rust/commit/b77aefb76ebb9e73cf5a26885c131674495f434d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77aefb76ebb9e73cf5a26885c131674495f434d/comments", "author": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pfmooney", "id": 1555070, "node_id": "MDQ6VXNlcjE1NTUwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1555070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfmooney", "html_url": "https://github.com/pfmooney", "followers_url": "https://api.github.com/users/pfmooney/followers", "following_url": "https://api.github.com/users/pfmooney/following{/other_user}", "gists_url": "https://api.github.com/users/pfmooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfmooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfmooney/subscriptions", "organizations_url": "https://api.github.com/users/pfmooney/orgs", "repos_url": "https://api.github.com/users/pfmooney/repos", "events_url": "https://api.github.com/users/pfmooney/events{/privacy}", "received_events_url": "https://api.github.com/users/pfmooney/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc02580e4e80476ac1ded2cc1008eaf8b8400e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc02580e4e80476ac1ded2cc1008eaf8b8400e6", "html_url": "https://github.com/rust-lang/rust/commit/edc02580e4e80476ac1ded2cc1008eaf8b8400e6"}], "stats": {"total": 384, "additions": 362, "deletions": 22}, "files": [{"sha": "55f986b60086c2077a8fa7f3068192ec27f8ac32", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -1786,9 +1786,9 @@ checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.66\"\n+version = \"0.2.69\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n+checksum = \"99e85c08494b21a9054e7fe1374a732aeadaff3980b6990b94bfd3a70f690005\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -4661,9 +4661,9 @@ checksum = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n \n [[package]]\n name = \"socket2\"\n-version = \"0.3.11\"\n+version = \"0.3.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n+checksum = \"03088793f677dce356f3ccc2edb1b314ad191ab702a5de3faf49304f7e104918\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\","}, {"sha": "d9620a21d37cde4e4b9413ce6f9ea340caf8afeb", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -15,7 +15,7 @@ cc = \"1.0.1\"\n num_cpus = \"1.0\"\n memmap = \"0.7\"\n log = \"0.4.5\"\n-libc = \"0.2.44\"\n+libc = \"0.2.50\"\n jobserver = \"0.1.11\"\n tempfile = \"3.1\"\n "}, {"sha": "0e45652f9511dcd731cda2269001b3b888f71f1b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -759,7 +759,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                         }\n                     }\n                     LinkerFlavor::Gcc => {\n-                        if cfg!(target_os = \"solaris\") {\n+                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n                             // been Sun Studio, which is not flag-compatible\n                             // with \"gcc\".  This history casts a long shadow,"}, {"sha": "35ac346fb3f6f1586d6f32167aa00b04a9c1be41", "filename": "src/librustc_target/spec/illumos_base.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -0,0 +1,48 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut late_link_args = LinkArgs::new();\n+    late_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // LLVM will insert calls to the stack protector functions\n+            // \"__stack_chk_fail\" and \"__stack_chk_guard\" into code in native\n+            // object files.  Some platforms include these symbols directly in\n+            // libc, but at least historically these have been provided in\n+            // libssp.so on illumos and Solaris systems.\n+            \"-lssp\".to_string(),\n+        ],\n+    );\n+\n+    TargetOptions {\n+        dynamic_linking: true,\n+        executables: true,\n+        has_rpath: true,\n+        target_family: Some(\"unix\".to_string()),\n+        is_like_solaris: true,\n+        limit_rdylib_exports: false, // Linker doesn't support this\n+        eliminate_frame_pointer: false,\n+        late_link_args,\n+\n+        // While we support ELF TLS, rust requires a way to register\n+        // cleanup handlers (in C, this would be something along the lines of:\n+        // void register_callback(void (*fn)(void *), void *arg);\n+        // (see src/libstd/sys/unix/fast_thread_local.rs) that is currently\n+        // missing in illumos.  For now at least, we must fallback to using\n+        // pthread_{get,set}specific.\n+        //has_elf_tls: true,\n+\n+        // FIXME: Currently, rust is invoking cc to link, which ends up\n+        // causing these to get included twice.  We should eventually transition\n+        // to having rustc invoke ld directly, in which case these will need to\n+        // be uncommented.\n+        //\n+        // We want XPG6 behavior from libc and libm.  See standards(5)\n+        //pre_link_objects_exe: vec![\n+        //    \"/usr/lib/amd64/values-Xc.o\".to_string(),\n+        //    \"/usr/lib/amd64/values-xpg6.o\".to_string(),\n+        //],\n+        ..Default::default()\n+    }\n+}"}, {"sha": "dbbb1d5b7fdeb97d9be1d347ea3eb9245a251060", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -56,6 +56,7 @@ mod fuchsia_base;\n mod haiku_base;\n mod hermit_base;\n mod hermit_kernel_base;\n+mod illumos_base;\n mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n@@ -447,6 +448,8 @@ supported_targets! {\n     (\"x86_64-sun-solaris\", \"x86_64-pc-solaris\", x86_64_sun_solaris),\n     (\"sparcv9-sun-solaris\", sparcv9_sun_solaris),\n \n+    (\"x86_64-unknown-illumos\", x86_64_unknown_illumos),\n+\n     (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),\n     (\"i686-pc-windows-gnu\", i686_pc_windows_gnu),\n     (\"i686-uwp-windows-gnu\", i686_uwp_windows_gnu),"}, {"sha": "8d461f67397f279b21665afa6df21189a695d34a", "filename": "src/librustc_target/spec/x86_64_unknown_illumos.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::illumos_base::opts();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string(), \"-std=c99\".to_string()]);\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        // LLVM does not currently have a separate illumos target,\n+        // so we still pass Solaris to it\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"illumos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "57d499e38a77b83c15a82fc650dc62661222b055", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -360,6 +360,7 @@ impl<'a> fmt::Display for Html<'a> {\n                         \"fuchsia\" => \"Fuchsia\",\n                         \"haiku\" => \"Haiku\",\n                         \"hermit\" => \"HermitCore\",\n+                        \"illumos\" => \"illumos\",\n                         \"ios\" => \"iOS\",\n                         \"l4re\" => \"L4Re\",\n                         \"linux\" => \"Linux\","}, {"sha": "743a1778fbda339c4675ebe94fa663473f869ad7", "filename": "src/libstd/build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -25,6 +25,14 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=posix4\");\n         println!(\"cargo:rustc-link-lib=pthread\");\n         println!(\"cargo:rustc-link-lib=resolv\");\n+    } else if target.contains(\"illumos\") {\n+        println!(\"cargo:rustc-link-lib=socket\");\n+        println!(\"cargo:rustc-link-lib=posix4\");\n+        println!(\"cargo:rustc-link-lib=pthread\");\n+        println!(\"cargo:rustc-link-lib=resolv\");\n+        println!(\"cargo:rustc-link-lib=nsl\");\n+        // Use libumem for the (malloc-compatible) allocator\n+        println!(\"cargo:rustc-link-lib=umem\");\n     } else if target.contains(\"apple-darwin\") {\n         println!(\"cargo:rustc-link-lib=System\");\n "}, {"sha": "5cf9cb73d4bf9c0743c7c7e63a5db4e0144a8458", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -919,7 +919,7 @@ impl f64 {\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN).\n     fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n-        if !cfg!(target_os = \"solaris\") {\n+        if !cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n             log_fn(self)\n         } else {\n             if self.is_finite() {"}, {"sha": "2abbf1fa9fa16197ef270fd9e1bd50ae3c8ec73c", "filename": "src/libstd/os/illumos/fs.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -0,0 +1,118 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use crate::os::illumos::raw;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor methods of this trait\"\n+    )]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "e61926f89356a6e2d39a8220279b16efd0ad80ac", "filename": "src/libstd/os/illumos/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -0,0 +1,6 @@\n+//! illumos-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub mod raw;"}, {"sha": "88c832ae7c77327ac70f3724d8049fa15d34092a", "filename": "src/libstd/os/illumos/raw.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -0,0 +1,74 @@\n+//! illumos-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by the standard library, the `libc` \\\n+    crate on crates.io should be used instead for the correct definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = u32;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __unused: [u8; 16],\n+}"}, {"sha": "fd6ee088e961c123fc6521aa3164e1bdce249774", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -52,6 +52,8 @@ pub mod freebsd;\n pub mod fuchsia;\n #[cfg(target_os = \"haiku\")]\n pub mod haiku;\n+#[cfg(target_os = \"illumos\")]\n+pub mod illumos;\n #[cfg(target_os = \"ios\")]\n pub mod ios;\n #[cfg(target_os = \"macos\")]"}, {"sha": "8e193935460eb1f450ccb1cd9fd9ffcfb9ac66f3", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -52,7 +52,12 @@ unsafe impl GlobalAlloc for System {\n     }\n }\n \n-#[cfg(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\"))]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"illumos\",\n+    target_os = \"redox\",\n+    target_os = \"solaris\"\n+))]\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     // On android we currently target API level 9 which unfortunately\n@@ -75,7 +80,12 @@ unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     libc::memalign(layout.align(), layout.size()) as *mut u8\n }\n \n-#[cfg(not(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\")))]\n+#[cfg(not(any(\n+    target_os = \"android\",\n+    target_os = \"illumos\",\n+    target_os = \"redox\",\n+    target_os = \"solaris\"\n+)))]\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     let mut out = ptr::null_mut();"}, {"sha": "4c3e8542d576df350ae060b7a4744c8eb99a7485", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -65,6 +65,7 @@ impl DoubleEndedIterator for Args {\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     target_os = \"emscripten\",\n     target_os = \"haiku\",\n     target_os = \"l4re\","}, {"sha": "7f5e9b04dba4b69b38f1cf1ade48f6096f7ba8b4", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -97,6 +97,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"illumos\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"illumos\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}\n+\n #[cfg(target_os = \"haiku\")]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "1bba56e334a2e86c8245cf376a548ad3b5d45d5e", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -153,6 +153,7 @@ impl FileDesc {\n     #[cfg(not(any(\n         target_env = \"newlib\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"emscripten\",\n         target_os = \"fuchsia\",\n         target_os = \"l4re\",\n@@ -169,6 +170,7 @@ impl FileDesc {\n     #[cfg(any(\n         target_env = \"newlib\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"emscripten\",\n         target_os = \"fuchsia\",\n         target_os = \"l4re\","}, {"sha": "a233aa47dff5807d777d2319c849f7ee7eabc850", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -22,6 +22,7 @@ use libc::fstatat64;\n     target_os = \"linux\",\n     target_os = \"emscripten\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\"\n@@ -200,7 +201,12 @@ pub struct DirEntry {\n     // on Solaris and Fuchsia because a) it uses a zero-length\n     // array to store the name, b) its lifetime between readdir\n     // calls is not guaranteed.\n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\"\n+    ))]\n     name: Box<[u8]>,\n }\n \n@@ -403,7 +409,12 @@ impl fmt::Debug for ReadDir {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\",\n+        target_os = \"illumos\"\n+    ))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         use crate::slice;\n \n@@ -441,7 +452,12 @@ impl Iterator for ReadDir {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\")))]\n+    #[cfg(not(any(\n+        target_os = \"solaris\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\",\n+        target_os = \"illumos\"\n+    )))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         if self.end_of_stream {\n             return None;\n@@ -514,12 +530,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"haiku\"))]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"haiku\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         lstat(&self.path()).map(|m| m.file_type())\n     }\n \n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"haiku\")))]\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"haiku\")))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -540,6 +556,7 @@ impl DirEntry {\n         target_os = \"emscripten\",\n         target_os = \"android\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"haiku\",\n         target_os = \"l4re\",\n         target_os = \"fuchsia\",\n@@ -586,7 +603,12 @@ impl DirEntry {\n     fn name_bytes(&self) -> &[u8] {\n         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes() }\n     }\n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\"\n+    ))]\n     fn name_bytes(&self) -> &[u8] {\n         &*self.name\n     }"}, {"sha": "0154609d939f3071f47fe184d5b1d610f92a7d5a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -17,6 +17,8 @@ pub use crate::os::freebsd as platform;\n pub use crate::os::fuchsia as platform;\n #[cfg(all(not(doc), target_os = \"haiku\"))]\n pub use crate::os::haiku as platform;\n+#[cfg(all(not(doc), target_os = \"illumos\"))]\n+pub use crate::os::illumos as platform;\n #[cfg(all(not(doc), target_os = \"ios\"))]\n pub use crate::os::ios as platform;\n #[cfg(all(not(doc), target_os = \"l4re\"))]"}, {"sha": "a9cd5094997bd68b9e2ae6e675f0bcb61862777d", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -54,7 +54,7 @@ extern \"C\" {\n         ),\n         link_name = \"__errno\"\n     )]\n-    #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n+    #[cfg_attr(any(target_os = \"solaris\", target_os = \"illumos\"), link_name = \"___errno\")]\n     #[cfg_attr(\n         any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\"),\n         link_name = \"__error\"\n@@ -357,7 +357,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"solaris\"))]\n+#[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     extern \"C\" {\n         fn getexecname() -> *const c_char;"}, {"sha": "5e10357835056c59b2e5c5715f0c5552b9826c57", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -33,6 +33,7 @@ impl Drop for Handler {\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n     target_os = \"openbsd\"\n ))]\n@@ -162,7 +163,8 @@ mod imp {\n         target_os = \"freebsd\",\n         target_os = \"netbsd\",\n         target_os = \"openbsd\",\n-        target_os = \"solaris\"\n+        target_os = \"solaris\",\n+        target_os = \"illumos\"\n     ))]\n     unsafe fn get_stack() -> libc::stack_t {\n         libc::stack_t { ss_sp: get_stackp(), ss_flags: 0, ss_size: SIGSTKSZ }\n@@ -214,6 +216,7 @@ mod imp {\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n     target_os = \"openbsd\"\n )))]"}, {"sha": "895ea48e2b43e5e0d916e20da893793286647ac3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -132,7 +132,7 @@ impl Thread {\n         }\n     }\n \n-    #[cfg(target_os = \"solaris\")]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n     pub fn set_name(name: &CStr) {\n         weak! {\n             fn pthread_setname_np(\n@@ -155,7 +155,7 @@ impl Thread {\n         target_os = \"redox\"\n     ))]\n     pub fn set_name(_name: &CStr) {\n-        // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.\n+        // Newlib, Haiku, and Emscripten have no way to set a thread name.\n     }\n     #[cfg(target_os = \"fuchsia\")]\n     pub fn set_name(_name: &CStr) {"}, {"sha": "cdd3d2edf1fa1c5cd769a204ef5bc3f3fe40ef03", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -17,7 +17,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"ios\", target_os = \"macos\",\n-        target_os = \"openbsd\", target_os = \"netbsd\",\n+        target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"illumos\",\n         target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))] {\n         use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n         use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n@@ -43,7 +43,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n-        target_os = \"solaris\"))] {\n+        target_os = \"solaris\", target_os = \"illumos\"))] {\n         use libc::c_uchar;\n         type IpV4MultiCastType = c_uchar;\n     } else {"}, {"sha": "e8f3820558a6d7936db86ff2bbb018eb0830e8db", "filename": "src/libtest/helpers/concurrency.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fconcurrency.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -77,6 +77,7 @@ pub fn get_concurrency() -> usize {\n         target_os = \"linux\",\n         target_os = \"macos\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n     ))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }"}, {"sha": "c8d2419ab4514d92c68628fc7ce9a7351d3e6eea", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -30,6 +30,8 @@ fn main() {\n         }\n     } else if target.contains(\"solaris\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n+    } else if target.contains(\"illumos\") {\n+        println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"dragonfly\") {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n     } else if target.contains(\"pc-windows-gnu\") {"}, {"sha": "6de07d3e5cfd8c285e109a5ded4389bbc50c9404", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -139,6 +139,7 @@ static TARGETS: &[&str] = &[\n     \"x86_64-pc-solaris\",\n     \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-illumos\",\n     \"x86_64-unknown-linux-gnu\",\n     \"x86_64-unknown-linux-gnux32\",\n     \"x86_64-unknown-linux-musl\","}, {"sha": "c61bee0f8d9eacf67b12cfc1a204fd5f7e33c66c", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77aefb76ebb9e73cf5a26885c131674495f434d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=b77aefb76ebb9e73cf5a26885c131674495f434d", "patch": "@@ -21,6 +21,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"fuchsia\", \"fuchsia\"),\n     (\"haiku\", \"haiku\"),\n     (\"hermit\", \"hermit\"),\n+    (\"illumos\", \"illumos\"),\n     (\"ios\", \"ios\"),\n     (\"l4re\", \"l4re\"),\n     (\"linux\", \"linux\"),"}]}