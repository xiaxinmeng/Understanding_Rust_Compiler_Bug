{"sha": "155bfe461258de55a34ca4027a4d5b5c0e64209f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWJmZTQ2MTI1OGRlNTVhMzRjYTQwMjdhNGQ1YjVjMGU2NDIwOWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T19:20:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T19:20:00Z"}, "message": "Rollup merge of #63081 - petrochenkov:cleantidy, r=Mark-Simulacrum\n\ntidy: Cleanup the directory whitelist\n\nSome entries were outdated - pre-\"llvm-project\", pre-\"crates.io\", pre-\"Cargo.toml outside of src\".\nSome entries were unnecessary - `owning_ref` could be fixed and directories outside of `src` are not visited by tidy at all.\n\nr? @Mark-Simulacrum", "tree": {"sha": "9db8abbedc59aa00d1845b7fc7e96d01c82af4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db8abbedc59aa00d1845b7fc7e96d01c82af4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155bfe461258de55a34ca4027a4d5b5c0e64209f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPfVhCRBK7hj4Ov3rIwAAdHIIAKlObsTX7AZnhpeLzVix1gLN\nkOPYfJw4IJDDBRIoHz7xjTetrHFgjRmRjPh5JffO6aO1jN4hLZ+ZddRQUurIvT/f\nk1tfpGDi1ar3QvSCDmjn9gOxiRkEgibIphnpSM+GtMv6dYMhxLzlKLoSM2zpTno9\ncYR28umbu98rbwM2lqcI5Hu9wvo/ib3Hl/bgrIV5fEUx21QcFS96ltMxhyIphZGZ\ncxzYA4SASIDO9lwKeLZjkNMhhUumfT5FZKsCxsVfdAz/ilovslF5lAaxqDLb8CJY\n/EXyneaFRdDH8TqYUHfwNYAsucRYmK29bhDqKXm9yYBqVNo4TFRtDYnjURMlQlE=\n=EPr0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9db8abbedc59aa00d1845b7fc7e96d01c82af4f7\nparent 117fa1de982da53977692c4636d58730c8a75b10\nparent 61729b3bf0e439ebe6cd785b3e6ae02ab24592c0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564341600 +0200\ncommitter GitHub <noreply@github.com> 1564341600 +0200\n\nRollup merge of #63081 - petrochenkov:cleantidy, r=Mark-Simulacrum\n\ntidy: Cleanup the directory whitelist\n\nSome entries were outdated - pre-\"llvm-project\", pre-\"crates.io\", pre-\"Cargo.toml outside of src\".\nSome entries were unnecessary - `owning_ref` could be fixed and directories outside of `src` are not visited by tidy at all.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155bfe461258de55a34ca4027a4d5b5c0e64209f", "html_url": "https://github.com/rust-lang/rust/commit/155bfe461258de55a34ca4027a4d5b5c0e64209f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155bfe461258de55a34ca4027a4d5b5c0e64209f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117fa1de982da53977692c4636d58730c8a75b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/117fa1de982da53977692c4636d58730c8a75b10", "html_url": "https://github.com/rust-lang/rust/commit/117fa1de982da53977692c4636d58730c8a75b10"}, {"sha": "61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0", "html_url": "https://github.com/rust-lang/rust/commit/61729b3bf0e439ebe6cd785b3e6ae02ab24592c0"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "e9b33c13ff8a988a43e9ba3621371d4e8d9f2dfd", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=155bfe461258de55a34ca4027a4d5b5c0e64209f", "patch": "@@ -10,7 +10,7 @@ This allows moving and dropping of a `OwningRef` without needing to recreate the\n This can sometimes be useful because Rust borrowing rules normally prevent\n moving a type that has been moved from. For example, this kind of code gets rejected:\n \n-```rust,ignore\n+```compile_fail,E0515\n fn return_owned_and_referenced<'a>() -> (Vec<u8>, &'a [u8]) {\n     let v = vec![1, 2, 3, 4];\n     let s = &v[1..3];\n@@ -43,7 +43,8 @@ and preventing mutable access to root containers, which in practice requires hea\n as provided by `Box<T>`, `Rc<T>`, etc.\n \n Also provided are typedefs for common owner type combinations,\n-which allow for less verbose type signatures. For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n+which allow for less verbose type signatures.\n+For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n \n The crate also provides the more advanced `OwningHandle` type,\n which allows more freedom in bundling a dependent handle object\n@@ -495,7 +496,8 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n         }\n     }\n \n-    /// Erases the concrete base type of the owner with a trait object which implements `Send` and `Sync`.\n+    /// Erases the concrete base type of the owner with a trait object\n+    /// which implements `Send` and `Sync`.\n     ///\n     /// This allows mixing of owned references with different owner base types.\n     pub fn erase_send_sync_owner<'a>(self) -> OwningRef<O::Erased, T>\n@@ -507,7 +509,7 @@ impl<O, T: ?Sized> OwningRef<O, T> {\n         }\n     }\n \n-    // TODO: wrap_owner\n+    // UNIMPLEMENTED: wrap_owner\n \n     // FIXME: Naming convention?\n     /// A getter for the underlying owner.\n@@ -753,7 +755,7 @@ impl<O, T: ?Sized> OwningRefMut<O, T> {\n         }\n     }\n \n-    // TODO: wrap_owner\n+    // UNIMPLEMENTED: wrap_owner\n \n     // FIXME: Naming convention?\n     /// A getter for the underlying owner."}, {"sha": "5bff5e035b5298594711d832c2e6d5fe905570bc", "filename": "src/librustc_data_structures/owning_ref/tests.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Ftests.rs?ref=155bfe461258de55a34ca4027a4d5b5c0e64209f", "patch": "@@ -274,7 +274,9 @@ mod owning_handle {\n         use std::cell::RefCell;\n         let cell = Rc::new(RefCell::new(2));\n         let cell_ref = RcRef::new(cell);\n-        let mut handle = OwningHandle::new_with_fn(cell_ref, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n+        let mut handle = OwningHandle::new_with_fn(cell_ref, |x| {\n+            unsafe { x.as_ref() }.unwrap().borrow_mut()\n+        });\n         assert_eq!(*handle, 2);\n         *handle = 3;\n         assert_eq!(*handle, 3);\n@@ -319,8 +321,12 @@ mod owning_handle {\n         let result = {\n             let complex = Rc::new(RefCell::new(Arc::new(RwLock::new(\"someString\"))));\n             let curr = RcRef::new(complex);\n-            let curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n-            let mut curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().try_write().unwrap());\n+            let curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().borrow_mut()\n+            });\n+            let mut curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().try_write().unwrap()\n+            });\n             assert_eq!(*curr, \"someString\");\n             *curr = \"someOtherString\";\n             curr\n@@ -353,8 +359,12 @@ mod owning_handle {\n         let result = {\n             let complex = Rc::new(RefCell::new(Arc::new(RwLock::new(\"someString\"))));\n             let curr = RcRef::new(complex);\n-            let curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().borrow_mut());\n-            let mut curr = OwningHandle::new_with_fn(curr, |x| unsafe { x.as_ref() }.unwrap().try_write().unwrap());\n+            let curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().borrow_mut()\n+            });\n+            let mut curr = OwningHandle::new_with_fn(curr, |x| {\n+                unsafe { x.as_ref() }.unwrap().try_write().unwrap()\n+            });\n             assert_eq!(*curr, \"someString\");\n             *curr = \"someOtherString\";\n             curr"}, {"sha": "eca8001a9d2a1be40f45cfe6eccae9b9d4d49779", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155bfe461258de55a34ca4027a4d5b5c0e64209f/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=155bfe461258de55a34ca4027a4d5b5c0e64209f", "patch": "@@ -43,31 +43,19 @@ pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n-        \"src/llvm\",\n-        \"src/llvm-project\",\n         \"src/llvm-emscripten\",\n-        \"src/libbacktrace\",\n-        \"src/librustc_data_structures/owning_ref\",\n-        \"src/vendor\",\n+        \"src/llvm-project\",\n+        \"src/stdarch\",\n         \"src/tools/cargo\",\n-        \"src/tools/clang\",\n-        \"src/tools/rls\",\n         \"src/tools/clippy\",\n+        \"src/tools/miri\",\n+        \"src/tools/rls\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n-        \"src/tools/miri\",\n-        \"src/tools/lld\",\n-        \"src/tools/lldb\",\n-        \"src/target\",\n-        \"src/stdarch\",\n-        \"src/rust-sgx\",\n-        \"target\",\n-        \"vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-\n fn walk_many(\n     paths: &[&Path], skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)\n ) {"}]}