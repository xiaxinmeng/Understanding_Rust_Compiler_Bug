{"sha": "b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "node_id": "C_kwDOAAsO6NoAKGIwMjViZDZlN2Q1MmI2MDQxYmIxYjRlNDA1OGUxNzAzN2UwYmIxODY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-28T16:49:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T16:49:55Z"}, "message": "Merge #10656\n\n10656: fix: Enable auto-import and qualify-path in derive attributes r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/10052\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c8c0918c1669ad68e7697d0c7b318f111842aed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c0918c1669ad68e7697d0c7b318f111842aed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhetSzCRBK7hj4Ov3rIwAAssUIAEaLWfnPvrnj3oq/x8iWwrl9\nVRjKk4T3ASgDuDaTXj6cPyOpiKngqyCkVoowKPGQO93CVnv8ufQa0VtGShXO3sOf\nr958DawjMqR1LkuUB/ZX8ytqhdqIEsXjNOQ7T+sQHxmRcid+3CapuvupaOKT3TAR\ngI1y4Bof1tyagLbTqZieUa+yj2txUWicLv7NwdvMCGOkI937KJOZiWdCMUtbTP5+\nvIm85atF0/0KxiA0mxW0zTHgcA/U3fGRUIgZFHikkM0hqruDI/NaZK5Lgcfq/z62\nt83X5xjqIWPfiLG3bx/Dv45+XHxTgQrkLT4hV3O9aJY9/Q5bbYDCVC53vNrJB4g=\n=Y4np\n-----END PGP SIGNATURE-----\n", "payload": "tree c8c0918c1669ad68e7697d0c7b318f111842aed1\nparent 166c0ac0de96d44a7823ffa2ec79119b65608ec4\nparent 7fdbdc4ab216a3efa759f78e637626092e8a71be\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635439795 +0000\ncommitter GitHub <noreply@github.com> 1635439795 +0000\n\nMerge #10656\n\n10656: fix: Enable auto-import and qualify-path in derive attributes r=Veykril a=Veykril\n\ncc https://github.com/rust-analyzer/rust-analyzer/issues/10052\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "html_url": "https://github.com/rust-lang/rust/commit/b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166c0ac0de96d44a7823ffa2ec79119b65608ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/166c0ac0de96d44a7823ffa2ec79119b65608ec4", "html_url": "https://github.com/rust-lang/rust/commit/166c0ac0de96d44a7823ffa2ec79119b65608ec4"}, {"sha": "7fdbdc4ab216a3efa759f78e637626092e8a71be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdbdc4ab216a3efa759f78e637626092e8a71be", "html_url": "https://github.com/rust-lang/rust/commit/7fdbdc4ab216a3efa759f78e637626092e8a71be"}], "stats": {"total": 160, "additions": 123, "deletions": 37}, "files": [{"sha": "877d385fbd175d781cb651ea93ac21c4b973ddef", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -299,8 +299,14 @@ impl SourceToDefCtx<'_, '_> {\n         dyn_map[keys::CONST_PARAM].get(&src).copied()\n     }\n \n-    // FIXME: use DynMap as well?\n     pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n+        let makro = self.dyn_map(src.as_ref()).and_then(|it| it[keys::MACRO].get(&src).copied());\n+        if let res @ Some(_) = makro {\n+            return res;\n+        }\n+\n+        // Not all macros are recorded in the dyn map, only the ones behaving like items, so fall back\n+        // for the non-item like definitions.\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = AstId::new(src.file_id, file_ast_id.upcast());\n         let kind = MacroDefKind::Declarative(ast_id);"}, {"sha": "1baf74c512b55a300e142118c6e91df4e0f3d1ee", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -101,6 +101,17 @@ impl ChildBySource for ModuleId {\n impl ChildBySource for ItemScope {\n     fn child_by_source_to(&self, db: &dyn DefDatabase, res: &mut DynMap, file_id: HirFileId) {\n         self.declarations().for_each(|item| add_module_def(db, file_id, res, item));\n+        self.macros().for_each(|(_, makro)| {\n+            let ast_id = makro.ast_id();\n+            if ast_id.either(|it| it.file_id, |it| it.file_id) == file_id {\n+                let src = match ast_id {\n+                    Either::Left(ast_id) => ast_id.with_value(ast_id.to_node(db.upcast())),\n+                    // FIXME: Do we need to add proc-macros into a PROCMACRO dynmap here?\n+                    Either::Right(_fn) => return,\n+                };\n+                res[keys::MACRO].insert(src, makro);\n+            }\n+        });\n         self.unnamed_consts().for_each(|konst| {\n             let src = konst.lookup(db).source(db);\n             res[keys::CONST].insert(src, konst);"}, {"sha": "07c4d083d63266043d9e221822fd4923e36e5a5c", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -31,7 +31,7 @@ pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n-pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n+pub const MACRO: Key<ast::Macro, MacroDefId> = Key::new();\n pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n pub const DERIVE_MACRO: Key<ast::Attr, Box<[MacroCallId]>> = Key::new();\n "}, {"sha": "0349754fbadde315d00dad7bfa2eb2eab28cea7b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -1907,7 +1907,7 @@ impl ModCollector<'_, '_> {\n         let mac = &self.item_tree[id];\n         let ast_id = InFile::new(self.file_id(), mac.ast_id.upcast());\n \n-        // Case 1: bulitin macros\n+        // Case 1: builtin macros\n         let attrs = self.item_tree.attrs(self.def_collector.db, krate, ModItem::from(id).into());\n         if attrs.by_key(\"rustc_builtin_macro\").exists() {\n             let macro_id = find_builtin_macro(&mac.name, krate, ast_id)"}, {"sha": "9c92bd3e742b9a2f2fa1b9ce124f5cf5c5148c3f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -128,6 +128,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/// ```</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">macro_rules</span><span class=\"punctuation injected\">!</span><span class=\"none injected\"> </span><span class=\"macro declaration injected\">noop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"parenthesis injected\">(</span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr</span><span class=\"colon injected\">:</span><span class=\"none injected\">expr</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"angle injected\">&gt;</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr </span><span class=\"brace injected\">}</span><span class=\"brace injected\">}</span>\n <span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>"}, {"sha": "05158c169e0af6e6c15188c31b93fe013af02523", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -707,6 +707,7 @@ pub mod module {\n }\n \n /// ```\n+/// macro_rules! noop { ($expr:expr) => { $expr }}\n /// noop!(1);\n /// ```\n macro_rules! noop {"}, {"sha": "a5858869c50bc1348f57a9da6bb9b6bdcc61fb91", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -3,7 +3,7 @@ use ide_db::helpers::{\n     insert_use::{insert_use, ImportScope},\n     mod_path_to_ast,\n };\n-use syntax::{ast, AstNode, AstToken, SyntaxNode};\n+use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxElement};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n \n@@ -90,9 +90,18 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    let range = ctx.sema.original_range(&syntax_under_caret).range;\n+    let range = match &syntax_under_caret {\n+        NodeOrToken::Node(node) => ctx.sema.original_range(node).range,\n+        NodeOrToken::Token(token) => token.text_range(),\n+    };\n     let group_label = group_label(import_assets.import_candidate());\n-    let scope = ImportScope::find_insert_use_container_with_macros(&syntax_under_caret, &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container_with_macros(\n+        &match syntax_under_caret {\n+            NodeOrToken::Node(it) => it,\n+            NodeOrToken::Token(it) => it.parent()?,\n+        },\n+        &ctx.sema,\n+    )?;\n \n     // we aren't interested in different namespaces\n     proposed_imports.dedup_by(|a, b| a.import_path == b.import_path);\n@@ -115,23 +124,24 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     Some(())\n }\n \n-pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets, SyntaxNode)> {\n+pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets, SyntaxElement)> {\n     if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n         ImportAssets::for_exact_path(&path_under_caret, &ctx.sema)\n-            .zip(Some(path_under_caret.syntax().clone()))\n+            .zip(Some(path_under_caret.syntax().clone().into()))\n     } else if let Some(method_under_caret) =\n         ctx.find_node_at_offset_with_descend::<ast::MethodCallExpr>()\n     {\n         ImportAssets::for_method_call(&method_under_caret, &ctx.sema)\n-            .zip(Some(method_under_caret.syntax().clone()))\n+            .zip(Some(method_under_caret.syntax().clone().into()))\n     } else if let Some(pat) = ctx\n         .find_node_at_offset_with_descend::<ast::IdentPat>()\n         .filter(ast::IdentPat::is_simple_ident)\n     {\n-        ImportAssets::for_ident_pat(&ctx.sema, &pat).zip(Some(pat.syntax().clone()))\n+        ImportAssets::for_ident_pat(&ctx.sema, &pat).zip(Some(pat.syntax().clone().into()))\n     } else {\n+        // FIXME: Descend?\n         let ident = ctx.find_token_at_offset()?;\n-        ImportAssets::for_derive_ident(&ctx.sema, &ident).zip(ident.syntax().parent())\n+        ImportAssets::for_derive_ident(&ctx.sema, &ident).zip(Some(ident.syntax().clone().into()))\n     }\n }\n \n@@ -1028,6 +1038,32 @@ mod foo {\n fn foo() {\n     let Foo;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_in_derives() {\n+        check_assist(\n+            auto_import,\n+            r#\"\n+//- minicore:derive\n+mod foo {\n+    #[rustc_builtin_macro]\n+    pub macro Copy {}\n+}\n+#[derive(Copy$0)]\n+struct Foo;\n+\"#,\n+            r#\"\n+use foo::Copy;\n+\n+mod foo {\n+    #[rustc_builtin_macro]\n+    pub macro Copy {}\n+}\n+#[derive(Copy)]\n+struct Foo;\n \"#,\n         );\n     }"}, {"sha": "23b642fcb1b5e720a003149545e099bdc54e1d8f", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b025bd6e7d52b6041bb1b4e4058e17037e0bb186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=b025bd6e7d52b6041bb1b4e4058e17037e0bb186", "patch": "@@ -9,7 +9,7 @@ use ide_db::RootDatabase;\n use syntax::{\n     ast,\n     ast::{make, HasArgList},\n-    AstNode,\n+    AstNode, NodeOrToken,\n };\n \n use crate::{\n@@ -42,32 +42,39 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    let range = ctx.sema.original_range(&syntax_under_caret).range;\n+    let range = match &syntax_under_caret {\n+        NodeOrToken::Node(node) => ctx.sema.original_range(node).range,\n+        NodeOrToken::Token(token) => token.text_range(),\n+    };\n     let candidate = import_assets.import_candidate();\n-    let qualify_candidate = match candidate {\n-        ImportCandidate::Path(candidate) if candidate.qualifier.is_some() => {\n-            cov_mark::hit!(qualify_path_qualifier_start);\n-            let path = ast::Path::cast(syntax_under_caret)?;\n-            let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n-            QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n-        }\n-        ImportCandidate::Path(_) => {\n-            cov_mark::hit!(qualify_path_unqualified_name);\n-            let path = ast::Path::cast(syntax_under_caret)?;\n-            let generics = path.segment()?.generic_arg_list();\n-            QualifyCandidate::UnqualifiedName(generics)\n-        }\n-        ImportCandidate::TraitAssocItem(_) => {\n-            cov_mark::hit!(qualify_path_trait_assoc_item);\n-            let path = ast::Path::cast(syntax_under_caret)?;\n-            let (qualifier, segment) = (path.qualifier()?, path.segment()?);\n-            QualifyCandidate::TraitAssocItem(qualifier, segment)\n-        }\n-        ImportCandidate::TraitMethod(_) => {\n-            cov_mark::hit!(qualify_path_trait_method);\n-            let mcall_expr = ast::MethodCallExpr::cast(syntax_under_caret)?;\n-            QualifyCandidate::TraitMethod(ctx.sema.db, mcall_expr)\n-        }\n+    let qualify_candidate = match syntax_under_caret {\n+        NodeOrToken::Node(syntax_under_caret) => match candidate {\n+            ImportCandidate::Path(candidate) if candidate.qualifier.is_some() => {\n+                cov_mark::hit!(qualify_path_qualifier_start);\n+                let path = ast::Path::cast(syntax_under_caret)?;\n+                let (prev_segment, segment) = (path.qualifier()?.segment()?, path.segment()?);\n+                QualifyCandidate::QualifierStart(segment, prev_segment.generic_arg_list())\n+            }\n+            ImportCandidate::Path(_) => {\n+                cov_mark::hit!(qualify_path_unqualified_name);\n+                let path = ast::Path::cast(syntax_under_caret)?;\n+                let generics = path.segment()?.generic_arg_list();\n+                QualifyCandidate::UnqualifiedName(generics)\n+            }\n+            ImportCandidate::TraitAssocItem(_) => {\n+                cov_mark::hit!(qualify_path_trait_assoc_item);\n+                let path = ast::Path::cast(syntax_under_caret)?;\n+                let (qualifier, segment) = (path.qualifier()?, path.segment()?);\n+                QualifyCandidate::TraitAssocItem(qualifier, segment)\n+            }\n+            ImportCandidate::TraitMethod(_) => {\n+                cov_mark::hit!(qualify_path_trait_method);\n+                let mcall_expr = ast::MethodCallExpr::cast(syntax_under_caret)?;\n+                QualifyCandidate::TraitMethod(ctx.sema.db, mcall_expr)\n+            }\n+        },\n+        // derive attribute path\n+        NodeOrToken::Token(_) => QualifyCandidate::UnqualifiedName(None),\n     };\n \n     // we aren't interested in different namespaces\n@@ -1236,6 +1243,30 @@ fn main() {\n     let test_struct = test_mod::TestStruct {};\n     test_mod::TestTrait::test_method::<()>(&test_struct)\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_in_derives() {\n+        check_assist(\n+            qualify_path,\n+            r#\"\n+//- minicore:derive\n+mod foo {\n+    #[rustc_builtin_macro]\n+    pub macro Copy {}\n+}\n+#[derive(Copy$0)]\n+struct Foo;\n+\"#,\n+            r#\"\n+mod foo {\n+    #[rustc_builtin_macro]\n+    pub macro Copy {}\n+}\n+#[derive(foo::Copy)]\n+struct Foo;\n \"#,\n         );\n     }"}]}