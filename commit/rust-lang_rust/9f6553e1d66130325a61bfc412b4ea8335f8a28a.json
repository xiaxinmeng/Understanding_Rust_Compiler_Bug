{"sha": "9f6553e1d66130325a61bfc412b4ea8335f8a28a", "node_id": "C_kwDOAAsO6NoAKDlmNjU1M2UxZDY2MTMwMzI1YTYxYmZjNDEyYjRlYTgzMzVmOGEyOGE", "commit": {"author": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-07T22:53:20Z"}, "committer": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-07T22:53:20Z"}, "message": "add config for import filtering", "tree": {"sha": "f055e3f38ee93b646f0c0bfdae362a0ef9ebcefb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f055e3f38ee93b646f0c0bfdae362a0ef9ebcefb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6553e1d66130325a61bfc412b4ea8335f8a28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6553e1d66130325a61bfc412b4ea8335f8a28a", "html_url": "https://github.com/rust-lang/rust/commit/9f6553e1d66130325a61bfc412b4ea8335f8a28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6553e1d66130325a61bfc412b4ea8335f8a28a/comments", "author": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "committer": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba54c2fc9c15ec6480385486b7f711a7f2ca39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba54c2fc9c15ec6480385486b7f711a7f2ca39e", "html_url": "https://github.com/rust-lang/rust/commit/eba54c2fc9c15ec6480385486b7f711a7f2ca39e"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "ba4c330bf3d5749049b29117c6f8c5c44de5af10", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -158,6 +158,7 @@ pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation)\n                 &Semantics::new(db),\n                 FilePosition { file_id, offset: annotation.range.start() },\n                 None,\n+                false,\n             )\n             .map(|result| {\n                 result"}, {"sha": "5ad922ddbc275a378ab14ebf0d5fe2d6c613a3f7", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -425,8 +425,11 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n+        exclude_imports: bool,\n     ) -> Cancellable<Option<Vec<ReferenceSearchResult>>> {\n-        self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n+        self.with_db(|db| {\n+            references::find_all_refs(&Semantics::new(db), position, search_scope, exclude_imports)\n+        })\n     }\n \n     /// Finds all methods and free functions for the file. Does not return tests!"}, {"sha": "73d118d8bb20e3391971352305faee397bf5c31d", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -54,6 +54,7 @@ pub(crate) fn find_all_refs(\n     sema: &Semantics<'_, RootDatabase>,\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n+    exclude_imports: bool,\n ) -> Option<Vec<ReferenceSearchResult>> {\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n@@ -79,7 +80,9 @@ pub(crate) fn find_all_refs(\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n \n-            retain_import_usages(&mut usages);\n+            if exclude_imports {\n+                filter_import_references(&mut usages);\n+            }\n \n             let references = usages\n                 .into_iter()\n@@ -114,7 +117,7 @@ pub(crate) fn find_all_refs(\n     }\n }\n \n-fn retain_import_usages(usages: &mut UsageSearchResult) {\n+fn filter_import_references(usages: &mut UsageSearchResult) {\n     // todo use this https://github.com/rust-lang/rust-analyzer/blob/master/crates/rust-analyzer/src/config.rs#L432\n \n     for (_file_id, refs) in &mut usages.references {\n@@ -1109,7 +1112,7 @@ impl Foo {\n \n     fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n         let (analysis, pos) = fixture::position(ra_fixture);\n-        let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, search_scope, false).unwrap().unwrap();\n \n         let mut actual = String::new();\n         for refs in refs {"}, {"sha": "2fdede40dde859c41c7aa8f0467122f8585acb93", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -220,6 +220,9 @@ config_data! {\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n \n+        /// Exclude imports in \"Find All References\"\n+        findAllRefs_excludeImports: bool = \"false\",\n+\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -1147,6 +1150,10 @@ impl Config {\n         }\n     }\n \n+    pub fn find_all_refs_exclude_imports(&self) -> bool {\n+        self.data.findAllRefs_excludeImports\n+    }\n+\n     pub fn snippet_cap(&self) -> bool {\n         self.experimental(\"snippetTextEdit\")\n     }"}, {"sha": "70dc37e0c6bf1c5f68b2bfbaba19fcc0610bd423", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -1012,7 +1012,9 @@ pub(crate) fn handle_references(\n     let _p = profile::span(\"handle_references\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n-    let refs = match snap.analysis.find_all_refs(position, None)? {\n+    let exclude_imports = snap.config.find_all_refs_exclude_imports();\n+\n+    let refs = match snap.analysis.find_all_refs(position, None, exclude_imports)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n@@ -1652,7 +1654,9 @@ fn show_ref_command_link(\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover_actions().references && snap.config.client_commands().show_reference {\n-        if let Some(ref_search_res) = snap.analysis.find_all_refs(*position, None).unwrap_or(None) {\n+        if let Some(ref_search_res) =\n+            snap.analysis.find_all_refs(*position, None, false).unwrap_or(None)\n+        {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);"}, {"sha": "3af18dacd495e2c9872ba007b95384e51a9f9686", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6553e1d66130325a61bfc412b4ea8335f8a28a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9f6553e1d66130325a61bfc412b4ea8335f8a28a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9f6553e1d66130325a61bfc412b4ea8335f8a28a", "patch": "@@ -839,6 +839,11 @@\n                     \"type\": \"integer\",\n                     \"minimum\": 0\n                 },\n+                \"rust-analyzer.findAllRefs.excludeImports\": {\n+                    \"markdownDescription\": \"Exclude imports from Find All References results\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for return types of closures.\",\n                     \"default\": \"never\","}]}