{"sha": "20f4e168249ca0828b7297942d47040c59376fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjRlMTY4MjQ5Y2EwODI4YjcyOTc5NDJkNDcwNDBjNTkzNzZmYmU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-09T10:22:50Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-10T12:23:19Z"}, "message": "polymorphize: constrain unevaluated const handling\n\nThis commit constrains the support added for handling unevaluated consts\nin polymorphization (introduced in #75260) by:\n\n- Skipping associated constants as this causes cycle errors.\n- Skipping promoted constants when they contain `Self` as this ensures\n  `T` is used in constants of the form `<Self as Foo<T>>`.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "65af6a6519afdd83ec8ace1762ac573b960167cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65af6a6519afdd83ec8ace1762ac573b960167cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f4e168249ca0828b7297942d47040c59376fbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8xPDcACgkQJZLnbIc4\nH9kJrQ//TvJrTTn1X2qkqb0RmaMsgLssW/KSUlZh1Vve3UVLefeTAv8lxwmZnE/5\nUuBiPRqCTgd+SZKNdBbzXjbIvCFMp/J7i4H3QIobNgrM92FPSwG15VerC1SlJ9wa\nOlz4gJzGBocxyVU1VOlPaYRV1oh69dZGAcjGD7Jpo4Ah8J5CyaP0HJeqv45EcskF\nar20ZwVlQOGboHYTv4FvuZdJgupup0DhDRxLJc4ReysNiIrlMIVhUEsNMTlsDUfh\nF0R3F2NSsouqz3u4dAjCJUj1JOFTpM1uAnUKhbUVGfiqgar/tyM8xM5jsrIjqauU\nIOCs89nd6eOv8LMxE8MYDcuBj4F4PtpAOxJlRi8sT5OICIibO1CtDci1ku6QVsSV\n+WDfzzNHsgKF017JfjzN/NG8JJxJJ9DNv6umyW/hH7cWOqh/uChN+G1Pi4IPvAkN\naFGsyVVstsiZ3zwQnBPGdJg6cEhr+7FaEaPsPM3X+TCSHn/XrUPaJnjfy4W9JQrg\nbCkVVGvYeYUBH5WFUdqcoeaEHBB036pwDpGVa5Cp1pvBnl+TWIsu+/iPgOIThorl\nTLLz7BhlLXlQRTLlPa7gzbJFCGbOizH+1I/o7ZW0H/EQENyf716qeaa4NlHhiB7U\n0oq9S6mShA/N/I2qKdmYvbUPSJ3JUF/COZ8n4uHEVgsR8ZN5iaw=\n=faJv\n-----END PGP SIGNATURE-----", "payload": "tree 65af6a6519afdd83ec8ace1762ac573b960167cf\nparent 3f091baba4fa656adb4c1a57b64aa831002d801d\nauthor David Wood <david@davidtw.co> 1596968570 +0100\ncommitter David Wood <david@davidtw.co> 1597062199 +0100\n\npolymorphize: constrain unevaluated const handling\n\nThis commit constrains the support added for handling unevaluated consts\nin polymorphization (introduced in #75260) by:\n\n- Skipping associated constants as this causes cycle errors.\n- Skipping promoted constants when they contain `Self` as this ensures\n  `T` is used in constants of the form `<Self as Foo<T>>`.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f4e168249ca0828b7297942d47040c59376fbe", "html_url": "https://github.com/rust-lang/rust/commit/20f4e168249ca0828b7297942d47040c59376fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f4e168249ca0828b7297942d47040c59376fbe/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f091baba4fa656adb4c1a57b64aa831002d801d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f091baba4fa656adb4c1a57b64aa831002d801d", "html_url": "https://github.com/rust-lang/rust/commit/3f091baba4fa656adb4c1a57b64aa831002d801d"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "fc9f7f1af622f8e7508a81e9cd35b7c9401995c3", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e168249ca0828b7297942d47040c59376fbe/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e168249ca0828b7297942d47040c59376fbe/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=20f4e168249ca0828b7297942d47040c59376fbe", "patch": "@@ -269,15 +269,21 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 false\n             }\n-            ty::ConstKind::Unevaluated(_, _, Some(p)) => {\n+            ty::ConstKind::Unevaluated(def, _, Some(p))\n+                // Avoid considering `T` unused when constants are of the form:\n+                //   `<Self as Foo<T>>::foo::promoted[p]`\n+                if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n+            {\n                 // If there is a promoted, don't look at the substs - since it will always contain\n                 // the generic parameters, instead, traverse the promoted MIR.\n-                let promoted = self.tcx.promoted_mir(self.def_id);\n+                let promoted = self.tcx.promoted_mir(def.did);\n                 self.visit_body(&promoted[p]);\n                 false\n             }\n-            ty::ConstKind::Unevaluated(def_id, unevaluated_substs, None) => {\n-                self.visit_child_body(def_id.did, unevaluated_substs);\n+            ty::ConstKind::Unevaluated(def, unevaluated_substs, None)\n+                if self.tcx.def_kind(def.did) == DefKind::AnonConst =>\n+            {\n+                self.visit_child_body(def.did, unevaluated_substs);\n                 false\n             }\n             _ => c.super_visit_with(self),"}, {"sha": "1c84df13e10b00f8fb13676babd6d18063939cde", "filename": "src/test/ui/polymorphization/promoted-function-3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e168249ca0828b7297942d47040c59376fbe/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e168249ca0828b7297942d47040c59376fbe/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-3.rs?ref=20f4e168249ca0828b7297942d47040c59376fbe", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// compile-flags: -Zpolymorphize=on -Zmir-opt-level=3\n+\n+fn caller<T, U>() -> &'static usize {\n+    callee::<U>()\n+}\n+\n+fn callee<T>() -> &'static usize {\n+    &std::mem::size_of::<T>()\n+}\n+\n+fn main() {\n+    assert_eq!(caller::<(), ()>(), &0);\n+}"}]}