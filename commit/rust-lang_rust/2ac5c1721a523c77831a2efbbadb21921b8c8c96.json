{"sha": "2ac5c1721a523c77831a2efbbadb21921b8c8c96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzVjMTcyMWE1MjNjNzc4MzFhMmVmYmJhZGIyMTkyMWI4YzhjOTY=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-17T05:48:23Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-17T05:48:23Z"}, "message": "Fix target highlighting in rustdoc.\n\nAlso factor out outer_version and const_outer_version into\nrender_rightside.", "tree": {"sha": "f5ef1dcc03310ad43c1669dbe8a6def5209416ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ef1dcc03310ad43c1669dbe8a6def5209416ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac5c1721a523c77831a2efbbadb21921b8c8c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5c1721a523c77831a2efbbadb21921b8c8c96", "html_url": "https://github.com/rust-lang/rust/commit/2ac5c1721a523c77831a2efbbadb21921b8c8c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5c1721a523c77831a2efbbadb21921b8c8c96/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fa6d58276c5a4a76c36fca6d4689db415c2817", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fa6d58276c5a4a76c36fca6d4689db415c2817", "html_url": "https://github.com/rust-lang/rust/commit/c4fa6d58276c5a4a76c36fca6d4689db415c2817"}], "stats": {"total": 86, "additions": 38, "deletions": 48}, "files": [{"sha": "499f33f14f56296d45cfd3ff685c39a119838ba9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -723,6 +723,8 @@ fn short_item_info(\n     extra_info\n }\n \n+// Render the list of items inside one of the sections \"Trait Implementations\",\n+// \"Auto Trait Implementations,\" \"Blanket Trait Implementations\" (on struct/enum pages).\n fn render_impls(\n     cx: &Context<'_>,\n     w: &mut Buffer,\n@@ -745,8 +747,6 @@ fn render_impls(\n                 containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1024,7 +1024,6 @@ fn render_assoc_items(\n         Some(v) => v,\n         None => return,\n     };\n-    let tcx = cx.tcx();\n     let cache = cx.cache();\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| i.inner_impl().trait_.is_none());\n     if !non_trait.is_empty() {\n@@ -1058,8 +1057,6 @@ fn render_assoc_items(\n                 containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1260,8 +1257,6 @@ fn render_impl(\n     parent: &clean::Item,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -1278,17 +1273,18 @@ fn render_impl(\n     // For trait implementations, the `interesting` output contains all methods that have doc\n     // comments, and the `boring` output contains all methods that do not. The distinction is\n     // used to allow hiding the boring methods.\n+    // `containing_item` is used for rendering stability info. If the parent is a trait impl,\n+    // `containing_item` will the grandparent, since trait impls can't have stability attached.\n     fn doc_impl_item(\n         boring: &mut Buffer,\n         interesting: &mut Buffer,\n         cx: &Context<'_>,\n         item: &clean::Item,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         link: AssocItemLink<'_>,\n         render_mode: RenderMode,\n         is_default_item: bool,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         trait_: Option<&clean::Trait>,\n         show_def_docs: bool,\n     ) {\n@@ -1362,7 +1358,7 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n-                    render_rightside(w, cx, item, outer_version, outer_const_version);\n+                    render_rightside(w, cx, item, containing_item);\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n@@ -1406,7 +1402,7 @@ fn render_impl(\n                     \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n-                render_rightside(w, cx, item, outer_version, outer_const_version);\n+                render_rightside(w, cx, item, containing_item);\n                 write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"<code>\");\n                 assoc_const(\n@@ -1461,11 +1457,10 @@ fn render_impl(\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n+            parent,\n             link,\n             render_mode,\n             false,\n-            outer_version,\n-            outer_const_version,\n             trait_.map(|t| &t.trait_),\n             show_def_docs,\n         );\n@@ -1478,9 +1473,8 @@ fn render_impl(\n         t: &clean::Trait,\n         i: &clean::Impl,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         render_mode: RenderMode,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         show_def_docs: bool,\n     ) {\n         for trait_item in &t.items {\n@@ -1498,11 +1492,10 @@ fn render_impl(\n                 cx,\n                 trait_item,\n                 parent,\n+                containing_item,\n                 assoc_link,\n                 render_mode,\n                 true,\n-                outer_version,\n-                outer_const_version,\n                 Some(t),\n                 show_def_docs,\n             );\n@@ -1522,9 +1515,8 @@ fn render_impl(\n                 &t.trait_,\n                 &i.inner_impl(),\n                 &i.impl_item,\n+                parent,\n                 render_mode,\n-                outer_version,\n-                outer_const_version,\n                 show_def_docs,\n             );\n         }\n@@ -1541,8 +1533,7 @@ fn render_impl(\n             cx,\n             i,\n             parent,\n-            outer_version,\n-            outer_const_version,\n+            parent,\n             show_def_docs,\n             use_absolute,\n             is_on_foreign_type,\n@@ -1578,12 +1569,13 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n+// Render the items that appear on the right side of methods, impls, and\n+// associated types. For example \"1.0.0 (const: 1.39.0) [src]\".\n fn render_rightside(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     item: &clean::Item,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n+    containing_item: &clean::Item,\n ) {\n     let tcx = cx.tcx();\n \n@@ -1592,8 +1584,8 @@ fn render_rightside(\n         w,\n         item.stable_since(tcx).as_deref(),\n         item.const_stable_since(tcx).as_deref(),\n-        outer_version,\n-        outer_const_version,\n+        containing_item.stable_since(tcx).as_deref(),\n+        containing_item.const_stable_since(tcx).as_deref(),\n     );\n \n     write_srclink(cx, item, w);\n@@ -1605,8 +1597,7 @@ pub(crate) fn render_impl_summary(\n     cx: &Context<'_>,\n     i: &Impl,\n     parent: &clean::Item,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n+    containing_item: &clean::Item,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -1630,7 +1621,7 @@ pub(crate) fn render_impl_summary(\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n     write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n-    render_rightside(w, cx, &i.impl_item, outer_version, outer_const_version);\n+    render_rightside(w, cx, &i.impl_item, containing_item);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n     write!(w, \"<code class=\\\"in-band\\\">\");\n "}, {"sha": "6eff452a13bdd748d3f065d1f9c34ce21561b12c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -694,15 +694,12 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             write_small_section_header(w, \"foreign-impls\", \"Implementations on Foreign Types\", \"\");\n \n             for implementor in foreign {\n-                let outer_version = implementor.impl_item.stable_since(cx.tcx());\n-                let outer_const_version = implementor.impl_item.const_stable_since(cx.tcx());\n                 render_impl_summary(\n                     w,\n                     cx,\n                     &implementor,\n                     it,\n-                    outer_version.as_deref(),\n-                    outer_const_version.as_deref(),\n+                    &implementor.impl_item,\n                     false,\n                     None,\n                     true,\n@@ -1319,15 +1316,12 @@ fn render_implementor(\n         } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n-    let outer_version = trait_.stable_since(cx.tcx());\n-    let outer_const_version = trait_.const_stable_since(cx.tcx());\n     render_impl_summary(\n         w,\n         cx,\n         implementor,\n         trait_,\n-        outer_version.as_deref(),\n-        outer_const_version.as_deref(),\n+        trait_,\n         false,\n         Some(use_absolute),\n         false,"}, {"sha": "9a59ee528a0c9e90fe3a4e5e1126418fe9f33972", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -1037,6 +1037,10 @@ a.test-arrow:hover{\n \topacity: 1;\n }\n \n+:target {\n+\tpadding-right: 3px;\n+}\n+\n .information {\n \tposition: absolute;\n \tleft: -25px;"}, {"sha": "171d06c0a3667760806b4b0e16f35a02592d4ddb", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -334,8 +334,11 @@ a.test-arrow:hover {\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: rgba(255, 236, 164, 0.06);\n+}\n+\n+:target {\n \tborder-right: 3px solid rgba(255, 180, 76, 0.85);\n }\n "}, {"sha": "d9ea28058ad99372d1ca7967381849d24bc0ce3d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -282,8 +282,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground-color: #494a3d;\n+}\n+\n+:target {\n \tborder-right: 3px solid #bb7410;\n }\n "}, {"sha": "a2dfb89820b01450f753f2c107509ee13bfb1812", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -275,8 +275,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: #FDFFD3;\n+}\n+\n+:target {\n \tborder-right: 3px solid #ffb44c;\n }\n "}, {"sha": "6189acb72542a613612d67d183886e28441e03ff", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n+// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"[src]\"\n pub use std::iter::Iterator;"}, {"sha": "ddbe93febdc2526a9306312f790a1f07d7b0e04e", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5c1721a523c77831a2efbbadb21921b8c8c96/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=2ac5c1721a523c77831a2efbbadb21921b8c8c96", "patch": "@@ -38,23 +38,15 @@ impl MyTrait for Vec<u8> {\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}"}]}