{"sha": "08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "node_id": "C_kwDOAAsO6NoAKDA4ZjBhZWNmZmQ0ZTg1MjJiZjUxYTdiOWQ3NDM4NmEzNjgzNGQ0YTk", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T16:47:54Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Minor changes from PR feedback", "tree": {"sha": "8e432f587b5db39db0d606b15dab0affb2981057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e432f587b5db39db0d606b15dab0affb2981057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "html_url": "https://github.com/rust-lang/rust/commit/08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c", "html_url": "https://github.com/rust-lang/rust/commit/427a09ba7bb91cc692cd3101d3c8d84a21a64d1c"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "50b55e5f79a2b523e0e6162f04c61e5d987e9df6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "patch": "@@ -535,8 +535,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n-    let enable_raw_pointer_heuristic = conf.enable_raw_pointer_heuristic;\n-    store.register_late_pass(move || Box::new(non_send_field_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic)));\n+    let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n+    store.register_late_pass(move || Box::new(non_send_field_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n }\n \n #[rustfmt::skip]"}, {"sha": "83f6f786d26e329a3a6b76c76ca1a0af0d52e166", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "patch": "@@ -42,7 +42,7 @@ declare_clippy_lint! {\n     /// unsafe impl<T> Send for ExampleStruct<T> {}\n     /// ```\n     /// Use thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n-    /// and specify correct bounds on generic type parameters (`T: Send`).\n+    /// or specify correct bounds on generic type parameters (`T: Send`).\n     pub NON_SEND_FIELD_IN_SEND_TY,\n     nursery,\n     \"there is field that does not implement `Send` in a `Send` struct\"\n@@ -125,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                             for field in non_send_fields {\n                                 diag.span_note(\n                                     field.span,\n-                                    &format!(\"the field `{}` has type `{}` which is not `Send`\", field.name, field.ty),\n+                                    &format!(\"the field `{}` has type `{}` which is `!Send`\", field.name, field.ty),\n                                 );\n \n                                 match field.generic_params.len() {\n@@ -165,7 +165,7 @@ impl<'tcx> NonSendField<'tcx> {\n }\n \n /// Given a type, collect all of its generic parameters.\n-/// Example: MyStruct<P, Box<Q, R>> => vec![P, Q, R]\n+/// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n     ty.walk(cx.tcx)\n         .filter_map(|inner| match inner.unpack() {\n@@ -184,31 +184,34 @@ fn ty_implements_send_or_copy(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait:\n /// Heuristic to allow cases like `Vec<*const u8>`\n fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n     if ty_implements_send_or_copy(cx, ty, send_trait) {\n-        true\n-    } else {\n-        // The type is known to be `!Send` and `!Copy`\n-        match ty.kind() {\n-            ty::Tuple(_) => ty\n-                .tuple_fields()\n-                .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n-            ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n-            ty::Adt(_, substs) => {\n-                if contains_raw_pointer(cx, ty) {\n-                    // descends only if ADT contains any raw pointers\n-                    substs.iter().all(|generic_arg| match generic_arg.unpack() {\n-                        GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n-                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => true,\n-                    })\n-                } else {\n-                    false\n-                }\n-            },\n-            ty::RawPtr(_) => true,\n-            _ => false,\n-        }\n+        return true;\n+    }\n+\n+    // The type is known to be `!Send` and `!Copy`\n+    match ty.kind() {\n+        ty::Tuple(_) => ty\n+            .tuple_fields()\n+            .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n+        ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+        ty::Adt(_, substs) => {\n+            if contains_raw_pointer(cx, ty) {\n+                // descends only if ADT contains any raw pointers\n+                substs.iter().all(|generic_arg| match generic_arg.unpack() {\n+                    GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+                    // Lifetimes and const generics are not solid part of ADT and ignored\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => true,\n+                })\n+            } else {\n+                false\n+            }\n+        },\n+        // Raw pointers are `!Send` but allowed by the heuristic\n+        ty::RawPtr(_) => true,\n+        _ => false,\n     }\n }\n \n+/// Checks if the type contains any raw pointers in substs (including nested ones).\n fn contains_raw_pointer<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n     for ty_node in target_ty.walk(cx.tcx) {\n         if_chain! {"}, {"sha": "e6233f73a578c9aa0cd86e0d9490b314a5846c42", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "patch": "@@ -287,7 +287,7 @@ define_Conf! {\n     /// Lint: NON_SEND_FIELD_IN_SEND_TY.\n     ///\n     /// Whether to apply the raw pointer heuristic in `non_send_field_in_send_ty` lint.\n-    (enable_raw_pointer_heuristic: bool = true),\n+    (enable_raw_pointer_heuristic_for_send: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "6c7312d01525bf1eecf449b954cc7feb8c2e09f3", "filename": "tests/ui/non_send_field_in_send_ty.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08f0aecffd4e8522bf51a7b9d74386a36834d4a9/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.stderr?ref=08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "patch": "@@ -5,7 +5,7 @@ LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n-note: the field `data` has type `std::vec::Vec<std::cell::UnsafeCell<T>>` which is not `Send`\n+note: the field `data` has type `std::vec::Vec<std::cell::UnsafeCell<T>>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:11:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n@@ -18,7 +18,7 @@ error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!S\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `lock` has type `std::sync::Mutex<std::boxed::Box<T>>` which is not `Send`\n+note: the field `lock` has type `std::sync::Mutex<std::boxed::Box<T>>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:21:5\n    |\n LL |     lock: Mutex<Box<T>>,\n@@ -31,7 +31,7 @@ error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `head` has type `std::sync::Arc<RC>` which is not `Send`\n+note: the field `head` has type `std::sync::Arc<RC>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:29:5\n    |\n LL |     head: Arc<RC>,\n@@ -44,7 +44,7 @@ error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `context` has type `T` which is not `Send`\n+note: the field `context` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:44:5\n    |\n LL |     context: T,\n@@ -57,7 +57,7 @@ error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `rc_is_not_send` has type `std::rc::Rc<std::string::String>` which is not `Send`\n+note: the field `rc_is_not_send` has type `std::rc::Rc<std::string::String>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:52:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n@@ -70,19 +70,19 @@ error: this implementation is unsound, as some fields in `MultiField<T>` are `!S\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field1` has type `T` which is not `Send`\n+note: the field `field1` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:58:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the field `field2` has type `T` which is not `Send`\n+note: the field `field2` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:59:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the field `field3` has type `T` which is not `Send`\n+note: the field `field3` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:60:5\n    |\n LL |     field3: T,\n@@ -95,7 +95,7 @@ error: this implementation is unsound, as some fields in `MyOption<T>` are `!Sen\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `0` has type `T` which is not `Send`\n+note: the field `0` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:66:12\n    |\n LL |     MySome(T),\n@@ -108,7 +108,7 @@ error: this implementation is unsound, as some fields in `MultiParam<A, B>` are\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `vec` has type `std::vec::Vec<(A, B)>` which is not `Send`\n+note: the field `vec` has type `std::vec::Vec<(A, B)>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:74:5\n    |\n LL |     vec: Vec<(A, B)>,\n@@ -121,7 +121,7 @@ error: this implementation is unsound, as some fields in `HeuristicTest` are `!S\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field4` has type `(*const NonSend, std::rc::Rc<u8>)` which is not `Send`\n+note: the field `field4` has type `(*const NonSend, std::rc::Rc<u8>)` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:90:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n@@ -134,7 +134,7 @@ error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Se\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `0` has type `T` which is not `Send`\n+note: the field `0` has type `T` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:109:11\n    |\n LL |     Enum2(T),\n@@ -147,7 +147,7 @@ error: this implementation is unsound, as some fields in `Complex<P, u32>` are `\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field1` has type `P` which is not `Send`\n+note: the field `field1` has type `P` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:118:5\n    |\n LL |     field1: A,\n@@ -160,7 +160,7 @@ error: this implementation is unsound, as some fields in `Complex<Q, std::sync::\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field2` has type `std::sync::MutexGuard<'static, bool>` which is not `Send`\n+note: the field `field2` has type `std::sync::MutexGuard<'static, bool>` which is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:119:5\n    |\n LL |     field2: B,"}]}