{"sha": "da081e1eac64d981209a742f8edea1a55127ce42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDgxZTFlYWM2NGQ5ODEyMDlhNzQyZjhlZGVhMWE1NTEyN2NlNDI=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2016-06-03T01:32:07Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:46:33Z"}, "message": "[MIR] Handle call return values that need to be casted properly.", "tree": {"sha": "06960cbf49f2d22372235bdf9504272146d4ad15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06960cbf49f2d22372235bdf9504272146d4ad15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da081e1eac64d981209a742f8edea1a55127ce42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da081e1eac64d981209a742f8edea1a55127ce42", "html_url": "https://github.com/rust-lang/rust/commit/da081e1eac64d981209a742f8edea1a55127ce42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da081e1eac64d981209a742f8edea1a55127ce42/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e71f6d8ac98a9db4fe58448fc70582339bc97ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71f6d8ac98a9db4fe58448fc70582339bc97ccd", "html_url": "https://github.com/rust-lang/rust/commit/e71f6d8ac98a9db4fe58448fc70582339bc97ccd"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "c8f9d46f7493fa888307a4ac6831c52ddcb2e0c6", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/da081e1eac64d981209a742f8edea1a55127ce42/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da081e1eac64d981209a742f8edea1a55127ce42/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=da081e1eac64d981209a742f8edea1a55127ce42", "patch": "@@ -19,11 +19,11 @@ use base;\n use build;\n use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n use common::{self, Block, BlockAndBuilder, LandingPad};\n-use common::{C_bool, C_str_slice, C_struct, C_u32, C_undef};\n+use common::{C_bool, C_str_slice, C_struct, C_u32, C_uint, C_undef};\n use consts;\n use debuginfo::DebugLoc;\n use Disr;\n-use machine::{llalign_of_min, llbitsize_of_real};\n+use machine::{llalign_of_min, llbitsize_of_real, llsize_of_store};\n use meth;\n use type_of;\n use glue;\n@@ -39,6 +39,8 @@ use super::lvalue::{LvalueRef, load_fat_ptr};\n use super::operand::OperandRef;\n use super::operand::OperandValue::*;\n \n+use std::cmp;\n+\n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_block(&mut self, bb: mir::BasicBlock) {\n         let mut bcx = self.bcx(bb);\n@@ -852,7 +854,43 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n         match dest {\n             Nothing => (),\n-            Store(dst) => ret_ty.store(bcx, op.immediate(), dst),\n+            Store(dst) => {\n+                if let Some(llcast_ty) = ret_ty.cast {\n+                    let ccx = bcx.ccx();\n+                    // The actual return type is a struct, but the ABI\n+                    // adaptation code has cast it into some scalar type.  The\n+                    // code that follows is the only reliable way I have\n+                    // found to do a transform like i64 -> {i32,i32}.\n+                    // Basically we dump the data onto the stack then memcpy it.\n+                    //\n+                    // Other approaches I tried:\n+                    // - Casting rust ret pointer to the foreign type and using Store\n+                    //   is (a) unsafe if size of foreign type > size of rust type and\n+                    //   (b) runs afoul of strict aliasing rules, yielding invalid\n+                    //   assembly under -O (specifically, the store gets removed).\n+                    // - Truncating foreign type to correct integral type and then\n+                    //   bitcasting to the struct type yields invalid cast errors.\n+\n+                    // We instead thus allocate some scratch space...\n+                    let llscratch = bcx.alloca(llcast_ty, \"fn_ret_cast\");\n+                    bcx.with_block(|bcx| base::call_lifetime_start(bcx, llscratch));\n+\n+                    // ...where we first store the value...\n+                    bcx.store(op.immediate(), llscratch);\n+\n+                    // ...and then memcpy it to the intended destination.\n+                    base::call_memcpy(bcx,\n+                                      bcx.pointercast(dst, Type::i8p(ccx)),\n+                                      bcx.pointercast(llscratch, Type::i8p(ccx)),\n+                                      C_uint(ccx, llsize_of_store(ccx, ret_ty.original_ty)),\n+                                      cmp::min(llalign_of_min(ccx, ret_ty.original_ty),\n+                                               llalign_of_min(ccx, llcast_ty)) as u32);\n+\n+                    bcx.with_block(|bcx| base::call_lifetime_end(bcx, llscratch));\n+                } else {\n+                    ret_ty.store(bcx, op.immediate(), dst);\n+                }\n+            }\n             IndirectOperand(tmp, idx) => {\n                 let op = self.trans_load(bcx, tmp, op.ty);\n                 self.temps[idx as usize] = TempRef::Operand(Some(op));"}, {"sha": "5bdc14f659cd5ed4ee57c88a29c238159475ac4b", "filename": "src/test/run-pass/mir_cast_fn_ret.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da081e1eac64d981209a742f8edea1a55127ce42/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da081e1eac64d981209a742f8edea1a55127ce42/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs?ref=da081e1eac64d981209a742f8edea1a55127ce42", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+pub extern \"C\" fn foo() -> (u8, u8, u8) {\n+    (1, 2, 3)\n+}\n+\n+#[rustc_mir]\n+pub fn bar() -> u8 {\n+    foo().2\n+}\n+\n+fn main() {\n+    assert_eq!(bar(), 3);\n+}"}]}