{"sha": "11ef04728c90aa6105b20c681e3c12f231ba4f12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZWYwNDcyOGM5MGFhNjEwNWIyMGM2ODFlM2MxMmYyMzFiYTRmMTI=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-07-30T06:56:47Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-08-10T21:40:26Z"}, "message": "Add unwrap_or_else_default lint\n\nThis will catch `unwrap_or_else(Default::default)` on Result and Option\nand suggest `unwrap_or_default()` instead.", "tree": {"sha": "9c8ef4ca7d2e5160e85e8c4e2f9be8deef47e62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8ef4ca7d2e5160e85e8c4e2f9be8deef47e62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ef04728c90aa6105b20c681e3c12f231ba4f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ef04728c90aa6105b20c681e3c12f231ba4f12", "html_url": "https://github.com/rust-lang/rust/commit/11ef04728c90aa6105b20c681e3c12f231ba4f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ef04728c90aa6105b20c681e3c12f231ba4f12/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a5889ffad5f819b80f07b40988ba2576f79296", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5889ffad5f819b80f07b40988ba2576f79296", "html_url": "https://github.com/rust-lang/rust/commit/f6a5889ffad5f819b80f07b40988ba2576f79296"}], "stats": {"total": 387, "additions": 356, "deletions": 31}, "files": [{"sha": "2b89170073be513bca6869b916212e05d9fb2935", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -2999,6 +2999,7 @@ Released 2018-09-13\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n [`unwrap_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\n+[`unwrap_or_else_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_else_default\n [`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n [`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug"}, {"sha": "dbdb4251b3bec2358c98cae5878f611b3f6401c9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -797,6 +797,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::UNNECESSARY_FILTER_MAP,\n         methods::UNNECESSARY_FOLD,\n         methods::UNNECESSARY_LAZY_EVALUATIONS,\n+        methods::UNWRAP_OR_ELSE_DEFAULT,\n         methods::UNWRAP_USED,\n         methods::USELESS_ASREF,\n         methods::WRONG_SELF_CONVENTION,\n@@ -1341,6 +1342,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(methods::UNNECESSARY_FOLD),\n         LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n         LintId::of(methods::USELESS_ASREF),\n         LintId::of(methods::WRONG_SELF_CONVENTION),\n         LintId::of(methods::ZST_OFFSET),\n@@ -1535,6 +1537,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::STRING_EXTEND_CHARS),\n         LintId::of(methods::UNNECESSARY_FOLD),\n         LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n         LintId::of(methods::WRONG_SELF_CONVENTION),\n         LintId::of(misc::TOPLEVEL_REF_ARG),\n         LintId::of(misc::ZERO_PTR),"}, {"sha": "12f7987fd3ad142c0fedbaeb02f9b3598739b202", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -56,6 +56,7 @@ mod uninit_assumed_init;\n mod unnecessary_filter_map;\n mod unnecessary_fold;\n mod unnecessary_lazy_eval;\n+mod unwrap_or_else_default;\n mod unwrap_used;\n mod useless_asref;\n mod utils;\n@@ -310,6 +311,31 @@ declare_clippy_lint! {\n     \"using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `_.unwrap_or_else(Default::default)` on Option and\n+    /// Result values.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readability, these can be written as `option.unwrap_or_default` or\n+    /// `result.unwrap_or_default`.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// # let x = Some(1);\n+    ///\n+    /// // Bad\n+    /// x.unwrap_or_else(Default::default);\n+    /// x.unwrap_or_else(u32::default);\n+    ///\n+    /// // Good\n+    /// x.unwrap_or_default();\n+    /// ```\n+    pub UNWRAP_OR_ELSE_DEFAULT,\n+    style,\n+    \"using `.unwrap_or_else(Default::default)`, which is more succinctly expressed as `.unwrap_or_default()`\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n@@ -1766,6 +1792,7 @@ impl_lint_pass!(Methods => [\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     OK_EXPECT,\n+    UNWRAP_OR_ELSE_DEFAULT,\n     MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n@@ -2172,7 +2199,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             },\n             (\"unwrap_or_else\", [u_arg]) => match method_call!(recv) {\n                 Some((\"map\", [recv, map_arg], _)) if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, msrv) => {},\n-                _ => unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\"),\n+                _ => {\n+                    unwrap_or_else_default::check(cx, expr, recv, u_arg);\n+                    unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n+                },\n             },\n             _ => {},\n         }"}, {"sha": "378b0724170433e6cb92b4da8e104b0cd7c53eca", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::{implements_trait, qpath_target_trait};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use clippy_utils::{contains_return, last_path_segment, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -34,15 +35,25 @@ pub(super) fn check<'tcx>(\n         or_has_args: bool,\n         span: Span,\n     ) -> bool {\n+        let is_default_default = |qpath, default_trait_id| {\n+            qpath_target_trait(cx, qpath, fun.hir_id).map_or(false, |target_trait| target_trait == default_trait_id)\n+        };\n+\n+        let implements_default = |arg, default_trait_id| {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            implements_trait(cx, arg_ty, default_trait_id, &[])\n+        };\n+\n         if_chain! {\n             if !or_has_args;\n             if name == \"unwrap_or\";\n             if let hir::ExprKind::Path(ref qpath) = fun.kind;\n-            let path = last_path_segment(qpath).ident.name;\n-            if matches!(path, kw::Default | sym::new);\n-            let arg_ty = cx.typeck_results().expr_ty(arg);\n             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n-            if implements_trait(cx, arg_ty, default_trait_id, &[]);\n+            let path = last_path_segment(qpath).ident.name;\n+            // needs to target Default::default in particular or be *::new and have a Default impl\n+            // available\n+            if (matches!(path, kw::Default) && is_default_default(qpath, default_trait_id))\n+                || (matches!(path, sym::new) && implements_default(arg, default_trait_id));\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "f99ae6cae93b072ba7637b105ab761bce369d271", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -0,0 +1,50 @@\n+//! Lint for `some_result_or_option.unwrap_or_else(Default::default)`\n+\n+use super::UNWRAP_OR_ELSE_DEFAULT;\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg,\n+    source::snippet_with_applicability,\n+    ty::{is_type_diagnostic_item, qpath_target_trait},\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    recv: &'tcx hir::Expr<'_>,\n+    u_arg: &'tcx hir::Expr<'_>,\n+) {\n+    // something.unwrap_or_else(Default::default)\n+    // ^^^^^^^^^- recv          ^^^^^^^^^^^^^^^^- u_arg\n+    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- expr\n+    let recv_ty = cx.typeck_results().expr_ty(recv);\n+    let is_option = is_type_diagnostic_item(cx, recv_ty, sym::option_type);\n+    let is_result = is_type_diagnostic_item(cx, recv_ty, sym::result_type);\n+\n+    if_chain! {\n+        if is_option || is_result;\n+        if let hir::ExprKind::Path(ref qpath) = u_arg.kind;\n+        if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n+        if let Some(target_trait) = qpath_target_trait(cx, qpath, u_arg.hir_id);\n+        if target_trait == default_trait_id;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNWRAP_OR_ELSE_DEFAULT,\n+                expr.span,\n+                \"use of `.unwrap_or_else(..)` to construct default value\",\n+                \"try\",\n+                format!(\n+                    \"{}.unwrap_or_default()\",\n+                    snippet_with_applicability(cx, recv.span, \"..\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "789079510c5e80fa7251536eeda79336d99e7777", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -168,7 +168,7 @@ pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n }\n \n-/// Same as `snippet`, but it adapts the applicability level by following rules:\n+/// Same as [`snippet`], but it adapts the applicability level by following rules:\n ///\n /// - Applicability level `Unspecified` will never be changed.\n /// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`."}, {"sha": "bc31bea8b9f3ba47d638575cb2e0fbc9e2112914", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n+use hir::{HirId, QPath};\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -114,7 +115,7 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n \n /// Checks whether a type implements a trait.\n /// The function returns false in case the type contains an inference variable.\n-/// See also `get_trait_def_id`.\n+/// See also [`get_trait_def_id`].\n pub fn implements_trait<'tcx>(\n     cx: &LateContext<'tcx>,\n     ty: Ty<'tcx>,\n@@ -136,6 +137,21 @@ pub fn implements_trait<'tcx>(\n     })\n }\n \n+/// Gets the trait that a path targets. For example `<SomeTy as Trait>::a` would return the\n+/// [`DefId`] for `Trait`.\n+///\n+/// `cx` must be in a body.\n+pub fn qpath_target_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, expr_id: HirId) -> Option<DefId> {\n+    let method_res = cx.typeck_results().qpath_res(qpath, expr_id);\n+    let method_id = match method_res {\n+        hir::def::Res::Def(_kind, id) => Some(id),\n+        _ => None,\n+    };\n+    let method_id = method_id?;\n+\n+    cx.tcx.trait_of_item(method_id)\n+}\n+\n /// Checks whether this type implements `Drop`.\n pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.ty_adt_def() {"}, {"sha": "c2f94d0e8575650272656acba755013a0de37ddb", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -18,6 +18,19 @@ fn or_fun_call() {\n         }\n     }\n \n+    struct FakeDefault;\n+    impl FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n+    impl Default for FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n     enum Enum {\n         A(i32),\n     }\n@@ -53,6 +66,12 @@ fn or_fun_call() {\n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_default();\n \n+    let self_default = None::<FakeDefault>;\n+    self_default.unwrap_or_else(<FakeDefault>::default);\n+\n+    let real_default = None::<FakeDefault>;\n+    real_default.unwrap_or_default();\n+\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or_default();\n "}, {"sha": "afaf92961b0274f75d9e5ffbbd2f40b606fb876a", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -18,6 +18,19 @@ fn or_fun_call() {\n         }\n     }\n \n+    struct FakeDefault;\n+    impl FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n+    impl Default for FakeDefault {\n+        fn default() -> Self {\n+            FakeDefault\n+        }\n+    }\n+\n     enum Enum {\n         A(i32),\n     }\n@@ -53,6 +66,12 @@ fn or_fun_call() {\n     let with_default_type = Some(1);\n     with_default_type.unwrap_or(u64::default());\n \n+    let self_default = None::<FakeDefault>;\n+    self_default.unwrap_or(<FakeDefault>::default());\n+\n+    let real_default = None::<FakeDefault>;\n+    real_default.unwrap_or(<FakeDefault as Default>::default());\n+\n     let with_vec = Some(vec![1]);\n     with_vec.unwrap_or(vec![]);\n "}, {"sha": "b2bcbd38c2df36061eefebf4f788821471955d6f", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -1,136 +1,148 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:33:19\n+  --> $DIR/or_fun_call.rs:46:19\n    |\n LL |     with_const_fn.unwrap_or(Duration::from_secs(5));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Duration::from_secs(5))`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:36:22\n+  --> $DIR/or_fun_call.rs:49:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:39:5\n+  --> $DIR/or_fun_call.rs:52:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:42:21\n+  --> $DIR/or_fun_call.rs:55:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:45:14\n+  --> $DIR/or_fun_call.rs:58:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:48:19\n+  --> $DIR/or_fun_call.rs:61:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:51:5\n+  --> $DIR/or_fun_call.rs:64:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:54:5\n+  --> $DIR/or_fun_call.rs:67:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:70:18\n+   |\n+LL |     self_default.unwrap_or(<FakeDefault>::default());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(<FakeDefault>::default)`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:73:5\n+   |\n+LL |     real_default.unwrap_or(<FakeDefault as Default>::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `real_default.unwrap_or_default()`\n+\n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:57:5\n+  --> $DIR/or_fun_call.rs:76:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:60:21\n+  --> $DIR/or_fun_call.rs:79:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:63:19\n+  --> $DIR/or_fun_call.rs:82:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:66:23\n+  --> $DIR/or_fun_call.rs:85:23\n    |\n LL |     map_vec.entry(42).or_insert(vec![]);\n    |                       ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:69:21\n+  --> $DIR/or_fun_call.rs:88:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:72:25\n+  --> $DIR/or_fun_call.rs:91:25\n    |\n LL |     btree_vec.entry(42).or_insert(vec![]);\n    |                         ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:75:21\n+  --> $DIR/or_fun_call.rs:94:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:83:21\n+  --> $DIR/or_fun_call.rs:102:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:85:21\n+  --> $DIR/or_fun_call.rs:104:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:109:35\n+  --> $DIR/or_fun_call.rs:128:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:113:10\n+  --> $DIR/or_fun_call.rs:132:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:141:14\n+  --> $DIR/or_fun_call.rs:160:14\n    |\n LL |         None.unwrap_or(s.as_mut_vec());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| s.as_mut_vec())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:146:14\n+  --> $DIR/or_fun_call.rs:165:14\n    |\n LL |         None.unwrap_or(unsafe { s.as_mut_vec() });\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { s.as_mut_vec() })`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:148:14\n+  --> $DIR/or_fun_call.rs:167:14\n    |\n LL |         None.unwrap_or( unsafe { s.as_mut_vec() }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { s.as_mut_vec() })`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "7ac3f426c9775c5062aa3260f00a2e0247e6757e", "filename": "tests/ui/unwrap_or_else_default.fixed", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.fixed?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -0,0 +1,71 @@\n+// run-rustfix\n+\n+#![warn(clippy::unwrap_or_else_default)]\n+#![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+/// Checks implementation of the `UNWRAP_OR_ELSE_DEFAULT` lint.\n+fn unwrap_or_else_default() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+\n+        // fake default, we should not trigger on this\n+        fn default() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    struct HasDefaultAndDuplicate;\n+\n+    impl HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    impl Default for HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    enum Enum {\n+        A(),\n+    }\n+\n+    fn make<T, V>(_: V) -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A());\n+    with_enum.unwrap_or_else(Enum::A);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_else(Vec::new);\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(make);\n+\n+    // should not be changed\n+    let with_fake_default = None::<Foo>;\n+    with_fake_default.unwrap_or_else(Foo::default);\n+\n+    // should not be changed\n+    let with_fake_default2 = None::<HasDefaultAndDuplicate>;\n+    with_fake_default2.unwrap_or_else(<HasDefaultAndDuplicate>::default);\n+\n+    let with_real_default = None::<HasDefaultAndDuplicate>;\n+    with_real_default.unwrap_or_default();\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_default();\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_default();\n+}\n+\n+fn main() {}"}, {"sha": "82b727a039ed44fd18d5738c24a5cc2e3ec30c73", "filename": "tests/ui/unwrap_or_else_default.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.rs?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -0,0 +1,71 @@\n+// run-rustfix\n+\n+#![warn(clippy::unwrap_or_else_default)]\n+#![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+/// Checks implementation of the `UNWRAP_OR_ELSE_DEFAULT` lint.\n+fn unwrap_or_else_default() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+\n+        // fake default, we should not trigger on this\n+        fn default() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    struct HasDefaultAndDuplicate;\n+\n+    impl HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    impl Default for HasDefaultAndDuplicate {\n+        fn default() -> Self {\n+            HasDefaultAndDuplicate\n+        }\n+    }\n+\n+    enum Enum {\n+        A(),\n+    }\n+\n+    fn make<T, V>(_: V) -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A());\n+    with_enum.unwrap_or_else(Enum::A);\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or_else(Vec::new);\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or_else(make);\n+\n+    // should not be changed\n+    let with_fake_default = None::<Foo>;\n+    with_fake_default.unwrap_or_else(Foo::default);\n+\n+    // should not be changed\n+    let with_fake_default2 = None::<HasDefaultAndDuplicate>;\n+    with_fake_default2.unwrap_or_else(<HasDefaultAndDuplicate>::default);\n+\n+    let with_real_default = None::<HasDefaultAndDuplicate>;\n+    with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or_else(Default::default);\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or_else(u64::default);\n+}\n+\n+fn main() {}"}, {"sha": "feb215b09f662ef4e05dc536a7f6b1b25020fb07", "filename": "tests/ui/unwrap_or_else_default.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11ef04728c90aa6105b20c681e3c12f231ba4f12/tests%2Fui%2Funwrap_or_else_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.stderr?ref=11ef04728c90aa6105b20c681e3c12f231ba4f12", "patch": "@@ -0,0 +1,22 @@\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:62:5\n+   |\n+LL |     with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_real_default.unwrap_or_default()`\n+   |\n+   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n+\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:65:5\n+   |\n+LL |     with_default_trait.unwrap_or_else(Default::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_trait.unwrap_or_default()`\n+\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:68:5\n+   |\n+LL |     with_default_type.unwrap_or_else(u64::default);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n+\n+error: aborting due to 3 previous errors\n+"}]}