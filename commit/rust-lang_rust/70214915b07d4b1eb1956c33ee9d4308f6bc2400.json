{"sha": "70214915b07d4b1eb1956c33ee9d4308f6bc2400", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjE0OTE1YjA3ZDRiMWViMTk1NmMzM2VlOWQ0MzA4ZjZiYzI0MDA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-25T03:23:53Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-25T19:22:41Z"}, "message": "Add a missing fmt::Debug impl lint\n\nCloses #20855", "tree": {"sha": "2bca2c566cd0b7920673f371596869caeed17c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bca2c566cd0b7920673f371596869caeed17c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70214915b07d4b1eb1956c33ee9d4308f6bc2400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70214915b07d4b1eb1956c33ee9d4308f6bc2400", "html_url": "https://github.com/rust-lang/rust/commit/70214915b07d4b1eb1956c33ee9d4308f6bc2400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70214915b07d4b1eb1956c33ee9d4308f6bc2400/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15192317aa025ff06faa56ca00950fb7ce6ff4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15192317aa025ff06faa56ca00950fb7ce6ff4b", "html_url": "https://github.com/rust-lang/rust/commit/d15192317aa025ff06faa56ca00950fb7ce6ff4b"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "2bb4e0948632b360bf68f4407a4c6fd2986b1e0a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=70214915b07d4b1eb1956c33ee9d4308f6bc2400", "patch": "@@ -245,6 +245,7 @@ pub trait Show {\n #[unstable = \"I/O and core have yet to be reconciled\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is defined in your \\\n                             crate, add `#[derive(Debug)]` or manually implement it\"]\n+#[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;"}, {"sha": "63c2238200dd1be1269f8d2766540e9abb2f9788", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=70214915b07d4b1eb1956c33ee9d4308f6bc2400", "patch": "@@ -1627,6 +1627,69 @@ impl LintPass for MissingCopyImplementations {\n     }\n }\n \n+declare_lint! {\n+    MISSING_DEBUG_IMPLEMENTATIONS,\n+    Allow,\n+    \"detects missing implementations of fmt::Debug\"\n+}\n+\n+pub struct MissingDebugImplementations {\n+    impling_types: Option<NodeSet>,\n+}\n+\n+impl MissingDebugImplementations {\n+    pub fn new() -> MissingDebugImplementations {\n+        MissingDebugImplementations {\n+            impling_types: None,\n+        }\n+    }\n+}\n+\n+impl LintPass for MissingDebugImplementations {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MISSING_DEBUG_IMPLEMENTATIONS)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n+        if !cx.exported_items.contains(&item.id) {\n+            return;\n+        }\n+\n+        match item.node {\n+            ast::ItemStruct(..) | ast::ItemEnum(..) => {},\n+            _ => return,\n+        }\n+\n+        let debug = match cx.tcx.lang_items.debug_trait() {\n+            Some(debug) => debug,\n+            None => return,\n+        };\n+\n+        if self.impling_types.is_none() {\n+            let impls = cx.tcx.trait_impls.borrow();\n+            let impls = match impls.get(&debug) {\n+                Some(impls) => {\n+                    impls.borrow().iter()\n+                        .filter(|d| d.krate == ast::LOCAL_CRATE)\n+                        .filter_map(|d| ty::ty_to_def_id(ty::node_id_to_type(cx.tcx, d.node)))\n+                        .map(|d| d.node)\n+                        .collect()\n+                }\n+                None => NodeSet(),\n+            };\n+            self.impling_types = Some(impls);\n+            debug!(\"{:?}\", self.impling_types);\n+        }\n+\n+        if !self.impling_types.as_ref().unwrap().contains(&item.id) {\n+            cx.span_lint(MISSING_DEBUG_IMPLEMENTATIONS,\n+                         item.span,\n+                         \"type does not implement `fmt::Debug`; consider adding #[derive(Debug)] \\\n+                          or a manual implementation\")\n+        }\n+    }\n+}\n+\n declare_lint! {\n     DEPRECATED,\n     Warn,"}, {"sha": "d871461dd8a1a050a5c79480ea4cca50e20c1e87", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=70214915b07d4b1eb1956c33ee9d4308f6bc2400", "patch": "@@ -219,6 +219,7 @@ impl LintStore {\n                               RawPointerDerive,\n                               MissingDoc,\n                               Stability,\n+                              MissingDebugImplementations,\n         );\n \n         add_lint_group!(sess, \"bad_style\","}, {"sha": "7b5b236fb18ad13cff0724bc9ccb6e38208806f7", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=70214915b07d4b1eb1956c33ee9d4308f6bc2400", "patch": "@@ -328,4 +328,6 @@ lets_do_this! {\n     IteratorItem,                    \"iterator\",                iterator;\n \n     StackExhaustedLangItem,          \"stack_exhausted\",         stack_exhausted;\n+\n+    DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n }"}, {"sha": "4adae2f3680645070df06b0a8fe9e4936300a17f", "filename": "src/test/compile-fail/missing_debug_impls.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70214915b07d4b1eb1956c33ee9d4308f6bc2400/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs?ref=70214915b07d4b1eb1956c33ee9d4308f6bc2400", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --crate-type lib\n+#![deny(missing_debug_implementations)]\n+#![allow(unused, unstable, missing_copy_implementations)]\n+\n+use std::fmt;\n+\n+pub enum A {} //~ ERROR type does not implement `fmt::Debug`\n+\n+#[derive(Debug)]\n+pub enum B {}\n+\n+pub enum C {}\n+\n+impl fmt::Debug for C {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+pub struct Foo; //~ ERROR type does not implement `fmt::Debug`\n+\n+#[derive(Debug)]\n+pub struct Bar;\n+\n+pub struct Baz;\n+\n+impl fmt::Debug for Baz {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+struct PrivateStruct;\n+\n+enum PrivateEnum {}\n+\n+#[derive(Debug)]\n+struct GenericType<T>(T);"}]}