{"sha": "f551e50c16d189a724885ce5f208595a31af49cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTFlNTBjMTZkMTg5YTcyNDg4NWNlNWYyMDg1OTVhMzFhZjQ5Y2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-24T16:17:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-24T16:17:05Z"}, "message": "When joining lines, unwrap trivial diverging blocks", "tree": {"sha": "bf41cbde88fdf1003854bb0ccf8ef1dd39d40e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf41cbde88fdf1003854bb0ccf8ef1dd39d40e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f551e50c16d189a724885ce5f208595a31af49cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f551e50c16d189a724885ce5f208595a31af49cc", "html_url": "https://github.com/rust-lang/rust/commit/f551e50c16d189a724885ce5f208595a31af49cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f551e50c16d189a724885ce5f208595a31af49cc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba3c991c8188e87363bbff190e9528606140808", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba3c991c8188e87363bbff190e9528606140808", "html_url": "https://github.com/rust-lang/rust/commit/cba3c991c8188e87363bbff190e9528606140808"}], "stats": {"total": 61, "additions": 53, "deletions": 8}, "files": [{"sha": "db27f9b83932739771e4b7d3cab8b40c9a6ad4c3", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f551e50c16d189a724885ce5f208595a31af49cc/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f551e50c16d189a724885ce5f208595a31af49cc/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=f551e50c16d189a724885ce5f208595a31af49cc", "patch": "@@ -43,15 +43,35 @@ pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n \n pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n     let block = block.block()?;\n-    let expr = block.expr()?;\n-    let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {\n-        WHITESPACE | T!['{'] | T!['}'] => false,\n-        _ => it != expr.syntax(),\n-    });\n-    if non_trivial_children.count() > 0 {\n-        return None;\n+    let has_anything_else = |thing: &SyntaxNode| -> bool {\n+        let mut non_trivial_children =\n+            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n+                WHITESPACE | T!['{'] | T!['}'] => false,\n+                _ => it.as_node() != Some(thing),\n+            });\n+        non_trivial_children.next().is_some()\n+    };\n+\n+    if let Some(expr) = block.expr() {\n+        if has_anything_else(expr.syntax()) {\n+            return None;\n+        }\n+        return Some(expr);\n+    } else {\n+        // Unwrap `{ continue; }`\n+        let (stmt,) = block.statements().next_tuple()?;\n+        if has_anything_else(stmt.syntax()) {\n+            return None;\n+        }\n+        if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+            let expr = expr_stmt.expr()?;\n+            match expr.syntax().kind() {\n+                CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+                _ => (),\n+            }\n+        }\n     }\n-    Some(expr)\n+    None\n }\n \n pub fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {"}, {"sha": "7d70dab9c69266a67d94b5fcb61d9c123b9a8c41", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f551e50c16d189a724885ce5f208595a31af49cc/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f551e50c16d189a724885ce5f208595a31af49cc/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=f551e50c16d189a724885ce5f208595a31af49cc", "patch": "@@ -227,6 +227,31 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_join_lines_diverging_block() {\n+        let before = r\"\n+            fn foo() {\n+                loop {\n+                    match x {\n+                        92 => <|>{\n+                            continue;\n+                        }\n+                    }\n+                }\n+            }\n+        \";\n+        let after = r\"\n+            fn foo() {\n+                loop {\n+                    match x {\n+                        92 => <|>continue,\n+                    }\n+                }\n+            }\n+        \";\n+        check_join_lines(before, after);\n+    }\n+\n     #[test]\n     fn join_lines_adds_comma_for_block_in_match_arm() {\n         check_join_lines("}]}