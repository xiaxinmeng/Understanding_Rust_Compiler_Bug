{"sha": "8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTFkNDQ0Y2JkODUxNTI4OTgxOGVlM2U2YzEzYmYzMGE3YTIyN2E=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-29T03:19:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-29T03:19:23Z"}, "message": "Rollup merge of #40731 - sfackler:vec-from-iter-spec, r=aturon\n\nSpecialize Vec::from_iter for vec::IntoIter\n\nIt's fairly common to expose an API which takes an `IntoIterator` and\nimmediately collects that into a vector. It's also common to buffer\na bunch of items into a vector and then pass that into one of these\nAPIs. If the iterator hasn't been advanced, we can make this `from_iter`\nsimply reassemble the original `Vec` with no actual iteration or\nreallocation.\n\nr? @aturon", "tree": {"sha": "f53171c166928f23c360bc837bf930ae2ea860b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f53171c166928f23c360bc837bf930ae2ea860b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "html_url": "https://github.com/rust-lang/rust/commit/8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae1d444cbd8515289818ee3e6c13bf30a7a227a/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378d230dd4f9df9532024b7d9257a7bdecf6be15", "url": "https://api.github.com/repos/rust-lang/rust/commits/378d230dd4f9df9532024b7d9257a7bdecf6be15", "html_url": "https://github.com/rust-lang/rust/commit/378d230dd4f9df9532024b7d9257a7bdecf6be15"}, {"sha": "dae66e000a974dd3bea7ae10b8827a5ece2b941e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae66e000a974dd3bea7ae10b8827a5ece2b941e", "html_url": "https://github.com/rust-lang/rust/commit/dae66e000a974dd3bea7ae10b8827a5ece2b941e"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "56b60a3e00341b6b4eb6605b65d16d3350e0c2b5", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ae1d444cbd8515289818ee3e6c13bf30a7a227a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae1d444cbd8515289818ee3e6c13bf30a7a227a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "patch": "@@ -1563,7 +1563,7 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n-        <Self as SpecExtend<_, _>>::from_iter(iter.into_iter())\n+        <Self as SpecExtend<T, I::IntoIter>>::from_iter(iter.into_iter())\n     }\n }\n \n@@ -1631,7 +1631,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        self.spec_extend(iter.into_iter())\n+        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())\n     }\n }\n \n@@ -1662,7 +1662,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n                 vector\n             }\n         };\n-        vector.spec_extend(iterator);\n+        <Vec<T> as SpecExtend<T, I>>::spec_extend(&mut vector, iterator);\n         vector\n     }\n \n@@ -1674,7 +1674,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n impl<T, I> SpecExtend<T, I> for Vec<T>\n     where I: TrustedLen<Item=T>,\n {\n-    fn from_iter(iterator: I) -> Self {\n+    default fn from_iter(iterator: I) -> Self {\n         let mut vector = Vec::new();\n         vector.spec_extend(iterator);\n         vector\n@@ -1706,6 +1706,27 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n     }\n }\n \n+impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n+    fn from_iter(iterator: IntoIter<T>) -> Self {\n+        // A common case is passing a vector into a function which immediately\n+        // re-collects into a vector. We can short circuit this if the IntoIter\n+        // has not been advanced at all.\n+        if *iterator.buf == iterator.ptr as *mut T {\n+            unsafe {\n+                let vec = Vec::from_raw_parts(*iterator.buf as *mut T,\n+                                              iterator.len(),\n+                                              iterator.cap);\n+                mem::forget(iterator);\n+                vec\n+            }\n+        } else {\n+            let mut vector = Vec::new();\n+            vector.spec_extend(iterator);\n+            vector\n+        }\n+    }\n+}\n+\n impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>\n     where I: Iterator<Item=&'a T>,\n           T: Clone,"}, {"sha": "63df0eb73050971b86dad86fe7e4814f53d23d32", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ae1d444cbd8515289818ee3e6c13bf30a7a227a/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae1d444cbd8515289818ee3e6c13bf30a7a227a/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=8ae1d444cbd8515289818ee3e6c13bf30a7a227a", "patch": "@@ -680,3 +680,19 @@ fn test_placement_panic() {\n     let _ = panic::catch_unwind(panic::AssertUnwindSafe(|| { vec.place_back() <- mkpanic(); }));\n     assert_eq!(vec.len(), 3);\n }\n+\n+#[test]\n+fn from_into_inner() {\n+    let vec = vec![1, 2, 3];\n+    let ptr = vec.as_ptr();\n+    let vec = vec.into_iter().collect::<Vec<_>>();\n+    assert_eq!(vec, [1, 2, 3]);\n+    assert_eq!(vec.as_ptr(), ptr);\n+\n+    let ptr = &vec[1] as *const _;\n+    let mut it = vec.into_iter();\n+    it.next().unwrap();\n+    let vec = it.collect::<Vec<_>>();\n+    assert_eq!(vec, [2, 3]);\n+    assert!(ptr != vec.as_ptr());\n+}"}]}