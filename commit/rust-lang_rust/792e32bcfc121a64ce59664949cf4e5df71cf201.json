{"sha": "792e32bcfc121a64ce59664949cf4e5df71cf201", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MmUzMmJjZmMxMjFhNjRjZTU5NjY0OTQ5Y2Y0ZTVkZjcxY2YyMDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-29T15:12:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-29T15:12:51Z"}, "message": "rollup merge of #17576 : kmcallister/hide-quotes", "tree": {"sha": "5637d17805b711816b8534efda5cb7976a6cd27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5637d17805b711816b8534efda5cb7976a6cd27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792e32bcfc121a64ce59664949cf4e5df71cf201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792e32bcfc121a64ce59664949cf4e5df71cf201", "html_url": "https://github.com/rust-lang/rust/commit/792e32bcfc121a64ce59664949cf4e5df71cf201", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792e32bcfc121a64ce59664949cf4e5df71cf201/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757fa6ffbaea0c2ddfba31d6c5777f0a61722947", "url": "https://api.github.com/repos/rust-lang/rust/commits/757fa6ffbaea0c2ddfba31d6c5777f0a61722947", "html_url": "https://github.com/rust-lang/rust/commit/757fa6ffbaea0c2ddfba31d6c5777f0a61722947"}, {"sha": "fc1b908322a5a2ebf8aa599d7178accdd3cbaed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1b908322a5a2ebf8aa599d7178accdd3cbaed9", "html_url": "https://github.com/rust-lang/rust/commit/fc1b908322a5a2ebf8aa599d7178accdd3cbaed9"}], "stats": {"total": 142, "additions": 74, "deletions": 68}, "files": [{"sha": "3a4b05ba00aa5d5f8af91df2b13704da9baa50a0", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -288,8 +288,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n-                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 crate_name: crate_name.to_string(),\n+                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n+                enable_quotes: sess.features.borrow().quote,\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,"}, {"sha": "212cd33e16e61142d581deddfa19227d3f77c058", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -344,7 +344,7 @@ impl BlockInfo {\n \n /// The base map of methods for expanding syntax extension\n /// AST nodes into full ASTs\n-fn initial_syntax_expander_table() -> SyntaxEnv {\n+fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n         NormalTT(box f, None)\n@@ -383,31 +383,33 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_meta_deriving));\n \n-    // Quasi-quoting expanders\n-    syntax_expanders.insert(intern(\"quote_tokens\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_tokens));\n-    syntax_expanders.insert(intern(\"quote_expr\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_expr));\n-    syntax_expanders.insert(intern(\"quote_ty\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_ty));\n-    syntax_expanders.insert(intern(\"quote_method\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_method));\n-    syntax_expanders.insert(intern(\"quote_item\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_item));\n-    syntax_expanders.insert(intern(\"quote_pat\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_pat));\n-    syntax_expanders.insert(intern(\"quote_arm\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_arm));\n-    syntax_expanders.insert(intern(\"quote_stmt\"),\n-                       builtin_normal_expander(\n-                            ext::quote::expand_quote_stmt));\n+    if ecfg.enable_quotes {\n+        // Quasi-quoting expanders\n+        syntax_expanders.insert(intern(\"quote_tokens\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_tokens));\n+        syntax_expanders.insert(intern(\"quote_expr\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_expr));\n+        syntax_expanders.insert(intern(\"quote_ty\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_ty));\n+        syntax_expanders.insert(intern(\"quote_method\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_method));\n+        syntax_expanders.insert(intern(\"quote_item\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_item));\n+        syntax_expanders.insert(intern(\"quote_pat\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_pat));\n+        syntax_expanders.insert(intern(\"quote_arm\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_arm));\n+        syntax_expanders.insert(intern(\"quote_stmt\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_stmt));\n+    }\n \n     syntax_expanders.insert(intern(\"line\"),\n                             builtin_normal_expander(\n@@ -466,6 +468,7 @@ pub struct ExtCtxt<'a> {\n impl<'a> ExtCtxt<'a> {\n     pub fn new<'a>(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,\n                    ecfg: expand::ExpansionConfig) -> ExtCtxt<'a> {\n+        let env = initial_syntax_expander_table(&ecfg);\n         ExtCtxt {\n             parse_sess: parse_sess,\n             cfg: cfg,\n@@ -474,7 +477,7 @@ impl<'a> ExtCtxt<'a> {\n             ecfg: ecfg,\n             trace_mac: false,\n             exported_macros: Vec::new(),\n-            syntax_env: initial_syntax_expander_table(),\n+            syntax_env: env,\n         }\n     }\n "}, {"sha": "9f3df1a762398223a5c9f6c8e978415baf40f45d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -975,8 +975,19 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n }\n \n pub struct ExpansionConfig {\n-    pub deriving_hash_type_parameter: bool,\n     pub crate_name: String,\n+    pub deriving_hash_type_parameter: bool,\n+    pub enable_quotes: bool,\n+}\n+\n+impl ExpansionConfig {\n+    pub fn default(crate_name: String) -> ExpansionConfig {\n+        ExpansionConfig {\n+            crate_name: crate_name,\n+            deriving_hash_type_parameter: false,\n+            enable_quotes: false,\n+        }\n+    }\n }\n \n pub struct ExportedMacros {\n@@ -1106,7 +1117,7 @@ impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n #[cfg(test)]\n mod test {\n     use super::{pattern_bindings, expand_crate, contains_macro_escape};\n-    use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer};\n+    use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord, Name};\n     use attr;\n@@ -1171,6 +1182,10 @@ mod test {\n     // these following tests are quite fragile, in that they don't test what\n     // *kind* of failure occurs.\n \n+    fn test_ecfg() -> ExpansionConfig {\n+        ExpansionConfig::default(\"test\".to_string())\n+    }\n+\n     // make sure that macros can't escape fns\n     #[should_fail]\n     #[test] fn macros_cant_escape_fns_test () {\n@@ -1182,11 +1197,7 @@ mod test {\n             src,\n             Vec::new(), &sess);\n         // should fail:\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n+        expand_crate(&sess,test_ecfg(),vec!(),vec!(),crate_ast);\n     }\n \n     // make sure that macros can't escape modules\n@@ -1199,11 +1210,7 @@ mod test {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n+        expand_crate(&sess,test_ecfg(),vec!(),vec!(),crate_ast);\n     }\n \n     // macro_escape modules should allow macros to escape\n@@ -1215,11 +1222,7 @@ mod test {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&sess, cfg, vec!(), vec!(), crate_ast);\n+        expand_crate(&sess, test_ecfg(), vec!(), vec!(), crate_ast);\n     }\n \n     #[test] fn test_contains_flatten (){\n@@ -1252,11 +1255,7 @@ mod test {\n         let ps = parse::new_parse_sess();\n         let crate_ast = string_to_parser(&ps, crate_str).parse_crate_mod();\n         // the cfg argument actually does matter, here...\n-        let cfg = ::syntax::ext::expand::ExpansionConfig {\n-            deriving_hash_type_parameter: false,\n-            crate_name: \"test\".to_string(),\n-        };\n-        expand_crate(&ps,cfg,vec!(),vec!(),crate_ast)\n+        expand_crate(&ps,test_ecfg(),vec!(),vec!(),crate_ast)\n     }\n \n     // find the pat_ident paths in a crate"}, {"sha": "1c6ee8acc94a59077a2054fa2b9920288c183b7e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -102,6 +102,7 @@ pub struct Features {\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n     pub visible_private_types: bool,\n+    pub quote: bool,\n }\n \n impl Features {\n@@ -112,6 +113,7 @@ impl Features {\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n             visible_private_types: false,\n+            quote: false,\n         }\n     }\n }\n@@ -282,10 +284,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         let ast::MacInvocTT(ref path, _, _) = macro.node;\n         let id = path.segments.last().unwrap().identifier;\n-        let quotes = [\"quote_tokens\", \"quote_expr\", \"quote_ty\",\n-                      \"quote_item\", \"quote_pat\", \"quote_stmt\"];\n-        let msg = \" is not stable enough for use and are subject to change\";\n-\n \n         if id == token::str_to_ident(\"macro_rules\") {\n             self.gate_feature(\"macro_rules\", path.span, \"macro definitions are \\\n@@ -311,16 +309,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             self.gate_feature(\"concat_idents\", path.span, \"`concat_idents` is not \\\n                 stable enough for use and is subject to change\");\n         }\n-\n-        else {\n-            for &quote in quotes.iter() {\n-                if id == token::str_to_ident(quote) {\n-                  self.gate_feature(\"quote\",\n-                                    path.span,\n-                                    format!(\"{}{}\", quote, msg).as_slice());\n-                }\n-            }\n-        }\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n@@ -483,6 +471,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n+        quote: cx.has_feature(\"quote\"),\n     },\n     unknown_features)\n }"}, {"sha": "828a6124aa09f5f122699c0ca8c065ea949f10df", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -235,10 +235,7 @@ fn generate_test_harness(sess: &ParseSess,\n         sess: sess,\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, cfg.clone(),\n-                             ExpansionConfig {\n-                                 deriving_hash_type_parameter: false,\n-                                 crate_name: \"test\".to_string(),\n-                             }),\n+                             ExpansionConfig::default(\"test\".to_string())),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,"}, {"sha": "c6dd3736857943bb7ef3df210281682e692ee066", "filename": "src/test/run-pass/non-built-in-quote.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792e32bcfc121a64ce59664949cf4e5df71cf201/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-built-in-quote.rs?ref=792e32bcfc121a64ce59664949cf4e5df71cf201", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! quote_tokens ( () => (()) )\n+\n+pub fn main() {\n+    quote_tokens!();\n+}"}]}