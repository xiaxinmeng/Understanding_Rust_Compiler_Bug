{"sha": "595a08258700f2f5689ad63d99b5d65d5dfb5eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NWEwODI1ODcwMGYyZjU2ODlhZDYzZDk5YjVkNjVkNWRmYjVlYWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-05T20:38:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-06T00:23:29Z"}, "message": "Remove the prefix in ObsoleteSyntax variants", "tree": {"sha": "9ae22bfa019862ba60b9f71f62ca2a388b991600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae22bfa019862ba60b9f71f62ca2a388b991600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/595a08258700f2f5689ad63d99b5d65d5dfb5eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/595a08258700f2f5689ad63d99b5d65d5dfb5eab", "html_url": "https://github.com/rust-lang/rust/commit/595a08258700f2f5689ad63d99b5d65d5dfb5eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/595a08258700f2f5689ad63d99b5d65d5dfb5eab/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "html_url": "https://github.com/rust-lang/rust/commit/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "df18b41198a9fd005133640a07d3f1cbd6d2a622", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/595a08258700f2f5689ad63d99b5d65d5dfb5eab/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595a08258700f2f5689ad63d99b5d65d5dfb5eab/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=595a08258700f2f5689ad63d99b5d65d5dfb5eab", "patch": "@@ -13,8 +13,6 @@\n //!\n //! Obsolete syntax that becomes too hard to parse can be removed.\n \n-pub use self::ObsoleteSyntax::*;\n-\n use ast::{Expr, ExprTup};\n use codemap::Span;\n use parse::parser;\n@@ -24,16 +22,16 @@ use ptr::P;\n /// The specific types of unsupported syntax\n #[derive(Copy, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n-    ObsoleteOwnedType,\n-    ObsoleteOwnedExpr,\n-    ObsoleteOwnedPattern,\n-    ObsoleteOwnedVector,\n-    ObsoleteOwnedSelf,\n-    ObsoleteImportRenaming,\n-    ObsoleteSubsliceMatch,\n-    ObsoleteExternCrateRenaming,\n-    ObsoleteProcType,\n-    ObsoleteProcExpr,\n+    OwnedType,\n+    OwnedExpr,\n+    OwnedPattern,\n+    OwnedVector,\n+    OwnedSelf,\n+    ImportRenaming,\n+    SubsliceMatch,\n+    ExternCrateRenaming,\n+    ProcType,\n+    ProcExpr,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -55,43 +53,43 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n-            ObsoleteProcType => (\n+            ObsoleteSyntax::ProcType => (\n                 \"the `proc` type\",\n                 \"use unboxed closures instead\",\n             ),\n-            ObsoleteProcExpr => (\n+            ObsoleteSyntax::ProcExpr => (\n                 \"`proc` expression\",\n                 \"use a `move ||` expression instead\",\n             ),\n-            ObsoleteOwnedType => (\n+            ObsoleteSyntax::OwnedType => (\n                 \"`~` notation for owned pointers\",\n                 \"use `Box<T>` in `std::owned` instead\"\n             ),\n-            ObsoleteOwnedExpr => (\n+            ObsoleteSyntax::OwnedExpr => (\n                 \"`~` notation for owned pointer allocation\",\n                 \"use the `box` operator instead of `~`\"\n             ),\n-            ObsoleteOwnedPattern => (\n+            ObsoleteSyntax::OwnedPattern => (\n                 \"`~` notation for owned pointer patterns\",\n                 \"use the `box` operator instead of `~`\"\n             ),\n-            ObsoleteOwnedVector => (\n+            ObsoleteSyntax::OwnedVector => (\n                 \"`~[T]` is no longer a type\",\n                 \"use the `Vec` type instead\"\n             ),\n-            ObsoleteOwnedSelf => (\n+            ObsoleteSyntax::OwnedSelf => (\n                 \"`~self` is no longer supported\",\n                 \"write `self: Box<Self>` instead\"\n             ),\n-            ObsoleteImportRenaming => (\n+            ObsoleteSyntax::ImportRenaming => (\n                 \"`use foo = bar` syntax\",\n                 \"write `use bar as foo` instead\"\n             ),\n-            ObsoleteSubsliceMatch => (\n+            ObsoleteSyntax::SubsliceMatch => (\n                 \"subslice match syntax\",\n                 \"instead of `..xs`, write `xs..` in a pattern\"\n             ),\n-            ObsoleteExternCrateRenaming => (\n+            ObsoleteSyntax::ExternCrateRenaming => (\n                 \"`extern crate foo = bar` syntax\",\n                 \"write `extern crate bar as foo` instead\"\n             )"}, {"sha": "cf7b93ac59f0fddf135a2e99dfd0242eca2e3d5d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/595a08258700f2f5689ad63d99b5d65d5dfb5eab/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595a08258700f2f5689ad63d99b5d65d5dfb5eab/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=595a08258700f2f5689ad63d99b5d65d5dfb5eab", "patch": "@@ -1156,7 +1156,7 @@ impl<'a> Parser<'a> {\n         let _ = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n         let _ = self.parse_ret_ty();\n \n-        self.obsolete(proc_span, ObsoleteProcType);\n+        self.obsolete(proc_span, ObsoleteSyntax::ProcType);\n \n         TyInfer\n     }\n@@ -1521,8 +1521,10 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let last_span = self.last_span;\n             match self.token {\n-                token::OpenDelim(token::Bracket) => self.obsolete(last_span, ObsoleteOwnedVector),\n-                _ => self.obsolete(last_span, ObsoleteOwnedType)\n+                token::OpenDelim(token::Bracket) => {\n+                    self.obsolete(last_span, ObsoleteSyntax::OwnedVector)\n+                }\n+                _ => self.obsolete(last_span, ObsoleteSyntax::OwnedType)\n             }\n             TyTup(vec![self.parse_ty()])\n         } else if self.check(&token::BinOp(token::Star)) {\n@@ -2285,7 +2287,7 @@ impl<'a> Parser<'a> {\n                     let span = self.last_span;\n                     let _ = self.parse_proc_decl();\n                     let _ = self.parse_expr();\n-                    return self.obsolete_expr(span, ObsoleteProcExpr);\n+                    return self.obsolete_expr(span, ObsoleteSyntax::ProcExpr);\n                 }\n                 if self.eat_keyword(keywords::If) {\n                     return self.parse_if_expr();\n@@ -2860,9 +2862,9 @@ impl<'a> Parser<'a> {\n             let last_span = self.last_span;\n             match self.token {\n                 token::OpenDelim(token::Bracket) => {\n-                    self.obsolete(last_span, ObsoleteOwnedVector)\n+                    self.obsolete(last_span, ObsoleteSyntax::OwnedVector)\n                 },\n-                _ => self.obsolete(last_span, ObsoleteOwnedExpr)\n+                _ => self.obsolete(last_span, ObsoleteSyntax::OwnedExpr)\n             }\n \n             let e = self.parse_prefix_expr();\n@@ -3233,7 +3235,7 @@ impl<'a> Parser<'a> {\n                     } else {\n                         let _ = self.parse_pat();\n                         let span = self.span;\n-                        self.obsolete(span, ObsoleteSubsliceMatch);\n+                        self.obsolete(span, ObsoleteSyntax::SubsliceMatch);\n                     }\n                     continue\n                 }\n@@ -3349,7 +3351,7 @@ impl<'a> Parser<'a> {\n             pat = PatBox(sub);\n             let last_span = self.last_span;\n             hi = last_span.hi;\n-            self.obsolete(last_span, ObsoleteOwnedPattern);\n+            self.obsolete(last_span, ObsoleteSyntax::OwnedPattern);\n             return P(ast::Pat {\n                 id: ast::DUMMY_NODE_ID,\n                 node: pat,\n@@ -4463,7 +4465,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     drop(self.expect_self_ident());\n                     let last_span = self.last_span;\n-                    self.obsolete(last_span, ObsoleteOwnedSelf)\n+                    self.obsolete(last_span, ObsoleteSyntax::OwnedSelf)\n                 }\n                 SelfStatic\n             }\n@@ -4514,7 +4516,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     drop(self.expect_self_ident());\n                     let last_span = self.last_span;\n-                    self.obsolete(last_span, ObsoleteOwnedSelf);\n+                    self.obsolete(last_span, ObsoleteSyntax::OwnedSelf);\n                     SelfStatic\n                 } else {\n                     SelfStatic\n@@ -5343,7 +5345,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     let path = self.parse_str();\n                     let span = self.span;\n-                    self.obsolete(span, ObsoleteExternCrateRenaming);\n+                    self.obsolete(span, ObsoleteSyntax::ExternCrateRenaming);\n                     Some(path)\n                 } else if self.eat_keyword(keywords::As) {\n                     // skip the ident if there is one\n@@ -6000,7 +6002,7 @@ impl<'a> Parser<'a> {\n                 path.push(id);\n             }\n             let span = mk_sp(path_lo, self.span.hi);\n-            self.obsolete(span, ObsoleteImportRenaming);\n+            self.obsolete(span, ObsoleteSyntax::ImportRenaming);\n             let path = ast::Path {\n                 span: span,\n                 global: false,"}]}