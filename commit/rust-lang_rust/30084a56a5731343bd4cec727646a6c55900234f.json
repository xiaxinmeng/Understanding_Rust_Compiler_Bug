{"sha": "30084a56a5731343bd4cec727646a6c55900234f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDg0YTU2YTU3MzEzNDNiZDRjZWM3Mjc2NDZhNmM1NTkwMDIzNGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T21:35:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T21:42:01Z"}, "message": "Simpler acessors for keywords", "tree": {"sha": "cca4821454502279317323fbc63dccdb9c68c5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca4821454502279317323fbc63dccdb9c68c5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30084a56a5731343bd4cec727646a6c55900234f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30084a56a5731343bd4cec727646a6c55900234f", "html_url": "https://github.com/rust-lang/rust/commit/30084a56a5731343bd4cec727646a6c55900234f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30084a56a5731343bd4cec727646a6c55900234f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ec0c10669307bc752812f535f96e121338d688", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ec0c10669307bc752812f535f96e121338d688", "html_url": "https://github.com/rust-lang/rust/commit/00ec0c10669307bc752812f535f96e121338d688"}], "stats": {"total": 1153, "additions": 128, "deletions": 1025}, "files": [{"sha": "c4fb425b078e7b8da2de7ae1565aadd1318c8dc5", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         ast::Pat::BindPat(pat) => pat,\n         _ => return None,\n     };\n-    if bind_pat.mut_kw_token().is_some() {\n+    if bind_pat.mut_token().is_some() {\n         tested_by!(test_not_inline_mut_variable);\n         return None;\n     }"}, {"sha": "b0d71eb3ded7b6472d99a00911f7b5c90203de41", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -372,7 +372,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::RefExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let mutability = Mutability::from_mutable(e.mut_kw_token().is_some());\n+                let mutability = Mutability::from_mutable(e.mut_token().is_some());\n                 self.alloc_expr(Expr::Ref { expr, mutability }, syntax_ptr)\n             }\n             ast::Expr::PrefixExpr(e) => {\n@@ -587,10 +587,8 @@ impl ExprCollector<'_> {\n         let pattern = match &pat {\n             ast::Pat::BindPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                let annotation = BindingAnnotation::new(\n-                    bp.mut_kw_token().is_some(),\n-                    bp.ref_kw_token().is_some(),\n-                );\n+                let annotation =\n+                    BindingAnnotation::new(bp.mut_token().is_some(), bp.ref_token().is_some());\n                 let subpat = bp.pat().map(|subpat| self.collect_pat(subpat));\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n@@ -631,7 +629,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::RefPat(p) => {\n                 let pat = self.collect_pat_opt(p.pat());\n-                let mutability = Mutability::from_mutable(p.mut_kw_token().is_some());\n+                let mutability = Mutability::from_mutable(p.mut_token().is_some());\n                 Pat::Ref { pat, mutability }\n             }\n             ast::Pat::PathPat(p) => {"}, {"sha": "b8fbf0ed4b16721f4934ca14829b9d0fbcb975db", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -74,7 +74,7 @@ impl FunctionData {\n             TypeRef::unit()\n         };\n \n-        let ret_type = if src.value.async_kw_token().is_some() {\n+        let ret_type = if src.value.async_token().is_some() {\n             let future_impl = desugar_future_path(ret_type);\n             let ty_bound = TypeBound::Path(future_impl);\n             TypeRef::ImplTrait(vec![ty_bound])\n@@ -135,7 +135,7 @@ impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let auto = src.value.auto_kw_token().is_some();\n+        let auto = src.value.auto_token().is_some();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n         let container = AssocContainerId::TraitId(tr);"}, {"sha": "ea29c4176c1dd6091b99b5a8222b57969e5ee5f7", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -77,7 +77,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::PointerType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.mut_kw_token().is_some());\n+                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::ArrayType(inner) => {\n@@ -88,7 +88,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::ReferenceType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.mut_kw_token().is_some());\n+                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::PlaceholderType(_inner) => TypeRef::Placeholder,"}, {"sha": "002cffba663837d5adbe9222eba0e92884f249ef", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -23,7 +23,7 @@ use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n     algo,\n-    ast::{self, AstNode, AstToken},\n+    ast::{self, AstNode},\n };\n use stdx::format_to;\n \n@@ -101,7 +101,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             let node = src_ptr.value.to_node(&src_ptr.file_syntax(&db));\n \n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.clone()) {\n-                (self_param.self_kw_token().unwrap().syntax().text_range(), \"self\".to_string())\n+                (self_param.self_token().unwrap().text_range(), \"self\".to_string())\n             } else {\n                 (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };"}, {"sha": "6637afaf70831a7c83050063851e1983e2a3bb29", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -191,8 +191,8 @@ impl<'a> CompletionContext<'a> {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n                 self.is_pat_binding_or_const = true;\n                 if bind_pat.at_token().is_some()\n-                    || bind_pat.ref_kw_token().is_some()\n-                    || bind_pat.mut_kw_token().is_some()\n+                    || bind_pat.ref_token().is_some()\n+                    || bind_pat.mut_token().is_some()\n                 {\n                     self.is_pat_binding_or_const = false;\n                 }"}, {"sha": "7d0544ff440c62a7e7a1e6ee7ee26e85ccec144d", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -152,7 +152,7 @@ fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Optio\n     if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n         if let ast::Pat::BindPat(it) = pat {\n-            if it.mut_kw_token().is_some() {\n+            if it.mut_token().is_some() {\n                 return Some(ReferenceAccess::Write);\n             }\n         }"}, {"sha": "1ee60e74ce78183bd9426b6de293b0b8e77ddba8", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -80,7 +80,7 @@ impl<N: AstNode> Iterator for AstChildren<N> {\n }\n \n mod support {\n-    use super::{AstChildren, AstNode, AstToken, SyntaxNode};\n+    use super::{AstChildren, AstNode, AstToken, SyntaxKind, SyntaxNode, SyntaxToken};\n \n     pub(super) fn child<N: AstNode>(parent: &SyntaxNode) -> Option<N> {\n         parent.children().find_map(N::cast)\n@@ -93,6 +93,10 @@ mod support {\n     pub(super) fn token<T: AstToken>(parent: &SyntaxNode) -> Option<T> {\n         parent.children_with_tokens().filter_map(|it| it.into_token()).find_map(T::cast)\n     }\n+\n+    pub(super) fn token2(parent: &SyntaxNode, kind: SyntaxKind) -> Option<SyntaxToken> {\n+        parent.children_with_tokens().filter_map(|it| it.into_token()).find(|it| it.kind() == kind)\n+    }\n }\n \n #[test]"}, {"sha": "93aa3d45faf4f0bdd8b3834b11232d58e857a096", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -48,12 +48,6 @@ impl ast::IfExpr {\n     }\n }\n \n-impl ast::RefExpr {\n-    pub fn raw_token(&self) -> Option<SyntaxToken> {\n-        None // FIXME: implement &raw\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum PrefixOp {\n     /// The `*` operator for dereferencing"}, {"sha": "11ec70bc0962bb3112eb229675c398614af8e393", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -279,7 +279,7 @@ pub enum SelfParamKind {\n impl ast::SelfParam {\n     pub fn kind(&self) -> SelfParamKind {\n         if self.amp_token().is_some() {\n-            if self.amp_mut_kw_token().is_some() {\n+            if self.amp_mut_token().is_some() {\n                 SelfParamKind::MutRef\n             } else {\n                 SelfParamKind::Ref\n@@ -290,21 +290,21 @@ impl ast::SelfParam {\n     }\n \n     /// the \"mut\" in \"mut self\", not the one in \"&mut self\"\n-    pub fn mut_kw_token(&self) -> Option<ast::MutKw> {\n+    pub fn mut_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .take_while(|it| it.kind() != T![&])\n-            .find_map(ast::MutKw::cast)\n+            .find(|it| it.kind() == T![mut])\n     }\n \n     /// the \"mut\" in \"&mut self\", not the one in \"mut self\"\n-    pub fn amp_mut_kw_token(&self) -> Option<ast::MutKw> {\n+    pub fn amp_mut_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .skip_while(|it| it.kind() != T![&])\n-            .find_map(ast::MutKw::cast)\n+            .find(|it| it.kind() == T![mut])\n     }\n }\n \n@@ -340,7 +340,7 @@ impl ast::TypeBound {\n     }\n \n     pub fn question_token(&self) -> Option<ast::Question> {\n-        if self.const_kw_token().is_some() {\n+        if self.const_token().is_some() {\n             self.syntax()\n                 .children_with_tokens()\n                 .filter_map(|it| it.into_token())\n@@ -364,11 +364,11 @@ impl ast::Visibility {\n     pub fn kind(&self) -> VisibilityKind {\n         if let Some(path) = support::children(self.syntax()).next() {\n             VisibilityKind::In(path)\n-        } else if self.crate_kw_token().is_some() {\n+        } else if self.crate_token().is_some() {\n             VisibilityKind::PubCrate\n-        } else if self.super_kw_token().is_some() {\n+        } else if self.super_token().is_some() {\n             VisibilityKind::PubSuper\n-        } else if self.self_kw_token().is_some() {\n+        } else if self.self_token().is_some() {\n             VisibilityKind::PubSuper\n         } else {\n             VisibilityKind::Pub"}, {"sha": "20f663046797bb22a453fc899931e433c0e9e1d9", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 71, "deletions": 69, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -4,7 +4,7 @@ use super::tokens::*;\n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n     SyntaxKind::{self, *},\n-    SyntaxNode,\n+    SyntaxNode, SyntaxToken,\n };\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SourceFile {\n@@ -48,11 +48,11 @@ impl ast::DocCommentsOwner for FnDef {}\n impl ast::AttrsOwner for FnDef {}\n impl FnDef {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n-    pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn default_kw_token(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn async_kw_token(&self) -> Option<AsyncKw> { support::token(&self.syntax) }\n-    pub fn unsafe_kw_token(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn fn_kw_token(&self) -> Option<FnKw> { support::token(&self.syntax) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CONST_KW) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, DEFAULT_KW) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, ASYNC_KW) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNSAFE_KW) }\n+    pub fn fn_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, FN_KW) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n@@ -98,7 +98,7 @@ impl ast::TypeParamsOwner for StructDef {}\n impl ast::AttrsOwner for StructDef {}\n impl ast::DocCommentsOwner for StructDef {}\n impl StructDef {\n-    pub fn struct_kw_token(&self) -> Option<StructKw> { support::token(&self.syntax) }\n+    pub fn struct_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, STRUCT_KW) }\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n     pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n }\n@@ -123,7 +123,7 @@ impl ast::TypeParamsOwner for UnionDef {}\n impl ast::AttrsOwner for UnionDef {}\n impl ast::DocCommentsOwner for UnionDef {}\n impl UnionDef {\n-    pub fn union_kw_token(&self) -> Option<UnionKw> { support::token(&self.syntax) }\n+    pub fn union_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNION_KW) }\n     pub fn record_field_def_list(&self) -> Option<RecordFieldDefList> {\n         support::child(&self.syntax)\n     }\n@@ -230,7 +230,7 @@ impl ast::TypeParamsOwner for EnumDef {}\n impl ast::AttrsOwner for EnumDef {}\n impl ast::DocCommentsOwner for EnumDef {}\n impl EnumDef {\n-    pub fn enum_kw_token(&self) -> Option<EnumKw> { support::token(&self.syntax) }\n+    pub fn enum_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, ENUM_KW) }\n     pub fn variant_list(&self) -> Option<EnumVariantList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -299,9 +299,9 @@ impl ast::DocCommentsOwner for TraitDef {}\n impl ast::TypeParamsOwner for TraitDef {}\n impl ast::TypeBoundsOwner for TraitDef {}\n impl TraitDef {\n-    pub fn unsafe_kw_token(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn auto_kw_token(&self) -> Option<AutoKw> { support::token(&self.syntax) }\n-    pub fn trait_kw_token(&self) -> Option<TraitKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNSAFE_KW) }\n+    pub fn auto_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, AUTO_KW) }\n+    pub fn trait_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, TRAIT_KW) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -324,7 +324,7 @@ impl ast::NameOwner for Module {}\n impl ast::AttrsOwner for Module {}\n impl ast::DocCommentsOwner for Module {}\n impl Module {\n-    pub fn mod_kw_token(&self) -> Option<ModKw> { support::token(&self.syntax) }\n+    pub fn mod_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MOD_KW) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n     pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n }\n@@ -371,8 +371,8 @@ impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n impl ast::TypeAscriptionOwner for ConstDef {}\n impl ConstDef {\n-    pub fn default_kw_token(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, DEFAULT_KW) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CONST_KW) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n@@ -399,8 +399,8 @@ impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n impl ast::TypeAscriptionOwner for StaticDef {}\n impl StaticDef {\n-    pub fn static_kw_token(&self) -> Option<StaticKw> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn static_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, STATIC_KW) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n@@ -427,8 +427,8 @@ impl ast::AttrsOwner for TypeAliasDef {}\n impl ast::DocCommentsOwner for TypeAliasDef {}\n impl ast::TypeBoundsOwner for TypeAliasDef {}\n impl TypeAliasDef {\n-    pub fn default_kw_token(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn type_kw_token(&self) -> Option<TypeKw> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, DEFAULT_KW) }\n+    pub fn type_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, TYPE_KW) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n@@ -451,12 +451,12 @@ impl AstNode for ImplDef {\n impl ast::TypeParamsOwner for ImplDef {}\n impl ast::AttrsOwner for ImplDef {}\n impl ImplDef {\n-    pub fn default_kw_token(&self) -> Option<DefaultKw> { support::token(&self.syntax) }\n-    pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn unsafe_kw_token(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn impl_kw_token(&self) -> Option<ImplKw> { support::token(&self.syntax) }\n+    pub fn default_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, DEFAULT_KW) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CONST_KW) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNSAFE_KW) }\n+    pub fn impl_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, IMPL_KW) }\n     pub fn excl_token(&self) -> Option<Excl> { support::token(&self.syntax) }\n-    pub fn for_kw_token(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, FOR_KW) }\n     pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -552,8 +552,8 @@ impl AstNode for PointerType {\n }\n impl PointerType {\n     pub fn star_token(&self) -> Option<Star> { support::token(&self.syntax) }\n-    pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CONST_KW) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -616,7 +616,7 @@ impl AstNode for ReferenceType {\n impl ReferenceType {\n     pub fn amp_token(&self) -> Option<Amp> { support::token(&self.syntax) }\n     pub fn lifetime_token(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -654,8 +654,8 @@ impl AstNode for FnPointerType {\n }\n impl FnPointerType {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n-    pub fn unsafe_kw_token(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n-    pub fn fn_kw_token(&self) -> Option<FnKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNSAFE_KW) }\n+    pub fn fn_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, FN_KW) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n }\n@@ -675,7 +675,7 @@ impl AstNode for ForType {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ForType {\n-    pub fn for_kw_token(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, FOR_KW) }\n     pub fn type_param_list(&self) -> Option<TypeParamList> { support::child(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n@@ -696,7 +696,7 @@ impl AstNode for ImplTraitType {\n }\n impl ast::TypeBoundsOwner for ImplTraitType {}\n impl ImplTraitType {\n-    pub fn impl_kw_token(&self) -> Option<ImplKw> { support::token(&self.syntax) }\n+    pub fn impl_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, IMPL_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DynTraitType {\n@@ -715,7 +715,7 @@ impl AstNode for DynTraitType {\n }\n impl ast::TypeBoundsOwner for DynTraitType {}\n impl DynTraitType {\n-    pub fn dyn_kw_token(&self) -> Option<DynKw> { support::token(&self.syntax) }\n+    pub fn dyn_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, DYN_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleExpr {\n@@ -816,9 +816,9 @@ impl AstNode for LambdaExpr {\n }\n impl ast::AttrsOwner for LambdaExpr {}\n impl LambdaExpr {\n-    pub fn static_kw_token(&self) -> Option<StaticKw> { support::token(&self.syntax) }\n-    pub fn async_kw_token(&self) -> Option<AsyncKw> { support::token(&self.syntax) }\n-    pub fn move_kw_token(&self) -> Option<MoveKw> { support::token(&self.syntax) }\n+    pub fn static_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, STATIC_KW) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, ASYNC_KW) }\n+    pub fn move_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MOVE_KW) }\n     pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n     pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -840,7 +840,7 @@ impl AstNode for IfExpr {\n }\n impl ast::AttrsOwner for IfExpr {}\n impl IfExpr {\n-    pub fn if_kw_token(&self) -> Option<IfKw> { support::token(&self.syntax) }\n+    pub fn if_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, IF_KW) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -861,7 +861,7 @@ impl AstNode for LoopExpr {\n impl ast::AttrsOwner for LoopExpr {}\n impl ast::LoopBodyOwner for LoopExpr {}\n impl LoopExpr {\n-    pub fn loop_kw_token(&self) -> Option<LoopKw> { support::token(&self.syntax) }\n+    pub fn loop_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, LOOP_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TryBlockExpr {\n@@ -880,7 +880,7 @@ impl AstNode for TryBlockExpr {\n }\n impl ast::AttrsOwner for TryBlockExpr {}\n impl TryBlockExpr {\n-    pub fn try_kw_token(&self) -> Option<TryKw> { support::token(&self.syntax) }\n+    pub fn try_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, TRY_KW) }\n     pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -901,9 +901,9 @@ impl AstNode for ForExpr {\n impl ast::AttrsOwner for ForExpr {}\n impl ast::LoopBodyOwner for ForExpr {}\n impl ForExpr {\n-    pub fn for_kw_token(&self) -> Option<ForKw> { support::token(&self.syntax) }\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, FOR_KW) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn in_kw_token(&self) -> Option<InKw> { support::token(&self.syntax) }\n+    pub fn in_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, IN_KW) }\n     pub fn iterable(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -924,7 +924,7 @@ impl AstNode for WhileExpr {\n impl ast::AttrsOwner for WhileExpr {}\n impl ast::LoopBodyOwner for WhileExpr {}\n impl WhileExpr {\n-    pub fn while_kw_token(&self) -> Option<WhileKw> { support::token(&self.syntax) }\n+    pub fn while_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, WHILE_KW) }\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -944,7 +944,9 @@ impl AstNode for ContinueExpr {\n }\n impl ast::AttrsOwner for ContinueExpr {}\n impl ContinueExpr {\n-    pub fn continue_kw_token(&self) -> Option<ContinueKw> { support::token(&self.syntax) }\n+    pub fn continue_token(&self) -> Option<SyntaxToken> {\n+        support::token2(&self.syntax, CONTINUE_KW)\n+    }\n     pub fn lifetime_token(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -964,7 +966,7 @@ impl AstNode for BreakExpr {\n }\n impl ast::AttrsOwner for BreakExpr {}\n impl BreakExpr {\n-    pub fn break_kw_token(&self) -> Option<BreakKw> { support::token(&self.syntax) }\n+    pub fn break_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, BREAK_KW) }\n     pub fn lifetime_token(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n@@ -1004,7 +1006,7 @@ impl AstNode for BlockExpr {\n impl ast::AttrsOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n-    pub fn unsafe_kw_token(&self) -> Option<UnsafeKw> { support::token(&self.syntax) }\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, UNSAFE_KW) }\n     pub fn block(&self) -> Option<Block> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1128,7 +1130,7 @@ impl ast::AttrsOwner for AwaitExpr {}\n impl AwaitExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<Dot> { support::token(&self.syntax) }\n-    pub fn await_kw_token(&self) -> Option<AwaitKw> { support::token(&self.syntax) }\n+    pub fn await_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, AWAIT_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TryExpr {\n@@ -1147,7 +1149,7 @@ impl AstNode for TryExpr {\n }\n impl ast::AttrsOwner for TryExpr {}\n impl TryExpr {\n-    pub fn try_kw_token(&self) -> Option<TryKw> { support::token(&self.syntax) }\n+    pub fn try_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, TRY_KW) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1168,7 +1170,7 @@ impl AstNode for CastExpr {\n impl ast::AttrsOwner for CastExpr {}\n impl CastExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn as_kw_token(&self) -> Option<AsKw> { support::token(&self.syntax) }\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, AS_KW) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1189,8 +1191,8 @@ impl AstNode for RefExpr {\n impl ast::AttrsOwner for RefExpr {}\n impl RefExpr {\n     pub fn amp_token(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn raw_kw_token(&self) -> Option<RawKw> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn raw_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, RAW_KW) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1230,7 +1232,7 @@ impl AstNode for BoxExpr {\n }\n impl ast::AttrsOwner for BoxExpr {}\n impl BoxExpr {\n-    pub fn box_kw_token(&self) -> Option<BoxKw> { support::token(&self.syntax) }\n+    pub fn box_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, BOX_KW) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1306,7 +1308,7 @@ impl AstNode for MatchExpr {\n }\n impl ast::AttrsOwner for MatchExpr {}\n impl MatchExpr {\n-    pub fn match_kw_token(&self) -> Option<MatchKw> { support::token(&self.syntax) }\n+    pub fn match_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MATCH_KW) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn match_arm_list(&self) -> Option<MatchArmList> { support::child(&self.syntax) }\n }\n@@ -1369,7 +1371,7 @@ impl AstNode for MatchGuard {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl MatchGuard {\n-    pub fn if_kw_token(&self) -> Option<IfKw> { support::token(&self.syntax) }\n+    pub fn if_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, IF_KW) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1489,7 +1491,7 @@ impl AstNode for RefPat {\n }\n impl RefPat {\n     pub fn amp_token(&self) -> Option<Amp> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1508,7 +1510,7 @@ impl AstNode for BoxPat {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl BoxPat {\n-    pub fn box_kw_token(&self) -> Option<BoxKw> { support::token(&self.syntax) }\n+    pub fn box_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, BOX_KW) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1529,8 +1531,8 @@ impl AstNode for BindPat {\n impl ast::AttrsOwner for BindPat {}\n impl ast::NameOwner for BindPat {}\n impl BindPat {\n-    pub fn ref_kw_token(&self) -> Option<RefKw> { support::token(&self.syntax) }\n-    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn ref_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, REF_KW) }\n+    pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, MUT_KW) }\n     pub fn at_token(&self) -> Option<At> { support::token(&self.syntax) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n@@ -1786,10 +1788,10 @@ impl AstNode for Visibility {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Visibility {\n-    pub fn pub_kw_token(&self) -> Option<PubKw> { support::token(&self.syntax) }\n-    pub fn super_kw_token(&self) -> Option<SuperKw> { support::token(&self.syntax) }\n-    pub fn self_kw_token(&self) -> Option<SelfKw> { support::token(&self.syntax) }\n-    pub fn crate_kw_token(&self) -> Option<CrateKw> { support::token(&self.syntax) }\n+    pub fn pub_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, PUB_KW) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, SUPER_KW) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, SELF_KW) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CRATE_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Name {\n@@ -1994,7 +1996,7 @@ impl AstNode for TypeBound {\n }\n impl TypeBound {\n     pub fn lifetime_token(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CONST_KW) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2051,7 +2053,7 @@ impl AstNode for WhereClause {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl WhereClause {\n-    pub fn where_kw_token(&self) -> Option<WhereKw> { support::token(&self.syntax) }\n+    pub fn where_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, WHERE_KW) }\n     pub fn predicates(&self) -> AstChildren<WherePred> { support::children(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2110,7 +2112,7 @@ impl AstNode for LetStmt {\n impl ast::AttrsOwner for LetStmt {}\n impl ast::TypeAscriptionOwner for LetStmt {}\n impl LetStmt {\n-    pub fn let_kw_token(&self) -> Option<LetKw> { support::token(&self.syntax) }\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, LET_KW) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -2132,7 +2134,7 @@ impl AstNode for Condition {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl Condition {\n-    pub fn let_kw_token(&self) -> Option<LetKw> { support::token(&self.syntax) }\n+    pub fn let_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, LET_KW) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -2201,7 +2203,7 @@ impl ast::AttrsOwner for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<Amp> { support::token(&self.syntax) }\n     pub fn lifetime_token(&self) -> Option<Lifetime> { support::token(&self.syntax) }\n-    pub fn self_kw_token(&self) -> Option<SelfKw> { support::token(&self.syntax) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, SELF_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Param {\n@@ -2242,7 +2244,7 @@ impl AstNode for UseItem {\n impl ast::AttrsOwner for UseItem {}\n impl ast::VisibilityOwner for UseItem {}\n impl UseItem {\n-    pub fn use_kw_token(&self) -> Option<UseKw> { support::token(&self.syntax) }\n+    pub fn use_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, USE_KW) }\n     pub fn use_tree(&self) -> Option<UseTree> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2283,7 +2285,7 @@ impl AstNode for Alias {\n }\n impl ast::NameOwner for Alias {}\n impl Alias {\n-    pub fn as_kw_token(&self) -> Option<AsKw> { support::token(&self.syntax) }\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, AS_KW) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseTreeList {\n@@ -2323,8 +2325,8 @@ impl AstNode for ExternCrateItem {\n impl ast::AttrsOwner for ExternCrateItem {}\n impl ast::VisibilityOwner for ExternCrateItem {}\n impl ExternCrateItem {\n-    pub fn extern_kw_token(&self) -> Option<ExternKw> { support::token(&self.syntax) }\n-    pub fn crate_kw_token(&self) -> Option<CrateKw> { support::token(&self.syntax) }\n+    pub fn extern_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, EXTERN_KW) }\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, CRATE_KW) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn alias(&self) -> Option<Alias> { support::child(&self.syntax) }\n }"}, {"sha": "7344b0e49675190abc80406f833352e130aad6cc", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 2, "deletions": 914, "changes": 916, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -1046,906 +1046,6 @@ impl AstToken for Shreq {\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AsKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AsKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AsKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AS_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AsyncKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AsyncKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AsyncKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ASYNC_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AwaitKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AwaitKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AwaitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AWAIT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct BoxKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for BoxKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for BoxKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct BreakKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for BreakKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for BreakKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == BREAK_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ConstKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ConstKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ContinueKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ContinueKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ContinueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct CrateKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for CrateKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for CrateKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CRATE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DynKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for DynKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for DynKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DYN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ElseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ElseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ElseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ELSE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for EnumKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for EnumKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExternKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ExternKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ExternKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FalseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FalseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FalseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FALSE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FnKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for FnKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for FnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ForKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ForKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ForKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct IfKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for IfKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for IfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ImplKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ImplKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct InKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for InKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for InKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == IN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LetKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LetKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LetKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LET_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LoopKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for LoopKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for LoopKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MacroKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MacroKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MacroKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MatchKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MatchKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MatchKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ModKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ModKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ModKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MOD_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MoveKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MoveKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MoveKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MOVE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MutKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for MutKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for MutKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == MUT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PubKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for PubKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for PubKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PUB_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RefKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RefKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RefKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == REF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ReturnKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ReturnKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ReturnKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SelfKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for SelfKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for SelfKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StaticKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for StaticKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for StaticKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for StructKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for StructKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SuperKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for SuperKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for SuperKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == SUPER_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TraitKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TraitKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TrueKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TrueKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TrueKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRUE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TryKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TryKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TryKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for TypeKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for TypeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnsafeKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UnsafeKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UnsafeKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNSAFE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UseKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UseKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UseKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == USE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct WhereKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for WhereKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for WhereKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct WhileKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for WhileKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for WhileKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == WHILE_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AutoKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for AutoKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for AutoKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == AUTO_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct DefaultKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for DefaultKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for DefaultKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == DEFAULT_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ExistentialKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for ExistentialKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for ExistentialKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == EXISTENTIAL_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnionKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for UnionKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for UnionKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RawKw {\n-    pub(crate) syntax: SyntaxToken,\n-}\n-impl std::fmt::Display for RawKw {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(&self.syntax, f)\n-    }\n-}\n-impl AstToken for RawKw {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_KW }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IntNumber {\n     pub(crate) syntax: SyntaxToken,\n }\n@@ -2687,8 +1787,6 @@ pub enum LiteralToken {\n     FloatNumber(FloatNumber),\n     String(String),\n     RawString(RawString),\n-    TrueKw(TrueKw),\n-    FalseKw(FalseKw),\n     ByteString(ByteString),\n     RawByteString(RawByteString),\n     Char(Char),\n@@ -2706,12 +1804,6 @@ impl From<String> for LiteralToken {\n impl From<RawString> for LiteralToken {\n     fn from(node: RawString) -> LiteralToken { LiteralToken::RawString(node) }\n }\n-impl From<TrueKw> for LiteralToken {\n-    fn from(node: TrueKw) -> LiteralToken { LiteralToken::TrueKw(node) }\n-}\n-impl From<FalseKw> for LiteralToken {\n-    fn from(node: FalseKw) -> LiteralToken { LiteralToken::FalseKw(node) }\n-}\n impl From<ByteString> for LiteralToken {\n     fn from(node: ByteString) -> LiteralToken { LiteralToken::ByteString(node) }\n }\n@@ -2732,8 +1824,8 @@ impl std::fmt::Display for LiteralToken {\n impl AstToken for LiteralToken {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            INT_NUMBER | FLOAT_NUMBER | STRING | RAW_STRING | TRUE_KW | FALSE_KW | BYTE_STRING\n-            | RAW_BYTE_STRING | CHAR | BYTE => true,\n+            INT_NUMBER | FLOAT_NUMBER | STRING | RAW_STRING | BYTE_STRING | RAW_BYTE_STRING\n+            | CHAR | BYTE => true,\n             _ => false,\n         }\n     }\n@@ -2743,8 +1835,6 @@ impl AstToken for LiteralToken {\n             FLOAT_NUMBER => LiteralToken::FloatNumber(FloatNumber { syntax }),\n             STRING => LiteralToken::String(String { syntax }),\n             RAW_STRING => LiteralToken::RawString(RawString { syntax }),\n-            TRUE_KW => LiteralToken::TrueKw(TrueKw { syntax }),\n-            FALSE_KW => LiteralToken::FalseKw(FalseKw { syntax }),\n             BYTE_STRING => LiteralToken::ByteString(ByteString { syntax }),\n             RAW_BYTE_STRING => LiteralToken::RawByteString(RawByteString { syntax }),\n             CHAR => LiteralToken::Char(Char { syntax }),\n@@ -2759,8 +1849,6 @@ impl AstToken for LiteralToken {\n             LiteralToken::FloatNumber(it) => &it.syntax,\n             LiteralToken::String(it) => &it.syntax,\n             LiteralToken::RawString(it) => &it.syntax,\n-            LiteralToken::TrueKw(it) => &it.syntax,\n-            LiteralToken::FalseKw(it) => &it.syntax,\n             LiteralToken::ByteString(it) => &it.syntax,\n             LiteralToken::RawByteString(it) => &it.syntax,\n             LiteralToken::Char(it) => &it.syntax,"}, {"sha": "bb97b13fe52e794105481327bba5a9f54b5774d8", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -814,8 +814,8 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             FloatNumber,\n             String,\n             RawString,\n-            TrueKw,\n-            FalseKw,\n+            // TrueKw,\n+            // FalseKw,\n             ByteString,\n             RawByteString,\n             Char,"}, {"sha": "cc98802f6135f4986ca121fb6c793732fd73eb01", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/30084a56a5731343bd4cec727646a6c55900234f/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30084a56a5731343bd4cec727646a6c55900234f/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=30084a56a5731343bd4cec727646a6c55900234f", "patch": "@@ -58,11 +58,14 @@ fn generate_tokens(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         .chain(kinds.tokens.into_iter().copied().map(|x| x.into()))\n         .collect();\n \n-    let tokens = all_token_kinds.iter().map(|kind_str| {\n+    let tokens = all_token_kinds.iter().filter_map(|kind_str| {\n+        if kind_str.ends_with(\"_KW\") {\n+            return None;\n+        }\n         let kind_str = &**kind_str;\n         let kind = format_ident!(\"{}\", kind_str);\n         let name = format_ident!(\"{}\", to_pascal_case(kind_str));\n-        quote! {\n+        let res = quote! {\n             #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n             pub struct #name {\n                 pub(crate) syntax: SyntaxToken,\n@@ -81,7 +84,8 @@ fn generate_tokens(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n                 }\n                 fn syntax(&self) -> &SyntaxToken { &self.syntax }\n             }\n-        }\n+        };\n+        Some(res)\n     });\n \n     let enums = grammar.token_enums.iter().map(|en| {\n@@ -186,8 +190,12 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         });\n \n         let methods = node.fields.iter().map(|(name, field)| {\n+            let is_kw = name.ends_with(\"Kw\");\n             let method_name = match field {\n-                FieldSrc::Shorthand => format_ident!(\"{}\", to_lower_snake_case(&name)),\n+                FieldSrc::Shorthand => {\n+                    let name = if is_kw { &name[..name.len() - 2] } else { &name };\n+                    format_ident!(\"{}\", to_lower_snake_case(name))\n+                }\n                 _ => format_ident!(\"{}\", name),\n             };\n             let ty = match field {\n@@ -209,9 +217,18 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n                     let is_token = token_kinds.contains(&ty.to_string());\n                     if is_token {\n                         let method_name = format_ident!(\"{}_token\", method_name);\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::token(&self.syntax)\n+                        if is_kw {\n+                            let token_kind = format_ident!(\"{}\", to_upper_snake_case(name));\n+                            quote! {\n+                                pub fn #method_name(&self) -> Option<SyntaxToken> {\n+                                    support::token2(&self.syntax, #token_kind)\n+                                }\n+                            }\n+                        } else {\n+                            quote! {\n+                                pub fn #method_name(&self) -> Option<#ty> {\n+                                    support::token(&self.syntax)\n+                                }\n                             }\n                         }\n                     } else {\n@@ -332,7 +349,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n \n     let ast = quote! {\n         use crate::{\n-            SyntaxNode, SyntaxKind::{self, *},\n+            SyntaxNode, SyntaxToken, SyntaxKind::{self, *},\n             ast::{self, AstNode, AstChildren, support},\n         };\n "}]}