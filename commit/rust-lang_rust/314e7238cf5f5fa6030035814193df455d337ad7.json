{"sha": "314e7238cf5f5fa6030035814193df455d337ad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNGU3MjM4Y2Y1ZjVmYTYwMzAwMzU4MTQxOTNkZjQ1NWQzMzdhZDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T08:32:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T08:32:36Z"}, "message": "avoid a bunch of as_ref/as_mut", "tree": {"sha": "6c9bae47746053740942ab17e776b1d86ba54454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9bae47746053740942ab17e776b1d86ba54454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314e7238cf5f5fa6030035814193df455d337ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314e7238cf5f5fa6030035814193df455d337ad7", "html_url": "https://github.com/rust-lang/rust/commit/314e7238cf5f5fa6030035814193df455d337ad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314e7238cf5f5fa6030035814193df455d337ad7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97791a56da50a87a3d1c3e4290290d436f9931f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/97791a56da50a87a3d1c3e4290290d436f9931f7", "html_url": "https://github.com/rust-lang/rust/commit/97791a56da50a87a3d1c3e4290290d436f9931f7"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "04020009c6943c2e8227c181e6e7eaaf2ff495e0", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=314e7238cf5f5fa6030035814193df455d337ad7", "patch": "@@ -115,7 +115,7 @@ fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n         get_arg_flag_value(\"--manifest-path\").map(|m| Path::new(&m).canonicalize().unwrap());\n \n     let mut cmd = cargo_metadata::MetadataCommand::new();\n-    if let Some(manifest_path) = manifest_path.as_ref() {\n+    if let Some(manifest_path) = &manifest_path {\n         cmd.manifest_path(manifest_path);\n     }\n     let mut metadata = if let Ok(metadata) = cmd.exec() {\n@@ -131,7 +131,7 @@ fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n         .iter()\n         .position(|package| {\n             let package_manifest_path = Path::new(&package.manifest_path);\n-            if let Some(manifest_path) = manifest_path.as_ref() {\n+            if let Some(manifest_path) = &manifest_path {\n                 package_manifest_path == manifest_path\n             } else {\n                 let current_dir = current_dir.as_ref().expect(\"could not read current directory\");\n@@ -368,8 +368,8 @@ path = \"lib.rs\"\n     command.env(\"XARGO_HOME\", &dir);\n     command.env(\"XARGO_RUST_SRC\", &rust_src);\n     // Handle target flag.\n-    if let Some(target) = target.as_ref() {\n-        command.arg(\"--target\").arg(&target);\n+    if let Some(target) = &target {\n+        command.arg(\"--target\").arg(target);\n     }\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n@@ -379,7 +379,7 @@ path = \"lib.rs\"\n     // That should be it! But we need to figure out where xargo built stuff.\n     // Unfortunately, it puts things into a different directory when the\n     // architecture matches the host.\n-    let is_host = match target.as_ref() {\n+    let is_host = match &target {\n         None => true,\n         Some(target) => target == &rustc_version::version_meta().unwrap().host,\n     };\n@@ -404,12 +404,12 @@ fn main() {\n         return;\n     }\n \n-    if let Some(\"miri\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+    if let Some(\"miri\") = std::env::args().nth(1).as_deref() {\n         // This arm is for when `cargo miri` is called. We call `cargo check` for each applicable target,\n         // but with the `RUSTC` env var set to the `cargo-miri` binary so that we come back in the other branch,\n         // and dispatch the invocations to `rustc` and `miri`, respectively.\n         in_cargo_miri();\n-    } else if let Some(\"rustc\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+    } else if let Some(\"rustc\") = std::env::args().nth(1).as_deref() {\n         // This arm is executed when `cargo-miri` runs `cargo check` with the `RUSTC_WRAPPER` env var set to itself:\n         // dependencies get dispatched to `rustc`, the final test/binary to `miri`.\n         inside_cargo_rustc();"}, {"sha": "72635f7bf57b0547191a3c098f3656ebd1c6b32e", "filename": "src/machine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=314e7238cf5f5fa6030035814193df455d337ad7", "patch": "@@ -429,7 +429,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n         let (stacks, base_tag) =\n-            if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n+            if let Some(stacked_borrows) = &memory_extra.stacked_borrows {\n                 let (stacks, base_tag) =\n                     Stacks::new_allocation(id, alloc.size, Rc::clone(stacked_borrows), kind);\n                 (Some(stacks), base_tag)\n@@ -440,7 +440,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let mut stacked_borrows = memory_extra.stacked_borrows.as_ref().map(|sb| sb.borrow_mut());\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n             |alloc| {\n-                if let Some(stacked_borrows) = stacked_borrows.as_mut() {\n+                if let Some(stacked_borrows) = &mut stacked_borrows {\n                     // Only globals may already contain pointers at this point\n                     assert_eq!(kind, MiriMemoryKind::Global.into());\n                     stacked_borrows.global_base_ptr(alloc)\n@@ -455,7 +455,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn tag_global_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n-        if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n+        if let Some(stacked_borrows) = &memory_extra.stacked_borrows {\n             stacked_borrows.borrow_mut().global_base_ptr(id)\n         } else {\n             Tag::Untagged\n@@ -518,7 +518,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_ref() {\n+        if let Some(stacked_borrows) = &alloc.extra.stacked_borrows {\n             stacked_borrows.memory_read(ptr, size)\n         } else {\n             Ok(())\n@@ -531,7 +531,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_mut() {\n+        if let Some(stacked_borrows) = &mut alloc.extra.stacked_borrows {\n             stacked_borrows.memory_written(ptr, size)\n         } else {\n             Ok(())\n@@ -544,7 +544,7 @@ impl AllocationExtra<Tag> for AllocExtra {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(stacked_borrows) = alloc.extra.stacked_borrows.as_mut() {\n+        if let Some(stacked_borrows) = &mut alloc.extra.stacked_borrows {\n             stacked_borrows.memory_deallocated(ptr, size)\n         } else {\n             Ok(())"}, {"sha": "1aec236a533c7cab817579f99e40631030eebbef", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e7238cf5f5fa6030035814193df455d337ad7/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=314e7238cf5f5fa6030035814193df455d337ad7", "patch": "@@ -123,7 +123,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         trace!(\"handle_stack_pop(extra = {:?}, unwinding = {})\", extra, unwinding);\n-        if let Some(stacked_borrows) = this.memory.extra.stacked_borrows.as_ref() {\n+        if let Some(stacked_borrows) = &this.memory.extra.stacked_borrows {\n             stacked_borrows.borrow_mut().end_call(extra.call_id);\n         }\n "}]}