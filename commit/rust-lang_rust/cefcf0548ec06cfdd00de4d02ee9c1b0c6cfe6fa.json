{"sha": "cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZmNmMDU0OGVjMDZjZmRkMDBkZTRkMDJlZTljMWIwYzZjZmU2ZmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-26T12:52:59Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-30T16:18:33Z"}, "message": "Merge ConstMathError into EvalErrorKind", "tree": {"sha": "20088a2916c00c47b0e0dfdcc864b32fb63c6913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20088a2916c00c47b0e0dfdcc864b32fb63c6913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrnQdksHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MATY\nKA/9F/M+o/DQUux1X4L2RnuC/6dLWb4+V6zjOuK2kOr9mauNOmy+0XUvD8FM5tEZ\nU6wIDYG1ggEwkDp5xWf+k5/IcQUIQmp4pKEen4qFW2m2TpKbuUtjlRvERThVE39l\nY74c1V9/0COoCgcVwhSeAWRzhlHaPZ8rk25xBwK5/+MR7LdG5psZaYTLZnb5gbL/\nMoFxvymZ08G+D2uqUwTAn15HmKQZXzpEe5+bNu/2RBx3aEkhgLU5RgKpVkapaLo0\nCBpO3hKH6Gw6QDZMr7Ud/m/horcpkgTRC6yHK3F6fl6strhhHp2uucy5/mUhLpHl\nkW0XuV6S5HG67OaVERmQWS0UKnrVgjGMlS+UJ+ilaSJgy545Ul0uOFvllPlYF7S7\nkG+sRp3/KH+e/qigzqH0+RqcOrVg3G3+XGQi7iwDCTbIeRgWVQFmr5kwOk1SkKv2\nF9HP6XXqw/9Ja3w0mb6P5eLhD+hnOqTT/SQEjq4Bq2WPCC5ywsVEQmuNFHmDr9lB\npsC698AJs3srCyF/hFN4ePBv/92uovarB250zU3qucfuqWh74zGkgD8nh0EctUcH\n3A2eM39qQwjKCavnxpXkNlBwUV9FQyxyXQadDwKFE8KArPOayK9nWNEBiWymPLeD\nV/HuzBYCVo0J2ff6qLuDe3FtAclCF1p8xtG4GjsVJ1Vq+yk=\n=oRd4\n-----END PGP SIGNATURE-----", "payload": "tree 20088a2916c00c47b0e0dfdcc864b32fb63c6913\nparent 671b2a596439566b6614d2a7dd25643fc947c721\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524747179 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525105113 +0200\n\nMerge ConstMathError into EvalErrorKind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "html_url": "https://github.com/rust-lang/rust/commit/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671b2a596439566b6614d2a7dd25643fc947c721", "url": "https://api.github.com/repos/rust-lang/rust/commits/671b2a596439566b6614d2a7dd25643fc947c721", "html_url": "https://github.com/rust-lang/rust/commit/671b2a596439566b6614d2a7dd25643fc947c721"}], "stats": {"total": 180, "additions": 65, "deletions": 115}, "files": [{"sha": "a5447a3145afe0dc09a2cfe768c96de98c61a498", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -525,16 +525,26 @@ impl_stable_hash_for!(struct ty::GenericPredicates<'tcx> {\n     predicates\n });\n \n+\n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n for ::mir::interpret::EvalError<'gcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.kind.hash_stable(hcx, hasher)\n+    }\n+}\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+for ::mir::interpret::EvalErrorKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         use mir::interpret::EvalErrorKind::*;\n \n-        mem::discriminant(&self.kind).hash_stable(hcx, hasher);\n+        mem::discriminant(&self).hash_stable(hcx, hasher);\n \n-        match self.kind {\n+        match *self {\n             DanglingPointerDeref |\n             DoubleFree |\n             InvalidMemoryAccess |\n@@ -565,8 +575,10 @@ for ::mir::interpret::EvalError<'gcx> {\n             TypeckError |\n             DerefFunctionPointer |\n             ExecuteMemory |\n-            ReferencedConstant |\n-            OverflowingMath => {}\n+            OverflowNeg |\n+            RemainderByZero |\n+            DivisionByZero |\n+            ReferencedConstant => {}\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionPointerTyMismatch(a, b) => {\n                 a.hash_stable(hcx, hasher);\n@@ -590,10 +602,6 @@ for ::mir::interpret::EvalError<'gcx> {\n                 a.hash_stable(hcx, hasher);\n                 b.hash_stable(hcx, hasher)\n             },\n-            Math(sp, ref err) => {\n-                sp.hash_stable(hcx, hasher);\n-                err.hash_stable(hcx, hasher)\n-            },\n             Intrinsic(ref s) => s.hash_stable(hcx, hasher),\n             InvalidChar(c) => c.hash_stable(hcx, hasher),\n             AbiViolation(ref s) => s.hash_stable(hcx, hasher),\n@@ -665,27 +673,11 @@ for ::mir::interpret::EvalError<'gcx> {\n             Layout(lay) => lay.hash_stable(hcx, hasher),\n             HeapAllocNonPowerOfTwoAlignment(n) => n.hash_stable(hcx, hasher),\n             PathNotFound(ref v) => v.hash_stable(hcx, hasher),\n+            Overflow(op) => op.hash_stable(hcx, hasher),\n         }\n     }\n }\n \n-impl_stable_hash_for!(enum mir::interpret::ConstMathErr {\n-    Overflow(op),\n-    DivisionByZero,\n-    RemainderByZero,\n-});\n-\n-impl_stable_hash_for!(enum mir::interpret::Op {\n-    Add,\n-    Sub,\n-    Mul,\n-    Div,\n-    Rem,\n-    Shr,\n-    Shl,\n-    Neg,\n-});\n-\n impl_stable_hash_for!(enum mir::interpret::Lock {\n     NoLock,\n     WriteLock(dl),"}, {"sha": "022b82841bcc2283a33b820a452f26a966605d25", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 20, "deletions": 52, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -1,4 +1,3 @@\n-use std::error::Error;\n use std::{fmt, env};\n \n use mir;\n@@ -30,7 +29,7 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n pub enum EvalErrorKind<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant\n@@ -60,9 +59,11 @@ pub enum EvalErrorKind<'tcx> {\n     DerefFunctionPointer,\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n-    Math(Span, ConstMathErr),\n+    Overflow(mir::BinOp),\n+    OverflowNeg,\n+    DivisionByZero,\n+    RemainderByZero,\n     Intrinsic(String),\n-    OverflowingMath,\n     InvalidChar(u128),\n     StackFrameLimitReached,\n     OutOfTls,\n@@ -124,10 +125,10 @@ pub enum EvalErrorKind<'tcx> {\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n \n-impl<'tcx> Error for EvalError<'tcx> {\n-    fn description(&self) -> &str {\n+impl<'tcx> EvalErrorKind<'tcx> {\n+    pub fn description(&self) -> &str {\n         use self::EvalErrorKind::*;\n-        match self.kind {\n+        match *self {\n             MachineError(ref inner) => inner,\n             FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n@@ -176,12 +177,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to treat a memory pointer as a function pointer\",\n             ArrayIndexOutOfBounds(..) =>\n                 \"array index out of bounds\",\n-            Math(..) =>\n-                \"mathematical operation failed\",\n             Intrinsic(..) =>\n                 \"intrinsic failed\",\n-            OverflowingMath =>\n-                \"attempted to do overflowing math\",\n             NoMirFor(..) =>\n                 \"mir not found\",\n             InvalidChar(..) =>\n@@ -239,6 +236,17 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"encountered constants with type errors, stopping evaluation\",\n             ReferencedConstant =>\n                 \"referenced constant has errors\",\n+            Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n+            Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\",\n+            Overflow(mir::BinOp::Mul) => \"attempt to multiply with overflow\",\n+            Overflow(mir::BinOp::Div) => \"attempt to divide with overflow\",\n+            Overflow(mir::BinOp::Rem) => \"attempt to calculate the remainder with overflow\",\n+            OverflowNeg => \"attempt to negate with overflow\",\n+            Overflow(mir::BinOp::Shr) => \"attempt to shift right with overflow\",\n+            Overflow(mir::BinOp::Shl) => \"attempt to shift left with overflow\",\n+            Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n+            DivisionByZero => \"attempt to divide by zero\",\n+            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n         }\n     }\n }\n@@ -280,8 +288,6 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to deallocate {} memory but gave {} as the kind\", old, new),\n-            Math(_, ref err) =>\n-                write!(f, \"{}\", err.description()),\n             Intrinsic(ref err) =>\n                 write!(f, \"{}\", err),\n             InvalidChar(c) =>\n@@ -299,45 +305,7 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and align {}\", size, align, size2, align2),\n-            _ => write!(f, \"{}\", self.description()),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Clone, RustcEncodable, RustcDecodable)]\n-pub enum ConstMathErr {\n-    Overflow(Op),\n-    DivisionByZero,\n-    RemainderByZero,\n-}\n-pub use self::ConstMathErr::*;\n-\n-#[derive(Debug, PartialEq, Eq, Clone, RustcEncodable, RustcDecodable)]\n-pub enum Op {\n-    Add,\n-    Sub,\n-    Mul,\n-    Div,\n-    Rem,\n-    Shr,\n-    Shl,\n-    Neg,\n-}\n-\n-impl ConstMathErr {\n-    pub fn description(&self) -> &'static str {\n-        use self::Op::*;\n-        match *self {\n-            Overflow(Add) => \"attempt to add with overflow\",\n-            Overflow(Sub) => \"attempt to subtract with overflow\",\n-            Overflow(Mul) => \"attempt to multiply with overflow\",\n-            Overflow(Div) => \"attempt to divide with overflow\",\n-            Overflow(Rem) => \"attempt to calculate the remainder with overflow\",\n-            Overflow(Neg) => \"attempt to negate with overflow\",\n-            Overflow(Shr) => \"attempt to shift right with overflow\",\n-            Overflow(Shl) => \"attempt to shift left with overflow\",\n-            DivisionByZero => \"attempt to divide by zero\",\n-            RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n+            _ => write!(f, \"{}\", self.kind.description()),\n         }\n     }\n }"}, {"sha": "a521caf4fdadbe9f988367eedae0b68cad88b0fc", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -8,7 +8,7 @@ macro_rules! err {\n mod error;\n mod value;\n \n-pub use self::error::{EvalError, EvalResult, EvalErrorKind, Op, ConstMathErr};\n+pub use self::error::{EvalError, EvalResult, EvalErrorKind};\n \n pub use self::value::{PrimVal, PrimValKind, Value, Pointer};\n \n@@ -23,21 +23,21 @@ use std::iter;\n use syntax::ast::Mutability;\n use rustc_serialize::{Encoder, Decoder, Decodable, Encodable};\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Lock {\n     NoLock,\n     WriteLock(DynamicLifetime),\n     /// This should never be empty -- that would be a read lock held and nobody there to release it...\n     ReadLock(Vec<DynamicLifetime>),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct DynamicLifetime {\n     pub frame: usize,\n     pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum AccessKind {\n     Read,\n     Write,\n@@ -88,12 +88,12 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n \n     fn signed_offset<'tcx>(self, val: u64, i: i64) -> EvalResult<'tcx, u64> {\n         let (res, over) = self.overflowing_signed_offset(val, i as i128);\n-        if over { err!(OverflowingMath) } else { Ok(res) }\n+        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n     }\n \n     fn offset<'tcx>(self, val: u64, i: u64) -> EvalResult<'tcx, u64> {\n         let (res, over) = self.overflowing_offset(val, i);\n-        if over { err!(OverflowingMath) } else { Ok(res) }\n+        if over { err!(Overflow(mir::BinOp::Add)) } else { Ok(res) }\n     }\n \n     fn wrapping_signed_offset(self, val: u64, i: i64) -> u64 {"}, {"sha": "0b56dbda42c5e893cee742368d56ee7ab6f48f67", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -25,7 +25,7 @@ use rustc_serialize as serialize;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use mir::visit::MirVisitable;\n-use mir::interpret::{Value, PrimVal, ConstMathErr};\n+use mir::interpret::{Value, PrimVal, EvalErrorKind};\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -1211,7 +1211,7 @@ pub enum AssertMessage<'tcx> {\n         len: Operand<'tcx>,\n         index: Operand<'tcx>\n     },\n-    Math(ConstMathErr),\n+    Math(EvalErrorKind<'tcx>),\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n }\n@@ -1920,9 +1920,9 @@ pub fn print_miri_value<W: Write>(value: Value, ty: Ty, f: &mut W) -> fmt::Resul\n         (Value::ByVal(PrimVal::Bytes(0)), &TyBool) => write!(f, \"false\"),\n         (Value::ByVal(PrimVal::Bytes(1)), &TyBool) => write!(f, \"true\"),\n         (Value::ByVal(PrimVal::Bytes(bits)), &TyFloat(ast::FloatTy::F32)) =>\n-            write!(f, \"{}\", Single::from_bits(bits)),\n+            write!(f, \"{}f32\", Single::from_bits(bits)),\n         (Value::ByVal(PrimVal::Bytes(bits)), &TyFloat(ast::FloatTy::F64)) =>\n-            write!(f, \"{}\", Double::from_bits(bits)),\n+            write!(f, \"{}f64\", Double::from_bits(bits)),\n         (Value::ByVal(PrimVal::Bytes(n)), &TyUint(ui)) => write!(f, \"{:?}{}\", n, ui),\n         (Value::ByVal(PrimVal::Bytes(n)), &TyInt(i)) => write!(f, \"{:?}{}\", n as i128, i),\n         (Value::ByVal(PrimVal::Bytes(n)), &TyChar) =>"}, {"sha": "92cea61bae5cff9a6fd42fbc5642bc95b801cd0e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -149,7 +149,7 @@ pub const FAT_PTR_ADDR: usize = 0;\n /// - For a slice, this is the length.\n pub const FAT_PTR_EXTRA: usize = 1;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>)"}, {"sha": "bae91d064a5a679b9c62598f7bd7d8a0537cde07", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -505,9 +505,7 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             DerefFunctionPointer => DerefFunctionPointer,\n             ExecuteMemory => ExecuteMemory,\n             ArrayIndexOutOfBounds(sp, a, b) => ArrayIndexOutOfBounds(sp, a, b),\n-            Math(sp, ref err) => Math(sp, err.clone()),\n             Intrinsic(ref s) => Intrinsic(s.clone()),\n-            OverflowingMath => OverflowingMath,\n             InvalidChar(c) => InvalidChar(c),\n             StackFrameLimitReached => StackFrameLimitReached,\n             OutOfTls => OutOfTls,\n@@ -568,6 +566,10 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             UnimplementedTraitSelection => UnimplementedTraitSelection,\n             TypeckError => TypeckError,\n             ReferencedConstant => ReferencedConstant,\n+            OverflowNeg => OverflowNeg,\n+            Overflow(op) => Overflow(op),\n+            DivisionByZero => DivisionByZero,\n+            RemainderByZero => RemainderByZero,\n         };\n         Some(interpret::EvalError {\n             kind: kind,"}, {"sha": "33c80ab22a3c46e393d8ea6dbab1c6d1fee7cc59", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n use rustc::ty::{self, Ty};\n use rustc::mir::*;\n-use rustc::mir::interpret::{Value, PrimVal, ConstMathErr, Op};\n+use rustc::mir::interpret::{Value, PrimVal, EvalErrorKind};\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -85,7 +85,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     this.cfg.push_assign(block, source_info, &is_min,\n                                          Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval));\n \n-                    let err = ConstMathErr::Overflow(Op::Neg);\n+                    let err = EvalErrorKind::OverflowNeg;\n                     block = this.assert(block, Operand::Move(is_min), false,\n                                         AssertMessage::Math(err), expr_span);\n                 }\n@@ -310,16 +310,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = ConstMathErr::Overflow(match op {\n-                BinOp::Add => Op::Add,\n-                BinOp::Sub => Op::Sub,\n-                BinOp::Mul => Op::Mul,\n-                BinOp::Shl => Op::Shl,\n-                BinOp::Shr => Op::Shr,\n-                _ => {\n-                    bug!(\"MIR build_binary_op: {:?} is not checkable\", op)\n-                }\n-            });\n+            let err = EvalErrorKind::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false,\n                                 AssertMessage::Math(err), span);\n@@ -331,11 +322,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (ConstMathErr::DivisionByZero,\n-                     ConstMathErr::Overflow(Op::Div))\n+                    (EvalErrorKind::DivisionByZero,\n+                     EvalErrorKind::Overflow(op))\n                 } else {\n-                    (ConstMathErr::RemainderByZero,\n-                     ConstMathErr::Overflow(Op::Rem))\n+                    (EvalErrorKind::RemainderByZero,\n+                     EvalErrorKind::Overflow(op))\n                 };\n \n                 // Check for / 0"}, {"sha": "d055c979d1162cd9525b7e6c4e2b93d8b18d9dd0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -513,7 +513,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     // it emits in debug mode) is performance, but it doesn't cost us any performance in miri.\n                     // If, however, the compiler ever starts transforming unchecked intrinsics into unchecked binops,\n                     // we have to go back to just ignoring the overflow here.\n-                    return err!(OverflowingMath);\n+                    return err!(Overflow(bin_op));\n                 }\n             }\n "}, {"sha": "6e7a37c2228dffcace813cc5e8f309e0879d4b1f", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             (Neg, ty::TyFloat(FloatTy::F32)) => Single::to_bits(-Single::from_bits(bytes)),\n             (Neg, ty::TyFloat(FloatTy::F64)) => Double::to_bits(-Double::from_bits(bytes)),\n \n-            (Neg, _) if bytes == (1 << (size - 1)) => return err!(OverflowingMath),\n+            (Neg, _) if bytes == (1 << (size - 1)) => return err!(OverflowNeg),\n             (Neg, _) => (-(bytes as i128)) as u128,\n         };\n "}, {"sha": "4f0e97f6e1abef48cc3266581592f1ba4211db15", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -160,9 +160,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                                 .to_u64()?;\n                             err!(ArrayIndexOutOfBounds(span, len, index))\n                         }\n-                        Math(ref err) => {\n-                            err!(Math(terminator.source_info.span, err.clone()))\n-                        }\n+                        Math(ref err) => Err(err.clone().into()),\n                         GeneratorResumedAfterReturn |\n                         GeneratorResumedAfterPanic => unimplemented!(),\n                     };"}, {"sha": "192ab6e17e76a8c015e687e016d421b04aaf0eb3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -328,7 +328,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         } else {\n                             if overflow {\n                                 use rustc::mir::interpret::EvalErrorKind;\n-                                let mut err = EvalErrorKind::OverflowingMath.into();\n+                                let mut err = EvalErrorKind::Overflow(op).into();\n                                 ecx.report(&mut err, false, Some(span));\n                                 return None;\n                             }"}, {"sha": "32cb6c72d589b249af758dc455f1d4b1cba4a542", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=cefcf0548ec06cfdd00de4d02ee9c1b0c6cfe6fa", "patch": "@@ -311,10 +311,9 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 // checked operation, just a comparison with the minimum\n                 // value, so we have to check for the assert message.\n                 if !bx.cx.check_overflow {\n-                    use rustc::mir::interpret::ConstMathErr::Overflow;\n-                    use rustc::mir::interpret::Op::Neg;\n+                    use rustc::mir::interpret::EvalErrorKind::OverflowNeg;\n \n-                    if let mir::AssertMessage::Math(Overflow(Neg)) = *msg {\n+                    if let mir::AssertMessage::Math(OverflowNeg) = *msg {\n                         const_cond = Some(expected);\n                     }\n                 }"}]}