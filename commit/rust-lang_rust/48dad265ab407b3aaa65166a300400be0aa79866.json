{"sha": "48dad265ab407b3aaa65166a300400be0aa79866", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGFkMjY1YWI0MDdiM2FhYTY1MTY2YTMwMDQwMGJlMGFhNzk4NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T21:02:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T21:02:02Z"}, "message": "Auto merge of #7214 - xFrednet:7197-collecting-configuration, r=flip1995,camsteffen\n\nMetadata collection monster searching for Clippy's configuration options\n\nThis PR teaches our lovely metadata collection monster which configurations are available inside Clippy. It then adds a new *Configuration* section to the lint documentation.\n\n---\n\nThe implementation uses the `define_Conf!` macro to create a vector of metadata during compilation. This enables easy collection and parsing without the need of searching for the struct during a lint-pass (and it's quite elegant IMO). The information is then parsed into an intermediate struct called `ClippyConfiguration` which will be saved inside the `MetadataCollector` struct itself. It is currently only used to generate the *Configuration* section in the lint documentation, but I'm thinking about adding an overview of available configurations to the website. Saving them in this intermediate state without formatting them right away enables this in the future.\n\nThe new parsing will also allow us to have a documentation that spans over multiple lines in the future. For example, this will be valid when the old script has been removed:\n```rust\n/// Lint: BLACKLISTED_NAME.\n/// The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n(blacklisted_names: Vec<String> = [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect())\n```\n\nThe deprecation reason is also currently being collected but not used any further and that's basically it.\n\n---\n\nSee: #7172 for the full metadata collection to-do list or to suggest a new feature in connection to it :upside_down_face:\n\n---\n\nchangelog: none\n\nr? `@flip1995`\ncc `@camsteffen` It would be great if you could also review this PR as you have recently worked on Clippy's `define_Conf!` macro.", "tree": {"sha": "b67c4c570c6e08814f63c9dd04cc22ec1df64f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67c4c570c6e08814f63c9dd04cc22ec1df64f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48dad265ab407b3aaa65166a300400be0aa79866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48dad265ab407b3aaa65166a300400be0aa79866", "html_url": "https://github.com/rust-lang/rust/commit/48dad265ab407b3aaa65166a300400be0aa79866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48dad265ab407b3aaa65166a300400be0aa79866/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bbee5c58462b3cbb1ec71804f91a9d1c030443f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbee5c58462b3cbb1ec71804f91a9d1c030443f", "html_url": "https://github.com/rust-lang/rust/commit/6bbee5c58462b3cbb1ec71804f91a9d1c030443f"}, {"sha": "f810c11d3c44af357ad7af6cf9fc9ab582591c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/f810c11d3c44af357ad7af6cf9fc9ab582591c01", "html_url": "https://github.com/rust-lang/rust/commit/f810c11d3c44af357ad7af6cf9fc9ab582591c01"}], "stats": {"total": 176, "additions": 171, "deletions": 5}, "files": [{"sha": "f0fae6ee1c76b30198b83f1eaba1ddb95d071541", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=48dad265ab407b3aaa65166a300400be0aa79866", "patch": "@@ -1009,7 +1009,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"metadata-collector-lint\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::default());\n+            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n         }\n     }\n "}, {"sha": "fd2dddb3b96e518ef7f81f4a109e1e8f237cbbf9", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=48dad265ab407b3aaa65166a300400be0aa79866", "patch": "@@ -26,13 +26,13 @@ impl TryConf {\n \n macro_rules! define_Conf {\n     ($(\n-        #[$doc:meta]\n+        #[doc = $doc:literal]\n         $(#[conf_deprecated($dep:literal)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n         pub struct Conf {\n-            $(#[$doc] pub $name: $ty,)*\n+            $(#[doc = $doc] pub $name: $ty,)*\n         }\n \n         mod defaults {\n@@ -89,6 +89,34 @@ macro_rules! define_Conf {\n                 Ok(TryConf { conf, errors })\n             }\n         }\n+\n+        #[cfg(feature = \"metadata-collector-lint\")]\n+        pub mod metadata {\n+            use crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n+\n+            macro_rules! wrap_option {\n+                () => (None);\n+                ($x:literal) => (Some($x));\n+            }\n+\n+            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n+                vec![\n+                    $(\n+                        {\n+                            let deprecation_reason = wrap_option!($($dep)?);\n+\n+                            ClippyConfiguration::new(\n+                                stringify!($name),\n+                                stringify!($ty),\n+                                format!(\"{:?}\", super::defaults::$name()),\n+                                $doc,\n+                                deprecation_reason,\n+                            )\n+                        },\n+                    )+\n+                ]\n+            }\n+        }\n     };\n }\n "}, {"sha": "b7c86ae6e1844a06e0dbccb02a68e1332876051d", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 140, "deletions": 2, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48dad265ab407b3aaa65166a300400be0aa79866/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=48dad265ab407b3aaa65166a300400be0aa79866", "patch": "@@ -19,6 +19,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n use std::collections::BinaryHeap;\n+use std::fmt;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::path::Path;\n@@ -41,6 +42,30 @@ const EXCLUDED_LINT_GROUPS: [&str; 1] = [\"clippy::internal\"];\n /// Collected deprecated lint will be assigned to this group in the JSON output\n const DEPRECATED_LINT_GROUP_STR: &str = \"DEPRECATED\";\n \n+/// This template will be used to format the configuration section in the lint documentation.\n+/// The `configurations` parameter will be replaced with one or multiple formatted\n+/// `ClippyConfiguration` instances. See `CONFIGURATION_VALUE_TEMPLATE` for further customizations\n+macro_rules! CONFIGURATION_SECTION_TEMPLATE {\n+    () => {\n+        r#\"\n+**Configuration**\n+This lint has the following configuration variables:\n+\n+{configurations}\n+\"#\n+    };\n+}\n+/// This template will be used to format an individual `ClippyConfiguration` instance in the\n+/// lint documentation.\n+///\n+/// The format function will provide strings for the following parameters: `name`, `ty`, `doc` and\n+/// `default`\n+macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n+    () => {\n+        \"* {name}: {ty}: {doc} (defaults to `{default}`)\\n\"\n+    };\n+}\n+\n const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n@@ -102,13 +127,33 @@ declare_clippy_lint! {\n impl_lint_pass!(MetadataCollector => [INTERNAL_METADATA_COLLECTOR]);\n \n #[allow(clippy::module_name_repetitions)]\n-#[derive(Debug, Clone, Default)]\n+#[derive(Debug, Clone)]\n pub struct MetadataCollector {\n     /// All collected lints\n     ///\n     /// We use a Heap here to have the lints added in alphabetic order in the export\n     lints: BinaryHeap<LintMetadata>,\n     applicability_info: FxHashMap<String, ApplicabilityInfo>,\n+    config: Vec<ClippyConfiguration>,\n+}\n+\n+impl MetadataCollector {\n+    pub fn new() -> Self {\n+        Self {\n+            lints: BinaryHeap::<LintMetadata>::default(),\n+            applicability_info: FxHashMap::<String, ApplicabilityInfo>::default(),\n+            config: collect_configs(),\n+        }\n+    }\n+\n+    fn get_lint_configs(&self, lint_name: &str) -> Option<String> {\n+        self.config\n+            .iter()\n+            .filter(|config| config.lints.iter().any(|lint| lint == lint_name))\n+            .map(ToString::to_string)\n+            .reduce(|acc, x| acc + &x)\n+            .map(|configurations| format!(CONFIGURATION_SECTION_TEMPLATE!(), configurations = configurations))\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -214,6 +259,95 @@ impl Serialize for ApplicabilityInfo {\n     }\n }\n \n+// ==================================================================\n+// Configuration\n+// ==================================================================\n+#[derive(Debug, Clone, Default)]\n+pub struct ClippyConfiguration {\n+    name: String,\n+    config_type: &'static str,\n+    default: String,\n+    lints: Vec<String>,\n+    doc: String,\n+    deprecation_reason: Option<&'static str>,\n+}\n+\n+impl ClippyConfiguration {\n+    pub fn new(\n+        name: &'static str,\n+        config_type: &'static str,\n+        default: String,\n+        doc_comment: &'static str,\n+        deprecation_reason: Option<&'static str>,\n+    ) -> Self {\n+        let (lints, doc) = parse_config_field_doc(doc_comment)\n+            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n+\n+        Self {\n+            name: to_kebab(name),\n+            lints,\n+            doc,\n+            config_type,\n+            default,\n+            deprecation_reason,\n+        }\n+    }\n+}\n+\n+fn collect_configs() -> Vec<ClippyConfiguration> {\n+    crate::utils::conf::metadata::get_configuration_metadata()\n+}\n+\n+/// This parses the field documentation of the config struct.\n+///\n+/// ```rust, ignore\n+/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n+/// ```\n+///\n+/// Would yield:\n+/// ```rust, ignore\n+/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n+/// ```\n+fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n+    const DOC_START: &str = \" Lint: \";\n+    if_chain! {\n+        if doc_comment.starts_with(DOC_START);\n+        if let Some(split_pos) = doc_comment.find('.');\n+        then {\n+            let mut doc_comment = doc_comment.to_string();\n+            let documentation = doc_comment.split_off(split_pos);\n+\n+            doc_comment.make_ascii_lowercase();\n+            let lints: Vec<String> = doc_comment.split_off(DOC_START.len()).split(\", \").map(str::to_string).collect();\n+\n+            Some((lints, documentation))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n+fn to_kebab(config_name: &str) -> String {\n+    config_name.replace('_', \"-\")\n+}\n+\n+impl fmt::Display for ClippyConfiguration {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            CONFIGURATION_VALUE_TEMPLATE!(),\n+            name = self.name,\n+            ty = self.config_type,\n+            doc = self.doc,\n+            default = self.default\n+        )\n+    }\n+}\n+\n+// ==================================================================\n+// Lint pass\n+// ==================================================================\n impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// Collecting lint declarations like:\n     /// ```rust, ignore\n@@ -235,8 +369,12 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n                 if let Some(group) = get_lint_group_or_lint(cx, &lint_name, item);\n-                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(mut docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n+                    if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n+                        docs.push_str(&configuration_section);\n+                    }\n+\n                     self.lints.push(LintMetadata::new(\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),"}]}