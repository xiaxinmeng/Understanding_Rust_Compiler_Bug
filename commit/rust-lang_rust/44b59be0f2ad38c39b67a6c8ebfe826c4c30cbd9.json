{"sha": "44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjU5YmUwZjJhZDM4YzM5YjY3YTZjOGViZmU4MjZjNGMzMGNiZDk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-20T22:24:20Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:20Z"}, "message": "Move test from bootstrap to compiletest", "tree": {"sha": "76e8ef2503c5668fd861952d42ed58baafc4a762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76e8ef2503c5668fd861952d42ed58baafc4a762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "html_url": "https://github.com/rust-lang/rust/commit/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea6f3234af12f0a7c098c2a80803061aba76608", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea6f3234af12f0a7c098c2a80803061aba76608", "html_url": "https://github.com/rust-lang/rust/commit/aea6f3234af12f0a7c098c2a80803061aba76608"}], "stats": {"total": 213, "additions": 113, "deletions": 100}, "files": [{"sha": "19aac0f36bb27e59c2a035d7ccca2d9453c48dc9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "patch": "@@ -19,7 +19,6 @@ use std::collections::HashSet;\n use std::env;\n use std::fmt;\n use std::fs;\n-use std::io::Read;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n@@ -275,7 +274,6 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n         println!(\"doc tests for: {}\", p.display());\n         markdown_test(build, compiler, &p);\n     }\n-    markdown_test(build, compiler, &output);\n }\n \n /// Run the error index generator tool to execute the tests located in the error\n@@ -297,6 +295,8 @@ pub fn error_index(build: &Build, compiler: &Compiler) {\n                    .arg(\"markdown\")\n                    .arg(&output)\n                    .env(\"CFG_BUILD\", &build.config.build));\n+\n+    markdown_test(build, compiler, &output);\n }\n \n fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n@@ -316,76 +316,6 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     build.run(&mut cmd);\n }\n \n-pub fn markdown_test_output_check(build: &Build, compiler: &Compiler) {\n-    let _time = util::timeit();\n-    for entry in fs::read_dir(\"src/test/rustdoc-test\")\n-                    .expect(\"markdown_test_output_check: read_dir failed\") {\n-        if let Ok(entry) = entry {\n-            if entry.path().extension().and_then(|s| s.to_str()) != Some(\"rs\") {\n-                continue\n-            }\n-            markdown_test_output_check_entry(build, compiler, entry.path().as_path());\n-        }\n-    }\n-}\n-\n-fn markdown_test_output_check_entry(build: &Build, compiler: &Compiler, path: &Path) {\n-    let mut file = fs::File::open(path)\n-                            .expect(\"markdown_test_output_check_entry File::open failed\");\n-    let mut content = String::new();\n-    file.read_to_string(&mut content)\n-        .expect(\"markdown_test_output_check_entry read_to_string failed\");\n-    let mut ignore = false;\n-    let mut v: Vec<usize> =\n-        content.split(\"\\n\")\n-               .enumerate()\n-               .filter_map(|(line_nb, line)| {\n-                   let sline = line.split(\"///\").last().unwrap_or(\"\");\n-                   let line = sline.trim_left();\n-                   if line.starts_with(\"```\") &&\n-                      !line.contains(\"ignore\") {\n-                       if ignore {\n-                           ignore = false;\n-                           None\n-                       } else {\n-                           ignore = true;\n-                           Some(line_nb + 1)\n-                       }\n-                   } else {\n-                       None\n-                   }\n-               })\n-               .collect();\n-    let mut cmd = Command::new(build.rustdoc(compiler));\n-    build.add_rustc_lib_path(compiler, &mut cmd);\n-    build.add_rust_test_threads(&mut cmd);\n-    cmd.arg(\"--test\");\n-    cmd.arg(path);\n-    cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n-\n-    cmd.arg(\"--test-args\").arg(build.flags.cmd.test_args().join(\" \"));\n-\n-    output(&mut cmd).split(\"\\n\")\n-                    .filter(|s| s.starts_with(\"test \"))\n-                    .inspect(|s| {\n-                        let tmp: Vec<&str> = s.split(\" - line \").collect();\n-                        if tmp.len() == 2 {\n-                            let line = usize::from_str_radix(tmp[1].split(\" ...\")\n-                                                                   .next()\n-                                                                   .unwrap_or(\"0\"), 10)\n-                                           .unwrap_or(0);\n-                            if let Ok(pos) = v.binary_search(&line) {\n-                                v.remove(pos);\n-                            } else {\n-                                panic!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v);\n-                            }\n-                        }\n-                    }).all(|_| true);\n-    if v.len() != 0 {\n-        panic!(\"Not found test at line{} {:?}\", if v.len() > 1 { \"s\" } else { \"\" }, v);\n-    }\n-}\n-\n /// Run all unit tests plus documentation tests for an entire crate DAG defined\n /// by a `Cargo.toml`\n ///"}, {"sha": "96a4a35282beb4e580b9f75f76e67bb023758679", "filename": "src/test/rustdoc-test/test.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aea6f3234af12f0a7c098c2a80803061aba76608/src%2Ftest%2Frustdoc-test%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea6f3234af12f0a7c098c2a80803061aba76608/src%2Ftest%2Frustdoc-test%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-test%2Ftest.rs?ref=aea6f3234af12f0a7c098c2a80803061aba76608", "patch": "@@ -1,14 +0,0 @@\n-/// This is a Foo;\n-///\n-/// ```\n-/// println!(\"baaaaaar\");\n-/// ```\n-#[unstable]\n-pub struct Foo;\n-\n-/// This is a Bar;\n-///\n-/// ```\n-/// println!(\"fooooo\");\n-/// ```\n-pub struct Bar;"}, {"sha": "772d258bc800fb12c50c35d61f835d0e386d5242", "filename": "src/test/rustdoc/test_option_check/test.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs?ref=44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+// check-stdout\n+\n+/// This is a Foo;\n+///\n+/// ```\n+/// println!(\"baaaaaar\");\n+/// ```\n+#[unstable]\n+pub struct Foo;\n+\n+/// This is a Bar;\n+///\n+/// ```\n+/// println!(\"fooooo\");\n+/// ```\n+pub struct Bar;"}, {"sha": "11c43b7150f9d4628ecaaee42e42912292cd3650", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 84, "deletions": 14, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "patch": "@@ -43,7 +43,7 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n         }\n \n         _ => {\n-            // android has it's own gdb handling\n+            // android has its own gdb handling\n             if config.mode == DebugInfoGdb && config.gdb.is_none() {\n                 panic!(\"gdb not available but debuginfo gdb debuginfo test requested\");\n             }\n@@ -1879,22 +1879,92 @@ actual:\\n\\\n     fn run_rustdoc_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let out_dir = self.output_base_name();\n-        let _ = fs::remove_dir_all(&out_dir);\n-        self.create_dir_racy(&out_dir);\n+        if self.props.compile_flags.contains(&\"--test\".to_owned()) &&\n+           self.props.check_stdout == true {\n+            self.check_rustdoc_test_option();\n+        } else {\n+            let out_dir = self.output_base_name();\n+            let _ = fs::remove_dir_all(&out_dir);\n+            self.create_dir_racy(&out_dir);\n \n-        let proc_res = self.document(&out_dir);\n-        if !proc_res.status.success() {\n-            self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+            let proc_res = self.document(&out_dir);\n+            if !proc_res.status.success() {\n+                self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+            }\n+            let root = self.find_rust_src_root().unwrap();\n+\n+            let res = self.cmd2procres(Command::new(&self.config.docck_python)\n+                                       .arg(root.join(\"src/etc/htmldocck.py\"))\n+                                       .arg(out_dir)\n+                                       .arg(&self.testpaths.file));\n+            if !res.status.success() {\n+                self.fatal_proc_rec(\"htmldocck failed!\", &res);\n+            }\n         }\n-        let root = self.find_rust_src_root().unwrap();\n+    }\n+\n+    fn check_rustdoc_test_option(&self) {\n+        let mut file = fs::File::open(&self.testpaths.file)\n+                                .expect(\"markdown_test_output_check_entry File::open failed\");\n+        let mut content = String::new();\n+        file.read_to_string(&mut content)\n+            .expect(\"markdown_test_output_check_entry read_to_string failed\");\n+        let mut ignore = false;\n+        let mut v: Vec<usize> =\n+            content.split(\"\\n\")\n+                   .enumerate()\n+                   .filter_map(|(line_nb, line)| {\n+                       let sline = line.split(\"///\").last().unwrap_or(\"\");\n+                       let line = sline.trim_left();\n+                       if line.starts_with(\"```\") &&\n+                          !line.contains(\"ignore\") {\n+                           if ignore {\n+                               ignore = false;\n+                               None\n+                           } else {\n+                               ignore = true;\n+                               Some(line_nb + 1)\n+                           }\n+                       } else {\n+                           None\n+                       }\n+                   })\n+                   .collect();\n \n-        let res = self.cmd2procres(Command::new(&self.config.docck_python)\n-                                   .arg(root.join(\"src/etc/htmldocck.py\"))\n-                                   .arg(out_dir)\n-                                   .arg(&self.testpaths.file));\n-        if !res.status.success() {\n-            self.fatal_proc_rec(\"htmldocck failed!\", &res);\n+        let args = ProcArgs {\n+            prog: self.config.rustdoc_path.to_str().unwrap().to_owned(),\n+            args: vec![\"--test\".to_owned(), self.testpaths.file.to_str().unwrap().to_owned()],\n+        };\n+        let env = self.props.exec_env.clone();\n+        let res = self.compose_and_run(args,\n+                                       env,\n+                                       self.config.run_lib_path.to_str().unwrap(),\n+                                       None,\n+                                       None);\n+\n+        res.stdout.split(\"\\n\")\n+                  .filter(|s| s.starts_with(\"test \"))\n+                  .inspect(|s| {\n+                      let tmp: Vec<&str> = s.split(\" - line \").collect();\n+                      if tmp.len() == 2 {\n+                          let line = usize::from_str_radix(tmp[1].split(\" ...\")\n+                                                                 .next()\n+                                                                 .unwrap_or(\"0\"), 10)\n+                                         .unwrap_or(0);\n+                          if let Ok(pos) = v.binary_search(&line) {\n+                              v.remove(pos);\n+                          } else {\n+                              self.fatal_proc_rec(&format!(\"Not found doc test: \\\"{}\\\" in {:?}\",\n+                                                           s, v),\n+                                                  &res);\n+                          }\n+                      }\n+                  })\n+                  .all(|_| true);\n+        if v.len() != 0 {\n+            self.fatal_proc_rec(&format!(\"Not found test at line{} {:?}\",\n+                                         if v.len() > 1 { \"s\" } else { \"\" }, v),\n+                                &res);\n         }\n     }\n "}]}