{"sha": "00a2d7ad7e1a041e47f618a019702bfb37eca680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYTJkN2FkN2UxYTA0MWU0N2Y2MThhMDE5NzAyYmZiMzdlY2E2ODA=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-20T15:11:19Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-20T15:11:19Z"}, "message": "Fix bad suggestion that needs curly braces for `match_single_binding` lint", "tree": {"sha": "d7b7adcbd5c147fcd8453c25151b79d115be1eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b7adcbd5c147fcd8453c25151b79d115be1eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00a2d7ad7e1a041e47f618a019702bfb37eca680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00a2d7ad7e1a041e47f618a019702bfb37eca680", "html_url": "https://github.com/rust-lang/rust/commit/00a2d7ad7e1a041e47f618a019702bfb37eca680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00a2d7ad7e1a041e47f618a019702bfb37eca680/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "html_url": "https://github.com/rust-lang/rust/commit/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "1a8ec9c6ec3a447abfe09302c06371e1939ac5be", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00a2d7ad7e1a041e47f618a019702bfb37eca680/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a2d7ad7e1a041e47f618a019702bfb37eca680/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=00a2d7ad7e1a041e47f618a019702bfb37eca680", "patch": "@@ -1353,6 +1353,7 @@ fn find_bool_lit(ex: &ExprKind<'_>, desugared: bool) -> Option<bool> {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if in_macro(expr.span) || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n@@ -1427,7 +1428,18 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n                         indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n                         cbrace_start = format!(\"{{\\n{}\", indent);\n                     }\n-                };\n+                }\n+                // If the parent is already an arm, and the body is another match statement,\n+                // we need curly braces around suggestion\n+                let parent_node_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n+                if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+                    if let ExprKind::Match(..) = arm.body.kind {\n+                        cbrace_end = format!(\"\\n{}}}\", indent);\n+                        // Fix body indent due to the match\n+                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+                        cbrace_start = format!(\"{{\\n{}\", indent);\n+                    }\n+                }\n                 (\n                     expr.span,\n                     format!("}, {"sha": "4709b5b0157b6c8382a191c0e8b66a2dea9c7cdd", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=00a2d7ad7e1a041e47f618a019702bfb37eca680", "patch": "@@ -115,4 +115,33 @@ fn main() {\n         // =>\n         _ => println!(\"Not an array index start\"),\n     }\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => {\n+                let (min, max) = iter.size_hint();\n+                (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            let (a, b) = get_tup();\n+            println!(\"a {:?} and b {:?}\", a, b);\n+        },\n+        None => println!(\"nothing\"),\n+    }\n }"}, {"sha": "6a6b3e8e8a9366caccd4952ea44115e35cc3f34d", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=00a2d7ad7e1a041e47f618a019702bfb37eca680", "patch": "@@ -132,4 +132,33 @@ fn main() {\n         // =>\n         _ => println!(\"Not an array index start\"),\n     }\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => match iter.size_hint() {\n+                (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            match get_tup() {\n+                (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+            }\n+        },\n+        None => println!(\"nothing\"),\n+    }\n }"}, {"sha": "73cc867dd9f8ff4df17295e8c5fea6e4582420ea", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00a2d7ad7e1a041e47f618a019702bfb37eca680/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=00a2d7ad7e1a041e47f618a019702bfb37eca680", "patch": "@@ -178,5 +178,36 @@ LL | |         _ => println!(\"Single branch\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"Single branch\");`\n \n-error: aborting due to 12 previous errors\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:146:36\n+   |\n+LL |               Some((iter, _item)) => match iter.size_hint() {\n+   |  ____________________________________^\n+LL | |                 (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+LL | |             },\n+   | |_____________^\n+   |\n+help: consider using `let` statement\n+   |\n+LL |             Some((iter, _item)) => {\n+LL |                 let (min, max) = iter.size_hint();\n+LL |                 (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+LL |             },\n+   |\n+\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding.rs:158:13\n+   |\n+LL | /             match get_tup() {\n+LL | |                 (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+LL | |             }\n+   | |_____________^\n+   |\n+help: consider using `let` statement\n+   |\n+LL |             let (a, b) = get_tup();\n+LL |             println!(\"a {:?} and b {:?}\", a, b);\n+   |\n+\n+error: aborting due to 14 previous errors\n "}]}