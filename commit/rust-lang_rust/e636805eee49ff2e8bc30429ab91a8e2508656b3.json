{"sha": "e636805eee49ff2e8bc30429ab91a8e2508656b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MzY4MDVlZWU0OWZmMmU4YmMzMDQyOWFiOTFhOGUyNTA4NjU2YjM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T00:32:50Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T03:04:49Z"}, "message": "rustdoc: Turn `next_def_id` comments into docs", "tree": {"sha": "b18444fddd0b5ba2203e97c4791cff3c758135fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18444fddd0b5ba2203e97c4791cff3c758135fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e636805eee49ff2e8bc30429ab91a8e2508656b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e636805eee49ff2e8bc30429ab91a8e2508656b3", "html_url": "https://github.com/rust-lang/rust/commit/e636805eee49ff2e8bc30429ab91a8e2508656b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e636805eee49ff2e8bc30429ab91a8e2508656b3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da305a2b00530aa34dea4e48389204c26fa35dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/da305a2b00530aa34dea4e48389204c26fa35dbb", "html_url": "https://github.com/rust-lang/rust/commit/da305a2b00530aa34dea4e48389204c26fa35dbb"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "0364bfd5951f7362c4c4975143e4dc361688a87b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e636805eee49ff2e8bc30429ab91a8e2508656b3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636805eee49ff2e8bc30429ab91a8e2508656b3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e636805eee49ff2e8bc30429ab91a8e2508656b3", "patch": "@@ -291,7 +291,9 @@ impl Item {\n         }\n     }\n \n-    /// See comments on next_def_id\n+    /// See the documentation for [`next_def_id()`].\n+    ///\n+    /// [`next_def_id()`]: crate::core::DocContext::next_def_id()\n     crate fn is_fake(&self) -> bool {\n         MAX_DEF_ID.with(|m| {\n             m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)"}, {"sha": "ac3b8895996b97d44074654a08ddfcd6b0bf3590", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e636805eee49ff2e8bc30429ab91a8e2508656b3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636805eee49ff2e8bc30429ab91a8e2508656b3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e636805eee49ff2e8bc30429ab91a8e2508656b3", "patch": "@@ -120,14 +120,20 @@ impl<'tcx> DocContext<'tcx> {\n         r\n     }\n \n-    // This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n-    // refactoring either librustdoc or librustc_middle. In particular, allowing new DefIds to be\n-    // registered after the AST is constructed would require storing the defid mapping in a\n-    // RefCell, decreasing the performance for normal compilation for very little gain.\n-    //\n-    // Instead, we construct 'fake' def ids, which start immediately after the last DefId.\n-    // In the Debug impl for clean::Item, we explicitly check for fake\n-    // def ids, as we'll end up with a panic if we use the DefId Debug impl for fake DefIds\n+    /// Create a new \"fake\" [`DefId`].\n+    ///\n+    /// This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n+    /// refactoring either `librustdoc` or [`rustc_middle`]. In particular, allowing new [`DefId`]s\n+    /// to be registered after the AST is constructed would require storing the [`DefId`] mapping\n+    /// in a [`RefCell`], decreasing the performance for normal compilation for very little gain.\n+    ///\n+    /// Instead, we construct \"fake\" [`DefId`]s, which start immediately after the last `DefId`.\n+    /// In the [`Debug`] impl for [`clean::Item`], we explicitly check for fake `DefId`s,\n+    /// as we'll end up with a panic if we use the `DefId` `Debug` impl for fake `DefId`s.\n+    ///\n+    /// [`RefCell`]: std::cell::RefCell\n+    /// [`Debug`]: std::fmt::Debug\n+    /// [`clean::Item`]: crate::clean::types::Item\n     crate fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n         let start_def_id = {\n             let num_def_ids = if crate_num == LOCAL_CRATE {"}]}