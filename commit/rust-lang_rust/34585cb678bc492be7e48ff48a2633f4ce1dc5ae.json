{"sha": "34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTg1Y2I2NzhiYzQ5MmJlN2U0OGZmNDhhMjYzM2Y0Y2UxZGM1YWU=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-04-29T19:08:35Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-05-19T18:38:24Z"}, "message": "impl FromStr for proc_macro::Literal", "tree": {"sha": "2e06e0541f8b26fb43c555d6f7066d8a32f083a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e06e0541f8b26fb43c555d6f7066d8a32f083a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmClWyAACgkQ+boUO5X/\nbYIfpBAAtcusvYOR3U6XgwTy04Eo0uAPW71zJPmNQ+lXSkNe72qgzFRQ1i2vnsjJ\nd80gjUPs7G+C4AW4Yic4GAgqnnwRwdI55tQXk4NMpSWfuYWDZJs/awujmYbsZfvb\nDaPClr7VMjuyMip17WbdlsHDrsHUdI/JqiS8h8T81rz79dLsqf52tf8Suq6r2xu4\nSzSrcDIiLivUm8ZkV9Ix6D+FTX4khXTpW6QgqEFGFIN6877A7t+gzRDW5PH0mCXB\ntCAZQ6Exmks3Uo1bsIsjIp8/dhHPar+UwuyygJ8KhDWeQ2nVnVXkfOS13a27juEH\nXUtowClC5TDT/WXiCD5iqRrbgo/0wKLWgrR6wWn//mf5EwcanwCFJPi1ZA4fHeFL\ngNy+Wj03R4+d0PMTYQQRYx2hrb6YcJ55hqB0atjmwnv9kitMNAAh531I3gK8OFTW\nlAlX5pSHzdCttdefnO31f1mxL4eN0wIPetNJcEy3LLr1rq8jkekBNc9zTFFomL9+\nvzHMifHNj1g1HMlAst5MQOJu+iqiylBaiFAjQHW9zeYQpm0NSfJ+Kiv9Yc0g38L7\n8jJPcSrPl4KvEFvaJLLCYgbEsYxpviIJ6P7QC4TRFUFdlIvhdkNlDYBVkmRIIa0l\nkShxqbD6wUWjG3Oab2WWWiXsjKOsdEZJPm1qIeN8OZ9H2XjeqjQ=\n=bKsJ\n-----END PGP SIGNATURE-----", "payload": "tree 2e06e0541f8b26fb43c555d6f7066d8a32f083a8\nparent 965bce48348bbcc3c86898bdb5e18d4c57c35d00\nauthor David Tolnay <dtolnay@gmail.com> 1619723315 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1621449504 -0700\n\nimpl FromStr for proc_macro::Literal\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "html_url": "https://github.com/rust-lang/rust/commit/34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965bce48348bbcc3c86898bdb5e18d4c57c35d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/965bce48348bbcc3c86898bdb5e18d4c57c35d00", "html_url": "https://github.com/rust-lang/rust/commit/965bce48348bbcc3c86898bdb5e18d4c57c35d00"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "92315c4d4f6c7f02e5221c2805706fe8ba12d8b6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "patch": "@@ -1,9 +1,7 @@\n use crate::base::{ExtCtxt, ResolverExpand};\n \n use rustc_ast as ast;\n-use rustc_ast::token;\n-use rustc_ast::token::Nonterminal;\n-use rustc_ast::token::NtIdent;\n+use rustc_ast::token::{self, Nonterminal, NtIdent, TokenKind};\n use rustc_ast::tokenstream::{self, CanSynthesizeMissingTokens};\n use rustc_ast::tokenstream::{DelimSpan, Spacing::*, TokenStream, TreeAndSpacing};\n use rustc_ast_pretty::pprust;\n@@ -541,6 +539,33 @@ impl server::Ident for Rustc<'_> {\n }\n \n impl server::Literal for Rustc<'_> {\n+    fn from_str(&mut self, s: &str) -> Result<Self::Literal, ()> {\n+        let override_span = None;\n+        let stream = parse_stream_from_source_str(\n+            FileName::proc_macro_source_code(s),\n+            s.to_owned(),\n+            self.sess,\n+            override_span,\n+        );\n+        if stream.len() != 1 {\n+            return Err(());\n+        }\n+        let tree = stream.into_trees().next().unwrap();\n+        let token = match tree {\n+            tokenstream::TokenTree::Token(token) => token,\n+            tokenstream::TokenTree::Delimited { .. } => return Err(()),\n+        };\n+        let span_data = token.span.data();\n+        if (span_data.hi.0 - span_data.lo.0) as usize != s.len() {\n+            // There is a comment or whitespace adjacent to the literal.\n+            return Err(());\n+        }\n+        let lit = match token.kind {\n+            TokenKind::Literal(lit) => lit,\n+            _ => return Err(()),\n+        };\n+        Ok(Literal { lit, span: self.call_site })\n+    }\n     fn debug_kind(&mut self, literal: &Self::Literal) -> String {\n         format!(\"{:?}\", literal.lit.kind)\n     }"}, {"sha": "a2953b68564a89bcddb92552e527f0241fa9f18b", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "patch": "@@ -107,6 +107,7 @@ macro_rules! with_api {\n             Literal {\n                 fn drop($self: $S::Literal);\n                 fn clone($self: &$S::Literal) -> $S::Literal;\n+                fn from_str(s: &str) -> Result<$S::Literal, ()>;\n                 fn debug_kind($self: &$S::Literal) -> String;\n                 fn symbol($self: &$S::Literal) -> String;\n                 fn suffix($self: &$S::Literal) -> Option<String>;\n@@ -315,6 +316,19 @@ impl<T: Unmark> Unmark for Option<T> {\n     }\n }\n \n+impl<T: Mark, E: Mark> Mark for Result<T, E> {\n+    type Unmarked = Result<T::Unmarked, E::Unmarked>;\n+    fn mark(unmarked: Self::Unmarked) -> Self {\n+        unmarked.map(T::mark).map_err(E::mark)\n+    }\n+}\n+impl<T: Unmark, E: Unmark> Unmark for Result<T, E> {\n+    type Unmarked = Result<T::Unmarked, E::Unmarked>;\n+    fn unmark(self) -> Self::Unmarked {\n+        self.map(T::unmark).map_err(E::unmark)\n+    }\n+}\n+\n macro_rules! mark_noop {\n     ($($ty:ty),* $(,)?) => {\n         $("}, {"sha": "281999fe71588d37876bb90582095ffb37c57b76", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34585cb678bc492be7e48ff48a2633f4ce1dc5ae/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=34585cb678bc492be7e48ff48a2633f4ce1dc5ae", "patch": "@@ -91,6 +91,12 @@ pub struct LexError {\n     _inner: (),\n }\n \n+impl LexError {\n+    fn new() -> Self {\n+        LexError { _inner: () }\n+    }\n+}\n+\n #[stable(feature = \"proc_macro_lexerror_impls\", since = \"1.44.0\")]\n impl fmt::Display for LexError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -1171,6 +1177,28 @@ impl Literal {\n     }\n }\n \n+/// Parse a single literal from its stringified representation.\n+///\n+/// In order to parse successfully, the input string must not contain anything\n+/// but the literal token. Specifically, it must not contain whitespace or\n+/// comments in addition to the literal.\n+///\n+/// The resulting literal token will have a `Span::call_site()` span.\n+///\n+/// NOTE: some errors may cause panics instead of returning `LexError`. We\n+/// reserve the right to change these errors into `LexError`s later.\n+#[stable(feature = \"proc_macro_literal_parse\", since = \"1.54.0\")]\n+impl FromStr for Literal {\n+    type Err = LexError;\n+\n+    fn from_str(src: &str) -> Result<Self, LexError> {\n+        match bridge::client::Literal::from_str(src) {\n+            Ok(literal) => Ok(Literal(literal)),\n+            Err(()) => Err(LexError::new()),\n+        }\n+    }\n+}\n+\n // N.B., the bridge only provides `to_string`, implement `fmt::Display`\n // based on it (the reverse of the usual relationship between the two).\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]"}]}