{"sha": "ccc7651b482167f61678c8630545a9f0e6b6ea91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYzc2NTFiNDgyMTY3ZjYxNjc4Yzg2MzA1NDVhOWYwZTZiNmVhOTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-29T21:39:22Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-29T21:40:35Z"}, "message": "In reachability, don't ignore nested items\n\nReachability was considering nested items to be unreachable, which\nwas causing the bug in #2383. Once I fixed that, I also had to make\nimpl::make_impl_vtable instantiate methods where necessary, before\ncalling monomorphic_fn.\n\nCloses #2383", "tree": {"sha": "54c52cfbdada09f448a7357221034956c1ff5967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c52cfbdada09f448a7357221034956c1ff5967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc7651b482167f61678c8630545a9f0e6b6ea91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7651b482167f61678c8630545a9f0e6b6ea91", "html_url": "https://github.com/rust-lang/rust/commit/ccc7651b482167f61678c8630545a9f0e6b6ea91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7651b482167f61678c8630545a9f0e6b6ea91/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730e8e93103ee657bcaad55f32f0de52e83b19aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/730e8e93103ee657bcaad55f32f0de52e83b19aa", "html_url": "https://github.com/rust-lang/rust/commit/730e8e93103ee657bcaad55f32f0de52e83b19aa"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "f069ce1c2ccc31578fcb733e1d594a7ff32ea72d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ccc7651b482167f61678c8630545a9f0e6b6ea91", "patch": "@@ -40,6 +40,7 @@ import link::{mangle_internal_name_by_type_only,\n import metadata::{csearch, cstore, encoder};\n import metadata::common::link_meta;\n import util::ppaux::{ty_to_str, ty_to_short_str};\n+import syntax::diagnostic::expect;\n \n import common::*;\n import build::*;\n@@ -2052,7 +2053,10 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n     let mut item_ty = tpt.ty;\n \n-    let map_node = ccx.tcx.items.get(fn_id.node);\n+    let map_node = session::expect(ccx.sess, ccx.tcx.items.find(fn_id.node),\n+     {|| #fmt(\"While monomorphizing %?, couldn't find it in the item map \\\n+        (may have attempted to monomorphize an item defined in a different \\\n+        crate?)\", fn_id)});\n     // Get the path so that we can create a symbol\n     let (pt, name, span) = alt map_node {\n       ast_map::node_item(i, pt) {"}, {"sha": "914e282e485158b07b7ac6c3844db0bb2eedc410", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=ccc7651b482167f61678c8630545a9f0e6b6ea91", "patch": "@@ -258,8 +258,13 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: [ty::t],\n         if (*im.tps).len() > 0u || ty::type_has_self(fty) {\n             C_null(T_ptr(T_nil()))\n         } else {\n-            let m_id = method_with_name(ccx, impl_id, im.ident);\n+            let mut m_id = method_with_name(ccx, impl_id, im.ident);\n             if has_tps {\n+                // If the method is in another crate, need to make an inlined\n+                // copy first\n+                if m_id.crate != ast::local_crate {\n+                    m_id = maybe_instantiate_inline(ccx, m_id);\n+                }\n                 monomorphic_fn(ccx, m_id, substs, some(vtables), none).val\n             } else if m_id.crate == ast::local_crate {\n                 get_item_val(ccx, m_id.node)"}, {"sha": "2bbccf3df273260269eba2d0e5fee241f1193886", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=ccc7651b482167f61678c8630545a9f0e6b6ea91", "patch": "@@ -98,6 +98,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n         for vec::each(ms) {|m|\n             if tps.len() > 0u || m.tps.len() > 0u ||\n                attr::find_inline_attr(m.attrs) != attr::ia_none {\n+                cx.rmap.insert(m.id, ());\n                 traverse_inline_body(cx, m.body);\n             }\n         }\n@@ -141,9 +142,13 @@ fn traverse_inline_body(cx: ctx, body: blk) {\n         }\n         visit::visit_expr(e, cx, v);\n     }\n-    // Ignore nested items\n-    fn traverse_item(_i: @item, _cx: ctx, _v: visit::vt<ctx>) {}\n-    visit::visit_block(body, cx, visit::mk_vt(@{\n+    // Don't ignore nested items: for example if a generic fn contains a\n+    // generic impl (as in deque::create), we need to monomorphize the\n+    // impl as well\n+    fn traverse_item(i: @item, cx: ctx, _v: visit::vt<ctx>) {\n+      traverse_public_item(cx, i);\n+    }\n+     visit::visit_block(body, cx, visit::mk_vt(@{\n         visit_expr: traverse_expr,\n         visit_item: traverse_item\n         with *visit::default_visitor()"}, {"sha": "16093d52e3387698cab6562bb00ff9668625a227", "filename": "src/test/run-pass/issue-2383.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7651b482167f61678c8630545a9f0e6b6ea91/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=ccc7651b482167f61678c8630545a9f0e6b6ea91", "patch": "@@ -0,0 +1,8 @@\n+use std;\n+import std::deque;\n+import std::deque::t;\n+\n+fn main() {\n+    let Q = deque::create();\n+    Q.add_back(10);\n+}"}]}