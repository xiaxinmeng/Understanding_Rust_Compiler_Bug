{"sha": "770be24ccd9c47c05aceff91ce5a081798d97c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGJlMjRjY2Q5YzQ3YzA1YWNlZmY5MWNlNWEwODE3OThkOTdjNjc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-17T17:54:20Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-23T12:15:02Z"}, "message": "Use `DefId`s to identify anon consts when converting from HIR to ty::Const", "tree": {"sha": "ea77a8d00898aa993c98f65a8079b72d9deb9d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea77a8d00898aa993c98f65a8079b72d9deb9d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770be24ccd9c47c05aceff91ce5a081798d97c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770be24ccd9c47c05aceff91ce5a081798d97c67", "html_url": "https://github.com/rust-lang/rust/commit/770be24ccd9c47c05aceff91ce5a081798d97c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770be24ccd9c47c05aceff91ce5a081798d97c67/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "html_url": "https://github.com/rust-lang/rust/commit/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "e5c88c1c9ba94104f2163e0d2862bff80e1385c5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=770be24ccd9c47c05aceff91ce5a081798d97c67", "patch": "@@ -2404,16 +2404,14 @@ static_assert_size!(Const<'_>, 48);\n impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n-    pub fn from_hir_anon_const(\n-        tcx: TyCtxt<'tcx>,\n-        ast_const: &hir::AnonConst,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        debug!(\"Const::from_hir_anon_const(id={:?}, ast_const={:?})\", ast_const.hir_id, ast_const);\n+    pub fn from_hir_anon_const(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>) -> &'tcx Self {\n+        debug!(\"Const::from_hir_anon_const(id={:?})\", def_id);\n+\n+        let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n-        let def_id = tcx.hir().local_def_id(ast_const.hir_id);\n+        let body_id = tcx.hir().body_owned_by(hir_id);\n \n-        let expr = &tcx.hir().body(ast_const.body).value;\n+        let expr = &tcx.hir().body(body_id).value;\n \n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),"}, {"sha": "73c442e4a91ce515b31993a7f39ac81fab9ddd1e", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=770be24ccd9c47c05aceff91ce5a081798d97c67", "patch": "@@ -406,6 +406,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n+            let count = cx.tcx.hir().local_def_id(count.hir_id);\n             let count = ty::Const::from_hir_anon_const(cx.tcx, count, cx.tcx.types.usize);\n \n             ExprKind::Repeat { value: v.to_ref(), count }"}, {"sha": "ee7134822682a32de3040613bf5c690a910dd202", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=770be24ccd9c47c05aceff91ce5a081798d97c67", "patch": "@@ -780,7 +780,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    ty::Const::from_hir_anon_const(tcx, &ct.value, tcx.type_of(param.def_id)).into()\n+                    let ct = tcx.hir().local_def_id(ct.value.hir_id);\n+                    ty::Const::from_hir_anon_const(tcx, ct, tcx.type_of(param.def_id)).into()\n                 }\n                 _ => unreachable!(),\n             },\n@@ -2764,6 +2765,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .unwrap_or(tcx.types.err)\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n+                let length = tcx.hir().local_def_id(length.hir_id);\n                 let length = ty::Const::from_hir_anon_const(tcx, length, tcx.types.usize);\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)"}, {"sha": "f790bcfbb09aa78844fb3cb15944e72f52beb3f3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770be24ccd9c47c05aceff91ce5a081798d97c67/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=770be24ccd9c47c05aceff91ce5a081798d97c67", "patch": "@@ -3280,7 +3280,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn to_const(&self, ast_c: &hir::AnonConst, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        ty::Const::from_hir_anon_const(self.tcx, ast_c, ty)\n+        let c = self.tcx.hir().local_def_id(ast_c.hir_id);\n+        ty::Const::from_hir_anon_const(self.tcx, c, ty)\n     }\n \n     // If the type given by the user has free regions, save it for later, since"}]}