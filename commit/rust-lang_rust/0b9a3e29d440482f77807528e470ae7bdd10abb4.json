{"sha": "0b9a3e29d440482f77807528e470ae7bdd10abb4", "node_id": "C_kwDOAAsO6NoAKDBiOWEzZTI5ZDQ0MDQ4MmY3NzgwNzUyOGU0NzBhZTdiZGQxMGFiYjQ", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-19T14:24:24Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-21T13:13:09Z"}, "message": "Fix overlapping spans in removing extra arguments", "tree": {"sha": "3fbbd4fe6ec6d15be3debc2c8a951ec55b2ea360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fbbd4fe6ec6d15be3debc2c8a951ec55b2ea360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9a3e29d440482f77807528e470ae7bdd10abb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9a3e29d440482f77807528e470ae7bdd10abb4", "html_url": "https://github.com/rust-lang/rust/commit/0b9a3e29d440482f77807528e470ae7bdd10abb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9a3e29d440482f77807528e470ae7bdd10abb4/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de"}], "stats": {"total": 115, "additions": 76, "deletions": 39}, "files": [{"sha": "6a33826ea281c1728b560da9aa4923d8a94e4196", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -932,25 +932,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     labels\n                         .push((provided_span, format!(\"unexpected argument{}\", provided_ty_name)));\n                     let mut span = provided_span;\n-                    if arg_idx.index() > 0\n+                    if span.can_be_used_for_suggestions() {\n+                        if arg_idx.index() > 0\n                         && let Some((_, prev)) = provided_arg_tys\n                             .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n                     ) {\n                         // Include previous comma\n-                        span = span.with_lo(prev.hi());\n-                    } else if let Some((_, next)) = provided_arg_tys.get(\n-                        ProvidedIdx::from_usize(arg_idx.index() + 1),\n-                    ) {\n-                        // Include next comma\n-                        span = span.until(*next);\n+                        span = prev.shrink_to_hi().to(span);\n                     }\n-                    suggestions.push((span, String::new()));\n+                        suggestions.push((span, String::new()));\n \n-                    suggestion_text = match suggestion_text {\n-                        SuggestionText::None => SuggestionText::Remove(false),\n-                        SuggestionText::Remove(_) => SuggestionText::Remove(true),\n-                        _ => SuggestionText::DidYouMean,\n-                    };\n+                        suggestion_text = match suggestion_text {\n+                            SuggestionText::None => SuggestionText::Remove(false),\n+                            SuggestionText::Remove(_) => SuggestionText::Remove(true),\n+                            _ => SuggestionText::DidYouMean,\n+                        };\n+                    }\n                 }\n                 Error::Missing(expected_idx) => {\n                     // If there are multiple missing arguments adjacent to each other,"}, {"sha": "eb739b149a1030083d4727c837f0126cf473fa09", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -7,10 +7,7 @@ LL |   fn oom() -> ! {\n    |  _-^^^^^^^^^^^^\n LL | |     loop {}\n LL | | }\n-   | | -\n-   | | |\n-   | |_unexpected argument of type `core::alloc::Layout`\n-   |   help: remove the extra argument\n+   | |_- unexpected argument of type `core::alloc::Layout`\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4"}, {"sha": "1442062326d198d1bf5b55b1946d7cc6fc403a9a", "filename": "tests/ui/argument-suggestions/extra_arguments.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.rs?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -3,8 +3,15 @@ fn one_arg(_a: i32) {}\n fn two_arg_same(_a: i32, _b: i32) {}\n fn two_arg_diff(_a: i32, _b: &str) {}\n \n+macro_rules! foo {\n+    ($x:expr) => {\n+        empty($x, 1); //~ ERROR function takes\n+    }\n+}\n+\n fn main() {\n   empty(\"\"); //~ ERROR function takes\n+  empty(1, 1); //~ ERROR function takes\n \n   one_arg(1, 1); //~ ERROR function takes\n   one_arg(1, \"\"); //~ ERROR function takes\n@@ -32,4 +39,5 @@ fn main() {\n     1,\n     \"\"\n   );\n+  foo!(1);\n }"}, {"sha": "11c710997435585e0f727d3165797a04a5580965", "filename": "tests/ui/argument-suggestions/extra_arguments.stderr", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -1,5 +1,5 @@\n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n-  --> $DIR/extra_arguments.rs:7:3\n+  --> $DIR/extra_arguments.rs:13:3\n    |\n LL |   empty(\"\");\n    |   ^^^^^ --\n@@ -13,8 +13,27 @@ note: function defined here\n LL | fn empty() {}\n    |    ^^^^^\n \n+error[E0061]: this function takes 0 arguments but 2 arguments were supplied\n+  --> $DIR/extra_arguments.rs:14:3\n+   |\n+LL |   empty(1, 1);\n+   |   ^^^^^ -  - unexpected argument of type `{integer}`\n+   |         |\n+   |         unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:1:4\n+   |\n+LL | fn empty() {}\n+   |    ^^^^^\n+help: remove the extra arguments\n+   |\n+LL -   empty(1, 1);\n+LL +   empty();\n+   |\n+\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/extra_arguments.rs:9:3\n+  --> $DIR/extra_arguments.rs:16:3\n    |\n LL |   one_arg(1, 1);\n    |   ^^^^^^^  ---\n@@ -29,7 +48,7 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/extra_arguments.rs:10:3\n+  --> $DIR/extra_arguments.rs:17:3\n    |\n LL |   one_arg(1, \"\");\n    |   ^^^^^^^  ----\n@@ -44,7 +63,7 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:11:3\n+  --> $DIR/extra_arguments.rs:18:3\n    |\n LL |   one_arg(1, \"\", 1.0);\n    |   ^^^^^^^    --  --- unexpected argument of type `{float}`\n@@ -63,7 +82,7 @@ LL +   one_arg(1);\n    |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:13:3\n+  --> $DIR/extra_arguments.rs:20:3\n    |\n LL |   two_arg_same(1, 1, 1);\n    |   ^^^^^^^^^^^^     ---\n@@ -78,7 +97,7 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:14:3\n+  --> $DIR/extra_arguments.rs:21:3\n    |\n LL |   two_arg_same(1, 1, 1.0);\n    |   ^^^^^^^^^^^^     -----\n@@ -93,7 +112,7 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:16:3\n+  --> $DIR/extra_arguments.rs:23:3\n    |\n LL |   two_arg_diff(1, 1, \"\");\n    |   ^^^^^^^^^^^^  ---\n@@ -108,7 +127,7 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:17:3\n+  --> $DIR/extra_arguments.rs:24:3\n    |\n LL |   two_arg_diff(1, \"\", \"\");\n    |   ^^^^^^^^^^^^      ----\n@@ -123,7 +142,7 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n-  --> $DIR/extra_arguments.rs:18:3\n+  --> $DIR/extra_arguments.rs:25:3\n    |\n LL |   two_arg_diff(1, 1, \"\", \"\");\n    |   ^^^^^^^^^^^^    -      -- unexpected argument of type `&'static str`\n@@ -142,7 +161,7 @@ LL +   two_arg_diff(1, \"\");\n    |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n-  --> $DIR/extra_arguments.rs:19:3\n+  --> $DIR/extra_arguments.rs:26:3\n    |\n LL |   two_arg_diff(1, \"\", 1, \"\");\n    |   ^^^^^^^^^^^^        -  -- unexpected argument of type `&'static str`\n@@ -161,7 +180,7 @@ LL +   two_arg_diff(1, \"\");\n    |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:22:3\n+  --> $DIR/extra_arguments.rs:29:3\n    |\n LL |   two_arg_same(1, 1,     \"\");\n    |   ^^^^^^^^^^^^     --------\n@@ -176,7 +195,7 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:23:3\n+  --> $DIR/extra_arguments.rs:30:3\n    |\n LL |   two_arg_diff(1, 1,     \"\");\n    |   ^^^^^^^^^^^^  ---\n@@ -191,7 +210,7 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:24:3\n+  --> $DIR/extra_arguments.rs:31:3\n    |\n LL |     two_arg_same(\n    |     ^^^^^^^^^^^^\n@@ -211,7 +230,7 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n-  --> $DIR/extra_arguments.rs:30:3\n+  --> $DIR/extra_arguments.rs:37:3\n    |\n LL |     two_arg_diff(\n    |     ^^^^^^^^^^^^\n@@ -229,6 +248,26 @@ note: function defined here\n LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n \n-error: aborting due to 14 previous errors\n+error[E0061]: this function takes 0 arguments but 2 arguments were supplied\n+  --> $DIR/extra_arguments.rs:8:9\n+   |\n+LL |         empty($x, 1);\n+   |         ^^^^^     - unexpected argument of type `{integer}`\n+...\n+LL |   foo!(1);\n+   |   -------\n+   |   |    |\n+   |   |    unexpected argument of type `{integer}`\n+   |   |    help: remove the extra argument\n+   |   in this macro invocation\n+   |\n+note: function defined here\n+  --> $DIR/extra_arguments.rs:1:4\n+   |\n+LL | fn empty() {}\n+   |    ^^^^^\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0061`."}, {"sha": "2742529edd3b317b9fd8a11ac44c64ba9f8f100d", "filename": "tests/ui/issues/issue-26094.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.rs?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -1,13 +1,12 @@\n macro_rules! some_macro {\n-    ($other: expr) => ({\n+    ($other: expr) => {{\n         $other(None) //~ NOTE unexpected argument of type `Option<_>`\n-    })\n+    }};\n }\n \n fn some_function() {} //~ NOTE defined here\n \n fn main() {\n     some_macro!(some_function);\n     //~^ ERROR function takes 0 arguments but 1 argument was supplied\n-    //~| NOTE in this expansion of some_macro!\n }"}, {"sha": "ecdf48470f730294ca540081896c5433781e0f29", "filename": "tests/ui/issues/issue-26094.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b9a3e29d440482f77807528e470ae7bdd10abb4/tests%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.stderr?ref=0b9a3e29d440482f77807528e470ae7bdd10abb4", "patch": "@@ -2,10 +2,7 @@ error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |                ----\n-   |                |\n-   |                unexpected argument of type `Option<_>`\n-   |                help: remove the extra argument\n+   |                ---- unexpected argument of type `Option<_>`\n ...\n LL |     some_macro!(some_function);\n    |                 ^^^^^^^^^^^^^"}]}