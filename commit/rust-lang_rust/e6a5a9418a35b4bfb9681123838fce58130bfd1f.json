{"sha": "e6a5a9418a35b4bfb9681123838fce58130bfd1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTVhOTQxOGEzNWI0YmZiOTY4MTEyMzgzOGZjZTU4MTMwYmZkMWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-26T13:13:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-28T17:57:05Z"}, "message": "restructure unary_op to also dispatch on type first; fix promotion with unary '-' overflowing", "tree": {"sha": "18678f7cdba75a44fb55e7535d2068d7dcc5dfb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18678f7cdba75a44fb55e7535d2068d7dcc5dfb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a5a9418a35b4bfb9681123838fce58130bfd1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a5a9418a35b4bfb9681123838fce58130bfd1f", "html_url": "https://github.com/rust-lang/rust/commit/e6a5a9418a35b4bfb9681123838fce58130bfd1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a5a9418a35b4bfb9681123838fce58130bfd1f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066d2eea250c9010358392c93ef40f36cbb9930b", "url": "https://api.github.com/repos/rust-lang/rust/commits/066d2eea250c9010358392c93ef40f36cbb9930b", "html_url": "https://github.com/rust-lang/rust/commit/066d2eea250c9010358392c93ef40f36cbb9930b"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "13ed527e3496b6e6929ee1828aad9b4d66a014a9", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e6a5a9418a35b4bfb9681123838fce58130bfd1f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a5a9418a35b4bfb9681123838fce58130bfd1f/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=e6a5a9418a35b4bfb9681123838fce58130bfd1f", "patch": "@@ -302,38 +302,33 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         let right = right.to_scalar()?;\n \n         trace!(\"Running binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n-            bin_op, left, left_layout.ty.sty, right, right_layout.ty.sty);\n+            bin_op, left, left_layout.ty, right, right_layout.ty);\n \n         match left_layout.ty.sty {\n             ty::Char => {\n                 assert_eq!(left_layout.ty, right_layout.ty);\n-                let l = left.to_char()?;\n-                let r = right.to_char()?;\n-                self.binary_char_op(bin_op, l, r)\n+                let left = left.to_char()?;\n+                let right = right.to_char()?;\n+                self.binary_char_op(bin_op, left, right)\n             }\n             ty::Bool => {\n                 assert_eq!(left_layout.ty, right_layout.ty);\n-                let l = left.to_bool()?;\n-                let r = right.to_bool()?;\n-                self.binary_bool_op(bin_op, l, r)\n+                let left = left.to_bool()?;\n+                let right = right.to_bool()?;\n+                self.binary_bool_op(bin_op, left, right)\n             }\n             ty::Float(fty) => {\n                 assert_eq!(left_layout.ty, right_layout.ty);\n-                let l = left.to_bits(left_layout.size)?;\n-                let r = right.to_bits(right_layout.size)?;\n-                self.binary_float_op(bin_op, fty, l, r)\n+                let left = left.to_bits(left_layout.size)?;\n+                let right = right.to_bits(right_layout.size)?;\n+                self.binary_float_op(bin_op, fty, left, right)\n             }\n             _ => {\n-                // Must be integer(-like) types\n-                #[inline]\n-                fn is_ptr<'tcx>(ty: ty::Ty<'tcx>) -> bool {\n-                    match ty.sty {\n-                        ty::RawPtr(..) | ty::Ref(..) | ty::FnPtr(..) => true,\n-                        _ => false,\n-                    }\n-                }\n-                assert!(left_layout.ty.is_integral() || is_ptr(left_layout.ty));\n-                assert!(right_layout.ty.is_integral() || is_ptr(right_layout.ty));\n+                // Must be integer(-like) types.  Don't forget about == on fn pointers.\n+                assert!(left_layout.ty.is_integral() || left_layout.ty.is_unsafe_ptr() ||\n+                    left_layout.ty.is_fn());\n+                assert!(right_layout.ty.is_integral() || right_layout.ty.is_unsafe_ptr() ||\n+                    right_layout.ty.is_fn());\n \n                 // Handle operations that support pointer values\n                 if let Some(handled) =\n@@ -343,9 +338,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 }\n \n                 // Everything else only works with \"proper\" bits\n-                let l = left.to_bits(left_layout.size)?;\n-                let r = right.to_bits(right_layout.size)?;\n-                self.binary_int_op(bin_op, l, left_layout, r, right_layout)\n+                let left = left.to_bits(left_layout.size)?;\n+                let right = right.to_bits(right_layout.size)?;\n+                self.binary_int_op(bin_op, left, left_layout, right, right_layout)\n             }\n         }\n     }\n@@ -360,25 +355,42 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         use rustc_apfloat::ieee::{Single, Double};\n         use rustc_apfloat::Float;\n \n-        let size = layout.size;\n-        let bytes = val.to_bits(size)?;\n-\n-        let result_bytes = match (un_op, &layout.ty.sty) {\n-\n-            (Not, ty::Bool) => !val.to_bool()? as u128,\n-\n-            (Not, _) => !bytes,\n+        trace!(\"Running unary op {:?}: {:?} ({:?})\", un_op, val, layout.ty.sty);\n \n-            (Neg, ty::Float(FloatTy::F32)) => Single::to_bits(-Single::from_bits(bytes)),\n-            (Neg, ty::Float(FloatTy::F64)) => Double::to_bits(-Double::from_bits(bytes)),\n-\n-            (Neg, _) if bytes == (1 << (size.bits() - 1)) => return err!(OverflowNeg),\n-            (Neg, _) => (-(bytes as i128)) as u128,\n-        };\n-\n-        Ok(Scalar::Bits {\n-            bits: self.truncate(result_bytes, layout),\n-            size: size.bytes() as u8,\n-        })\n+        match layout.ty.sty {\n+            ty::Bool => {\n+                let val = val.to_bool()?;\n+                let res = match un_op {\n+                    Not => !val,\n+                    _ => bug!(\"Invalid bool op {:?}\", un_op)\n+                };\n+                Ok(Scalar::from_bool(res))\n+            }\n+            ty::Float(fty) => {\n+                let val = val.to_bits(layout.size)?;\n+                let res = match (un_op, fty) {\n+                    (Neg, FloatTy::F32) => Single::to_bits(-Single::from_bits(val)),\n+                    (Neg, FloatTy::F64) => Double::to_bits(-Double::from_bits(val)),\n+                    _ => bug!(\"Invalid float op {:?}\", un_op)\n+                };\n+                Ok(Scalar::Bits { bits: res, size: layout.size.bytes() as u8 })\n+            }\n+            _ => {\n+                assert!(layout.ty.is_integral());\n+                let val = val.to_bits(layout.size)?;\n+                let res = match un_op {\n+                    Not => !val,\n+                    Neg => {\n+                        assert!(layout.abi.is_signed());\n+                        (-(val as i128)) as u128\n+                    }\n+                };\n+                // res needs tuncating\n+                Ok(Scalar::Bits {\n+                    bits: self.truncate(res, layout),\n+                    size: layout.size.bytes() as u8,\n+                })\n+            }\n+        }\n     }\n }"}, {"sha": "28b876c308b64544b2156bb79b5b84138b5b5161", "filename": "src/test/run-pass/ctfe/promotion.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6a5a9418a35b4bfb9681123838fce58130bfd1f/src%2Ftest%2Frun-pass%2Fctfe%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a5a9418a35b4bfb9681123838fce58130bfd1f/src%2Ftest%2Frun-pass%2Fctfe%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fpromotion.rs?ref=e6a5a9418a35b4bfb9681123838fce58130bfd1f", "patch": "@@ -8,10 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -O\n+\n fn foo(_: &'static [&'static str]) {}\n fn bar(_: &'static [&'static str; 3]) {}\n+fn baz_i32(_: &'static i32) {}\n+fn baz_u32(_: &'static u32) {}\n \n fn main() {\n     foo(&[\"a\", \"b\", \"c\"]);\n     bar(&[\"d\", \"e\", \"f\"]);\n+\n+    // make sure that these do not cause trouble despite overflowing\n+    baz_u32(&(0-1));\n+    baz_i32(&-std::i32::MIN);\n }"}]}