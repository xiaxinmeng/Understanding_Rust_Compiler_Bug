{"sha": "caa22c93415bb106bced82bbabc3d9ffbef7e69c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYTIyYzkzNDE1YmIxMDZiY2VkODJiYmFiYzNkOWZmYmVmN2U2OWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-03-22T00:12:05Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-22T01:10:34Z"}, "message": "Started adding support for floating-point type, floating-point literals, and logging of floats. Other operations on float probably don't work yet.", "tree": {"sha": "2a77dc7cfb33c82dcdc83a69a423ebc4340e576e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a77dc7cfb33c82dcdc83a69a423ebc4340e576e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa22c93415bb106bced82bbabc3d9ffbef7e69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa22c93415bb106bced82bbabc3d9ffbef7e69c", "html_url": "https://github.com/rust-lang/rust/commit/caa22c93415bb106bced82bbabc3d9ffbef7e69c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa22c93415bb106bced82bbabc3d9ffbef7e69c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35951c92dbc1bb2eeb94f7951b6186ce8239fc41", "url": "https://api.github.com/repos/rust-lang/rust/commits/35951c92dbc1bb2eeb94f7951b6186ce8239fc41", "html_url": "https://github.com/rust-lang/rust/commit/35951c92dbc1bb2eeb94f7951b6186ce8239fc41"}], "stats": {"total": 105, "additions": 87, "deletions": 18}, "files": [{"sha": "cdeea2418098a22840bb09ccc751d8374c865405", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -255,6 +255,7 @@ tag lit_ {\n     lit_int(int);\n     lit_uint(uint);\n     lit_mach_int(ty_mach, int);\n+    lit_float(str);\n     lit_nil;\n     lit_bool(bool);\n }\n@@ -274,6 +275,7 @@ tag ty_ {\n     ty_bool;\n     ty_int;\n     ty_uint;\n+    ty_float;\n     ty_machine(util.common.ty_mach);\n     ty_char;\n     ty_str;"}, {"sha": "d4948503d596489433684f36a3c58965b014593a", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -1,5 +1,6 @@\n import std.io;\n import std._str;\n+import std._int;\n import std.map;\n import std.map.hashmap;\n import util.common;\n@@ -314,6 +315,24 @@ impure fn consume_block_comment(reader rdr) {\n     be consume_any_whitespace(rdr);\n }\n \n+impure fn scan_dec_digits(reader rdr) -> int {\n+\n+    auto c = rdr.curr();\n+\n+    let int accum_int = 0;\n+\n+    while (is_dec_digit(c) || c == '_') {\n+            if (c != '_') {\n+                accum_int *= 10;\n+                accum_int += dec_digit_val(c);\n+            }\n+            rdr.bump();\n+            c = rdr.curr();\n+    }\n+\n+    ret accum_int;\n+}\n+\n impure fn scan_number(mutable char c, reader rdr) -> token.token {\n     auto accum_int = 0;\n     auto n = rdr.next();\n@@ -330,9 +349,7 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             rdr.bump();\n             c = rdr.curr();\n         }\n-    }\n-\n-    if (c == '0' && n == 'b') {\n+    } else if (c == '0' && n == 'b') {\n         rdr.bump();\n         rdr.bump();\n         c = rdr.curr();\n@@ -344,16 +361,12 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             rdr.bump();\n             c = rdr.curr();\n         }\n+    } else {\n+        accum_int = scan_dec_digits(rdr);\n     }\n \n-    while (is_dec_digit(c) || c == '_') {\n-        if (c != '_') {\n-            accum_int *= 10;\n-            accum_int += dec_digit_val(c);\n-        }\n-        rdr.bump();\n-        c = rdr.curr();\n-    }\n+    c = rdr.curr();\n+    n = rdr.next();\n \n     if (c == 'u' || c == 'i') {\n         let bool signed = (c == 'i');\n@@ -405,7 +418,18 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             ret token.LIT_UINT(accum_int as uint);\n         }\n     }\n-    ret token.LIT_INT(accum_int);\n+    n = rdr.curr();\n+    if(n == '.') {\n+        // Parse a floating-point number.\n+        rdr.bump();\n+        auto accum_int1 = scan_dec_digits(rdr);\n+        ret token.LIT_FLOAT(_int.to_str(accum_int, 10u) + \".\"\n+                          + _int.to_str(accum_int1, 10u));\n+        // FIXME: Parse exponent.\n+    }\n+    else {\n+        ret token.LIT_INT(accum_int);\n+    }\n }\n \n impure fn next_token(reader rdr) -> token.token {"}, {"sha": "f1f8a91887f14352732394ffa2644f570d975477", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -537,6 +537,10 @@ impure fn parse_lit(parser p) -> ast.lit {\n             p.bump();\n             lit = ast.lit_uint(u);\n         }\n+        case (token.LIT_FLOAT(?s)) {\n+            p.bump();\n+            lit = ast.lit_float(s);\n+        }\n         case (token.LIT_MACH_INT(?tm, ?i)) {\n             p.bump();\n             lit = ast.lit_mach_int(tm, i);"}, {"sha": "a1fb1cd0174f77774da7163d84debcc9105cf02e", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -126,6 +126,7 @@ tag token {\n     LIT_INT(int);\n     LIT_UINT(uint);\n     LIT_MACH_INT(ty_mach, int);\n+    LIT_FLOAT(str);\n     LIT_STR(str);\n     LIT_CHAR(char);\n     LIT_BOOL(bool);\n@@ -295,7 +296,7 @@ fn to_str(token t) -> str {\n             ret  _int.to_str(i, 10u)\n                 + \"_\" + ty_mach_to_str(tm);\n         }\n-\n+        case (LIT_FLOAT(?s)) { ret s; }\n         case (LIT_STR(?s)) {\n             // FIXME: escape.\n             ret \"\\\"\" + s + \"\\\"\";"}, {"sha": "7be12f910bebb4a4b2c9fc3cb5e5d95c185d498b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -211,6 +211,11 @@ fn T_int() -> TypeRef {\n     ret T_i32();\n }\n \n+fn T_float() -> TypeRef {\n+    // FIXME: switch on target type.\n+    ret T_f64();\n+}\n+\n fn T_char() -> TypeRef {\n     ret T_i32();\n }\n@@ -360,10 +365,6 @@ fn T_crate(type_names tn) -> TypeRef {\n     ret t;\n }\n \n-fn T_double() -> TypeRef {\n-    ret llvm.LLVMDoubleType();\n-}\n-\n fn T_taskptr(type_names tn) -> TypeRef {\n     ret T_ptr(T_task(tn));\n }\n@@ -590,6 +591,7 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t, bool boxed) -> TypeRef {\n         case (ty.ty_nil) { llty = T_nil(); }\n         case (ty.ty_bool) { llty = T_bool(); }\n         case (ty.ty_int) { llty = T_int(); }\n+        case (ty.ty_float) { llty = T_float(); }\n         case (ty.ty_uint) { llty = T_int(); }\n         case (ty.ty_machine(?tm)) {\n             alt (tm) {\n@@ -743,6 +745,10 @@ fn C_integral(int i, TypeRef t) -> ValueRef {\n     ret llvm.LLVMConstIntOfString(t, _str.buf(istr(i)), 10);\n }\n \n+fn C_float(str s) -> ValueRef {\n+    ret llvm.LLVMConstRealOfString(T_float(), _str.buf(s));\n+}\n+\n fn C_nil() -> ValueRef {\n     // NB: See comment above in T_void().\n     ret C_integral(0, T_i1());\n@@ -879,6 +885,7 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n         llglue = glues.upcall_glues_cdecl.(n);\n     }\n     let vec[ValueRef] call_args = vec(llupcall);\n+\n     if (!pass_task) {\n         call_args += vec(lltaskptr);\n     }\n@@ -2290,6 +2297,9 @@ fn trans_lit(@crate_ctxt cx, &ast.lit lit, &ast.ann ann) -> ValueRef {\n             }\n             ret C_integral(i, t);\n         }\n+        case(ast.lit_float(?fs)) {\n+            ret C_float(fs);\n+        }\n         case (ast.lit_char(?c)) {\n             ret C_integral(c as int, T_char());\n         }\n@@ -4476,13 +4486,28 @@ fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n \n     auto sub = trans_expr(cx, e);\n     auto e_ty = ty.expr_ty(e);\n+    alt (e_ty.struct) {\n+        case(ty.ty_float) {\n+            auto tmp = sub.bcx.build.Alloca(T_float());\n+            sub.bcx.build.Store(sub.val, tmp);\n+            sub = res(sub.bcx, tmp);\n+        }\n+        case(_) { }\n+    }\n+\n     alt (e_ty.struct) {\n         case (ty.ty_str) {\n             auto v = vp2i(sub.bcx, sub.val);\n             ret trans_upcall(sub.bcx,\n                              \"upcall_log_str\",\n                              vec(v));\n         }\n+        case (ty.ty_float) {\n+            auto v = vp2i(sub.bcx, sub.val);\n+            ret trans_upcall(sub.bcx,\n+                             \"upcall_log_float\",\n+                             vec(v));\n+        }\n         case (_) {\n             ret trans_upcall(sub.bcx,\n                              \"upcall_log_int\",\n@@ -6247,7 +6272,6 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n     collect_items(cx, crate);\n     collect_tag_ctors(cx, crate);\n     trans_constants(cx, crate);\n-\n     trans_mod(cx, crate.node.module);\n     trans_vec_append_glue(cx);\n     if (!shared) {"}, {"sha": "bf525679e2b4ab69bb123266847ae0f676845476", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -32,6 +32,7 @@ tag sty {\n     ty_nil;\n     ty_bool;\n     ty_int;\n+    ty_float;\n     ty_uint;\n     ty_machine(util.common.ty_mach);\n     ty_char;\n@@ -162,6 +163,7 @@ fn ty_to_str(&@t typ) -> str {\n         case (ty_nil)          { s += \"()\";                         }\n         case (ty_bool)         { s += \"bool\";                       }\n         case (ty_int)          { s += \"int\";                        }\n+        case (ty_float)        { s += \"float\";                      }\n         case (ty_uint)         { s += \"uint\";                       }\n         case (ty_machine(?tm)) { s += common.ty_mach_to_str(tm);    }\n         case (ty_char)         { s += \"char\";                       }\n@@ -418,6 +420,7 @@ fn type_is_scalar(@t ty) -> bool {\n         case (ty_nil) { ret true; }\n         case (ty_bool) { ret true; }\n         case (ty_int) { ret true; }\n+        case (ty_float) { ret true; }\n         case (ty_uint) { ret true; }\n         case (ty_machine(_)) { ret true; }\n         case (ty_char) { ret true; }"}, {"sha": "c849483e8addd8e068414088fb13baac252e503b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -1493,6 +1493,7 @@ fn check_lit(@ast.lit lit) -> @ty.t {\n         case (ast.lit_str(_))           { sty = ty.ty_str;  }\n         case (ast.lit_char(_))          { sty = ty.ty_char; }\n         case (ast.lit_int(_))           { sty = ty.ty_int;  }\n+        case (ast.lit_float(_))           { sty = ty.ty_float;  }\n         case (ast.lit_uint(_))          { sty = ty.ty_uint; }\n         case (ast.lit_mach_int(?tm, _)) { sty = ty.ty_machine(tm); }\n         case (ast.lit_nil)              { sty = ty.ty_nil;  }"}, {"sha": "0e30ced131da67769ce610ba02619ee21b07a327", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -283,6 +283,9 @@ impure fn print_literal(ps s, @ast.lit lit) {\n     case (ast.lit_uint(?val)) { // TODO clipping? uistr?\n       wrd(s, util.common.istr(val as int) + \"u\");\n     }\n+    case (ast.lit_float(?fstr)) {\n+      wrd(s, fstr);\n+    }\n     case (ast.lit_mach_int(?mach,?val)) {\n       wrd(s, util.common.istr(val as int));\n       wrd(s, util.common.ty_mach_to_str(mach));"}, {"sha": "30306104859c694130cfe9746fe30acf27046e23", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/caa22c93415bb106bced82bbabc3d9ffbef7e69c/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=caa22c93415bb106bced82bbabc3d9ffbef7e69c", "patch": "@@ -39,6 +39,13 @@ void upcall_log_int(rust_task *task, int32_t i) {\n               \"rust: %\" PRId32 \" (0x%\" PRIx32 \")\", i, i);\n }\n \n+extern \"C\" CDECL\n+void upcall_log_float(rust_task *task, double *f) {\n+    LOG_UPCALL_ENTRY(task);\n+    task->log(rust_log::UPCALL | rust_log::ULOG,\n+              \"rust: %12.12f\", *f);\n+}\n+\n extern \"C\" CDECL void\n upcall_log_str(rust_task *task, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);"}]}