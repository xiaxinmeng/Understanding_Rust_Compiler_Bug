{"sha": "7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "node_id": "C_kwDOAAsO6NoAKDc3NzkzODZhM2E2MmU2YWVkYjgxZGRkMTA5NzdiMWIwZDRiMmJjZWM", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2023-01-09T15:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T15:35:29Z"}, "message": "Rollup merge of #106164 - compiler-errors:check-region-tweak, r=oli-obk\n\nMove `check_region_obligations_and_report_errors` to `TypeErrCtxt`\n\nMakes sense for this function to live with its sibling `resolve_regions_and_report_errors`, around which it's basically just a wrapper.", "tree": {"sha": "77223265402a5fbafcb573699d934b8b679c8bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77223265402a5fbafcb573699d934b8b679c8bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvDRBCRBK7hj4Ov3rIwAAHpEIAEOsDYBEgCMmucWDD3dr+Dsk\neMBCyIKGNdEuXcHqS/r/mCBcxCVHKkZLaeQ54MO/yuhISCgswPeTM3YmXqH6kBcd\n9+y9P+0kCJ3NC8EarYqXZQpPn7OSKHbMGoeseZJO8Li9NLJrxHiLO6QppHtbfWG6\nhmwrVK/OkDGqkOtlAEzhxgpajroiWbmaY6FH9UCbps8qZtmzW/0bWQA0c5jIz4aV\nIM1dmiVvw9ojwR/aAY2otriIqxcxMNjfUxqqjiFlKWmezAw1XXD31/MGG6Wl/20b\nk3kb17agP0qaqUgQqLARek5kJROFxdIYxn/v8zOni/vcuILIMygKlWUMnXUWnjo=\n=JP4x\n-----END PGP SIGNATURE-----\n", "payload": "tree 77223265402a5fbafcb573699d934b8b679c8bea\nparent fd75cfef669fce0f2580abd0a4cefb72ed6f2f02\nparent c104ee9f6d24cf5b0f928ba09dbd71835fe127ee\nauthor fee1-dead <ent3rm4n@gmail.com> 1673278529 +0800\ncommitter GitHub <noreply@github.com> 1673278529 +0800\n\nRollup merge of #106164 - compiler-errors:check-region-tweak, r=oli-obk\n\nMove `check_region_obligations_and_report_errors` to `TypeErrCtxt`\n\nMakes sense for this function to live with its sibling `resolve_regions_and_report_errors`, around which it's basically just a wrapper.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "html_url": "https://github.com/rust-lang/rust/commit/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd75cfef669fce0f2580abd0a4cefb72ed6f2f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd75cfef669fce0f2580abd0a4cefb72ed6f2f02", "html_url": "https://github.com/rust-lang/rust/commit/fd75cfef669fce0f2580abd0a4cefb72ed6f2f02"}, {"sha": "c104ee9f6d24cf5b0f928ba09dbd71835fe127ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/c104ee9f6d24cf5b0f928ba09dbd71835fe127ee", "html_url": "https://github.com/rust-lang/rust/commit/c104ee9f6d24cf5b0f928ba09dbd71835fe127ee"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "ef563360c4cebb8d3e0265ead2be59430e5013d1", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -468,7 +468,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Can have different predicates to their defining use\n         hir::OpaqueTyOrigin::TyAlias => {\n             let outlives_environment = OutlivesEnvironment::new(param_env);\n-            let _ = infcx.check_region_obligations_and_report_errors(\n+            let _ = infcx.err_ctxt().check_region_obligations_and_report_errors(\n                 defining_use_anchor,\n                 &outlives_environment,\n             );"}, {"sha": "b260b929bebdb664dd7fe26e01ab9a0dec48e1ab", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -615,7 +615,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n         Some(infcx),\n         infcx.implied_bounds_tys(param_env, impl_m_hir_id, wf_tys),\n     );\n-    infcx.check_region_obligations_and_report_errors(\n+    infcx.err_ctxt().check_region_obligations_and_report_errors(\n         impl_m.def_id.expect_local(),\n         &outlives_environment,\n     )?;\n@@ -1643,8 +1643,9 @@ pub(super) fn compare_impl_const_raw(\n     }\n \n     let outlives_environment = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment)?;\n-\n+    infcx\n+        .err_ctxt()\n+        .check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment)?;\n     Ok(())\n }\n \n@@ -1752,7 +1753,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     // Finally, resolve all regions. This catches wily misuses of\n     // lifetime parameters.\n     let outlives_environment = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(\n+    infcx.err_ctxt().check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n     )?;\n@@ -1966,7 +1967,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     let outlives_environment =\n         OutlivesEnvironment::with_bounds(param_env, Some(&infcx), implied_bounds);\n \n-    infcx.check_region_obligations_and_report_errors(\n+    infcx.err_ctxt().check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n     )?;"}, {"sha": "e9baab594530ececae99c5e959b0bd7b1b5eeaa6", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -116,7 +116,9 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     let outlives_environment =\n         OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n \n-    let _ = infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n+    let _ = infcx\n+        .err_ctxt()\n+        .check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n }\n \n fn check_well_formed(tcx: TyCtxt<'_>, def_id: hir::OwnerId) {"}, {"sha": "2e2c1591e9b4472dffb5e39a22b33b92685fbbc7", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -325,7 +325,9 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n                 // Finally, resolve all regions.\n                 let outlives_env = OutlivesEnvironment::new(param_env);\n-                let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+                let _ = infcx\n+                    .err_ctxt()\n+                    .check_region_obligations_and_report_errors(impl_did, &outlives_env);\n             }\n         }\n         _ => {\n@@ -565,7 +567,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n     // Finally, resolve all regions.\n     let outlives_env = OutlivesEnvironment::new(param_env);\n-    let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+    let _ = infcx.err_ctxt().check_region_obligations_and_report_errors(impl_did, &outlives_env);\n \n     CoerceUnsizedInfo { custom_kind: kind }\n }"}, {"sha": "8b9034d9620e2c3debfefc0081b6f3fdcf4217c9", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -181,7 +181,8 @@ fn get_impl_substs(\n \n     let implied_bounds = infcx.implied_bounds_tys(param_env, impl1_hir_id, assumed_wf_types);\n     let outlives_env = OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n-    let _ = infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n+    let _ =\n+        infcx.err_ctxt().check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}, {"sha": "31b546581e424832ca65c2f4709ca52d50a4b03a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -1679,13 +1679,29 @@ impl<'tcx> InferCtxt<'tcx> {\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n+    /// Processes registered region obliations and resolves regions, reporting\n+    /// any errors if any were raised. Prefer using this function over manually\n+    /// calling `resolve_regions_and_report_errors`.\n+    pub fn check_region_obligations_and_report_errors(\n+        &self,\n+        generic_param_scope: LocalDefId,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+    ) -> Result<(), ErrorGuaranteed> {\n+        self.process_registered_region_obligations(\n+            outlives_env.region_bound_pairs(),\n+            outlives_env.param_env,\n+        );\n+\n+        self.resolve_regions_and_report_errors(generic_param_scope, outlives_env)\n+    }\n+\n     /// Process the region constraints and report any errors that\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n     ///\n     /// Make sure to call [`InferCtxt::process_registered_region_obligations`]\n-    /// first, or preferably use [`InferCtxt::check_region_obligations_and_report_errors`]\n+    /// first, or preferably use [`TypeErrCtxt::check_region_obligations_and_report_errors`]\n     /// to do both of these operations together.\n     pub fn resolve_regions_and_report_errors(\n         &self,"}, {"sha": "a85e6a19b11b65b99fdc279a195f5822cd3a4220", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779386a3a62e6aedb81ddd10977b1b0d4b2bcec/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7779386a3a62e6aedb81ddd10977b1b0d4b2bcec", "patch": "@@ -60,17 +60,14 @@\n //! imply that `'b: 'a`.\n \n use crate::infer::outlives::components::{push_outlives_components, Component};\n-use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{\n     self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, SubstsRef, Ty, TyCtxt, TypeVisitable};\n@@ -116,7 +113,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n     }\n \n-    /// NOTE: Prefer using [`InferCtxt::check_region_obligations_and_report_errors`]\n+    /// NOTE: Prefer using `TypeErrCtxt::check_region_obligations_and_report_errors`\n     /// instead of calling this directly.\n     ///\n     /// Process the region obligations that must be proven (during\n@@ -170,22 +167,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             outlives.type_must_outlive(origin, sup_type, sub_region, category);\n         }\n     }\n-\n-    /// Processes registered region obliations and resolves regions, reporting\n-    /// any errors if any were raised. Prefer using this function over manually\n-    /// calling `resolve_regions_and_report_errors`.\n-    pub fn check_region_obligations_and_report_errors(\n-        &self,\n-        generic_param_scope: LocalDefId,\n-        outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) -> Result<(), ErrorGuaranteed> {\n-        self.process_registered_region_obligations(\n-            outlives_env.region_bound_pairs(),\n-            outlives_env.param_env,\n-        );\n-\n-        self.err_ctxt().resolve_regions_and_report_errors(generic_param_scope, outlives_env)\n-    }\n }\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`"}]}