{"sha": "03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjIwZGJhMjUzMjhlZThjYzczMTZjZjZkOWJhZDJkMGExMThiYTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-16T22:54:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-16T22:54:59Z"}, "message": "Use resizable Vec instead of P<[T]> in AST", "tree": {"sha": "36d4e35e2c6196f64147a2d9f5bc897ff30da076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36d4e35e2c6196f64147a2d9f5bc897ff30da076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "html_url": "https://github.com/rust-lang/rust/commit/03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efe865d22eb85871562b2497ac819efc0174a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efe865d22eb85871562b2497ac819efc0174a3d", "html_url": "https://github.com/rust-lang/rust/commit/2efe865d22eb85871562b2497ac819efc0174a3d"}], "stats": {"total": 95, "additions": 38, "deletions": 57}, "files": [{"sha": "ee6f91bd41493b9115b5a3a62554d18e40cb7971", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -596,7 +596,7 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_ty_params(&mut self, tps: &P<[TyParam]>, add_bounds: &NodeMap<Vec<TyParamBound>>)\n+    fn lower_ty_params(&mut self, tps: &Vec<TyParam>, add_bounds: &NodeMap<Vec<TyParamBound>>)\n                        -> hir::HirVec<hir::TyParam> {\n         tps.iter().map(|tp| {\n             self.lower_ty_param(tp, add_bounds.get(&tp.id).map_or(&[][..], |x| &x))"}, {"sha": "2d7dfe50415d3f82f23df192e54315362d368d54", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -204,11 +204,11 @@ pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    pub types: P<[P<Ty>]>,\n+    pub types: Vec<P<Ty>>,\n     /// Bindings (equality constraints) on associated types, if present.\n     ///\n     /// E.g., `Foo<A=Bar>`.\n-    pub bindings: P<[TypeBinding]>,\n+    pub bindings: Vec<TypeBinding>,\n }\n \n impl Into<Option<P<PathParameters>>> for AngleBracketedParameterData {\n@@ -297,7 +297,7 @@ pub enum TraitBoundModifier {\n     Maybe,\n }\n \n-pub type TyParamBounds = P<[TyParamBound]>;\n+pub type TyParamBounds = Vec<TyParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n@@ -314,7 +314,7 @@ pub struct TyParam {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n-    pub ty_params: P<[TyParam]>,\n+    pub ty_params: Vec<TyParam>,\n     pub where_clause: WhereClause,\n     pub span: Span,\n }\n@@ -344,7 +344,7 @@ impl Default for Generics {\n     fn default() ->  Generics {\n         Generics {\n             lifetimes: Vec::new(),\n-            ty_params: P::new(),\n+            ty_params: Vec::new(),\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "b234677f544771b7ad06421508985234423db152", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -67,9 +67,6 @@ pub trait AstBuilder {\n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;\n     fn ty_infer(&self, sp: Span) -> P<ast::Ty>;\n \n-    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;\n-    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;\n-\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n@@ -333,8 +330,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         } else {\n             Some(P(ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n                 lifetimes: lifetimes,\n-                types: P::from_vec(types),\n-                bindings: P::from_vec(bindings),\n+                types: types,\n+                bindings: bindings,\n             })))\n         };\n         segments.push(ast::PathSegment { identifier: last_identifier, parameters: parameters });\n@@ -369,8 +366,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let mut path = trait_path;\n         let parameters = ast::AngleBracketedParameterData {\n             lifetimes: lifetimes,\n-            types: P::from_vec(types),\n-            bindings: P::from_vec(bindings),\n+            types: types,\n+            bindings: bindings,\n         };\n         path.segments.push(ast::PathSegment {\n             identifier: ident,\n@@ -458,20 +455,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    // these are strange, and probably shouldn't be used outside of\n-    // pipes. Specifically, the global version possible generates\n-    // incorrect code.\n-    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> {\n-        ty_params.iter().map(|p| self.ty_ident(DUMMY_SP, p.ident)).collect()\n-    }\n-\n-    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> {\n-        ty_params\n-            .iter()\n-            .map(|p| self.ty_path(self.path_global(DUMMY_SP, vec![p.ident])))\n-            .collect()\n-    }\n-\n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef {\n         ast::TraitRef {\n             path: path,"}, {"sha": "2acf1c8f8fb4945d30dfcd866ce2fbc96aa41bfb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -225,7 +225,7 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_ty_params(&mut self, tps: P<[TyParam]>) -> P<[TyParam]> {\n+    fn fold_ty_params(&mut self, tps: Vec<TyParam>) -> Vec<TyParam> {\n         noop_fold_ty_params(tps, self)\n     }\n \n@@ -674,8 +674,7 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n     }\n }\n \n-pub fn noop_fold_ty_params<T: Folder>(tps: P<[TyParam]>, fld: &mut T)\n-                                      -> P<[TyParam]> {\n+pub fn noop_fold_ty_params<T: Folder>(tps: Vec<TyParam>, fld: &mut T) -> Vec<TyParam> {\n     tps.move_map(|tp| fld.fold_ty_param(tp))\n }\n "}, {"sha": "1a1950dc45c619faf63c4626bccccd9345a959b7", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -847,7 +847,7 @@ mod tests {\n                                     Abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),\n-                                        ty_params: P::new(),\n+                                        ty_params: Vec::new(),\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),"}, {"sha": "b5063528d03322a051dc439496e76458bcb10d96", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -685,7 +685,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_before_gt_or_return<T, F>(&mut self,\n                                                   sep: Option<token::Token>,\n                                                   mut f: F)\n-                                                  -> PResult<'a, (P<[T]>, bool)>\n+                                                  -> PResult<'a, (Vec<T>, bool)>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, Option<T>>,\n     {\n         let mut v = Vec::new();\n@@ -706,7 +706,7 @@ impl<'a> Parser<'a> {\n             if i % 2 == 0 {\n                 match f(self)? {\n                     Some(result) => v.push(result),\n-                    None => return Ok((P::from_vec(v), true))\n+                    None => return Ok((v, true))\n                 }\n             } else {\n                 if let Some(t) = sep.as_ref() {\n@@ -715,15 +715,15 @@ impl<'a> Parser<'a> {\n \n             }\n         }\n-        return Ok((P::from_vec(v), false));\n+        return Ok((v, false));\n     }\n \n     /// Parse a sequence bracketed by '<' and '>', stopping\n     /// before the '>'.\n     pub fn parse_seq_to_before_gt<T, F>(&mut self,\n                                         sep: Option<token::Token>,\n                                         mut f: F)\n-                                        -> PResult<'a, P<[T]>> where\n+                                        -> PResult<'a, Vec<T>> where\n         F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         let (result, returned) = self.parse_seq_to_before_gt_or_return(sep,\n@@ -735,7 +735,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_gt<T, F>(&mut self,\n                                  sep: Option<token::Token>,\n                                  f: F)\n-                                 -> PResult<'a, P<[T]>> where\n+                                 -> PResult<'a, Vec<T>> where\n         F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         let v = self.parse_seq_to_before_gt(sep, f)?;\n@@ -746,7 +746,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_seq_to_gt_or_return<T, F>(&mut self,\n                                            sep: Option<token::Token>,\n                                            f: F)\n-                                           -> PResult<'a, (P<[T]>, bool)> where\n+                                           -> PResult<'a, (Vec<T>, bool)> where\n         F: FnMut(&mut Parser<'a>) -> PResult<'a, Option<T>>,\n     {\n         let (v, returned) = self.parse_seq_to_before_gt_or_return(sep, f)?;\n@@ -1039,11 +1039,11 @@ impl<'a> Parser<'a> {\n             let other_bounds = if self.eat(&token::BinOp(token::Plus)) {\n                 self.parse_ty_param_bounds()?\n             } else {\n-                P::new()\n+                Vec::new()\n             };\n             let all_bounds =\n                 Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n-                .chain(other_bounds.into_vec())\n+                .chain(other_bounds)\n                 .collect();\n             Ok(ast::TyKind::ObjectSum(all_bounds))\n         }\n@@ -1267,7 +1267,7 @@ impl<'a> Parser<'a> {\n             return Ok(lhs);\n         }\n \n-        let mut bounds = self.parse_ty_param_bounds()?.into_vec();\n+        let mut bounds = self.parse_ty_param_bounds()?;\n \n         // In type grammar, `+` is treated like a binary operator,\n         // and hence both L and R side are required.\n@@ -1327,7 +1327,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let sp = mk_sp(lo, self.prev_span.hi);\n-        let sum = TyKind::ObjectSum(bounds.into());\n+        let sum = TyKind::ObjectSum(bounds);\n         Ok(P(Ty {id: ast::DUMMY_NODE_ID, node: sum, span: sp}))\n     }\n \n@@ -1759,8 +1759,8 @@ impl<'a> Parser<'a> {\n                 let (lifetimes, types, bindings) = self.parse_generic_values_after_lt()?;\n                 ast::AngleBracketedParameterData {\n                     lifetimes: lifetimes,\n-                    types: P::from_vec(types),\n-                    bindings: P::from_vec(bindings),\n+                    types: types,\n+                    bindings: bindings,\n                 }.into()\n             } else if self.eat(&token::OpenDelim(token::Paren)) {\n                 let lo = self.prev_span.lo;\n@@ -1819,8 +1819,8 @@ impl<'a> Parser<'a> {\n                     identifier: identifier,\n                     parameters: ast::AngleBracketedParameterData {\n                         lifetimes: lifetimes,\n-                        types: P::from_vec(types),\n-                        bindings: P::from_vec(bindings),\n+                        types: types,\n+                        bindings: bindings,\n                     }.into(),\n                 });\n \n@@ -4192,7 +4192,7 @@ impl<'a> Parser<'a> {\n     fn parse_colon_then_ty_param_bounds(&mut self) -> PResult<'a, TyParamBounds>\n     {\n         if !self.eat(&token::Colon) {\n-            Ok(P::new())\n+            Ok(Vec::new())\n         } else {\n             self.parse_ty_param_bounds()\n         }\n@@ -4238,7 +4238,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        return Ok(P::from_vec(result));\n+        return Ok(result);\n     }\n \n     /// Matches typaram = IDENT (`?` unbound)? optbounds ( EQ ty )?\n@@ -4375,7 +4375,7 @@ impl<'a> Parser<'a> {\n \n         // If we found the `>`, don't continue.\n         if !returned {\n-            return Ok((lifetimes, types.into_vec(), Vec::new()));\n+            return Ok((lifetimes, types, Vec::new()));\n         }\n \n         // Then parse type bindings.\n@@ -4396,7 +4396,7 @@ impl<'a> Parser<'a> {\n                 });\n             }\n         )?;\n-        Ok((lifetimes, types.into_vec(), bindings.into_vec()))\n+        Ok((lifetimes, types, bindings))\n     }\n \n     fn forbid_lifetime(&mut self) -> PResult<'a, ()> {"}, {"sha": "c989aa59e8717ba7810bdb532b2bcfa0ae5aedbc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -1009,7 +1009,7 @@ impl<'a> State<'a> {\n             ast::TyKind::BareFn(ref f) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n-                    ty_params: P::new(),\n+                    ty_params: Vec::new(),\n                     where_clause: ast::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n@@ -2973,7 +2973,7 @@ impl<'a> State<'a> {\n         }\n         let generics = ast::Generics {\n             lifetimes: Vec::new(),\n-            ty_params: P::new(),\n+            ty_params: Vec::new(),\n             where_clause: ast::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),"}, {"sha": "ce64aef516f493eaf106a03fdfc4575ef3ad1ef9", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -507,9 +507,8 @@ impl<'a> TraitDef<'a> {\n             }\n         });\n \n-        let Generics { mut lifetimes, ty_params, mut where_clause, span } = self.generics\n+        let Generics { mut lifetimes, mut ty_params, mut where_clause, span } = self.generics\n             .to_generics(cx, self.span, type_ident, generics);\n-        let mut ty_params = ty_params.into_vec();\n \n         // Copy the lifetimes\n         lifetimes.extend(generics.lifetimes.iter().cloned());\n@@ -533,7 +532,7 @@ impl<'a> TraitDef<'a> {\n                 bounds.push((*declared_bound).clone());\n             }\n \n-            cx.typaram(self.span, ty_param.ident, vec![], P::from_vec(bounds), None)\n+            cx.typaram(self.span, ty_param.ident, vec![], bounds, None)\n         }));\n \n         // and similarly for where clauses\n@@ -596,7 +595,7 @@ impl<'a> TraitDef<'a> {\n                         span: self.span,\n                         bound_lifetimes: vec![],\n                         bounded_ty: ty,\n-                        bounds: P::from_vec(bounds),\n+                        bounds: bounds,\n                     };\n \n                     let predicate = ast::WherePredicate::BoundPredicate(predicate);\n@@ -607,7 +606,7 @@ impl<'a> TraitDef<'a> {\n \n         let trait_generics = Generics {\n             lifetimes: lifetimes,\n-            ty_params: P::from_vec(ty_params),\n+            ty_params: ty_params,\n             where_clause: where_clause,\n             span: span,\n         };"}, {"sha": "cfd52381538cb6808661071c0363dbf489551410", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03620dba25328ee8cc7316cf6d9bad2d0a118ba1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=03620dba25328ee8cc7316cf6d9bad2d0a118ba1", "patch": "@@ -212,7 +212,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, s\n                -> Generics {\n     Generics {\n         lifetimes: lifetimes,\n-        ty_params: P::from_vec(ty_params),\n+        ty_params: ty_params,\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),"}]}