{"sha": "ca17d0812686012307e364a4dce7b84af6886f91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTdkMDgxMjY4NjAxMjMwN2UzNjRhNGRjZTdiODRhZjY4ODZmOTE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T22:32:54Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:16Z"}, "message": "fix rpass tests", "tree": {"sha": "842b973e6d84b928431910cda850eec90992bd96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/842b973e6d84b928431910cda850eec90992bd96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca17d0812686012307e364a4dce7b84af6886f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca17d0812686012307e364a4dce7b84af6886f91", "html_url": "https://github.com/rust-lang/rust/commit/ca17d0812686012307e364a4dce7b84af6886f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca17d0812686012307e364a4dce7b84af6886f91/comments", "author": null, "committer": null, "parents": [{"sha": "8d0d7521d65eff290183e9d19858c6ca8779fe01", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0d7521d65eff290183e9d19858c6ca8779fe01", "html_url": "https://github.com/rust-lang/rust/commit/8d0d7521d65eff290183e9d19858c6ca8779fe01"}], "stats": {"total": 626, "additions": 212, "deletions": 414}, "files": [{"sha": "3b1857f9ccb698efb9c5a925cf979d488d596aff", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,12 +11,12 @@\n #![crate_name=\"cci_impl_lib\"]\n \n pub trait uint_helpers {\n-    fn to(&self, v: uint, f: |uint|);\n+    fn to<F>(&self, v: uint, f: F) where F: FnMut(uint);\n }\n \n impl uint_helpers for uint {\n     #[inline]\n-    fn to(&self, v: uint, f: |uint|) {\n+    fn to<F>(&self, v: uint, mut f: F) where F: FnMut(uint) {\n         let mut i = *self;\n         while i < v {\n             f(i);"}, {"sha": "3ba068df058b3d79003108ea03b9a60230675f56", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,7 +11,7 @@\n #![crate_name=\"cci_iter_lib\"]\n \n #[inline]\n-pub fn iter<T>(v: &[T], f: |&T|) {\n+pub fn iter<T, F>(v: &[T], mut f: F) where F: FnMut(&T) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "474925d8838b5214ea45ae3e2ab38709b2e18f6a", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -12,7 +12,7 @@\n \n \n // same as cci_iter_lib, more-or-less, but not marked inline\n-pub fn iter(v: Vec<uint> , f: |uint|) {\n+pub fn iter<F>(v: Vec<uint> , mut f: F) where F: FnMut(uint) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "690d5783c4bc2b6b7ca7a0ffab26696eb1a18fbd", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -12,12 +12,12 @@\n \n // part of issue-6919.rs\n \n-pub struct C<'a> {\n-    pub k: ||: 'a,\n+pub struct C<K> where K: FnOnce() {\n+    pub k: K,\n }\n \n fn no_op() { }\n-pub const D : C<'static> = C {\n-    k: no_op\n+pub const D : C<fn()> = C {\n+    k: no_op as fn()\n };\n "}, {"sha": "c2820a8d4ae5de075ec0896941cfdcec7229ffef", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -21,7 +21,6 @@ pub mod testtypes {\n         ids.push(TypeId::of::<FooEnum>());\n         ids.push(TypeId::of::<FooUniq>());\n         ids.push(TypeId::of::<FooPtr>());\n-        ids.push(TypeId::of::<FooClosure>());\n         ids.push(TypeId::of::<&'static FooTrait>());\n         ids.push(TypeId::of::<FooStruct>());\n         ids.push(TypeId::of::<FooTuple>());\n@@ -68,9 +67,6 @@ pub mod testtypes {\n \n     // Skipping ty_bare_fn (how do you get a bare function type, rather than proc or closure?)\n \n-    // Tests ty_closure (does not test all types of closures)\n-    pub type FooClosure = |arg: u8|: 'static -> u8;\n-\n     // Tests ty_trait\n     pub trait FooTrait {\n         fn foo_method(&self) -> uint;"}, {"sha": "399dfb9fa9a5bbc40bf6c955abfd089ea41ee421", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,5 +13,5 @@\n \n pub fn foo<T>() {\n     fn death() -> int { panic!() }\n-    debug!(\"{}\", (||{ death() })());\n+    debug!(\"{}\", (|&:|{ death() })());\n }"}, {"sha": "dfce311529028c49d02e0ff9a62afe770e50e9ea", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -20,7 +20,7 @@ fn f1(a: &mut X, b: &mut int, c: int) -> int {\n     return r;\n }\n \n-fn f2(a: int, f: |int|) -> int { f(1); return a; }\n+fn f2<F>(a: int, f: F) -> int where F: FnOnce(int) { f(1); return a; }\n \n pub fn main() {\n     let mut a = X {x: 1};"}, {"sha": "ed471ed0079e3c5cd21166e7fbd7e47c397ffb9a", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,11 +11,11 @@\n \n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n \n-fn g(act: |Vec<int> | -> int) -> int { return act(vec!(1, 2, 3)); }\n+fn g<F>(act: F) -> int where F: FnOnce(Vec<int>) -> int { return act(vec!(1, 2, 3)); }\n \n pub fn main() {\n     assert_eq!(g(f), 1);\n-    let f1: |Vec<String>| -> String = f;\n+    let f1 = f;\n     assert_eq!(f1(vec![\"x\".to_string(), \"y\".to_string(), \"z\".to_string()]),\n                \"x\".to_string());\n }"}, {"sha": "6c54f33fbe6c927e26a25d0a846748351ca34723", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn asBlock(f: || -> uint) -> uint {\n+fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n    return f();\n }\n "}, {"sha": "54b650d762bf46b2af5c0fa7c9004057c1d92e87", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    fn as_buf<T>(s: String, f: |String| -> T) -> T { f(s) }\n+    fn as_buf<T, F>(s: String, f: F) -> T where F: FnOnce(String) -> T { f(s) }\n     as_buf(\"foo\".to_string(), |foo: String| -> () println!(\"{}\", foo) );\n }"}, {"sha": "fe52b1a693cdcb9f76f71ac95c94fcb7450f5f05", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: || -> int) -> int { return f(); }\n+fn force<F>(f: F) -> int where F: FnOnce() -> int { return f(); }\n+\n pub fn main() {\n     fn f() -> int { return 7; }\n     assert_eq!(force(f), 7);\n-    let g = {||force(f)};\n+    let g = {|&:|force(f)};\n     assert_eq!(g(), 7);\n }"}, {"sha": "972bde5f29a0d0f78ceff1cdf35940606d16b57c", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T, F>(v: Vec<T> , mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = vec!(1i, 2, 3, 4, 5, 6, 7);"}, {"sha": "1032fb486a1ed08f94f217a634e50c561024458c", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T, F>(v: Vec<T>, mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = vec!(1i, 2, 3, 4, 5);"}, {"sha": "038f9e5c9ab43b7c94e781e08e63296c4f7d6e7d", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn borrow(x: &int, f: |x: &int|) {\n+fn borrow<F>(x: &int, f: F) where F: FnOnce(&int) {\n     f(x)\n }\n "}, {"sha": "33e4294366f075f93ccc05fb6a60f57e6dd38bca", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -15,10 +15,10 @@\n // the closures are in scope. Issue #6801.\n \n fn a() -> int {\n-    let mut x = 3;\n+    let mut x = 3i;\n     x += 1;\n-    let c1 = || x * 4;\n-    let c2 = || x * 5;\n+    let c1 = |&:| x * 4;\n+    let c2 = |&:| x * 5;\n     c1() * c2() * x\n }\n \n@@ -29,16 +29,16 @@ fn get(x: &int) -> int {\n fn b() -> int {\n     let mut x = 3;\n     x += 1;\n-    let c1 = || get(&x);\n-    let c2 = || get(&x);\n+    let c1 = |&:| get(&x);\n+    let c2 = |&:| get(&x);\n     c1() * c2() * x\n }\n \n fn c() -> int {\n     let mut x = 3;\n     x += 1;\n-    let c1 = || x * 5;\n-    let c2 = || get(&x);\n+    let c1 = |&:| x * 5;\n+    let c2 = |&:| get(&x);\n     c1() * c2() * x\n }\n "}, {"sha": "dac8945b6e828f850352afb4f5eda3c00f9f266e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -21,7 +21,7 @@ fn add_int(x: &mut Ints, v: int) {\n     swap(&mut values, &mut x.values);\n }\n \n-fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n+fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n     let l = x.values.len();\n     range(0u, l).all(|i| f(&x.values[i]))\n }"}, {"sha": "032bb83d3ab500821deb40614d6dc17a6d68a876", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test FIXME(japaric) this ICEs\n \n fn foo() -> int { 22 }\n "}, {"sha": "6e8ed4fd5a15a3bca26550b7d8f61e321487a9f7", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn each<T>(x: &[T], f: |&T|) {\n+fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n     for val in x.iter() {\n         f(val)\n     }"}, {"sha": "893003dd997226171d8ce39966524097eb9bae40", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,9 +11,9 @@\n \n fn foo(i: int) -> int { i + 1 }\n \n-fn apply<A>(f: |A| -> A, v: A) -> A { f(v) }\n+fn apply<A, F>(f: F, v: A) -> A where F: FnOnce(A) -> A { f(v) }\n \n pub fn main() {\n-    let f = {|i| foo(i)};\n+    let f = {|: i| foo(i)};\n     assert_eq!(apply(f, 2), 3);\n }"}, {"sha": "03b10b881f7ae95004971490d64d7d8070a30141", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,7 +11,7 @@\n // Test a rather underspecified example:\n \n pub fn main() {\n-    let f = {|i| i};\n+    let f = {|&: i| i};\n     assert_eq!(f(2i), 2i);\n     assert_eq!(f(5i), 5i);\n }"}, {"sha": "a2e7d7bd7e3e3137ec7ba288be539c742ac0953f", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -22,25 +22,14 @@ fn call_it<F>(f: F)\n     println!(\"{}\", f(\"Fred\".to_string()))\n }\n \n-fn call_a_thunk(f: ||) {\n+fn call_a_thunk<F>(f: F) where F: FnOnce() {\n     f();\n }\n \n-fn call_this(f: |&str|:Send) {\n+fn call_this<F>(f: F) where F: FnOnce(&str) + Send {\n     f(\"Hello!\");\n }\n \n-fn call_that(f: <'a>|&'a int, &'a int| -> int) {\n-    let (ten, forty_two) = (10, 42);\n-    println!(\"Your lucky number is {}\", f(&ten, &forty_two));\n-}\n-\n-fn call_cramped(f:||->uint,g:<'a>||->&'a uint) {\n-    let number = f();\n-    let other_number = *g();\n-    println!(\"Ticket {} wins an all-expenses-paid trip to Mountain View\", number + other_number);\n-}\n-\n fn call_bare(f: fn(&str)) {\n     f(\"Hello world!\")\n }\n@@ -71,16 +60,6 @@ pub fn main() {\n \n     call_this(|s| println!(\"{}\", s));\n \n-    call_that(|x, y| *x + *y);\n-\n-    let z = 100;\n-    call_that(|x, y| *x + *y - z);\n-\n-    call_cramped(|| 1, || unsafe {\n-        static a: uint = 100;\n-        mem::transmute(&a)\n-    });\n-\n     // External functions\n \n     call_bare(println);"}, {"sha": "9b4033ae0d7221ddec9828abbc7367d215b5e675", "filename": "src/test/run-pass/closure-return-bang.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fclosure-return-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fclosure-return-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-return-bang.rs?ref=8d0d7521d65eff290183e9d19858c6ca8779fe01", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-\n-fn f(x: || -> !) -> ! {\n-    x();\n-}\n-\n-fn main() {\n-    let x: || -> ! = || panic!();\n-    let _y: || -> ! = || x();\n-}"}, {"sha": "4caa234ac7ae325688aba6005c35beaa612b7101", "filename": "src/test/run-pass/closure-syntax.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=8d0d7521d65eff290183e9d19858c6ca8779fe01", "patch": "@@ -1,79 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![feature(unboxed_closures)]\n-\n-// compile-flags:-g\n-\n-fn foo<T>() {}\n-\n-trait Bar3 {}\n-impl<'b> Bar3 for <'a>|&'a int|: 'b + Send -> &'a int {}\n-\n-struct Foo<'a> {\n-    a: ||: 'a,\n-    b: ||: 'static,\n-    c: <'b>||: 'a,\n-    d: ||: 'a + Sync,\n-    e: <'b>|int|: 'a + Sync -> &'b f32,\n-}\n-\n-fn f<'a>(a: &'a int, f: <'b>|&'b int| -> &'b int) -> &'a int {\n-    f(a)\n-}\n-\n-fn g<'a>(a: &'a int) -> &'a int {\n-    a\n-}\n-\n-struct A;\n-\n-impl A {\n-    fn foo<T>(&self) {}\n-}\n-\n-fn bar<'b>() {\n-    foo::<||>();\n-    foo::<|| -> ()>();\n-    foo::<||:>();\n-    foo::<||:'b>();\n-    foo::<||:'b + Sync>();\n-    foo::<||:Sync>();\n-    foo::< <'a>|int, f32, &'a int|:'b + Sync -> &'a int>();\n-\n-    foo::<<'a>||>();\n-\n-    // issue #11209\n-    let _: ||: 'b; // for comparison\n-    let _: <'a> ||;\n-\n-    let _: Option<||:'b>;\n-    let _: Option<<'a>||>;\n-    let _: Option< <'a>||>;\n-\n-    // issue #11210\n-    let _: ||: 'static;\n-\n-    let a = A;\n-    a.foo::<<'a>||>();\n-\n-    // issue #13490\n-    let _ = || -> ! loop {};\n-\n-    // issue #17021\n-    let c = box |&:| {};\n-}\n-\n-struct B<T>;\n-impl<'b> B<<'a>||: 'b> {}\n-\n-pub fn main() {\n-}"}, {"sha": "413717d9226ba535ec1ad1518fad8f248bee1cd5", "filename": "src/test/run-pass/coerce-to-closure-and-proc.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs?ref=8d0d7521d65eff290183e9d19858c6ca8779fe01", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unboxed_closures)]\n-\n-fn id<T>(x: T) -> T {\n-    x\n-}\n-\n-#[derive(PartialEq, Show)]\n-struct Foo<T>(T);\n-\n-#[derive(PartialEq, Show)]\n-enum Bar<T> {\n-    Baz(T)\n-}\n-\n-pub fn main() {\n-    let f: |int| -> int = id;\n-    assert_eq!(f(5), 5);\n-\n-    let f: |int| -> Foo<int> = Foo;\n-    assert_eq!(f(5), Foo(5));\n-\n-    let f: |int| -> Bar<int> = Bar::Baz;\n-    assert_eq!(f(5), Bar::Baz(5));\n-\n-    let f: |int| -> Option<int> = Some;\n-    assert_eq!(f(5), Some(5));\n-}"}, {"sha": "8394c53cba5cb44c19da054f3a99ce9dc51075d2", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -12,9 +12,9 @@ fn foo() -> int {\n     return 0xca7f000d;\n }\n \n-struct Bar<'a> { f: ||: 'a -> int }\n+struct Bar<F> where F: FnMut() -> int { f: F }\n \n-static mut b : Bar<'static> = Bar { f: foo };\n+static mut b : Bar<fn() -> int> = Bar { f: foo as fn() -> int};\n \n pub fn main() {\n     unsafe { assert_eq!((b.f)(), 0xca7f000d); }"}, {"sha": "f21f7d1903cf3fd3a847ab38d2876ddaaf6be72f", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -17,8 +17,8 @@\n \n fn f() { }\n static bare_fns: &'static [fn()] = &[f, f];\n-struct S<'a>(||:'a);\n-static mut closures: &'static mut [S<'static>] = &mut [S(f), S(f)];\n+struct S<F: FnOnce()>(F);\n+static mut closures: &'static mut [S<fn()>] = &mut [S(f as fn()), S(f as fn())];\n \n pub fn main() {\n     unsafe {"}, {"sha": "d9201746440854f124d23df14fe344a699f87527", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -25,6 +25,6 @@ fn wrapper3(i: chan) {\n }\n \n pub fn main() {\n-    let wrapped = {||wrapper3(chan::chan_t)};\n+    let wrapped = {|&:|wrapper3(chan::chan_t)};\n     wrapped();\n }"}, {"sha": "797c26556aaa1aa3de97fa7521ad350764e1d73f", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -19,9 +19,6 @@ use std::sync::Arc;\n trait Trait {}\n \n fn main() {\n-    // Closures - ||\n-    assert_eq!(size_of::<||>(), size_of::<Option<||>>());\n-\n     // Functions\n     assert_eq!(size_of::<fn(int)>(), size_of::<Option<fn(int)>>());\n     assert_eq!(size_of::<extern \"C\" fn(int)>(), size_of::<Option<extern \"C\" fn(int)>>());"}, {"sha": "ed246e2cb7d7bd6008b8f2345bf2a0a00bf25239", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,9 +11,8 @@\n \n \n fn test_fn() {\n-    type t = ||: 'static -> int;\n     fn ten() -> int { return 10; }\n-    let rs: t = ten;\n+    let rs = ten;\n     assert!((rs() == 10));\n }\n "}, {"sha": "5c1039fe4336883b64c59291f0f1a7923b741ad4", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |Box<T>, Box<T>|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: Box<T>, eq: compare<T>) {\n+fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_box() {\n@@ -22,7 +19,7 @@ fn test_box() {\n         println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n-    test_generic::<bool>(box true, compare_box);\n+    test_generic::<bool, _>(box true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "3d736cca6d524464085e48bea819edef5ba97ef4", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_vec() {\n     fn compare_vec(v1: Box<int>, v2: Box<int>) -> bool { return v1 == v2; }\n-    test_generic::<Box<int>>(box 1, compare_vec);\n+    test_generic::<Box<int>, _>(box 1, compare_vec);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "91b847d47cbcc679d6b9efda3c59594a2a674524", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,19 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-// Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_bool() {\n     fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n-    test_generic::<bool>(true, compare_bool);\n+    test_generic::<bool, _>(true, compare_bool);\n }\n \n #[derive(Clone)]\n@@ -33,7 +28,7 @@ fn test_rec() {\n     fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<Pair>(Pair {a: 1, b: 2}, compare_rec);\n+    test_generic::<Pair, _>(Pair {a: 1, b: 2}, compare_rec);\n }\n \n pub fn main() { test_bool(); test_rec(); }"}, {"sha": "fb2a120e6f4a17d839b2cccc2ca2736437deb667", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// Tests for if as expressions with dynamic type sizes\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<T, F>(expected: T, not_expected: T, eq: F) where\n+    T: Clone,\n+    F: FnOnce(T, T) -> bool,\n+{\n     let actual: T = if true { expected.clone() } else { not_expected };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_bool() {\n     fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n-    test_generic::<bool>(true, false, compare_bool);\n+    test_generic::<bool, _>(true, false, compare_bool);\n }\n \n #[derive(Clone)]\n@@ -32,7 +31,7 @@ fn test_rec() {\n     fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<Pair>(Pair{a: 1, b: 2}, Pair{a: 2, b: 3}, compare_rec);\n+    test_generic::<Pair, _>(Pair{a: 1, b: 2}, Pair{a: 2, b: 3}, compare_rec);\n }\n \n pub fn main() { test_bool(); test_rec(); }"}, {"sha": "5fc9a502ca8a0e54f0c488e0958bb1f375189659", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,22 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<T> = |Box<T>, Box<T>|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: Box<T>, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = match true {\n         true => { expected.clone() },\n         _ => panic!(\"wat\")\n     };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_box() {\n     fn compare_box(b1: Box<bool>, b2: Box<bool>) -> bool {\n         return *b1 == *b2;\n     }\n-    test_generic::<bool>(box true, compare_box);\n+    test_generic::<bool, _>(box true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "e608f9c46c79c1fff1f2920f8c82a80e25e1e5fc", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,20 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = match true {\n         true => expected.clone(),\n         _ => panic!(\"wat\")\n     };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_vec() {\n     fn compare_box(v1: Box<int>, v2: Box<int>) -> bool { return v1 == v2; }\n-    test_generic::<Box<int>>(box 1, compare_box);\n+    test_generic::<Box<int>, _>(box 1, compare_box);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "09508b9b136296423ce4e78f4bdbcf0173b79b0c", "filename": "src/test/run-pass/fn-bare-coerce-to-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,7 +10,7 @@\n \n fn bare() {}\n \n-fn likes_block(f: ||) { f() }\n+fn likes_block<F>(f: F) where F: FnOnce() { f() }\n \n pub fn main() {\n     likes_block(bare);"}, {"sha": "bf6926050ba96b2f780a885a1b96de8dfb06e8ed", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct r<'a> {\n-    field: ||: 'a,\n+struct r<F> where F: FnOnce() {\n+    field: F,\n }\n \n pub fn main() {\n     fn f() {}\n-    let _i: r = r {field: f};\n+    let _i: r<fn()> = r {field: f as fn()};\n }"}, {"sha": "24bf1f94d887b49fe156fe0bbb8e0e85d2ab97c8", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let f: |(int,int)| = |(x, y)| {\n+    let f = |&: (x, y): (int, int)| {\n         assert_eq!(x, 1);\n         assert_eq!(y, 2);\n     };"}, {"sha": "ae22ff5cce03526d28e5a499c1c7c2991b71b81d", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     // We should be able to type infer inside of ||s.\n-    let _f = || {\n+    let _f = |&:| {\n         let i = 10i;\n     };\n }"}, {"sha": "f6466994955e79e537a65dd8779a46f2e079781b", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn two(it: |int|) { it(0); it(1); }\n+fn two<F>(mut it: F) where F: FnMut(int) { it(0); it(1); }\n \n pub fn main() {\n     let mut a: Vec<int> = vec!(-1, -1, -1, -1);"}, {"sha": "029dddb7a21109734d92a3f14d05dc7f6cb0da24", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn pairs(it: |(int, int)|) {\n+fn pairs<F>(mut it: F) where F: FnMut((int, int)) {\n     let mut i: int = 0;\n     let mut j: int = 0;\n     while i < 10 { it((i, j)); i += 1; j += i; }"}, {"sha": "9ccb2dd56cfdcd20ecc7b2df910c038d60e956c7", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     assert_eq!(sum, 45);\n }\n \n-fn first_ten(it: |int|) {\n+fn first_ten<F>(mut it: F) where F: FnMut(int) {\n     let mut i: int = 0;\n     while i < 10 { println!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "3955bedb168aeb373fad6b1ce6fae029b18a0e37", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: |int| -> int) -> int { let n: int = f(3); return n; }\n+fn ho<F>(f: F) -> int where F: FnOnce(int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "f992847e4e9f6b093b92614cd17022f96ebf825c", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,11 +10,11 @@\n \n \n trait vec_utils<T> {\n-    fn map_<U>(x: &Self, f: |&T| -> U) -> Vec<U> ;\n+    fn map_<U, F>(x: &Self, f: F) -> Vec<U> where F: FnMut(&T) -> U;\n }\n \n impl<T> vec_utils<T> for Vec<T> {\n-    fn map_<U>(x: &Vec<T> , f: |&T| -> U) -> Vec<U> {\n+    fn map_<U, F>(x: &Vec<T> , mut f: F) -> Vec<U> where F: FnMut(&T) -> U {\n         let mut r = Vec::new();\n         for elt in x.iter() {\n             r.push(f(elt));"}, {"sha": "a8ecc2decd08af887b8e98a24227bdefd4e1fad1", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,14 +9,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n \n    This originally came from the word-count benchmark.\n */\n \n-pub fn map(filename: String, emit: map_reduce::putter) {\n-    emit(filename, \"1\".to_string());\n+pub fn map(filename: String, mut emit: map_reduce::putter) {\n+    emit.call_mut((filename, \"1\".to_string(),));\n }\n \n mod map_reduce {\n@@ -25,7 +27,7 @@ mod map_reduce {\n     use std::str;\n     use std::thread::Thread;\n \n-    pub type putter<'a> = |String, String|: 'a;\n+    pub type putter<'a> = Box<FnMut(String, String) + 'a>;\n \n     pub type mapper = extern fn(String, putter);\n \n@@ -58,7 +60,7 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        ::map(input, |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n+        ::map(input, box |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n         ctrl_clone.send(ctrl_proto::mapper_done).unwrap();\n     }\n "}, {"sha": "9e857a33245d16be5b060469a0d0a548e8a3ddc0", "filename": "src/test/run-pass/hrtb-debruijn-object-types-in-closures.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,8 +13,7 @@ trait Typer<'tcx> {\n     fn dummy(&self) { }\n }\n \n-fn g(_: |&Typer|) {\n-}\n+fn g<F>(_: F) where F: FnOnce(&Typer) {}\n \n fn h() {\n     g(|typer| typer.dummy())"}, {"sha": "41b7c0fae0746d165e80c29e4e759ba1c23d979a", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -40,8 +40,5 @@ fn foo21(t: for<'a> unsafe fn(int) -> int) { }\n fn foo22(t: for<'a> extern \"C\" fn(int) -> int) { }\n fn foo23(t: for<'a> unsafe extern \"C\" fn(int) -> int) { }\n \n-fn foo30(t: for<'a> |int| -> int) { }\n-fn foo31(t: for<'a> unsafe |int| -> int) { }\n-\n fn main() {\n }"}, {"sha": "c90c3643d4e54f8dd5d301ad635b662260f903c0", "filename": "src/test/run-pass/hrtb-trait-object-passed-to-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -23,7 +23,7 @@ struct NoAnn<'ast> {\n impl<'ast> PrinterSupport<'ast> for NoAnn<'ast> {\n }\n \n-fn foo<'ast> (f: Option<&'ast uint>, g: |&PrinterSupport|) {\n+fn foo<'ast, G>(f: Option<&'ast uint>, g: G) where G: FnOnce(&PrinterSupport) {\n     let annotation = NoAnn { f: f };\n     g(&annotation)\n }"}, {"sha": "e5fd17e2dfed0017791c9b0c81276c79fbd2c4c1", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -15,7 +15,7 @@ trait Repro {\n   fn repro(self, s: MyStruct) -> String;\n }\n \n-impl Repro for |MyStruct|:'static -> String {\n+impl<F> Repro for F where F: FnOnce(MyStruct) -> String {\n   fn repro(self, s: MyStruct) -> String {\n     self(s)\n   }\n@@ -26,5 +26,5 @@ fn do_stuff<R: Repro>(r: R) -> String {\n }\n \n pub fn main() {\n-  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{}\", s)));\n+  assert_eq!(\"MyStruct\".to_string(), do_stuff(|: s: MyStruct| format!(\"{}\", s)));\n }"}, {"sha": "4d150e7a68e7cf5dc21dd1f31a1f4ef947a771b1", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -24,7 +24,6 @@ pub fn type_ids() -> Vec<TypeId> {\n     ids.push(TypeId::of::<testtypes::FooEnum>());\n     ids.push(TypeId::of::<testtypes::FooUniq>());\n     ids.push(TypeId::of::<testtypes::FooPtr>());\n-    ids.push(TypeId::of::<testtypes::FooClosure>());\n     ids.push(TypeId::of::<&'static testtypes::FooTrait>());\n     ids.push(TypeId::of::<testtypes::FooStruct>());\n     ids.push(TypeId::of::<testtypes::FooTuple>());"}, {"sha": "c0652b946dbe580b5a1711738b46dc39c23aa187", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct Foo<'a> {\n-    listener: ||: 'a\n+    listener: Box<FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {\n-    fn new(listener: ||: 'a) -> Foo<'a> {\n-        Foo { listener: listener }\n+    fn new<F>(listener: F) -> Foo<'a> where F: FnMut() + 'a {\n+        Foo { listener: box listener }\n     }\n }\n "}, {"sha": "2091a5437c2dcbcedb31a10c25428b8deb553773", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,5 +10,5 @@\n \n \n pub fn main() {\n-    {|i| if 1i == i { }};\n+    {|&: i| if 1i == i { }};\n }"}, {"sha": "d5590e99f2cb994ac6f9f8c814062dc630d4d55b", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -16,7 +16,7 @@ trait Matcher {\n \n struct CharPredMatcher<'a, 'b> {\n     str: &'a str,\n-    pred: |char|:'b -> bool\n+    pred: Box<FnMut(char) -> bool + 'b>,\n }\n \n impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {\n@@ -29,11 +29,11 @@ trait IntoMatcher<'a, T> {\n     fn into_matcher(self, &'a str) -> T;\n }\n \n-impl<'a, 'b> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for |char|:'b -> bool {\n+impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {\n     fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n         CharPredMatcher {\n             str: s,\n-            pred: self\n+            pred: box self,\n         }\n     }\n }\n@@ -57,6 +57,6 @@ fn match_indices<'a, M, T: IntoMatcher<'a, M>>(s: &'a str, from: T) -> MatchIndi\n \n fn main() {\n     let s = \"abcbdef\";\n-    match_indices(s, |c: char| c == 'b')\n+    match_indices(s, |&mut: c: char| c == 'b')\n         .collect::<Vec<(uint, uint)>>();\n }"}, {"sha": "3c5af9ca032c100df1112e981c02075ff253f3f7", "filename": "src/test/run-pass/issue-1516.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0d7521d65eff290183e9d19858c6ca8779fe01/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=8d0d7521d65eff290183e9d19858c6ca8779fe01", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    let early_error: |&str|: 'static -> ! = |_msg| { panic!() };\n-}"}, {"sha": "e7422e233a62903385b1a0b8823eb7c6de44b47d", "filename": "src/test/run-pass/issue-16256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16256.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let mut buf = Vec::new();\n-    |c: u8| buf.push(c);\n+    |&mut: c: u8| buf.push(c);\n }"}, {"sha": "120ada96c15b731c932c0f5e74f680ddb94556c2", "filename": "src/test/run-pass/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2074.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,11 +11,11 @@\n #![allow(non_camel_case_types)]\n \n pub fn main() {\n-    let one: || -> uint = || {\n+    let one = |&:| {\n         enum r { a };\n         r::a as uint\n     };\n-    let two: || -> uint = || {\n+    let two = |&:| {\n         enum r { a };\n         r::a as uint\n     };"}, {"sha": "aa61d52b2a32d4b1648d3eca2c897ffaac72962a", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -29,7 +29,7 @@ fn socket() -> socket {\n     }\n }\n \n-fn closure(f: ||) { f() }\n+fn closure<F>(f: F) where F: FnOnce() { f() }\n \n fn setsockopt_bytes(_sock: int) { }\n "}, {"sha": "72cf2219bb6f090963d453bcf8771f80a1750e4c", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-type Connection = |Vec<u8>|: 'static;\n+type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = |_| {};\n+    let mock_connection: Connection = box |&mut: _| {};\n     Some(mock_connection)\n }\n "}, {"sha": "60c53450004363917843728b96dda31d397ed800", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let x = 1;\n-  let y: || -> int = || x;\n+  let x = 1u;\n+  let y = |&:| x;\n   let _z = y();\n }"}, {"sha": "9226bebd2dcea424a93b4d919480c729d39bad59", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,7 +10,7 @@\n \n enum PureCounter { PureCounterVariant(uint) }\n \n-fn each(thing: PureCounter, blk: |v: &uint|) {\n+fn each<F>(thing: PureCounter, blk: F) where F: FnOnce(&uint) {\n     let PureCounter::PureCounterVariant(ref x) = thing;\n     blk(x);\n }"}, {"sha": "e917ecc745f0ba3f6d47ccdf8588e62bc50fe2c3", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,21 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ErrPrinter<'a> = |&str, &str|: 'a;\n-\n fn example_err(prog: &str, arg: &str) {\n     println!(\"{}: {}\", prog, arg)\n }\n \n-fn exit(print: ErrPrinter, prog: &str, arg: &str) {\n+fn exit<F>(print: F, prog: &str, arg: &str) where F: FnOnce(&str, &str) {\n     print(prog, arg);\n }\n \n-struct X<'a> {\n-    err: ErrPrinter<'a>\n+struct X<F> where F: FnOnce(&str, &str) {\n+    err: F,\n }\n \n-impl<'a> X<'a> {\n+impl<F> X<F> where F: FnOnce(&str, &str) {\n     pub fn boom(self) {\n         exit(self.err, \"prog\", \"arg\");\n     }"}, {"sha": "69255c576811fd075b8c5b039e276f92a75e950f", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #5239\n \n pub fn main() {\n-    let _f: |int| -> int = |ref x: int| { *x };\n+    let _f = |&: ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);\n }"}, {"sha": "b2b64e62c39a4d645043b54ceb800ac56d185ffc", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn swap(f: |Vec<int> | -> Vec<int> ) -> Vec<int> {\n+fn swap<F>(f: F) -> Vec<int> where F: FnOnce(Vec<int>) -> Vec<int> {\n     let x = vec!(1, 2, 3);\n     f(x)\n }"}, {"sha": "07c7c6888e1ebdb4780246c8c35c016d86179722", "filename": "src/test/run-pass/issue-6157.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6157.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait OpInt<'a> { fn call(&mut self, int, int) -> int; }\n+pub trait OpInt { fn call(&mut self, int, int) -> int; }\n \n-impl<'a> OpInt<'a> for |int, int|: 'a -> int {\n+impl<F> OpInt for F where F: FnMut(int, int) -> int {\n     fn call(&mut self, a:int, b:int) -> int {\n         (*self)(a, b)\n     }\n@@ -21,7 +21,7 @@ fn squarei<'a>(x: int, op: &'a mut OpInt) -> int { op.call(x, x) }\n fn muli(x:int, y:int) -> int { x * y }\n \n pub fn main() {\n-    let mut f = |x,y| muli(x,y);\n+    let mut f = |&mut: x, y| muli(x, y);\n     {\n         let g = &mut f;\n         let h = g as &mut OpInt;"}, {"sha": "72bdd1af746c17c1bf03f40fd5f9d3e612a36b68", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T>(g: || -> T) -> T { g() }\n+fn f<T, F>(g: F) -> T where F: FnOnce() -> T { g() }\n \n pub fn main() {\n   let _x = f( | | { 10i });\n@@ -20,5 +20,5 @@ pub fn main() {\n     let _: () = f(| | { });\n     // empty block with no type info should compile too\n     let _ = f(||{});\n-    let _ = (||{});\n+    let _ = (|&:|{});\n }"}, {"sha": "3ca060f45a5f50f031d9bedfa194b4644c2909e1", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -29,7 +29,7 @@ fn Ident_new() -> Ident {\n \n pub fn light_fuse(fld: Box<bomb>) {\n     int3!();\n-    let f = || {\n+    let f = |&:| {\n         int3!();\n         fld.boom(Ident_new()); // *** 1\n     };"}, {"sha": "29ac563878bc4ce7aec13a54c703a3681afb181c", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn range_(a: int, b: int, it: |int|) {\n+fn range_<F>(a: int, b: int, mut it: F) where F: FnMut(int) {\n     assert!((a < b));\n     let mut i: int = a;\n     while i < b { it(i); i += 1; }"}, {"sha": "b33e6512b18bdafab6c280bc5755150237ab6ec9", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -16,7 +16,7 @@ struct Refs { refs: Vec<int> , n: int }\n \n pub fn main() {\n     let mut e = Refs{refs: vec!(), n: 0};\n-    let _f: || = || println!(\"{}\", e.n);\n+    let _f = |&:| println!(\"{}\", e.n);\n     let x: &[int] = e.refs.as_slice();\n     assert_eq!(x.len(), 0);\n }"}, {"sha": "8ef5df5d6969729f2365ee0f8f99ad8bfb61c107", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,16 +10,16 @@\n \n // Issue #1818\n \n-fn lp<T>(s: String, f: |String| -> T) -> T {\n+fn lp<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {\n     while false {\n         let r = f(s);\n         return (r);\n     }\n     panic!();\n }\n \n-fn apply<T>(s: String, f: |String| -> T) -> T {\n-    fn g<T>(s: String, f: |String| -> T) -> T {f(s)}\n+fn apply<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {\n+    fn g<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {f(s)}\n     g(s, |v| { let r = f(v); r })\n }\n "}, {"sha": "6615bb6368fd75df46b1fd3a7911ee8c2aeee153", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,16 +10,17 @@\n \n // Make sure #1399 stays fixed\n \n+#![feature(unboxed_closures)]\n \n struct A { a: Box<int> }\n \n-fn foo() -> ||: 'static -> int {\n+fn foo() -> Box<FnMut() -> int + 'static> {\n     let k = box 22i;\n     let _u = A {a: k.clone()};\n-    let result: ||: 'static -> int = || 22;\n-    result\n+    let result  = |&mut:| 22;\n+    box result\n }\n \n pub fn main() {\n-    assert_eq!(foo()(), 22);\n+    assert_eq!(foo().call_mut(()), 22);\n }"}, {"sha": "206d4db3db4f841eaf10ce617caa13aec6f9d623", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,7 +13,7 @@\n struct A { a: Box<int> }\n \n pub fn main() {\n-    fn invoke(f: ||) { f(); }\n+    fn invoke<F>(f: F) where F: FnOnce() { f(); }\n     let k = box 22i;\n     let _u = A {a: k.clone()};\n     invoke(|| println!(\"{}\", k.clone()) )"}, {"sha": "2a0a2b208875fa97005f21eea6f733bdae28846c", "filename": "src/test/run-pass/match-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-phi.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,7 +13,7 @@\n \n enum thing { a, b, c, }\n \n-fn foo(it: |int|) { it(10); }\n+fn foo<F>(it: F) where F: FnOnce(int) { it(10); }\n \n pub fn main() {\n     let mut x = true;"}, {"sha": "acd8078b1f4d3a183fbf8f387e94dd8ed47d64c3", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,11 +11,11 @@\n \n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> ;\n+    fn bind<B, F>(&self, f: F ) -> Vec<B> where F: FnMut(&A) -> Vec<B> ;\n }\n \n impl<A> vec_monad<A> for Vec<A> {\n-    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> {\n+    fn bind<B, F>(&self, mut f: F) -> Vec<B> where F: FnMut(&A) -> Vec<B> {\n         let mut r = Vec::new();\n         for elt in self.iter() {\n             r.extend(f(elt).into_iter());\n@@ -25,11 +25,11 @@ impl<A> vec_monad<A> for Vec<A> {\n }\n \n trait option_monad<A> {\n-    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B>;\n+    fn bind<B, F>(&self, f: F) -> Option<B> where F: FnOnce(&A) -> Option<B>;\n }\n \n impl<A> option_monad<A> for Option<A> {\n-    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B> {\n+    fn bind<B, F>(&self, f: F) -> Option<B> where F: FnOnce(&A) -> Option<B> {\n         match *self {\n             Some(ref a) => { f(a) }\n             None => { None }"}, {"sha": "b7cd3003e750c4204394ce865daf9209bd80654f", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(_thing: ||) { }\n+fn f2<F>(_thing: F) where F: FnOnce() { }\n \n-fn f(thing: ||) {\n+fn f<F>(thing: F) where F: FnOnce() {\n     f2(thing);\n }\n "}, {"sha": "f80728519136ed684a244aeca3b713066b5d032d", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -15,7 +15,7 @@ fn f(mut y: Box<int>) {\n }\n \n fn g() {\n-    let frob: |Box<int>| = |mut q| { *q = 2; assert!(*q == 2); };\n+    let frob = |&: mut q: Box<int>| { *q = 2; assert!(*q == 2); };\n     let w = box 37;\n     frob(w);\n "}, {"sha": "ad9161f9bd48736fa5911391859c739d80855000", "filename": "src/test/run-pass/mut-in-ident-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -75,6 +75,6 @@ pub fn main() {\n     x = 30;\n     assert_eq!(x, 30);\n \n-    (|A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n+    (|&: A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n \n }"}, {"sha": "01875288aef0e97cdbc73e40769567af7a6f2826", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,9 +10,9 @@\n \n // Tests for the new |args| expr lambda syntax\n \n-fn f(i: int, f: |int| -> int) -> int { f(i) }\n+fn f<F>(i: int, f: F) -> int where F: FnOnce(int) -> int { f(i) }\n \n-fn g(_g: ||) { }\n+fn g<G>(_g: G) where G: FnOnce() { }\n \n pub fn main() {\n     assert_eq!(f(10, |a| a), 10);"}, {"sha": "e422cb803215bb591be773f40c4413a555290a0b", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -12,7 +12,7 @@ struct X {\n     repr: int\n }\n \n-fn apply<T>(x: T, f: |T|) {\n+fn apply<T, F>(x: T, f: F) where F: FnOnce(T) {\n     f(x);\n }\n "}, {"sha": "c718b948f8dc07723f4dfe49a69f351af11775dd", "filename": "src/test/run-pass/pattern-in-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n pub fn main() {\n-    let f = |(x, _): (int, int)| println!(\"{}\", x + 1);\n-    let g = |Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n+    let f = |&: (x, _): (int, int)| println!(\"{}\", x + 1);\n+    let g = |&: Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n     f((2, 3));\n     g(Foo { x: 1, y: 2 });\n }"}, {"sha": "c5588a29cb526cccdd622b01f6f8d5e1d8ac4c1e", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn something(f: ||) { f(); }\n+fn something<F>(f: F) where F: FnOnce() { f(); }\n pub fn main() {\n     something(|| println!(\"hi!\") );\n }"}, {"sha": "a7724e68310a7603e9c0b93a7c41e5b52deddf46", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,21 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n struct closure_box<'a> {\n-    cl: ||: 'a,\n+    cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it(x: ||) -> closure_box {\n+fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n \n pub fn main() {\n     let mut i = 3i;\n     assert_eq!(i, 3);\n     {\n-        let cl = || i += 1;\n-        let cl_box = box_it(cl);\n-        (cl_box.cl)();\n+        let cl = |&mut:| i += 1;\n+        let mut cl_box = box_it(box cl);\n+        cl_box.cl.call_mut(());\n     }\n     assert_eq!(i, 4);\n }"}, {"sha": "e7dc5e99c2bb97e05b6d981ff62e64f2a0560df9", "filename": "src/test/run-pass/regions-dependent-autofn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we autoslice a vector.\n // Issue #3148.\n \n-fn subslice(v: ||) -> || { v }\n+fn subslice<F>(v: F) -> F where F: FnOnce() { v }\n \n-fn both(v: ||) -> || {\n+fn both<F>(v: F) -> F where F: FnOnce() {\n     subslice(subslice(v))\n }\n "}, {"sha": "70c90ee05b35764713de34b22b72f89c8e1886aa", "filename": "src/test/run-pass/regions-fn-subtyping-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,13 +13,13 @@\n // Here, `f` is a function that takes a pointer `x` and a function\n // `g`, where `g` requires its argument `y` to be in the same region\n // that `x` is in.\n-fn has_same_region(f: <'a>|x: &'a int, g: |y: &'a int||) {\n+fn has_same_region(f: Box<for<'a> FnMut(&'a int, Box<FnMut(&'a int)>)>) {\n     // `f` should be the type that `wants_same_region` wants, but\n     // right now the compiler complains that it isn't.\n     wants_same_region(f);\n }\n \n-fn wants_same_region(_f: <'b>|x: &'b int, g: |y: &'b int||) {\n+fn wants_same_region(_f: Box<for<'b> FnMut(&'b int, Box<FnMut(&'b int)>)>) {\n }\n \n pub fn main() {"}, {"sha": "e9f774150dcfd915c76b9e6a25e0a126668107ec", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -14,21 +14,21 @@\n #![allow(unused_variable)]\n \n // Should pass region checking.\n-fn ok(f: |x: &uint|) {\n+fn ok(f: Box<FnMut(&uint)>) {\n     // Here, g is a function that can accept a uint pointer with\n     // lifetime r, and f is a function that can accept a uint pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: <'r>|y: &'r uint| = |x| { };\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = box |x| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: |x: &uint|) {\n-    let mut g: <'r>|x: &'r uint| = |_| {};\n+fn ok_inferred(f: Box<FnMut(&uint)>) {\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = box |_| {};\n     g = f;\n }\n "}, {"sha": "cfb6c8585634d7049a4ded78a2992c78e7936bfb", "filename": "src/test/run-pass/regions-infer-call-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,7 +10,7 @@\n \n fn takes_two(x: &int, y: &int) -> int { *x + *y }\n \n-fn with<T>(f: |x: &int| -> T) -> T {\n+fn with<T, F>(f: F) -> T where F: FnOnce(&int) -> T {\n     f(&20)\n }\n "}, {"sha": "c796566b79d57b2af0bef2106cd2d6dd56ca5de5", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -24,15 +24,15 @@\n \n pub fn main() {\n     fn explicit() {\n-        fn test(_x: Option<|f: <'a> |g: &'a int||>) {}\n-        test(Some(|_f: <'a> |g: &'a int|| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a int)>) {}\n+        test(Some(box |&mut: _f: Box<for<'a> FnMut(&'a int)>| {}));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n-        fn test(_x: Option<|f:      |g: &   int||>) {}\n-        test(Some(|_f:      |g: &   int|| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<        FnMut(&   int)>) {}\n+        test(Some(box |&mut: _f: Box<        FnMut(&   int)>| {}));\n     }\n \n     explicit();"}, {"sha": "8822d3880397a8f57ef12370bc4fba3f4d7ba53b", "filename": "src/test/run-pass/regions-link-fn-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-link-fn-args.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(dead_code)]\n \n-fn with<'a>(_: |&'a Vec<int>| -> &'a Vec<int>) { }\n+fn with<'a, F>(_: F) where F: FnOnce(&'a Vec<int>) -> &'a Vec<int> { }\n \n fn foo() {\n     with(|&ref ints| ints);"}, {"sha": "0042d3a765bfd070a5111021cb5325a8ce7e2866", "filename": "src/test/run-pass/regions-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-params.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,7 +11,7 @@\n \n fn region_identity(x: &uint) -> &uint { x }\n \n-fn apply<T>(t: T, f: |T| -> T) -> T { f(t) }\n+fn apply<T, F>(t: T, f: F) -> T where F: FnOnce(T) -> T { f(t) }\n \n fn parameterized(x: &uint) -> uint {\n     let z = apply(x, ({|y|"}, {"sha": "0f36dc04575446cf7f6365b6505fc969ae871240", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -8,19 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n struct closure_box<'a> {\n-    cl: ||: 'a,\n+    cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it(x: ||) -> closure_box {\n+fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n \n-fn call_static_closure(cl: closure_box<'static>) {\n-    (cl.cl)();\n+fn call_static_closure(mut cl: closure_box<'static>) {\n+    cl.cl.call_mut(())\n }\n \n pub fn main() {\n-    let cl_box = box_it(|| println!(\"Hello, world!\"));\n+    let cl_box = box_it(box |&mut:| println!(\"Hello, world!\"));\n     call_static_closure(cl_box);\n }"}, {"sha": "899dc8ddbe90ddd597879cfe756f7d599f406c88", "filename": "src/test/run-pass/return-from-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,7 +13,7 @@\n static mut calls: uint = 0;\n \n fn surrounding() {\n-    let return_works = |n: int| {\n+    let return_works = |&: n: int| {\n         unsafe { calls += 1 }\n \n         if n >= 0 { return; }"}, {"sha": "c70ed9a3d749eb1b21991c37fc54c2b1079805d2", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn test(f: |uint| -> uint) -> uint {\n+fn test<F>(f: F) -> uint where F: FnOnce(uint) -> uint {\n     return f(22u);\n }\n "}, {"sha": "74c0663971ec5e773e6c9e91b26fc34e0186c8fd", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -26,29 +26,29 @@ mod b {\n \n trait uint_utils {\n     fn str(&self) -> String;\n-    fn multi(&self, f: |uint|);\n+    fn multi<F>(&self, f: F) where F: FnMut(uint);\n }\n \n impl uint_utils for uint {\n     fn str(&self) -> String {\n         self.to_string()\n     }\n-    fn multi(&self, f: |uint|) {\n+    fn multi<F>(&self, mut f: F) where F: FnMut(uint) {\n         let mut c = 0u;\n         while c < *self { f(c); c += 1u; }\n     }\n }\n \n trait vec_utils<T> {\n     fn length_(&self, ) -> uint;\n-    fn iter_(&self, f: |&T|);\n-    fn map_<U>(&self, f: |&T| -> U) -> Vec<U> ;\n+    fn iter_<F>(&self, f: F) where F: FnMut(&T);\n+    fn map_<U, F>(&self, f: F) -> Vec<U> where F: FnMut(&T) -> U;\n }\n \n impl<T> vec_utils<T> for Vec<T> {\n     fn length_(&self) -> uint { self.len() }\n-    fn iter_(&self, f: |&T|) { for x in self.iter() { f(x); } }\n-    fn map_<U>(&self, f: |&T| -> U) -> Vec<U> {\n+    fn iter_<F>(&self, mut f: F) where F: FnMut(&T) { for x in self.iter() { f(x); } }\n+    fn map_<U, F>(&self, mut f: F) -> Vec<U> where F: FnMut(&T) -> U {\n         let mut r = Vec::new();\n         for elt in self.iter() {\n             r.push(f(elt));\n@@ -64,7 +64,7 @@ pub fn main() {\n     assert_eq!((vec!(1i)).length_().str(), \"1\".to_string());\n     let vect = vec!(3i, 4).map_(|a| *a + 4);\n     assert_eq!(vect[0], 7);\n-    let vect = (vec!(3i, 4)).map_::<uint>(|a| *a as uint + 4u);\n+    let vect = (vec!(3i, 4)).map_::<uint, _>(|a| *a as uint + 4u);\n     assert_eq!(vect[0], 7u);\n     let mut x = 0u;\n     10u.multi(|_n| x += 2u );"}, {"sha": "043ca121b1bb5b3c92ae6811bc3cc6b42cec17c3", "filename": "src/test/run-pass/struct-partial-move-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -16,7 +16,7 @@ struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }\n \n-pub fn f<T>((b1, b2): (T, T), f: |T| -> T) -> Partial<T> {\n+pub fn f<T, F>((b1, b2): (T, T), mut f: F) -> Partial<T> where F: FnMut(T) -> T {\n     let p = Partial { x: b1, y: b2 };\n \n     // Move of `p` is legal even though we are also moving `p.y`; the"}, {"sha": "6327e03e528afbfad4fcc1b6d402d0a0aaf7db2e", "filename": "src/test/run-pass/struct-partial-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -18,7 +18,7 @@ impl Drop for S { fn drop(&mut self) { } }\n \n pub type Two<T> = (Partial<T>, Partial<T>);\n \n-pub fn f<T>((b1, b2): (T, T), (b3, b4): (T, T), f: |T| -> T) -> Two<T> {\n+pub fn f<T, F>((b1, b2): (T, T), (b3, b4): (T, T), mut f: F) -> Two<T> where F: FnMut(T) -> T {\n     let p = Partial { x: b1, y: b2 };\n     let q = Partial { x: b3, y: b4 };\n "}, {"sha": "33e10cc77b7c1d757773e991981c42c45a2f723e", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -189,7 +189,7 @@ pub fn dont_double_panic() {\n     assert!(r.is_err());\n }\n \n-fn in_tmpdir(f: ||) {\n+fn in_tmpdir<F>(f: F) where F: FnOnce() {\n     let tmpdir = TempDir::new(\"test\").ok().expect(\"can't make tmpdir\");\n     assert!(os::change_dir(tmpdir.path()).is_ok());\n "}, {"sha": "b193ad7892a6d965a8a54213663c9410e8409845", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -11,12 +11,16 @@\n // Tests that a heterogeneous list of existential types can be put inside an Arc\n // and shared between tasks as long as all types fulfill Send.\n \n+// ignore-pretty\n+\n+#![feature(unboxed_closures)]\n+\n use std::sync::Arc;\n use std::sync::mpsc::channel;\n use std::thread::Thread;\n \n trait Pet {\n-    fn name(&self, blk: |&str|);\n+    fn name(&self, blk: Box<FnMut(&str)>);\n     fn num_legs(&self) -> uint;\n     fn of_good_pedigree(&self) -> bool;\n }\n@@ -38,19 +42,19 @@ struct Goldfyshe {\n }\n \n impl Pet for Catte {\n-    fn name(&self, blk: |&str|) { blk(self.name.as_slice()) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n }\n impl Pet for Dogge {\n-    fn name(&self, blk: |&str|) { blk(self.name.as_slice()) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool {\n         self.bark_decibels < 70 || self.tricks_known > 20\n     }\n }\n impl Pet for Goldfyshe {\n-    fn name(&self, blk: |&str|) { blk(self.name.as_slice()) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n     fn num_legs(&self) -> uint { 0 }\n     fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n }\n@@ -98,7 +102,7 @@ fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n }\n fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n-        pet.name(|name| {\n+        pet.name(box |name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         })\n     }"}, {"sha": "d4c1b688b47b60efed2eafc3452454c963188a01", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -24,10 +24,10 @@ impl to_str for () {\n }\n \n trait map<T> {\n-    fn map<U>(&self, f: |&T| -> U) -> Vec<U> ;\n+    fn map<U, F>(&self, f: F) -> Vec<U> where F: FnMut(&T) -> U;\n }\n impl<T> map<T> for Vec<T> {\n-    fn map<U>(&self, f: |&T| -> U) -> Vec<U> {\n+    fn map<U, F>(&self, mut f: F) -> Vec<U> where F: FnMut(&T) -> U {\n         let mut r = Vec::new();\n         for i in self.iter() {\n             r.push(f(i));"}, {"sha": "7287d149f5100e0a7440a6c1b6132039011ec1aa", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -34,24 +34,6 @@ fn main() {\n         let f = TypeId::of::<fn(for<'a> fn(&'a int) -> &'a int)>();\n         assert!(e != f);\n     }\n-    // Stack closures\n-    {\n-        let a = TypeId::of::<|&'static int, &'static int|>();\n-        let b = TypeId::of::<for<'a> |&'static int, &'a int|>();\n-        let c = TypeId::of::<for<'a, 'b> |&'a int, &'b int|>();\n-        let d = TypeId::of::<for<'a, 'b> |&'b int, &'a int|>();\n-        assert!(a != b);\n-        assert!(a != c);\n-        assert!(a != d);\n-        assert!(b != c);\n-        assert!(b != d);\n-        assert_eq!(c, d);\n-\n-        // Make sure De Bruijn indices are handled correctly\n-        let e = TypeId::of::<for<'a> |(|&'a int| -> &'a int)|>();\n-        let f = TypeId::of::<|for<'a> |&'a int| -> &'a int|>();\n-        assert!(e != f);\n-    }\n     // Boxed unboxed closures\n     {\n         let a = TypeId::of::<Box<Fn(&'static int, &'static int)>>();"}, {"sha": "24cc5fab8ed77016d1ab08a1c7311484616ab5bd", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -14,7 +14,7 @@ struct S<T> {\n     b: uint,\n }\n \n-fn range_(lo: uint, hi: uint, it: |uint|) {\n+fn range_<F>(lo: uint, hi: uint, mut it: F) where F: FnMut(uint) {\n     let mut lo_ = lo;\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }"}, {"sha": "d22a6652e16f3d29333ae449a4dca4b29a474737", "filename": "src/test/run-pass/unnamed_argument_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funnamed_argument_mode.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -13,7 +13,7 @@ fn good(_a: &int) {\n \n // unnamed argument &int is now parse x: &int\n \n-fn called(_f: |&int|) {\n+fn called<F>(_f: F) where F: FnOnce(&int) {\n }\n \n pub fn main() {"}, {"sha": "bd20a174d1e49c1967a33a3217e3254463e7c9df", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let _x = box 1i;\n-    let lam_move: || = || {};\n+    let lam_move = |&:| {};\n     lam_move();\n }"}, {"sha": "3e7718970258f4362964e3536e8264fb53b5591f", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -19,7 +19,7 @@ extern {\n     fn sprintf(s: *mut c_char, format: *const c_char, ...) -> c_int;\n }\n \n-unsafe fn check<T>(expected: &str, f: |*mut c_char| -> T) {\n+unsafe fn check<T, F>(expected: &str, f: F) where F: FnOnce(*mut c_char) -> T {\n     let mut x = [0 as c_char; 50];\n     f(&mut x[0] as *mut c_char);\n     let res = CString::new(&x[0], false);"}, {"sha": "576601833330d4f746cd0965b6b78fdba325baf8", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -10,21 +10,27 @@\n \n #![feature(advanced_slice_patterns)]\n \n-fn foldl<T,U:Clone>(values: &[T],\n-                    initial: U,\n-                    function: |partial: U, element: &T| -> U)\n-                    -> U {\n+fn foldl<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone,\n+    F: FnMut(U, &T) -> U,\n+{\n     match values {\n         [ref head, tail..] =>\n             foldl(tail, function(initial, head), function),\n         [] => initial.clone()\n     }\n }\n \n-fn foldr<T,U:Clone>(values: &[T],\n-                    initial: U,\n-                    function: |element: &T, partial: U| -> U)\n-                    -> U {\n+fn foldr<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone,\n+    F: FnMut(&T, U) -> U,\n+{\n     match values {\n         [head.., ref tail] =>\n             foldr(head, function(tail, initial), function),"}, {"sha": "c8ed1a2610573ff505cae40c477bc232febfc537", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -26,7 +26,7 @@ fn what() {\n         return while !x.get() { x.set(true); };\n     }\n     let i = &Cell::new(false);\n-    let dont = {||the(i)};\n+    let dont = {|&:|the(i)};\n     dont();\n     assert!((i.get()));\n }"}]}