{"sha": "37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "node_id": "C_kwDOAAsO6NoAKDM3ZmJkOTFlYjUyNmNjN2UyNDZmN2M2Yzk3YjFkZWI5ZTM3ODc5ZmY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-19T22:59:30Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-21T23:38:34Z"}, "message": "Address review comments.", "tree": {"sha": "e3874af4a0897babe8eb9cf1b0c5b3ebdce387f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3874af4a0897babe8eb9cf1b0c5b3ebdce387f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "html_url": "https://github.com/rust-lang/rust/commit/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416399dc1028545ea0ac6d68fb0b5cc5fa97d393", "url": "https://api.github.com/repos/rust-lang/rust/commits/416399dc1028545ea0ac6d68fb0b5cc5fa97d393", "html_url": "https://github.com/rust-lang/rust/commit/416399dc1028545ea0ac6d68fb0b5cc5fa97d393"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "65b91eedf8a27e066998e779c373b69d6c6d8990", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "patch": "@@ -475,7 +475,7 @@ macro_rules! implement_ty_decoder {\n                 }\n \n                 #[inline]\n-                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) -> () {\n+                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) {\n                     self.opaque.read_raw_bytes_into(bytes)\n                 }\n             }"}, {"sha": "3e619b30ea5a77b17ac3106110acdb6cd2853dd1", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "patch": "@@ -2792,9 +2792,9 @@ impl<T, R> InternIteratorElement<T, R> for T {\n     ) -> Self::Output {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n-        // Lengths 0, 1, and 2 typically account for ~95% of cases. We assume\n-        // that if the upper and lower bounds from `size_hint` agree they are\n-        // correct.\n+        // Lengths 0, 1, and 2 typically account for ~95% of cases. If\n+        // `size_hint` is incorrect a panic will occur via an `unwrap` or an\n+        // `assert`.\n         match iter.size_hint() {\n             (0, Some(0)) => {\n                 assert!(iter.next().is_none());\n@@ -2835,9 +2835,10 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     ) -> Self::Output {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n-        // Lengths 0, 1, and 2 typically account for ~95% of cases. We assume\n-        // that if the upper and lower bounds from `size_hint` agree they are\n-        // correct.\n+        // Lengths 0, 1, and 2 typically account for ~95% of cases. If\n+        // `size_hint` is incorrect a panic will occur via an `unwrap` or an\n+        // `assert`, unless a failure happens first, in which case the result\n+        // will be an error anyway.\n         Ok(match iter.size_hint() {\n             (0, Some(0)) => {\n                 assert!(iter.next().is_none());"}, {"sha": "283eda7c85e647cd3f9aceb2ccb7583722e0749b", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "patch": "@@ -142,7 +142,6 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n                         let end = edge_list_data.len().try_into().unwrap();\n                         let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n                         debug_assert_eq!(_i.index(), _index);\n-                        ()\n                     })\n                 })\n             });"}, {"sha": "044de8e4e24839eedd178a8dd92d56819cb26255", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "patch": "@@ -2296,7 +2296,6 @@ impl crate::Decoder for Decoder {\n         for c in s.iter_mut() {\n             *c = self.read_u8();\n         }\n-        ()\n     }\n \n     fn read_enum<T, F>(&mut self, f: F) -> T"}, {"sha": "c272c687a7e981ba2598425c3d08357530195afb", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fbd91eb526cc7e246f7c6c97b1deb9e37879ff/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=37fbd91eb526cc7e246f7c6c97b1deb9e37879ff", "patch": "@@ -676,11 +676,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]) -> () {\n+    fn read_raw_bytes_into(&mut self, s: &mut [u8]) {\n         let start = self.position;\n         self.position += s.len();\n         s.copy_from_slice(&self.data[start..self.position]);\n-        ()\n     }\n }\n "}]}