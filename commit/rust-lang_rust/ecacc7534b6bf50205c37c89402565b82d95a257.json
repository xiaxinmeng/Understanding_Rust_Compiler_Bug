{"sha": "ecacc7534b6bf50205c37c89402565b82d95a257", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYWNjNzUzNGI2YmY1MDIwNWMzN2M4OTQwMjU2NWI4MmQ5NWEyNTc=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-09-19T08:26:46Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-09-20T14:14:43Z"}, "message": "Add advance_by and advance_back_by", "tree": {"sha": "e648652a4a354763eb1257ac2375801e1b5f2ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e648652a4a354763eb1257ac2375801e1b5f2ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecacc7534b6bf50205c37c89402565b82d95a257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc7534b6bf50205c37c89402565b82d95a257", "html_url": "https://github.com/rust-lang/rust/commit/ecacc7534b6bf50205c37c89402565b82d95a257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc7534b6bf50205c37c89402565b82d95a257/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c82df1f568cfc8f7469deb46b97c3c861818a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c82df1f568cfc8f7469deb46b97c3c861818a0", "html_url": "https://github.com/rust-lang/rust/commit/a2c82df1f568cfc8f7469deb46b97c3c861818a0"}], "stats": {"total": 177, "additions": 161, "deletions": 16}, "files": [{"sha": "7cddc6773ffac4486b17979f3ca80f37965e3895", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=ecacc7534b6bf50205c37c89402565b82d95a257", "patch": "@@ -124,6 +124,11 @@ where\n         self.iter.size_hint()\n     }\n \n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.iter.advance_back_by(n)\n+    }\n+\n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n         self.iter.nth_back(n)\n@@ -164,6 +169,11 @@ where\n         self.iter.next()\n     }\n \n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.iter.advance_by(n)\n+    }\n+\n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n         self.iter.nth(n)"}, {"sha": "a5cfc0228590d991b32d484debada85ad4aacca2", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=ecacc7534b6bf50205c37c89402565b82d95a257", "patch": "@@ -91,6 +91,46 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// Advances the iterator from the back by `n` elements.\n+    ///\n+    /// `advance_back_by` is the reverse version of [`advance_by`]. This method will\n+    /// eagerly skip `n` elements starting from the back by calling [`next_back`] up\n+    /// to `n` times until [`None`] is encountered.\n+    ///\n+    /// `advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\n+    /// elements the iterator is advanced by before running out of elements (i.e. the length\n+    /// of the iterator). Note that `k` is always less than `n`.\n+    ///\n+    /// Calling `advance_back_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    ///\n+    /// [`advance_by`]: Iterator::advance_by\n+    /// [`next_back`]: DoubleEndedIterator::next_back\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_advance_by)]\n+    ///\n+    /// let a = [3, 4, 5, 6];\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.advance_back_by(2), Ok(()));\n+    /// assert_eq!(iter.next_back(), Some(&4));\n+    /// assert_eq!(iter.advance_back_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        for i in 0..n {\n+            self.next_back().ok_or(i)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Returns the `n`th element from the end of the iterator.\n     ///\n     /// This is essentially the reversed version of [`nth`]. Although like most indexing\n@@ -135,14 +175,9 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n-    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n-        for x in self.rev() {\n-            if n == 0 {\n-                return Some(x);\n-            }\n-            n -= 1;\n-        }\n-        None\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        self.advance_back_by(n).ok()?;\n+        self.next_back()\n     }\n \n     /// This is the reverse version of [`try_fold()`]: it takes elements\n@@ -323,6 +358,9 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        (**self).advance_back_by(n)\n+    }\n     fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n         (**self).nth_back(n)\n     }"}, {"sha": "8ff4c273fcdea121d4a432782d5d7245d9b843a9", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ecacc7534b6bf50205c37c89402565b82d95a257", "patch": "@@ -284,6 +284,44 @@ pub trait Iterator {\n         self.fold(None, some)\n     }\n \n+    /// Advances the iterator by `n` elements.\n+    ///\n+    /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n+    /// times until [`None`] is encountered.\n+    ///\n+    /// `advance_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number\n+    /// of elements the iterator is advanced by before running out of elements (i.e. the\n+    /// length of the iterator). Note that `k` is always less than `n`.\n+    ///\n+    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    ///\n+    /// [`next`]: Iterator::next\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_advance_by)]\n+    ///\n+    /// let a = [1, 2, 3, 4];\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.advance_by(2), Ok(()));\n+    /// assert_eq!(iter.next(), Some(&3));\n+    /// assert_eq!(iter.advance_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"none\")]\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        for i in 0..n {\n+            self.next().ok_or(i)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Returns the `n`th element of the iterator.\n     ///\n     /// Like most indexing operations, the count starts from zero, so `nth(0)`\n@@ -325,14 +363,9 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n-        while let Some(x) = self.next() {\n-            if n == 0 {\n-                return Some(x);\n-            }\n-            n -= 1;\n-        }\n-        None\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.advance_by(n).ok()?;\n+        self.next()\n     }\n \n     /// Creates an iterator starting at the same point, but stepping by\n@@ -3262,6 +3295,9 @@ impl<I: Iterator + ?Sized> Iterator for &mut I {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        (**self).advance_by(n)\n+    }\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         (**self).nth(n)\n     }"}, {"sha": "7a8450116fbf5f777fbe84dd1b0d4ccc177c6162", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=ecacc7534b6bf50205c37c89402565b82d95a257", "patch": "@@ -1473,6 +1473,66 @@ fn test_iterator_rev_nth() {\n     assert_eq!(v.iter().rev().nth(v.len()), None);\n }\n \n+#[test]\n+fn test_iterator_advance_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter();\n+        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.next().unwrap(), &v[i]);\n+        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_advance_back_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter();\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.next_back().unwrap(), &v[v.len() - 1 - i]);\n+        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_back_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_rev_advance_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter().rev();\n+        assert_eq!(iter.advance_by(i), Ok(()));\n+        assert_eq!(iter.next().unwrap(), &v[v.len() - 1 - i]);\n+        assert_eq!(iter.advance_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_by(100), Err(v.len()));\n+}\n+\n+#[test]\n+fn test_iterator_rev_advance_back_by() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+\n+    for i in 0..v.len() {\n+        let mut iter = v.iter().rev();\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n+        assert_eq!(iter.next_back().unwrap(), &v[i]);\n+        assert_eq!(iter.advance_back_by(100), Err(v.len() - 1 - i));\n+    }\n+\n+    assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_back_by(100), Err(v.len()));\n+}\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "fd3f71f8786304e0119ea2eae8ee3129899b1a67", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc7534b6bf50205c37c89402565b82d95a257/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ecacc7534b6bf50205c37c89402565b82d95a257", "patch": "@@ -38,6 +38,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(int_error_matching)]\n #![feature(array_value_iter)]\n+#![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]"}]}