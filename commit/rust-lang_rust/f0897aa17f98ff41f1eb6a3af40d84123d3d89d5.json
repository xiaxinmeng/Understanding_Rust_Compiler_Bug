{"sha": "f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwODk3YWExN2Y5OGZmNDFmMWViNmEzYWY0MGQ4NDEyM2QzZDg5ZDU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-05T21:20:02Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-05T22:10:59Z"}, "message": "OIBIT: for `PhantomData<T>` check `T` rather than the struct itself", "tree": {"sha": "1eaed08e7c30ece07195bbef47a1aabaae01aedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eaed08e7c30ece07195bbef47a1aabaae01aedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "html_url": "https://github.com/rust-lang/rust/commit/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5/comments", "author": null, "committer": null, "parents": [{"sha": "68740b405404a3f885e388c8d31722797d519c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/68740b405404a3f885e388c8d31722797d519c30", "html_url": "https://github.com/rust-lang/rust/commit/68740b405404a3f885e388c8d31722797d519c30"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "5de67cfd38ebe5d4a58b71693316d9eed8527607", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "patch": "@@ -1700,6 +1700,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n+            // for `PhantomData<T>`, we pass `T`\n+            ty::ty_struct(def_id, substs)\n+                if Some(def_id) == self.tcx().lang_items.phantom_data() =>\n+            {\n+                Some(substs.types.get_slice(TypeSpace).to_vec())\n+            }\n+\n             ty::ty_struct(def_id, substs) => {\n                 Some(ty::struct_fields(self.tcx(), def_id, substs).iter()\n                      .map(|f| f.mt.ty)"}, {"sha": "c912d084daa86f1ad4ddf3b09b7f452d6f9f1f58", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0897aa17f98ff41f1eb6a3af40d84123d3d89d5/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=f0897aa17f98ff41f1eb6a3af40d84123d3d89d5", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that OIBIT checks `T` when it encounters a `PhantomData<T>` field, instead of checking\n+// the `PhantomData<T>` type itself (which almost always implements a \"default\" trait\n+// (`impl Trait for ..`))\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::{MarkerTrait, PhantomData};\n+\n+unsafe trait Zen: MarkerTrait {}\n+\n+unsafe impl Zen for .. {}\n+\n+unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n+\n+struct Guard<'a, T: 'a> {\n+    _marker: PhantomData<&'a T>,\n+}\n+\n+struct Nested<T>(T);\n+\n+fn is_zen<T: Zen>(_: T) {}\n+\n+fn not_sync<T>(x: Guard<T>) {\n+    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+}\n+\n+fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n+    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+}\n+\n+fn main() {}"}]}