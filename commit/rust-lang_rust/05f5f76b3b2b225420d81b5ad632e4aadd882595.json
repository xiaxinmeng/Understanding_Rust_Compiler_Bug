{"sha": "05f5f76b3b2b225420d81b5ad632e4aadd882595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjVmNzZiM2IyYjIyNTQyMGQ4MWI1YWQ2MzJlNGFhZGQ4ODI1OTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T20:07:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-17T21:37:09Z"}, "message": "Move impl HashStable for SymbolStr in libsyntax_pos.", "tree": {"sha": "48c8f54f963d1fdce5072b4c9918df82c7516baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c8f54f963d1fdce5072b4c9918df82c7516baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f5f76b3b2b225420d81b5ad632e4aadd882595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f5f76b3b2b225420d81b5ad632e4aadd882595", "html_url": "https://github.com/rust-lang/rust/commit/05f5f76b3b2b225420d81b5ad632e4aadd882595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f5f76b3b2b225420d81b5ad632e4aadd882595/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e1658c6758ccbc1e12e37193e9780398368698", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e1658c6758ccbc1e12e37193e9780398368698", "html_url": "https://github.com/rust-lang/rust/commit/c2e1658c6758ccbc1e12e37193e9780398368698"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "4a331cbf40d9731decda6669924597e9a1fa5b5b", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05f5f76b3b2b225420d81b5ad632e4aadd882595/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f5f76b3b2b225420d81b5ad632e4aadd882595/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=05f5f76b3b2b225420d81b5ad632e4aadd882595", "patch": "@@ -18,25 +18,6 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n-impl<'a> HashStable<StableHashingContext<'a>> for SymbolStr {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let str = self as &str;\n-        str.hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for SymbolStr {\n-    type KeyType = SymbolStr;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> SymbolStr {\n-        self.clone()\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "633688316144f8351763d31db5161d92e3fe0305", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05f5f76b3b2b225420d81b5ad632e4aadd882595/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f5f76b3b2b225420d81b5ad632e4aadd882595/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=05f5f76b3b2b225420d81b5ad632e4aadd882595", "patch": "@@ -8,6 +8,7 @@ use rustc_index::vec::Idx;\n use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n use std::cmp::{PartialEq, PartialOrd, Ord};\n use std::fmt;\n@@ -1136,3 +1137,20 @@ impl fmt::Display for SymbolStr {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n+\n+impl<CTX> HashStable<CTX> for SymbolStr {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        let str = self as &str;\n+        str.hash_stable(hcx, hasher)\n+    }\n+}\n+\n+impl<CTX> ToStableHashKey<CTX> for SymbolStr {\n+    type KeyType = SymbolStr;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &CTX) -> SymbolStr {\n+        self.clone()\n+    }\n+}"}]}