{"sha": "d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MzViNzZlYWYzNDM1ZjliZGNlMWRjYmRkMzE1YjBlNzcwNDkzZjA=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-05T00:59:30Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:08:51Z"}, "message": "adopt comments from review", "tree": {"sha": "0e6fefcd3f2d22ccd99f754474dbf4734c4a2161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e6fefcd3f2d22ccd99f754474dbf4734c4a2161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8tfJMACgkQoZMWSk0F\n7kRcnQf/eEruQ8061lYrAHLtP/U5eFKdcYDm6paxUMIBngpIlsm35g8m3YoLL0Q4\nyU74n4B1aXYBezo7yVW9wr7urnSuN1DlMnuPFfa2jp/hTxNusv9rusvNOlytdnIX\n+egUNaivGdGgev4SOJXP63xVdH86xoG33LYCwI+rlDuyOuTy3bvZqEUX3TKqhMwH\nVxRGrArLfTvo5VqmHUXCCHyjWzKgkC1IFfJBa2/hExUY4e9lk2TAi0dPb6JiB/nY\nJer96stIpTktsdCePJIMYKsfbPDfktuSmvE/u6j36po+0/HFr9Lf6LzIi3DigoX+\nuVlRye+VqOcGnlDaLTU20B/DJ5GogA==\n=4ODr\n-----END PGP SIGNATURE-----", "payload": "tree 0e6fefcd3f2d22ccd99f754474dbf4734c4a2161\nparent 737f62cb6eaa5eca23701dbbe8d63465e1c4843b\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596589170 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1596816531 +0200\n\nadopt comments from review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "html_url": "https://github.com/rust-lang/rust/commit/d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737f62cb6eaa5eca23701dbbe8d63465e1c4843b", "url": "https://api.github.com/repos/rust-lang/rust/commits/737f62cb6eaa5eca23701dbbe8d63465e1c4843b", "html_url": "https://github.com/rust-lang/rust/commit/737f62cb6eaa5eca23701dbbe8d63465e1c4843b"}], "stats": {"total": 359, "additions": 231, "deletions": 128}, "files": [{"sha": "3f470f601eff36a92355d2118437891b4857fe86", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -1616,13 +1616,13 @@ Released 2018-09-13\n [`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount\n+[`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n [`needless_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect\n [`needless_continue`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue\n [`needless_doctest_main`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n-[`needless_fn_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_fn_self_type\n [`needless_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n [`needless_pass_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\n [`needless_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop"}, {"sha": "3c39de1abf1e6a80a16ba9442a551d6374adbf86", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -250,11 +250,11 @@ mod mut_mut;\n mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n+mod needless_arbitrary_self_type;\n mod needless_bool;\n mod needless_borrow;\n mod needless_borrowed_ref;\n mod needless_continue;\n-mod needless_fn_self_type;\n mod needless_pass_by_value;\n mod needless_update;\n mod neg_cmp_op_on_partial_ord;\n@@ -718,12 +718,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         &mutex_atomic::MUTEX_ATOMIC,\n         &mutex_atomic::MUTEX_INTEGER,\n+        &needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n         &needless_bool::BOOL_COMPARISON,\n         &needless_bool::NEEDLESS_BOOL,\n         &needless_borrow::NEEDLESS_BORROW,\n         &needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n         &needless_continue::NEEDLESS_CONTINUE,\n-        &needless_fn_self_type::NEEDLESS_FN_SELF_TYPE,\n         &needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         &needless_update::NEEDLESS_UPDATE,\n         &neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n@@ -1029,7 +1029,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n-    store.register_early_pass(|| box needless_fn_self_type::NeedlessFnSelfType);\n+    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n@@ -1374,10 +1374,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-        LintId::of(&needless_fn_self_type::NEEDLESS_FN_SELF_TYPE),\n         LintId::of(&needless_update::NEEDLESS_UPDATE),\n         LintId::of(&neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n         LintId::of(&neg_multiply::NEG_MULTIPLY),\n@@ -1538,7 +1538,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::MIXED_CASE_HEX_LITERALS),\n         LintId::of(&misc_early::REDUNDANT_PATTERN),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(&needless_fn_self_type::NEEDLESS_FN_SELF_TYPE),\n         LintId::of(&neg_multiply::NEG_MULTIPLY),\n         LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n@@ -1607,6 +1606,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),"}, {"sha": "1b23ecd9ad28fe7434574f23a323156b55f56d88", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -0,0 +1,114 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** The lint checks for `self` in fn parameters that\n+    /// specify the `Self`-type explicitly\n+    /// **Why is this bad?** Increases the amount and decreases the readability of code\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self: Self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Could be rewritten as\n+    ///\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    pub NEEDLESS_ARBITRARY_SELF_TYPE,\n+    complexity,\n+    \"type of `self` parameter is already by default `Self`\"\n+}\n+\n+declare_lint_pass!(NeedlessArbitrarySelfType => [NEEDLESS_ARBITRARY_SELF_TYPE]);\n+\n+enum Mode {\n+    Ref(Option<Lifetime>),\n+    Value,\n+}\n+\n+fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mode: &Mode, mutbl: Mutability) {\n+    if_chain! {\n+        if let [segment] = &path.segments[..];\n+        if segment.ident.name == kw::SelfUpper;\n+        then {\n+            let self_param = match (binding_mode, mutbl) {\n+                (Mode::Ref(None), Mutability::Mut) => \"&mut self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Mut) => format!(\"&{} mut self\", &lifetime.ident.name),\n+                (Mode::Ref(None), Mutability::Not) => \"&self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Not) => format!(\"&{} self\", &lifetime.ident.name),\n+                (Mode::Value, Mutability::Mut) => \"mut self\".to_string(),\n+                (Mode::Value, Mutability::Not) => \"self\".to_string(),\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_ARBITRARY_SELF_TYPE,\n+                span,\n+                \"the type of the `self` parameter is arbitrary\",\n+                \"consider to change this parameter to\",\n+                self_param,\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for NeedlessArbitrarySelfType {\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n+        if !p.is_self() {\n+            return;\n+        }\n+\n+        match &p.ty.kind {\n+            TyKind::Path(None, path) => {\n+                if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl)\n+                }\n+            },\n+            TyKind::Rptr(lifetime, mut_ty) => {\n+                if let TyKind::Path(None, path) = &mut_ty.ty.kind {\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "b71f2fbbd46e601da4484f00e01a021e784c3b6d", "filename": "clippy_lints/src/needless_fn_self_type.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/clippy_lints%2Fsrc%2Fneedless_fn_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/clippy_lints%2Fsrc%2Fneedless_fn_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_fn_self_type.rs?ref=737f62cb6eaa5eca23701dbbe8d63465e1c4843b", "patch": "@@ -1,78 +0,0 @@\n-use crate::utils::span_lint_and_help;\n-use if_chain::if_chain;\n-use rustc_ast::ast::{Param, TyKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** The lint checks for `self` fn fn parameters that explicitly\n-    /// specify the `Self`-type explicitly\n-    /// **Why is this bad?** Increases the amount and decreases the readability of code\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// enum ValType {\n-    ///     I32,\n-    ///     I64,\n-    ///     F32,\n-    ///     F64,\n-    /// }\n-    ///\n-    /// impl ValType {\n-    ///     pub fn bytes(self: Self) -> usize {\n-    ///         match self {\n-    ///             Self::I32 | Self::F32 => 4,\n-    ///             Self::I64 | Self::F64 => 8,\n-    ///         }\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// Could be rewritten as\n-    ///\n-    /// ```rust\n-    /// enum ValType {\n-    ///     I32,\n-    ///     I64,\n-    ///     F32,\n-    ///     F64,\n-    /// }\n-    ///\n-    /// impl ValType {\n-    ///     pub fn bytes(self) -> usize {\n-    ///         match self {\n-    ///             Self::I32 | Self::F32 => 4,\n-    ///             Self::I64 | Self::F64 => 8,\n-    ///         }\n-    ///     }\n-    /// }\n-    /// ```\n-    pub NEEDLESS_FN_SELF_TYPE,\n-    style,\n-    \"type of `self` parameter is already by default `Self`\"\n-}\n-\n-declare_lint_pass!(NeedlessFnSelfType => [NEEDLESS_FN_SELF_TYPE]);\n-\n-impl EarlyLintPass for NeedlessFnSelfType {\n-    fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n-        if_chain! {\n-            if p.is_self();\n-            if let TyKind::Path(None, path) = &p.ty.kind;\n-            if let Some(segment) = path.segments.first();\n-            if segment.ident.as_str() == sym!(Self).as_str();\n-            then {\n-                span_lint_and_help(\n-                    cx,\n-                    NEEDLESS_FN_SELF_TYPE,\n-                    p.ty.span,\n-                    \"the type of the `self` parameter is already by default `Self`\",\n-                    None,\n-                    \"consider removing the type specification\",\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "91761e8a86df54113887cc2aa8a881330c59ef9c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -1459,6 +1459,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"bytecount\",\n     },\n+    Lint {\n+        name: \"needless_arbitrary_self_type\",\n+        group: \"complexity\",\n+        desc: \"type of `self` parameter is already by default `Self`\",\n+        deprecation: None,\n+        module: \"needless_arbitrary_self_type\",\n+    },\n     Lint {\n         name: \"needless_bool\",\n         group: \"complexity\",\n@@ -1501,13 +1508,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"doc\",\n     },\n-    Lint {\n-        name: \"needless_fn_self_type\",\n-        group: \"style\",\n-        desc: \"type of `self` parameter is already by default `Self`\",\n-        deprecation: None,\n-        module: \"needless_fn_self_type\",\n-    },\n     Lint {\n         name: \"needless_lifetimes\",\n         group: \"complexity\","}, {"sha": "da4bbcf4a7d71dfe1fdb02ff071298a0155e8359", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -0,0 +1,58 @@\n+#![warn(clippy::needless_arbitrary_self_type)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(self: &Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_bad(mut self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ee803b24071fb15778737717aaf80b1ea9342057", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d635b76eaf3435f9bdce1dcbdd315b0e770493f0/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=d635b76eaf3435f9bdce1dcbdd315b0e770493f0", "patch": "@@ -0,0 +1,46 @@\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:9:16\n+   |\n+LL |     pub fn bad(self: Self) {\n+   |                ^^^^^^^^^^ help: consider to change this parameter to: `self`\n+   |\n+   = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:17:20\n+   |\n+LL |     pub fn mut_bad(mut self: Self) {\n+   |                    ^^^^^^^^^^^^^^ help: consider to change this parameter to: `mut self`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:25:20\n+   |\n+LL |     pub fn ref_bad(self: &Self) {\n+   |                    ^^^^^^^^^^^ help: consider to change this parameter to: `&self`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:29:38\n+   |\n+LL |     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+   |                                      ^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a self`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:37:24\n+   |\n+LL |     pub fn mut_ref_bad(self: &mut Self) {\n+   |                        ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:41:42\n+   |\n+LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+   |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n+\n+error: the type of the `self` parameter is arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:49:28\n+   |\n+LL |     pub fn mut_ref_mut_bad(mut self: &mut Self) {\n+   |                            ^^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "12bb84582ff9fc72f9f1d3ff84206699dbeee15f", "filename": "tests/ui/needless_fn_self_type.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/tests%2Fui%2Fneedless_fn_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/tests%2Fui%2Fneedless_fn_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_fn_self_type.rs?ref=737f62cb6eaa5eca23701dbbe8d63465e1c4843b", "patch": "@@ -1,26 +0,0 @@\n-#![warn(clippy::style, clippy::needless_fn_self_type)]\n-\n-pub enum ValType {\n-    I32,\n-    I64,\n-    F32,\n-    F64,\n-}\n-\n-impl ValType {\n-    pub fn bytes_bad(self: Self) -> usize {\n-        match self {\n-            Self::I32 | Self::F32 => 4,\n-            Self::I64 | Self::F64 => 8,\n-        }\n-    }\n-\n-    pub fn bytes_good(self) -> usize {\n-        match self {\n-            Self::I32 | Self::F32 => 4,\n-            Self::I64 | Self::F64 => 8,\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "703705c78428652d0c3f4e29ddbead7df2173752", "filename": "tests/ui/needless_fn_self_type.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/tests%2Fui%2Fneedless_fn_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/737f62cb6eaa5eca23701dbbe8d63465e1c4843b/tests%2Fui%2Fneedless_fn_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_fn_self_type.stderr?ref=737f62cb6eaa5eca23701dbbe8d63465e1c4843b", "patch": "@@ -1,11 +0,0 @@\n-error: the type of the `self` parameter is already by default `Self`\n-  --> $DIR/needless_fn_self_type.rs:11:28\n-   |\n-LL |     pub fn bytes_bad(self: Self) -> usize {\n-   |                            ^^^^\n-   |\n-   = note: `-D clippy::needless-fn-self-type` implied by `-D warnings`\n-   = help: consider removing the type specification\n-\n-error: aborting due to previous error\n-"}]}