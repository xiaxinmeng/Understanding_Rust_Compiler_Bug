{"sha": "de7662c852353febce09196199202ee7f6e8e6c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNzY2MmM4NTIzNTNmZWJjZTA5MTk2MTk5MjAyZWU3ZjZlOGU2YzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-17T09:46:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-17T10:42:54Z"}, "message": "Check that no file contains trailing ws\n\nrustfmt allows trailing spaces in string literals unfortunately.", "tree": {"sha": "ff98e8e779dfe2c7e2a3eebf84dca6020f5db1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff98e8e779dfe2c7e2a3eebf84dca6020f5db1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7662c852353febce09196199202ee7f6e8e6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7662c852353febce09196199202ee7f6e8e6c3", "html_url": "https://github.com/rust-lang/rust/commit/de7662c852353febce09196199202ee7f6e8e6c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7662c852353febce09196199202ee7f6e8e6c3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089c5547709bb8e7e60388c4f9a5e25c394c1f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/089c5547709bb8e7e60388c4f9a5e25c394c1f39", "html_url": "https://github.com/rust-lang/rust/commit/089c5547709bb8e7e60388c4f9a5e25c394c1f39"}], "stats": {"total": 269, "additions": 142, "deletions": 127}, "files": [{"sha": "949ca7595feb94b969e29bf104ec87d15a182fae", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -12,8 +12,8 @@ use test_utils::covers;\n \n use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n \n-fn def_map(fixture: &str) -> String {\n-    compute_crate_def_map(fixture).dump()\n+fn def_map(ra_fixture: &str) -> String {\n+    compute_crate_def_map(ra_fixture).dump()\n }\n \n fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {"}, {"sha": "ee8df3a26f16ce4e686aed5948b3c8b2f09e727b", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -3,7 +3,7 @@ use super::*;\n #[test]\n fn glob_1() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod foo;\n         use foo::*;\n@@ -76,7 +76,7 @@ fn glob_2() {\n #[test]\n fn glob_privacy_1() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod foo;\n         use foo::*;\n@@ -93,29 +93,29 @@ fn glob_privacy_1() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-    crate\n-    Baz: t v\n-    bar: t\n-    foo: t\n-    \n-    crate::foo\n-    Baz: t v\n-    PrivateStructFoo: t v\n-    bar: t\n-    \n-    crate::foo::bar\n-    Baz: t v\n-    PrivateStructBar: t v\n-    PrivateStructFoo: t v\n-    bar: t\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eePrivateStructFoo: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+        \u22eePrivateStructBar: t v\n+        \u22eePrivateStructFoo: t v\n+        \u22eebar: t\n     \"###\n     );\n }\n \n #[test]\n fn glob_privacy_2() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod foo;\n         use foo::*;\n@@ -133,19 +133,19 @@ fn glob_privacy_2() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-    crate\n-    Foo: t\n-    PubCrateStruct: t v\n-    foo: t\n-    \n-    crate::foo\n-    Foo: t v\n-    bar: t\n-    \n-    crate::foo::bar\n-    PrivateBar: t v\n-    PrivateBaz: t v\n-    PubCrateStruct: t v\n+        \u22eecrate\n+        \u22eeFoo: t\n+        \u22eePubCrateStruct: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeFoo: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eePrivateBar: t v\n+        \u22eePrivateBaz: t v\n+        \u22eePubCrateStruct: t v\n     \"###\n     );\n }\n@@ -154,7 +154,7 @@ fn glob_privacy_2() {\n fn glob_across_crates() {\n     covers!(glob_across_crates);\n     let map = def_map(\n-        \"\n+        r\"\n         //- /main.rs crate:main deps:test_crate\n         use test_crate::*;\n \n@@ -163,8 +163,8 @@ fn glob_across_crates() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-   \u22eecrate\n-   \u22eeBaz: t v\n+        \u22eecrate\n+        \u22eeBaz: t v\n     \"###\n     );\n }\n@@ -173,7 +173,7 @@ fn glob_across_crates() {\n fn glob_privacy_across_crates() {\n     covers!(glob_across_crates);\n     let map = def_map(\n-        \"\n+        r\"\n         //- /main.rs crate:main deps:test_crate\n         use test_crate::*;\n \n@@ -183,8 +183,8 @@ fn glob_privacy_across_crates() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-   \u22eecrate\n-   \u22eeBaz: t v\n+        \u22eecrate\n+        \u22eeBaz: t v\n     \"###\n     );\n }\n@@ -202,10 +202,10 @@ fn glob_enum() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-   \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeBaz: t v\n-   \u22eeFoo: t\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eeBaz: t v\n+        \u22eeFoo: t\n     \"###\n     );\n }\n@@ -214,7 +214,7 @@ fn glob_enum() {\n fn glob_enum_group() {\n     covers!(glob_enum_group);\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         enum Foo {\n             Bar, Baz\n@@ -223,10 +223,10 @@ fn glob_enum_group() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-   \u22eecrate\n-   \u22eeBar: t v\n-   \u22eeBaz: t v\n-   \u22eeFoo: t\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eeBaz: t v\n+        \u22eeFoo: t\n     \"###\n     );\n }"}, {"sha": "b0befdfbd6144a44ff64095d820844b02e6549d6", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -3,7 +3,7 @@ use super::*;\n #[test]\n fn macro_rules_are_globally_visible() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         macro_rules! structs {\n             ($($i:ident),*) => {\n@@ -31,7 +31,7 @@ fn macro_rules_are_globally_visible() {\n #[test]\n fn macro_rules_can_define_modules() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         macro_rules! m {\n             ($name:ident) => { mod $name;  }\n@@ -51,21 +51,21 @@ fn macro_rules_can_define_modules() {\n         \",\n     );\n     assert_snapshot!(map, @r###\"\n-    crate\n-    m: t\n-    n1: t\n-    \n-    crate::m\n-    n3: t\n-    \n-    crate::m::n3\n-    Y: t v\n-    \n-    crate::n1\n-    n2: t\n-    \n-    crate::n1::n2\n-    X: t v\n+        \u22eecrate\n+        \u22eem: t\n+        \u22een1: t\n+        \u22ee\n+        \u22eecrate::m\n+        \u22een3: t\n+        \u22ee\n+        \u22eecrate::m::n3\n+        \u22eeY: t v\n+        \u22ee\n+        \u22eecrate::n1\n+        \u22een2: t\n+        \u22ee\n+        \u22eecrate::n1::n2\n+        \u22eeX: t v\n     \"###);\n }\n "}, {"sha": "b502a40797e2209c6ac753dec8beb0398f3c05f9", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -4,7 +4,7 @@ use super::*;\n fn name_res_works_for_broken_modules() {\n     covers!(name_res_works_for_broken_modules);\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod foo // no `;`, no body\n \n@@ -28,7 +28,7 @@ fn name_res_works_for_broken_modules() {\n #[test]\n fn nested_module_resolution() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod n1;\n \n@@ -55,7 +55,7 @@ fn nested_module_resolution() {\n #[test]\n fn nested_module_resolution_2() {\n     let map = def_map(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod prelude;\n         mod iter;\n@@ -77,23 +77,23 @@ fn nested_module_resolution_2() {\n     );\n \n     assert_snapshot!(map, @r###\"\n-    crate\n-    iter: t\n-    prelude: t\n-    \n-    crate::iter\n-    Iterator: t\n-    traits: t\n-    \n-    crate::iter::traits\n-    Iterator: t\n-    iterator: t\n-    \n-    crate::iter::traits::iterator\n-    Iterator: t\n-    \n-    crate::prelude\n-    Iterator: t\n+        \u22eecrate\n+        \u22eeiter: t\n+        \u22eeprelude: t\n+        \u22ee\n+        \u22eecrate::iter\n+        \u22eeIterator: t\n+        \u22eetraits: t\n+        \u22ee\n+        \u22eecrate::iter::traits\n+        \u22eeIterator: t\n+        \u22eeiterator: t\n+        \u22ee\n+        \u22eecrate::iter::traits::iterator\n+        \u22eeIterator: t\n+        \u22ee\n+        \u22eecrate::prelude\n+        \u22eeIterator: t\n     \"###);\n }\n \n@@ -780,17 +780,17 @@ fn nested_out_of_line_module() {\n     );\n \n     assert_snapshot!(map, @r###\"\n-    crate\n-    a: t\n-    \n-    crate::a\n-    b: t\n-    \n-    crate::a::b\n-    c: t\n-    \n-    crate::a::b::c\n-    X: t v\n+        \u22eecrate\n+        \u22eea: t\n+        \u22ee\n+        \u22eecrate::a\n+        \u22eeb: t\n+        \u22ee\n+        \u22eecrate::a::b\n+        \u22eec: t\n+        \u22ee\n+        \u22eecrate::a::b::c\n+        \u22eeX: t v\n     \"###);\n }\n \n@@ -812,16 +812,16 @@ fn nested_out_of_line_module_with_path() {\n     );\n \n     assert_snapshot!(map, @r###\"\n-    crate\n-    a: t\n-    \n-    crate::a\n-    b: t\n-    \n-    crate::a::b\n-    c: t\n-    \n-    crate::a::b::c\n-    X: t v\n+        \u22eecrate\n+        \u22eea: t\n+        \u22ee\n+        \u22eecrate::a\n+        \u22eeb: t\n+        \u22ee\n+        \u22eecrate::a::b\n+        \u22eec: t\n+        \u22ee\n+        \u22eecrate::a::b::c\n+        \u22eeX: t v\n     \"###);\n }"}, {"sha": "502fcb0cf6e9d3408eedb993b71521f4aa567536", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -100,8 +100,8 @@ mod tests {\n \n     use crate::mock_analysis::analysis_and_position;\n \n-    fn check_goto(fixture: &str, expected: &str, expected_range: &str) {\n-        let (analysis, pos) = analysis_and_position(fixture);\n+    fn check_goto(ra_fixture: &str, expected: &str, expected_range: &str) {\n+        let (analysis, pos) = analysis_and_position(ra_fixture);\n \n         let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n@@ -790,8 +790,8 @@ mod tests {\n     #[test]\n     fn goto_def_in_local_macro() {\n         check_goto(\n-            \"\n-            //- /lib.rs            \n+            r\"\n+            //- /lib.rs\n             fn bar() {\n                 macro_rules! foo { () => { () } }\n                 <|>foo!();"}, {"sha": "5ae86c87c9481525ab0f93586864c5492afa86d8", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/de7662c852353febce09196199202ee7f6e8e6c3/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7662c852353febce09196199202ee7f6e8e6c3/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=de7662c852353febce09196199202ee7f6e8e6c3", "patch": "@@ -14,6 +14,7 @@ fn rust_files_are_tidy() {\n     for path in rust_files() {\n         let text = fs2::read_to_string(&path).unwrap();\n         check_todo(&path, &text);\n+        check_trailing_ws(&path, &text);\n         tidy_docs.visit(&path, &text);\n     }\n     tidy_docs.finish();\n@@ -33,6 +34,17 @@ fn check_todo(path: &Path, text: &str) {\n     }\n }\n \n+fn check_trailing_ws(path: &Path, text: &str) {\n+    if is_exclude_dir(path, &[\"test_data\"]) {\n+        return;\n+    }\n+    for line in text.lines() {\n+        if line.chars().last().map(char::is_whitespace) == Some(true) {\n+            panic!(\"Trailing whitespace in {}\", path.display())\n+        }\n+    }\n+}\n+\n #[derive(Default)]\n struct TidyDocs {\n     missing_docs: Vec<String>,\n@@ -41,7 +53,13 @@ struct TidyDocs {\n \n impl TidyDocs {\n     fn visit(&mut self, path: &Path, text: &str) {\n-        if is_exclude_dir(path) || is_exclude_file(path) {\n+        // Test hopefully don't really need comments, and for assists we already\n+        // have special comments which are source of doc tests and user docs.\n+        if is_exclude_dir(path, &[\"tests\", \"test_data\", \"handlers\"]) {\n+            return;\n+        }\n+\n+        if is_exclude_file(path) {\n             return;\n         }\n \n@@ -58,21 +76,6 @@ impl TidyDocs {\n             self.missing_docs.push(path.display().to_string());\n         }\n \n-        fn is_exclude_dir(p: &Path) -> bool {\n-            // Test hopefully don't really need comments, and for assists we already\n-            // have special comments which are source of doc tests and user docs.\n-            let exclude_dirs = [\"tests\", \"test_data\", \"handlers\"];\n-            let mut cur_path = p;\n-            while let Some(path) = cur_path.parent() {\n-                if exclude_dirs.iter().any(|dir| path.ends_with(dir)) {\n-                    return true;\n-                }\n-                cur_path = path;\n-            }\n-\n-            false\n-        }\n-\n         fn is_exclude_file(d: &Path) -> bool {\n             let file_names = [\"tests.rs\"];\n \n@@ -128,6 +131,18 @@ impl TidyDocs {\n     }\n }\n \n+fn is_exclude_dir(p: &Path, dirs_to_exclude: &[&str]) -> bool {\n+    let mut cur_path = p;\n+    while let Some(path) = cur_path.parent() {\n+        if dirs_to_exclude.iter().any(|dir| path.ends_with(dir)) {\n+            return true;\n+        }\n+        cur_path = path;\n+    }\n+\n+    false\n+}\n+\n fn rust_files() -> impl Iterator<Item = PathBuf> {\n     let crates = project_root().join(\"crates\");\n     let iter = WalkDir::new(crates);"}]}