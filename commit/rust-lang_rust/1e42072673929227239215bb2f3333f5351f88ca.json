{"sha": "1e42072673929227239215bb2f3333f5351f88ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDIwNzI2NzM5MjkyMjcyMzkyMTViYjJmMzMzM2Y1MzUxZjg4Y2E=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-09-12T09:29:46Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-31T18:25:56Z"}, "message": "rustc_codegen_ssa: hide address ops from the declare_local interface.", "tree": {"sha": "c05fb1dd007d7d33640a8f97437aa026d68f0af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c05fb1dd007d7d33640a8f97437aa026d68f0af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e42072673929227239215bb2f3333f5351f88ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e42072673929227239215bb2f3333f5351f88ca", "html_url": "https://github.com/rust-lang/rust/commit/1e42072673929227239215bb2f3333f5351f88ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e42072673929227239215bb2f3333f5351f88ca/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e7743da8ba6062c89b700957fda01f54732c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e7743da8ba6062c89b700957fda01f54732c30", "html_url": "https://github.com/rust-lang/rust/commit/c2e7743da8ba6062c89b700957fda01f54732c30"}], "stats": {"total": 149, "additions": 77, "deletions": 72}, "files": [{"sha": "7713fe47004b93182c0608c9a2bb56343ef2c901", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 53, "deletions": 48, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=1e42072673929227239215bb2f3333f5351f88ca", "patch": "@@ -1,7 +1,6 @@\n // See doc.rs for documentation.\n mod doc;\n \n-use rustc_codegen_ssa::mir::debuginfo::VariableAccess::*;\n use rustc_codegen_ssa::mir::debuginfo::VariableKind::*;\n \n use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit};\n@@ -28,17 +27,18 @@ use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_index::vec::IndexVec;\n use rustc_codegen_ssa::debuginfo::type_names;\n-use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, DebugScope, VariableAccess,\n+use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, DebugScope,\n     VariableKind};\n \n use libc::c_uint;\n use std::cell::RefCell;\n use std::ffi::{CStr, CString};\n \n+use smallvec::SmallVec;\n use syntax_pos::{self, BytePos, Span, Pos};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n+use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Size};\n use rustc_codegen_ssa::traits::*;\n \n pub mod gdb;\n@@ -153,7 +153,9 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         variable_name: ast::Name,\n         variable_type: Ty<'tcx>,\n         scope_metadata: &'ll DIScope,\n-        variable_access: VariableAccess<'_, &'ll Value>,\n+        variable_alloca: Self::Value,\n+        direct_offset: Size,\n+        indirect_offsets: &[Size],\n         variable_kind: VariableKind,\n         span: Span,\n     ) {\n@@ -174,43 +176,55 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         };\n         let align = cx.align_of(variable_type);\n \n-        let name = SmallCStr::new(&variable_name.as_str());\n-        match (variable_access, &[][..]) {\n-            (DirectVariable { alloca }, address_operations) |\n-            (IndirectVariable {alloca, address_operations}, _) => {\n-                let metadata = unsafe {\n-                    llvm::LLVMRustDIBuilderCreateVariable(\n-                        DIB(cx),\n-                        dwarf_tag,\n-                        scope_metadata,\n-                        name.as_ptr(),\n-                        file_metadata,\n-                        loc.line as c_uint,\n-                        type_metadata,\n-                        cx.sess().opts.optimize != config::OptLevel::No,\n-                        DIFlags::FlagZero,\n-                        argument_index,\n-                        align.bytes() as u32,\n-                    )\n-                };\n-                source_loc::set_debug_location(self,\n-                    InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));\n-                unsafe {\n-                    let debug_loc = llvm::LLVMGetCurrentDebugLocation(self.llbuilder);\n-                    let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n-                        DIB(cx),\n-                        alloca,\n-                        metadata,\n-                        address_operations.as_ptr(),\n-                        address_operations.len() as c_uint,\n-                        debug_loc,\n-                        self.llbb());\n-\n-                    llvm::LLVMSetInstDebugLocation(self.llbuilder, instr);\n-                }\n-                source_loc::set_debug_location(self, UnknownLocation);\n+        // Convert the direct and indirect offsets to address ops.\n+        let op_deref = || unsafe { llvm::LLVMRustDIBuilderCreateOpDeref() };\n+        let op_plus_uconst = || unsafe { llvm::LLVMRustDIBuilderCreateOpPlusUconst() };\n+        let mut addr_ops = SmallVec::<[_; 8]>::new();\n+\n+        if direct_offset.bytes() > 0 {\n+            addr_ops.push(op_plus_uconst());\n+            addr_ops.push(direct_offset.bytes() as i64);\n+        }\n+        for &offset in indirect_offsets {\n+            addr_ops.push(op_deref());\n+            if offset.bytes() > 0 {\n+                addr_ops.push(op_plus_uconst());\n+                addr_ops.push(offset.bytes() as i64);\n             }\n         }\n+\n+        let name = SmallCStr::new(&variable_name.as_str());\n+        let metadata = unsafe {\n+            llvm::LLVMRustDIBuilderCreateVariable(\n+                DIB(cx),\n+                dwarf_tag,\n+                scope_metadata,\n+                name.as_ptr(),\n+                file_metadata,\n+                loc.line as c_uint,\n+                type_metadata,\n+                cx.sess().opts.optimize != config::OptLevel::No,\n+                DIFlags::FlagZero,\n+                argument_index,\n+                align.bytes() as u32,\n+            )\n+        };\n+        source_loc::set_debug_location(self,\n+            InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));\n+        unsafe {\n+            let debug_loc = llvm::LLVMGetCurrentDebugLocation(self.llbuilder);\n+            let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n+                DIB(cx),\n+                variable_alloca,\n+                metadata,\n+                addr_ops.as_ptr(),\n+                addr_ops.len() as c_uint,\n+                debug_loc,\n+                self.llbb());\n+\n+            llvm::LLVMSetInstDebugLocation(self.llbuilder, instr);\n+        }\n+        source_loc::set_debug_location(self, UnknownLocation);\n     }\n \n     fn set_source_location(\n@@ -571,13 +585,4 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn debuginfo_finalize(&self) {\n         finalize(self)\n     }\n-\n-    fn debuginfo_upvar_ops_sequence(&self, byte_offset_of_var_in_env: u64) -> [i64; 4] {\n-        unsafe {\n-            [llvm::LLVMRustDIBuilderCreateOpDeref(),\n-             llvm::LLVMRustDIBuilderCreateOpPlusUconst(),\n-             byte_offset_of_var_in_env as i64,\n-             llvm::LLVMRustDIBuilderCreateOpDeref()]\n-        }\n-    }\n }"}, {"sha": "e7562c399b22256652e0dba04f52478b4b5d368f", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=1e42072673929227239215bb2f3333f5351f88ca", "patch": "@@ -38,6 +38,7 @@ extern crate rustc_fs_util;\n extern crate rustc_driver as _;\n \n #[macro_use] extern crate log;\n+extern crate smallvec;\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;"}, {"sha": "4e9d859c5c526711a57f82861619439a3a255853", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=1e42072673929227239215bb2f3333f5351f88ca", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n use rustc::session::config::DebugInfo;\n use rustc::ty::{self, UpvarSubsts};\n-use rustc::ty::layout::HasTyCtxt;\n+use rustc::ty::layout::{HasTyCtxt, Size};\n use rustc_target::abi::{Variants, VariantIdx};\n use crate::traits::*;\n \n@@ -19,14 +19,6 @@ pub struct FunctionDebugContext<D> {\n     pub defining_crate: CrateNum,\n }\n \n-pub enum VariableAccess<'a, V> {\n-    // The llptr given is an alloca containing the variable's value\n-    DirectVariable { alloca: V },\n-    // The llptr given is an alloca containing the start of some pointer chain\n-    // leading to the variable's content.\n-    IndirectVariable { alloca: V, address_operations: &'a [i64] }\n-}\n-\n pub enum VariableKind {\n     ArgumentVariable(usize /*index*/),\n     LocalVariable,\n@@ -188,8 +180,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             });\n             if let Some(scope) = scope {\n                 bx.declare_local(debug_context, name, place.layout.ty, scope,\n-                    VariableAccess::DirectVariable { alloca: place.llval },\n-                    kind, span);\n+                    place.llval, Size::ZERO, &[], kind, span);\n             }\n         }\n     }\n@@ -310,30 +301,35 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                     None => &closure_layout.fields,\n                 };\n-                let byte_offset_of_var_in_env = fields.offset(field).bytes();\n-\n-                let ops = bx.debuginfo_upvar_ops_sequence(byte_offset_of_var_in_env);\n \n                 // The environment and the capture can each be indirect.\n-                let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n+                let mut direct_offset = Size::ZERO;\n+                let indirect_offsets = [\n+                    fields.offset(field),\n+                    Size::ZERO,\n+                ];\n+                let mut indirect_offsets = &indirect_offsets[..];\n+\n+                if !env_ref {\n+                    direct_offset = indirect_offsets[0];\n+                    indirect_offsets = &indirect_offsets[1..];\n+                }\n \n                 let ty = if let (true, &ty::Ref(_, ty, _)) = (by_ref, &ty.kind) {\n                     ty\n                 } else {\n-                    ops = &ops[..ops.len() - 1];\n+                    indirect_offsets = &indirect_offsets[..indirect_offsets.len() - 1];\n                     ty\n                 };\n \n-                let variable_access = VariableAccess::IndirectVariable {\n-                    alloca: place.llval,\n-                    address_operations: &ops\n-                };\n                 bx.declare_local(\n                     debug_context,\n                     name,\n                     ty,\n                     var_scope,\n-                    variable_access,\n+                    place.llval,\n+                    direct_offset,\n+                    indirect_offsets,\n                     VariableKind::LocalVariable,\n                     var_span\n                 );"}, {"sha": "802eaaa357ac09c4ea4245a2f28697fa99de909f", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e42072673929227239215bb2f3333f5351f88ca/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=1e42072673929227239215bb2f3333f5351f88ca", "patch": "@@ -1,8 +1,9 @@\n use super::BackendTypes;\n-use crate::mir::debuginfo::{FunctionDebugContext, VariableAccess, VariableKind};\n+use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n use rustc::ty::{self, Ty, Instance};\n+use rustc::ty::layout::Size;\n use syntax::ast::Name;\n use syntax_pos::{SourceFile, Span};\n \n@@ -28,7 +29,6 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         defining_crate: CrateNum,\n     ) -> Self::DIScope;\n     fn debuginfo_finalize(&self);\n-    fn debuginfo_upvar_ops_sequence(&self, byte_offset_of_var_in_env: u64) -> [i64; 4];\n }\n \n pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n@@ -38,7 +38,10 @@ pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n         variable_name: Name,\n         variable_type: Ty<'tcx>,\n         scope_metadata: Self::DIScope,\n-        variable_access: VariableAccess<'_, Self::Value>,\n+        variable_alloca: Self::Value,\n+        direct_offset: Size,\n+        // NB: each offset implies a deref (i.e. they're steps in a pointer chain).\n+        indirect_offsets: &[Size],\n         variable_kind: VariableKind,\n         span: Span,\n     );"}]}