{"sha": "ca957edf96199c61496254f8534fe09221e03c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTU3ZWRmOTYxOTljNjE0OTYyNTRmODUzNGZlMDkyMjFlMDNjMjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:36:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T13:36:25Z"}, "message": "rename to source_map", "tree": {"sha": "01533556d879690fe5c2b9dab0f2e1ccd658edda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01533556d879690fe5c2b9dab0f2e1ccd658edda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca957edf96199c61496254f8534fe09221e03c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca957edf96199c61496254f8534fe09221e03c26", "html_url": "https://github.com/rust-lang/rust/commit/ca957edf96199c61496254f8534fe09221e03c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca957edf96199c61496254f8534fe09221e03c26/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c5383103e2b79b05e2669889d44e51988932a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c5383103e2b79b05e2669889d44e51988932a6", "html_url": "https://github.com/rust-lang/rust/commit/f4c5383103e2b79b05e2669889d44e51988932a6"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "7fc14634bcffc102ddbbe77708cee1d698a31cd8", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca957edf96199c61496254f8534fe09221e03c26/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca957edf96199c61496254f8534fe09221e03c26/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=ca957edf96199c61496254f8534fe09221e03c26", "patch": "@@ -497,8 +497,8 @@ impl Function {\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n         let scopes = db.expr_scopes(*self);\n-        let syntax_mapping = db.body_with_source_map(*self).1;\n-        ScopesWithSyntaxMapping { scopes, syntax_mapping }\n+        let source_map = db.body_with_source_map(*self).1;\n+        ScopesWithSyntaxMapping { scopes, source_map }\n     }\n \n     pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {"}, {"sha": "578b10c651e6da179997998b5c3a4560b34b8731", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca957edf96199c61496254f8534fe09221e03c26/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca957edf96199c61496254f8534fe09221e03c26/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=ca957edf96199c61496254f8534fe09221e03c26", "patch": "@@ -109,7 +109,7 @@ impl ExprScopes {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ScopesWithSyntaxMapping {\n-    pub syntax_mapping: Arc<BodySourceMap>,\n+    pub source_map: Arc<BodySourceMap>,\n     pub scopes: Arc<ExprScopes>,\n }\n \n@@ -138,7 +138,7 @@ impl ScopesWithSyntaxMapping {\n         self.scopes\n             .scope_for\n             .iter()\n-            .filter_map(|(id, scope)| Some((self.syntax_mapping.expr_syntax(*id)?, scope)))\n+            .filter_map(|(id, scope)| Some((self.source_map.expr_syntax(*id)?, scope)))\n             // find containing scope\n             .min_by_key(|(ptr, _scope)| {\n                 (!(ptr.range().start() <= offset && offset <= ptr.range().end()), ptr.range().len())\n@@ -155,7 +155,7 @@ impl ScopesWithSyntaxMapping {\n             .scopes\n             .scope_for\n             .iter()\n-            .filter_map(|(id, scope)| Some((self.syntax_mapping.expr_syntax(*id)?, scope)))\n+            .filter_map(|(id, scope)| Some((self.source_map.expr_syntax(*id)?, scope)))\n             .map(|(ptr, scope)| (ptr.range(), scope))\n             .filter(|(range, _)| range.start() <= offset && range.is_subrange(&r) && *range != r);\n \n@@ -185,7 +185,7 @@ impl ScopesWithSyntaxMapping {\n         ret.and_then(|entry| {\n             Some(ScopeEntryWithSyntax {\n                 name: entry.name().clone(),\n-                ptr: self.syntax_mapping.pat_syntax(entry.pat())?,\n+                ptr: self.source_map.pat_syntax(entry.pat())?,\n             })\n         })\n     }\n@@ -211,7 +211,7 @@ impl ScopesWithSyntaxMapping {\n     pub fn scope_for(&self, node: &SyntaxNode) -> Option<ScopeId> {\n         node.ancestors()\n             .map(SyntaxNodePtr::new)\n-            .filter_map(|ptr| self.syntax_mapping.syntax_expr(ptr))\n+            .filter_map(|ptr| self.source_map.syntax_expr(ptr))\n             .find_map(|it| self.scopes.scope_for(it))\n     }\n }\n@@ -316,12 +316,10 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, syntax_mapping) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n-        let scopes = ScopesWithSyntaxMapping {\n-            scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(syntax_mapping),\n-        };\n+        let scopes =\n+            ScopesWithSyntaxMapping { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n         let actual = scopes\n             .scope_chain(marker.syntax())\n             .flat_map(|scope| scopes.scopes.entries(scope))\n@@ -417,12 +415,10 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, syntax_mapping) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n-        let scopes = ScopesWithSyntaxMapping {\n-            scopes: Arc::new(scopes),\n-            syntax_mapping: Arc::new(syntax_mapping),\n-        };\n+        let scopes =\n+            ScopesWithSyntaxMapping { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n         let local_name_entry = scopes.resolve_local_name(name_ref).unwrap();\n         let local_name = local_name_entry.ptr();\n         assert_eq!(local_name.range(), expected_name.syntax().range());"}]}