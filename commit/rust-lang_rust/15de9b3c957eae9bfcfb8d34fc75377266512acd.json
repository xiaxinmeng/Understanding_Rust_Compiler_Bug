{"sha": "15de9b3c957eae9bfcfb8d34fc75377266512acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZGU5YjNjOTU3ZWFlOWJmY2ZiOGQzNGZjNzUzNzcyNjY1MTJhY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-26T23:24:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T23:43:18Z"}, "message": "rt: Make the box annihilator walk and delete contents", "tree": {"sha": "ef6463135d82b357ceb74f3357168baccc37b249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6463135d82b357ceb74f3357168baccc37b249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15de9b3c957eae9bfcfb8d34fc75377266512acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15de9b3c957eae9bfcfb8d34fc75377266512acd", "html_url": "https://github.com/rust-lang/rust/commit/15de9b3c957eae9bfcfb8d34fc75377266512acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15de9b3c957eae9bfcfb8d34fc75377266512acd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5747fe7a2c0df47da1e062e81988707d9209bb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5747fe7a2c0df47da1e062e81988707d9209bb7e", "html_url": "https://github.com/rust-lang/rust/commit/5747fe7a2c0df47da1e062e81988707d9209bb7e"}], "stats": {"total": 195, "additions": 194, "deletions": 1}, "files": [{"sha": "8420c709296ebd3dee3895a5c690ceda2b6a82ee", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 194, "deletions": 1, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/15de9b3c957eae9bfcfb8d34fc75377266512acd/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/15de9b3c957eae9bfcfb8d34fc75377266512acd/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=15de9b3c957eae9bfcfb8d34fc75377266512acd", "patch": "@@ -1,6 +1,198 @@\n #include \"rust_internal.h\"\n #include \"rust_shape.h\"\n \n+class annihilator : public shape::data<annihilator,shape::ptr> {\n+    friend class shape::data<annihilator,shape::ptr>;\n+\n+    annihilator(const annihilator &other, const shape::ptr &in_dp)\n+        : shape::data<annihilator,shape::ptr>(other.task, other.align,\n+                                        other.sp, other.params,\n+                                        other.tables, in_dp) {}\n+\n+    annihilator(const annihilator &other,\n+          const uint8_t *in_sp,\n+          const shape::type_param *in_params,\n+          const rust_shape_tables *in_tables = NULL)\n+        : shape::data<annihilator,shape::ptr>(other.task,\n+                                        other.align,\n+                                        in_sp,\n+                                        in_params,\n+                                        in_tables ? in_tables : other.tables,\n+                                        other.dp) {}\n+\n+    annihilator(const annihilator &other,\n+          const uint8_t *in_sp,\n+          const shape::type_param *in_params,\n+          const rust_shape_tables *in_tables,\n+          shape::ptr in_dp)\n+        : shape::data<annihilator,shape::ptr>(other.task,\n+                                        other.align,\n+                                        in_sp,\n+                                        in_params,\n+                                        in_tables,\n+                                        in_dp) {}\n+\n+    annihilator(rust_task *in_task,\n+          bool in_align,\n+          const uint8_t *in_sp,\n+          const shape::type_param *in_params,\n+          const rust_shape_tables *in_tables,\n+          uint8_t *in_data)\n+        : shape::data<annihilator,shape::ptr>(in_task, in_align, in_sp,\n+                                        in_params, in_tables, in_data) {}\n+\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n+        void *vec = shape::get_dp<void *>(dp);\n+        walk_vec2(is_pod, get_vec_data_range(dp));\n+        task->kernel->free(vec);\n+    }\n+\n+    void walk_vec2(bool is_pod,\n+                  const std::pair<shape::ptr,shape::ptr> &data_range) {\n+        annihilator sub(*this, data_range.first);\n+        shape::ptr data_end = sub.end_dp = data_range.second;\n+        while (sub.dp < data_end) {\n+            sub.walk_reset();\n+            sub.align = true;\n+        }\n+    }\n+\n+    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n+        shape::data<annihilator,shape::ptr>::walk_variant1(tinfo, tag_variant);\n+    }\n+\n+    void walk_uniq2() {\n+        void *x = *((void **)dp);\n+        // free contents first:\n+        shape::data<annihilator,shape::ptr>::walk_uniq_contents1();\n+        // now free the ptr:\n+        task->kernel->free(x);\n+    }\n+\n+    void walk_box2() {\n+        // In annihilator phase, do not walk the box contents.  There is an\n+        // outer loop walking all remaining boxes, and this box may well\n+        // have been freed already!\n+    }\n+\n+    void walk_fn2(char code) {\n+        switch (code) {\n+          case shape::SHAPE_UNIQ_FN: {\n+              fn_env_pair pair = *(fn_env_pair*)dp;\n+\n+              if (pair.env) {\n+                  // free closed over data:\n+                  shape::data<annihilator,shape::ptr>::walk_fn_contents1();\n+                  \n+                  // now free the ptr:\n+                  task->kernel->free(pair.env);\n+              }\n+              break;\n+          }\n+          case shape::SHAPE_BOX_FN: {\n+              // the box will be visited separately:\n+              shape::bump_dp<void*>(dp); // skip over the code ptr\n+              walk_box2();               // walk over the environment ptr\n+              break;\n+          }\n+          case shape::SHAPE_BARE_FN:         // Does not close over data.\n+          case shape::SHAPE_STACK_FN: break; // Not reachable from heap.\n+          default: abort();\n+        }\n+    }\n+\n+    void walk_obj2() {\n+        return;\n+    }\n+\n+    void walk_iface2() {\n+        walk_box2();\n+    }\n+\n+    void walk_tydesc2(char kind) {\n+        switch(kind) {\n+          case shape::SHAPE_TYDESC:\n+          case shape::SHAPE_SEND_TYDESC:\n+            break;\n+          default: abort();\n+        }\n+    }\n+\n+    struct run_dtor_args {\n+        const shape::rust_fn *dtor;\n+        void *data;\n+    };\n+\n+    typedef void (*dtor)(void **retptr, void *env, void *dptr);\n+\n+    static void run_dtor(run_dtor_args *args) {\n+        dtor f = (dtor)args->dtor;\n+        f(NULL, args->dtor->env, args->data);\n+    }\n+\n+    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n+                   const shape::type_param *params, const uint8_t *end_sp,\n+                   bool live) {\n+        void *data = (void*)(uintptr_t)dp;\n+        // Switch back to the Rust stack to run the destructor\n+        run_dtor_args args = {dtor, data};\n+        task->call_on_rust_stack((void*)&args, (void*)run_dtor);\n+\n+        while (this->sp != end_sp) {\n+            this->walk();\n+            align = true;\n+        }\n+    }\n+\n+    void walk_subcontext2(annihilator &sub) { sub.walk(); }\n+\n+    void walk_uniq_contents2(annihilator &sub) { sub.walk(); }\n+\n+    void walk_struct2(const uint8_t *end_sp) {\n+        while (this->sp != end_sp) {\n+            this->walk();\n+            align = true;\n+        }\n+    }\n+\n+    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n+                      const std::pair<const uint8_t *,const uint8_t *>\n+                      variant_ptr_and_end) {\n+        annihilator sub(*this, variant_ptr_and_end.first, tinfo.params);\n+\n+        const uint8_t *variant_end = variant_ptr_and_end.second;\n+        while (sub.sp < variant_end) {\n+            sub.walk();\n+            align = true;\n+        }\n+    }\n+\n+    template<typename T>\n+    inline void walk_number2() { /* no-op */ }\n+\n+public:\n+    static void do_annihilate(rust_task *task, rust_opaque_box *box);\n+};\n+\n+void\n+annihilator::do_annihilate(rust_task *task, rust_opaque_box *box) {\n+    const type_desc *tydesc = box->td;\n+    uint8_t *p = (uint8_t*) box_body(box);\n+    shape::arena arena;\n+    shape::type_param *params =\n+        shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n+\n+    annihilator annihilator(task, true, tydesc->shape,\n+                            params, tydesc->shape_tables, p);\n+    annihilator.walk();\n+    task->boxed.free(box);\n+}\n+\n+void\n+annihilate_box(rust_task *task, rust_opaque_box *box) {\n+    annihilator::do_annihilate(task, box);\n+}\n+\n void\n annihilate_boxes(rust_task *task) {\n     LOG(task, gc, \"annihilating boxes for task %p\", task);\n@@ -10,6 +202,7 @@ annihilate_boxes(rust_task *task) {\n     while (box != NULL) {\n         rust_opaque_box *tmp = box;\n         box = box->next;\n-        boxed->free(tmp);\n+        annihilate_box(task, tmp);\n     }\n }\n+"}]}