{"sha": "0088f84c8841d8dcd392c89367c06baa5aee0736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwODhmODRjODg0MWQ4ZGNkMzkyYzg5MzY3YzA2YmFhNWFlZTA3MzY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T06:52:02Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "Allow several samples in \"// Assist:\" comments.", "tree": {"sha": "4b06eced711f3b0137b7768a657705d731309f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b06eced711f3b0137b7768a657705d731309f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0088f84c8841d8dcd392c89367c06baa5aee0736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0088f84c8841d8dcd392c89367c06baa5aee0736", "html_url": "https://github.com/rust-lang/rust/commit/0088f84c8841d8dcd392c89367c06baa5aee0736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0088f84c8841d8dcd392c89367c06baa5aee0736/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580e5e277a33a9bc0337eb3b7bebe411446dc24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/580e5e277a33a9bc0337eb3b7bebe411446dc24c", "html_url": "https://github.com/rust-lang/rust/commit/580e5e277a33a9bc0337eb3b7bebe411446dc24c"}], "stats": {"total": 265, "additions": 223, "deletions": 42}, "files": [{"sha": "aa32c698a2b0518367a08fc96e371cdd9dacb75d", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -33,9 +33,9 @@ static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n //     }\n // }\n // ```\n-// FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n-// FIXME: should also add support for the case fun(f: &Foo) -> &$0Foo\n pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    // FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n+    // FIXME: should also add support for the case fun(f: &Foo) -> &$0Foo\n     let lifetime =\n         ctx.find_node_at_offset::<ast::Lifetime>().filter(|lifetime| lifetime.text() == \"'_\")?;\n     let lifetime_loc = lifetime.lifetime_ident_token()?.text_range();"}, {"sha": "cd4eb7c15e9085ff1ee83b6e9bf3b5b7404d45fd", "filename": "crates/ide_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -20,7 +20,6 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // struct Foo {foo: i32, bar: i32};\n // const test: Foo = Foo {foo: 1, bar: 0}\n // ```\n-//\n pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let record = ctx\n         .find_node_at_offset::<ast::RecordExpr>()"}, {"sha": "d398373c3413b342bef7dd3362b40f25dd23d7c4", "filename": "crates/ide_assists/src/handlers/reorder_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -44,7 +44,6 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n //     fn c() {}\n // }\n // ```\n-//\n pub(crate) fn reorder_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_ast = ctx.find_node_at_offset::<ast::Impl>()?;\n     let items = impl_ast.assoc_item_list()?;"}, {"sha": "75e501d3dd3f5c9ffa3af8b7beaac2f11e6da663", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -11,6 +11,77 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: sort_items\n //\n+// Sorts item members alphabetically: fields, enum variants and methods.\n+//\n+// ```\n+// struct $0Foo { second: u32, first: String }\n+// ```\n+// ->\n+// ```\n+// struct Foo { first: String, second: u32 }\n+// ```\n+// ---\n+// ```\n+// trait $0Bar {\n+//     fn second(&self) -> u32;\n+//     fn first(&self) -> String;\n+// }\n+// ```\n+// ->\n+// ```\n+// trait Bar {\n+//     fn first(&self) -> String;\n+//     fn second(&self) -> u32;\n+// }\n+// ```\n+// ---\n+// ```\n+// struct Baz;\n+// impl $0Baz {\n+//     fn second(&self) -> u32;\n+//     fn first(&self) -> String;\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Baz;\n+// impl Baz {\n+//     fn first(&self) -> String;\n+//     fn second(&self) -> u32;\n+// }\n+// ```\n+// ---\n+// There is a difference between sorting enum variants:\n+//\n+// ```\n+// en$0um Animal {\n+//   Dog(String, f64),\n+//   Cat { weight: f64, name: String },\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Animal {\n+//   // variants sorted\n+//   Cat { weight: f64, name: String },\n+//   Dog(String, f64),\n+// }\n+// ```\n+// and sorting a single enum struct variant:\n+//\n+// ```\n+// enum Animal {\n+//   Dog(String, f64),\n+//   Cat {$0 weight: f64, name: String },\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Animal {\n+//   Dog(String, f64),\n+//   Cat { name: String, weight: f64 }, // Cat fields sorted\n+// }\n+// ```\n pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     if let Some(trait_ast) = ctx.find_node_at_offset::<ast::Trait>() {\n         add_sort_methods_assist(acc, trait_ast.assoc_item_list()?)\n@@ -155,7 +226,7 @@ t$0rait Bar {\n         check_assist_not_applicable(\n             sort_items,\n             r#\"\n-struct Bar;            \n+struct Bar;\n $0impl Bar {\n }\n         \"#,\n@@ -221,7 +292,7 @@ t$0rait Bar {\n         check_assist_not_applicable(\n             sort_items,\n             r#\"\n-struct Bar;            \n+struct Bar;\n $0impl Bar {\n     fn a() {}\n     fn b() {}"}, {"sha": "7ed89ce88a1783ffc2621ae70982af1505bf50a8", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -1523,6 +1523,98 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_sort_items() {\n+    check_doc_test(\n+        \"sort_items\",\n+        r#####\"\n+struct $0Foo { second: u32, first: String }\n+\"#####,\n+        r#####\"\n+struct Foo { first: String, second: u32 }\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_sort_items_1() {\n+    check_doc_test(\n+        \"sort_items_1\",\n+        r#####\"\n+trait $0Bar {\n+    fn second(&self) -> u32;\n+    fn first(&self) -> String;\n+}\n+\"#####,\n+        r#####\"\n+trait Bar {\n+    fn first(&self) -> String;\n+    fn second(&self) -> u32;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_sort_items_2() {\n+    check_doc_test(\n+        \"sort_items_2\",\n+        r#####\"\n+struct Baz;\n+impl $0Baz {\n+    fn second(&self) -> u32;\n+    fn first(&self) -> String;\n+}\n+\"#####,\n+        r#####\"\n+struct Baz;\n+impl Baz {\n+    fn first(&self) -> String;\n+    fn second(&self) -> u32;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_sort_items_3() {\n+    check_doc_test(\n+        \"sort_items_3\",\n+        r#####\"\n+en$0um Animal {\n+  Dog(String, f64),\n+  Cat { weight: f64, name: String },\n+}\n+\"#####,\n+        r#####\"\n+enum Animal {\n+  // variants sorted\n+  Cat { weight: f64, name: String },\n+  Dog(String, f64),\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_sort_items_4() {\n+    check_doc_test(\n+        \"sort_items_4\",\n+        r#####\"\n+enum Animal {\n+  Dog(String, f64),\n+  Cat {$0 weight: f64, name: String },\n+}\n+\"#####,\n+        r#####\"\n+enum Animal {\n+  Dog(String, f64),\n+  Cat { name: String, weight: f64 }, // Cat fields sorted\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_split_import() {\n     check_doc_test("}, {"sha": "46c71048dd9927058ed83b205a25f544d1ee5b06", "filename": "crates/ide_assists/src/tests/sourcegen.rs", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0088f84c8841d8dcd392c89367c06baa5aee0736/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=0088f84c8841d8dcd392c89367c06baa5aee0736", "patch": "@@ -16,7 +16,9 @@ use super::check_doc_test;\n \"\n         .to_string();\n         for assist in assists.iter() {\n-            let test = format!(\n+            for (idx, section) in assist.sections.iter().enumerate() {\n+                let id = if idx == 0 { assist.id.clone() } else { format!(\"{}_{}\", &assist.id, idx)};\n+                let test = format!(\n                 r######\"\n #[test]\n fn doctest_{}() {{\n@@ -27,13 +29,14 @@ r#####\"\n {}\"#####)\n }}\n \"######,\n-                assist.id,\n-                assist.id,\n-                reveal_hash_comments(&assist.before),\n-                reveal_hash_comments(&assist.after)\n-            );\n-\n-            buf.push_str(&test)\n+                    &id,\n+                    &id,\n+                    reveal_hash_comments(&section.before),\n+                    reveal_hash_comments(&section.after)\n+                );\n+    \n+                buf.push_str(&test)    \n+            }\n         }\n         let buf = sourcegen::add_preamble(\"sourcegen_assists_docs\", sourcegen::reformat(buf));\n         sourcegen::ensure_file_contents(\n@@ -55,14 +58,17 @@ r#####\"\n         fs::write(dst, contents).unwrap();\n     }\n }\n+#[derive(Debug)]struct Section {\n+    doc: String,\n+    before: String,\n+    after: String,\n+}\n \n #[derive(Debug)]\n struct Assist {\n     id: String,\n     location: sourcegen::Location,\n-    doc: String,\n-    before: String,\n-    after: String,\n+    sections: Vec<Section>\n }\n \n impl Assist {\n@@ -89,22 +95,28 @@ impl Assist {\n                     \"invalid assist id: {:?}\",\n                     id\n                 );\n-                let mut lines = block.contents.iter();\n-\n-                let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n-                assert!(\n-                    doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n-                    \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n-                    id, doc,\n-                );\n-\n-                let before = take_until(lines.by_ref(), \"```\");\n-\n-                assert_eq!(lines.next().unwrap().as_str(), \"->\");\n-                assert_eq!(lines.next().unwrap().as_str(), \"```\");\n-                let after = take_until(lines.by_ref(), \"```\");\n+                let mut lines = block.contents.iter().peekable();\n                 let location = sourcegen::Location { file: path.to_path_buf(), line: block.line };\n-                acc.push(Assist { id, location, doc, before, after })\n+                let mut assist = Assist { id, location, sections: Vec::new() };\n+\n+                while lines.peek().is_some() {\n+                    let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n+                    assert!(\n+                        (doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.')) || assist.sections.len() > 0,\n+                        \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n+                        &assist.id, doc,\n+                    );\n+    \n+                    let before = take_until(lines.by_ref(), \"```\");\n+    \n+                    assert_eq!(lines.next().unwrap().as_str(), \"->\");\n+                    assert_eq!(lines.next().unwrap().as_str(), \"```\");\n+                    let after = take_until(lines.by_ref(), \"```\");\n+\n+                    assist.sections.push(Section{doc, before, after});\n+                }\n+\n+                acc.push(assist)\n             }\n         }\n \n@@ -123,13 +135,20 @@ impl Assist {\n \n impl fmt::Display for Assist {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let before = self.before.replace(\"$0\", \"\u2503\"); // Unicode pseudo-graphics bar\n-        let after = self.after.replace(\"$0\", \"\u2503\");\n-        writeln!(\n+        let _ = writeln!(\n             f,\n             \"[discrete]\\n=== `{}`\n-**Source:** {}\n+**Source:** {}\",\n+            self.id,\n+            self.location,\n+            );\n \n+        for section in &self.sections {\n+            let before = section.before.replace(\"$0\", \"\u2503\"); // Unicode pseudo-graphics bar\n+            let after = section.after.replace(\"$0\", \"\u2503\");\n+            let _= writeln!(\n+                f,\n+\"\n {}\n \n .Before\n@@ -139,12 +158,13 @@ impl fmt::Display for Assist {\n .After\n ```rust\n {}```\",\n-            self.id,\n-            self.location,\n-            self.doc,\n-            hide_hash_comments(&before),\n-            hide_hash_comments(&after)\n-        )\n+                section.doc,\n+                hide_hash_comments(&before),\n+                hide_hash_comments(&after)\n+            );    \n+        }\n+\n+        Ok(())\n     }\n }\n "}]}