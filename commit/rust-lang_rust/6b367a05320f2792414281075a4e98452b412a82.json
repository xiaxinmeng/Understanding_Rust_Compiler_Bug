{"sha": "6b367a05320f2792414281075a4e98452b412a82", "node_id": "C_kwDOAAsO6NoAKDZiMzY3YTA1MzIwZjI3OTI0MTQyODEwNzVhNGU5ODQ1MmI0MTJhODI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T05:21:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T22:15:12Z"}, "message": "Avoid producing `NoDelim` values in `MacArgs::delim()`.", "tree": {"sha": "21cfd9119b61276cbdaf8f754f8e2bf7b451b2ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cfd9119b61276cbdaf8f754f8e2bf7b451b2ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b367a05320f2792414281075a4e98452b412a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b367a05320f2792414281075a4e98452b412a82", "html_url": "https://github.com/rust-lang/rust/commit/6b367a05320f2792414281075a4e98452b412a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b367a05320f2792414281075a4e98452b412a82/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0bbc782ac11de6001eeec63e347427dbc639c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bbc782ac11de6001eeec63e347427dbc639c04", "html_url": "https://github.com/rust-lang/rust/commit/f0bbc782ac11de6001eeec63e347427dbc639c04"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "4233f7806248ba3efddf1b44415dcbc0d4a4d312", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6b367a05320f2792414281075a4e98452b412a82", "patch": "@@ -1542,10 +1542,10 @@ pub enum MacArgs {\n }\n \n impl MacArgs {\n-    pub fn delim(&self) -> DelimToken {\n+    pub fn delim(&self) -> Option<DelimToken> {\n         match self {\n-            MacArgs::Delimited(_, delim, _) => delim.to_token(),\n-            MacArgs::Empty | MacArgs::Eq(..) => token::NoDelim,\n+            MacArgs::Delimited(_, delim, _) => Some(delim.to_token()),\n+            MacArgs::Empty | MacArgs::Eq(..) => None,\n         }\n     }\n "}, {"sha": "39824095e86636cdfbd040a219084f735feded7a", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=6b367a05320f2792414281075a4e98452b412a82", "patch": "@@ -464,7 +464,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 Some(MacHeader::Path(&item.path)),\n                 false,\n                 None,\n-                delim.to_token(),\n+                Some(delim.to_token()),\n                 tokens,\n                 true,\n                 span,\n@@ -530,7 +530,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     None,\n                     false,\n                     None,\n-                    *delim,\n+                    Some(*delim),\n                     tts,\n                     convert_dollar_crate,\n                     dspan.entire(),\n@@ -556,12 +556,12 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         header: Option<MacHeader<'_>>,\n         has_bang: bool,\n         ident: Option<Ident>,\n-        delim: DelimToken,\n+        delim: Option<DelimToken>,\n         tts: &TokenStream,\n         convert_dollar_crate: bool,\n         span: Span,\n     ) {\n-        if delim == DelimToken::Brace {\n+        if delim == Some(DelimToken::Brace) {\n             self.cbox(INDENT_UNIT);\n         }\n         match header {\n@@ -577,31 +577,33 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             self.print_ident(ident);\n         }\n         match delim {\n-            DelimToken::Brace => {\n+            Some(DelimToken::Brace) => {\n                 if header.is_some() || has_bang || ident.is_some() {\n                     self.nbsp();\n                 }\n                 self.word(\"{\");\n                 if !tts.is_empty() {\n                     self.space();\n                 }\n-            }\n-            _ => {\n-                let token_str = self.token_kind_to_string(&token::OpenDelim(delim));\n-                self.word(token_str)\n-            }\n-        }\n-        self.ibox(0);\n-        self.print_tts(tts, convert_dollar_crate);\n-        self.end();\n-        match delim {\n-            DelimToken::Brace => {\n+                self.ibox(0);\n+                self.print_tts(tts, convert_dollar_crate);\n+                self.end();\n                 let empty = tts.is_empty();\n                 self.bclose(span, empty);\n             }\n-            _ => {\n+            Some(delim) => {\n+                let token_str = self.token_kind_to_string(&token::OpenDelim(delim));\n+                self.word(token_str);\n+                self.ibox(0);\n+                self.print_tts(tts, convert_dollar_crate);\n+                self.end();\n                 let token_str = self.token_kind_to_string(&token::CloseDelim(delim));\n-                self.word(token_str)\n+                self.word(token_str);\n+            }\n+            None => {\n+                self.ibox(0);\n+                self.print_tts(tts, convert_dollar_crate);\n+                self.end();\n             }\n         }\n     }"}, {"sha": "14f1208b71f516c339cf72e8e87bb238700ab153", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b367a05320f2792414281075a4e98452b412a82/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=6b367a05320f2792414281075a4e98452b412a82", "patch": "@@ -164,25 +164,29 @@ impl<'a> Parser<'a> {\n         let delim = args.delim();\n         let hi = self.prev_token.span;\n \n-        let style =\n-            if delim == token::Brace { MacStmtStyle::Braces } else { MacStmtStyle::NoBraces };\n+        let style = match delim {\n+            Some(token::Brace) => MacStmtStyle::Braces,\n+            Some(_) => MacStmtStyle::NoBraces,\n+            None => unreachable!(),\n+        };\n \n         let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n \n-        let kind =\n-            if (delim == token::Brace && self.token != token::Dot && self.token != token::Question)\n-                || self.token == token::Semi\n-                || self.token == token::Eof\n-            {\n-                StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n-            } else {\n-                // Since none of the above applied, this is an expression statement macro.\n-                let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n-                let e = self.maybe_recover_from_bad_qpath(e, true)?;\n-                let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n-                let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n-                StmtKind::Expr(e)\n-            };\n+        let kind = if (style == MacStmtStyle::Braces\n+            && self.token != token::Dot\n+            && self.token != token::Question)\n+            || self.token == token::Semi\n+            || self.token == token::Eof\n+        {\n+            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n+        } else {\n+            // Since none of the above applied, this is an expression statement macro.\n+            let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n+            let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+            let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n+            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+            StmtKind::Expr(e)\n+        };\n         Ok(self.mk_stmt(lo.to(hi), kind))\n     }\n "}, {"sha": "cd724373f4d16292d6ff00cd441a7a9067b42b07", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b367a05320f2792414281075a4e98452b412a82/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b367a05320f2792414281075a4e98452b412a82/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=6b367a05320f2792414281075a4e98452b412a82", "patch": "@@ -1325,7 +1325,7 @@ pub(crate) fn can_be_overflowed_expr(\n         }\n         ast::ExprKind::MacCall(ref mac) => {\n             match (\n-                rustc_ast::ast::MacDelimiter::from_token(mac.args.delim()),\n+                rustc_ast::ast::MacDelimiter::from_token(mac.args.delim().unwrap()),\n                 context.config.overflow_delimited_expr(),\n             ) {\n                 (Some(ast::MacDelimiter::Bracket), true)"}]}