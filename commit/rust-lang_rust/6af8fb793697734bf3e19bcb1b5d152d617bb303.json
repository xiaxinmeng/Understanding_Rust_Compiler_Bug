{"sha": "6af8fb793697734bf3e19bcb1b5d152d617bb303", "node_id": "C_kwDOAAsO6NoAKDZhZjhmYjc5MzY5NzczNGJmM2UxOWJjYjFiNWQxNTJkNjE3YmIzMDM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-14T13:35:24Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-14T15:30:25Z"}, "message": "address review again", "tree": {"sha": "ce28e3c0abc38368fba67c76de230c3c54a7792c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce28e3c0abc38368fba67c76de230c3c54a7792c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af8fb793697734bf3e19bcb1b5d152d617bb303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af8fb793697734bf3e19bcb1b5d152d617bb303", "html_url": "https://github.com/rust-lang/rust/commit/6af8fb793697734bf3e19bcb1b5d152d617bb303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af8fb793697734bf3e19bcb1b5d152d617bb303/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba00189d8e85b735d90144f9523b8a1dad2ccdce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba00189d8e85b735d90144f9523b8a1dad2ccdce", "html_url": "https://github.com/rust-lang/rust/commit/ba00189d8e85b735d90144f9523b8a1dad2ccdce"}], "stats": {"total": 637, "additions": 118, "deletions": 519}, "files": [{"sha": "4e0e72d34153f0a84c173b2194f8f07846ea0f0c", "filename": "Cargo.lock", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -288,7 +288,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.65.0\"\n+version = \"0.66.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -299,7 +299,6 @@ dependencies = [\n  \"cargo-util\",\n  \"clap\",\n  \"crates-io\",\n- \"crossbeam-utils\",\n  \"curl\",\n  \"curl-sys\",\n  \"env_logger 0.9.0\",\n@@ -323,7 +322,6 @@ dependencies = [\n  \"libgit2-sys\",\n  \"log\",\n  \"memchr\",\n- \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n  \"os_info\",\n@@ -383,6 +381,7 @@ dependencies = [\n name = \"cargo-miri\"\n version = \"0.1.0\"\n dependencies = [\n+ \"cargo_metadata 0.15.0\",\n  \"directories\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n@@ -431,6 +430,7 @@ dependencies = [\n  \"termcolor\",\n  \"toml_edit\",\n  \"url\",\n+ \"winapi\",\n ]\n \n [[package]]\n@@ -1003,16 +1003,6 @@ dependencies = [\n  \"quote\",\n ]\n \n-[[package]]\n-name = \"ctor\"\n-version = \"0.1.22\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c\"\n-dependencies = [\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"curl\"\n version = \"0.4.43\"\n@@ -1570,9 +1560,9 @@ dependencies = [\n \n [[package]]\n name = \"git2\"\n-version = \"0.14.4\"\n+version = \"0.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d0155506aab710a86160ddb504a480d2964d7ab5b9e62419be69e0032bc5931c\"\n+checksum = \"2994bee4a3a6a51eb90c218523be382fd7ea09b16380b9312e9dbe955ff7c7d1\"\n dependencies = [\n  \"bitflags\",\n  \"libc\",\n@@ -1585,9 +1575,9 @@ dependencies = [\n \n [[package]]\n name = \"git2-curl\"\n-version = \"0.15.0\"\n+version = \"0.16.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ee51709364c341fbb6fe2a385a290fb9196753bdde2fc45447d27cd31b11b13\"\n+checksum = \"ed817a00721e2f8037ba722e60358d4956dae9cca10315fc982f967907d3b0cd\"\n dependencies = [\n  \"curl\",\n  \"git2\",\n@@ -1944,11 +1934,30 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"libffi\"\n+version = \"3.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1e454b3efb16fba3b17810ae5e41df02b649e564ab3c5a34b3b93ed07ad287e6\"\n+dependencies = [\n+ \"libc\",\n+ \"libffi-sys\",\n+]\n+\n+[[package]]\n+name = \"libffi-sys\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ab4106b7f09d7b87d021334d5618fac1dfcfb824d4c5fe111ff0074dfd242e15\"\n+dependencies = [\n+ \"cc\",\n+]\n+\n [[package]]\n name = \"libgit2-sys\"\n-version = \"0.13.4+1.4.2\"\n+version = \"0.14.0+1.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d0fa6563431ede25f5cc7f6d803c6afbc1c5d3ad3d4925d12c882bf2b526f5d1\"\n+checksum = \"47a00859c70c8a4f7218e6d1cc32875c4b55f6799445b842b0d8ed5e4c3d959b\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -2238,6 +2247,8 @@ dependencies = [\n  \"getrandom 0.2.0\",\n  \"lazy_static\",\n  \"libc\",\n+ \"libffi\",\n+ \"libloading\",\n  \"log\",\n  \"measureme\",\n  \"rand 0.8.5\",\n@@ -2410,15 +2421,6 @@ version = \"6.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n \n-[[package]]\n-name = \"output_vt100\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"owo-colors\"\n version = \"3.4.0\"\n@@ -2660,18 +2662,6 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \n-[[package]]\n-name = \"pretty_assertions\"\n-version = \"1.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a25e9bcb20aa780fd0bb16b72403a9064d6b3f22f026946029acb941a50af755\"\n-dependencies = [\n- \"ctor\",\n- \"diff\",\n- \"output_vt100\",\n- \"yansi\",\n-]\n-\n [[package]]\n name = \"pretty_env_logger\"\n version = \"0.4.0\"\n@@ -4550,9 +4540,9 @@ checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n \n [[package]]\n name = \"snapbox\"\n-version = \"0.2.10\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"767a1d5da232b6959cd1bd5c9e8db8a7cce09c3038e89deedb49a549a2aefd93\"\n+checksum = \"44d199ccf8f606592df2d145db26f2aa45344e23c64b074cc5a4047f1d99b0f7\"\n dependencies = [\n  \"concolor\",\n  \"content_inspector\",\n@@ -4568,9 +4558,9 @@ dependencies = [\n \n [[package]]\n name = \"snapbox-macros\"\n-version = \"0.2.1\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c01dea7e04cbb27ef4c86e9922184608185f7cd95c1763bc30d727cda4a5e930\"\n+checksum = \"8a253e6f894cfa440cba00600a249fa90869d8e0ec45ab274a456e043a0ce8f2\"\n \n [[package]]\n name = \"socket2\"\n@@ -5049,14 +5039,16 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.1.0\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7d1f546a5883ae78da735bba529ec1116661e2f73582f23920d994dc97da3a22\"\n dependencies = [\n  \"cargo_metadata 0.15.0\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n+ \"diff\",\n  \"lazy_static\",\n- \"pretty_assertions\",\n  \"regex\",\n  \"rustc_version\",\n  \"serde\","}, {"sha": "09035dcefa148f9ca2c8eb669ea52c7b5d348725", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -38,6 +38,16 @@ where\n     })\n }\n \n+fn renumber_regions_in_mir_constant<'tcx>(\n+    infcx: &InferCtxt<'_, 'tcx>,\n+    value: ConstantKind<'tcx>,\n+) -> ConstantKind<'tcx> {\n+    infcx.tcx.super_fold_regions(value, |_region, _depth| {\n+        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n+        infcx.next_nll_region_var(origin)\n+    })\n+}\n+\n struct NllVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n@@ -49,6 +59,13 @@ impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n     {\n         renumber_regions(self.infcx, value)\n     }\n+\n+    fn renumber_regions_in_mir_constant(\n+        &mut self,\n+        value: ConstantKind<'tcx>,\n+    ) -> ConstantKind<'tcx> {\n+        renumber_regions_in_mir_constant(self.infcx, value)\n+    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n@@ -81,29 +98,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n         let literal = constant.literal;\n-        debug!(\"{:#?}\", literal);\n-\n-        match literal {\n-            ConstantKind::Ty(ct) => {\n-                let ct = self.renumber_regions(ct);\n-                debug!(\"renumbered ct {:#?}\", ct);\n-\n-                constant.literal = ConstantKind::Ty(ct);\n-            }\n-            ConstantKind::Unevaluated(uv, ty) => {\n-                debug!(\"uv: {:#?}, ty: {:#?}\", uv, ty);\n-                let uv = self.renumber_regions(uv);\n-                debug!(\"uv: {:#?}\", uv);\n-                let ty = self.renumber_regions(ty);\n-                debug!(\"{:#?}\", ty);\n-                constant.literal = ConstantKind::Unevaluated(uv, ty);\n-            }\n-            ConstantKind::Val(val, ty) => {\n-                let ty = self.renumber_regions(ty);\n-                constant.literal = ConstantKind::Val(val, ty);\n-            }\n-        }\n-\n+        constant.literal = self.renumber_regions_in_mir_constant(literal);\n         debug!(\"constant: {:#?}\", constant);\n     }\n }"}, {"sha": "6854e0e88785f31d3b46bf19a2b5a653dcda0994", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -354,7 +354,9 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv.expand()),\n+                    ty::ConstKind::Unevaluated(_) => {\n+                        bug!(\"should not encounter unevaluated ConstantKind::Ty here, got {:?}\", ct)\n+                    }\n                     _ => None,\n                 },\n                 ConstantKind::Unevaluated(uv, _) => Some(uv),"}, {"sha": "bc34802fa72884035e2b28084ffb3e0871f48701", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -121,25 +121,7 @@ pub(crate) fn codegen_constant<'tcx>(\n             ConstKind::Value(valtree) => {\n                 (fx.tcx.valtree_to_const_val((const_.ty(), valtree)), const_.ty())\n             }\n-            ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if fx.tcx.is_static(def.did) =>\n-            {\n-                assert!(substs.is_empty());\n-                assert_eq!(promoted, ());\n-                return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n-            }\n-            ConstKind::Unevaluated(unevaluated) => {\n-                match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated.expand(), None)\n-                {\n-                    Ok(const_val) => (const_val, const_.ty()),\n-                    Err(_) => {\n-                        span_bug!(\n-                            constant.span,\n-                            \"erroneous constant not captured by required_consts\"\n-                        );\n-                    }\n-                }\n-            }\n+            ConstKind::Unevaluated(_) => bug!(\"expected constant to be evaluated at this stage\"),\n             ConstKind::Param(_)\n             | ConstKind::Infer(_)\n             | ConstKind::Bound(_, _)"}, {"sha": "29c745a0886f81617cfe22048a5ea3b1abc19b6e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -564,8 +564,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 throw_inval!(AlreadyReported(reported))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n+                // NOTE: We evaluate to a `ValTree` here as a check to ensure\n+                // we're working with valid constants, even though we never need it.\n                 let instance = self.resolve(uv.def, uv.substs)?;\n-                Ok(self.eval_to_allocation(GlobalId { instance, promoted: None })?.into())\n+                let cid = GlobalId { instance, promoted: None };\n+                let _valtree = self\n+                    .tcx\n+                    .eval_to_valtree(self.param_env.and(cid))?\n+                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {:?}\", uv));\n+\n+                Ok(self.eval_to_allocation(cid)?.into())\n             }\n             ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n@@ -578,16 +586,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Tries to evaluate an unevaluated constant from the MIR (and not the type-system).\n-    #[inline]\n-    pub fn uneval_to_op(\n-        &self,\n-        uneval: &ty::Unevaluated<'tcx>,\n-    ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        let instance = self.resolve(uneval.def, uneval.substs)?;\n-        Ok(self.eval_to_allocation(GlobalId { instance, promoted: uneval.promoted })?.into())\n-    }\n-\n     pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n@@ -596,7 +594,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val {\n             mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n-            mir::ConstantKind::Unevaluated(uv, _) => self.uneval_to_op(uv),\n+            mir::ConstantKind::Unevaluated(uv, _) => {\n+                let instance = self.resolve(uv.def, uv.substs)?;\n+                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n+            }\n         }\n     }\n "}, {"sha": "6c73ef5a8fa01f49aff322c8d32cb97e743b2435", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -346,6 +346,8 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n+    // FIXME(valtrees): check whether const qualifs should behave the same\n+    // way for type and mir constants.\n     let uneval = match constant.literal {\n         ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Unevaluated(_)) => {\n             let ty::ConstKind::Unevaluated(uv) = ct.kind() else { unreachable!() };"}, {"sha": "f8059109ad8f3e44bb30d21f2ccb39ae92717a4b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -2090,15 +2090,6 @@ impl<'tcx> Constant<'tcx> {\n }\n \n impl<'tcx> ConstantKind<'tcx> {\n-    /// Returns `None` if the constant is not trivially safe for use in the type system.\n-    #[inline]\n-    pub fn const_for_ty(&self) -> Option<ty::Const<'tcx>> {\n-        match self {\n-            ConstantKind::Ty(c) => Some(*c),\n-            ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => None,\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn ty(&self) -> Ty<'tcx> {\n         match self {\n@@ -2433,14 +2424,14 @@ impl<'tcx> ConstantKind<'tcx> {\n                 debug!(\"error encountered during evaluation\");\n                 // Error was handled in `const_eval_resolve`. Here we just create a\n                 // new unevaluated const and error hard later in codegen\n-                Self::Ty(tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                Self::Unevaluated(\n+                    ty::Unevaluated {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                        promoted: (),\n-                    }),\n+                        promoted: None,\n+                    },\n                     ty,\n-                }))\n+                )\n             }\n         }\n     }"}, {"sha": "a7649605e27ebbf9969269e1e019fb09643feeff", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -826,9 +826,9 @@ mod size_asserts {\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(Pat<'_>, 64);\n+    static_assert_size!(Pat<'_>, 72);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(PatKind<'_>, 48);\n+    static_assert_size!(PatKind<'_>, 56);\n     #[cfg(not(bootstrap))]\n     static_assert_size!(Stmt<'_>, 48);\n     #[cfg(not(bootstrap))]"}, {"sha": "ed0eefd98ad87b963142d3210a9e69044d7f1e02", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -302,6 +302,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n+\n+    pub fn super_fold_regions<T>(\n+        self,\n+        value: T,\n+        mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n+    ) -> T\n+    where\n+        T: TypeSuperFoldable<'tcx>,\n+    {\n+        value.super_fold_with(&mut RegionFolder::new(self, &mut f))\n+    }\n }\n \n /// Folds over the substructure of a type, visiting its component"}, {"sha": "c9bec130cc8fe99de9f7b19e8acadad9205ceacb", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -2,26 +2,18 @@\n \n use crate::build::{parse_float_into_constval, Builder};\n use rustc_ast as ast;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::mir::interpret::{\n     Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt};\n+use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, TyCtxt};\n use rustc_target::abi::Size;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n     /// `expr` is a valid compile-time constant!\n     pub(crate) fn as_constant(&mut self, expr: &Expr<'tcx>) -> Constant<'tcx> {\n-        let create_uneval_from_def_id =\n-            |tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>, substs: SubstsRef<'tcx>| {\n-                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n-                tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty })\n-            };\n-\n         let this = self;\n         let tcx = this.tcx;\n         let Expr { ty, temp_lifetime: _, span, ref kind } = *expr;\n@@ -73,7 +65,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-                let literal = ConstantKind::Ty(create_uneval_from_def_id(tcx, def_id, ty, substs));\n+\n+                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty, span, literal }\n             }\n@@ -85,7 +79,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty: None, span, literal }\n             }\n             ExprKind::ConstBlock { did: def_id, substs } => {\n-                let literal = ConstantKind::Ty(create_uneval_from_def_id(tcx, def_id, ty, substs));\n+                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty: None, span, literal }\n             }"}, {"sha": "d00a384cb44ec2a6c57a1adef2a85edea65639da", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -604,13 +604,11 @@ impl<'tcx> Inliner<'tcx> {\n                 // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n                 // because we are calling `subst_and_normalize_erasing_regions`.\n                 caller_body.required_consts.extend(\n-                    callee_body.required_consts.iter().copied().filter(|&ct| {\n-                        match ct.literal.const_for_ty() {\n-                            Some(_) => {\n-                                bug!(\"should never encounter ty::Unevaluated in required_consts\")\n-                            }\n-                            None => true,\n+                    callee_body.required_consts.iter().copied().filter(|&ct| match ct.literal {\n+                        ConstantKind::Ty(_) => {\n+                            bug!(\"should never encounter ty::Unevaluated in `required_consts`\")\n                         }\n+                        ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => true,\n                     }),\n                 );\n             }"}, {"sha": "cc75947d9dda73b2f38b6e47cc03a5bf47311e2b", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -17,13 +17,8 @@ impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n         let literal = constant.literal;\n         match literal {\n             ConstantKind::Ty(c) => match c.kind() {\n-                ConstKind::Unevaluated(uv) => {\n-                    let literal = ConstantKind::Unevaluated(uv.expand(), c.ty());\n-                    let new_constant =\n-                        Constant { span: constant.span, user_ty: constant.user_ty, literal };\n-                    self.required_consts.push(new_constant);\n-                }\n-                _ => {}\n+                ConstKind::Param(_) => {}\n+                _ => bug!(\"only ConstKind::Param should be encountered here, got {:#?}\", c),\n             },\n             ConstantKind::Unevaluated(..) => self.required_consts.push(*constant),\n             ConstantKind::Val(..) => {}"}, {"sha": "71cab023215eca2a18895300a723c48efe1595a2", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -300,10 +300,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 ControlFlow::CONTINUE\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if matches!(\n-                    self.tcx.def_kind(def.did),\n-                    DefKind::AnonConst | DefKind::InlineConst\n-                ) =>\n+                if matches!(self.tcx.def_kind(def.did), DefKind::AnonConst) =>\n             {\n                 assert_eq!(promoted, ());\n "}, {"sha": "bea7114c7df3ba1dcca0ffb33c97ebacbb177e40", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -16,10 +16,10 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n           StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n-                                           // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], ()) }\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n           _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:38: +2:39"}, {"sha": "a07bdd99825d6975b75882ad77da4ea6844a884c", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -8,9 +8,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+          _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n -         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n +         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       }\n   "}, {"sha": "c618eb2fa928eb7cfc196ab102b7b06fc9733314", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=ba00189d8e85b735d90144f9523b8a1dad2ccdce", "patch": "@@ -1,86 +0,0 @@\n-- // MIR for `main` before Inline\n-+ // MIR for `main` after Inline\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-      scope 1 {\n-          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-      }\n-      scope 2 {\n-      }\n-+     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         let mut _10: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+     }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-                                           // mir::Constant\n-                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _10 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n--                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n--     }\n-- \n--     bb2: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], ()) }\n-+         Deinit((*_9));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2\n--         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-      }\n-  \n--     bb3: {\n-+     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline-into-box-place.rs:+2:2: +2:2\n-      }\n-  \n--     bb4 (cleanup): {\n--         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb5; // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n--     }\n-- \n--     bb5 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline-into-box-place.rs:+0:1: +2:2\n-      }\n-  }\n-  "}, {"sha": "7e017373b4410e5e9487b0c02b8f614f3b4047b9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -38,7 +38,7 @@\n +         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _9 = const _;                    // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -48,13 +48,12 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], ()) }\n-+         Deinit((*_9));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-          StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n++         Deinit((*_8));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:+0:11: +2:2"}, {"sha": "730d75787e1e6e45ef999187b3c443b3faf3174e", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=ba00189d8e85b735d90144f9523b8a1dad2ccdce", "patch": "@@ -1,117 +0,0 @@\n-- // MIR for `main` before PreCodegen\n-+ // MIR for `main` after PreCodegen\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb1: {\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "7c87c9876ccaa739ada6591b248166cbb0f35223", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ba00189d8e85b735d90144f9523b8a1dad2ccdce/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=ba00189d8e85b735d90144f9523b8a1dad2ccdce", "patch": "@@ -1,157 +0,0 @@\n-- // MIR for `main` before SimplifyArmIdentity\n-+ // MIR for `main` after SimplifyArmIdentity\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:+2:9: +2:16\n-      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:+6:22: +6:27\n-      let _8: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:+7:23: +7:24\n-      let mut _15: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:+1:17: +1:30\n-      }\n-  \n-      bb1: {\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+3:17: +3:23\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  \n-      bb2: {\n-          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:+6:22: +6:27\n-          Deinit(_6);                      // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:+6:17: +6:28\n-          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:+6:27: +6:28\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb3: {\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb4: {\n-          nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          nop;                             // scope 0 at $DIR/issue-73223.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "76d8d9396255bdea02df4675571f79e7549b4731", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af8fb793697734bf3e19bcb1b5d152d617bb303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=6af8fb793697734bf3e19bcb1b5d152d617bb303", "patch": "@@ -87,7 +87,7 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-\t        _28 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}]}