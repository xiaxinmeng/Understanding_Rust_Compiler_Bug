{"sha": "4ec6bd6206af70494bf61cf03ef892568d942cbf", "node_id": "C_kwDOAAsO6NoAKDRlYzZiZDYyMDZhZjcwNDk0YmY2MWNmMDNlZjg5MjU2OGQ5NDJjYmY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-15T23:04:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-15T23:04:51Z"}, "message": "Merge #11017\n\n11017: Support \"move if to guard\" with an else branch r=Veykril a=weirane\n\nSupport the assist `move_arm_cond_to_match_guard` when there is an else branch.\r\n\r\nI have two questions:\r\n1. How to indent the first line of a match arm? `matcharm.indent()` doesn't seem to work. so I hard coded four spaces here:\r\nhttps://github.com/weirane/rust-analyzer/blob/95a0de85d5d659e876e731725475f1c022719f31/crates/ide_assists/src/handlers/move_guard.rs#L162-L163\r\n\r\n2. I find a little issue in the original implementation, this code\r\n```rust\r\nlet y = match 92 {\r\n    x => {\r\n        if x == 0 {$0\r\n            false\r\n        }\r\n    }\r\n    _ => true,\r\n};\r\n```\r\nwill be transformed to\r\n```rust\r\nlet y = match 92 {\r\n    x if x == 0 => false\r\n    _ => true,\r\n};\r\n```\r\na comma is missing after the `false`. Should I also fix that? Or this can go in a separate PR.\r\n\r\nCloses #10997.\n\nCo-authored-by: Wang Ruochen <wrc@ruo-chen.wang>", "tree": {"sha": "cc430f4b8b99adac13c3e8f88d5fefc26190c27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc430f4b8b99adac13c3e8f88d5fefc26190c27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec6bd6206af70494bf61cf03ef892568d942cbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhunSTCRBK7hj4Ov3rIwAADRMIAJ/jfxgJ7Vw/EdokKg1DypZD\n3l4VO9nnCNBPzutVVLFMRAkR4IcTpcGsK6sUejalZizMmcMKDcps54i+4mW4OVg2\n+qjDj7/P7rL/L3ZZK5gJGejlH3ciNx0dkVlXFCXqXeRgbRGyfkmhLu/vPz3M3hrj\nMz3RDMFKeHckCBtSftLe3dy+d9V5Y4Si5gEaXOhMXge7VNfurOA0Q6BwlGzY8wFh\nIVOmHCErt60sUQ2LtNH0CSZqC0i1CtpX9JB87WIN9YYADHW9xV73aUwU5PdJXlxn\njtlOHJbiS7VCu6XCpUVSm6Ze9YKCoKAJBX1EulEr2+cX3+rHH+CNaTaOsGAO39c=\n=iY4R\n-----END PGP SIGNATURE-----\n", "payload": "tree cc430f4b8b99adac13c3e8f88d5fefc26190c27a\nparent 661e3f933ab359ecafe2d10ab8b1d1da0d7fe5fc\nparent e8d074299761eff8f81215c78e55e5d3e98ada26\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639609491 +0000\ncommitter GitHub <noreply@github.com> 1639609491 +0000\n\nMerge #11017\n\n11017: Support \"move if to guard\" with an else branch r=Veykril a=weirane\n\nSupport the assist `move_arm_cond_to_match_guard` when there is an else branch.\r\n\r\nI have two questions:\r\n1. How to indent the first line of a match arm? `matcharm.indent()` doesn't seem to work. so I hard coded four spaces here:\r\nhttps://github.com/weirane/rust-analyzer/blob/95a0de85d5d659e876e731725475f1c022719f31/crates/ide_assists/src/handlers/move_guard.rs#L162-L163\r\n\r\n2. I find a little issue in the original implementation, this code\r\n```rust\r\nlet y = match 92 {\r\n    x => {\r\n        if x == 0 {$0\r\n            false\r\n        }\r\n    }\r\n    _ => true,\r\n};\r\n```\r\nwill be transformed to\r\n```rust\r\nlet y = match 92 {\r\n    x if x == 0 => false\r\n    _ => true,\r\n};\r\n```\r\na comma is missing after the `false`. Should I also fix that? Or this can go in a separate PR.\r\n\r\nCloses #10997.\n\nCo-authored-by: Wang Ruochen <wrc@ruo-chen.wang>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec6bd6206af70494bf61cf03ef892568d942cbf", "html_url": "https://github.com/rust-lang/rust/commit/4ec6bd6206af70494bf61cf03ef892568d942cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec6bd6206af70494bf61cf03ef892568d942cbf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661e3f933ab359ecafe2d10ab8b1d1da0d7fe5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/661e3f933ab359ecafe2d10ab8b1d1da0d7fe5fc", "html_url": "https://github.com/rust-lang/rust/commit/661e3f933ab359ecafe2d10ab8b1d1da0d7fe5fc"}, {"sha": "e8d074299761eff8f81215c78e55e5d3e98ada26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d074299761eff8f81215c78e55e5d3e98ada26", "html_url": "https://github.com/rust-lang/rust/commit/e8d074299761eff8f81215c78e55e5d3e98ada26"}], "stats": {"total": 289, "additions": 283, "deletions": 6}, "files": [{"sha": "2f44ca40ab3ebd7470219c8507457d0bb1987f25", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 283, "deletions": 6, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/4ec6bd6206af70494bf61cf03ef892568d942cbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec6bd6206af70494bf61cf03ef892568d942cbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=4ec6bd6206af70494bf61cf03ef892568d942cbf", "patch": "@@ -1,6 +1,7 @@\n use syntax::{\n-    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, Expr, IfExpr, MatchArm},\n-    SyntaxKind::WHITESPACE,\n+    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, ElseBranch, Expr, IfExpr, MatchArm},\n+    NodeOrToken,\n+    SyntaxKind::{COMMA, WHITESPACE},\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -118,10 +119,6 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n     let cond = if_expr.condition()?;\n     let then_block = if_expr.then_branch()?;\n \n-    // Not support if with else branch\n-    if if_expr.else_branch().is_some() {\n-        return None;\n-    }\n     // Not support moving if let to arm guard\n     if cond.is_pattern_cond() {\n         return None;\n@@ -149,6 +146,37 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n             }\n \n             edit.insert(match_pat.syntax().text_range().end(), buf);\n+\n+            // If with only an else branch\n+            if let Some(ElseBranch::Block(else_block)) = if_expr.else_branch() {\n+                let then_arm_end = match_arm.syntax().text_range().end();\n+                if then_block.tail_expr().is_some() && then_only_expr {\n+                    // Insert comma for expression if there isn't one\n+                    match match_arm.syntax().last_child_or_token() {\n+                        Some(NodeOrToken::Token(t)) if t.kind() == COMMA => {}\n+                        _ => edit.insert(then_arm_end, \",\"),\n+                    }\n+                }\n+                let else_only_expr = else_block.statements().next().is_none();\n+                let indent_level = match_arm.indent_level();\n+                let spaces = \"    \".repeat(indent_level.0 as _);\n+                edit.insert(then_arm_end, format!(\"\\n{}{} => \", spaces, match_pat));\n+                match &else_block.tail_expr() {\n+                    Some(else_expr) if else_only_expr => {\n+                        cov_mark::hit!(move_guard_ifelse_expr_only);\n+                        edit.insert(then_arm_end, else_expr.syntax().text());\n+                        edit.insert(then_arm_end, \",\");\n+                    }\n+                    _ if replace_node != *if_expr.syntax() => {\n+                        cov_mark::hit!(move_guard_ifelse_in_block);\n+                        edit.insert(then_arm_end, else_block.dedent(1.into()).syntax().text());\n+                    }\n+                    _ => {\n+                        cov_mark::hit!(move_guard_ifelse_else_block);\n+                        edit.insert(then_arm_end, else_block.syntax().text());\n+                    }\n+                }\n+            }\n         },\n     )\n }\n@@ -384,6 +412,255 @@ fn main() {\n         _ => true\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {$0\n+            false\n+        } else {\n+            true\n+        }\n+        _ => true,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => true,\n+        _ => true,\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_block_works() {\n+        cov_mark::check!(move_guard_ifelse_expr_only);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => true,\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_else_if_empty_body_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 { $0 } else { },\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {  },\n+        x => { }\n+        _ => true\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_multiline_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {\n+            92;$0\n+            false\n+        } else {\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {\n+            92;\n+            false\n+        }\n+        x => true,\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_multiline_else_works() {\n+        cov_mark::check!(move_guard_ifelse_else_block);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => if x > 10 {$0\n+            false\n+        } else {\n+            42;\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => {\n+            42;\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_multiline_else_block_works() {\n+        cov_mark::check!(move_guard_ifelse_in_block);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                42;\n+                true\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => {\n+            42;\n+            true\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_last_arm_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else {\n+                92;\n+                true\n+            }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x => {\n+            92;\n+            true\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_with_else_comma_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => if x > 10 {$0\n+            false\n+        } else {\n+            92;\n+            true\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x => {\n+            92;\n+            true\n+        }\n+    }\n+}\n \"#,\n         )\n     }"}]}