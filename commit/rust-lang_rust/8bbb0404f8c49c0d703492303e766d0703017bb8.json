{"sha": "8bbb0404f8c49c0d703492303e766d0703017bb8", "node_id": "C_kwDOAAsO6NoAKDhiYmIwNDA0ZjhjNDljMGQ3MDM0OTIzMDNlNzY2ZDA3MDMwMTdiYjg", "commit": {"author": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:47:44Z"}, "committer": {"name": "Neven Villani", "email": "vanille@crans.org", "date": "2023-03-16T13:54:00Z"}, "message": "TB: integration", "tree": {"sha": "e8e2c06d616489aca898ed12d86696e8178bb0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e2c06d616489aca898ed12d86696e8178bb0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bbb0404f8c49c0d703492303e766d0703017bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bbb0404f8c49c0d703492303e766d0703017bb8", "html_url": "https://github.com/rust-lang/rust/commit/8bbb0404f8c49c0d703492303e766d0703017bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bbb0404f8c49c0d703492303e766d0703017bb8/comments", "author": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vanille-N", "id": 58042063, "node_id": "MDQ6VXNlcjU4MDQyMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/58042063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vanille-N", "html_url": "https://github.com/Vanille-N", "followers_url": "https://api.github.com/users/Vanille-N/followers", "following_url": "https://api.github.com/users/Vanille-N/following{/other_user}", "gists_url": "https://api.github.com/users/Vanille-N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vanille-N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vanille-N/subscriptions", "organizations_url": "https://api.github.com/users/Vanille-N/orgs", "repos_url": "https://api.github.com/users/Vanille-N/repos", "events_url": "https://api.github.com/users/Vanille-N/events{/privacy}", "received_events_url": "https://api.github.com/users/Vanille-N/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0afab595b4f95c66f2bcdc5a9da903795f7f1c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0afab595b4f95c66f2bcdc5a9da903795f7f1c6c", "html_url": "https://github.com/rust-lang/rust/commit/0afab595b4f95c66f2bcdc5a9da903795f7f1c6c"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "6fe3fa7fb1b6a094fbbda30fe44e02e25e9e8a9a", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -32,7 +32,7 @@ use rustc_middle::{\n };\n use rustc_session::{config::CrateType, search_paths::PathKind, CtfeBacktrace};\n \n-use miri::{BacktraceStyle, ProvenanceMode, RetagFields};\n+use miri::{BacktraceStyle, BorrowTrackerMethod, ProvenanceMode, RetagFields};\n \n struct MiriCompilerCalls {\n     miri_config: miri::MiriConfig,\n@@ -317,6 +317,8 @@ fn main() {\n             miri_config.validate = false;\n         } else if arg == \"-Zmiri-disable-stacked-borrows\" {\n             miri_config.borrow_tracker = None;\n+        } else if arg == \"-Zmiri-tree-borrows\" {\n+            miri_config.borrow_tracker = Some(BorrowTrackerMethod::TreeBorrows);\n         } else if arg == \"-Zmiri-disable-data-race-detector\" {\n             miri_config.data_race_detector = false;\n             miri_config.weak_memory_emulation = false;"}, {"sha": "3c13118122ca3f9f4eb8c16f492b7bd7c8ce652c", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -22,6 +22,10 @@ pub enum TerminationInfo {\n         help: Option<String>,\n         history: Option<TagHistory>,\n     },\n+    TreeBorrowsUb {\n+        msg: String,\n+        // FIXME: incomplete\n+    },\n     Int2PtrWithStrictProvenance,\n     Deadlock,\n     MultipleSymbolDefinitions {\n@@ -61,6 +65,7 @@ impl fmt::Display for TerminationInfo {\n                     \"integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\"\n                 ),\n             StackedBorrowsUb { msg, .. } => write!(f, \"{msg}\"),\n+            TreeBorrowsUb { msg } => write!(f, \"{msg}\"),\n             Deadlock => write!(f, \"the evaluated program deadlocked\"),\n             MultipleSymbolDefinitions { link_name, .. } =>\n                 write!(f, \"multiple definitions of symbol `{link_name}`\"),\n@@ -184,7 +189,8 @@ pub fn report_error<'tcx, 'mir>(\n             Abort(_) => Some(\"abnormal termination\"),\n             UnsupportedInIsolation(_) | Int2PtrWithStrictProvenance =>\n                 Some(\"unsupported operation\"),\n-            StackedBorrowsUb { .. } | DataRace { .. } => Some(\"Undefined Behavior\"),\n+            StackedBorrowsUb { .. } | TreeBorrowsUb { .. } | DataRace { .. } =>\n+                Some(\"Undefined Behavior\"),\n             Deadlock => Some(\"deadlock\"),\n             MultipleSymbolDefinitions { .. } | SymbolShimClashing { .. } => None,\n         };\n@@ -212,6 +218,12 @@ pub fn report_error<'tcx, 'mir>(\n                     }\n                 }\n                 helps\n+            },\n+            TreeBorrowsUb { .. } => {\n+                let helps = vec![\n+                    (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental\")),\n+                ];\n+                helps\n             }\n             MultipleSymbolDefinitions { first, first_crate, second, second_crate, .. } =>\n                 vec!["}, {"sha": "a32b18595b536355a455fed9b41b812737e0ad32", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -87,7 +87,7 @@ pub struct MiriConfig {\n     pub env: Vec<(OsString, OsString)>,\n     /// Determine if validity checking is enabled.\n     pub validate: bool,\n-    /// Determines if Stacked Borrows is enabled.\n+    /// Determines if Stacked Borrows or Tree Borrows is enabled.\n     pub borrow_tracker: Option<BorrowTrackerMethod>,\n     /// Controls alignment checking.\n     pub check_alignment: AlignmentCheck,\n@@ -134,7 +134,7 @@ pub struct MiriConfig {\n     pub preemption_rate: f64,\n     /// Report the current instruction being executed every N basic blocks.\n     pub report_progress: Option<u32>,\n-    /// Whether Stacked Borrows retagging should recurse into fields of datatypes.\n+    /// Whether Stacked Borrows and Tree Borrows retagging should recurse into fields of datatypes.\n     pub retag_fields: RetagFields,\n     /// The location of a shared object file to load when calling external functions\n     /// FIXME! consider allowing users to specify paths to multiple SO files, or to a directory"}, {"sha": "01d0f01d319d0df310cd13384b8fc421a6a18ad7", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -95,6 +95,7 @@ pub use crate::shims::EvalContextExt as _;\n pub use crate::borrow_tracker::stacked_borrows::{\n     EvalContextExt as _, Item, Permission, Stack, Stacks,\n };\n+pub use crate::borrow_tracker::tree_borrows::{EvalContextExt as _, Tree};\n pub use crate::borrow_tracker::{\n     BorTag, BorrowTrackerMethod, CallId, EvalContextExt as _, RetagFields,\n };"}, {"sha": "eaa441d22ec9ea9e5986adc684e6e5a27877722f", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -38,7 +38,7 @@ pub const SIGRTMAX: i32 = 42;\n \n /// Extra data stored with each stack frame\n pub struct FrameExtra<'tcx> {\n-    /// Extra data for Stacked Borrows.\n+    /// Extra data for the Borrow Tracker.\n     pub borrow_tracker: Option<borrow_tracker::FrameState>,\n \n     /// If this is Some(), then this is a special \"catch unwind\" frame (the frame of `try_fn`\n@@ -146,7 +146,7 @@ impl fmt::Display for MiriMemoryKind {\n pub enum Provenance {\n     Concrete {\n         alloc_id: AllocId,\n-        /// Stacked Borrows tag.\n+        /// Borrow Tracker tag.\n         tag: BorTag,\n     },\n     Wildcard,\n@@ -195,7 +195,7 @@ impl fmt::Debug for Provenance {\n                 } else {\n                     write!(f, \"[{alloc_id:?}]\")?;\n                 }\n-                // Print Stacked Borrows tag.\n+                // Print Borrow Tracker tag.\n                 write!(f, \"{tag:?}\")?;\n             }\n             Provenance::Wildcard => {"}, {"sha": "73439133af219521c63d0b4a56f13458cb58a28b", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bbb0404f8c49c0d703492303e766d0703017bb8/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=8bbb0404f8c49c0d703492303e766d0703017bb8", "patch": "@@ -232,6 +232,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n     }\n \n+    /// Read bytes from a `(ptr, len)` argument\n+    fn read_byte_slice<'i>(&'i self, bytes: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, &'i [u8]>\n+    where\n+        'mir: 'i,\n+    {\n+        let this = self.eval_context_ref();\n+        let (ptr, len) = this.read_immediate(bytes)?.to_scalar_pair();\n+        let ptr = ptr.to_pointer(this)?;\n+        let len = len.to_target_usize(this)?;\n+        let bytes = this.read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(len))?;\n+        Ok(bytes)\n+    }\n+\n     /// Emulates calling a foreign item, failing if the item is not supported.\n     /// This function will handle `goto_block` if needed.\n     /// Returns Ok(None) if the foreign item was completely handled\n@@ -427,13 +440,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 })?;\n                 this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n             }\n-            \"miri_print_borrow_stacks\" => {\n-                let [id] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+            \"miri_print_borrow_state\" => {\n+                let [id, show_unnamed] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let id = this.read_scalar(id)?.to_u64()?;\n+                let show_unnamed = this.read_scalar(show_unnamed)?.to_bool()?;\n                 if let Some(id) = std::num::NonZeroU64::new(id) {\n-                    this.print_stacks(AllocId(id))?;\n+                    this.print_borrow_state(AllocId(id), show_unnamed)?;\n                 }\n             }\n+            \"miri_pointer_name\" => {\n+                // This associates a name to a tag. Very useful for debugging, and also makes\n+                // tests more strict.\n+                let [ptr, nth_parent, name] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let ptr = this.read_pointer(ptr)?;\n+                let nth_parent = this.read_scalar(nth_parent)?.to_u8()?;\n+                let name = this.read_byte_slice(name)?;\n+                // We must make `name` owned because we need to\n+                // end the shared borrow from `read_byte_slice` before we can\n+                // start the mutable borrow for `give_pointer_debug_name`.\n+                let name = String::from_utf8_lossy(name).into_owned();\n+                this.give_pointer_debug_name(ptr, nth_parent, &name)?;\n+            }\n             \"miri_static_root\" => {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n@@ -487,12 +514,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // Writes some bytes to the interpreter's stdout/stderr. See the\n             // README for details.\n             \"miri_write_to_stdout\" | \"miri_write_to_stderr\" => {\n-                let [bytes] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let (ptr, len) = this.read_immediate(bytes)?.to_scalar_pair();\n-                let ptr = ptr.to_pointer(this)?;\n-                let len = len.to_target_usize(this)?;\n-                let msg = this.read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(len))?;\n-\n+                let [msg] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let msg = this.read_byte_slice(msg)?;\n                 // Note: we're ignoring errors writing to host stdout/stderr.\n                 let _ignore = match link_name.as_str() {\n                     \"miri_write_to_stdout\" => std::io::stdout().write_all(msg),"}]}