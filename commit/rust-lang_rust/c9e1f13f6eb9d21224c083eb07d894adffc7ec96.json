{"sha": "c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTFmMTNmNmViOWQyMTIyNGMwODNlYjA3ZDg5NGFkZmZjN2VjOTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T17:08:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:53:40Z"}, "message": "recover on 'mut', 'var', 'auto'", "tree": {"sha": "b78472f4650714a67fc3ccbe745982a9a9645394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78472f4650714a67fc3ccbe745982a9a9645394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "html_url": "https://github.com/rust-lang/rust/commit/c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d20935cc7dc9057c683bb62a4ba74475f32aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d20935cc7dc9057c683bb62a4ba74475f32aa2", "html_url": "https://github.com/rust-lang/rust/commit/a0d20935cc7dc9057c683bb62a4ba74475f32aa2"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "abee24e2b0929aa7a1d93bab8d3bd5a18490dabd", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "patch": "@@ -14,7 +14,7 @@ use syntax::ast::{AttrVec, Attribute, AttrStyle, VisibilityKind, MacStmtStyle, M\n use syntax::util::classify;\n use syntax::token;\n use syntax_pos::source_map::{respan, Span};\n-use syntax_pos::symbol::kw;\n+use syntax_pos::symbol::{kw, sym, Symbol};\n \n use std::mem;\n \n@@ -39,8 +39,20 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n \n         if self.eat_keyword(kw::Let) {\n-            let local = self.parse_local(attrs.into())?;\n-            return Ok(Some(self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(local))));\n+            return self.parse_local_mk(lo, attrs.into()).map(Some)\n+        }\n+        if self.is_kw_followed_by_ident(kw::Mut) {\n+            return self.recover_stmt_local(lo, attrs.into(), \"missing `let`\", \"let mut\");\n+        }\n+        if self.is_kw_followed_by_ident(kw::Auto) {\n+            self.bump(); // `auto`\n+            let msg = \"to introduce a variable, write `let` instead of `auto`\";\n+            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n+        }\n+        if self.is_kw_followed_by_ident(sym::var) {\n+            self.bump(); // `var`\n+            let msg = \"to introduce a variable, write `let` instead of `var`\";\n+            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n         }\n \n         let mac_vis = respan(lo, VisibilityKind::Inherited);\n@@ -189,6 +201,30 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {\n+        self.token.is_keyword(kw)\n+            && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n+    }\n+\n+    fn recover_stmt_local(\n+        &mut self,\n+        span: Span,\n+        attrs: AttrVec,\n+        msg: &str,\n+        sugg: &str,\n+    ) -> PResult<'a, Option<Stmt>> {\n+        let stmt = self.parse_local_mk(span, attrs)?;\n+        self.struct_span_err(stmt.span, \"invalid variable declaration\")\n+            .span_suggestion_short(span, msg, sugg.to_string(), Applicability::MachineApplicable)\n+            .emit();\n+        Ok(Some(stmt))\n+    }\n+\n+    fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n+        let local = self.parse_local(attrs.into())?;\n+        Ok(self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(local)))\n+    }\n+\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;"}, {"sha": "d3e80fc4fddd6d6505afc24dd3b68508c2299127", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "patch": "@@ -773,6 +773,7 @@ symbols! {\n         usize,\n         v1,\n         val,\n+        var,\n         vec,\n         Vec,\n         vis,"}, {"sha": "7efc417487401c8e988071b9d86a5deba1ddc363", "filename": "src/test/ui/parser/issue-65257-invalid-var-decl-recovery.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.rs?ref=c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    auto n = 0;//~ ERROR invalid variable declaration\n+    //~^ HELP to introduce a variable, write `let` instead of `auto`\n+    auto m;//~ ERROR invalid variable declaration\n+    //~^ HELP to introduce a variable, write `let` instead of `auto`\n+    m = 0;\n+\n+    var n = 0;//~ ERROR invalid variable declaration\n+    //~^ HELP to introduce a variable, write `let` instead of `var`\n+    var m;//~ ERROR invalid variable declaration\n+    //~^ HELP to introduce a variable, write `let` instead of `var`\n+    m = 0;\n+\n+    mut n = 0;//~ ERROR invalid variable declaration\n+    //~^ HELP missing `let`\n+    mut var;//~ ERROR invalid variable declaration\n+    //~^ HELP missing `let`\n+    var = 0;\n+\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "429c12265bdbff3ab5967a81eaed70025347393c", "filename": "src/test/ui/parser/issue-65257-invalid-var-decl-recovery.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9e1f13f6eb9d21224c083eb07d894adffc7ec96/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65257-invalid-var-decl-recovery.stderr?ref=c9e1f13f6eb9d21224c083eb07d894adffc7ec96", "patch": "@@ -0,0 +1,59 @@\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:2:5\n+   |\n+LL |     auto n = 0;\n+   |     ----^^^^^^\n+   |     |\n+   |     help: to introduce a variable, write `let` instead of `auto`\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:4:5\n+   |\n+LL |     auto m;\n+   |     ----^^\n+   |     |\n+   |     help: to introduce a variable, write `let` instead of `auto`\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:8:5\n+   |\n+LL |     var n = 0;\n+   |     ---^^^^^^\n+   |     |\n+   |     help: to introduce a variable, write `let` instead of `var`\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:10:5\n+   |\n+LL |     var m;\n+   |     ---^^\n+   |     |\n+   |     help: to introduce a variable, write `let` instead of `var`\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:14:5\n+   |\n+LL |     mut n = 0;\n+   |     ---^^^^^^\n+   |     |\n+   |     help: missing `let`\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:16:5\n+   |\n+LL |     mut var;\n+   |     ---^^^^\n+   |     |\n+   |     help: missing `let`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-65257-invalid-var-decl-recovery.rs:20:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}