{"sha": "14636887008d9ee67a12b4f05f1e404ed1d64579", "node_id": "C_kwDOAAsO6NoAKDE0NjM2ODg3MDA4ZDllZTY3YTEyYjRmMDVmMWU0MDRlZDFkNjQ1Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-10T14:48:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-10T14:48:34Z"}, "message": "Auto merge of #101652 - Dylan-DPC:rollup-f4atky0, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101578 (remove bound var hack in `resolve`)\n - #101606 (doc: fix minor typo)\n - #101614 (Equate fn outputs when inferring RPITIT hidden types)\n - #101631 (rustdoc: avoid cleaning modules with duplicate names)\n - #101635 (Move `Queries::new` out of the macro)\n - #101641 (Update browser-ui-test version to 0.9.8)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7c8889fb012b18c3636ed35e7f7f421c6e64da5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8889fb012b18c3636ed35e7f7f421c6e64da5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14636887008d9ee67a12b4f05f1e404ed1d64579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14636887008d9ee67a12b4f05f1e404ed1d64579", "html_url": "https://github.com/rust-lang/rust/commit/14636887008d9ee67a12b4f05f1e404ed1d64579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14636887008d9ee67a12b4f05f1e404ed1d64579/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e44c17c12cec45b6a682b1e53a04ac5b5fcc9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e44c17c12cec45b6a682b1e53a04ac5b5fcc9d2", "html_url": "https://github.com/rust-lang/rust/commit/2e44c17c12cec45b6a682b1e53a04ac5b5fcc9d2"}, {"sha": "783561029c071cc42f00435e1b1610873c1f9352", "url": "https://api.github.com/repos/rust-lang/rust/commits/783561029c071cc42f00435e1b1610873c1f9352", "html_url": "https://github.com/rust-lang/rust/commit/783561029c071cc42f00435e1b1610873c1f9352"}], "stats": {"total": 361, "additions": 215, "deletions": 146}, "files": [{"sha": "9c0fb8265cff71da9557cdad785c662156f79fc2", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -48,7 +48,7 @@ cfg_if! {\n         /// the native atomic types.\n         /// You should use this type through the `AtomicU64`, `AtomicUsize`, etc, type aliases\n         /// as it's not intended to be used separately.\n-        #[derive(Debug)]\n+        #[derive(Debug, Default)]\n         pub struct Atomic<T: Copy>(Cell<T>);\n \n         impl<T: Copy> Atomic<T> {"}, {"sha": "f72e7389fc606d9b935fd257aff85ff0ee03d384", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -1202,14 +1202,11 @@ rustc_queries! {\n         }\n     }\n \n-    query codegen_fulfill_obligation(\n+    query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n     ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n         cache_on_disk_if { true }\n-        desc { |tcx|\n-            \"checking if `{}` fulfills its obligations\",\n-            tcx.def_path_str(key.1.def_id())\n-        }\n+        desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n \n     /// Return all `impl` blocks in the current crate."}, {"sha": "755d9f8f696675859c387125c2181a95b95f3921", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -1024,7 +1024,7 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver(Option<Span>),\n }\n \n-/// These are the error cases for `codegen_fulfill_obligation`.\n+/// These are the error cases for `codegen_select_candidate`.\n #[derive(Copy, Clone, Debug, Hash, HashStable, Encodable, Decodable)]\n pub enum CodegenObligationError {\n     /// Ambiguity can happen when monomorphizing during trans"}, {"sha": "3afff7bcabf7de1cbfe2fc8dc48810290c7c41f4", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -35,7 +35,7 @@ fn custom_coerce_unsize_info<'tcx>(\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n     });\n \n-    match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n+    match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {\n             impl_def_id,\n             .."}, {"sha": "96679281f07ec6c73335d4a516916f3583b849b3", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -5,7 +5,7 @@\n use crate::keys::Key;\n use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::sync::{AtomicU64, Lock};\n use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{\n     self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n@@ -499,9 +499,28 @@ macro_rules! define_queries {\n     }\n }\n \n+use crate::{ExternProviders, OnDiskCache, Providers};\n+\n+impl<'tcx> Queries<'tcx> {\n+    pub fn new(\n+        local_providers: Providers,\n+        extern_providers: ExternProviders,\n+        on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    ) -> Self {\n+        Queries {\n+            local_providers: Box::new(local_providers),\n+            extern_providers: Box::new(extern_providers),\n+            on_disk_cache,\n+            jobs: AtomicU64::new(1),\n+            ..Queries::default()\n+        }\n+    }\n+}\n+\n macro_rules! define_queries_struct {\n     (\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n+        #[derive(Default)]\n         pub struct Queries<'tcx> {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n@@ -514,20 +533,6 @@ macro_rules! define_queries_struct {\n         }\n \n         impl<'tcx> Queries<'tcx> {\n-            pub fn new(\n-                local_providers: Providers,\n-                extern_providers: ExternProviders,\n-                on_disk_cache: Option<OnDiskCache<'tcx>>,\n-            ) -> Self {\n-                Queries {\n-                    local_providers: Box::new(local_providers),\n-                    extern_providers: Box::new(extern_providers),\n-                    on_disk_cache,\n-                    jobs: AtomicU64::new(1),\n-                    $($name: Default::default()),*\n-                }\n-            }\n-\n             pub(crate) fn try_collect_active_jobs(\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,"}, {"sha": "08adbcbd410c679ac9c444831ab594185a14c0ae", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n ///\n /// This also expects that `trait_ref` is fully normalized.\n-pub fn codegen_fulfill_obligation<'tcx>(\n+pub fn codegen_select_candidate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {"}, {"sha": "40596078f0414f551e862d702cecd21df0ece38e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -971,7 +971,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n-        codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n+        codegen_select_candidate: codegen::codegen_select_candidate,\n         own_existential_vtable_entries,\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,"}, {"sha": "b55302de2a733891ad6d72010240747a68559acf", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 110, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -3,113 +3,11 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{\n-    self, Binder, Instance, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n-};\n+use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitable};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n-use rustc_data_structures::sso::SsoHashSet;\n-use std::collections::btree_map::Entry;\n-use std::collections::BTreeMap;\n-use std::ops::ControlFlow;\n-\n-// FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n-// outside of `resolve_associated_item`. It's just to address #64494,\n-// #83765, and #85848 which are creating bound types/regions that lose\n-// their `Binder` *unintentionally*.\n-// It's ideal to remove `BoundVarsCollector` and just use\n-// `ty::Binder::*` methods but we use this stopgap until we figure out\n-// the \"real\" fix.\n-struct BoundVarsCollector<'tcx> {\n-    binder_index: ty::DebruijnIndex,\n-    vars: BTreeMap<u32, ty::BoundVariableKind>,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> BoundVarsCollector<'tcx> {\n-    fn new() -> Self {\n-        BoundVarsCollector {\n-            binder_index: ty::INNERMOST,\n-            vars: BTreeMap::new(),\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-\n-    fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or(0);\n-        for i in 0..max {\n-            if let None = self.vars.get(&i) {\n-                panic!(\"Unknown variable: {:?}\", i);\n-            }\n-        }\n-\n-        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder() < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::CONTINUE;\n-        }\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                match self.vars.entry(bound_ty.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Ty(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match *r {\n-            ty::ReLateBound(index, br) if index == self.binder_index => {\n-                match self.vars.entry(br.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Region(br.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Region(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -201,19 +99,14 @@ fn resolve_associated_item<'tcx>(\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n \n-    // See FIXME on `BoundVarsCollector`.\n-    let mut bound_vars_collector = BoundVarsCollector::new();\n-    trait_ref.visit_with(&mut bound_vars_collector);\n-    let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n-    let vtbl = match tcx.codegen_fulfill_obligation((param_env, trait_binder)) {\n+    let vtbl = match tcx.codegen_select_candidate((param_env, ty::Binder::dummy(trait_ref))) {\n         Ok(vtbl) => vtbl,\n         Err(CodegenObligationError::Ambiguity) => {\n             let reported = tcx.sess.delay_span_bug(\n                 tcx.def_span(trait_item_id),\n                 &format!(\n-                    \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n+                    \"encountered ambiguity selecting `{trait_ref:?}` during codegen, presuming due to \\\n                      overflow or prior type error\",\n-                    trait_binder\n                 ),\n             );\n             return Err(reported);"}, {"sha": "13a96df77b69d51699496629a0e0d9731540fa90", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -295,12 +295,26 @@ pub(super) fn compare_predicates_and_trait_impl_trait_tys<'tcx>(\n         // type would be more appropriate. In other places we have a `Vec<Span>`\n         // corresponding to their `Vec<Predicate>`, but we don't have that here.\n         // Fixing this would improve the output of test `issue-83765.rs`.\n-        let sub_result = infcx\n+        let mut result = infcx\n             .at(&cause, param_env)\n             .sup(trait_fty, impl_fty)\n             .map(|infer_ok| ocx.register_infer_ok_obligations(infer_ok));\n \n-        if let Err(terr) = sub_result {\n+        // HACK(RPITIT): #101614. When we are trying to infer the hidden types for\n+        // RPITITs, we need to equate the output tys instead of just subtyping. If\n+        // we just use `sup` above, we'll end up `&'static str <: _#1t`, which causes\n+        // us to infer `_#1t = #'_#2r str`, where `'_#2r` is unconstrained, which gets\n+        // fixed up to `ReEmpty`, and which is certainly not what we want.\n+        if trait_fty.has_infer_types() {\n+            result = result.and_then(|()| {\n+                infcx\n+                    .at(&cause, param_env)\n+                    .eq(trait_sig.output(), impl_sig.output())\n+                    .map(|infer_ok| ocx.register_infer_ok_obligations(infer_ok))\n+            });\n+        }\n+\n+        if let Err(terr) = result {\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n \n             let (impl_err_span, trait_err_span) =\n@@ -445,6 +459,7 @@ pub(super) fn compare_predicates_and_trait_impl_trait_tys<'tcx>(\n                             region\n                         }\n                     });\n+                    debug!(%ty);\n                     collected_tys.insert(def_id, ty);\n                 }\n                 Err(err) => {"}, {"sha": "ceea6986e3335afdd67f4e3989a80185dbc514f3", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -116,7 +116,7 @@\n //! Threads are able to have associated names for identification purposes. By default, spawned\n //! threads are unnamed. To specify a name for a thread, build the thread with [`Builder`] and pass\n //! the desired thread name to [`Builder::name`]. To retrieve the thread name from within the\n-//! thread, use [`Thread::name`]. A couple examples of where the name of a thread gets used:\n+//! thread, use [`Thread::name`]. A couple of examples where the name of a thread gets used:\n //!\n //! * If a panic occurs in a named thread, the thread name will be printed in the panic message.\n //! * The thread name is provided to the OS where applicable (e.g., `pthread_setname_np` in"}, {"sha": "b5d0ec558fd629a6145502703d6a8db76d5fd7d0", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -1 +1 @@\n-0.9.7\n\\ No newline at end of file\n+0.9.8\n\\ No newline at end of file"}, {"sha": "bca3f4db4a85460c0f686fa3baf3b7f24726365d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -50,14 +50,23 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n     let mut inserted = FxHashSet::default();\n     items.extend(doc.foreigns.iter().map(|(item, renamed)| {\n         let item = clean_maybe_renamed_foreign_item(cx, item, *renamed);\n-        if let Some(name) = item.name {\n+        if let Some(name) = item.name && !item.attrs.lists(sym::doc).has_word(sym::hidden) {\n             inserted.insert((item.type_(), name));\n         }\n         item\n     }));\n-    items.extend(doc.mods.iter().map(|x| {\n-        inserted.insert((ItemType::Module, x.name));\n-        clean_doc_module(x, cx)\n+    items.extend(doc.mods.iter().filter_map(|x| {\n+        if !inserted.insert((ItemType::Module, x.name)) {\n+            return None;\n+        }\n+        let item = clean_doc_module(x, cx);\n+        if item.attrs.lists(sym::doc).has_word(sym::hidden) {\n+            // Hidden modules are stripped at a later stage.\n+            // If a hidden module has the same name as a visible one, we want\n+            // to keep both of them around.\n+            inserted.remove(&(ItemType::Module, x.name));\n+        }\n+        Some(item)\n     }));\n \n     // Split up imports from all other items.\n@@ -72,7 +81,7 @@ pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<\n         }\n         let v = clean_maybe_renamed_item(cx, item, *renamed);\n         for item in &v {\n-            if let Some(name) = item.name {\n+            if let Some(name) = item.name && !item.attrs.lists(sym::doc).has_word(sym::hidden) {\n                 inserted.insert((item.type_(), name));\n             }\n         }"}, {"sha": "c27ac0ac40e1dbe200e196510df111b12522da1e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -164,8 +164,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.inside_public_path &= self.cx.tcx.visibility(def_id).is_public();\n         for &i in m.item_ids {\n             let item = self.cx.tcx.hir().item(i);\n+            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                continue;\n+            }\n             self.visit_item(item, None, &mut om);\n         }\n+        for &i in m.item_ids {\n+            let item = self.cx.tcx.hir().item(i);\n+            // To match the way import precedence works, visit glob imports last.\n+            // Later passes in rustdoc will de-duplicate by name and kind, so if glob-\n+            // imported items appear last, then they'll be the ones that get discarded.\n+            if matches!(item.kind, hir::ItemKind::Use(_, hir::UseKind::Glob)) {\n+                self.visit_item(item, None, &mut om);\n+            }\n+        }\n         self.inside_public_path = orig_inside_public_path;\n         om\n     }"}, {"sha": "5b786cf53f2987d5e5ead342f6f1af895b2e133a", "filename": "src/test/rustdoc/glob-shadowing-const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fglob-shadowing-const.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -0,0 +1,20 @@\n+// https://github.com/rust-lang/rust/pull/83872#issuecomment-820101008\n+#![crate_name=\"foo\"]\n+\n+mod sub4 {\n+    /// 0\n+    pub const X: usize = 0;\n+    pub mod inner {\n+        pub use super::*;\n+        /// 1\n+        pub const X: usize = 1;\n+    }\n+}\n+\n+#[doc(inline)]\n+pub use sub4::inner::*;\n+\n+// @has 'foo/index.html'\n+// @has - '//div[@class=\"item-right docblock-short\"]' '1'\n+// @!has - '//div[@class=\"item-right docblock-short\"]' '0'\n+fn main() { assert_eq!(X, 1); }"}, {"sha": "66a31c42bcfc7732b52c30387c2cc108eb8154c9", "filename": "src/test/rustdoc/glob-shadowing.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fglob-shadowing.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -0,0 +1,86 @@\n+// @has 'glob_shadowing/index.html'\n+// @count - '//div[@class=\"item-left module-item\"]' 6\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub2::describe'\n+\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe2'\n+\n+// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::prelude'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::prelude'\n+\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub1::Foo (struct)'\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::Foo (function)'\n+\n+// @has - '//div[@class=\"item-right docblock-short\"]' 'sub4::inner::X'\n+\n+// @has 'glob_shadowing/fn.describe.html'\n+// @has - '//div[@class=\"docblock\"]' 'sub2::describe'\n+\n+mod sub1 {\n+    // this should be shadowed by sub2::describe\n+    /// sub1::describe\n+    pub fn describe() -> &'static str {\n+        \"sub1::describe\"\n+    }\n+\n+    // this should be shadowed by mod::prelude\n+    /// sub1::prelude\n+    pub mod prelude {\n+    }\n+\n+    // this should *not* be shadowed, because sub1::Foo and mod::Foo are in different namespaces\n+    /// sub1::Foo (struct)\n+    pub struct Foo;\n+\n+    // this should be shadowed,\n+    // because both sub1::describe2 and sub3::describe2 are from glob reexport\n+    /// sub1::describe2\n+    pub fn describe2() -> &'static str {\n+        \"sub1::describe2\"\n+    }\n+}\n+\n+mod sub2 {\n+    /// sub2::describe\n+    pub fn describe() -> &'static str {\n+        \"sub2::describe\"\n+    }\n+}\n+\n+mod sub3 {\n+    // this should be shadowed\n+    // because both sub1::describe2 and sub3::describe2 are from glob reexport\n+    /// sub3::describe2\n+    pub fn describe2() -> &'static str {\n+        \"sub3::describe2\"\n+    }\n+}\n+\n+mod sub4 {\n+    // this should be shadowed by sub4::inner::X\n+    /// sub4::X\n+    pub const X: usize = 0;\n+    pub mod inner {\n+        pub use super::*;\n+        /// sub4::inner::X\n+        pub const X: usize = 1;\n+    }\n+}\n+\n+/// mod::Foo (function)\n+pub fn Foo() {}\n+\n+#[doc(inline)]\n+pub use sub2::describe;\n+\n+#[doc(inline)]\n+pub use sub1::*;\n+\n+#[doc(inline)]\n+pub use sub3::*;\n+\n+#[doc(inline)]\n+pub use sub4::inner::*;\n+\n+/// mod::prelude\n+pub mod prelude {}"}, {"sha": "d3a7a870b580a29d47a4bd3f927962744fad3344", "filename": "src/test/rustdoc/issue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline-last-item.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+\n+pub mod sub {\n+    pub struct Item;\n+\n+    pub mod prelude {\n+        pub use super::Item;\n+    }\n+}\n+\n+#[doc(inline)]\n+pub use sub::*;\n+\n+// @count foo/index.html '//a[@class=\"mod\"][@title=\"foo::prelude mod\"]' 1\n+// @count foo/prelude/index.html '//div[@class=\"item-row\"]' 0\n+pub mod prelude {}"}, {"sha": "b836925099364598de36ee0cc1b0ebeb93abc234", "filename": "src/test/rustdoc/issue-83375-multiple-mods-w-same-name-doc-inline.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-83375-multiple-mods-w-same-name-doc-inline.rs?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -0,0 +1,16 @@\n+#![crate_name = \"foo\"]\n+\n+pub mod sub {\n+    pub struct Item;\n+\n+    pub mod prelude {\n+        pub use super::Item;\n+    }\n+}\n+\n+// @count foo/index.html '//a[@class=\"mod\"][@title=\"foo::prelude mod\"]' 1\n+// @count foo/prelude/index.html '//div[@class=\"item-row\"]' 0\n+pub mod prelude {}\n+\n+#[doc(inline)]\n+pub use sub::*;"}, {"sha": "d5f914f46f873bd1fb2fd77f4545108a756c8bc3", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14636887008d9ee67a12b4f05f1e404ed1d64579/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=14636887008d9ee67a12b4f05f1e404ed1d64579", "patch": "@@ -4,13 +4,13 @@ error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, { T::DIM },\n LL |     const DIM: usize;\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires checking if `TensorDimension` fulfills its obligations...\n+note: ...which requires computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`...\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires resolving instance `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>::DIM`, completing the cycle\n-note: cycle used when checking if `TensorDimension` fulfills its obligations\n+note: cycle used when computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {"}]}