{"sha": "38f6cdbc8a83b081ad1cef9171e28431be09db01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZjZjZGJjOGE4M2IwODFhZDFjZWY5MTcxZTI4NDMxYmUwOWRiMDE=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T06:42:35Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-06-20T06:42:35Z"}, "message": "Make get_fn_trait a method of FnTrait", "tree": {"sha": "c6f30deba5f85f35950a558e5290a0cf56601fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6f30deba5f85f35950a558e5290a0cf56601fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38f6cdbc8a83b081ad1cef9171e28431be09db01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38f6cdbc8a83b081ad1cef9171e28431be09db01", "html_url": "https://github.com/rust-lang/rust/commit/38f6cdbc8a83b081ad1cef9171e28431be09db01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38f6cdbc8a83b081ad1cef9171e28431be09db01/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf870af8073e3a72fdfb1d36b017f0abd7593559", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf870af8073e3a72fdfb1d36b017f0abd7593559", "html_url": "https://github.com/rust-lang/rust/commit/cf870af8073e3a72fdfb1d36b017f0abd7593559"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "8c924ad427191849d52f3b57eaceac69963646f2", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=38f6cdbc8a83b081ad1cef9171e28431be09db01", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::ast::RangeOp;\n \n use crate::{\n     autoderef, method_resolution, op,\n-    traits::{builtin::get_fn_trait, FnTrait, InEnvironment, SolutionVariables},\n+    traits::{FnTrait, InEnvironment, SolutionVariables},\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, Binders, CallableDef, FnSig, InferTy, IntTy, Mutability, Obligation, Rawness,\n     Substs, TraitRef, Ty, TypeCtor,\n@@ -67,7 +67,7 @@ impl<'a> InferenceContext<'a> {\n         if let Some(krate) = self.resolver.krate() {\n             let fn_traits: Vec<crate::TraitId> = [FnTrait::FnOnce, FnTrait::FnMut, FnTrait::Fn]\n                 .iter()\n-                .filter_map(|f| get_fn_trait(self.db, krate, *f))\n+                .filter_map(|f| f.get_id(self.db, krate))\n                 .collect();\n             for fn_trait in fn_traits {\n                 let fn_trait_data = self.db.trait_data(fn_trait);"}, {"sha": "892fbd6d123338fdc319205863752876a704725a", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=38f6cdbc8a83b081ad1cef9171e28431be09db01", "patch": "@@ -2,7 +2,9 @@\n use std::{panic, sync::Arc};\n \n use chalk_ir::cast::Cast;\n-use hir_def::{expr::ExprId, DefWithBodyId, ImplId, TraitId, TypeAliasId};\n+use hir_def::{\n+    expr::ExprId, lang_item::LangItemTarget, DefWithBodyId, ImplId, TraitId, TypeAliasId,\n+};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n@@ -14,7 +16,7 @@ use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty,\n use self::chalk::{from_chalk, Interner, ToChalk};\n \n pub(crate) mod chalk;\n-pub(crate) mod builtin;\n+mod builtin;\n \n // This controls the maximum size of types Chalk considers. If we set this too\n // high, we can run into slow edge cases; if we set it too low, Chalk won't\n@@ -298,6 +300,14 @@ impl FnTrait {\n             FnTrait::Fn => \"fn\",\n         }\n     }\n+\n+    pub fn get_id(&self, db: &dyn HirDatabase, krate: CrateId) -> Option<TraitId> {\n+        let target = db.lang_item(krate, self.lang_item_name().into())?;\n+        match target {\n+            LangItemTarget::TraitId(t) => Some(t),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "6d5f2d46a72cc56ba4382fe10b07c170586bd419", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f6cdbc8a83b081ad1cef9171e28431be09db01/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=38f6cdbc8a83b081ad1cef9171e28431be09db01", "patch": "@@ -40,7 +40,7 @@ pub(super) fn get_builtin_impls(\n     if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Closure { def, expr }, .. }) = ty {\n         for &fn_trait in [super::FnTrait::FnOnce, super::FnTrait::FnMut, super::FnTrait::Fn].iter()\n         {\n-            if let Some(actual_trait) = get_fn_trait(db, krate, fn_trait) {\n+            if let Some(actual_trait) = fn_trait.get_id(db, krate) {\n                 if trait_ == actual_trait {\n                     let impl_ = super::ClosureFnTraitImplData { def: *def, expr: *expr, fn_trait };\n                     if check_closure_fn_trait_impl_prerequisites(db, krate, impl_) {\n@@ -128,15 +128,15 @@ fn check_closure_fn_trait_impl_prerequisites(\n     data: super::ClosureFnTraitImplData,\n ) -> bool {\n     // the respective Fn/FnOnce/FnMut trait needs to exist\n-    if get_fn_trait(db, krate, data.fn_trait).is_none() {\n+    if data.fn_trait.get_id(db, krate).is_none() {\n         return false;\n     }\n \n     // FIXME: there are more assumptions that we should probably check here:\n     // the traits having no type params, FnOnce being a supertrait\n \n     // the FnOnce trait needs to exist and have an assoc type named Output\n-    let fn_once_trait = match get_fn_trait(db, krate, super::FnTrait::FnOnce) {\n+    let fn_once_trait = match (super::FnTrait::FnOnce).get_id(db, krate) {\n         Some(t) => t,\n         None => return false,\n     };\n@@ -151,7 +151,9 @@ fn closure_fn_trait_impl_datum(\n     // for some closure |X, Y| -> Z:\n     // impl<T, U, V> Fn<(T, U)> for closure<fn(T, U) -> V> { Output = V }\n \n-    let trait_ = get_fn_trait(db, krate, data.fn_trait) // get corresponding fn trait\n+    let trait_ = data\n+        .fn_trait\n+        .get_id(db, krate) // get corresponding fn trait\n         // the existence of the Fn trait has been checked before\n         .expect(\"fn trait for closure impl missing\");\n \n@@ -211,7 +213,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n     let output_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, num_args.into()));\n \n     let fn_once_trait =\n-        get_fn_trait(db, krate, super::FnTrait::FnOnce).expect(\"assoc ty value should not exist\");\n+        (super::FnTrait::FnOnce).get_id(db, krate).expect(\"assoc ty value should not exist\");\n \n     let output_ty_id = db\n         .trait_data(fn_once_trait)\n@@ -360,18 +362,6 @@ fn super_trait_object_unsize_impl_datum(\n     BuiltinImplData { num_vars, trait_ref, where_clauses: Vec::new(), assoc_ty_values: Vec::new() }\n }\n \n-pub fn get_fn_trait(\n-    db: &dyn HirDatabase,\n-    krate: CrateId,\n-    fn_trait: super::FnTrait,\n-) -> Option<TraitId> {\n-    let target = db.lang_item(krate, fn_trait.lang_item_name().into())?;\n-    match target {\n-        LangItemTarget::TraitId(t) => Some(t),\n-        _ => None,\n-    }\n-}\n-\n fn get_unsize_trait(db: &dyn HirDatabase, krate: CrateId) -> Option<TraitId> {\n     let target = db.lang_item(krate, \"unsize\".into())?;\n     match target {"}]}