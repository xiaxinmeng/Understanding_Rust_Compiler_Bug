{"sha": "f19851069efd6ee1fe899a469f08ad2d66e76050", "node_id": "C_kwDOAAsO6NoAKGYxOTg1MTA2OWVmZDZlZTFmZTg5OWE0NjlmMDhhZDJkNjZlNzYwNTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-11T23:01:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-11T23:01:50Z"}, "message": "Auto merge of #93921 - matthiaskrgr:rollup-wn3jlxj, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #90955 (Rename `FilenameTooLong` to `InvalidFilename` and also use it for Windows' `ERROR_INVALID_NAME`)\n - #91607 (Make `span_extend_to_prev_str()` more robust)\n - #92895 (Remove some unused functionality)\n - #93635 (Add missing platform-specific information on current_dir and set_current_dir)\n - #93660 (rustdoc-json: Add some tests for typealias item)\n - #93782 (Split `pauth` target feature)\n - #93868 (Fix incorrect register conflict detection in asm!)\n - #93888 (Implement `AsFd` for `&T` and `&mut T`.)\n - #93909 (Fix typo: explicitely -> explicitly)\n - #93910 (fix mention of moved function in `rustc_hir` docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "82ccc32c3615e9fcbcf040e3c867b0cc527ce739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ccc32c3615e9fcbcf040e3c867b0cc527ce739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19851069efd6ee1fe899a469f08ad2d66e76050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19851069efd6ee1fe899a469f08ad2d66e76050", "html_url": "https://github.com/rust-lang/rust/commit/f19851069efd6ee1fe899a469f08ad2d66e76050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19851069efd6ee1fe899a469f08ad2d66e76050/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e789f3a3a3d96ebf99b7bbd95011527e5be32a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/e789f3a3a3d96ebf99b7bbd95011527e5be32a11", "html_url": "https://github.com/rust-lang/rust/commit/e789f3a3a3d96ebf99b7bbd95011527e5be32a11"}, {"sha": "de0feb30bd54fe26e1bb2a0a75ea519708ab8f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0feb30bd54fe26e1bb2a0a75ea519708ab8f76", "html_url": "https://github.com/rust-lang/rust/commit/de0feb30bd54fe26e1bb2a0a75ea519708ab8f76"}], "stats": {"total": 586, "additions": 487, "deletions": 99}, "files": [{"sha": "5a85356d96daa065ea0b2022da73cb571cb21006", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -373,7 +373,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                     err.emit();\n                                 }\n                                 Entry::Vacant(v) => {\n-                                    v.insert(idx);\n+                                    if r == reg {\n+                                        v.insert(idx);\n+                                    }\n                                 }\n                             }\n                         };"}, {"sha": "3571517d2b258a8162ab6fc69bb0e5e658015e7e", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -11,7 +11,6 @@ pub fn inject(\n     mut krate: ast::Crate,\n     resolver: &mut dyn ResolverExpand,\n     sess: &Session,\n-    alt_std_name: Option<Symbol>,\n ) -> ast::Crate {\n     let edition = sess.parse_sess.edition;\n \n@@ -53,7 +52,7 @@ pub fn inject(\n                 span,\n                 ident,\n                 vec![cx.attribute(cx.meta_word(span, sym::macro_use))],\n-                ast::ItemKind::ExternCrate(alt_std_name),\n+                ast::ItemKind::ExternCrate(None),\n             ),\n         );\n     }"}, {"sha": "2472789601e70dc1c1da8d98be08cb1682744369", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -322,12 +322,33 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     // The target doesn't care; the subtarget reads our attribute.\n     apply_tune_cpu_attr(cx, llfn);\n \n-    let mut function_features = codegen_fn_attrs\n-        .target_features\n+    let function_features =\n+        codegen_fn_attrs.target_features.iter().map(|f| f.as_str()).collect::<Vec<&str>>();\n+\n+    if let Some(f) = llvm_util::check_tied_features(\n+        cx.tcx.sess,\n+        &function_features.iter().map(|f| (*f, true)).collect(),\n+    ) {\n+        let span = cx\n+            .tcx\n+            .get_attrs(instance.def_id())\n+            .iter()\n+            .find(|a| a.has_name(rustc_span::sym::target_feature))\n+            .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n+        let msg = format!(\n+            \"the target features {} must all be either enabled or disabled together\",\n+            f.join(\", \")\n+        );\n+        let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n+        err.help(\"add the missing features in a `target_feature` attribute\");\n+        err.emit();\n+        return;\n+    }\n+\n+    let mut function_features = function_features\n         .iter()\n-        .flat_map(|f| {\n-            let feature = f.as_str();\n-            llvm_util::to_llvm_feature(cx.tcx.sess, feature)\n+        .flat_map(|feat| {\n+            llvm_util::to_llvm_feature(cx.tcx.sess, feat)\n                 .into_iter()\n                 .map(|f| format!(\"+{}\", f))\n                 .collect::<Vec<String>>()"}, {"sha": "727d079d83d937452ab3f3db0c44857a433f69a1", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -2,8 +2,8 @@ use crate::back::write::create_informational_target_machine;\n use crate::{llvm, llvm_util};\n use libc::c_int;\n use libloading::Library;\n-use rustc_codegen_ssa::target_features::supported_target_features;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_codegen_ssa::target_features::{supported_target_features, tied_target_features};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n@@ -191,10 +191,30 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n         (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n         (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n         (\"aarch64\", \"pmuv3\") => vec![\"perfmon\"],\n+        (\"aarch64\", \"paca\") => vec![\"pauth\"],\n+        (\"aarch64\", \"pacg\") => vec![\"pauth\"],\n         (_, s) => vec![s],\n     }\n }\n \n+// Given a map from target_features to whether they are enabled or disabled,\n+// ensure only valid combinations are allowed.\n+pub fn check_tied_features(\n+    sess: &Session,\n+    features: &FxHashMap<&str, bool>,\n+) -> Option<&'static [&'static str]> {\n+    for tied in tied_target_features(sess) {\n+        // Tied features must be set to the same value, or not set at all\n+        let mut tied_iter = tied.iter();\n+        let enabled = features.get(tied_iter.next().unwrap());\n+\n+        if tied_iter.any(|f| enabled != features.get(f)) {\n+            return Some(tied);\n+        }\n+    }\n+    None\n+}\n+\n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     supported_target_features(sess)\n@@ -395,15 +415,19 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n         Some(_) | None => {}\n     };\n \n+    fn strip(s: &str) -> &str {\n+        s.strip_prefix(&['+', '-']).unwrap_or(s)\n+    }\n+\n     let filter = |s: &str| {\n         if s.is_empty() {\n             return vec![];\n         }\n-        let feature = if s.starts_with('+') || s.starts_with('-') {\n-            &s[1..]\n-        } else {\n+        let feature = strip(s);\n+        if feature == s {\n             return vec![s.to_string()];\n-        };\n+        }\n+\n         // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n         // are not passed down to LLVM.\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n@@ -420,8 +444,17 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n     features.extend(sess.target.features.split(',').flat_map(&filter));\n \n     // -Ctarget-features\n-    features.extend(sess.opts.cg.target_feature.split(',').flat_map(&filter));\n-\n+    let feats: Vec<&str> = sess.opts.cg.target_feature.split(',').collect();\n+    // LLVM enables based on the last occurence of a feature\n+    if let Some(f) =\n+        check_tied_features(sess, &feats.iter().map(|f| (strip(f), !f.starts_with(\"-\"))).collect())\n+    {\n+        sess.err(&format!(\n+            \"Target features {} must all be enabled or disabled together\",\n+            f.join(\", \")\n+        ));\n+    }\n+    features.extend(feats.iter().flat_map(|&f| filter(f)));\n     features\n }\n "}, {"sha": "f31b0ee592e9cb9b98acededf52e8b6543239cee", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -74,8 +74,10 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"ssbs\", Some(sym::aarch64_target_feature)),\n     // FEAT_SB\n     (\"sb\", Some(sym::aarch64_target_feature)),\n-    // FEAT_PAUTH\n-    (\"pauth\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PAUTH (address authentication)\n+    (\"paca\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PAUTH (generic authentication)\n+    (\"pacg\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB\n     (\"dpb\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB2\n@@ -137,6 +139,8 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"v8.7a\", Some(sym::aarch64_target_feature)),\n ];\n \n+const AARCH64_TIED_FEATURES: &[&[&str]] = &[&[\"paca\", \"pacg\"]];\n+\n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"adx\", Some(sym::adx_target_feature)),\n     (\"aes\", None),\n@@ -256,6 +260,13 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n     }\n }\n \n+pub fn tied_target_features(sess: &Session) -> &'static [&'static [&'static str]] {\n+    match &*sess.target.arch {\n+        \"aarch64\" => AARCH64_TIED_FEATURES,\n+        _ => &[],\n+    }\n+}\n+\n pub(crate) fn provide(providers: &mut Providers) {\n     providers.supported_target_features = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "db70002c2d66ac97d99d57ebb2f6da49403e6350", "filename": "compiler/rustc_hir/src/itemlikevisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -8,7 +8,7 @@ use super::{ForeignItem, ImplItem, Item, TraitItem};\n ///\n /// 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n ///    - Example: find all items with a `#[foo]` attribute on them.\n-///    - How: Implement `ItemLikeVisitor` and call `tcx.hir().krate().visit_all_item_likes()`.\n+///    - How: Implement `ItemLikeVisitor` and call `tcx.hir().visit_all_item_likes()`.\n ///    - Pro: Efficient; just walks the lists of item-like things, not the nodes themselves.\n ///    - Con: Don't get information about nesting\n ///    - Con: Don't have methods for specific bits of HIR, like \"on\n@@ -19,9 +19,9 @@ use super::{ForeignItem, ImplItem, Item, TraitItem};\n ///    - Example: Examine each expression to look for its type and do some check or other.\n ///    - How: Implement `intravisit::Visitor` and override the `nested_visit_map()` method\n ///      to return `NestedVisitorMap::OnlyBodies` and use\n-///      `tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor())`. Within\n-///      your `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget\n-///      to invoke `intravisit::walk_expr()` to keep walking the subparts).\n+///      `tcx.hir().visit_all_item_likes(&mut visitor.as_deep_visitor())`. Within your\n+///      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n+///      `intravisit::walk_expr()` to keep walking the subparts).\n ///    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n ///    - Pro: Integrates well into dependency tracking.\n ///    - Con: Don't get information about nesting between items"}, {"sha": "66e1e78b2856c8972539e349684e0e1a70a61093", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -286,8 +286,7 @@ pub fn configure_and_expand(\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n-        let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| Symbol::intern(s));\n-        rustc_builtin_macros::standard_library_imports::inject(krate, resolver, sess, alt_std_name)\n+        rustc_builtin_macros::standard_library_imports::inject(krate, resolver, sess)\n     });\n \n     util::check_attr_crate_type(sess, &krate.attrs, &mut resolver.lint_buffer());"}, {"sha": "f74cadfebacba748f4b38976884f0119cb1db976", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -118,7 +118,7 @@ fn get_stack_size() -> Option<usize> {\n /// Like a `thread::Builder::spawn` followed by a `join()`, but avoids the need\n /// for `'static` bounds.\n #[cfg(not(parallel_compiler))]\n-pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f: F) -> R {\n+fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f: F) -> R {\n     // SAFETY: join() is called immediately, so any closure captures are still\n     // alive.\n     match unsafe { cfg.spawn_unchecked(f) }.unwrap().join() {\n@@ -379,7 +379,7 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     }\n }\n \n-pub fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> MakeBackendFn {\n+fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> MakeBackendFn {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In\n     // general this assertion never trips due to the once guard in `get_codegen_backend`,"}, {"sha": "1f657218a64a980591098e040e33e5e7dc58c2af", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -453,28 +453,28 @@ impl<'a> Resolver<'a> {\n                 // edit:\n                 // only do this if the const and usage of the non-constant value are on the same line\n                 // the further the two are apart, the higher the chance of the suggestion being wrong\n-                // also make sure that the pos for the suggestion is not 0 (ICE #90878)\n \n-                let sp =\n-                    self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n-\n-                let pos_for_suggestion = sp.lo().0.saturating_sub(current.len() as u32);\n+                let sp = self\n+                    .session\n+                    .source_map()\n+                    .span_extend_to_prev_str(ident.span, current, true, false);\n \n-                if sp.lo().0 == 0\n-                    || pos_for_suggestion == 0\n-                    || self.session.source_map().is_multiline(sp)\n-                {\n-                    err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n-                } else {\n-                    let sp = sp.with_lo(BytePos(pos_for_suggestion));\n-                    err.span_suggestion(\n-                        sp,\n-                        &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n-                        format!(\"{} {}\", sugg, ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    err.span_label(span, \"non-constant value\");\n+                match sp {\n+                    Some(sp) if !self.session.source_map().is_multiline(sp) => {\n+                        let sp = sp.with_lo(BytePos(sp.lo().0 - (current.len() as u32)));\n+                        err.span_suggestion(\n+                            sp,\n+                            &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n+                            format!(\"{} {}\", sugg, ident),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.span_label(span, \"non-constant value\");\n+                    }\n+                    _ => {\n+                        err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n+                    }\n                 }\n+\n                 err\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable {"}, {"sha": "79962d5db891826e30cacac0389ab937d0ba8d10", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -770,7 +770,6 @@ impl Default for Options {\n             externs: Externs(BTreeMap::new()),\n             extern_dep_specs: ExternDepSpecs(BTreeMap::new()),\n             crate_name: None,\n-            alt_std_name: None,\n             libs: Vec::new(),\n             unstable_features: UnstableFeatures::Disallow,\n             debug_assertions: true,\n@@ -2382,7 +2381,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n         extern_dep_specs,\n         crate_name,\n-        alt_std_name: None,\n         libs,\n         debug_assertions,\n         actually_rustdoc: false,"}, {"sha": "ae1b638c34467ec0f0542cf0895ac2cb03e88009", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -184,10 +184,6 @@ top_level_options!(\n         externs: Externs [UNTRACKED],\n         extern_dep_specs: ExternDepSpecs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n-        /// An optional name to use as the crate for std during std injection,\n-        /// written `extern crate name as std`. Defaults to `std`. Used by\n-        /// out-of-tree drivers.\n-        alt_std_name: Option<String> [TRACKED],\n         /// Indicates how the compiler should treat unstable features.\n         unstable_features: UnstableFeatures [TRACKED],\n "}, {"sha": "95177102dcf8678df118ab6d58cc65750219d8be", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -629,26 +629,41 @@ impl SourceMap {\n     }\n \n     /// Extends the given `Span` to just after the previous occurrence of `pat` when surrounded by\n-    /// whitespace. Returns the same span if no character could be found or if an error occurred\n-    /// while retrieving the code snippet.\n-    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str, accept_newlines: bool) -> Span {\n+    /// whitespace. Returns None if the pattern could not be found or if an error occurred while\n+    /// retrieving the code snippet.\n+    pub fn span_extend_to_prev_str(\n+        &self,\n+        sp: Span,\n+        pat: &str,\n+        accept_newlines: bool,\n+        include_whitespace: bool,\n+    ) -> Option<Span> {\n         // assure that the pattern is delimited, to avoid the following\n         //     fn my_fn()\n         //           ^^^^ returned span without the check\n         //     ---------- correct span\n+        let prev_source = self.span_to_prev_source(sp).ok()?;\n         for ws in &[\" \", \"\\t\", \"\\n\"] {\n             let pat = pat.to_owned() + ws;\n-            if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-                let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n-                if prev_source.is_empty() && sp.lo().0 != 0 {\n-                    return sp.with_lo(BytePos(sp.lo().0 - 1));\n-                } else if accept_newlines || !prev_source.contains('\\n') {\n-                    return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+            if let Some(pat_pos) = prev_source.rfind(&pat) {\n+                let just_after_pat_pos = pat_pos + pat.len() - 1;\n+                let just_after_pat_plus_ws = if include_whitespace {\n+                    just_after_pat_pos\n+                        + prev_source[just_after_pat_pos..]\n+                            .find(|c: char| !c.is_whitespace())\n+                            .unwrap_or(0)\n+                } else {\n+                    just_after_pat_pos\n+                };\n+                let len = prev_source.len() - just_after_pat_plus_ws;\n+                let prev_source = &prev_source[just_after_pat_plus_ws..];\n+                if accept_newlines || !prev_source.trim_start().contains('\\n') {\n+                    return Some(sp.with_lo(BytePos(sp.lo().0 - len as u32)));\n                 }\n             }\n         }\n \n-        sp\n+        None\n     }\n \n     /// Returns the source snippet as `String` after the given `Span`.\n@@ -927,7 +942,7 @@ impl SourceMap {\n     }\n \n     pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n-        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true);\n+        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true, true).unwrap_or(span);\n         if let Ok(snippet) = self.span_to_snippet(prev_span) {\n             debug!(\n                 \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\",\n@@ -968,8 +983,7 @@ impl SourceMap {\n     pub fn generate_local_type_param_snippet(&self, span: Span) -> Option<(Span, String)> {\n         // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n         // signature.\n-        let sugg_span = self.span_extend_to_prev_str(span, \"fn\", false);\n-        if sugg_span != span {\n+        if let Some(sugg_span) = self.span_extend_to_prev_str(span, \"fn\", false, true) {\n             if let Ok(snippet) = self.span_to_snippet(sugg_span) {\n                 // Consume the function name.\n                 let mut offset = snippet"}, {"sha": "8aa22852a6ffdc35574dd68ec2d63a7b65dae3d5", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -1819,15 +1819,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 [] => {}\n                 [trait_info] => {\n                     let msg = format!(\n-                        \"the trait `{}` defines an item `{}`, but is explicitely unimplemented\",\n+                        \"the trait `{}` defines an item `{}`, but is explicitly unimplemented\",\n                         self.tcx.def_path_str(trait_info.def_id),\n                         item_name\n                     );\n                     err.note(&msg);\n                 }\n                 trait_infos => {\n                     let mut msg = format!(\n-                        \"the following traits define an item `{}`, but are explicitely unimplemented:\",\n+                        \"the following traits define an item `{}`, but are explicitly unimplemented:\",\n                         item_name\n                     );\n                     for trait_info in trait_infos {"}, {"sha": "5ed9fa9d6f0fd1a956c3a0ce84e16066d33befa8", "filename": "library/std/src/env.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -23,6 +23,11 @@ use crate::sys::os as os_imp;\n \n /// Returns the current working directory as a [`PathBuf`].\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `getcwd` function on Unix\n+/// and the `GetCurrentDirectoryW` function on Windows.\n+///\n /// # Errors\n ///\n /// Returns an [`Err`] if the current working directory value is invalid.\n@@ -49,6 +54,11 @@ pub fn current_dir() -> io::Result<PathBuf> {\n \n /// Changes the current working directory to the specified path.\n ///\n+/// # Platform-specific behavior\n+///\n+/// This function currently corresponds to the `chdir` function on Unix\n+/// and the `SetCurrentDirectoryW` function on Windows.\n+///\n /// Returns an [`Err`] if the operation fails.\n ///\n /// # Examples"}, {"sha": "1aa6d657889129c0fedae5aa4ce0c7472c8a9843", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -296,12 +296,11 @@ pub enum ErrorKind {\n     /// The filesystem does not support making so many hardlinks to the same file.\n     #[unstable(feature = \"io_error_more\", issue = \"86442\")]\n     TooManyLinks,\n-    /// Filename too long.\n+    /// A filename was invalid.\n     ///\n-    /// The limit might be from the underlying filesystem or API, or an administratively imposed\n-    /// resource limit.\n+    /// This error can also cause if it exceeded the filename length limit.\n     #[unstable(feature = \"io_error_more\", issue = \"86442\")]\n-    FilenameTooLong,\n+    InvalidFilename,\n     /// Program argument list too long.\n     ///\n     /// When trying to run an external program, a system or process limit on the size of the\n@@ -382,12 +381,12 @@ impl ErrorKind {\n             DirectoryNotEmpty => \"directory not empty\",\n             ExecutableFileBusy => \"executable file busy\",\n             FileTooLarge => \"file too large\",\n-            FilenameTooLong => \"filename too long\",\n             FilesystemLoop => \"filesystem loop or indirection limit (e.g. symlink loop)\",\n             FilesystemQuotaExceeded => \"filesystem quota exceeded\",\n             HostUnreachable => \"host unreachable\",\n             Interrupted => \"operation interrupted\",\n             InvalidData => \"invalid data\",\n+            InvalidFilename => \"invalid filename\",\n             InvalidInput => \"invalid input parameter\",\n             IsADirectory => \"is a directory\",\n             NetworkDown => \"network down\","}, {"sha": "4301e941b3dce1b57efbe10f446b078e744a23e4", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -315,7 +315,7 @@ fn kind_from_prim(ek: u32) -> Option<ErrorKind> {\n         Deadlock,\n         CrossesDevices,\n         TooManyLinks,\n-        FilenameTooLong,\n+        InvalidFilename,\n         ArgumentListTooLong,\n         Interrupted,\n         Other,"}, {"sha": "71c660e7186751be890291f7d5d1127a1d23b850", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -200,6 +200,22 @@ pub trait AsFd {\n     fn as_fd(&self) -> BorrowedFd<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &mut T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for BorrowedFd<'_> {\n     #[inline]"}, {"sha": "75d65e6d5fc036bff10c39ab60f6cd2636b62a79", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -966,7 +966,7 @@ pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::\n ///\n /// fn main() -> std::io::Result<()> {\n ///     let f = std::fs::File::open(\"/file\")?;\n-///     fs::fchown(f, Some(0), Some(0))?;\n+///     fs::fchown(&f, Some(0), Some(0))?;\n ///     Ok(())\n /// }\n /// ```"}, {"sha": "8df6c54a4144e9f42c1314bbb07d12d333d16cdf", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -316,6 +316,22 @@ pub trait AsHandle {\n     fn as_handle(&self) -> BorrowedHandle<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &mut T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n impl AsHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {"}, {"sha": "2f13eb77a1b948519bb93e51ceda78e8cfe20f5c", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -210,6 +210,22 @@ pub trait AsSocket {\n     fn as_socket(&self) -> BorrowedSocket<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &mut T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n impl AsSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {"}, {"sha": "605cc499b3c92670c7faf9afbbebb338c2ae2f32", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -159,7 +159,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         libc::ENOSPC => StorageFull,\n         libc::ENOSYS => Unsupported,\n         libc::EMLINK => TooManyLinks,\n-        libc::ENAMETOOLONG => FilenameTooLong,\n+        libc::ENAMETOOLONG => InvalidFilename,\n         libc::ENETDOWN => NetworkDown,\n         libc::ENETUNREACH => NetworkUnreachable,\n         libc::ENOTCONN => NotConnected,"}, {"sha": "dc288176346bcb4dfe4413836e031478060b6f30", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -71,6 +71,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_FILE_NOT_FOUND => return NotFound,\n         c::ERROR_PATH_NOT_FOUND => return NotFound,\n         c::ERROR_NO_DATA => return BrokenPipe,\n+        c::ERROR_INVALID_NAME => return InvalidFilename,\n         c::ERROR_INVALID_PARAMETER => return InvalidInput,\n         c::ERROR_NOT_ENOUGH_MEMORY | c::ERROR_OUTOFMEMORY => return OutOfMemory,\n         c::ERROR_SEM_TIMEOUT\n@@ -104,7 +105,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_POSSIBLE_DEADLOCK => return Deadlock,\n         c::ERROR_NOT_SAME_DEVICE => return CrossesDevices,\n         c::ERROR_TOO_MANY_LINKS => return TooManyLinks,\n-        c::ERROR_FILENAME_EXCED_RANGE => return FilenameTooLong,\n+        c::ERROR_FILENAME_EXCED_RANGE => return InvalidFilename,\n         _ => {}\n     }\n "}, {"sha": "f53dc03f4b47fad5e7fed37d995578ac4c3dba72", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n+// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;"}, {"sha": "e0d1e9649a0aaafcd887a4e6cdc6aac9cbc4917a", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n+\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+\n+pub type GenericFn<'a> = fn(&'a i32) -> &'a i32;\n+\n+// @is fn_lifetime.json \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n+// @has   - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n+// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+pub type ForAll = for<'a> fn(&'a i32) -> &'a i32;"}, {"sha": "b6bb6dcc5fe2d7a8d18f96185d9b82ddc8e30e82", "filename": "src/test/rustdoc-json/type/generic_default.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+\n+// @set result = generic_default.json \"$.index[*][?(@.name=='Result')].id\"\n+pub enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+\n+// @set my_error = - \"$.index[*][?(@.name=='MyError')].id\"\n+pub struct MyError {}\n+\n+// @is    - \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n+// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n+// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n+// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n+pub type MyResult<T, E = MyError> = Result<T, E>;"}, {"sha": "3f705ba5b64c2995eeddfc8d1c10da25f94f9b78", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -382,7 +382,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:39:37\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n@@ -391,7 +391,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:48:44\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n@@ -400,7 +400,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:55:31\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n@@ -409,7 +409,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:55:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -418,7 +418,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:62:45\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n@@ -427,7 +427,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:65:45\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n@@ -436,7 +436,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:68:41\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                                         ^^^ non-constant value"}, {"sha": "983788a93ccd98bb2cc430c1c975f084fa8c9435", "filename": "src/test/ui/asm/reg-conflict.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Freg-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Freg-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Freg-conflict.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: --target armv7-unknown-linux-gnueabihf\n+// needs-llvm-components: arm\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", out(\"d0\") _, out(\"d1\") _);\n+        asm!(\"\", out(\"d0\") _, out(\"s1\") _);\n+        //~^ ERROR register `s1` conflicts with register `d0`\n+    }\n+}"}, {"sha": "2395566de3945c3f986af8426ca1bb02e721e9ac", "filename": "src/test/ui/asm/reg-conflict.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Freg-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Freg-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Freg-conflict.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,10 @@\n+error: register `s1` conflicts with register `d0`\n+  --> $DIR/reg-conflict.rs:17:31\n+   |\n+LL |         asm!(\"\", out(\"d0\") _, out(\"s1\") _);\n+   |                  -----------  ^^^^^^^^^^^ register `s1`\n+   |                  |\n+   |                  register `d0`\n+\n+error: aborting due to previous error\n+"}, {"sha": "194cd66a66e96325ae9e63e4201d96fe616f56ec", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -394,7 +394,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:39:37\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n@@ -403,7 +403,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:50:44\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n@@ -412,7 +412,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:57:31\n    |\n LL |     let mut foo = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n@@ -421,7 +421,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:57:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -430,7 +430,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:64:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -439,7 +439,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:67:46\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n@@ -448,7 +448,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:70:42\n    |\n LL |     let mut bar = 0;\n-   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value"}, {"sha": "41b9d95734a8d923d7a848e5e6d82039db3ab210", "filename": "src/test/ui/consts/issue-91560.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.fixed?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for issue #91560.\n+\n+// run-rustfix\n+\n+#![allow(unused,non_upper_case_globals)]\n+\n+fn foo() {\n+    const length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn bar() {\n+    const length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn main() {}"}, {"sha": "04592feb505416f2c2baa6ad8a77966cdf213398", "filename": "src/test/ui/consts/issue-91560.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for issue #91560.\n+\n+// run-rustfix\n+\n+#![allow(unused,non_upper_case_globals)]\n+\n+fn foo() {\n+    let mut length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn bar() {\n+    let   length: usize = 2;\n+    //~^ HELP: consider using `const`\n+    let arr = [0; length];\n+    //~^ ERROR: attempt to use a non-constant value in a constant [E0435]\n+}\n+\n+fn main() {}"}, {"sha": "e1b5d4cacf8e305e633ca1779d64076f10c41ecc", "filename": "src/test/ui/consts/issue-91560.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-91560.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,21 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-91560.rs:10:19\n+   |\n+LL |     let mut length: usize = 2;\n+   |     -------------- help: consider using `const` instead of `let`: `const length`\n+LL |\n+LL |     let arr = [0; length];\n+   |                   ^^^^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-91560.rs:17:19\n+   |\n+LL |     let   length: usize = 2;\n+   |     ------------ help: consider using `const` instead of `let`: `const length`\n+LL |\n+LL |     let arr = [0; length];\n+   |                   ^^^^^^ non-constant value\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "ea09d4fc460934c244260777a6b2597dd8a8f28e", "filename": "src/test/ui/target-feature/tied-features-cli.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,9 @@\n+// only-aarch64\n+// revisions: one two three four\n+//[one] compile-flags: -C target-feature=+paca\n+//[two] compile-flags: -C target-feature=-pacg,+pacg\n+//[three] compile-flags: -C target-feature=+paca,+pacg,-paca\n+//[four] check-pass\n+//[four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+\n+fn main() {}"}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "2bc64a76aae8dfbbd68414fc6ce7d220ab114b9f", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,4 @@\n+error: Target features paca, pacg must all be enabled or disabled together\n+\n+error: aborting due to previous error\n+"}, {"sha": "86400361db3143e896ebbd69651223ebe2f38b21", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,29 @@\n+// only-aarch64\n+// build-fail\n+\n+#![feature(aarch64_target_feature, target_feature_11)]\n+\n+fn main() {\n+    #[target_feature(enable = \"pacg\")]\n+    //~^ ERROR must all be either enabled or disabled together\n+    unsafe fn inner() {}\n+\n+    unsafe {\n+        foo();\n+        bar();\n+        baz();\n+        inner();\n+    }\n+}\n+\n+#[target_feature(enable = \"paca\")]\n+//~^ ERROR must all be either enabled or disabled together\n+unsafe fn foo() {}\n+\n+\n+#[target_feature(enable = \"paca,pacg\")]\n+unsafe fn bar() {}\n+\n+#[target_feature(enable = \"paca\")]\n+#[target_feature(enable = \"pacg\")]\n+unsafe fn baz() {}"}, {"sha": "0b1460e0b753fbffcaae0d828184d8140e1f22c7", "filename": "src/test/ui/target-feature/tied-features.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -0,0 +1,18 @@\n+error: the target features paca, pacg must all be either enabled or disabled together\n+  --> $DIR/tied-features.rs:7:5\n+   |\n+LL |     #[target_feature(enable = \"pacg\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add the missing features in a `target_feature` attribute\n+\n+error: the target features paca, pacg must all be either enabled or disabled together\n+  --> $DIR/tied-features.rs:19:1\n+   |\n+LL | #[target_feature(enable = \"paca\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add the missing features in a `target_feature` attribute\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1314f9cb0932d6b98ef0842b0f950dc9bc324350", "filename": "src/test/ui/traits/negative-impls/explicitly-unimplemented-error-message.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -34,20 +34,20 @@ fn main() {\n     Qux.clone();\n     //~^ ERROR no method named `clone` found for struct `Qux`\n     //~| NOTE method not found in `Qux`\n-    //~| NOTE `Clone` defines an item `clone`, but is explicitely unimplemented\n+    //~| NOTE `Clone` defines an item `clone`, but is explicitly unimplemented\n \n     0_u32.bar();\n     //~^ ERROR no method named `bar` found for type `u32`\n     //~| NOTE method not found in `u32`\n-    //~| NOTE `Bar` defines an item `bar`, but is explicitely unimplemented\n+    //~| NOTE `Bar` defines an item `bar`, but is explicitly unimplemented\n \n     Qux.foo();\n     //~^ ERROR no method named `foo` found for struct `Qux`\n     //~| NOTE method not found in `Qux`\n-    //~| NOTE the following traits define an item `foo`, but are explicitely unimplemented\n+    //~| NOTE the following traits define an item `foo`, but are explicitly unimplemented\n \n     0_u32.foo();\n     //~^ ERROR no method named `foo` found for type `u32`\n     //~| NOTE method not found in `u32`\n-    //~| NOTE `FooBar` defines an item `foo`, but is explicitely unimplemented\n+    //~| NOTE `FooBar` defines an item `foo`, but is explicitly unimplemented\n }"}, {"sha": "c18abf95083da5feff467f8b1f5adb7ea63e060d", "filename": "src/test/ui/traits/negative-impls/explicitly-unimplemented-error-message.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.stderr?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -8,7 +8,7 @@ LL |     Qux.clone();\n    |         ^^^^^ method not found in `Qux`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the trait `Clone` defines an item `clone`, but is explicitely unimplemented\n+   = note: the trait `Clone` defines an item `clone`, but is explicitly unimplemented\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/explicitly-unimplemented-error-message.rs:39:11\n@@ -17,7 +17,7 @@ LL |     0_u32.bar();\n    |           ^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the trait `Bar` defines an item `bar`, but is explicitely unimplemented\n+   = note: the trait `Bar` defines an item `bar`, but is explicitly unimplemented\n \n error[E0599]: no method named `foo` found for struct `Qux` in the current scope\n   --> $DIR/explicitly-unimplemented-error-message.rs:44:9\n@@ -29,7 +29,7 @@ LL |     Qux.foo();\n    |         ^^^ method not found in `Qux`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n-   = note: the following traits define an item `foo`, but are explicitely unimplemented:\n+   = note: the following traits define an item `foo`, but are explicitly unimplemented:\n            Foo\n            FooBar\n \n@@ -45,7 +45,7 @@ note: `Foo` defines an item `foo`, perhaps you need to implement it\n    |\n LL | trait Foo {\n    | ^^^^^^^^^\n-   = note: the trait `FooBar` defines an item `foo`, but is explicitely unimplemented\n+   = note: the trait `FooBar` defines an item `foo`, but is explicitly unimplemented\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d0f476955e1f79dbd2ded1263c3b2c67c8d80897", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19851069efd6ee1fe899a469f08ad2d66e76050/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=f19851069efd6ee1fe899a469f08ad2d66e76050", "patch": "@@ -231,7 +231,21 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n             let val = cache.get_value(&command.args[0])?;\n             let results = select(&val, &command.args[1]).unwrap();\n-            results.len() == expected\n+            let eq = results.len() == expected;\n+            if !command.negated && !eq {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"`{}` matched to `{:?}` with length {}, but expected length {}\",\n+                        &command.args[1],\n+                        results,\n+                        results.len(),\n+                        expected\n+                    ),\n+                    command,\n+                ));\n+            } else {\n+                eq\n+            }\n         }\n         CommandKind::Is => {\n             // @has <path> <jsonpath> <value> = check *exactly one* item matched by path, and it equals value\n@@ -317,6 +331,6 @@ fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n             panic!(\"No variable: `{}`. Current state: `{:?}`\", &s[1..], cache.variables)\n         }))\n     } else {\n-        Cow::Owned(serde_json::from_str(s).unwrap())\n+        Cow::Owned(serde_json::from_str(s).expect(&format!(\"Cannot convert `{}` to json\", s)))\n     }\n }"}]}