{"sha": "c9cdc87d8b58be04a17212a9f72b80562f5de32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Y2RjODdkOGI1OGJlMDRhMTcyMTJhOWY3MmI4MDU2MmY1ZGUzMmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-27T16:20:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-27T16:20:18Z"}, "message": "Rollup merge of #74803 - infinity0:fix-exec, r=nagisa\n\nrustbuild: fix bad usage of UNIX exec() in rustc wrapper\n\nexec never returns, it replaces the current process. so anything after it is unreachable. that's not how exec_cmd() is used in the surrounding code\n\nWe use `--on-fail env` on Debian. `env` always returns exit code 0. This means that the `rustc` bootstrap wrapper always returns exit code 0 even when it fails. However, the crossbeam-utils build process (due to autocfg) relies on `rustc` returning error exit codes when detecting CPU features, and ends up writing `cargo:rustc-cfg=has_atomic_u128` even when it's not detected, because the `rustc` wrapper is always giving exit code 0.\n\n(This separately is causing our builds to try to compile rustc 40+ times, due to #74801.)", "tree": {"sha": "2e6146bb6a8cbb7557be4522660b2141b0122569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6146bb6a8cbb7557be4522660b2141b0122569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cdc87d8b58be04a17212a9f72b80562f5de32c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHv7DCRBK7hj4Ov3rIwAAdHIIAACRzSuhpR/DmoC5JuzOqv+x\nhLpA3PrTV6WptGO0dzjfDLFl9gvkuulIllmU4mxfJJRjPWL0wusPlDspNJbGdhol\n8dhLMpMcyxpo2ydmieOJwDh8hDLFrYlxrcc816t28lEiYhHlARQ/F1Q3140SGedh\nxt0IPFt4J8h2T/deABJJluQnnT3NgB9z+5iOcpC1eRzNnyyLkelVhFVnQdIioOiF\n1FXG8Td6fUEiQjys/MCv2l6rBLY/E5mGpONsaLfqXyUZPK0pGuhnaOX1Y9+YNBMz\nZ45yY/tk05Wqms29/1/zFcvQKb0umGoBBWqb0um+EkSeLVbH/GLSH/k/qlg8LaM=\n=RDqK\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e6146bb6a8cbb7557be4522660b2141b0122569\nparent e0543409d5c3835e1355831449dfd7435c4336ff\nparent b99668bd221ea2fe99141e7de6db6a4b86efb7b6\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595866818 -0700\ncommitter GitHub <noreply@github.com> 1595866818 -0700\n\nRollup merge of #74803 - infinity0:fix-exec, r=nagisa\n\nrustbuild: fix bad usage of UNIX exec() in rustc wrapper\n\nexec never returns, it replaces the current process. so anything after it is unreachable. that's not how exec_cmd() is used in the surrounding code\n\nWe use `--on-fail env` on Debian. `env` always returns exit code 0. This means that the `rustc` bootstrap wrapper always returns exit code 0 even when it fails. However, the crossbeam-utils build process (due to autocfg) relies on `rustc` returning error exit codes when detecting CPU features, and ends up writing `cargo:rustc-cfg=has_atomic_u128` even when it's not detected, because the `rustc` wrapper is always giving exit code 0.\n\n(This separately is causing our builds to try to compile rustc 40+ times, due to #74801.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cdc87d8b58be04a17212a9f72b80562f5de32c", "html_url": "https://github.com/rust-lang/rust/commit/c9cdc87d8b58be04a17212a9f72b80562f5de32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cdc87d8b58be04a17212a9f72b80562f5de32c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0543409d5c3835e1355831449dfd7435c4336ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0543409d5c3835e1355831449dfd7435c4336ff", "html_url": "https://github.com/rust-lang/rust/commit/e0543409d5c3835e1355831449dfd7435c4336ff"}, {"sha": "b99668bd221ea2fe99141e7de6db6a4b86efb7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99668bd221ea2fe99141e7de6db6a4b86efb7b6", "html_url": "https://github.com/rust-lang/rust/commit/b99668bd221ea2fe99141e7de6db6a4b86efb7b6"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "af75faf698ecdac42adf963dbb199940bbe794ce", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9cdc87d8b58be04a17212a9f72b80562f5de32c/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cdc87d8b58be04a17212a9f72b80562f5de32c/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=c9cdc87d8b58be04a17212a9f72b80562f5de32c", "patch": "@@ -153,7 +153,7 @@ fn main() {\n             e => e,\n         };\n         println!(\"\\nDid not run successfully: {:?}\\n{:?}\\n-------------\", e, cmd);\n-        exec_cmd(&mut on_fail).expect(\"could not run the backup command\");\n+        status_code(&mut on_fail).expect(\"could not run the backup command\");\n         std::process::exit(1);\n     }\n \n@@ -182,17 +182,10 @@ fn main() {\n         }\n     }\n \n-    let code = exec_cmd(&mut cmd).unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n+    let code = status_code(&mut cmd).unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n     std::process::exit(code);\n }\n \n-#[cfg(unix)]\n-fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n-    use std::os::unix::process::CommandExt;\n-    Err(cmd.exec())\n-}\n-\n-#[cfg(not(unix))]\n-fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n+fn status_code(cmd: &mut Command) -> io::Result<i32> {\n     cmd.status().map(|status| status.code().unwrap())\n }"}]}