{"sha": "232caad39581118619c5168284b15457d1c72900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmNhYWQzOTU4MTExODYxOWM1MTY4Mjg0YjE1NDU3ZDFjNzI5MDA=", "commit": {"author": {"name": "Mara", "email": "m-ou.se@m-ou.se", "date": "2021-03-05T09:57:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T09:57:22Z"}, "message": "Rollup merge of #82764 - m-ou-se:map-try-insert, r=Amanieu\n\nAdd {BTreeMap,HashMap}::try_insert\n\n`{BTreeMap,HashMap}::insert(key, new_val)` returns `Some(old_val)` if the key was already in the map. It's often useful to assert no duplicate values are inserted.\n\nWe experimented with `map.insert(key, val).unwrap_none()` (https://github.com/rust-lang/rust/issues/62633), but decided that that's not the kind of method we'd like to have on `Option`s.\n\n`insert` always succeeds because it replaces the old value if it exists. One could argue that `insert()` is never the right method for panicking on duplicates, since already handles that case by replacing the value, only allowing you to panic after that already happened.\n\nThis PR adds a `try_insert` method that instead returns a `Result::Err` when the key already exists. This error contains both the `OccupiedEntry` and the value that was supposed to be inserted. This means that unwrapping that result gives more context:\n```rust\n    map.insert(10, \"world\").unwrap_none();\n    // thread 'main' panicked at 'called `Option::unwrap_none()` on a `Some` value: \"hello\"', src/main.rs:8:29\n```\n\n```rust\n    map.try_insert(10, \"world\").unwrap();\n    // thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\n    // OccupiedError { key: 10, old_value: \"hello\", new_value: \"world\" }', src/main.rs:6:33\n```\n\nIt also allows handling the failure in any other way, as you have full access to the `OccupiedEntry` and the value.\n\n`try_insert` returns a reference to the value in case of success, making it an alternative to `.entry(key).or_insert(value)`.\n\nr? ```@Amanieu```\n\nFixes https://github.com/rust-lang/rfcs/issues/3092", "tree": {"sha": "d29df8018252297932379b977d51fbe70a18cca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29df8018252297932379b977d51fbe70a18cca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232caad39581118619c5168284b15457d1c72900", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQgCCCRBK7hj4Ov3rIwAAdHIIABJhlnRmKcmjIEuFqG5JBrx9\n3xG1MkvO8FPe0jQCIndUd7C/kzpffdMLDQxsADit1in7Dq2eh8TMOIwylSBap1bp\nT7byr5rQbaFrmL4nY80oakZhZhXdVUUVIyX5QGTL+hnEaoFuxwgfP3hjU41YFoQs\nxrUpvdR0VRaJHGEmpiilT1DxjCwLM/taGvukEE6hu1nx7gNchpVCkCpbCDLWf5k7\nRqNSC1EMBQOci+Lj+BouzHPGXlYZHvzm/AykNFAw/d3CkWkyrVzPZXZxMljkPH9a\nkZOIh9PaCppZmMun/nZMWTVdNj9K/Ke83QW4aeuprALHzAz9uD+kpYOZwJzQQ3Y=\n=YKDq\n-----END PGP SIGNATURE-----\n", "payload": "tree d29df8018252297932379b977d51fbe70a18cca4\nparent 68f2934a154abac9a2af72c55e4c08277172e087\nparent eddd4f05012ed9ebefa6e2e5ca91da4116d30996\nauthor Mara <m-ou.se@m-ou.se> 1614938242 +0100\ncommitter GitHub <noreply@github.com> 1614938242 +0100\n\nRollup merge of #82764 - m-ou-se:map-try-insert, r=Amanieu\n\nAdd {BTreeMap,HashMap}::try_insert\n\n`{BTreeMap,HashMap}::insert(key, new_val)` returns `Some(old_val)` if the key was already in the map. It's often useful to assert no duplicate values are inserted.\n\nWe experimented with `map.insert(key, val).unwrap_none()` (https://github.com/rust-lang/rust/issues/62633), but decided that that's not the kind of method we'd like to have on `Option`s.\n\n`insert` always succeeds because it replaces the old value if it exists. One could argue that `insert()` is never the right method for panicking on duplicates, since already handles that case by replacing the value, only allowing you to panic after that already happened.\n\nThis PR adds a `try_insert` method that instead returns a `Result::Err` when the key already exists. This error contains both the `OccupiedEntry` and the value that was supposed to be inserted. This means that unwrapping that result gives more context:\n```rust\n    map.insert(10, \"world\").unwrap_none();\n    // thread 'main' panicked at 'called `Option::unwrap_none()` on a `Some` value: \"hello\"', src/main.rs:8:29\n```\n\n```rust\n    map.try_insert(10, \"world\").unwrap();\n    // thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:\n    // OccupiedError { key: 10, old_value: \"hello\", new_value: \"world\" }', src/main.rs:6:33\n```\n\nIt also allows handling the failure in any other way, as you have full access to the `OccupiedEntry` and the value.\n\n`try_insert` returns a reference to the value in case of success, making it an alternative to `.entry(key).or_insert(value)`.\n\nr? ```@Amanieu```\n\nFixes https://github.com/rust-lang/rfcs/issues/3092\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232caad39581118619c5168284b15457d1c72900", "html_url": "https://github.com/rust-lang/rust/commit/232caad39581118619c5168284b15457d1c72900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232caad39581118619c5168284b15457d1c72900/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f2934a154abac9a2af72c55e4c08277172e087", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f2934a154abac9a2af72c55e4c08277172e087", "html_url": "https://github.com/rust-lang/rust/commit/68f2934a154abac9a2af72c55e4c08277172e087"}, {"sha": "eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "url": "https://api.github.com/repos/rust-lang/rust/commits/eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "html_url": "https://github.com/rust-lang/rust/commit/eddd4f05012ed9ebefa6e2e5ca91da4116d30996"}], "stats": {"total": 158, "additions": 157, "deletions": 1}, "files": [{"sha": "622983996aa08651edb6c36a82f5b868a4152e2b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/232caad39581118619c5168284b15457d1c72900/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232caad39581118619c5168284b15457d1c72900/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=232caad39581118619c5168284b15457d1c72900", "patch": "@@ -14,7 +14,7 @@ use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n \n mod entry;\n-pub use entry::{Entry, OccupiedEntry, VacantEntry};\n+pub use entry::{Entry, OccupiedEntry, OccupiedError, VacantEntry};\n use Entry::*;\n \n /// Minimum number of elements in nodes that are not a root.\n@@ -836,6 +836,40 @@ impl<K, V> BTreeMap<K, V> {\n         }\n     }\n \n+    /// Tries to insert a key-value pair into the map, and returns\n+    /// a mutable reference to the value in the entry.\n+    ///\n+    /// If the map already had this key present, nothing is updated, and\n+    /// an error containing the occupied entry and the value is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(map_try_insert)]\n+    ///\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n+    ///\n+    /// let err = map.try_insert(37, \"b\").unwrap_err();\n+    /// assert_eq!(err.entry.key(), &37);\n+    /// assert_eq!(err.entry.get(), &\"a\");\n+    /// assert_eq!(err.value, \"b\");\n+    /// ```\n+    #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+    pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>>\n+    where\n+        K: Ord,\n+    {\n+        match self.entry(key) {\n+            Occupied(entry) => Err(OccupiedError { entry, value }),\n+            Vacant(entry) => Ok(entry.insert(value)),\n+        }\n+    }\n+\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///"}, {"sha": "6b30d95977395fc9c53d7cba74d5c79a487719a1", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/232caad39581118619c5168284b15457d1c72900/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232caad39581118619c5168284b15457d1c72900/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=232caad39581118619c5168284b15457d1c72900", "patch": "@@ -71,6 +71,41 @@ impl<K: Debug + Ord, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     }\n }\n \n+/// The error returned by [`try_insert`](BTreeMap::try_insert) when the key already exists.\n+///\n+/// Contains the occupied entry, and the value that was not inserted.\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+pub struct OccupiedError<'a, K: 'a, V: 'a> {\n+    /// The entry in the map that was already occupied.\n+    pub entry: OccupiedEntry<'a, K, V>,\n+    /// The value which was not inserted, because the entry was already occupied.\n+    pub value: V,\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<K: Debug + Ord, V: Debug> Debug for OccupiedError<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OccupiedError\")\n+            .field(\"key\", self.entry.key())\n+            .field(\"old_value\", self.entry.get())\n+            .field(\"new_value\", &self.value)\n+            .finish()\n+    }\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: Debug + Ord, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"failed to insert {:?}, key {:?} already exists with value {:?}\",\n+            self.value,\n+            self.entry.key(),\n+            self.entry.get(),\n+        )\n+    }\n+}\n+\n impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry."}, {"sha": "233afa92389992328b7838417e2e046587a04a56", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=232caad39581118619c5168284b15457d1c72900", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n #[cfg(test)]\n mod tests;\n \n@@ -842,6 +844,37 @@ where\n         self.base.insert(k, v)\n     }\n \n+    /// Tries to insert a key-value pair into the map, and returns\n+    /// a mutable reference to the value in the entry.\n+    ///\n+    /// If the map already had this key present, nothing is updated, and\n+    /// an error containing the occupied entry and the value is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(map_try_insert)]\n+    ///\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n+    ///\n+    /// let err = map.try_insert(37, \"b\").unwrap_err();\n+    /// assert_eq!(err.entry.key(), &37);\n+    /// assert_eq!(err.entry.get(), &\"a\");\n+    /// assert_eq!(err.value, \"b\");\n+    /// ```\n+    #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+    pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>> {\n+        match self.entry(key) {\n+            Occupied(entry) => Err(OccupiedError { entry, value }),\n+            Vacant(entry) => Ok(entry.insert(value)),\n+        }\n+    }\n+\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///\n@@ -1851,6 +1884,41 @@ impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n     }\n }\n \n+/// The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n+///\n+/// Contains the occupied entry, and the value that was not inserted.\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+pub struct OccupiedError<'a, K: 'a, V: 'a> {\n+    /// The entry in the map that was already occupied.\n+    pub entry: OccupiedEntry<'a, K, V>,\n+    /// The value which was not inserted, because the entry was already occupied.\n+    pub value: V,\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<K: Debug, V: Debug> Debug for OccupiedError<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OccupiedError\")\n+            .field(\"key\", self.entry.key())\n+            .field(\"old_value\", self.entry.get())\n+            .field(\"new_value\", &self.value)\n+            .finish()\n+    }\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: Debug, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"failed to insert {:?}, key {:?} already exists with value {:?}\",\n+            self.value,\n+            self.entry.key(),\n+            self.entry.get(),\n+        )\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type Item = (&'a K, &'a V);"}, {"sha": "80c35307d52ac73643c26a9eef7e8f5bc46d75ac", "filename": "library/std/src/error.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=232caad39581118619c5168284b15457d1c72900", "patch": "@@ -470,6 +470,24 @@ impl Error for char::DecodeUtf16Error {\n     }\n }\n \n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: Debug + Ord, V: Debug> Error\n+    for crate::collections::btree_map::OccupiedError<'a, K, V>\n+{\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"key already exists\"\n+    }\n+}\n+\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n+impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedError<'a, K, V> {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"key already exists\"\n+    }\n+}\n+\n #[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: Error> Error for Box<T> {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "99ab3888d9647df15caf8b8d02e5c37093a254d7", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232caad39581118619c5168284b15457d1c72900/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=232caad39581118619c5168284b15457d1c72900", "patch": "@@ -281,6 +281,7 @@\n #![feature(linkage)]\n #![feature(llvm_asm)]\n #![feature(log_syntax)]\n+#![feature(map_try_insert)]\n #![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]"}]}