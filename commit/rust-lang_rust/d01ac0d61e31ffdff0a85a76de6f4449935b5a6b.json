{"sha": "d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWFjMGQ2MWUzMWZmZGZmMGE4NWE3NmRlNmY0NDQ5OTM1YjVhNmI=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-12T13:59:30Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-12T14:57:06Z"}, "message": "add the logic for when other_ty is FnDef", "tree": {"sha": "9ae790562e9ba2c72bdefec39005a07cee8bac3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae790562e9ba2c72bdefec39005a07cee8bac3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "html_url": "https://github.com/rust-lang/rust/commit/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "html_url": "https://github.com/rust-lang/rust/commit/199b0bad3c233ba5bec8895efe6c8888c9ce5bee"}], "stats": {"total": 110, "additions": 90, "deletions": 20}, "files": [{"sha": "d2fe099e433f2ec4675989a20db8e99c00bbb5ed", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "patch": "@@ -333,18 +333,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 lhs_ty);\n \n                             if !lhs_expr.span.eq(&rhs_expr.span) {\n-                                self.add_type_neq_err_label(&mut err,\n-                                                            lhs_expr.span,\n-                                                            lhs_ty,\n-                                                            rhs_ty,\n-                                                            op,\n-                                                            is_assign);\n-                                self.add_type_neq_err_label(&mut err,\n-                                                            rhs_expr.span,\n-                                                            rhs_ty,\n-                                                            lhs_ty,\n-                                                            op,\n-                                                            is_assign);\n+                                self.add_type_neq_err_label(\n+                                    &mut err,\n+                                    lhs_expr.span,\n+                                    lhs_ty,\n+                                    rhs_ty,\n+                                    op,\n+                                    is_assign\n+                                );\n+                                self.add_type_neq_err_label(\n+                                    &mut err,\n+                                    rhs_expr.span,\n+                                    rhs_ty,\n+                                    lhs_ty,\n+                                    op,\n+                                    is_assign\n+                                );\n                             }\n \n                             let mut suggested_deref = false;\n@@ -447,21 +451,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             };\n \n+            let other_ty = if let FnDef(def_id, _) = other_ty.sty {\n+                let hir_id = &self.tcx.hir().as_local_hir_id(def_id).unwrap();\n+                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(*hir_id) {\n+                    Some(f) => f.clone().output(),\n+                    None => {\n+                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n+                    }\n+                }\n+            } else {\n+                other_ty\n+            };\n+\n             if self.lookup_op_method(fn_sig.output(),\n                                     &[other_ty],\n                                     Op::Binary(op, is_assign))\n                     .is_ok() {\n-                let variable_snippet = if fn_sig.inputs().len() > 0 {\n-                    format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap())\n+                let (variable_snippet, applicability) = if fn_sig.inputs().len() > 0 {\n+                    (format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap()),\n+                    Applicability::HasPlaceholders)\n                 } else {\n-                    format!(\"{}()\", source_map.span_to_snippet(span).unwrap())\n+                    (format!(\"{}()\", source_map.span_to_snippet(span).unwrap()),\n+                    Applicability::MaybeIncorrect)\n                 };\n \n                 err.span_suggestion(\n                     span,\n-                    \"did you forget\",\n+                    \"you might have forgotten to call this function\",\n                     variable_snippet,\n-                    Applicability::MachineApplicable,\n+                    applicability,\n                 );\n             }\n         }"}, {"sha": "74fb00f8ac383329d54370d189482c387f06f874", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "patch": "@@ -7,6 +7,14 @@ LL |     let x = f == g;\n    |             fn() {main::f}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn() {main::f}`\n+help: you might have forgotten to call this function\n+   |\n+LL |     let x = f() == g;\n+   |             ^^^\n+help: you might have forgotten to call this function\n+   |\n+LL |     let x = f == g();\n+   |                  ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-compare-mismatch.rs:4:18"}, {"sha": "27cf16a821ffc3197b0cb95a13dad10616789cf8", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "patch": "@@ -16,4 +16,11 @@ fn main() {\n     bar > 13;\n     //~^ ERROR 16:9: 16:10: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}` [E0369]\n     //~| ERROR 16:11: 16:13: mismatched types [E0308]\n+\n+    foo > foo;\n+    //~^ ERROR 20:9: 20:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+\n+    foo > bar;\n+    //~^ ERROR 23:9: 23:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+    //~| ERROR 23:11: 23:14: mismatched types [E0308]\n }"}, {"sha": "b49f5e35f42265153e27c868cef4a6e8e2b41bfb", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d01ac0d61e31ffdff0a85a76de6f4449935b5a6b/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=d01ac0d61e31ffdff0a85a76de6f4449935b5a6b", "patch": "@@ -5,7 +5,7 @@ LL |     foo > 12;\n    |     --- ^ -- {integer}\n    |     |\n    |     fn() -> i32 {foo}\n-   |     help: did you forget: `foo()`\n+   |     help: you might have forgotten to call this function: `foo()`\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n@@ -25,7 +25,7 @@ LL |     bar > 13;\n    |     --- ^ -- {integer}\n    |     |\n    |     fn(i64) -> i64 {bar}\n-   |     help: did you forget: `bar( /* arguments */ )`\n+   |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn(i64) -> i64 {bar}`\n \n@@ -38,7 +38,44 @@ LL |     bar > 13;\n    = note: expected type `fn(i64) -> i64 {bar}`\n               found type `i64`\n \n-error: aborting due to 4 previous errors\n+error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n+  --> $DIR/issue-59488.rs:20:9\n+   |\n+LL |     foo > foo;\n+   |     --- ^ --- fn() -> i32 {foo}\n+   |     |\n+   |     fn() -> i32 {foo}\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n+help: you might have forgotten to call this function\n+   |\n+LL |     foo() > foo;\n+   |     ^^^^^\n+help: you might have forgotten to call this function\n+   |\n+LL |     foo > foo();\n+   |           ^^^^^\n+\n+error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n+  --> $DIR/issue-59488.rs:23:9\n+   |\n+LL |     foo > bar;\n+   |     --- ^ --- fn(i64) -> i64 {bar}\n+   |     |\n+   |     fn() -> i32 {foo}\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-59488.rs:23:11\n+   |\n+LL |     foo > bar;\n+   |           ^^^ expected fn item, found a different fn item\n+   |\n+   = note: expected type `fn() -> i32 {foo}`\n+              found type `fn(i64) -> i64 {bar}`\n+\n+error: aborting due to 7 previous errors\n \n Some errors occurred: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}]}