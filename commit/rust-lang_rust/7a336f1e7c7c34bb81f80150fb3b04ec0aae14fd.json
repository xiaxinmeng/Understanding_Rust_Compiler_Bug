{"sha": "7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzM2ZjFlN2M3YzM0YmI4MWY4MDE1MGZiM2IwNGVjMGFhZTE0ZmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-08T21:32:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-08T22:57:03Z"}, "message": "modify last use to take into account cap clause, add new test", "tree": {"sha": "33b955867de736e51ea4aa6e1c38a3a32e0e587c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b955867de736e51ea4aa6e1c38a3a32e0e587c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "html_url": "https://github.com/rust-lang/rust/commit/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "106385cb9140626166a99d11451e5b4912c602c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/106385cb9140626166a99d11451e5b4912c602c7", "html_url": "https://github.com/rust-lang/rust/commit/106385cb9140626166a99d11451e5b4912c602c7"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "075c40ccfa5acda64788f57c498daf84a51d778e", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "patch": "@@ -136,6 +136,16 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         v.visit_expr(dest, cx, v);\n         clear_if_path(cx, dest, v, true);\n       }\n+      expr_fn(_, _, _, cap_clause) {\n+        // n.b.: safe to ignore copies, as if they are unused\n+        // then they are ignored, otherwise they will show up\n+        // as freevars in the body.\n+\n+        vec::iter(cap_clause.moves) {|ci|\n+            clear_def_if_path(cx, cx.def_map.get(ci.id), true);\n+        }\n+        visit::visit_expr(ex, cx, v);\n+      }\n       expr_call(f, args, _) {\n         v.visit_expr(f, cx, v);\n         let i = 0u, fns = [];\n@@ -263,18 +273,25 @@ fn clear_in_current(cx: ctx, my_def: node_id, to: bool) {\n     }\n }\n \n+fn clear_def_if_path(cx: ctx, d: def, to: bool)\n+    -> option<node_id> {\n+    alt d {\n+      def_local(def_id, let_copy.) | def_arg(def_id, by_copy.) |\n+      def_arg(def_id, by_move.) {\n+        clear_in_current(cx, def_id.node, to);\n+        some(def_id.node)\n+      }\n+      _ {\n+        none\n+      }\n+    }\n+}\n+\n fn clear_if_path(cx: ctx, ex: @expr, v: visit::vt<ctx>, to: bool)\n     -> option::t<node_id> {\n     alt ex.node {\n       expr_path(_) {\n-        alt cx.def_map.get(ex.id) {\n-          def_local(def_id, let_copy.) | def_arg(def_id, by_copy.) |\n-          def_arg(def_id, by_move.) {\n-            clear_in_current(cx, def_id.node, to);\n-            ret option::some(def_id.node);\n-          }\n-          _ {}\n-        }\n+        ret clear_def_if_path(cx, cx.def_map.get(ex.id), to);\n       }\n       _ { v.visit_expr(ex, cx, v); }\n     }"}, {"sha": "dd343e14b4f712fb4b0b73f4df9d1301fa3da9ad", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "patch": "@@ -9,6 +9,7 @@ import middle::freevars::{get_freevars, freevar_info};\n import option::{some, none};\n import back::abi;\n import syntax::codemap::span;\n+import syntax::print::pprust::expr_to_str;\n import back::link::{\n     mangle_internal_name_by_path,\n     mangle_internal_name_by_path_and_seq};\n@@ -121,6 +122,18 @@ tag environment_value {\n     env_ref(ValueRef, ty::t, lval_kind);\n }\n \n+fn ev_to_str(ccx: @crate_ctxt, ev: environment_value) -> str {\n+    alt ev {\n+      env_expr(ex) { expr_to_str(ex) }\n+      env_copy(v, t, lk) { #fmt(\"copy(%s,%s)\", val_str(ccx.tn, v),\n+                                ty_to_str(ccx.tcx, t)) }\n+      env_move(v, t, lk) { #fmt(\"move(%s,%s)\", val_str(ccx.tn, v),\n+                                ty_to_str(ccx.tcx, t)) }\n+      env_ref(v, t, lk) { #fmt(\"ref(%s,%s)\", val_str(ccx.tn, v),\n+                                ty_to_str(ccx.tcx, t)) }\n+    }\n+}\n+\n fn mk_tydesc_ty(tcx: ty::ctxt, ck: ty::closure_kind) -> ty::t {\n     ret alt ck {\n       ty::closure_block. | ty::closure_shared. { ty::mk_type(tcx) }\n@@ -284,7 +297,7 @@ fn store_environment(\n         };\n     }\n \n-    //let ccx = bcx_ccx(bcx);\n+    let ccx = bcx_ccx(bcx);\n     let tcx = bcx_tcx(bcx);\n \n     // compute the shape of the closure\n@@ -351,6 +364,11 @@ fn store_environment(\n     let {bcx: bcx, val:bindings_slot} =\n         GEP_tup_like_1(bcx, cboxptr_ty, llbox, [0, abi::cbox_elt_bindings]);\n     vec::iteri(bound_values) { |i, bv|\n+        if (!ccx.sess.get_opts().no_asm_comments) {\n+            add_comment(bcx, #fmt(\"Copy %s into closure\",\n+                                  ev_to_str(ccx, bv)));\n+        }\n+\n         let bound_data = GEPi(bcx, bindings_slot, [0, i as int]);\n         alt bv {\n           env_expr(e) {"}, {"sha": "a8cca1490faa21da2deb7ae8341b09d366923c3e", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "patch": "@@ -1,4 +1,3 @@\n-// error-pattern: warning: Captured variable 'y' not used in closure\n fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(*x) as uint;"}, {"sha": "00e86a481d3c288cf962dfd00faf87bdad236975", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=7a336f1e7c7c34bb81f80150fb3b04ec0aae14fd", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    let p = comm::port::<uint>();\n+    let ch = comm::chan(p);\n+\n+    let x = ~1;\n+    let x_in_parent = ptr::addr_of(*x) as uint;\n+\n+    let y = ~2;\n+    let y_in_parent = ptr::addr_of(*y) as uint;\n+\n+    task::spawn(sendfn[copy ch, y; move x]() {\n+        let x_in_child = ptr::addr_of(*x) as uint;\n+        comm::send(ch, x_in_child);\n+\n+        let y_in_child = ptr::addr_of(*y) as uint;\n+        comm::send(ch, y_in_child);\n+    });\n+\n+    let x_in_child = comm::recv(p);\n+    assert x_in_parent == x_in_child;\n+\n+    let y_in_child = comm::recv(p);\n+    assert y_in_parent != y_in_child;\n+}"}]}