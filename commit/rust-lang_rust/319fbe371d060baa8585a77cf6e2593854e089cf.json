{"sha": "319fbe371d060baa8585a77cf6e2593854e089cf", "node_id": "C_kwDOAAsO6NoAKDMxOWZiZTM3MWQwNjBiYWE4NTg1YTc3Y2Y2ZTI1OTM4NTRlMDg5Y2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-28T02:43:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-24T21:50:48Z"}, "message": "Fix suggestion for `_` on return type for fn in impl for Trait", "tree": {"sha": "6c6898146ff02900fc232167a21b3728de226761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6898146ff02900fc232167a21b3728de226761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319fbe371d060baa8585a77cf6e2593854e089cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319fbe371d060baa8585a77cf6e2593854e089cf", "html_url": "https://github.com/rust-lang/rust/commit/319fbe371d060baa8585a77cf6e2593854e089cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319fbe371d060baa8585a77cf6e2593854e089cf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "url": "https://api.github.com/repos/rust-lang/rust/commits/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "html_url": "https://github.com/rust-lang/rust/commit/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00"}], "stats": {"total": 202, "additions": 129, "deletions": 73}, "files": [{"sha": "1cd0ace8adb052ab23d242516c85198138156f60", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -2574,7 +2574,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .map(|(i, a)| {\n                 if let hir::TyKind::Infer = a.kind && !self.allow_ty_infer() {\n                     if let Some(suggested_ty) =\n-                      self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, i) {\n+                        self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, Some(i))\n+                    {\n                         infer_replacements.push((a.span, suggested_ty.to_string()));\n                         return suggested_ty;\n                     }\n@@ -2588,8 +2589,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let output_ty = match decl.output {\n             hir::FnRetTy::Return(output) => {\n-                visitor.visit_ty(output);\n-                self.ast_ty_to_ty(output)\n+                if let hir::TyKind::Infer = output.kind\n+                    && !self.allow_ty_infer()\n+                    && let Some(suggested_ty) =\n+                        self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, None)\n+                {\n+                    infer_replacements.push((output.span, suggested_ty.to_string()));\n+                    suggested_ty\n+                } else {\n+                    visitor.visit_ty(output);\n+                    self.ast_ty_to_ty(output)\n+                }\n             }\n             hir::FnRetTy::DefaultReturn(..) => tcx.mk_unit(),\n         };\n@@ -2619,7 +2629,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             if !infer_replacements.is_empty() {\n                 diag.multipart_suggestion(&format!(\n                     \"try replacing `_` with the type{} in the corresponding trait method signature\",\n-                    if infer_replacements.len() > 1 { \"s\" } else { \"\" }\n+                    rustc_errors::pluralize!(infer_replacements.len()),\n                 ), infer_replacements, Applicability::MachineApplicable);\n             }\n \n@@ -2653,18 +2663,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Given a fn_hir_id for a impl function, suggest the type that is found on the\n     /// corresponding function in the trait that the impl implements, if it exists.\n+    /// If arg_idx is Some, then it corresponds to an input type index, otherwise it\n+    /// corresponds to the return type.\n     fn suggest_trait_fn_ty_for_impl_fn_infer(\n         &self,\n         fn_hir_id: hir::HirId,\n-        arg_idx: usize,\n+        arg_idx: Option<usize>,\n     ) -> Option<Ty<'tcx>> {\n         let tcx = self.tcx();\n         let hir = tcx.hir();\n \n         let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n             hir.get(fn_hir_id) else { return None };\n         let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n-                hir.get(hir.get_parent_node(fn_hir_id)) else { return None };\n+                hir.get(hir.get_parent_node(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n \n         let trait_ref =\n             self.instantiate_mono_trait_ref(i.of_trait.as_ref()?, self.ast_ty_to_ty(i.self_ty));\n@@ -2681,7 +2693,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_ref.substs.extend_to(tcx, x.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );\n \n-        Some(tcx.erase_late_bound_regions(fn_sig.input(arg_idx)))\n+        let ty = if let Some(arg_idx) = arg_idx { fn_sig.input(arg_idx) } else { fn_sig.output() };\n+\n+        Some(tcx.erase_late_bound_regions(ty))\n     }\n \n     fn validate_late_bound_regions("}, {"sha": "be77bdb0bf5f06e3b16840f6ab2e67fed4489e28", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 76, "deletions": 43, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -1897,50 +1897,17 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             generics,\n             ..\n         })\n-        | ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), ident, generics, .. })\n         | Item(hir::Item { kind: ItemKind::Fn(sig, generics, _), ident, .. }) => {\n-            match get_infer_ret_ty(&sig.decl.output) {\n-                Some(ty) => {\n-                    let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n-                    // Typeck doesn't expect erased regions to be returned from `type_of`.\n-                    let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n-                        ty::ReErased => tcx.lifetimes.re_static,\n-                        _ => r,\n-                    });\n-                    let fn_sig = ty::Binder::dummy(fn_sig);\n-\n-                    let mut visitor = HirPlaceholderCollector::default();\n-                    visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n-                    let ret_ty = fn_sig.skip_binder().output();\n-                    if !ret_ty.references_error() {\n-                        if !ret_ty.is_closure() {\n-                            let ret_ty_str = match ret_ty.kind() {\n-                                // Suggest a function pointer return type instead of a unique function definition\n-                                // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n-                                // syntax)\n-                                ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n-                                _ => ret_ty.to_string(),\n-                            };\n-                            diag.span_suggestion(\n-                                ty.span,\n-                                \"replace with the correct return type\",\n-                                ret_ty_str,\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                            // to prevent the user from getting a papercut while trying to use the unique closure\n-                            // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n-                            diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                            diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n-                        }\n-                    }\n-                    diag.emit();\n+            infer_return_ty_for_fn_sig(tcx, sig, *ident, generics, def_id, &icx)\n+        }\n \n-                    fn_sig\n-                }\n-                None => <dyn AstConv<'_>>::ty_of_fn(\n+        ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), ident, generics, .. }) => {\n+            // Do not try to inference the return type for a impl method coming from a trait\n+            if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n+                tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+                && i.of_trait.is_some()\n+            {\n+                <dyn AstConv<'_>>::ty_of_fn(\n                     &icx,\n                     hir_id,\n                     sig.header.unsafety,\n@@ -1949,7 +1916,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     generics,\n                     Some(ident.span),\n                     None,\n-                ),\n+                )\n+            } else {\n+                infer_return_ty_for_fn_sig(tcx, sig, *ident, generics, def_id, &icx)\n             }\n         }\n \n@@ -2011,6 +1980,70 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     }\n }\n \n+fn infer_return_ty_for_fn_sig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    sig: &hir::FnSig<'_>,\n+    ident: Ident,\n+    generics: &hir::Generics<'_>,\n+    def_id: LocalDefId,\n+    icx: &ItemCtxt<'tcx>,\n+) -> ty::PolyFnSig<'tcx> {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+\n+    match get_infer_ret_ty(&sig.decl.output) {\n+        Some(ty) => {\n+            let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n+            // Typeck doesn't expect erased regions to be returned from `type_of`.\n+            let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n+                ty::ReErased => tcx.lifetimes.re_static,\n+                _ => r,\n+            });\n+            let fn_sig = ty::Binder::dummy(fn_sig);\n+\n+            let mut visitor = HirPlaceholderCollector::default();\n+            visitor.visit_ty(ty);\n+            let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n+            let ret_ty = fn_sig.skip_binder().output();\n+            if !ret_ty.references_error() {\n+                if !ret_ty.is_closure() {\n+                    let ret_ty_str = match ret_ty.kind() {\n+                        // Suggest a function pointer return type instead of a unique function definition\n+                        // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n+                        // syntax)\n+                        ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n+                        _ => ret_ty.to_string(),\n+                    };\n+                    diag.span_suggestion(\n+                        ty.span,\n+                        \"replace with the correct return type\",\n+                        ret_ty_str,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n+                    // to prevent the user from getting a papercut while trying to use the unique closure\n+                    // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n+                    diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+                    diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n+                }\n+            }\n+            diag.emit();\n+\n+            fn_sig\n+        }\n+        None => <dyn AstConv<'_>>::ty_of_fn(\n+            icx,\n+            hir_id,\n+            sig.header.unsafety,\n+            sig.header.abi,\n+            sig.decl,\n+            generics,\n+            Some(ident.span),\n+            None,\n+        ),\n+    }\n+}\n+\n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n     match tcx.hir().expect_item(def_id.expect_local()).kind {"}, {"sha": "4963790c35de26101e74c9cfaf9f23e0e5a8828a", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.fixed", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -2,12 +2,14 @@\n #![allow(unused)]\n \n trait Foo<T>: Sized {\n-    fn bar(i: i32, t: T, s: &Self) {}\n+    fn bar(i: i32, t: T, s: &Self) -> (T, i32);\n }\n \n impl Foo<usize> for () {\n-    fn bar(i: i32, t: usize, s: &()) {}\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+    fn bar(i: i32, t: usize, s: &()) -> (usize, i32) {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+        (1, 2)\n+    }\n }\n \n fn main() {}"}, {"sha": "ddf39c9c861973e65f309ae73d1627388aff40c8", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -2,12 +2,14 @@\n #![allow(unused)]\n \n trait Foo<T>: Sized {\n-    fn bar(i: i32, t: T, s: &Self) {}\n+    fn bar(i: i32, t: T, s: &Self) -> (T, i32);\n }\n \n impl Foo<usize> for () {\n-    fn bar(i: _, t: _, s: _) {}\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+    fn bar(i: _, t: _, s: _) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+        (1, 2)\n+    }\n }\n \n fn main() {}"}, {"sha": "730836a40c26a2d97f1a6a70b853ad6a28228e54", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -1,16 +1,17 @@\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/replace-impl-infer-ty-from-trait.rs:9:15\n    |\n-LL |     fn bar(i: _, t: _, s: _) {}\n-   |               ^     ^     ^ not allowed in type signatures\n-   |               |     |\n+LL |     fn bar(i: _, t: _, s: _) -> _ {\n+   |               ^     ^     ^     ^ not allowed in type signatures\n+   |               |     |     |\n+   |               |     |     not allowed in type signatures\n    |               |     not allowed in type signatures\n    |               not allowed in type signatures\n    |\n help: try replacing `_` with the types in the corresponding trait method signature\n    |\n-LL |     fn bar(i: i32, t: usize, s: &()) {}\n-   |               ~~~     ~~~~~     ~~~\n+LL |     fn bar(i: i32, t: usize, s: &()) -> (usize, i32) {\n+   |               ~~~     ~~~~~     ~~~     ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "22fedb22d66c6b9b2fe96046bbd9706889062493", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -57,7 +57,7 @@ unsafe fn test12(x: *const usize) -> *const *const _ {\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n-    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n     //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n@@ -113,7 +113,7 @@ pub fn main() {\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n-        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n         //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions"}, {"sha": "3ea317dfb1a5d329a07c14569935f854b1a32861", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/319fbe371d060baa8585a77cf6e2593854e089cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=319fbe371d060baa8585a77cf6e2593854e089cf", "patch": "@@ -545,14 +545,16 @@ help: use type parameters instead\n LL |     fn test10<T>(&self, _x : T) { }\n    |              +++             ~\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:59:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `Test9`\n+   |                        ^ not allowed in type signatures\n+   |\n+help: try replacing `_` with the type in the corresponding trait method signature\n+   |\n+LL |     fn clone(&self) -> Test9 { Test9 }\n+   |                        ~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:62:37\n@@ -585,14 +587,16 @@ help: use type parameters instead\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     +++             ~\n \n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:115:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^\n-   |                            |\n-   |                            not allowed in type signatures\n-   |                            help: replace with the correct return type: `FnTest9`\n+   |                            ^ not allowed in type signatures\n+   |\n+help: try replacing `_` with the type in the corresponding trait method signature\n+   |\n+LL |         fn clone(&self) -> FnTest9 { FnTest9 }\n+   |                            ~~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:118:41"}]}