{"sha": "a0742bdd063192bb6af37d9bdcac4a43b09fb975", "node_id": "C_kwDOAAsO6NoAKGEwNzQyYmRkMDYzMTkyYmI2YWYzN2Q5YmRjYWM0YTQzYjA5ZmI5NzU", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-03-27T11:48:33Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-24T04:09:57Z"}, "message": "Don't emit `.intel_syntax` for non-x86 targets", "tree": {"sha": "0ae6a78404a627e6006b1272b71f314c044e6091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae6a78404a627e6006b1272b71f314c044e6091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0742bdd063192bb6af37d9bdcac4a43b09fb975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0742bdd063192bb6af37d9bdcac4a43b09fb975", "html_url": "https://github.com/rust-lang/rust/commit/a0742bdd063192bb6af37d9bdcac4a43b09fb975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0742bdd063192bb6af37d9bdcac4a43b09fb975/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4210fd49cbea8ef241138a2fb77612f43e0b87a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4210fd49cbea8ef241138a2fb77612f43e0b87a7", "html_url": "https://github.com/rust-lang/rust/commit/4210fd49cbea8ef241138a2fb77612f43e0b87a7"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "2d41fe425844c13325ea9997d6d85822400d434d", "filename": "src/asm.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0742bdd063192bb6af37d9bdcac4a43b09fb975/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0742bdd063192bb6af37d9bdcac4a43b09fb975/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=a0742bdd063192bb6af37d9bdcac4a43b09fb975", "patch": "@@ -116,7 +116,6 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);\n-        let intel_dialect = is_x86 && !options.contains(InlineAsmOptions::ATT_SYNTAX);\n \n         // GCC index of an output operand equals its position in the array\n         let mut outputs = vec![];\n@@ -354,7 +353,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // 3. Build the template string\n \n         let mut template_str = String::with_capacity(estimate_template_length(template, constants_len, att_dialect));\n-        if !intel_dialect {\n+        if att_dialect {\n             template_str.push_str(ATT_SYNTAX_INS);\n         }\n \n@@ -436,7 +435,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n             }\n         }\n \n-        if !intel_dialect {\n+        if att_dialect {\n             template_str.push_str(INTEL_SYNTAX_INS);\n         }\n \n@@ -661,8 +660,8 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n         // Default to Intel syntax on x86\n-        let intel_syntax = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64)\n-            && !options.contains(InlineAsmOptions::ATT_SYNTAX);\n+        let att_dialect = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64)\n+            && options.contains(InlineAsmOptions::ATT_SYNTAX);\n \n         // Build the template string\n         let mut template_str = String::new();\n@@ -696,11 +695,11 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n         }\n \n         let template_str =\n-            if intel_syntax {\n-                format!(\"{}\\n\\t.intel_syntax noprefix\", template_str)\n+            if att_dialect {\n+                format!(\".att_syntax\\n\\t{}\\n\\t.intel_syntax noprefix\", template_str)\n             }\n             else {\n-                format!(\".att_syntax\\n\\t{}\\n\\t.intel_syntax noprefix\", template_str)\n+                template_str\n             };\n         // NOTE: seems like gcc will put the asm in the wrong section, so set it to .text manually.\n         let template_str = format!(\".pushsection .text\\n{}\\n.popsection\", template_str);"}]}