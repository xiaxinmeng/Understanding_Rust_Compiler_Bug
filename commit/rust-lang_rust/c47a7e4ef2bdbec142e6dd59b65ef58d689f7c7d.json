{"sha": "c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2E3ZTRlZjJiZGJlYzE0MmU2ZGQ1OWI2NWVmNThkNjg5ZjdjN2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-06-25T21:33:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-06-25T21:33:51Z"}, "message": "get_parent_node_by_hir_id -> get_parent_node", "tree": {"sha": "8c7a72dd20ad1a2e1e3dc8196e9e90cc25dcc109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7a72dd20ad1a2e1e3dc8196e9e90cc25dcc109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "html_url": "https://github.com/rust-lang/rust/commit/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0edfab44cc7f0dcd00b6c9f46bd554dab5e51a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0edfab44cc7f0dcd00b6c9f46bd554dab5e51a2", "html_url": "https://github.com/rust-lang/rust/commit/f0edfab44cc7f0dcd00b6c9f46bd554dab5e51a2"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "1c277c10aed7bdcf8a3c6479bb27157fb79e066f", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         let map = &self.cx.tcx.hir();\n         if map.is_argument(map.hir_to_node_id(consume_pat.hir_id)) {\n             // Skip closure arguments\n-            if let Some(Node::Expr(..)) = map.find_by_hir_id(map.get_parent_node_by_hir_id(consume_pat.hir_id)) {\n+            if let Some(Node::Expr(..)) = map.find_by_hir_id(map.get_parent_node(consume_pat.hir_id)) {\n                 return;\n             }\n             if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             return;\n         }\n         if let Categorization::Rvalue(..) = cmt.cat {\n-            if let Some(Node::Stmt(st)) = map.find_by_hir_id(map.get_parent_node_by_hir_id(cmt.hir_id)) {\n+            if let Some(Node::Stmt(st)) = map.find_by_hir_id(map.get_parent_node(cmt.hir_id)) {\n                 if let StmtKind::Local(ref loc) = st.node {\n                     if let Some(ref ex) = loc.init {\n                         if let ExprKind::Box(..) = ex.node {"}, {"sha": "4a69db65d9d402eb20492ef6bd8c77b215aa00ed", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -176,7 +176,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n     let map = &vis.cx.tcx.hir();\n     let mut cur_id = vis.write_expr.hir_id;\n     loop {\n-        let parent_id = map.get_parent_node_by_hir_id(cur_id);\n+        let parent_id = map.get_parent_node(cur_id);\n         if parent_id == cur_id {\n             break;\n         }"}, {"sha": "baaee28958c2bd26b163b5d66d1f58449aacf3ea", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         let is_impl = if let Some(hir::Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             matches!(item.node, hir::ItemKind::Impl(_, _, _, _, Some(_), _, _))\n         } else {"}, {"sha": "7cb87b0bc9a3b8c1704d590cf218e60ca2effcf3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -2218,7 +2218,7 @@ fn is_conditional(expr: &Expr) -> bool {\n fn is_nested(cx: &LateContext<'_, '_>, match_expr: &Expr, iter_expr: &Expr) -> bool {\n     if_chain! {\n         if let Some(loop_block) = get_enclosing_block(cx, match_expr.hir_id);\n-        let parent_node = cx.tcx.hir().get_parent_node_by_hir_id(loop_block.hir_id);\n+        let parent_node = cx.tcx.hir().get_parent_node(loop_block.hir_id);\n         if let Some(Node::Expr(loop_expr)) = cx.tcx.hir().find_by_hir_id(parent_node);\n         then {\n             return is_loop_nested(cx, loop_expr, iter_expr)\n@@ -2235,7 +2235,7 @@ fn is_loop_nested(cx: &LateContext<'_, '_>, loop_expr: &Expr, iter_expr: &Expr)\n         return true;\n     };\n     loop {\n-        let parent = cx.tcx.hir().get_parent_node_by_hir_id(id);\n+        let parent = cx.tcx.hir().get_parent_node(id);\n         if parent == id {\n             return false;\n         }"}, {"sha": "84492676d7de1a64c9bdddfdaa18114923158eb7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -1423,7 +1423,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n             if cx.tables.expr_ty(arg) == ty {\n                 snip = Some((\"try removing the `clone` call\", format!(\"{}\", snippet)));\n             } else {\n-                let parent = cx.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n+                let parent = cx.tcx.hir().get_parent_node(expr.hir_id);\n                 match cx.tcx.hir().get(parent) {\n                     hir::Node::Expr(parent) => match parent.node {\n                         // &*x is a nop, &x.clone() is not"}, {"sha": "9857e17563c1fb33fe2d4b5754cd3b409acda52e", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n }\n \n fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) -> bool {\n-    let parent_id = cx.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n+    let parent_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n     let parent_node = cx.tcx.hir().get(parent_id);\n \n     if let rustc::hir::Node::Expr(e) = parent_node {"}, {"sha": "1413f16df1e4b60d88e73b99a481c2b0802bfec1", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         if let Some(Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))\n@@ -357,7 +357,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n         if let mc::Categorization::Local(vid) = cmt.cat {\n             let mut id = matched_pat.hir_id;\n             loop {\n-                let parent = self.cx.tcx.hir().get_parent_node_by_hir_id(id);\n+                let parent = self.cx.tcx.hir().get_parent_node(id);\n                 if id == parent {\n                     // no parent\n                     return;"}, {"sha": "ba7fef25809802969e20791c4206d0a1085e7e7a", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n         if let ImplItemKind::Const(hir_ty, ..) = &impl_item.node {\n-            let item_hir_id = cx.tcx.hir().get_parent_node_by_hir_id(impl_item.hir_id);\n+            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n             // Ensure the impl is an inherent impl.\n             if let ItemKind::Impl(_, _, _, _, None, _, _) = item.node {\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n             let mut dereferenced_expr = expr;\n             let mut needs_check_adjustment = true;\n             loop {\n-                let parent_id = cx.tcx.hir().get_parent_node_by_hir_id(cur_expr.hir_id);\n+                let parent_id = cx.tcx.hir().get_parent_node(cur_expr.hir_id);\n                 if parent_id == cur_expr.hir_id {\n                     break;\n                 }"}, {"sha": "0a70c77ae0a0b588644e481fd51d0c2a1272a239", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n             }\n             // Check if the binary expression is part of another bi/unary expression\n             // as a child node\n-            let mut parent_expr = cx.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n+            let mut parent_expr = cx.tcx.hir().get_parent_node(expr.hir_id);\n             while parent_expr != hir::CRATE_HIR_ID {\n                 if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n                     match e.node {\n@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                         _ => {},\n                     }\n                 }\n-                parent_expr = cx.tcx.hir().get_parent_node_by_hir_id(parent_expr);\n+                parent_expr = cx.tcx.hir().get_parent_node(parent_expr);\n             }\n             // as a parent node\n             let mut visitor = BinaryExprVisitor { in_binary_expr: false };"}, {"sha": "f9fbb8a871d0e208e7d7991325c00abfe74c5c1a", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         if let Some(Node::Item(item)) = cx\n             .tcx\n             .hir()\n-            .find_by_hir_id(cx.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+            .find_by_hir_id(cx.tcx.hir().get_parent_node(hir_id))\n         {\n             if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n                 ItemKind::Trait(..))"}, {"sha": "b79d088b7aa714d210172db55a9a972974b836c0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -585,7 +585,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n         }\n         if_chain! {\n             let map = &cx.tcx.hir();\n-            let opt_parent_node = map.find_by_hir_id(map.get_parent_node_by_hir_id(expr.hir_id));\n+            let opt_parent_node = map.find_by_hir_id(map.get_parent_node(expr.hir_id));\n             if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n             if is_questionmark_desugar_marked_call(parent_expr);\n             then {"}, {"sha": "e5569647ff0cea93a20381cf64aead4e3b71ab95", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c47a7e4ef2bdbec142e6dd59b65ef58d689f7c7d", "patch": "@@ -592,7 +592,7 @@ fn trim_multiline_inner(s: Cow<'_, str>, ignore_first: bool, ch: char) -> Cow<'_\n pub fn get_parent_expr<'c>(cx: &'c LateContext<'_, '_>, e: &Expr) -> Option<&'c Expr> {\n     let map = &cx.tcx.hir();\n     let hir_id = e.hir_id;\n-    let parent_id = map.get_parent_node_by_hir_id(hir_id);\n+    let parent_id = map.get_parent_node(hir_id);\n     if hir_id == parent_id {\n         return None;\n     }"}]}