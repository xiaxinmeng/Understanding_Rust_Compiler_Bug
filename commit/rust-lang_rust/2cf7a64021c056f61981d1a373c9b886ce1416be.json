{"sha": "2cf7a64021c056f61981d1a373c9b886ce1416be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjdhNjQwMjFjMDU2ZjYxOTgxZDFhMzczYzliODg2Y2UxNDE2YmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-06T11:04:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-06T11:09:46Z"}, "message": "Don't disable core::time completely", "tree": {"sha": "083c139ca8e8fc1c131d1f6cea736a4e55bbd845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083c139ca8e8fc1c131d1f6cea736a4e55bbd845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf7a64021c056f61981d1a373c9b886ce1416be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf7a64021c056f61981d1a373c9b886ce1416be", "html_url": "https://github.com/rust-lang/rust/commit/2cf7a64021c056f61981d1a373c9b886ce1416be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf7a64021c056f61981d1a373c9b886ce1416be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e75d84e929fb4a9b7b0e728aca44b8c9fdc6205", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e75d84e929fb4a9b7b0e728aca44b8c9fdc6205", "html_url": "https://github.com/rust-lang/rust/commit/3e75d84e929fb4a9b7b0e728aca44b8c9fdc6205"}], "stats": {"total": 249, "additions": 196, "deletions": 53}, "files": [{"sha": "0e192f790d6ab479514df33f43008ec142b3b76e", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 196, "deletions": 53, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/2cf7a64021c056f61981d1a373c9b886ce1416be/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/2cf7a64021c056f61981d1a373c9b886ce1416be/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=2cf7a64021c056f61981d1a373c9b886ce1416be", "patch": "@@ -1,29 +1,30 @@\n-From 5a91929290f0ced810185e9f81bbdb4d5cf53804 Mon Sep 17 00:00:00 2001\n+From 7bc14b679a5e5a43940fd47a7f3be7f1cc27509b Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 22 Sep 2018 11:09:38 +0200\n+Date: Sat, 6 Oct 2018 13:08:34 +0200\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n- src/libcore/clone.rs         |  4 +-\n- src/libcore/cmp.rs           |  6 +--\n- src/libcore/default.rs       |  2 -\n- src/libcore/fmt/num.rs       |  6 +--\n- src/libcore/hash/mod.rs      | 20 --------\n- src/libcore/iter/range.rs    |  1 -\n- src/libcore/iter/traits.rs   |  2 +-\n- src/libcore/lib.rs           |  4 +-\n- src/libcore/marker.rs        |  4 +-\n- src/libcore/mem.rs           |  2 -\n- src/libcore/num/mod.rs       | 99 ++++++++++--------------------------\n- src/libcore/num/wrapping.rs  | 14 ++---\n- src/libcore/ops/arith.rs     | 22 ++++----\n- src/libcore/ops/bit.rs       | 30 ++++-------\n- src/libcore/tests/iter.rs    | 15 ------\n- src/libcore/tests/num/mod.rs | 18 -------\n- 16 files changed, 63 insertions(+), 186 deletions(-)\n+ src/libcore/clone.rs         |   4 +-\n+ src/libcore/cmp.rs           |   6 +-\n+ src/libcore/default.rs       |   2 -\n+ src/libcore/fmt/num.rs       |   6 +-\n+ src/libcore/hash/mod.rs      |  20 ------\n+ src/libcore/iter/range.rs    |   1 -\n+ src/libcore/iter/traits.rs   |   2 +-\n+ src/libcore/lib.rs           |   2 -\n+ src/libcore/marker.rs        |   4 +-\n+ src/libcore/mem.rs           |   2 -\n+ src/libcore/num/mod.rs       |  99 ++++++++-------------------\n+ src/libcore/num/wrapping.rs  |  14 ++--\n+ src/libcore/ops/arith.rs     |  22 +++---\n+ src/libcore/ops/bit.rs       |  30 +++------\n+ src/libcore/tests/iter.rs    |  15 -----\n+ src/libcore/tests/num/mod.rs |  18 -----\n+ src/libcore/time.rs          | 126 -----------------------------------\n+ 17 files changed, 62 insertions(+), 311 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n-index 3b15ba2..de08ce0 100644\n+index 46bb580..fcf9fa8 100644\n --- a/src/libcore/clone.rs\n +++ b/src/libcore/clone.rs\n @@ -172,8 +172,8 @@ mod impls {\n@@ -38,10 +39,10 @@ index 3b15ba2..de08ce0 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index ef7d83a..e40c5c2 100644\n+index edaed31..570217b 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -883,7 +883,7 @@ mod impls {\n+@@ -886,7 +886,7 @@ mod impls {\n      }\n  \n      partial_eq_impl! {\n@@ -50,7 +51,7 @@ index ef7d83a..e40c5c2 100644\n      }\n  \n      macro_rules! eq_impl {\n-@@ -893,7 +893,7 @@ mod impls {\n+@@ -896,7 +896,7 @@ mod impls {\n          )*)\n      }\n  \n@@ -59,7 +60,7 @@ index ef7d83a..e40c5c2 100644\n  \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -982,7 +982,7 @@ mod impls {\n+@@ -985,7 +985,7 @@ mod impls {\n          }\n      }\n  \n@@ -128,7 +129,7 @@ index 51391fa..140255e 100644\n  impl_Display!(isize, usize: to_u16);\n  #[cfg(target_pointer_width = \"32\")]\n diff --git a/src/libcore/hash/mod.rs b/src/libcore/hash/mod.rs\n-index e7907e0..84b700c 100644\n+index bbebadd..d6de656 100644\n --- a/src/libcore/hash/mod.rs\n +++ b/src/libcore/hash/mod.rs\n @@ -306,12 +306,6 @@ pub trait Hasher {\n@@ -157,7 +158,7 @@ index e7907e0..84b700c 100644\n      /// Writes a single `isize` into this hasher.\n      #[inline]\n      #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n-@@ -380,9 +368,6 @@ impl<'a, H: Hasher + ?Sized> Hasher for &'a mut H {\n+@@ -380,9 +368,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n      fn write_u64(&mut self, i: u64) {\n          (**self).write_u64(i)\n      }\n@@ -167,7 +168,7 @@ index e7907e0..84b700c 100644\n      fn write_usize(&mut self, i: usize) {\n          (**self).write_usize(i)\n      }\n-@@ -398,9 +383,6 @@ impl<'a, H: Hasher + ?Sized> Hasher for &'a mut H {\n+@@ -398,9 +383,6 @@ impl<H: Hasher + ?Sized> Hasher for &mut H {\n      fn write_i64(&mut self, i: i64) {\n          (**self).write_i64(i)\n      }\n@@ -199,7 +200,7 @@ index 55addd8..6695cfe 100644\n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n-index 4b2c1aa..ec3991f 100644\n+index f95f8e7..549d832 100644\n --- a/src/libcore/iter/traits.rs\n +++ b/src/libcore/iter/traits.rs\n @@ -843,7 +843,7 @@ macro_rules! float_sum_product {\n@@ -212,10 +213,10 @@ index 4b2c1aa..ec3991f 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 6a3f169..883ae4b 100644\n+index 61181c2..5694583 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -151,14 +151,12 @@ mod uint_macros;\n+@@ -153,14 +153,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -230,17 +231,8 @@ index 6a3f169..883ae4b 100644\n  \n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n-@@ -208,7 +206,7 @@ pub mod slice;\n- pub mod str;\n- pub mod hash;\n- pub mod fmt;\n--pub mod time;\n-+//pub mod time;\n- \n- pub mod unicode;\n- \n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 5572fe1..c8d8144 100644\n+index 266c691..39feadb 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n @@ -672,8 +672,8 @@ mod copy_impls {\n@@ -255,7 +247,7 @@ index 5572fe1..c8d8144 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 1803ade..f7fb0cb 100644\n+index 27ee955..e45a2c9 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -162,12 +162,10 @@ pub fn forget<T>(t: T) {\n@@ -272,18 +264,18 @@ index 1803ade..f7fb0cb 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 12da045..f02bf78 100644\n+index c6473a2..c513f30 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n-@@ -105,7 +105,6 @@ nonzero_integers! {\n+@@ -112,7 +112,6 @@ nonzero_integers! {\n      NonZeroU16(u16);\n      NonZeroU32(u32);\n      NonZeroU64(u64);\n -    NonZeroU128(u128);\n      NonZeroUsize(usize);\n  }\n  \n-@@ -2285,18 +2284,6 @@ impl i64 {\n+@@ -2087,18 +2086,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -302,7 +294,7 @@ index 12da045..f02bf78 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4732,17 +4719,6 @@ impl u64 {\n+@@ -4339,17 +4326,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -320,7 +312,7 @@ index 12da045..f02bf78 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4826,7 +4802,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4433,7 +4409,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -329,7 +321,7 @@ index 12da045..f02bf78 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4942,30 +4918,25 @@ macro_rules! rev {\n+@@ -4549,30 +4525,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -364,7 +356,7 @@ index 12da045..f02bf78 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4977,21 +4948,21 @@ mod ptr_try_from_impls {\n+@@ -4584,21 +4555,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -394,7 +386,7 @@ index 12da045..f02bf78 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -5000,24 +4971,24 @@ mod ptr_try_from_impls {\n+@@ -4607,24 +4578,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -427,7 +419,7 @@ index 12da045..f02bf78 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -5026,24 +4997,20 @@ mod ptr_try_from_impls {\n+@@ -4633,24 +4604,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -456,7 +448,7 @@ index 12da045..f02bf78 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -5078,7 +5045,7 @@ macro_rules! doit {\n+@@ -4685,7 +4652,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -465,7 +457,7 @@ index 12da045..f02bf78 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -5246,52 +5213,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4853,52 +4820,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -842,7 +834,7 @@ index 3900f36..66b7980 100644\n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index 72b115f..d542e10 100644\n+index 2476c07..2075670 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n @@ -224,8 +224,6 @@ fn test_iterator_step_by_nth_overflow() {\n@@ -943,6 +935,157 @@ index ab96d31..bb5c1d0 100644\n  \n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n+diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n+index 81ae8ad..0e3dd39 100644\n+--- a/src/libcore/time.rs\n++++ b/src/libcore/time.rs\n+@@ -30,7 +30,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n+ const NANOS_PER_MICRO: u32 = 1_000;\n+ const MILLIS_PER_SEC: u64 = 1_000;\n+ const MICROS_PER_SEC: u64 = 1_000_000;\n+-const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n+ \n+ /// A `Duration` type to represent a span of time, typically used for system\n+ /// timeouts.\n+@@ -273,57 +272,6 @@ impl Duration {\n+     #[inline]\n+     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n+ \n+-    /// Returns the total number of whole milliseconds contained by this `Duration`.\n+-    ///\n+-    /// # Examples\n+-    ///\n+-    /// ```\n+-    /// # #![feature(duration_as_u128)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let duration = Duration::new(5, 730023852);\n+-    /// assert_eq!(duration.as_millis(), 5730);\n+-    /// ```\n+-    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[inline]\n+-    pub fn as_millis(&self) -> u128 {\n+-        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n+-    }\n+-\n+-    /// Returns the total number of whole microseconds contained by this `Duration`.\n+-    ///\n+-    /// # Examples\n+-    ///\n+-    /// ```\n+-    /// # #![feature(duration_as_u128)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let duration = Duration::new(5, 730023852);\n+-    /// assert_eq!(duration.as_micros(), 5730023);\n+-    /// ```\n+-    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[inline]\n+-    pub fn as_micros(&self) -> u128 {\n+-        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n+-    }\n+-\n+-    /// Returns the total number of nanoseconds contained by this `Duration`.\n+-    ///\n+-    /// # Examples\n+-    ///\n+-    /// ```\n+-    /// # #![feature(duration_as_u128)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let duration = Duration::new(5, 730023852);\n+-    /// assert_eq!(duration.as_nanos(), 5730023852);\n+-    /// ```\n+-    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+-    #[inline]\n+-    pub fn as_nanos(&self) -> u128 {\n+-        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n+-    }\n+-\n+     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n+     /// if overflow occurred.\n+     ///\n+@@ -482,80 +430,6 @@ impl Duration {\n+         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n+     }\n+ \n+-    /// Creates a new `Duration` from the specified number of seconds.\n+-    ///\n+-    /// # Panics\n+-    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::from_float_secs(2.7);\n+-    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn from_float_secs(secs: f64) -> Duration {\n+-        let nanos =  secs * (NANOS_PER_SEC as f64);\n+-        if !nanos.is_finite() {\n+-            panic!(\"got non-finite value when converting float to duration\");\n+-        }\n+-        if nanos >= MAX_NANOS_F64 {\n+-            panic!(\"overflow when converting float to duration\");\n+-        }\n+-        if nanos < 0.0 {\n+-            panic!(\"underflow when converting float to duration\");\n+-        }\n+-        let nanos =  nanos as u128;\n+-        Duration {\n+-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+-        }\n+-    }\n+-\n+-    /// Multiply `Duration` by `f64`.\n+-    ///\n+-    /// # Panics\n+-    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::new(2, 700_000_000);\n+-    /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n+-    /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn mul_f64(self, rhs: f64) -> Duration {\n+-        Duration::from_float_secs(rhs * self.as_float_secs())\n+-    }\n+-\n+-    /// Divide `Duration` by `f64`.\n+-    ///\n+-    /// # Panics\n+-    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::new(2, 700_000_000);\n+-    /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n+-    /// // note that truncation is used, not rounding\n+-    /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn div_f64(self, rhs: f64) -> Duration {\n+-        Duration::from_float_secs(self.as_float_secs() / rhs)\n+-    }\n+-\n+     /// Divide `Duration` by `Duration` and return `f64`.\n+     ///\n+     /// # Examples\n -- \n 2.17.1 (Apple Git-112)\n "}]}