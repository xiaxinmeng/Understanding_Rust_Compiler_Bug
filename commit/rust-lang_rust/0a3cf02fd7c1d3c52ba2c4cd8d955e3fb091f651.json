{"sha": "0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhM2NmMDJmZDdjMWQzYzUyYmEyYzRjZDhkOTU1ZTNmYjA5MWY2NTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-25T17:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-25T17:42:43Z"}, "message": "Rollup merge of #77120 - ecstatic-morse:keep-stage-std, r=Mark-Simulacrum\n\nAdd `--keep-stage-std` to `x.py` for keeping only standard library artifacts\n\nUnlike `--keep-stage 0`, `--keep-stage-std 0` will allow the stage 0 compiler artifacts (i.e., stage1/bin/rustc) to be rebuilt if it has changed. This allows contributors to iterate on later stages of the compiler in tandem with the standard library without needing to to rebuild the entire compiler. I often run into this when working on const-checking, since I may need to add a feature gate or make a small tweak to the standard library.", "tree": {"sha": "17a93c0d9a52b53fc4458e8f31ca44e63de6deb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a93c0d9a52b53fc4458e8f31ca44e63de6deb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbiwTCRBK7hj4Ov3rIwAAdHIIAHLA46thnRpuL3ez6LCMOLk2\n6jIXiPnPeCWrTfjZ3PmNBiDbsIiVXEpVYD7ravOOxEaA6w+zcZjiL8wEhLgMdm+n\n4k4R7vUIBZq35AaWA/v35xbf7knA8UKs+5XqAd1PClHGsqRWdBgii0a28wLxpLLQ\nFcPzfamNKb8JOS4xdaG96/S9rriYql3iqhmxxZOaQczK4hcEpDcJyD1/HlM5b8+/\njZjDOd/kAnR1Udpq6Zed0lR2skDYnMXM50/Gcek3K9ufkJWFbvCku6DBzDiGq2J8\n2dt0fx6rz6pEm1TBGwvUAfqzuOpqJqKgNolrx7MDvRtncOtTsbITXWc7lerfJVA=\n=DJPl\n-----END PGP SIGNATURE-----\n", "payload": "tree 17a93c0d9a52b53fc4458e8f31ca44e63de6deb7\nparent 8621ef1159d2a3fa30afb3ec65e5f678232f5723\nparent 16769eb19e8051a32a93c1b3fd7847aff5c9eded\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601055763 +0200\ncommitter GitHub <noreply@github.com> 1601055763 +0200\n\nRollup merge of #77120 - ecstatic-morse:keep-stage-std, r=Mark-Simulacrum\n\nAdd `--keep-stage-std` to `x.py` for keeping only standard library artifacts\n\nUnlike `--keep-stage 0`, `--keep-stage-std 0` will allow the stage 0 compiler artifacts (i.e., stage1/bin/rustc) to be rebuilt if it has changed. This allows contributors to iterate on later stages of the compiler in tandem with the standard library without needing to to rebuild the entire compiler. I often run into this when working on const-checking, since I may need to add a feature gate or make a small tweak to the standard library.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "html_url": "https://github.com/rust-lang/rust/commit/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8621ef1159d2a3fa30afb3ec65e5f678232f5723", "url": "https://api.github.com/repos/rust-lang/rust/commits/8621ef1159d2a3fa30afb3ec65e5f678232f5723", "html_url": "https://github.com/rust-lang/rust/commit/8621ef1159d2a3fa30afb3ec65e5f678232f5723"}, {"sha": "16769eb19e8051a32a93c1b3fd7847aff5c9eded", "url": "https://api.github.com/repos/rust-lang/rust/commits/16769eb19e8051a32a93c1b3fd7847aff5c9eded", "html_url": "https://github.com/rust-lang/rust/commit/16769eb19e8051a32a93c1b3fd7847aff5c9eded"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "1510f4d59fa3474c66e31fecc6fd1c182ca3e16d", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "patch": "@@ -15,6 +15,10 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - Make the default stage for x.py configurable [#76625](https://github.com/rust-lang/rust/pull/76625)\n - Add a dedicated debug-logging option [#76588](https://github.com/rust-lang/rust/pull/76588)\n - Add sample defaults for x.py [#76628](https://github.com/rust-lang/rust/pull/76628)\n+- Add `--keep-stage-std`, which behaves like `keep-stage` but allows the stage\n+  0 compiler artifacts (i.e., stage1/bin/rustc) to be rebuilt if changed\n+  [#77120](https://github.com/rust-lang/rust/pull/77120).\n+\n \n ## [Version 0] - 2020-09-11\n "}, {"sha": "40bf6c48296b2eaf98d55ae9a592301b8a8e6bd8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "patch": "@@ -59,7 +59,9 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        if builder.config.keep_stage.contains(&compiler.stage) {\n+        if builder.config.keep_stage.contains(&compiler.stage)\n+            || builder.config.keep_stage_std.contains(&compiler.stage)\n+        {\n             builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n             builder.ensure(StdLink { compiler, target_compiler: compiler, target });\n             return;\n@@ -472,6 +474,7 @@ impl Step for Rustc {\n \n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n+            builder.info(\"Warning: Use `--keep-stage-std` if you want to rebuild the compiler when it changes\");\n             builder.ensure(RustcLink { compiler, target_compiler: compiler, target });\n             return;\n         }"}, {"sha": "53fef7a838df62dc11152491dea44a32ac0d1719", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "patch": "@@ -71,6 +71,7 @@ pub struct Config {\n     pub on_fail: Option<String>,\n     pub stage: u32,\n     pub keep_stage: Vec<u32>,\n+    pub keep_stage_std: Vec<u32>,\n     pub src: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n@@ -539,6 +540,7 @@ impl Config {\n         config.incremental = flags.incremental;\n         config.dry_run = flags.dry_run;\n         config.keep_stage = flags.keep_stage;\n+        config.keep_stage_std = flags.keep_stage_std;\n         config.bindir = \"bin\".into(); // default\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;"}, {"sha": "dad31fc77be17677c8e1e61b9ca1aeea96fe6c1a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0a3cf02fd7c1d3c52ba2c4cd8d955e3fb091f651", "patch": "@@ -19,6 +19,7 @@ pub struct Flags {\n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n     pub keep_stage: Vec<u32>,\n+    pub keep_stage_std: Vec<u32>,\n \n     pub host: Option<Vec<TargetSelection>>,\n     pub target: Option<Vec<TargetSelection>>,\n@@ -144,6 +145,13 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             (pass multiple times to keep e.g., both stages 0 and 1)\",\n             \"N\",\n         );\n+        opts.optmulti(\n+            \"\",\n+            \"keep-stage-std\",\n+            \"stage(s) of the standard library to keep without recompiling \\\n+            (pass multiple times to keep e.g., both stages 0 and 1)\",\n+            \"N\",\n+        );\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         let j_msg = format!(\n             \"number of jobs to run in parallel; \\\n@@ -510,7 +518,9 @@ Arguments:\n                 println!(\"--stage not supported for x.py check, always treated as stage 0\");\n                 process::exit(1);\n             }\n-            if matches.opt_str(\"keep-stage\").is_some() {\n+            if matches.opt_str(\"keep-stage\").is_some()\n+                || matches.opt_str(\"keep-stage-std\").is_some()\n+            {\n                 println!(\"--keep-stage not supported for x.py check, only one stage available\");\n                 process::exit(1);\n             }\n@@ -528,6 +538,11 @@ Arguments:\n                 .into_iter()\n                 .map(|j| j.parse().expect(\"`keep-stage` should be a number\"))\n                 .collect(),\n+            keep_stage_std: matches\n+                .opt_strs(\"keep-stage-std\")\n+                .into_iter()\n+                .map(|j| j.parse().expect(\"`keep-stage-std` should be a number\"))\n+                .collect(),\n             host: if matches.opt_present(\"host\") {\n                 Some(\n                     split(&matches.opt_strs(\"host\"))"}]}