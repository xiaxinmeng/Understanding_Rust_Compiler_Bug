{"sha": "c02371c442f811878ab3a0f5a813402b6dfd45d2", "node_id": "C_kwDOAAsO6NoAKGMwMjM3MWM0NDJmODExODc4YWIzYTBmNWE4MTM0MDJiNmRmZDQ1ZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T20:06:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T20:06:34Z"}, "message": "Auto merge of #88880 - cjgillot:no-krate, r=oli-obk\n\nRework HIR API to make invocations of the hir_crate query harder.\n\n`hir_crate` forces the recomputation of queries that depend on it.\n\nThis PR aims at avoiding useless invocations of `hir_crate` by making dependent code go through `tcx.hir()`.", "tree": {"sha": "e293105dba102078f3039dba3ddc4f82f7c6c6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e293105dba102078f3039dba3ddc4f82f7c6c6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02371c442f811878ab3a0f5a813402b6dfd45d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02371c442f811878ab3a0f5a813402b6dfd45d2", "html_url": "https://github.com/rust-lang/rust/commit/c02371c442f811878ab3a0f5a813402b6dfd45d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02371c442f811878ab3a0f5a813402b6dfd45d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "html_url": "https://github.com/rust-lang/rust/commit/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2"}, {"sha": "77c300285c0528241b2b08823167598739fc0f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c300285c0528241b2b08823167598739fc0f82", "html_url": "https://github.com/rust-lang/rust/commit/77c300285c0528241b2b08823167598739fc0f82"}], "stats": {"total": 402, "additions": 193, "deletions": 209}, "files": [{"sha": "ff8920863b1083441586af0b6ea795a28caddd7e", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -489,7 +489,7 @@ fn print_with_analysis(\n             let mut out = String::new();\n             abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n             debug!(\"pretty printing THIR tree\");\n-            for did in tcx.body_owners() {\n+            for did in tcx.hir().body_owners() {\n                 let _ = writeln!(\n                     out,\n                     \"{:?}:\\n{}\\n\","}, {"sha": "fdd52bd74952f66d94d2e7dd2d74b03e05aa965e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,7 +1,7 @@\n use crate::def::{CtorKind, DefKind, Res};\n use crate::def_id::{DefId, CRATE_DEF_ID};\n crate use crate::hir_id::{HirId, ItemLocalId};\n-use crate::{itemlikevisit, LangItem};\n+use crate::LangItem;\n \n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n@@ -10,7 +10,6 @@ pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -708,52 +707,6 @@ impl Crate<'hir> {\n     }\n }\n \n-impl Crate<'_> {\n-    /// Visits all items in the crate in some deterministic (but\n-    /// unspecified) order. If you just need to process every item,\n-    /// but don't care about nesting, this method is the best choice.\n-    ///\n-    /// If you do care about nesting -- usually because your algorithm\n-    /// follows lexical scoping rules -- then you want a different\n-    /// approach. You should override `visit_nested_item` in your\n-    /// visitor and then call `intravisit::walk_crate` instead.\n-    pub fn visit_all_item_likes<'hir, V>(&'hir self, visitor: &mut V)\n-    where\n-        V: itemlikevisit::ItemLikeVisitor<'hir>,\n-    {\n-        for owner in self.owners.iter().filter_map(Option::as_ref) {\n-            match owner {\n-                OwnerNode::Item(item) => visitor.visit_item(item),\n-                OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n-                OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n-                OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n-                OwnerNode::Crate(_) => {}\n-            }\n-        }\n-    }\n-\n-    /// A parallel version of `visit_all_item_likes`.\n-    pub fn par_visit_all_item_likes<'hir, V>(&'hir self, visitor: &V)\n-    where\n-        V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,\n-    {\n-        par_for_each_in(&self.owners.raw, |owner| match owner {\n-            Some(OwnerNode::Item(item)) => visitor.visit_item(item),\n-            Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n-            Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n-            Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n-            Some(OwnerNode::Crate(_)) | None => {}\n-        })\n-    }\n-\n-    pub fn items<'hir>(&'hir self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {\n-        self.owners.iter().filter_map(|owner| match owner {\n-            Some(OwnerNode::Item(item)) => Some(*item),\n-            _ => None,\n-        })\n-    }\n-}\n-\n /// A block of statements `{ .. }`, which may have a label (in this case the\n /// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n /// the `rules` being anything but `DefaultBlock`."}, {"sha": "9196344cb3ffd0a7082747f95742ace62944cf17", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -51,19 +51,6 @@ pub struct NoAnn;\n impl PpAnn for NoAnn {}\n pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n-impl PpAnn for hir::Crate<'_> {\n-    fn nested(&self, state: &mut State<'_>, nested: Nested) {\n-        match nested {\n-            Nested::Item(id) => state.print_item(self.item(id)),\n-            Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n-            Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n-            Nested::ForeignItem(id) => state.print_foreign_item(self.foreign_item(id)),\n-            Nested::Body(id) => state.print_expr(&self.body(id).value),\n-            Nested::BodyParamPat(id, i) => state.print_pat(&self.body(id).params[i].pat),\n-        }\n-    }\n-}\n-\n /// Identical to the `PpAnn` implementation for `hir::Crate`,\n /// except it avoids creating a dependency on the whole crate.\n impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {"}, {"sha": "d42e2f7a99c8a233dea069c8743b4013ef0391d0", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -74,7 +74,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n             visitor.process_attrs(hir::CRATE_HIR_ID);\n-            tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n+            tcx.hir().visit_all_item_likes(&mut visitor.as_deep_visitor());\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n "}, {"sha": "55286384de359522b3855c3ad7216bbc8a98a7b1", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -137,9 +137,8 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n     }\n \n     tcx.dep_graph.with_ignore(|| {\n-        let krate = tcx.hir().krate();\n         let mut dirty_clean_visitor = DirtyCleanVisitor { tcx, checked_attrs: Default::default() };\n-        krate.visit_all_item_likes(&mut dirty_clean_visitor);\n+        tcx.hir().visit_all_item_likes(&mut dirty_clean_visitor);\n \n         let mut all_attrs = FindAllAttrs { tcx, found_attrs: vec![] };\n         tcx.hir().walk_attributes(&mut all_attrs);"}, {"sha": "25a110e0297f59efd4c351d1097063c379ca1a1a", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -886,9 +886,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         parallel!(\n             {\n                 sess.time(\"match_checking\", || {\n-                    tcx.par_body_owners(|def_id| {\n-                        tcx.ensure().check_match(def_id.to_def_id());\n-                    });\n+                    tcx.hir().par_body_owners(|def_id| tcx.ensure().check_match(def_id.to_def_id()))\n                 });\n             },\n             {\n@@ -907,11 +905,11 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     });\n \n     sess.time(\"MIR_borrow_checking\", || {\n-        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n+        tcx.hir().par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });\n \n     sess.time(\"MIR_effect_checking\", || {\n-        for def_id in tcx.body_owners() {\n+        for def_id in tcx.hir().body_owners() {\n             tcx.ensure().thir_check_unsafety(def_id);\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n                 rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);"}, {"sha": "c0316ce58d26e7ea12e9f93fb864ac83b0760886", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::sym;\n \n fn proc_macro_decls_static(tcx: TyCtxt<'_>, (): ()) -> Option<LocalDefId> {\n     let mut finder = Finder { tcx, decls: None };\n-    tcx.hir().krate().visit_all_item_likes(&mut finder);\n+    tcx.hir().visit_all_item_likes(&mut finder);\n \n     finder.decls.map(|id| tcx.hir().local_def_id(id))\n }"}, {"sha": "4513c8329cab7936505b71626e5295b4536e5f76", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -584,8 +584,14 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, CRATE_DEF_ID, krate.module().inner, \"the\", \"crate\");\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n+        self.check_missing_docs_attrs(\n+            cx,\n+            CRATE_DEF_ID,\n+            cx.tcx.def_span(CRATE_DEF_ID),\n+            \"the\",\n+            \"crate\",\n+        );\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {"}, {"sha": "773e5751f13706f768075eda261ea922224f4ee5", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -430,8 +430,6 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n     let access_levels = &tcx.privacy_access_levels(());\n \n-    let krate = tcx.hir().krate();\n-\n     let context = LateContext {\n         tcx,\n         enclosing_body: None,\n@@ -450,10 +448,10 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        lint_callback!(cx, check_crate, krate);\n+        lint_callback!(cx, check_crate,);\n         tcx.hir().walk_toplevel_module(cx);\n         tcx.hir().walk_attributes(cx);\n-        lint_callback!(cx, check_crate_post, krate);\n+        lint_callback!(cx, check_crate_post,);\n     })\n }\n "}, {"sha": "b1b4229b1f73864d8ffbdfe3c3017e0ab060e13b", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -16,8 +16,8 @@ macro_rules! late_lint_methods {\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n             fn check_name(a: Span, b: Symbol);\n-            fn check_crate(a: &$hir hir::Crate<$hir>);\n-            fn check_crate_post(a: &$hir hir::Crate<$hir>);\n+            fn check_crate();\n+            fn check_crate_post();\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);"}, {"sha": "9eac4c9f69b5c559966220c7757b0933107759bc", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::TyCtxt;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector { modules: Vec::new() };\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    tcx.hir().visit_all_item_likes(&mut collector);\n     collector.modules\n }\n "}, {"sha": "39709e1bd0716916eee7f355ddd56153567f41f1", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -14,7 +14,7 @@ use rustc_target::spec::abi::Abi;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    tcx.hir().visit_all_item_likes(&mut collector);\n     collector.process_command_line();\n     collector.libs\n }"}, {"sha": "3dc1205c4c5cf454973655e40790e800a50cef3e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -440,16 +440,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_items(&mut self) {\n-        let krate = self.tcx.hir().krate();\n-        self.encode_info_for_mod(CRATE_DEF_ID, krate.module());\n+        self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());\n \n         // Proc-macro crates only export proc-macro items, which are looked\n         // up using `proc_macro_data`\n         if self.is_proc_macro {\n             return;\n         }\n \n-        krate.visit_all_item_likes(&mut self.as_deep_visitor());\n+        self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());\n     }\n \n     fn encode_def_path_table(&mut self) {\n@@ -1782,7 +1781,7 @@ impl EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_impls()\");\n         let tcx = self.tcx;\n         let mut visitor = ImplVisitor { tcx, impls: FxHashMap::default() };\n-        tcx.hir().krate().visit_all_item_likes(&mut visitor);\n+        tcx.hir().visit_all_item_likes(&mut visitor);\n \n         let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n "}, {"sha": "e6f56b0be93037a095b413f07e8699c0ddb16d49", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -6,6 +6,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n@@ -156,6 +157,21 @@ impl<'hir> Map<'hir> {\n         self.tcx.hir_crate(())\n     }\n \n+    pub fn root_module(&self) -> &'hir Mod<'hir> {\n+        match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {\n+            Some(OwnerNode::Crate(item)) => item,\n+            _ => bug!(),\n+        }\n+    }\n+\n+    pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {\n+        let krate = self.krate();\n+        krate.owners.iter().filter_map(|owner| match owner.as_ref()? {\n+            OwnerNode::Item(item) => Some(*item),\n+            _ => None,\n+        })\n+    }\n+\n     pub fn def_key(&self, def_id: LocalDefId) -> DefKey {\n         // Accessing the DefKey is ok, since it is part of DefPathHash.\n         self.tcx.untracked_resolutions.definitions.def_key(def_id)\n@@ -475,6 +491,17 @@ impl<'hir> Map<'hir> {\n         Some(ccx)\n     }\n \n+    /// Returns an iterator of the `DefId`s for all body-owners in this\n+    /// crate. If you would prefer to iterate over the bodies\n+    /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n+    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {\n+        self.krate().bodies.keys().map(move |&body_id| self.body_owner_def_id(body_id))\n+    }\n+\n+    pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n+        par_for_each_in(&self.krate().bodies, |(&body_id, _)| f(self.body_owner_def_id(body_id)));\n+    }\n+\n     pub fn ty_param_owner(&self, id: HirId) -> HirId {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => id,\n@@ -531,6 +558,45 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Visits all items in the crate in some deterministic (but\n+    /// unspecified) order. If you just need to process every item,\n+    /// but don't care about nesting, this method is the best choice.\n+    ///\n+    /// If you do care about nesting -- usually because your algorithm\n+    /// follows lexical scoping rules -- then you want a different\n+    /// approach. You should override `visit_nested_item` in your\n+    /// visitor and then call `intravisit::walk_crate` instead.\n+    pub fn visit_all_item_likes<V>(&self, visitor: &mut V)\n+    where\n+        V: itemlikevisit::ItemLikeVisitor<'hir>,\n+    {\n+        let krate = self.krate();\n+        for owner in krate.owners.iter().filter_map(Option::as_ref) {\n+            match owner {\n+                OwnerNode::Item(item) => visitor.visit_item(item),\n+                OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n+                OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n+                OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n+                OwnerNode::Crate(_) => {}\n+            }\n+        }\n+    }\n+\n+    /// A parallel version of `visit_all_item_likes`.\n+    pub fn par_visit_all_item_likes<V>(&self, visitor: &V)\n+    where\n+        V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,\n+    {\n+        let krate = self.krate();\n+        par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref() {\n+            Some(OwnerNode::Item(item)) => visitor.visit_item(item),\n+            Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n+            Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n+            Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n+            Some(OwnerNode::Crate(_)) | None => {}\n+        })\n+    }\n+\n     pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)\n     where\n         V: ItemLikeVisitor<'hir>,"}, {"sha": "7a6012409db9b7973793b496861f0049bdc4f7e6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -29,10 +29,8 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::Discr;\n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -1696,18 +1694,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.typeck(self.hir().body_owner_def_id(body))\n     }\n \n-    /// Returns an iterator of the `DefId`s for all body-owners in this\n-    /// crate. If you would prefer to iterate over the bodies\n-    /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n-    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n-        self.hir().krate().bodies.keys().map(move |&body_id| self.hir().body_owner_def_id(body_id))\n-    }\n-\n-    pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n-        par_iter(&self.hir().krate().bodies)\n-            .for_each(|(&body_id, _)| f(self.hir().body_owner_def_id(body_id)));\n-    }\n-\n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {\n         self.associated_items(id)\n             .in_definition_order()"}, {"sha": "a2211f4c3b2b4ba4969a124270e939b1e4ef3a0f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -2340,7 +2340,7 @@ define_print_and_forward_display! {\n fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, Namespace, DefId)) {\n     // Iterate all local crate items no matter where they are defined.\n     let hir = tcx.hir();\n-    for item in hir.krate().items() {\n+    for item in hir.items() {\n         if item.ident.name.as_str().is_empty() || matches!(item.kind, ItemKind::Use(_, _)) {\n             continue;\n         }"}, {"sha": "b1b31e0784cfe25a7bda8b84b086750a8b84890e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -133,7 +133,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     let mut set = FxHashSet::default();\n \n     // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners());\n+    set.extend(tcx.hir().body_owners());\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n@@ -160,9 +160,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n             NestedVisitorMap::None\n         }\n     }\n-    tcx.hir()\n-        .krate()\n-        .visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n+    tcx.hir().visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set }.as_deep_visitor());\n \n     set\n }"}, {"sha": "f06426308a2287d58e263066f3f046a6452b732b", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -330,7 +330,7 @@ fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<\n \n         let mut visitor = RootCollector { tcx, mode, entry_fn, output: &mut roots };\n \n-        tcx.hir().krate().visit_all_item_likes(&mut visitor);\n+        tcx.hir().visit_all_item_likes(&mut visitor);\n \n         visitor.push_extra_entry_roots();\n     }"}, {"sha": "d05961b7e3741e065afe59d86d7b1d19c7c947f9", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -510,15 +510,14 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n //   or\n //   2) We are not sure to be live or not\n //     * Implementations of traits and trait methods\n-struct LifeSeeder<'k, 'tcx> {\n+struct LifeSeeder<'tcx> {\n     worklist: Vec<LocalDefId>,\n-    krate: &'k hir::Crate<'k>,\n     tcx: TyCtxt<'tcx>,\n     // see `MarkSymbolVisitor::struct_constructors`\n     struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n }\n \n-impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let allow_dead_code = has_allow_dead_code_or_lang_attr(self.tcx, item.hir_id());\n         if allow_dead_code {\n@@ -545,7 +544,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     self.worklist.push(item.def_id);\n                 }\n                 for impl_item_ref in items {\n-                    let impl_item = self.krate.impl_item(impl_item_ref.id);\n+                    let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                     if of_trait.is_some()\n                         || has_allow_dead_code_or_lang_attr(self.tcx, impl_item.hir_id())\n                     {\n@@ -589,7 +588,6 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n fn create_and_seed_worklist<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-    krate: &hir::Crate<'_>,\n ) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n     let worklist = access_levels\n         .map\n@@ -604,19 +602,17 @@ fn create_and_seed_worklist<'tcx>(\n         .collect::<Vec<_>>();\n \n     // Seed implemented trait items\n-    let mut life_seeder =\n-        LifeSeeder { worklist, krate, tcx, struct_constructors: Default::default() };\n-    krate.visit_all_item_likes(&mut life_seeder);\n+    let mut life_seeder = LifeSeeder { worklist, tcx, struct_constructors: Default::default() };\n+    tcx.hir().visit_all_item_likes(&mut life_seeder);\n \n     (life_seeder.worklist, life_seeder.struct_constructors)\n }\n \n fn find_live<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-    krate: &hir::Crate<'_>,\n ) -> FxHashSet<LocalDefId> {\n-    let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels, krate);\n+    let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n         tcx,\n@@ -834,8 +830,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(());\n-    let krate = tcx.hir().krate();\n-    let live_symbols = find_live(tcx, access_levels, krate);\n+    let live_symbols = find_live(tcx, access_levels);\n     let mut visitor = DeadVisitor { tcx, live_symbols };\n     tcx.hir().walk_toplevel_module(&mut visitor);\n }"}, {"sha": "d35a1cc293ecf75c10d05f7ed30121b2351f0b0c", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -105,7 +105,7 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n     // Collect diagnostic items in this crate.\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    tcx.hir().visit_all_item_likes(&mut collector);\n \n     collector.items\n }"}, {"sha": "63f9b3ed6b15c6c7b5828ab8e41da567621b94bc", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n@@ -68,7 +68,7 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n         non_main_fns: Vec::new(),\n     };\n \n-    tcx.hir().krate().visit_all_item_likes(&mut ctxt);\n+    tcx.hir().visit_all_item_likes(&mut ctxt);\n \n     configure_main(tcx, &ctxt)\n }\n@@ -183,7 +183,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n-    let sp = tcx.hir().krate().module().inner;\n+    let sp = tcx.def_span(CRATE_DEF_ID);\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n         // the missing `fn main()` then as it might have been hidden inside an unclosed block."}, {"sha": "c14f4460a31360dc745505c7aafc515982540ac0", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -262,7 +262,7 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     }\n \n     // Collect lang items in this crate.\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n+    tcx.hir().visit_all_item_likes(&mut collector);\n \n     // Extract out the found lang items.\n     let LanguageItemCollector { mut items, .. } = collector;"}, {"sha": "558d8958b13588bbf7b48783d9c02cf41ab768bc", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -12,7 +12,7 @@ use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n-        tcx.hir().krate().visit_all_item_likes(&mut LayoutTest { tcx });\n+        tcx.hir().visit_all_item_likes(&mut LayoutTest { tcx });\n     }\n }\n "}, {"sha": "bd1e9520ee9fe40cac3f6bae237469b21cb262df", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -427,7 +427,7 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n             access_levels,\n             worklist: &mut reachable_context.worklist,\n         };\n-        tcx.hir().krate().visit_all_item_likes(&mut collect_private_impl_items);\n+        tcx.hir().visit_all_item_likes(&mut collect_private_impl_items);\n     }\n \n     // Step 2: Mark all symbols that the symbols on the worklist touch."}, {"sha": "8c9f04bef13769ac3cc65aa9da5a49283cd4d2af", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -906,11 +906,10 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(());\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n-        let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n-        krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n+        tcx.hir().visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;"}, {"sha": "bb5be90cd404b3e30dab1318cbb048e70e323715", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -33,7 +33,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n \n     {\n         let mut cx = Context { tcx, items };\n-        tcx.hir().krate().visit_all_item_likes(&mut cx.as_deep_visitor());\n+        tcx.hir().visit_all_item_likes(&mut cx.as_deep_visitor());\n     }\n     verify(tcx, items);\n }"}, {"sha": "719d4134ab8f1f9d69bd98be5d4972de4cff4efe", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -2189,8 +2189,6 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n     let access_levels = tcx.privacy_access_levels(());\n \n-    let krate = tcx.hir().krate();\n-\n     let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n         tcx,\n         access_levels: &access_levels,\n@@ -2230,5 +2228,5 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n             .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))\n             .collect(),\n     };\n-    krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n+    tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }"}, {"sha": "c47d8b934cf2a452a29994e71a20e14bb06df53e", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -18,7 +18,7 @@ use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir_pretty::{bounds_to_string, fn_to_string, generic_params_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n@@ -128,7 +128,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.save_ctxt.lookup_def_id(ref_id)\n     }\n \n-    pub fn dump_crate_info(&mut self, name: &str, krate: &hir::Crate<'_>) {\n+    pub fn dump_crate_info(&mut self, name: &str) {\n         let source_file = self.tcx.sess.local_crate_source_file.as_ref();\n         let crate_root = source_file.map(|source_file| {\n             let source_file = Path::new(source_file);\n@@ -146,7 +146,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             },\n             crate_root: crate_root.unwrap_or_else(|| \"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),\n-            span: self.span_from_span(krate.module().inner),\n+            span: self.span_from_span(self.tcx.def_span(CRATE_DEF_ID)),\n         };\n \n         self.dumper.crate_prelude(data);\n@@ -1090,13 +1090,13 @@ impl<'tcx> DumpVisitor<'tcx> {\n         }\n     }\n \n-    pub(crate) fn process_crate(&mut self, krate: &'tcx hir::Crate<'tcx>) {\n+    pub(crate) fn process_crate(&mut self) {\n         let id = hir::CRATE_HIR_ID;\n         let qualname =\n             format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id(id).to_def_id()));\n \n         let sm = self.tcx.sess.source_map();\n-        let krate_mod = krate.module();\n+        let krate_mod = self.tcx.hir().root_module();\n         let filename = sm.span_to_filename(krate_mod.inner);\n         let data_id = id_from_hir_id(id, &self.save_ctxt);\n         let children ="}, {"sha": "d69d7daa55517fbfb8dce2e2366b4e64e56006a0", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1003,9 +1003,9 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n \n             let mut visitor = DumpVisitor::new(save_ctxt);\n \n-            visitor.dump_crate_info(cratename, tcx.hir().krate());\n+            visitor.dump_crate_info(cratename);\n             visitor.dump_compilation_options(input, cratename);\n-            visitor.process_crate(tcx.hir().krate());\n+            visitor.process_crate();\n \n             handler.save(&visitor.save_ctxt, &visitor.analysis())\n         })"}, {"sha": "f7d68b5cc70611a1121cb016d256584fa3b87127", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -23,7 +23,7 @@ pub fn report_symbol_names(tcx: TyCtxt<'_>) {\n \n     tcx.dep_graph.with_ignore(|| {\n         let mut visitor = SymbolNamesTest { tcx };\n-        tcx.hir().krate().visit_all_item_likes(&mut visitor);\n+        tcx.hir().visit_all_item_likes(&mut visitor);\n     })\n }\n "}, {"sha": "47da8e9572b7cfd298f22c64f6406a6db336c7f7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -31,7 +31,7 @@ use std::ops::ControlFlow;\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     let visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-    tcx.hir().krate().par_visit_all_item_likes(&visit);\n+    tcx.hir().par_visit_all_item_likes(&visit);\n }\n \n pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {"}, {"sha": "0071fd2c494c0bea4648a4d2c34b63e0ae95a2c0", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1646,7 +1646,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n         fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n     }\n \n-    tcx.hir().krate().visit_all_item_likes(&mut Visitor { traits: &mut traits });\n+    tcx.hir().visit_all_item_likes(&mut Visitor { traits: &mut traits });\n \n     // Cross-crate:\n "}, {"sha": "8a55f7ebf87bfb5b5ae595b7ad361134f6639926", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -921,9 +921,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n }\n \n fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n-    tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.ensure().typeck(body_owner_def_id);\n-    });\n+    tcx.hir().par_body_owners(|body_owner_def_id| tcx.ensure().typeck(body_owner_def_id));\n }\n \n fn fatally_break_rust(sess: &Session) {"}, {"sha": "7b5d782b0cb60f4f29cd12e36f1e8afcaf075f2b", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -9,14 +9,14 @@ use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = FxHashSet::default();\n-    for item_def_id in tcx.body_owners() {\n+    for item_def_id in tcx.hir().body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());\n     }\n \n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n-    tcx.hir().krate().visit_all_item_likes(&mut visitor);\n+    tcx.hir().visit_all_item_likes(&mut visitor);\n \n     unused_crates_lint(tcx);\n }\n@@ -111,7 +111,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n \n     // Collect all the extern crates (in a reliable order).\n     let mut crates_to_lint = vec![];\n-    tcx.hir().krate().visit_all_item_likes(&mut CollectExternCrateVisitor {\n+    tcx.hir().visit_all_item_likes(&mut CollectExternCrateVisitor {\n         crates_to_lint: &mut crates_to_lint,\n     });\n "}, {"sha": "0b6d0a539b53bb3fa24f7c64ccd639b8b33d567a", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -17,9 +17,8 @@ use rustc_span::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n pub fn crate_inherent_impls(tcx: TyCtxt<'_>, (): ()) -> CrateInherentImpls {\n-    let krate = tcx.hir().krate();\n     let mut collect = InherentCollect { tcx, impls_map: Default::default() };\n-    krate.visit_all_item_likes(&mut collect);\n+    tcx.hir().visit_all_item_likes(&mut collect);\n     collect.impls_map\n }\n "}, {"sha": "11ffd61cb2ebda16b6919c045cb7ec390446227b", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -10,8 +10,7 @@ use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n \n pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, (): ()) {\n-    let krate = tcx.hir().krate();\n-    krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });\n+    tcx.hir().visit_all_item_likes(&mut InherentOverlapChecker { tcx });\n }\n \n struct InherentOverlapChecker<'tcx> {"}, {"sha": "0326d1fd74f62c0548718e1a5033b28d3d5f3652", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -10,7 +10,7 @@ use rustc_trait_selection::traits;\n \n pub fn check(tcx: TyCtxt<'_>) {\n     let mut orphan = OrphanChecker { tcx };\n-    tcx.hir().krate().visit_all_item_likes(&mut orphan);\n+    tcx.hir().visit_all_item_likes(&mut orphan);\n }\n \n struct OrphanChecker<'tcx> {"}, {"sha": "e7b03fa3ac68a9d83e05ccf15e8c84b70a34100f", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::TyCtxt;\n \n pub fn check(tcx: TyCtxt<'_>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n-    tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n+    tcx.hir().visit_all_item_likes(&mut unsafety);\n }\n \n struct UnsafetyChecker<'tcx> {"}, {"sha": "86d712e2d792258ec4372bc14f6610b9266c29ad", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -37,7 +37,7 @@ pub fn infer_predicates<'tcx>(\n         };\n \n         // Visit all the crates and infer predicates\n-        tcx.hir().krate().visit_all_item_likes(&mut visitor);\n+        tcx.hir().visit_all_item_likes(&mut visitor);\n     }\n \n     global_inferred_outlives"}, {"sha": "ec4fa9cd4b577e64c6444e5a53839ddcbae506b0", "filename": "compiler/rustc_typeck/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n-    tcx.hir().krate().visit_all_item_likes(&mut OutlivesTest { tcx });\n+    tcx.hir().visit_all_item_likes(&mut OutlivesTest { tcx });\n }\n \n struct OutlivesTest<'tcx> {"}, {"sha": "708c0cf4a64008954bed34a143e9dcf88723f170", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -62,7 +62,7 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n         constraints: Vec::new(),\n     };\n \n-    tcx.hir().krate().visit_all_item_likes(&mut constraint_cx);\n+    tcx.hir().visit_all_item_likes(&mut constraint_cx);\n \n     constraint_cx\n }"}, {"sha": "d7f9df668bf36d08c3b24775bbaac2a51fd7f6eb", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -79,7 +79,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     //\n     // - https://rustc-dev-guide.rust-lang.org/query.html\n     // - https://rustc-dev-guide.rust-lang.org/variance.html\n-    tcx.hir().krate().visit_all_item_likes(&mut terms_cx);\n+    tcx.hir().visit_all_item_likes(&mut terms_cx);\n \n     terms_cx\n }"}, {"sha": "7be3c68e8f617c5228154afcbab96fe04db80627", "filename": "compiler/rustc_typeck/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n pub fn test_variance(tcx: TyCtxt<'_>) {\n-    tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n+    tcx.hir().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n \n struct VarianceTest<'tcx> {"}, {"sha": "0e78fe7aec357f001ff0900d79ef75c3df4c3268", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -230,8 +230,7 @@ impl ExternalCrate {\n         };\n         if root.is_local() {\n             tcx.hir()\n-                .krate()\n-                .module()\n+                .root_module()\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {\n@@ -297,8 +296,7 @@ impl ExternalCrate {\n \n         if root.is_local() {\n             tcx.hir()\n-                .krate()\n-                .module()\n+                .root_module()\n                 .item_ids\n                 .iter()\n                 .filter_map(|&id| {"}, {"sha": "2a05787e40cf98abb6fb7917a1fffbad22436a85", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -26,8 +26,7 @@ mod tests;\n crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n-    let krate = cx.tcx.hir().krate();\n-    let module = crate::visit_ast::RustdocVisitor::new(cx).visit(krate);\n+    let module = crate::visit_ast::RustdocVisitor::new(cx).visit();\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates(()).iter() {"}, {"sha": "4f5495a176dfc0e9598cab47f566267ca7f1e5de", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -71,12 +71,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.exact_paths.entry(did).or_insert_with(|| def_id_to_path(tcx, did));\n     }\n \n-    crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n-        let span = krate.module().inner;\n+    crate fn visit(mut self) -> Module<'tcx> {\n+        let span = self.cx.tcx.def_span(CRATE_DEF_ID);\n         let mut top_level_module = self.visit_mod_contents(\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n-            &krate.module(),\n+            self.cx.tcx.hir().root_module(),\n             self.cx.tcx.crate_name(LOCAL_CRATE),\n         );\n "}, {"sha": "a288b90d7924e96de619596b1eede797573fb423", "filename": "src/test/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -48,7 +48,6 @@ fn main() {\n pub struct CompilerCalls;\n \n impl rustc_driver::Callbacks for CompilerCalls {\n-\n     // In this callback we override the mir_borrowck query.\n     fn config(&mut self, config: &mut Config) {\n         assert!(config.override_queries.is_none());\n@@ -64,12 +63,10 @@ impl rustc_driver::Callbacks for CompilerCalls {\n     ) -> Compilation {\n         compiler.session().abort_if_errors();\n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n-\n             // Collect definition ids of MIR bodies.\n             let hir = tcx.hir();\n-            let krate = hir.krate();\n             let mut visitor = HirVisitor { bodies: Vec::new() };\n-            krate.visit_all_item_likes(&mut visitor);\n+            hir.visit_all_item_likes(&mut visitor);\n \n             // Trigger borrow checking of all bodies.\n             for def_id in visitor.bodies {"}, {"sha": "e726f8402ef9d0edc8b39d59587efbd5e7b59dfb", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -13,6 +13,7 @@ extern crate rustc_ast;\n use rustc_ast::attr;\n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::symbol::Symbol;\n \n macro_rules! fake_lint_pass {\n@@ -26,13 +27,14 @@ macro_rules! fake_lint_pass {\n         }\n \n         impl LateLintPass<'_> for $struct {\n-            fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n+            fn check_crate(&mut self, cx: &LateContext) {\n                 let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+                let span = cx.tcx.def_span(CRATE_DEF_ID);\n                 $(\n                     if !cx.sess().contains_name(attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(krate.module().inner).emit()\n+                             lint.build(&msg).set_span(span).emit()\n                         });\n                     }\n                 )*"}, {"sha": "4bbed5029802dbe9e43ea35cb3fd0faf148e0361", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -8,13 +8,13 @@ extern crate rustc_hir;\n extern crate rustc_lint;\n #[macro_use]\n extern crate rustc_session;\n-extern crate rustc_span;\n extern crate rustc_ast;\n+extern crate rustc_span;\n \n use rustc_driver::plugin::Registry;\n-use rustc_lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::symbol::Symbol;\n-use rustc_ast::attr;\n \n declare_lint! {\n     CRATE_NOT_OKAY,\n@@ -25,13 +25,12 @@ declare_lint! {\n declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);\n \n impl<'tcx> LateLintPass<'tcx> for Pass {\n-    fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext) {\n         let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+        let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\")\n-                    .set_span(krate.module().inner)\n-                    .emit()\n+                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit()\n             });\n         }\n     }"}, {"sha": "882f314655d8377092265a0880836e1b97bc67f3", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -23,7 +23,13 @@ LL | pub fn foo() {}\n \n error: requires `sized` lang_item\n \n-error: aborting due to 3 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0432, E0603.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "42ce456d962a1562bf81db8b1762099e74059a95", "filename": "src/test/ui/privacy/privacy3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy3.stderr?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -6,6 +6,12 @@ LL |     use bar::gpriv;\n \n error: requires `sized` lang_item\n \n-error: aborting due to 2 previous errors\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}, {"sha": "ff619c59b6e2412da3d5ef45ddacb137848bebe6", "filename": "src/tools/clippy/clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,7 +1,7 @@\n //! lint on missing cargo common metadata\n \n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::DUMMY_SP;\n@@ -77,7 +77,7 @@ fn is_empty_vec(value: &[String]) -> bool {\n }\n \n impl LateLintPass<'_> for CargoCommonMetadata {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n             return;\n         }"}, {"sha": "22d726cdcb7b6cda63ecf67592aaec7afef19e22", "filename": "src/tools/clippy/clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::fn_def_id;\n \n-use rustc_hir::{def::Res, def_id::DefIdMap, Crate, Expr};\n+use rustc_hir::{def::Res, def_id::DefIdMap, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -70,7 +70,7 @@ impl DisallowedMethod {\n impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for conf in &self.conf_disallowed {\n             let (path, reason) = match conf {\n                 conf::DisallowedMethod::Simple(path) => (path, None),"}, {"sha": "87124f093a86dbf7c327581296397e5d0e58a55d", "filename": "src/tools/clippy/clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::{\n-    def::Res, def_id::DefId, Crate, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n+    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -75,7 +75,7 @@ impl DisallowedType {\n impl_lint_pass!(DisallowedType => [DISALLOWED_TYPE]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for path in &self.disallowed {\n             let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n             match clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>()) {"}, {"sha": "84f3b76a3c7d5f88d8fde224691507fdcc606cc8", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -212,7 +212,7 @@ impl_lint_pass!(DocMarkdown =>\n );\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n         check_attrs(cx, &self.valid_idents, attrs);\n     }"}, {"sha": "f534327f7a0cda0bccafcbdca12c0205e5625956", "filename": "src/tools/clippy/clippy_lints/src/feature_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffeature_name.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -110,7 +110,7 @@ fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n }\n \n impl LateLintPass<'_> for FeatureName {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, REDUNDANT_FEATURE_NAMES, CRATE_HIR_ID)\n             && is_lint_allowed(cx, NEGATIVE_FEATURE_NAMES, CRATE_HIR_ID)\n         {"}, {"sha": "0d23bec27a3a753e7789ecde2e20db8f068a13d9", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::{in_macro, is_lint_allowed};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{def_id::LocalDefId, Crate, Item, ItemKind, Node};\n+use rustc_hir::{def_id::LocalDefId, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -44,7 +44,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n-    fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         // Map from a type to it's first impl block. Needed to distinguish generic arguments.\n         // e.g. `Foo<Bar>` and `Foo<Baz>`\n         let mut type_map = FxHashMap::default();"}, {"sha": "c38162743a3ea654311f802ccd62ab9b48ed8159", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n     #[allow(clippy::too_many_lines)]\n-    fn check_crate_post(&mut self, cx: &LateContext<'_>, _krate: &hir::Crate<'_>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];\n         for (import, span) in &self.imports {"}, {"sha": "23b3ba2296eaf1dedd01840553c754c9fe554c03", "filename": "src/tools/clippy/clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet;\n use clippy_utils::{is_entrypoint_fn, is_no_std_crate};\n use if_chain::if_chain;\n-use rustc_hir::{Crate, Expr, ExprKind, QPath};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -33,7 +33,7 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_> for MainRecursion {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         self.has_no_std_attr = is_no_std_crate(cx);\n     }\n "}, {"sha": "564f021268cc8c02eb9da57bf233e922ea6a137a", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -12,6 +12,7 @@ use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -78,9 +79,7 @@ impl MissingDoc {\n             return;\n         }\n \n-        let has_doc = attrs\n-            .iter()\n-            .any(|a| a.doc_str().is_some());\n+        let has_doc = attrs.iter().any(|a| a.doc_str().is_some());\n         if !has_doc {\n             span_lint(\n                 cx,\n@@ -104,9 +103,9 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, krate.module().inner, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "448bfc2fdd67c98f33fe60ca83399dfa35b79505", "filename": "src/tools/clippy/clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet_opt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::{def::Res, def_id::DefId, Crate, Item, ItemKind, UseKind};\n+use rustc_hir::{def::Res, def_id::DefId, Item, ItemKind, UseKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n@@ -55,7 +55,7 @@ impl ImportRename {\n impl_lint_pass!(ImportRename => [MISSING_ENFORCED_IMPORT_RENAMES]);\n \n impl LateLintPass<'_> for ImportRename {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         for Rename { path, rename } in &self.conf_renames {\n             if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &path.split(\"::\").collect::<Vec<_>>()) {\n                 self.renames.insert(id, Symbol::intern(rename));"}, {"sha": "816b2f275fb5e17fb7a701d8867b7bb1f6ab2f32", "filename": "src/tools/clippy/clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_lint_allowed;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -41,7 +41,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n impl LateLintPass<'_> for MultipleCrateVersions {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n             return;\n         }"}, {"sha": "737ff634e449c4ff4406667e8f4d9e2afd4a6262", "filename": "src/tools/clippy/clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Crate, Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n+use rustc_hir::{Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::AssocKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -46,10 +46,10 @@ struct ExistingName {\n }\n \n impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n-    fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'tcx>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n-        for item in krate.items() {\n+        for item in cx.tcx.hir().items() {\n             if let ItemKind::Impl(Impl {\n                 items,\n                 of_trait,"}, {"sha": "d0c98b6bd798a5a368ef7b1fcb2427bf044c44f5", "filename": "src/tools/clippy/clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n@@ -28,7 +28,7 @@ declare_clippy_lint! {\n declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n impl LateLintPass<'_> for WildcardDependencies {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if is_lint_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n             return;\n         }"}]}