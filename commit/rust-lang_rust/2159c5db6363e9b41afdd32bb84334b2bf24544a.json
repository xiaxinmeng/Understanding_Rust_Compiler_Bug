{"sha": "2159c5db6363e9b41afdd32bb84334b2bf24544a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTljNWRiNjM2M2U5YjQxYWZkZDMyYmI4NDMzNGIyYmYyNDU0NGE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:22Z"}, "message": "Rollup merge of #88582 - jhpratt:int_roundings, r=joshtriplett\n\nImplement #88581\n\nSee #88581 for details. This API was discussed on Zulip.\n\n`@rustbot` label: +T-libs-api +S-waiting-on-review\n\nr? `@joshtriplett`", "tree": {"sha": "f7dee779ed39130f7719d15883ba014823093e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7dee779ed39130f7719d15883ba014823093e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2159c5db6363e9b41afdd32bb84334b2bf24544a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV+CRBK7hj4Ov3rIwAANYAIABaohbgPZZEkyZOq/xkmJACx\nnqeoSdAccHepM90Mjim6Um0AE2X4tqdMwX0AEktrUxPy5EPIA2d6QyHo4Xt5/uz1\nuWhqDH0mdHmoCptfj3xSWb/GWMnqQi37yU5uGNucBXYe6wLc/hXTNzSsFQ9LFy0q\n59NOBX77LYzxIfXGAIgVnidD28k40A+3pcOgs6LtmhSZyx9DRk7ETXKXW618WRQZ\nQCudH//AwEOqwM8JkD5cdXHApeeVAx7kmbC/m6eHIfgi00hJWo06DnEB0KYJfuFY\n6TWD6dDrptIvqlmBbkHUkOlY50hhxFGogypawZm6EsqT2W1JSMx08sDmE8bHUdE=\n=nI2b\n-----END PGP SIGNATURE-----\n", "payload": "tree f7dee779ed39130f7719d15883ba014823093e97\nparent 73162aabc7627b904ec5d79e7cb37268df57c0b5\nparent 727a4fc7e3f836938dfeb4a2ab237cfca612222d\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602622 +0200\ncommitter GitHub <noreply@github.com> 1630602622 +0200\n\nRollup merge of #88582 - jhpratt:int_roundings, r=joshtriplett\n\nImplement #88581\n\nSee #88581 for details. This API was discussed on Zulip.\n\n`@rustbot` label: +T-libs-api +S-waiting-on-review\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2159c5db6363e9b41afdd32bb84334b2bf24544a", "html_url": "https://github.com/rust-lang/rust/commit/2159c5db6363e9b41afdd32bb84334b2bf24544a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2159c5db6363e9b41afdd32bb84334b2bf24544a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73162aabc7627b904ec5d79e7cb37268df57c0b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/73162aabc7627b904ec5d79e7cb37268df57c0b5", "html_url": "https://github.com/rust-lang/rust/commit/73162aabc7627b904ec5d79e7cb37268df57c0b5"}, {"sha": "727a4fc7e3f836938dfeb4a2ab237cfca612222d", "url": "https://api.github.com/repos/rust-lang/rust/commits/727a4fc7e3f836938dfeb4a2ab237cfca612222d", "html_url": "https://github.com/rust-lang/rust/commit/727a4fc7e3f836938dfeb4a2ab237cfca612222d"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "780d6c34c919732640dc0da9004f85eae97dc4d6", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=2159c5db6363e9b41afdd32bb84334b2bf24544a", "patch": "@@ -1834,6 +1834,173 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0 or the division results in overflow.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n+        /// let b = 3;\n+        ///\n+        /// assert_eq!(a.div_floor(b), 2);\n+        /// assert_eq!(a.div_floor(-b), -3);\n+        /// assert_eq!((-a).div_floor(b), -3);\n+        /// assert_eq!((-a).div_floor(-b), 2);\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n+            let d = self / rhs;\n+            let r = self % rhs;\n+            if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n+                d - 1\n+            } else {\n+                d\n+            }\n+        }\n+\n+        /// Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0 or the division results in overflow.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n+        /// let b = 3;\n+        ///\n+        /// assert_eq!(a.div_ceil(b), 3);\n+        /// assert_eq!(a.div_ceil(-b), -2);\n+        /// assert_eq!((-a).div_ceil(b), -2);\n+        /// assert_eq!((-a).div_ceil(-b), 3);\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n+            let d = self / rhs;\n+            let r = self % rhs;\n+            if (r > 0 && rhs > 0) || (r < 0 && rhs < 0) {\n+                d + 1\n+            } else {\n+                d\n+            }\n+        }\n+\n+        /// If `rhs` is positive, calculates the smallest value greater than or\n+        /// equal to `self` that is a multiple of `rhs`. If `rhs` is negative,\n+        /// calculates the largest value less than or equal to `self` that is a\n+        /// multiple of `rhs`.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0 or the operation results in overflow.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(-8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(-8), -24);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+            // This would otherwise fail when calculating `r` when self == T::MIN.\n+            if rhs == -1 {\n+                return self;\n+            }\n+\n+            let r = self % rhs;\n+            let m = if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n+                r + rhs\n+            } else {\n+                r\n+            };\n+\n+            if m == 0 {\n+                self\n+            } else {\n+                self + (rhs - m)\n+            }\n+        }\n+\n+        /// If `rhs` is positive, calculates the smallest value greater than or\n+        /// equal to `self` that is a multiple of `rhs`. If `rhs` is negative,\n+        /// calculates the largest value less than or equal to `self` that is a\n+        /// multiple of `rhs`. Returns `None` if `rhs` is zero or the operation\n+        /// would result in overflow.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".checked_next_multiple_of(8), Some(16));\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".checked_next_multiple_of(8), Some(24));\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".checked_next_multiple_of(-8), Some(16));\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".checked_next_multiple_of(-8), Some(16));\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").checked_next_multiple_of(8), Some(-16));\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").checked_next_multiple_of(8), Some(-16));\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").checked_next_multiple_of(-8), Some(-16));\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").checked_next_multiple_of(-8), Some(-24));\")]\n+        #[doc = concat!(\"assert_eq!(1_\", stringify!($SelfT), \".checked_next_multiple_of(0), None);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.checked_next_multiple_of(2), None);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn checked_next_multiple_of(self, rhs: Self) -> Option<Self> {\n+            // This would otherwise fail when calculating `r` when self == T::MIN.\n+            if rhs == -1 {\n+                return Some(self);\n+            }\n+\n+            let r = try_opt!(self.checked_rem(rhs));\n+            let m = if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n+                try_opt!(r.checked_add(rhs))\n+            } else {\n+                r\n+            };\n+\n+            if m == 0 {\n+                Some(self)\n+            } else {\n+                self.checked_add(try_opt!(rhs.checked_sub(m)))\n+            }\n+        }\n+\n         /// Returns the logarithm of the number with respect to an arbitrary base.\n         ///\n         /// This method might not be optimized owing to implementation details;"}, {"sha": "02a5ed4ca800e124de5d6791164285fc48984247", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=2159c5db6363e9b41afdd32bb84334b2bf24544a", "patch": "@@ -1848,6 +1848,110 @@ macro_rules! uint_impl {\n             self % rhs\n         }\n \n+        /// Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity.\n+        ///\n+        /// This is the same as performing `self / rhs` for all unsigned integers.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_floor(4), 1);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[inline(always)]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n+            self / rhs\n+        }\n+\n+        /// Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_ceil(4), 2);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n+            let d = self / rhs;\n+            let r = self % rhs;\n+            if r > 0 && rhs > 0 {\n+                d + 1\n+            } else {\n+                d\n+            }\n+        }\n+\n+        /// Calculates the smallest value greater than or equal to `self` that\n+        /// is a multiple of `rhs`.\n+        ///\n+        /// # Panics\n+        ///\n+        /// This function will panic if `rhs` is 0 or the operation results in overflow.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+            match self % rhs {\n+                0 => self,\n+                r => self + (rhs - r)\n+            }\n+        }\n+\n+        /// Calculates the smallest value greater than or equal to `self` that\n+        /// is a multiple of `rhs`. If `rhs` is negative,\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_roundings)]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".checked_next_multiple_of(8), Some(16));\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".checked_next_multiple_of(8), Some(24));\")]\n+        #[doc = concat!(\"assert_eq!(1_\", stringify!($SelfT), \".checked_next_multiple_of(0), None);\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.checked_next_multiple_of(2), None);\")]\n+        /// ```\n+        #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        pub const fn checked_next_multiple_of(self, rhs: Self) -> Option<Self> {\n+            match try_opt!(self.checked_rem(rhs)) {\n+                0 => Some(self),\n+                r => self.checked_add(try_opt!(rhs.checked_sub(r)))\n+            }\n+        }\n+\n         /// Returns `true` if and only if `self == 2^k` for some `k`.\n         ///\n         /// # Examples"}, {"sha": "19bcc45108dfd5225761723e0c6b7bb64fbb0eaa", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2159c5db6363e9b41afdd32bb84334b2bf24544a", "patch": "@@ -64,6 +64,7 @@\n #![feature(unsized_tuple_coercion)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n+#![feature(int_roundings)]\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n #![feature(unsize)]"}, {"sha": "d2d655ea2c75015959b518a695d6b4dd8f63240a", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=2159c5db6363e9b41afdd32bb84334b2bf24544a", "patch": "@@ -289,6 +289,55 @@ macro_rules! int_module {\n                 assert_eq!(r.saturating_pow(3), -8 as $T);\n                 assert_eq!(r.saturating_pow(0), 1 as $T);\n             }\n+\n+            #[test]\n+            fn test_div_floor() {\n+                let a: $T = 8;\n+                let b = 3;\n+                assert_eq!(a.div_floor(b), 2);\n+                assert_eq!(a.div_floor(-b), -3);\n+                assert_eq!((-a).div_floor(b), -3);\n+                assert_eq!((-a).div_floor(-b), 2);\n+            }\n+\n+            #[test]\n+            fn test_div_ceil() {\n+                let a: $T = 8;\n+                let b = 3;\n+                assert_eq!(a.div_ceil(b), 3);\n+                assert_eq!(a.div_ceil(-b), -2);\n+                assert_eq!((-a).div_ceil(b), -2);\n+                assert_eq!((-a).div_ceil(-b), 3);\n+            }\n+\n+            #[test]\n+            fn test_next_multiple_of() {\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!((16 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((-16 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-16 as $T).next_multiple_of(-8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(-8), -24);\n+                assert_eq!(MIN.next_multiple_of(-1), MIN);\n+            }\n+\n+            #[test]\n+            fn test_checked_next_multiple_of() {\n+                assert_eq!((16 as $T).checked_next_multiple_of(8), Some(16));\n+                assert_eq!((23 as $T).checked_next_multiple_of(8), Some(24));\n+                assert_eq!((16 as $T).checked_next_multiple_of(-8), Some(16));\n+                assert_eq!((23 as $T).checked_next_multiple_of(-8), Some(16));\n+                assert_eq!((-16 as $T).checked_next_multiple_of(8), Some(-16));\n+                assert_eq!((-23 as $T).checked_next_multiple_of(8), Some(-16));\n+                assert_eq!((-16 as $T).checked_next_multiple_of(-8), Some(-16));\n+                assert_eq!((-23 as $T).checked_next_multiple_of(-8), Some(-24));\n+                assert_eq!((1 as $T).checked_next_multiple_of(0), None);\n+                assert_eq!(MAX.checked_next_multiple_of(2), None);\n+                assert_eq!(MIN.checked_next_multiple_of(-3), None);\n+                assert_eq!(MIN.checked_next_multiple_of(-1), Some(MIN));\n+            }\n         }\n     };\n }"}, {"sha": "49f8f1f13fad46ffc0a79fd228b5e4f8bbf0f5e2", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2159c5db6363e9b41afdd32bb84334b2bf24544a/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=2159c5db6363e9b41afdd32bb84334b2bf24544a", "patch": "@@ -205,6 +205,31 @@ macro_rules! uint_module {\n                 assert_eq!(r.overflowing_pow(2), (1 as $T, true));\n                 assert_eq!(r.saturating_pow(2), MAX);\n             }\n+\n+            #[test]\n+            fn test_div_floor() {\n+                assert_eq!((8 as $T).div_floor(3), 2);\n+            }\n+\n+            #[test]\n+            fn test_div_ceil() {\n+                assert_eq!((8 as $T).div_ceil(3), 3);\n+            }\n+\n+            #[test]\n+            fn test_next_multiple_of() {\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!(MAX.next_multiple_of(1), MAX);\n+            }\n+\n+            #[test]\n+            fn test_checked_next_multiple_of() {\n+                assert_eq!((16 as $T).checked_next_multiple_of(8), Some(16));\n+                assert_eq!((23 as $T).checked_next_multiple_of(8), Some(24));\n+                assert_eq!((1 as $T).checked_next_multiple_of(0), None);\n+                assert_eq!(MAX.checked_next_multiple_of(2), None);\n+            }\n         }\n     };\n }"}]}