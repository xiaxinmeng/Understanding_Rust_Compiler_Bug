{"sha": "72cb09461101e336d087c4beff7ab09d5cc114bf", "node_id": "C_kwDOAAsO6NoAKDcyY2IwOTQ2MTEwMWUzMzZkMDg3YzRiZWZmN2FiMDlkNWNjMTE0YmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-20T16:26:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-20T16:26:02Z"}, "message": "Rollup merge of #96160 - RalfJung:interpret-debug, r=oli-obk\n\nMiri/interpreter debugging tweaks\n\nSome changes I made to make debugging Miri with trace logging less terrible.\n\nr? ``@oli-obk``", "tree": {"sha": "05f0e17502574a456634014682cda70ab277e6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f0e17502574a456634014682cda70ab277e6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cb09461101e336d087c4beff7ab09d5cc114bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYDQaCRBK7hj4Ov3rIwAAzskIAImj+hRv2iU6aFYw7xUzWPBF\nYyPoCbSaJC+OP+9Z9kpF/us9+INPpiekUGntFtozY4+Ra+pBM6aZ4jrKFQFD+lXS\nTzUsBZV+4TpnlPMPADW7lsZJFf4kjURh5RfElzK1+1i1PEH7uTKs5ZyE3fQV07tk\nnp8512XUqHQZP2+J7CzM58ISAel3+TDw1/8qf+Qf7O+B3w4lEFEohpnER7W1E77/\nVr32FcZaLxj7LrkbifnKuftgUN7T4zvsPwJdtIg2eOLQltBA5Dv5etXmlP128TBi\nwm8L+YQ9nBC9v2YgfHglJH7sVe7blkJpeHWpTXOjHvruPgg7c3FNrllS5tLqPoA=\n=mu5V\n-----END PGP SIGNATURE-----\n", "payload": "tree 05f0e17502574a456634014682cda70ab277e6bc\nparent 38e3f523c0e4ba47614f30830c4e631e57810ce1\nparent f3bdcfb8b08a14a556caa3d1adae835c8bfd8c58\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650471962 +0200\ncommitter GitHub <noreply@github.com> 1650471962 +0200\n\nRollup merge of #96160 - RalfJung:interpret-debug, r=oli-obk\n\nMiri/interpreter debugging tweaks\n\nSome changes I made to make debugging Miri with trace logging less terrible.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cb09461101e336d087c4beff7ab09d5cc114bf", "html_url": "https://github.com/rust-lang/rust/commit/72cb09461101e336d087c4beff7ab09d5cc114bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cb09461101e336d087c4beff7ab09d5cc114bf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e3f523c0e4ba47614f30830c4e631e57810ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e3f523c0e4ba47614f30830c4e631e57810ce1", "html_url": "https://github.com/rust-lang/rust/commit/38e3f523c0e4ba47614f30830c4e631e57810ce1"}, {"sha": "f3bdcfb8b08a14a556caa3d1adae835c8bfd8c58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bdcfb8b08a14a556caa3d1adae835c8bfd8c58", "html_url": "https://github.com/rust-lang/rust/commit/f3bdcfb8b08a14a556caa3d1adae835c8bfd8c58"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "827959113b90734ce321673ab5c56bbc359469d7", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=72cb09461101e336d087c4beff7ab09d5cc114bf", "patch": "@@ -679,7 +679,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         return_place: Option<&PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n-        debug!(\"body: {:#?}\", body);\n+        trace!(\"body: {:#?}\", body);\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,\n@@ -836,7 +836,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(());\n         }\n \n-        debug!(\"locals: {:#?}\", frame.locals);\n+        trace!(\"locals: {:#?}\", frame.locals);\n \n         // Cleanup: deallocate all locals that are backed by an allocation.\n         for local in &frame.locals {"}, {"sha": "b1d7ab6a098beccc7954322739b348f6551678d1", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=72cb09461101e336d087c4beff7ab09d5cc114bf", "patch": "@@ -870,9 +870,17 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n         range: AllocRange,\n         val: ScalarMaybeUninit<Tag>,\n     ) -> InterpResult<'tcx> {\n+        let range = self.range.subrange(range);\n+        debug!(\n+            \"write_scalar in {} at {:#x}, size {}: {:?}\",\n+            self.alloc_id,\n+            range.start.bytes(),\n+            range.size.bytes(),\n+            val\n+        );\n         Ok(self\n             .alloc\n-            .write_scalar(&self.tcx, self.range.subrange(range), val)\n+            .write_scalar(&self.tcx, range, val)\n             .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n \n@@ -895,10 +903,19 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n \n impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {\n     pub fn read_scalar(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n-        Ok(self\n+        let range = self.range.subrange(range);\n+        let res = self\n             .alloc\n-            .read_scalar(&self.tcx, self.range.subrange(range))\n-            .map_err(|e| e.to_interp_error(self.alloc_id))?)\n+            .read_scalar(&self.tcx, range)\n+            .map_err(|e| e.to_interp_error(self.alloc_id))?;\n+        debug!(\n+            \"read_scalar in {} at {:#x}, size {}: {:?}\",\n+            self.alloc_id,\n+            range.start.bytes(),\n+            range.size.bytes(),\n+            res\n+        );\n+        Ok(res)\n     }\n \n     pub fn read_ptr_sized(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {"}, {"sha": "c628406064fb63e4703bf503d75519a680c07534", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cb09461101e336d087c4beff7ab09d5cc114bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=72cb09461101e336d087c4beff7ab09d5cc114bf", "patch": "@@ -515,6 +515,9 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n             if Tag::ERR_ON_PARTIAL_PTR_OVERWRITE {\n                 return Err(AllocError::PartialPointerOverwrite(first));\n             }\n+            warn!(\n+                \"Partial pointer overwrite! De-initializing memory at offsets {first:?}..{start:?}.\"\n+            );\n             self.init_mask.set_range(first, start, false);\n         }\n         if last > end {\n@@ -523,10 +526,15 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n                     last - cx.data_layout().pointer_size,\n                 ));\n             }\n+            warn!(\n+                \"Partial pointer overwrite! De-initializing memory at offsets {end:?}..{last:?}.\"\n+            );\n             self.init_mask.set_range(end, last, false);\n         }\n \n         // Forget all the relocations.\n+        // Since relocations do not overlap, we know that removing until `last` (exclusive) is fine,\n+        // i.e., this will not remove any other relocations just after the ones we care about.\n         self.relocations.0.remove_range(first..last);\n \n         Ok(())"}]}