{"sha": "eb846dbaca87f156419724e77fd52eb91ca01161", "node_id": "C_kwDOAAsO6NoAKGViODQ2ZGJhY2E4N2YxNTY0MTk3MjRlNzdmZDUyZWI5MWNhMDExNjE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-04T05:36:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-04T05:36:51Z"}, "message": "Override `Iterator::advance(_back)_by` for `array::IntoIter`\n\nBecause I happened to notice that `nth` is currently getting codegen'd as a loop even for `Copy` types: <https://rust.godbolt.org/z/fPqv7Gvs7>", "tree": {"sha": "5730e03b0e05e3e6b0267aabbd1139f1cbbb9d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5730e03b0e05e3e6b0267aabbd1139f1cbbb9d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb846dbaca87f156419724e77fd52eb91ca01161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb846dbaca87f156419724e77fd52eb91ca01161", "html_url": "https://github.com/rust-lang/rust/commit/eb846dbaca87f156419724e77fd52eb91ca01161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb846dbaca87f156419724e77fd52eb91ca01161/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "html_url": "https://github.com/rust-lang/rust/commit/2a9e0831d6603d87220cedd1b1293e2eb82ef55c"}], "stats": {"total": 150, "additions": 149, "deletions": 1}, "files": [{"sha": "a146966c674d4b736ef2eaff0b37cbfaa7876205", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/eb846dbaca87f156419724e77fd52eb91ca01161/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb846dbaca87f156419724e77fd52eb91ca01161/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=eb846dbaca87f156419724e77fd52eb91ca01161", "patch": "@@ -1,7 +1,7 @@\n //! Defines the `IntoIter` owned iterator for arrays.\n \n use crate::{\n-    fmt,\n+    cmp, fmt,\n     iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n     mem::{self, MaybeUninit},\n     ops::Range,\n@@ -150,6 +150,27 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n+\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+        let len = self.len();\n+\n+        // The number of elements to drop.  Always in-bounds by construction.\n+        let delta = cmp::min(n, len);\n+\n+        let range_to_drop = self.alive.start..(self.alive.start + delta);\n+\n+        // Moving the start marks them as conceptually \"dropped\", so if anything\n+        // goes bad then our drop impl won't double-free them.\n+        self.alive.start += delta;\n+\n+        // SAFETY: These elements are currently initialized, so it's fine to drop them.\n+        unsafe {\n+            let slice = self.data.get_unchecked_mut(range_to_drop);\n+            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n+        }\n+\n+        if n > len { Err(len) } else { Ok(()) }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -170,6 +191,27 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n             unsafe { self.data.get_unchecked(idx).assume_init_read() }\n         })\n     }\n+\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        let len = self.len();\n+\n+        // The number of elements to drop.  Always in-bounds by construction.\n+        let delta = cmp::min(n, len);\n+\n+        let range_to_drop = (self.alive.end - delta)..self.alive.end;\n+\n+        // Moving the end marks them as conceptually \"dropped\", so if anything\n+        // goes bad then our drop impl won't double-free them.\n+        self.alive.end -= delta;\n+\n+        // SAFETY: These elements are currently initialized, so it's fine to drop them.\n+        unsafe {\n+            let slice = self.data.get_unchecked_mut(range_to_drop);\n+            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n+        }\n+\n+        if n > len { Err(len) } else { Ok(()) }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]"}, {"sha": "d212a3a3a05da89594203376d7e4396e9582a3c4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/eb846dbaca87f156419724e77fd52eb91ca01161/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb846dbaca87f156419724e77fd52eb91ca01161/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=eb846dbaca87f156419724e77fd52eb91ca01161", "patch": "@@ -474,3 +474,109 @@ fn array_split_array_mut_out_of_bounds() {\n \n     v.split_array_mut::<7>();\n }\n+\n+#[test]\n+fn array_intoiter_advance_by() {\n+    use std::cell::Cell;\n+    struct DropCounter<'a>(usize, &'a Cell<usize>);\n+    impl Drop for DropCounter<'_> {\n+        fn drop(&mut self) {\n+            let x = self.1.get();\n+            self.1.set(x + 1);\n+        }\n+    }\n+\n+    let counter = Cell::new(0);\n+    let a: [_; 100] = std::array::from_fn(|i| DropCounter(i, &counter));\n+    let mut it = IntoIterator::into_iter(a);\n+\n+    let r = it.advance_by(1);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_by(11);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 88);\n+    assert_eq!(counter.get(), 12);\n+\n+    let x = it.next();\n+    assert_eq!(x.as_ref().map(|x| x.0), Some(12));\n+    assert_eq!(it.len(), 87);\n+    assert_eq!(counter.get(), 12);\n+    drop(x);\n+    assert_eq!(counter.get(), 13);\n+\n+    let r = it.advance_by(123456);\n+    assert_eq!(r, Err(87));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_by(10);\n+    assert_eq!(r, Err(0));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+}\n+\n+#[test]\n+fn array_intoiter_advance_back_by() {\n+    use std::cell::Cell;\n+    struct DropCounter<'a>(usize, &'a Cell<usize>);\n+    impl Drop for DropCounter<'_> {\n+        fn drop(&mut self) {\n+            let x = self.1.get();\n+            self.1.set(x + 1);\n+        }\n+    }\n+\n+    let counter = Cell::new(0);\n+    let a: [_; 100] = std::array::from_fn(|i| DropCounter(i, &counter));\n+    let mut it = IntoIterator::into_iter(a);\n+\n+    let r = it.advance_back_by(1);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_back_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 99);\n+    assert_eq!(counter.get(), 1);\n+\n+    let r = it.advance_back_by(11);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 88);\n+    assert_eq!(counter.get(), 12);\n+\n+    let x = it.next_back();\n+    assert_eq!(x.as_ref().map(|x| x.0), Some(87));\n+    assert_eq!(it.len(), 87);\n+    assert_eq!(counter.get(), 12);\n+    drop(x);\n+    assert_eq!(counter.get(), 13);\n+\n+    let r = it.advance_back_by(123456);\n+    assert_eq!(r, Err(87));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_back_by(0);\n+    assert_eq!(r, Ok(()));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+\n+    let r = it.advance_back_by(10);\n+    assert_eq!(r, Err(0));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(counter.get(), 100);\n+}"}]}