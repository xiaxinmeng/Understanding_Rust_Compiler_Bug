{"sha": "df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmM2EzMGFlZTRmZTUxNGMxZmQxMTkzZDNhN2U3MzliMWE2NmFiOGY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-08-01T16:03:04Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-08-01T17:24:35Z"}, "message": "Add Vec::spare_capacity_mut", "tree": {"sha": "935c8bdf9b37940501bb4a26111b179b24c8caf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935c8bdf9b37940501bb4a26111b179b24c8caf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f", "html_url": "https://github.com/rust-lang/rust/commit/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfdf9d335501cc0a53ae69c940095cca7d4be0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf9d335501cc0a53ae69c940095cca7d4be0f8", "html_url": "https://github.com/rust-lang/rust/commit/cfdf9d335501cc0a53ae69c940095cca7d4be0f8"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "159f45ffce1a0ec27eed3a8b4bcc7083e3d9016d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=df3a30aee4fe514c1fd1193d3a7e739b1a66ab8f", "patch": "@@ -65,7 +65,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::marker::PhantomData;\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Index, IndexMut, RangeBounds};\n use core::ptr::{self, NonNull};\n@@ -1525,6 +1525,47 @@ impl<T> Vec<T> {\n     {\n         Box::leak(vec.into_boxed_slice())\n     }\n+\n+    /// Returns the remaining spare capacity of the vector as a slice of\n+    /// `MaybeUninit<T>`.\n+    ///\n+    /// The returned slice can be used to fill the vector with data (e.g. by\n+    /// reading from a file) before marking the data as initialized using the\n+    /// [`set_len`] method.\n+    ///\n+    /// [`set_len`]: #method.set_len\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_spare_capacity, maybe_uninit_extra)]\n+    ///\n+    /// // Allocate vector big enough for 10 elements.\n+    /// let mut v = Vec::with_capacity(10);\n+    ///\n+    /// // Fill in the first 3 elements.\n+    /// let uninit = v.spare_capacity_mut();\n+    /// uninit[0].write(0);\n+    /// uninit[1].write(1);\n+    /// uninit[2].write(2);\n+    ///\n+    /// // Mark the first 3 elements of the vector as being initialized.\n+    /// unsafe {\n+    ///     v.set_len(3);\n+    /// }\n+    ///\n+    /// assert_eq!(&v, &[0, 1, 2]);\n+    /// ```\n+    #[unstable(feature = \"vec_spare_capacity\", issue = \"75017\")]\n+    #[inline]\n+    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,\n+                self.buf.capacity() - self.len,\n+            )\n+        }\n+    }\n }\n \n impl<T: Clone> Vec<T> {"}]}