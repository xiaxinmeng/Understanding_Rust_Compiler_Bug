{"sha": "0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjMyODZjYWYzNWE3Y2Q4YWVkNmUyMGZhYjNhMmEzZWQ5MWFlOGY=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-05T03:35:13Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-05T03:46:00Z"}, "message": "Let `macro_use` bypass module scope", "tree": {"sha": "df01037e66b345a13ba00c197ab3d6dd24d8050e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df01037e66b345a13ba00c197ab3d6dd24d8050e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1whPkACgkQztOS3gxI\nPQAbUg/9FcE8Cngqb5/Y0ZOaU/Zhq/cN0YHNT0j8nmMkbJw7rra7xPlX6oFK67Jf\nxfHQCk1gw/rIx/MTZZr888f1PIj1yO+3KLBufeFbpUbE1xuEz1GXwJ32C8THf0PZ\nvgT9eRnDAT6vnRDODBO3lhtb4kdGVcbFgpMeKZraabzRL3UEseR2ilJSAAdQLgxc\nc8S+QpNoJG7wCF5q9bbc9MBJ3NVWaGrLjpaLp9xD2fTZobk7XCnUjIIjJDM0KJCO\nPHvV+xZ94eoKC3SQVlHcvhY43z5CDvCHXYJt0TxSluLFDEZu39yiOwbOWlzC2Epp\n/+HVW4K/EzDCE18bSrbEDDJwmzQcgDF4voefrSisqqSzCk1cOTPTkBV5omBXgWOf\ngvwEdpX7DSlVnBZQ/8nJxbR6PgMoA3Y0+PooheayTEzu0CH6qW8uIrpyxWWSDBYu\nlBhFDXVchrbeQXCXphDKkDHwB/yywW9GODIM34vyZ9f0hcSVO7iJZxzh/jtKCpK5\n2UcggR/ez7qScCZi9twhSpsk9Y3Lkt7A5kG4aHIk9bSZUw/Jlo0ncR7H/vj0w5jT\nNE58CO6DyDay/nvXCfIvg5/V4AhHlZAG9e1mwxYnzizwNCHh240Q195oxyiSnlla\nXNOi4Xl+q9TM2noKZW7kbJd3+gJx8F6nyUAoCev8AAuoiMWXrKw=\n=+bTx\n-----END PGP SIGNATURE-----", "payload": "tree df01037e66b345a13ba00c197ab3d6dd24d8050e\nparent a66214b34effe1ad7f4351a1b920cf3a8f98d3c0\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567654513 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567655160 +0800\n\nLet `macro_use` bypass module scope\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "html_url": "https://github.com/rust-lang/rust/commit/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f/comments", "author": null, "committer": null, "parents": [{"sha": "a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0", "html_url": "https://github.com/rust-lang/rust/commit/a66214b34effe1ad7f4351a1b920cf3a8f98d3c0"}], "stats": {"total": 87, "additions": 52, "deletions": 35}, "files": [{"sha": "5d1c42926568fd663ade182e87b76375cbcf76d8", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "patch": "@@ -166,6 +166,33 @@ where\n         self.global_macro_scope.insert(name, macro_id);\n     }\n \n+    /// Import macros from `#[macro_use] extern crate`.\n+    ///\n+    /// They are non-scoped, and will only be inserted into mutable `global_macro_scope`.\n+    fn import_macros_from_extern_crate(&mut self, import: &raw::ImportData) {\n+        log::debug!(\n+            \"importing macros from extern crate: {:?} ({:?})\",\n+            import,\n+            self.def_map.edition,\n+        );\n+\n+        let res = self.def_map.resolve_name_in_extern_prelude(\n+            &import\n+                .path\n+                .as_ident()\n+                .expect(\"extern crate should have been desugared to one-element path\"),\n+        );\n+\n+        if let Some(ModuleDef::Module(m)) = res.take_types() {\n+            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+\n+            let item_map = self.db.crate_def_map(m.krate);\n+            for (name, &macro_id) in &item_map.exported_macros {\n+                self.global_macro_scope.insert(name.clone(), macro_id);\n+            }\n+        }\n+    }\n+\n     fn resolve_imports(&mut self) -> ReachedFixedPoint {\n         let mut imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n         let mut resolved = Vec::new();\n@@ -299,21 +326,6 @@ where\n                         }\n                     }\n \n-                    // `#[macro_use] extern crate` glob imports all macros exported,\n-                    // ignoring their scopes\n-                    if import.is_extern_crate && import.is_macro_use {\n-                        if let Some(ModuleDef::Module(m)) =\n-                            def.a().and_then(|item| item.take_types())\n-                        {\n-                            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n-\n-                            let item_map = self.db.crate_def_map(m.krate);\n-                            for (name, &macro_id) in &item_map.exported_macros {\n-                                self.define_macro(module_id, name.clone(), macro_id, false);\n-                            }\n-                        }\n-                    }\n-\n                     let resolution = match def {\n                         Either::A(item) => {\n                             Either::A(Resolution { def: item, import: Some(import_id) })\n@@ -513,11 +525,17 @@ where\n         for item in items {\n             match *item {\n                 raw::RawItem::Module(m) => self.collect_module(&self.raw_items[m]),\n-                raw::RawItem::Import(import) => self.def_collector.unresolved_imports.push((\n-                    self.module_id,\n-                    import,\n-                    self.raw_items[import].clone(),\n-                )),\n+                raw::RawItem::Import(import_id) => {\n+                    let import = self.raw_items[import_id].clone();\n+                    // This should be processed eagerly instead of deferred to resolving.\n+                    // Otherwise, since it will only mutate `global_macro_scope`\n+                    // without `update` names in `mod`s, unresolved macros cannot be expanded.\n+                    if import.is_extern_crate && import.is_macro_use {\n+                        self.def_collector.import_macros_from_extern_crate(&import);\n+                    }\n+\n+                    self.def_collector.unresolved_imports.push((self.module_id, import_id, import));\n+                }\n                 raw::RawItem::Def(def) => self.define_def(&self.raw_items[def]),\n                 raw::RawItem::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n             }"}, {"sha": "ff762ee300287371a6e0065956def541c7d74f5c", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=0d23286caf35a7cd8aed6e20fab3a2a3ed91ae8f", "patch": "@@ -147,25 +147,31 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n         #[macro_use]\n         extern crate foo;\n \n-        structs!(Foo, Bar)\n+        structs!(Foo);\n+        structs_priv!(Bar);\n+        structs_not_exported!(MacroNotResolved1);\n+        crates::structs!(MacroNotResolved2);\n \n         mod bar;\n \n         //- /bar.rs\n-        use crate::*;\n+        structs!(Baz);\n+        crates::structs!(MacroNotResolved3);\n \n         //- /lib.rs\n         #[macro_export]\n         macro_rules! structs {\n-            ($($i:ident),*) => {\n-                $(struct $i { field: u32 } )*\n-            }\n+            ($i:ident) => { struct $i; }\n+        }\n+\n+        macro_rules! structs_not_exported {\n+            ($i:ident) => { struct $i; }\n         }\n \n         mod priv_mod {\n             #[macro_export]\n-            macro_rules! baz {\n-                () => {};\n+            macro_rules! structs_priv {\n+                ($i:ident) => { struct $i; }\n             }\n         }\n         \",\n@@ -179,16 +185,9 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n    \u22eeBar: t v\n    \u22eeFoo: t v\n    \u22eebar: t\n-   \u22eebaz: m\n    \u22eefoo: t\n-   \u22eestructs: m\n    \u22ee\n    \u22eecrate::bar\n-   \u22eeBar: t v\n-   \u22eeFoo: t v\n-   \u22eebar: t\n-   \u22eebaz: m\n-   \u22eefoo: t\n-   \u22eestructs: m\n+   \u22eeBaz: t v\n     \"###);\n }"}]}