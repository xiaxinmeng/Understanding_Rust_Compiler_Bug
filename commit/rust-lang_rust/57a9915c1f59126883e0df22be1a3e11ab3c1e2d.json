{"sha": "57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "node_id": "C_kwDOAAsO6NoAKDU3YTk5MTVjMWY1OTEyNjg4M2UwZGYyMmJlMWEzZTExYWIzYzFlMmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-06T10:04:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-06T10:04:41Z"}, "message": "internal: completion PathKind is not optional", "tree": {"sha": "87870625c67cdce30593c127a01a246e2c87b059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87870625c67cdce30593c127a01a246e2c87b059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "html_url": "https://github.com/rust-lang/rust/commit/57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3f5e09933c8a1e169173bc564dae8f6ff5bb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3f5e09933c8a1e169173bc564dae8f6ff5bb0f", "html_url": "https://github.com/rust-lang/rust/commit/dd3f5e09933c8a1e169173bc564dae8f6ff5bb0f"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "fef177d2dd0c9642af6362794e149f7c142d2ac4", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -71,7 +71,7 @@ pub(crate) fn complete_known_attribute_input(\n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) {\n     let (is_absolute_path, qualifier, is_inner, annotated_item_kind) = match ctx.path_context {\n         Some(PathCompletionCtx {\n-            kind: Some(PathKind::Attr { kind, annotated_item_kind }),\n+            kind: PathKind::Attr { kind, annotated_item_kind },\n             is_absolute_path,\n             ref qualifier,\n             .."}, {"sha": "d827d781a32d19d081b2c3f97cf44a50023d340c", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -13,10 +13,7 @@ use crate::{\n pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n     let (qualifier, is_absolute_path) = match ctx.path_context {\n         Some(PathCompletionCtx {\n-            kind: Some(PathKind::Derive),\n-            ref qualifier,\n-            is_absolute_path,\n-            ..\n+            kind: PathKind::Derive, ref qualifier, is_absolute_path, ..\n         }) => (qualifier, is_absolute_path),\n         _ => return,\n     };"}, {"sha": "3e9bd6078de79ba0b62e1c2c49848a745a89893d", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -2,7 +2,11 @@\n \n use ide_db::FxHashSet;\n \n-use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n+use crate::{\n+    context::{CompletionContext, PathCompletionCtx, PathKind},\n+    patterns::ImmediateLocation,\n+    Completions,\n+};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -34,9 +38,16 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    if ctx.is_non_trivial_path() || ctx.is_path_disallowed() || !ctx.expects_expression() {\n-        return;\n+    match ctx.path_context {\n+        Some(PathCompletionCtx {\n+            is_absolute_path: false,\n+            qualifier: None,\n+            kind: PathKind::Expr,\n+            ..\n+        }) if !ctx.is_path_disallowed() => {}\n+        _ => return,\n     }\n+\n     if let Some(func) = ctx.function_def.as_ref().and_then(|fn_| ctx.sema.to_def(fn_)) {\n         if let Some(self_) = func.self_param(ctx.db) {\n             let ty = self_.ty(ctx.db);"}, {"sha": "1278564e195ddc2ac8ce66e93b8d163ad0195a44", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -15,9 +15,9 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx {\n-            kind: Some(PathKind::Expr), is_absolute_path, qualifier, ..\n-        }) => (is_absolute_path, qualifier),\n+        Some(PathCompletionCtx { kind: PathKind::Expr, is_absolute_path, qualifier, .. }) => {\n+            (is_absolute_path, qualifier)\n+        }\n         _ => return,\n     };\n "}, {"sha": "80825a633fd96601dd7b1af224ff5cbe737eea46", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -13,9 +13,9 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx {\n-            kind: Some(PathKind::Item), is_absolute_path, qualifier, ..\n-        }) => (is_absolute_path, qualifier),\n+        Some(PathCompletionCtx { kind: PathKind::Item, is_absolute_path, qualifier, .. }) => {\n+            (is_absolute_path, qualifier)\n+        }\n         _ => return,\n     };\n "}, {"sha": "2dbe81f92a0bb7f4a10eb36aeb236d9b46846be2", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -17,9 +17,9 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx {\n-            kind: Some(PathKind::Type), is_absolute_path, qualifier, ..\n-        }) => (is_absolute_path, qualifier),\n+        Some(PathCompletionCtx { kind: PathKind::Type, is_absolute_path, qualifier, .. }) => {\n+            (is_absolute_path, qualifier)\n+        }\n         _ => return,\n     };\n "}, {"sha": "a8d301da17f2692d91ab08f6bab937d5c3412677", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -12,9 +12,9 @@ use crate::{\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx {\n-            kind: Some(PathKind::Use), is_absolute_path, qualifier, ..\n-        }) => (is_absolute_path, qualifier),\n+        Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }) => {\n+            (is_absolute_path, qualifier)\n+        }\n         _ => return,\n     };\n "}, {"sha": "50560c99923f94d4c4d97024431e608f693fb43a", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -10,7 +10,7 @@ use crate::{\n pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n     let (&is_absolute_path, qualifier, &has_in_token) = match &ctx.path_context {\n         Some(PathCompletionCtx {\n-            kind: Some(PathKind::Vis { has_in_token }),\n+            kind: PathKind::Vis { has_in_token },\n             is_absolute_path,\n             qualifier,\n             .."}, {"sha": "86d7edccc9571ff3c3def7f15c572a19414ed0ae", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -75,8 +75,7 @@ pub(crate) struct PathCompletionCtx {\n     // FIXME: use this\n     /// The parent of the path we are completing.\n     pub(super) parent: Option<ast::Path>,\n-    // FIXME: This should be PathKind, the none case should never occur\n-    pub(super) kind: Option<PathKind>,\n+    pub(super) kind: PathKind,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n     /// `true` if we are a statement or a last expr in the block.\n@@ -315,11 +314,11 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n-        matches!(self.path_context, Some(PathCompletionCtx { kind: Some(PathKind::Expr), .. }))\n+        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Expr, .. }))\n     }\n \n     pub(crate) fn expects_type(&self) -> bool {\n-        matches!(self.path_context, Some(PathCompletionCtx { kind: Some(PathKind::Type), .. }))\n+        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Type, .. }))\n     }\n \n     pub(crate) fn path_is_call(&self) -> bool {\n@@ -341,7 +340,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn path_kind(&self) -> Option<PathKind> {\n-        self.path_context.as_ref().and_then(|it| it.kind)\n+        self.path_context.as_ref().map(|it| it.kind)\n     }\n \n     pub(crate) fn is_immediately_after_macro_bang(&self) -> bool {\n@@ -837,7 +836,7 @@ impl<'a> CompletionContext<'a> {\n                     Self::classify_name_ref(&self.sema, &original_file, name_ref)\n                 {\n                     self.path_context =\n-                        Some(PathCompletionCtx { kind: Some(PathKind::Derive), ..path_ctx });\n+                        Some(PathCompletionCtx { kind: PathKind::Derive, ..path_ctx });\n                 }\n             }\n             return;\n@@ -969,7 +968,7 @@ impl<'a> CompletionContext<'a> {\n             is_absolute_path: false,\n             qualifier: None,\n             parent: path.parent_path(),\n-            kind: None,\n+            kind: PathKind::Item,\n             has_type_args: false,\n             can_be_stmt: false,\n             in_loop_body: false,\n@@ -1041,7 +1040,7 @@ impl<'a> CompletionContext<'a> {\n                 }\n             };\n             Some(kind)\n-        }).flatten();\n+        }).flatten()?;\n         path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n         if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {"}, {"sha": "a59c8e8ee2f93393e0ff957fd7ac6d4534756749", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -273,7 +273,7 @@ fn render_resolution_simple_(\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         ctx.completion.path_context,\n-        Some(PathCompletionCtx { kind: Some(PathKind::Type), has_type_args: false, .. })\n+        Some(PathCompletionCtx { kind: PathKind::Type, has_type_args: false, .. })\n     ) && ctx.completion.config.add_call_parenthesis;\n     if type_path_no_ty_args {\n         if let Some(cap) = ctx.snippet_cap() {"}, {"sha": "6430b1e46a684c7c8012f07c044077e1bea91815", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -197,10 +197,10 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n     }\n \n     match ctx.path_context {\n-        Some(PathCompletionCtx { kind: Some(PathKind::Expr), has_call_parens: true, .. }) => {\n+        Some(PathCompletionCtx { kind: PathKind::Expr, has_call_parens: true, .. }) => {\n             return false\n         }\n-        Some(PathCompletionCtx { kind: Some(PathKind::Use | PathKind::Type), .. }) => {\n+        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type, .. }) => {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "22df7132f0ea0ddf80d9480e73a09282b942af13", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a9915c1f59126883e0df22be1a3e11ab3c1e2d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=57a9915c1f59126883e0df22be1a3e11ab3c1e2d", "patch": "@@ -35,7 +35,7 @@ fn render(\n \n     let needs_bang = match completion.path_context {\n         Some(PathCompletionCtx { kind, has_macro_bang, .. }) => {\n-            is_fn_like && kind != Some(PathKind::Use) && !has_macro_bang\n+            is_fn_like && kind != PathKind::Use && !has_macro_bang\n         }\n         _ => is_fn_like,\n     };"}]}