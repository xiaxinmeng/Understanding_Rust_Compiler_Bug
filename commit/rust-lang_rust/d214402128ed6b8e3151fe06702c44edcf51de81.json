{"sha": "d214402128ed6b8e3151fe06702c44edcf51de81", "node_id": "C_kwDOAAsO6NoAKGQyMTQ0MDIxMjhlZDZiOGUzMTUxZmUwNjcwMmM0NGVkY2Y1MWRlODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T22:39:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T22:39:50Z"}, "message": "Rollup merge of #106412 - GuillaumeGomez:fix-links-to-primitive-rustdoc-json, r=aDotInTheVoid\n\nFix link generation for local primitive types in rustdoc JSON output\n\nFixes https://github.com/rust-lang/rust/issues/104064.\n\nAs mentioned in the issue, I'm not super happy about this fix which is more a hack rather than a sound-proof solution. However I couldn't find a better way to fix it.\n\nr? `@aDotInTheVoid`", "tree": {"sha": "356278ab7a40afed53c755625ed590ee7b834f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356278ab7a40afed53c755625ed590ee7b834f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d214402128ed6b8e3151fe06702c44edcf51de81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtgA2CRBK7hj4Ov3rIwAApmYIAHgC0yKAMcSafYod5HPqPs1e\nKsUGdbaKj/xnVy1NnHoprW5bLvF8MHDqUOMa3p+Mem/KHOzFPQnVfqCd7ZknG9/F\ncO9nsTlXZCGiSVnVLlm9JHBOAw2EOcOAqHdqYG+J6U9d5OfFwzjG+Kd6+kmwZ+s9\nTMVVy/nLsmSVDqN7IYMwAu7tethvZTkgSO63zHIb2SAi1xV1K6Qnm66r90iVm6g5\nh1hWRWbxUcBW/Q4BAwuTLBoQvJb5yfPOeyvskvnphnfOE2ZQdEq7namwTNfbXGR0\nxgfYhpRfgHUfwmkxuLNGRK6iarZI5KkScIkDKcDTIer55Fz64ZDIBV45YI4A43Q=\n=asg/\n-----END PGP SIGNATURE-----\n", "payload": "tree 356278ab7a40afed53c755625ed590ee7b834f51\nparent 5eb9698b4e92ae8a7ff56bfec5abff3b90337b78\nparent c9ebd73416f59f4498f789aa408d8f43b64aa4f3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672871990 +0100\ncommitter GitHub <noreply@github.com> 1672871990 +0100\n\nRollup merge of #106412 - GuillaumeGomez:fix-links-to-primitive-rustdoc-json, r=aDotInTheVoid\n\nFix link generation for local primitive types in rustdoc JSON output\n\nFixes https://github.com/rust-lang/rust/issues/104064.\n\nAs mentioned in the issue, I'm not super happy about this fix which is more a hack rather than a sound-proof solution. However I couldn't find a better way to fix it.\n\nr? `@aDotInTheVoid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d214402128ed6b8e3151fe06702c44edcf51de81", "html_url": "https://github.com/rust-lang/rust/commit/d214402128ed6b8e3151fe06702c44edcf51de81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d214402128ed6b8e3151fe06702c44edcf51de81/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78", "html_url": "https://github.com/rust-lang/rust/commit/5eb9698b4e92ae8a7ff56bfec5abff3b90337b78"}, {"sha": "c9ebd73416f59f4498f789aa408d8f43b64aa4f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ebd73416f59f4498f789aa408d8f43b64aa4f3", "html_url": "https://github.com/rust-lang/rust/commit/c9ebd73416f59f4498f789aa408d8f43b64aa4f3"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "56283b2c0eff9eb622d385a9f881dae5a52caece", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d214402128ed6b8e3151fe06702c44edcf51de81/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d214402128ed6b8e3151fe06702c44edcf51de81/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d214402128ed6b8e3151fe06702c44edcf51de81", "patch": "@@ -8,8 +8,9 @@ use std::convert::From;\n use std::fmt;\n \n use rustc_ast::ast;\n-use rustc_hir::{def::CtorKind, def_id::DefId};\n+use rustc_hir::{def::CtorKind, def::DefKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_span::symbol::sym;\n use rustc_span::{Pos, Symbol};\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n@@ -217,13 +218,27 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n \n     impl<'a> fmt::Display for DisplayDefId<'a> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let name = match self.2 {\n+            let DisplayDefId(def_id, tcx, name) = self;\n+            let name = match name {\n                 Some(name) => format!(\":{}\", name.as_u32()),\n-                None => self\n-                    .1\n-                    .opt_item_name(self.0)\n-                    .map(|n| format!(\":{}\", n.as_u32()))\n-                    .unwrap_or_default(),\n+                None => {\n+                    // We need this workaround because primitive types' DefId actually refers to\n+                    // their parent module, which isn't present in the output JSON items. So\n+                    // instead, we directly get the primitive symbol and convert it to u32 to\n+                    // generate the ID.\n+                    if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n+                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n+                            .filter(|attr| attr.has_name(sym::primitive))\n+                            .find_map(|attr| attr.value_str()) {\n+                        format!(\":{}\", prim.as_u32())\n+                    } else {\n+                        tcx\n+                        .opt_item_name(*def_id)\n+                        .map(|n| format!(\":{}\", n.as_u32()))\n+                        .unwrap_or_default()\n+                    }\n+                }\n             };\n             write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n         }\n@@ -237,7 +252,7 @@ pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Opt\n         ItemId::Auto { for_, trait_ } => {\n             Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n-        ItemId::Primitive(ty, krate) => Id(format!(\"p:{}:{}\", krate.as_u32(), ty.as_sym())),\n+        ItemId::Primitive(_, _) => unreachable!(),\n     }\n }\n "}, {"sha": "f27e6a2adeca6b9b2e8ab32bf2fbb179938f29bf", "filename": "src/test/rustdoc-json/primitives/local_primitive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d214402128ed6b8e3151fe06702c44edcf51de81/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d214402128ed6b8e3151fe06702c44edcf51de81/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs?ref=d214402128ed6b8e3151fe06702c44edcf51de81", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/104064>.\n+\n+#![feature(no_core)]\n+#![feature(rustc_attrs)]\n+#![feature(rustdoc_internals)]\n+#![no_core]\n+#![rustc_coherence_is_core]\n+\n+//! Link to [i32][prim@i32] [i64][prim@i64]\n+\n+#[doc(primitive = \"i32\")]\n+mod prim_i32 {}\n+\n+// @set local_i32 = \"$.index[*][?(@.name=='i32')].id\"\n+\n+// @has \"$.index[*][?(@.name=='local_primitive')]\"\n+// @ismany \"$.index[*][?(@.name=='local_primitive')].inner.items[*]\" $local_i32\n+// @is \"$.index[*][?(@.name=='local_primitive')].links['prim@i32']\" $local_i32\n+\n+// Let's ensure the `prim_i32` module isn't present in the output JSON:\n+// @!has \"$.index[*][?(@.name=='prim_i32')]\""}]}