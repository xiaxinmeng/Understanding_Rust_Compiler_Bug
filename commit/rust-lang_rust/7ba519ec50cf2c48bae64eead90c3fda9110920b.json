{"sha": "7ba519ec50cf2c48bae64eead90c3fda9110920b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTUxOWVjNTBjZjJjNDhiYWU2NGVlYWQ5MGMzZmRhOTExMDkyMGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-23T09:26:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T09:26:40Z"}, "message": "Rollup merge of #78255 - dtolnay:match, r=lcnr\n\nReduce diagram mess in 'match arms have incompatible types' error\n\nI noticed this wild diagram in https://twitter.com/a_hoverbear/status/1318960787105353728 which I think does not benefit from the big outer vertical span.\n\nThis PR shrinks the outer span to cover just the `match` keyword and scrutinee expression *if* at least one of the highlighted match arms involved in the error is multiline.\n\n**Before:**\n\n<pre>\n<b>error[E0308]: `match` arms have incompatible types</b>\n   <b>--&gt;</b> src/topology/builder.rs:141:35\n    <b>|</b>\n<b>120 |</b>             let transform = match transform {\n    <b>|    _________________________-</b>\n<b>121 |   |</b>             Transform::Function(t) =&gt; {\n    <b>|  _|_______________________________________-</b>\n<b>122 | | |</b>                 filter_event_type(input_rx, input_type).compat().flat_map(|v| {\n<b>123 | | |</b>                     futures::stream::iter(match v {\n<b>124 | | |</b>                         Err(e) =&gt; {\n<b>...   | |</b>\n<b>139 | | |</b>                 .compat();\n<b>140 | | |</b>             }\n    <b>| |_|_____________- this is found to be of type `()`</b>\n<b>141 |   |</b>             Transform::Task(t) =&gt; t\n    <b>|  _|___________________________________^</b>\n<b>142 | | |</b>                 .transform(filter_event_type(input_rx, input_type))\n<b>143 | | |</b>                 .forward(output)\n<b>144 | | |</b>                 .map(|_| debug!(\"Finished\"))\n<b>145 | | |</b>                 .compat(),\n    <b>| |_|_________________________^ expected `()`, found struct `futures::compat::Compat01As03`</b>\n<b>146 |   |</b>         };\n    <b>|   |_________- `match` arms have incompatible types</b>\n    <b>|</b>\n    <b>= note:</b> expected type `<b>()</b>`\n             found struct `<b>futures::compat::Compat01As03&lt;futures::Map&lt;futures::stream::Forward&lt;std::boxed::Box&lt;dyn futures::Stream&lt;Error = (), Item = event::Event&gt; + std::marker::Send&gt;, topology::fanout::Fanout&gt;, [closure@src/topology/builder.rs:144:22: 144:44]&gt;&gt;</b>`\n</pre>\n\n**After:**\n\n<pre>\n<b>error[E0308]: `match` arms have incompatible types</b>\n   <b>--&gt;</b> src/topology/builder.rs:141:35\n    <b>|</b>\n<b>120 |</b>             let transform = match transform {\n    <b>|                             --------------- `match` arms have incompatible types</b>\n<b>121 |</b>                 Transform::Function(t) =&gt; {\n    <b>|  _________________________________________-</b>\n<b>122 | |</b>                   filter_event_type(input_rx, input_type).compat().flat_map(|v| {\n<b>123 | |</b>                       futures::stream::iter(match v {\n<b>124 | |</b>                           Err(e) =&gt; {\n<b>...   |</b>\n<b>139 | |</b>                   .compat();\n<b>140 | |</b>               }\n    <b>| |_______________- this is found to be of type `()`</b>\n<b>141 |</b>                 Transform::Task(t) =&gt; t\n    <b>|  _____________________________________^</b>\n<b>142 | |</b>                   .transform(filter_event_type(input_rx, input_type))\n<b>143 | |</b>                   .forward(output)\n<b>144 | |</b>                   .map(|_| debug!(\"Finished\"))\n<b>145 | |</b>                   .compat(),\n    <b>| |___________________________^ expected `()`, found struct `futures::compat::Compat01As03`</b>\n    <b>|</b>\n    <b>= note:</b> expected type `<b>()</b>`\n             found struct `<b>futures::compat::Compat01As03&lt;futures::Map&lt;futures::stream::Forward&lt;std::boxed::Box&lt;dyn futures::Stream&lt;Error = (), Item = event::Event&gt; + std::marker::Send&gt;, topology::fanout::Fanout&gt;, [closure@src/topology/builder.rs:144:22: 144:44]&gt;&gt;</b>`\n</pre>\n\nFYI @Hoverbear", "tree": {"sha": "a16fe408b9992a4ce5412336c6ed50a318db3d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16fe408b9992a4ce5412336c6ed50a318db3d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba519ec50cf2c48bae64eead90c3fda9110920b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkqHRCRBK7hj4Ov3rIwAAdHIIAGqWAlN7XkvH+tb7JPPZlE4/\nJzhc3nFE2clQT3F7o6dAs7Co2kx+OtOLIy3FVzaJf3TK9xpIDF9JPDctKmILMr3h\npzMinUdScTqA/6y271d6/XY3NEKeTPbm6TUox/ue6r+OCri5BkV7nUJwvplkdTIb\nXwMGhqxUYWl3W/eyJUnHByZ1b7G7rhgcemdnlGmZrgPObu9aAH6KkUTxByMh2a0Z\nC7k7Icb2Nw4bciZtvNSNi2HPce1nDZqxJm8lFjpMps398aex4HdnWvr5IctzVvwo\nGjntkvD40jdnHaEMtC2+ofqI/NqVAJCOooRj2x3j2C/LzuQvY/C20sq/+NcVlT8=\n=Kbwr\n-----END PGP SIGNATURE-----\n", "payload": "tree a16fe408b9992a4ce5412336c6ed50a318db3d39\nparent 3f462c22b53ee5ae2f56e2b268a15fd4dab9d22c\nparent b0059500f6765612fbda6d33240116f7520d433a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603445200 +0900\ncommitter GitHub <noreply@github.com> 1603445200 +0900\n\nRollup merge of #78255 - dtolnay:match, r=lcnr\n\nReduce diagram mess in 'match arms have incompatible types' error\n\nI noticed this wild diagram in https://twitter.com/a_hoverbear/status/1318960787105353728 which I think does not benefit from the big outer vertical span.\n\nThis PR shrinks the outer span to cover just the `match` keyword and scrutinee expression *if* at least one of the highlighted match arms involved in the error is multiline.\n\n**Before:**\n\n<pre>\n<b>error[E0308]: `match` arms have incompatible types</b>\n   <b>--&gt;</b> src/topology/builder.rs:141:35\n    <b>|</b>\n<b>120 |</b>             let transform = match transform {\n    <b>|    _________________________-</b>\n<b>121 |   |</b>             Transform::Function(t) =&gt; {\n    <b>|  _|_______________________________________-</b>\n<b>122 | | |</b>                 filter_event_type(input_rx, input_type).compat().flat_map(|v| {\n<b>123 | | |</b>                     futures::stream::iter(match v {\n<b>124 | | |</b>                         Err(e) =&gt; {\n<b>...   | |</b>\n<b>139 | | |</b>                 .compat();\n<b>140 | | |</b>             }\n    <b>| |_|_____________- this is found to be of type `()`</b>\n<b>141 |   |</b>             Transform::Task(t) =&gt; t\n    <b>|  _|___________________________________^</b>\n<b>142 | | |</b>                 .transform(filter_event_type(input_rx, input_type))\n<b>143 | | |</b>                 .forward(output)\n<b>144 | | |</b>                 .map(|_| debug!(\"Finished\"))\n<b>145 | | |</b>                 .compat(),\n    <b>| |_|_________________________^ expected `()`, found struct `futures::compat::Compat01As03`</b>\n<b>146 |   |</b>         };\n    <b>|   |_________- `match` arms have incompatible types</b>\n    <b>|</b>\n    <b>= note:</b> expected type `<b>()</b>`\n             found struct `<b>futures::compat::Compat01As03&lt;futures::Map&lt;futures::stream::Forward&lt;std::boxed::Box&lt;dyn futures::Stream&lt;Error = (), Item = event::Event&gt; + std::marker::Send&gt;, topology::fanout::Fanout&gt;, [closure@src/topology/builder.rs:144:22: 144:44]&gt;&gt;</b>`\n</pre>\n\n**After:**\n\n<pre>\n<b>error[E0308]: `match` arms have incompatible types</b>\n   <b>--&gt;</b> src/topology/builder.rs:141:35\n    <b>|</b>\n<b>120 |</b>             let transform = match transform {\n    <b>|                             --------------- `match` arms have incompatible types</b>\n<b>121 |</b>                 Transform::Function(t) =&gt; {\n    <b>|  _________________________________________-</b>\n<b>122 | |</b>                   filter_event_type(input_rx, input_type).compat().flat_map(|v| {\n<b>123 | |</b>                       futures::stream::iter(match v {\n<b>124 | |</b>                           Err(e) =&gt; {\n<b>...   |</b>\n<b>139 | |</b>                   .compat();\n<b>140 | |</b>               }\n    <b>| |_______________- this is found to be of type `()`</b>\n<b>141 |</b>                 Transform::Task(t) =&gt; t\n    <b>|  _____________________________________^</b>\n<b>142 | |</b>                   .transform(filter_event_type(input_rx, input_type))\n<b>143 | |</b>                   .forward(output)\n<b>144 | |</b>                   .map(|_| debug!(\"Finished\"))\n<b>145 | |</b>                   .compat(),\n    <b>| |___________________________^ expected `()`, found struct `futures::compat::Compat01As03`</b>\n    <b>|</b>\n    <b>= note:</b> expected type `<b>()</b>`\n             found struct `<b>futures::compat::Compat01As03&lt;futures::Map&lt;futures::stream::Forward&lt;std::boxed::Box&lt;dyn futures::Stream&lt;Error = (), Item = event::Event&gt; + std::marker::Send&gt;, topology::fanout::Fanout&gt;, [closure@src/topology/builder.rs:144:22: 144:44]&gt;&gt;</b>`\n</pre>\n\nFYI @Hoverbear\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba519ec50cf2c48bae64eead90c3fda9110920b", "html_url": "https://github.com/rust-lang/rust/commit/7ba519ec50cf2c48bae64eead90c3fda9110920b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba519ec50cf2c48bae64eead90c3fda9110920b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f462c22b53ee5ae2f56e2b268a15fd4dab9d22c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f462c22b53ee5ae2f56e2b268a15fd4dab9d22c", "html_url": "https://github.com/rust-lang/rust/commit/3f462c22b53ee5ae2f56e2b268a15fd4dab9d22c"}, {"sha": "b0059500f6765612fbda6d33240116f7520d433a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0059500f6765612fbda6d33240116f7520d433a", "html_url": "https://github.com/rust-lang/rust/commit/b0059500f6765612fbda6d33240116f7520d433a"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "3a0ec6327c18643297e2e4978e6e0ea513f397d3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7ba519ec50cf2c48bae64eead90c3fda9110920b", "patch": "@@ -619,6 +619,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 scrut_hir_id,\n                 opt_suggest_box_span,\n                 arm_span,\n+                scrut_span,\n                 ..\n             }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -664,18 +665,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         Some(ty::error::ExpectedFound { expected, .. }) => expected,\n                         _ => last_ty,\n                     });\n-                    let msg = \"`match` arms have incompatible types\";\n-                    err.span_label(cause.span, msg);\n+                    let source_map = self.tcx.sess.source_map();\n+                    let mut any_multiline_arm = source_map.is_multiline(arm_span);\n                     if prior_arms.len() <= 4 {\n                         for sp in prior_arms {\n+                            any_multiline_arm |= source_map.is_multiline(*sp);\n                             err.span_label(*sp, format!(\"this is found to be of type `{}`\", t));\n                         }\n                     } else if let Some(sp) = prior_arms.last() {\n+                        any_multiline_arm |= source_map.is_multiline(*sp);\n                         err.span_label(\n                             *sp,\n                             format!(\"this and all prior arms are found to be of type `{}`\", t),\n                         );\n                     }\n+                    let outer_error_span = if any_multiline_arm {\n+                        // Cover just `match` and the scrutinee expression, not\n+                        // the entire match body, to reduce diagram noise.\n+                        cause.span.shrink_to_lo().to(scrut_span)\n+                    } else {\n+                        cause.span\n+                    };\n+                    let msg = \"`match` arms have incompatible types\";\n+                    err.span_label(outer_error_span, msg);\n                     if let Some(sp) = semi_span {\n                         err.span_suggestion_short(\n                             sp,"}, {"sha": "bbc46b8d6083562ae070a76b14133a1490ffbe7c", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7ba519ec50cf2c48bae64eead90c3fda9110920b", "patch": "@@ -343,6 +343,7 @@ static_assert_size!(ObligationCauseCode<'_>, 32);\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_span: Span,\n+    pub scrut_span: Span,\n     pub semi_span: Option<Span>,\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,"}, {"sha": "398e013e62fb561b0f58da9bec9f8bb6c0388f95", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba519ec50cf2c48bae64eead90c3fda9110920b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=7ba519ec50cf2c48bae64eead90c3fda9110920b", "patch": "@@ -201,6 +201,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         expr.span,\n                         ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                             arm_span,\n+                            scrut_span: scrut.span,\n                             semi_span,\n                             source: match_src,\n                             prior_arms: other_arms.clone(),"}, {"sha": "37f6beabd33028fee52ad5f75bb337ac96dd5b2e", "filename": "src/test/ui/match/match-incompat-type-semi.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ba519ec50cf2c48bae64eead90c3fda9110920b/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba519ec50cf2c48bae64eead90c3fda9110920b/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs?ref=7ba519ec50cf2c48bae64eead90c3fda9110920b", "patch": "@@ -39,4 +39,14 @@ fn main() {\n         None => { //~ ERROR incompatible types\n         },\n     };\n+\n+    let _ = match Some(42) {\n+        Some(x) => \"rust-lang.org\"\n+            .chars()\n+            .skip(1)\n+            .chain(Some(x as u8 as char))\n+            .take(10)\n+            .any(char::is_alphanumeric),\n+        None => {} //~ ERROR incompatible types\n+    };\n }"}, {"sha": "008b1c1e93d6d8641ff095ca498eaaea7651ee61", "filename": "src/test/ui/match/match-incompat-type-semi.stderr", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7ba519ec50cf2c48bae64eead90c3fda9110920b/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba519ec50cf2c48bae64eead90c3fda9110920b/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr?ref=7ba519ec50cf2c48bae64eead90c3fda9110920b", "patch": "@@ -56,19 +56,33 @@ LL | |     };\n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-incompat-type-semi.rs:39:17\n    |\n-LL |        let _ = match Some(42) {\n-   |   _____________-\n-LL |  |         Some(x) => {\n-LL |  |             x\n-   |  |             - this is found to be of type `{integer}`\n-LL |  |         },\n-LL |  |         None => {\n-   |  |_________________^\n-LL | ||         },\n-   | ||_________^ expected integer, found `()`\n-LL |  |     };\n-   |  |_____- `match` arms have incompatible types\n+LL |       let _ = match Some(42) {\n+   |               -------------- `match` arms have incompatible types\n+LL |           Some(x) => {\n+LL |               x\n+   |               - this is found to be of type `{integer}`\n+LL |           },\n+LL |           None => {\n+   |  _________________^\n+LL | |         },\n+   | |_________^ expected integer, found `()`\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/match-incompat-type-semi.rs:50:17\n+   |\n+LL |       let _ = match Some(42) {\n+   |               -------------- `match` arms have incompatible types\n+LL |           Some(x) => \"rust-lang.org\"\n+   |  ____________________-\n+LL | |             .chars()\n+LL | |             .skip(1)\n+LL | |             .chain(Some(x as u8 as char))\n+LL | |             .take(10)\n+LL | |             .any(char::is_alphanumeric),\n+   | |_______________________________________- this is found to be of type `bool`\n+LL |           None => {}\n+   |                   ^^ expected `bool`, found `()`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}