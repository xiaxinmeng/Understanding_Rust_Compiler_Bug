{"sha": "d9a36a736bfb91578a36505e7237212959bb55fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTM2YTczNmJmYjkxNTc4YTM2NTA1ZTcyMzcyMTI5NTliYjU1ZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T18:31:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T18:31:51Z"}, "message": "Rename module_id -> local_id", "tree": {"sha": "d7e6ee1b610929f8e7387ef65050470a84f9d854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e6ee1b610929f8e7387ef65050470a84f9d854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a36a736bfb91578a36505e7237212959bb55fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a36a736bfb91578a36505e7237212959bb55fe", "html_url": "https://github.com/rust-lang/rust/commit/d9a36a736bfb91578a36505e7237212959bb55fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a36a736bfb91578a36505e7237212959bb55fe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ec2ceb12df756b3482ddd2b1947e4b38f23706", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ec2ceb12df756b3482ddd2b1947e4b38f23706", "html_url": "https://github.com/rust-lang/rust/commit/47ec2ceb12df756b3482ddd2b1947e4b38f23706"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "5a3e24e9e467664214f6d5e2e6f16c191efee746", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -174,15 +174,15 @@ pub use hir_def::attr::Attrs;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n-        Module { id: ModuleId { krate: krate.crate_id, module_id: crate_module_id } }\n+        Module { id: ModuleId { krate: krate.crate_id, local_id: crate_module_id } }\n     }\n \n     /// Name of this module.\n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let parent = def_map[self.id.module_id].parent?;\n+        let parent = def_map[self.id.local_id].parent?;\n         def_map[parent].children.iter().find_map(|(name, module_id)| {\n-            if *module_id == self.id.module_id {\n+            if *module_id == self.id.local_id {\n                 Some(name.clone())\n             } else {\n                 None\n@@ -206,14 +206,14 @@ impl Module {\n     /// Finds a child module with the specified name.\n     pub fn child(self, db: &impl DefDatabase, name: &Name) -> Option<Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let child_id = def_map[self.id.module_id].children.get(name)?;\n+        let child_id = def_map[self.id.local_id].children.get(name)?;\n         Some(self.with_module_id(*child_id))\n     }\n \n     /// Iterates over all child modules.\n     pub fn children(self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let children = def_map[self.id.module_id]\n+        let children = def_map[self.id.local_id]\n             .children\n             .iter()\n             .map(|(_, module_id)| self.with_module_id(*module_id))\n@@ -224,7 +224,7 @@ impl Module {\n     /// Finds a parent module.\n     pub fn parent(self, db: &impl DefDatabase) -> Option<Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let parent_id = def_map[self.id.module_id].parent?;\n+        let parent_id = def_map[self.id.local_id].parent?;\n         Some(self.with_module_id(parent_id))\n     }\n \n@@ -240,7 +240,7 @@ impl Module {\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n     pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<Import>)> {\n-        db.crate_def_map(self.id.krate)[self.id.module_id]\n+        db.crate_def_map(self.id.krate)[self.id.local_id]\n             .scope\n             .entries()\n             .map(|(name, res)| {\n@@ -250,7 +250,7 @@ impl Module {\n     }\n \n     pub fn diagnostics(self, db: &impl HirDatabase, sink: &mut DiagnosticSink) {\n-        db.crate_def_map(self.id.krate).add_diagnostics(db, self.id.module_id, sink);\n+        db.crate_def_map(self.id.krate).add_diagnostics(db, self.id.local_id, sink);\n         for decl in self.declarations(db) {\n             match decl {\n                 crate::ModuleDef::Function(f) => f.diagnostics(db, sink),\n@@ -275,12 +275,12 @@ impl Module {\n \n     pub fn declarations(self, db: &impl DefDatabase) -> Vec<ModuleDef> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.module_id].scope.declarations().map(ModuleDef::from).collect()\n+        def_map[self.id.local_id].scope.declarations().map(ModuleDef::from).collect()\n     }\n \n     pub fn impl_blocks(self, db: &impl DefDatabase) -> Vec<ImplBlock> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.module_id].impls.iter().copied().map(ImplBlock::from).collect()\n+        def_map[self.id.local_id].impls.iter().copied().map(ImplBlock::from).collect()\n     }\n \n     fn with_module_id(self, module_id: LocalModuleId) -> Module {"}, {"sha": "bf3ee08341e64ccef45b7fe8ddbfc6f12b8795c5", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -22,7 +22,7 @@ impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(self, db: &impl DefDatabase) -> Source<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let src = def_map[self.id.module_id].definition_source(db);\n+        let src = def_map[self.id.local_id].definition_source(db);\n         src.map(|it| match it {\n             Either::A(it) => ModuleSource::SourceFile(it),\n             Either::B(it) => ModuleSource::Module(it),\n@@ -33,7 +33,7 @@ impl Module {\n     /// `None` for the crate root.\n     pub fn declaration_source(self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.module_id].declaration_source(db)\n+        def_map[self.id.local_id].declaration_source(db)\n     }\n }\n "}, {"sha": "7756ca80e7ea59381aced2a5ee320523cc810a43", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -262,13 +262,13 @@ impl Module {\n \n         let original_file = src.file_id.original_file(db);\n \n-        let (krate, module_id) =\n+        let (krate, local_id) =\n             db.relevant_crates(original_file).iter().find_map(|&crate_id| {\n                 let crate_def_map = db.crate_def_map(crate_id);\n-                let local_module_id = crate_def_map.modules_for_file(original_file).next()?;\n-                Some((crate_id, local_module_id))\n+                let local_id = crate_def_map.modules_for_file(original_file).next()?;\n+                Some((crate_id, local_id))\n             })?;\n-        Some(Module { id: ModuleId { krate, module_id } })\n+        Some(Module { id: ModuleId { krate, local_id } })\n     }\n }\n "}, {"sha": "fffb22201d6353b72172cd4ee659b5bdd0681a13", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -35,7 +35,7 @@ impl Attrs {\n         match def {\n             AttrDefId::ModuleId(module) => {\n                 let def_map = db.crate_def_map(module.krate);\n-                let src = match def_map[module.module_id].declaration_source(db) {\n+                let src = match def_map[module.local_id].declaration_source(db) {\n                     Some(it) => it,\n                     None => return Attrs::default(),\n                 };"}, {"sha": "a57a0176d4764d1a2e988f2cd94325e477431fb9", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -82,7 +82,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n-        self.crate_def_map.resolve_path(db, self.module.module_id, path).0.take_macros()\n+        self.crate_def_map.resolve_path(db, self.module.local_id, path).0.take_macros()\n     }\n }\n "}, {"sha": "34ed9b7a5eeecca7c7114b375d163c7fac35c604", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -36,7 +36,7 @@ impl Documentation {\n         match def {\n             AttrDefId::ModuleId(module) => {\n                 let def_map = db.crate_def_map(module.krate);\n-                let src = def_map[module.module_id].declaration_source(db)?;\n+                let src = def_map[module.local_id].declaration_source(db)?;\n                 docs_from_ast(&src.value)\n             }\n             AttrDefId::StructFieldId(it) => {"}, {"sha": "f4fdbdcfc7482c6b5de614300b73dad201160d4d", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -41,7 +41,7 @@ impl LangItems {\n         crate_def_map\n             .modules\n             .iter()\n-            .filter_map(|(module_id, _)| db.module_lang_items(ModuleId { krate, module_id }))\n+            .filter_map(|(local_id, _)| db.module_lang_items(ModuleId { krate, local_id }))\n             .for_each(|it| lang_items.items.extend(it.items.iter().map(|(k, v)| (k.clone(), *v))));\n \n         Arc::new(lang_items)\n@@ -80,7 +80,7 @@ impl LangItems {\n     fn collect_lang_items(&mut self, db: &impl DefDatabase, module: ModuleId) {\n         // Look for impl targets\n         let def_map = db.crate_def_map(module.krate);\n-        let module_data = &def_map[module.module_id];\n+        let module_data = &def_map[module.local_id];\n         for &impl_block in module_data.impls.iter() {\n             self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlockId)\n         }"}, {"sha": "bc553089694a5f191a8050bcd84ecab0dee5417f", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -50,7 +50,7 @@ impl_arena_id!(LocalImportId);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,\n-    pub module_id: LocalModuleId,\n+    pub local_id: LocalModuleId,\n }\n \n /// An ID of a module, **local** to a specific crate"}, {"sha": "6cd14026bc8bae564539f6c710c590f8139205fd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -37,7 +37,7 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         def_map.extern_prelude.insert(\n             dep.as_name(),\n-            ModuleId { krate: dep.crate_id, module_id: dep_def_map.root }.into(),\n+            ModuleId { krate: dep.crate_id, local_id: dep_def_map.root }.into(),\n         );\n \n         // look for the prelude\n@@ -323,7 +323,7 @@ where\n                         tested_by!(glob_across_crates);\n                         // glob import from other crate => we can just import everything once\n                         let item_map = self.db.crate_def_map(m.krate);\n-                        let scope = &item_map[m.module_id].scope;\n+                        let scope = &item_map[m.local_id].scope;\n \n                         // Module scoped macros is included\n                         let items = scope\n@@ -337,7 +337,7 @@ where\n                         // glob import from same crate => we do an initial\n                         // import, and then need to propagate any further\n                         // additions\n-                        let scope = &self.def_map[m.module_id].scope;\n+                        let scope = &self.def_map[m.local_id].scope;\n \n                         // Module scoped macros is included\n                         let items = scope\n@@ -349,7 +349,7 @@ where\n                         self.update(module_id, Some(import_id), &items);\n                         // record the glob import in case we add further items\n                         self.glob_imports\n-                            .entry(m.module_id)\n+                            .entry(m.local_id)\n                             .or_default()\n                             .push((module_id, import_id));\n                     }\n@@ -590,7 +590,7 @@ where\n                     raw::RawItemKind::Impl(imp) => {\n                         let module = ModuleId {\n                             krate: self.def_collector.def_map.krate,\n-                            module_id: self.module_id,\n+                            local_id: self.module_id,\n                         };\n                         let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n                         let imp_id = ImplId::from_ast_id(ctx, self.raw_items[imp].ast_id);\n@@ -673,7 +673,7 @@ where\n         modules[self.module_id].children.insert(name.clone(), res);\n         let resolution = Resolution {\n             def: PerNs::types(\n-                ModuleId { krate: self.def_collector.def_map.krate, module_id: res }.into(),\n+                ModuleId { krate: self.def_collector.def_map.krate, local_id: res }.into(),\n             ),\n             import: None,\n         };\n@@ -683,7 +683,7 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData) {\n         let module =\n-            ModuleId { krate: self.def_collector.def_map.krate, module_id: self.module_id };\n+            ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };\n         let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n \n         let name = def.name.clone();"}, {"sha": "b72c55bd10e8aa3f76b93b1d26c2310679998cdc", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -74,19 +74,19 @@ impl CrateDefMap {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n                     tested_by!(macro_dollar_crate_self);\n-                    PerNs::types(ModuleId { krate: self.krate, module_id: self.root }.into())\n+                    PerNs::types(ModuleId { krate: self.krate, local_id: self.root }.into())\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n-                    let module = ModuleId { krate, module_id: def_map.root };\n+                    let module = ModuleId { krate, local_id: def_map.root };\n                     tested_by!(macro_dollar_crate_other);\n                     PerNs::types(module.into())\n                 }\n             }\n             PathKind::Crate => {\n-                PerNs::types(ModuleId { krate: self.krate, module_id: self.root }.into())\n+                PerNs::types(ModuleId { krate: self.krate, local_id: self.root }.into())\n             }\n             PathKind::Self_ => {\n-                PerNs::types(ModuleId { krate: self.krate, module_id: original_module }.into())\n+                PerNs::types(ModuleId { krate: self.krate, local_id: original_module }.into())\n             }\n             // plain import or absolute path in 2015: crate-relative with\n             // fallback to extern prelude (with the simplification in\n@@ -113,7 +113,7 @@ impl CrateDefMap {\n             }\n             PathKind::Super => {\n                 if let Some(p) = self.modules[original_module].parent {\n-                    PerNs::types(ModuleId { krate: self.krate, module_id: p }.into())\n+                    PerNs::types(ModuleId { krate: self.krate, local_id: p }.into())\n                 } else {\n                     log::debug!(\"super path in root module\");\n                     return ResolvePathResult::empty(ReachedFixedPoint::Yes);\n@@ -160,7 +160,7 @@ impl CrateDefMap {\n                             Path { segments: path.segments[i..].to_vec(), kind: PathKind::Self_ };\n                         log::debug!(\"resolving {:?} in other crate\", path);\n                         let defp_map = db.crate_def_map(module.krate);\n-                        let (def, s) = defp_map.resolve_path(db, module.module_id, &path);\n+                        let (def, s) = defp_map.resolve_path(db, module.local_id, &path);\n                         return ResolvePathResult::with(\n                             def,\n                             ReachedFixedPoint::Yes,\n@@ -169,7 +169,7 @@ impl CrateDefMap {\n                     }\n \n                     // Since it is a qualified path here, it should not contains legacy macros\n-                    match self[module.module_id].scope.get(&segment.name) {\n+                    match self[module.local_id].scope.get(&segment.name) {\n                         Some(res) => res.def,\n                         _ => {\n                             log::debug!(\"path segment {:?} not found\", segment.name);\n@@ -254,7 +254,7 @@ impl CrateDefMap {\n                 keep = db.crate_def_map(prelude.krate);\n                 &keep\n             };\n-            def_map[prelude.module_id].scope.get(name).map_or_else(PerNs::none, |res| res.def)\n+            def_map[prelude.local_id].scope.get(name).map_or_else(PerNs::none, |res| res.def)\n         } else {\n             PerNs::none()\n         }"}, {"sha": "0847f6dcf45d0b81e62415856ec091ae84c19723", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -325,7 +325,7 @@ impl Resolver {\n             if let Scope::ModuleScope(m) = scope {\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n-                    traits.extend(prelude_def_map[prelude.module_id].scope.traits());\n+                    traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                 }\n                 traits.extend(m.crate_def_map[m.module_id].scope.traits());\n             }\n@@ -402,7 +402,7 @@ impl Scope {\n                 });\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n-                    prelude_def_map[prelude.module_id].scope.entries().for_each(|(name, res)| {\n+                    prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, res)| {\n                         f(name.clone(), ScopeDef::PerNs(res.def));\n                     });\n                 }\n@@ -492,7 +492,7 @@ pub trait HasResolver: Copy {\n impl HasResolver for ModuleId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let def_map = db.crate_def_map(self.krate);\n-        Resolver::default().push_module_scope(def_map, self.module_id)\n+        Resolver::default().push_module_scope(def_map, self.local_id)\n     }\n }\n "}, {"sha": "1dc9793f950a0287256d17742e1c25175568cafd", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -73,9 +73,9 @@ impl TestDB {\n     pub fn module_for_file(&self, file_id: FileId) -> ModuleId {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (module_id, data) in crate_def_map.modules.iter() {\n+            for (local_id, data) in crate_def_map.modules.iter() {\n                 if data.definition == Some(file_id) {\n-                    return ModuleId { krate, module_id };\n+                    return ModuleId { krate, local_id };\n                 }\n             }\n         }"}, {"sha": "c8461b447add1b2073d5e8a9fa6e4de3ce17797e", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a36a736bfb91578a36505e7237212959bb55fe/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=d9a36a736bfb91578a36505e7237212959bb55fe", "patch": "@@ -4677,7 +4677,7 @@ fn type_at_pos(db: &TestDB, pos: FilePosition) -> String {\n \n     let module = db.module_for_file(pos.file_id);\n     let crate_def_map = db.crate_def_map(module.krate);\n-    for decl in crate_def_map[module.module_id].scope.declarations() {\n+    for decl in crate_def_map[module.local_id].scope.declarations() {\n         if let ModuleDefId::FunctionId(func) = decl {\n             let (_body, source_map) = db.body_with_source_map(func.into());\n             if let Some(expr_id) = source_map.node_expr(Source::new(pos.file_id.into(), &expr)) {\n@@ -4753,7 +4753,7 @@ fn infer(content: &str) -> String {\n     let crate_def_map = db.crate_def_map(module.krate);\n \n     let mut defs: Vec<DefWithBodyId> = Vec::new();\n-    visit_module(&db, &crate_def_map, module.module_id, &mut |it| defs.push(it));\n+    visit_module(&db, &crate_def_map, module.local_id, &mut |it| defs.push(it));\n     defs.sort_by_key(|def| match def {\n         DefWithBodyId::FunctionId(it) => {\n             it.lookup(&db).ast_id.to_node(&db).syntax().text_range().start()\n@@ -4796,7 +4796,7 @@ fn visit_module(\n                     }\n                 }\n             }\n-            ModuleDefId::ModuleId(it) => visit_module(db, crate_def_map, it.module_id, cb),\n+            ModuleDefId::ModuleId(it) => visit_module(db, crate_def_map, it.local_id, cb),\n             _ => (),\n         }\n     }\n@@ -4844,7 +4844,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         let events = db.log_executed(|| {\n             let module = db.module_for_file(pos.file_id);\n             let crate_def_map = db.crate_def_map(module.krate);\n-            visit_module(&db, &crate_def_map, module.module_id, &mut |def| {\n+            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n                 db.infer(def);\n             });\n         });\n@@ -4866,7 +4866,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n         let events = db.log_executed(|| {\n             let module = db.module_for_file(pos.file_id);\n             let crate_def_map = db.crate_def_map(module.krate);\n-            visit_module(&db, &crate_def_map, module.module_id, &mut |def| {\n+            visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n                 db.infer(def);\n             });\n         });"}]}