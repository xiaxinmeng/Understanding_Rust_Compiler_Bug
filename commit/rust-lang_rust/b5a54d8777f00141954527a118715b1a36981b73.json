{"sha": "b5a54d8777f00141954527a118715b1a36981b73", "node_id": "C_kwDOAAsO6NoAKGI1YTU0ZDg3NzdmMDAxNDE5NTQ1MjdhMTE4NzE1YjFhMzY5ODFiNzM", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-05T23:19:57Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-10T09:19:02Z"}, "message": "Move `is_trivially_pure_clone_copy` onto `Ty` instead", "tree": {"sha": "c3dce57d5e190e1a3e8db9431cf8b065ebeee8c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3dce57d5e190e1a3e8db9431cf8b065ebeee8c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5a54d8777f00141954527a118715b1a36981b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a54d8777f00141954527a118715b1a36981b73", "html_url": "https://github.com/rust-lang/rust/commit/b5a54d8777f00141954527a118715b1a36981b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5a54d8777f00141954527a118715b1a36981b73/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "html_url": "https://github.com/rust-lang/rust/commit/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "f94fd1e2e6d982fa466ce11fabc8119414283d26", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b5a54d8777f00141954527a118715b1a36981b73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a54d8777f00141954527a118715b1a36981b73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b5a54d8777f00141954527a118715b1a36981b73", "patch": "@@ -2371,6 +2371,57 @@ impl<'tcx> Ty<'tcx> {\n             }\n         }\n     }\n+\n+    /// Fast path helper for primitives which are always `Copy` and which\n+    /// have a side-effect-free `Clone` impl.\n+    ///\n+    /// Returning true means the type is known to be pure and `Copy+Clone`.\n+    /// Returning `false` means nothing -- could be `Copy`, might not be.\n+    ///\n+    /// This is mostly useful for optimizations, as there are the types\n+    /// on which we can replace cloning with dereferencing.\n+    pub fn is_trivially_pure_clone_copy(self) -> bool {\n+        match self.kind() {\n+            ty::Bool | ty::Char | ty::Never => true,\n+\n+            // These aren't even `Clone`\n+            ty::Str | ty::Slice(..) | ty::Foreign(..) | ty::Dynamic(..) => false,\n+\n+            ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n+\n+            // The voldemort ZSTs are fine.\n+            ty::FnDef(..) => true,\n+\n+            ty::Array(element_ty, _len) => element_ty.is_trivially_pure_clone_copy(),\n+\n+            // A 100-tuple isn't \"trivial\", so doing this only for reasonable sizes.\n+            ty::Tuple(field_tys) => {\n+                field_tys.len() <= 3 && field_tys.iter().all(Self::is_trivially_pure_clone_copy)\n+            }\n+\n+            // Sometimes traits aren't implemented for every ABI or arity,\n+            // because we can't be generic over everything yet.\n+            ty::FnPtr(..) => false,\n+\n+            // Definitely absolutely not copy.\n+            ty::Ref(_, _, hir::Mutability::Mut) => false,\n+\n+            // Thin pointers & thin shared references are pure-clone-copy, but for\n+            // anything with custom metadata it might be more complicated.\n+            ty::Ref(_, _, hir::Mutability::Not) | ty::RawPtr(..) => false,\n+\n+            ty::Generator(..) | ty::GeneratorWitness(..) => false,\n+\n+            // Might be, but not \"trivial\" so just giving the safe answer.\n+            ty::Adt(..) | ty::Closure(..) | ty::Opaque(..) => false,\n+\n+            ty::Projection(..) | ty::Param(..) | ty::Infer(..) | ty::Error(..) => false,\n+\n+            ty::Bound(..) | ty::Placeholder(..) => {\n+                bug!(\"`is_trivially_pure_clone_copy` applied to unexpected type: {:?}\", self);\n+            }\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "d1c4a4b21d0a2e3f4fe886ab5738053c2022c71a", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5a54d8777f00141954527a118715b1a36981b73/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a54d8777f00141954527a118715b1a36981b73/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=b5a54d8777f00141954527a118715b1a36981b73", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,\n     Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::{self, Ty, TyCtxt, TyKind};\n+use rustc_middle::ty::{self, TyCtxt};\n \n pub struct InstCombine;\n \n@@ -168,7 +168,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         let ty::Ref(_region, inner_ty, Mutability::Not) = *arg_ty.kind()\n         else { return };\n \n-        if !is_trivially_pure_copy(self.tcx, inner_ty) {\n+        if !inner_ty.is_trivially_pure_clone_copy() {\n             return;\n         }\n \n@@ -202,13 +202,3 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n }\n-\n-fn is_trivially_pure_copy<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    use TyKind::*;\n-    match *ty.kind() {\n-        Bool | Char | Int(..) | Uint(..) | Float(..) => true,\n-        Array(element_ty, _len) => is_trivially_pure_copy(tcx, element_ty),\n-        Tuple(field_tys) => field_tys.iter().all(|x| is_trivially_pure_copy(tcx, x)),\n-        _ => false,\n-    }\n-}"}]}