{"sha": "be7c363182554aab48e0d5cc48be46d998017035", "node_id": "C_kwDOAAsO6NoAKGJlN2MzNjMxODI1NTRhYWI0OGUwZDVjYzQ4YmU0NmQ5OTgwMTcwMzU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-02T01:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T01:34:21Z"}, "message": "Rollup merge of #95373 - RalfJung:invalid_value, r=davidtwco\n\ninvalid_value lint: detect invalid initialization of arrays", "tree": {"sha": "ad30d411ea5d27e7db4ffadb447fafd8c454e4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad30d411ea5d27e7db4ffadb447fafd8c454e4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be7c363182554aab48e0d5cc48be46d998017035", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiR6geCRBK7hj4Ov3rIwAALx4IAEnw5gs5Il9O5RE3jY6KsqWv\n8/DSY1hVRjZ9sYXVwtsBWQIBqn/i8tcR36tHnNtragKGIfQP/rW6kTLS8JwTPuHV\nbDUmHGWDK+igOvkTbctiSNiIk2RmCGtJS2TP5eFur5nSxR0zZCOp03yL17nFidTg\n/0SsITT9cbn5kPeC01We8hUaaAr6DyaBxKcGTlXilqp6aR3kyeGxUX1oGEBbpRs4\n28mBrgCJUqNgdzAJ4YqbHb6JvNh9gfhmM/Kz/9/YyJix2ou097cXm6KlTJeMxVjT\nP9VXJXcnQAtwsk/01+HvHCVRAZKTA7BuS46oYlEyAPpT6+J7LVuNC9YUiwwaZZ8=\n=ha5o\n-----END PGP SIGNATURE-----\n", "payload": "tree ad30d411ea5d27e7db4ffadb447fafd8c454e4a3\nparent d7a24003d865cb3e17f82073c1ba8cbe6e7dea02\nparent af24588a06b9fbed47495c787c20e930398bbb86\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648863261 +0200\ncommitter GitHub <noreply@github.com> 1648863261 +0200\n\nRollup merge of #95373 - RalfJung:invalid_value, r=davidtwco\n\ninvalid_value lint: detect invalid initialization of arrays\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be7c363182554aab48e0d5cc48be46d998017035", "html_url": "https://github.com/rust-lang/rust/commit/be7c363182554aab48e0d5cc48be46d998017035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be7c363182554aab48e0d5cc48be46d998017035/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "html_url": "https://github.com/rust-lang/rust/commit/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02"}, {"sha": "af24588a06b9fbed47495c787c20e930398bbb86", "url": "https://api.github.com/repos/rust-lang/rust/commits/af24588a06b9fbed47495c787c20e930398bbb86", "html_url": "https://github.com/rust-lang/rust/commit/af24588a06b9fbed47495c787c20e930398bbb86"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "d43c661dda6fa2342b0efc673718e1484683f2bd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be7c363182554aab48e0d5cc48be46d998017035/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be7c363182554aab48e0d5cc48be46d998017035/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=be7c363182554aab48e0d5cc48be46d998017035", "patch": "@@ -2548,7 +2548,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n         /// Return `Some` only if we are sure this type does *not*\n         /// allow zero initialization.\n         fn ty_find_init_error<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n+            cx: &LateContext<'tcx>,\n             ty: Ty<'tcx>,\n             init: InitKind,\n         ) -> Option<InitError> {\n@@ -2575,7 +2575,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n                     // First check if this ADT has a layout attribute (like `NonNull` and friends).\n                     use std::ops::Bound;\n-                    match tcx.layout_scalar_valid_range(adt_def.did()) {\n+                    match cx.tcx.layout_scalar_valid_range(adt_def.did()) {\n                         // We exploit here that `layout_scalar_valid_range` will never\n                         // return `Bound::Excluded`.  (And we have tests checking that we\n                         // handle the attribute correctly.)\n@@ -2603,12 +2603,12 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                             // Proceed recursively, check all fields.\n                             let variant = &adt_def.variant(VariantIdx::from_u32(0));\n                             variant.fields.iter().find_map(|field| {\n-                                ty_find_init_error(tcx, field.ty(tcx, substs), init).map(\n+                                ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(\n                                     |(mut msg, span)| {\n                                         if span.is_none() {\n                                             // Point to this field, should be helpful for figuring\n                                             // out where the source of the error is.\n-                                            let span = tcx.def_span(field.did);\n+                                            let span = cx.tcx.def_span(field.did);\n                                             write!(\n                                                 &mut msg,\n                                                 \" (in this {} field)\",\n@@ -2627,7 +2627,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         // Multi-variant enum.\n                         _ => {\n                             if init == InitKind::Uninit && is_multi_variant(*adt_def) {\n-                                let span = tcx.def_span(adt_def.did());\n+                                let span = cx.tcx.def_span(adt_def.did());\n                                 Some((\n                                     \"enums have to be initialized to a variant\".to_string(),\n                                     Some(span),\n@@ -2642,7 +2642,16 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 }\n                 Tuple(..) => {\n                     // Proceed recursively, check all fields.\n-                    ty.tuple_fields().iter().find_map(|field| ty_find_init_error(tcx, field, init))\n+                    ty.tuple_fields().iter().find_map(|field| ty_find_init_error(cx, field, init))\n+                }\n+                Array(ty, len) => {\n+                    if matches!(len.try_eval_usize(cx.tcx, cx.param_env), Some(v) if v > 0) {\n+                        // Array length known at array non-empty -- recurse.\n+                        ty_find_init_error(cx, *ty, init)\n+                    } else {\n+                        // Empty array or size unknown.\n+                        None\n+                    }\n                 }\n                 // Conservative fallback.\n                 _ => None,\n@@ -2655,7 +2664,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             // We are extremely conservative with what we warn about.\n             let conjured_ty = cx.typeck_results().expr_ty(expr);\n             if let Some((msg, span)) =\n-                with_no_trimmed_paths!(ty_find_init_error(cx.tcx, conjured_ty, init))\n+                with_no_trimmed_paths!(ty_find_init_error(cx, conjured_ty, init))\n             {\n                 cx.struct_span_lint(INVALID_VALUE, expr.span, |lint| {\n                     let mut err = lint.build(&format!("}, {"sha": "5cd323c01db8cb8234339c3c51c7974300c313a6", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be7c363182554aab48e0d5cc48be46d998017035/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be7c363182554aab48e0d5cc48be46d998017035/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=be7c363182554aab48e0d5cc48be46d998017035", "patch": "@@ -81,6 +81,9 @@ fn main() {\n         let _val: *const dyn Send = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: *const dyn Send = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: [fn(); 2] = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: [fn(); 2] = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Things that can be zero, but not uninit.\n         let _val: bool = mem::zeroed();\n         let _val: bool = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n@@ -94,6 +97,9 @@ fn main() {\n         let _val: Fruit = mem::zeroed();\n         let _val: Fruit = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: [bool; 2] = mem::zeroed();\n+        let _val: [bool; 2] = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Transmute-from-0\n         let _val: &'static i32 = mem::transmute(0usize); //~ ERROR: does not permit zero-initialization\n         let _val: &'static [i32] = mem::transmute((0usize, 0usize)); //~ ERROR: does not permit zero-initialization\n@@ -110,6 +116,8 @@ fn main() {\n         let _val: MaybeUninit<&'static i32> = mem::zeroed();\n         let _val: i32 = mem::zeroed();\n         let _val: bool = MaybeUninit::zeroed().assume_init();\n+        let _val: [bool; 0] = MaybeUninit::uninit().assume_init();\n+        let _val: [!; 0] = MaybeUninit::zeroed().assume_init();\n         // Some things that happen to work due to rustc implementation details,\n         // but are not guaranteed to keep working.\n         let _val: i32 = mem::uninitialized();"}, {"sha": "b6a66f0a95ad193890718915dc427ee0515cf964", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/be7c363182554aab48e0d5cc48be46d998017035/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be7c363182554aab48e0d5cc48be46d998017035/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=be7c363182554aab48e0d5cc48be46d998017035", "patch": "@@ -329,8 +329,30 @@ LL |         let _val: *const dyn Send = mem::uninitialized();\n    |\n    = note: the vtable of a wide raw pointer must be non-null\n \n+error: the type `[fn(); 2]` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:84:31\n+   |\n+LL |         let _val: [fn(); 2] = mem::zeroed();\n+   |                               ^^^^^^^^^^^^^\n+   |                               |\n+   |                               this code causes undefined behavior when executed\n+   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: function pointers must be non-null\n+\n+error: the type `[fn(); 2]` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:85:31\n+   |\n+LL |         let _val: [fn(); 2] = mem::uninitialized();\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |                               |\n+   |                               this code causes undefined behavior when executed\n+   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: function pointers must be non-null\n+\n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:86:26\n+  --> $DIR/uninitialized-zeroed.rs:89:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -341,7 +363,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: booleans must be either `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:89:32\n+  --> $DIR/uninitialized-zeroed.rs:92:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -356,7 +378,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `NonBig` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:92:28\n+  --> $DIR/uninitialized-zeroed.rs:95:28\n    |\n LL |         let _val: NonBig = mem::uninitialized();\n    |                            ^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +389,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    = note: `NonBig` must be initialized inside its custom valid range\n \n error: the type `Fruit` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:95:27\n+  --> $DIR/uninitialized-zeroed.rs:98:27\n    |\n LL |         let _val: Fruit = mem::uninitialized();\n    |                           ^^^^^^^^^^^^^^^^^^^^\n@@ -384,8 +406,19 @@ LL | |     Banana,\n LL | | }\n    | |_^\n \n+error: the type `[bool; 2]` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:101:31\n+   |\n+LL |         let _val: [bool; 2] = mem::uninitialized();\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |                               |\n+   |                               this code causes undefined behavior when executed\n+   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: booleans must be either `true` or `false`\n+\n error: the type `&i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:98:34\n+  --> $DIR/uninitialized-zeroed.rs:104:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -396,7 +429,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: references must be non-null\n \n error: the type `&[i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:99:36\n+  --> $DIR/uninitialized-zeroed.rs:105:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -407,7 +440,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: references must be non-null\n \n error: the type `NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:100:32\n+  --> $DIR/uninitialized-zeroed.rs:106:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -418,7 +451,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:103:34\n+  --> $DIR/uninitialized-zeroed.rs:109:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -429,7 +462,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:104:34\n+  --> $DIR/uninitialized-zeroed.rs:110:34\n    |\n LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -440,7 +473,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:105:26\n+  --> $DIR/uninitialized-zeroed.rs:111:26\n    |\n LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -450,5 +483,5 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |\n    = note: booleans must be either `true` or `false`\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 39 previous errors\n "}]}