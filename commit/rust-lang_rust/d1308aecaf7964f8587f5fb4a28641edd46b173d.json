{"sha": "d1308aecaf7964f8587f5fb4a28641edd46b173d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzA4YWVjYWY3OTY0Zjg1ODdmNWZiNGEyODY0MWVkZDQ2YjE3M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T20:32:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T20:32:22Z"}, "message": "Auto merge of #7292 - Jarcho:suspicious_splitn, r=flip1995\n\nAdd lint `suspicious_splitn`\n\nfixes: #7245\nchangelog: Add lint `suspicious_splitn`", "tree": {"sha": "52ff2b139c8c7cf9cfdcd0f40f0e201775f12fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ff2b139c8c7cf9cfdcd0f40f0e201775f12fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1308aecaf7964f8587f5fb4a28641edd46b173d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1308aecaf7964f8587f5fb4a28641edd46b173d", "html_url": "https://github.com/rust-lang/rust/commit/d1308aecaf7964f8587f5fb4a28641edd46b173d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1308aecaf7964f8587f5fb4a28641edd46b173d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cdba7d08a8a9a70b00167e85e79ed469324f75c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdba7d08a8a9a70b00167e85e79ed469324f75c", "html_url": "https://github.com/rust-lang/rust/commit/5cdba7d08a8a9a70b00167e85e79ed469324f75c"}, {"sha": "5fa08eaf53f0c895e73f4841c240389fda951554", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa08eaf53f0c895e73f4841c240389fda951554", "html_url": "https://github.com/rust-lang/rust/commit/5fa08eaf53f0c895e73f4841c240389fda951554"}], "stats": {"total": 204, "additions": 197, "deletions": 7}, "files": [{"sha": "59daa0742820b3ea2353d6b1e4e1b257497f2e31", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -2671,6 +2671,7 @@ Released 2018-09-13\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n [`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n+[`suspicious_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment"}, {"sha": "0e815be9bd566a7bc5a9cb0e0964af06c49996c6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -779,6 +779,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::SKIP_WHILE_NEXT,\n         methods::STRING_EXTEND_CHARS,\n         methods::SUSPICIOUS_MAP,\n+        methods::SUSPICIOUS_SPLITN,\n         methods::UNINIT_ASSUMED_INIT,\n         methods::UNNECESSARY_FILTER_MAP,\n         methods::UNNECESSARY_FOLD,\n@@ -1312,6 +1313,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::SKIP_WHILE_NEXT),\n         LintId::of(methods::STRING_EXTEND_CHARS),\n         LintId::of(methods::SUSPICIOUS_MAP),\n+        LintId::of(methods::SUSPICIOUS_SPLITN),\n         LintId::of(methods::UNINIT_ASSUMED_INIT),\n         LintId::of(methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(methods::UNNECESSARY_FOLD),\n@@ -1688,6 +1690,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(methods::CLONE_DOUBLE_REF),\n         LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+        LintId::of(methods::SUSPICIOUS_SPLITN),\n         LintId::of(methods::UNINIT_ASSUMED_INIT),\n         LintId::of(methods::ZST_OFFSET),\n         LintId::of(minmax::MIN_MAX),"}, {"sha": "a6e2e0baadbb091143b14eb54587284fe3d58939", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -48,6 +48,7 @@ mod single_char_push_string;\n mod skip_while_next;\n mod string_extend_chars;\n mod suspicious_map;\n+mod suspicious_splitn;\n mod uninit_assumed_init;\n mod unnecessary_filter_map;\n mod unnecessary_fold;\n@@ -1633,6 +1634,36 @@ declare_clippy_lint! {\n     \"replace `.iter().count()` with `.len()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for calls to [`splitn`]\n+    /// (https://doc.rust-lang.org/std/primitive.str.html#method.splitn) and\n+    /// related functions with either zero or one splits.\n+    ///\n+    /// **Why is this bad?** These calls don't actually split the value and are\n+    /// likely to be intended as a different number.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let s = \"\";\n+    /// for x in s.splitn(1, \":\") {\n+    ///     // use x\n+    /// }\n+    ///\n+    /// // Good\n+    /// let s = \"\";\n+    /// for x in s.splitn(2, \":\") {\n+    ///     // use x\n+    /// }\n+    /// ```\n+    pub SUSPICIOUS_SPLITN,\n+    correctness,\n+    \"checks for `.splitn(0, ..)` and `.splitn(1, ..)`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -1705,7 +1736,8 @@ impl_lint_pass!(Methods => [\n     MAP_COLLECT_RESULT_UNIT,\n     FROM_ITER_INSTEAD_OF_COLLECT,\n     INSPECT_FOR_EACH,\n-    IMPLICIT_CLONE\n+    IMPLICIT_CLONE,\n+    SUSPICIOUS_SPLITN\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2024,6 +2056,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");\n                 }\n             },\n+            (\"splitn\" | \"splitn_mut\" | \"rsplitn\" | \"rsplitn_mut\", [count_arg, _]) => {\n+                suspicious_splitn::check(cx, name, expr, recv, count_arg);\n+            },\n             (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n             (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                 implicit_clone::check(cx, name, expr, recv, span);"}, {"sha": "a271df60572a22f0969910f22a5bc1c1828dabca", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -0,0 +1,56 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Spanned;\n+\n+use super::SUSPICIOUS_SPLITN;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    method_name: &str,\n+    expr: &Expr<'_>,\n+    self_arg: &Expr<'_>,\n+    count_arg: &Expr<'_>,\n+) {\n+    if_chain! {\n+        if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg);\n+        if count <= 1;\n+        if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n+        let lang_items = cx.tcx.lang_items();\n+        if lang_items.slice_impl() == Some(impl_id) || lang_items.str_impl() == Some(impl_id);\n+        then {\n+            // Ignore empty slice and string literals when used with a literal count.\n+            if (matches!(self_arg.kind, ExprKind::Array([]))\n+                || matches!(self_arg.kind, ExprKind::Lit(Spanned { node: LitKind::Str(s, _), .. }) if s.is_empty())\n+            ) && matches!(count_arg.kind, ExprKind::Lit(_))\n+            {\n+                return;\n+            }\n+\n+            let (msg, note_msg) = if count == 0 {\n+                (format!(\"`{}` called with `0` splits\", method_name),\n+                \"the resulting iterator will always return `None`\")\n+            } else {\n+                (format!(\"`{}` called with `1` split\", method_name),\n+                if lang_items.slice_impl() == Some(impl_id) {\n+                    \"the resulting iterator will always return the entire slice followed by `None`\"\n+                } else {\n+                    \"the resulting iterator will always return the entire string followed by `None`\"\n+                })\n+            };\n+\n+            span_lint_and_note(\n+                cx,\n+                SUSPICIOUS_SPLITN,\n+                expr.span,\n+                &msg,\n+                None,\n+                note_msg,\n+            );\n+        }\n+    }\n+}"}, {"sha": "1abd2b7883df0bd06f0fd5e456c4f29c6d350060", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -25,8 +25,8 @@ fn main() {\n     x.rsplit('x');\n     x.split_terminator('x');\n     x.rsplit_terminator('x');\n-    x.splitn(0, 'x');\n-    x.rsplitn(0, 'x');\n+    x.splitn(2, 'x');\n+    x.rsplitn(2, 'x');\n     x.matches('x');\n     x.rmatches('x');\n     x.match_indices('x');"}, {"sha": "e662bf34be2ceffb5ba409fe03613bbdb3710494", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -25,8 +25,8 @@ fn main() {\n     x.rsplit(\"x\");\n     x.split_terminator(\"x\");\n     x.rsplit_terminator(\"x\");\n-    x.splitn(0, \"x\");\n-    x.rsplitn(0, \"x\");\n+    x.splitn(2, \"x\");\n+    x.rsplitn(2, \"x\");\n     x.matches(\"x\");\n     x.rmatches(\"x\");\n     x.match_indices(\"x\");"}, {"sha": "22d4b2d460fb047e217091ac1ff741c4a20e93bf", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -75,13 +75,13 @@ LL |     x.rsplit_terminator(\"x\");\n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:28:17\n    |\n-LL |     x.splitn(0, \"x\");\n+LL |     x.splitn(2, \"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:29:18\n    |\n-LL |     x.rsplitn(0, \"x\");\n+LL |     x.rsplitn(2, \"x\");\n    |                  ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern"}, {"sha": "a21d94cf20bb1238195c5ffd451b68200d7da0dd", "filename": "tests/ui/suspicious_splitn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_splitn.rs?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -0,0 +1,20 @@\n+#![warn(clippy::suspicious_splitn)]\n+\n+fn main() {\n+    let _ = \"a,b,c\".splitn(3, ',');\n+    let _ = [0, 1, 2, 1, 3].splitn(3, |&x| x == 1);\n+    let _ = \"\".splitn(0, ',');\n+    let _ = [].splitn(0, |&x: &u32| x == 1);\n+\n+    let _ = \"a,b\".splitn(0, ',');\n+    let _ = \"a,b\".rsplitn(0, ',');\n+    let _ = \"a,b\".splitn(1, ',');\n+    let _ = [0, 1, 2].splitn(0, |&x| x == 1);\n+    let _ = [0, 1, 2].splitn_mut(0, |&x| x == 1);\n+    let _ = [0, 1, 2].splitn(1, |&x| x == 1);\n+    let _ = [0, 1, 2].rsplitn_mut(1, |&x| x == 1);\n+\n+    const X: usize = 0;\n+    let _ = \"a,b\".splitn(X + 1, ',');\n+    let _ = \"a,b\".splitn(X, ',');\n+}"}, {"sha": "b6220ae239339fbd0c162c03d0c9f905facbab89", "filename": "tests/ui/suspicious_splitn.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsuspicious_splitn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1308aecaf7964f8587f5fb4a28641edd46b173d/tests%2Fui%2Fsuspicious_splitn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_splitn.stderr?ref=d1308aecaf7964f8587f5fb4a28641edd46b173d", "patch": "@@ -0,0 +1,75 @@\n+error: `splitn` called with `0` splits\n+  --> $DIR/suspicious_splitn.rs:9:13\n+   |\n+LL |     let _ = \"a,b\".splitn(0, ',');\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::suspicious-splitn` implied by `-D warnings`\n+   = note: the resulting iterator will always return `None`\n+\n+error: `rsplitn` called with `0` splits\n+  --> $DIR/suspicious_splitn.rs:10:13\n+   |\n+LL |     let _ = \"a,b\".rsplitn(0, ',');\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return `None`\n+\n+error: `splitn` called with `1` split\n+  --> $DIR/suspicious_splitn.rs:11:13\n+   |\n+LL |     let _ = \"a,b\".splitn(1, ',');\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return the entire string followed by `None`\n+\n+error: `splitn` called with `0` splits\n+  --> $DIR/suspicious_splitn.rs:12:13\n+   |\n+LL |     let _ = [0, 1, 2].splitn(0, |&x| x == 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return `None`\n+\n+error: `splitn_mut` called with `0` splits\n+  --> $DIR/suspicious_splitn.rs:13:13\n+   |\n+LL |     let _ = [0, 1, 2].splitn_mut(0, |&x| x == 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return `None`\n+\n+error: `splitn` called with `1` split\n+  --> $DIR/suspicious_splitn.rs:14:13\n+   |\n+LL |     let _ = [0, 1, 2].splitn(1, |&x| x == 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return the entire slice followed by `None`\n+\n+error: `rsplitn_mut` called with `1` split\n+  --> $DIR/suspicious_splitn.rs:15:13\n+   |\n+LL |     let _ = [0, 1, 2].rsplitn_mut(1, |&x| x == 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return the entire slice followed by `None`\n+\n+error: `splitn` called with `1` split\n+  --> $DIR/suspicious_splitn.rs:18:13\n+   |\n+LL |     let _ = \"a,b\".splitn(X + 1, ',');\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return the entire string followed by `None`\n+\n+error: `splitn` called with `0` splits\n+  --> $DIR/suspicious_splitn.rs:19:13\n+   |\n+LL |     let _ = \"a,b\".splitn(X, ',');\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the resulting iterator will always return `None`\n+\n+error: aborting due to 9 previous errors\n+"}]}