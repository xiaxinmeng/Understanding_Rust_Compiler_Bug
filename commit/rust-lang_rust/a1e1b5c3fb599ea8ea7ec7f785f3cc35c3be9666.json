{"sha": "a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZTFiNWMzZmI1OTllYThlYTdlYzdmNzg1ZjNjYzM1YzNiZTk2NjY=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-06-19T03:24:29Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-07-08T21:46:23Z"}, "message": "rework `LineWriter` example\n\nThe original example didn't check the return value of `write()`, didn't\nflush the writer, and didn't properly demonstrate the buffering.\n\nFixes #51621.", "tree": {"sha": "4c10899ed9b6e65c935193343b8c7d4d9452100b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c10899ed9b6e65c935193343b8c7d4d9452100b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAltChnwWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdP16B/9F/vsKjkXZvF+xo0tRRqeP5//F\nxqP3qxrC42qmDf3rm99tJoeJEnyGIN3iP5ADprZbE0UwGvn5h+AsdA/ZmBmHAM1i\nj/wY3G937fGudxByaaubTgdTJQhLBW2sfwg3tzIEVVwE9QIDtk51mcmIa1MhryLt\nk/d7wKGSqbkU5vG4kyYt7XRy26FABZQTeajRoBwToGGnFFYQGlBu/mhsrGkBk4O9\nGl6YaSKXC2ii7S1vb1KCjQVnxJjxkGD8wfBpIoAgfVTSpJ0bb9eLR1mPMtUiJqH5\nUOkgwZgkaqLG8zmhx/DddOpAibkyyoEX4J6r/JvjUdyOkQDwwM3uFB62WTTw\n=7mCO\n-----END PGP SIGNATURE-----", "payload": "tree 4c10899ed9b6e65c935193343b8c7d4d9452100b\nparent 0c0315cfd9750db7793b83bc59dfd353c5dd1624\nauthor Andy Russell <arussell123@gmail.com> 1529378669 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1531086383 -0400\n\nrework `LineWriter` example\n\nThe original example didn't check the return value of `write()`, didn't\nflush the writer, and didn't properly demonstrate the buffering.\n\nFixes #51621.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666", "html_url": "https://github.com/rust-lang/rust/commit/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0315cfd9750db7793b83bc59dfd353c5dd1624", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0315cfd9750db7793b83bc59dfd353c5dd1624", "html_url": "https://github.com/rust-lang/rust/commit/0c0315cfd9750db7793b83bc59dfd353c5dd1624"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "ed085d5c0df8ef87e298009aa4ff6db4275197b6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a1e1b5c3fb599ea8ea7ec7f785f3cc35c3be9666", "patch": "@@ -738,7 +738,7 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// reducing the number of actual writes to the file.\n ///\n /// ```no_run\n-/// use std::fs::File;\n+/// use std::fs::{self, File};\n /// use std::io::prelude::*;\n /// use std::io::LineWriter;\n ///\n@@ -752,17 +752,31 @@ impl<W> fmt::Display for IntoInnerError<W> {\n ///     let file = File::create(\"poem.txt\")?;\n ///     let mut file = LineWriter::new(file);\n ///\n-///     for &byte in road_not_taken.iter() {\n-///        file.write(&[byte]).unwrap();\n-///     }\n+///     file.write_all(b\"I shall be telling this with a sigh\")?;\n+///\n+///     // No bytes are written until a newline is encountered (or\n+///     // the internal buffer is filled).\n+///     assert_eq!(fs::read_to_string(\"poem.txt\")?.as_bytes(), b\"\");\n+///     file.write_all(b\"\\n\")?;\n+///     assert_eq!(\n+///         fs::read_to_string(\"poem.txt\")?.as_bytes(),\n+///         &b\"I shall be telling this with a sigh\\n\"[..],\n+///     );\n ///\n-///     // let's check we did the right thing.\n-///     let mut file = File::open(\"poem.txt\")?;\n-///     let mut contents = String::new();\n+///     // Write the rest of the poem.\n+///     file.write_all(b\"Somewhere ages and ages hence:\n+/// Two roads diverged in a wood, and I -\n+/// I took the one less traveled by,\n+/// And that has made all the difference.\")?;\n ///\n-///     file.read_to_string(&mut contents)?;\n+///     // The last line of the poem doesn't end in a newline, so\n+///     // we have to flush or drop the `LineWriter` to finish\n+///     // writing.\n+///     file.flush()?;\n ///\n-///     assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n+///     // Confirm the whole poem was written.\n+///     let mut poem = fs::read_to_string(\"poem.txt\")?;\n+///     assert_eq!(poem.as_bytes(), &road_not_taken[..]);\n ///     Ok(())\n /// }\n /// ```\n@@ -862,7 +876,7 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// The internal buffer is written out before returning the writer.\n     ///\n-    // # Errors\n+    /// # Errors\n     ///\n     /// An `Err` will be returned if an error occurs while flushing the buffer.\n     ///"}]}