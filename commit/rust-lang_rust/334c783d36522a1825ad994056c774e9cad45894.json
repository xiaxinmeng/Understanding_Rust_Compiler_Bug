{"sha": "334c783d36522a1825ad994056c774e9cad45894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNGM3ODNkMzY1MjJhMTgyNWFkOTk0MDU2Yzc3NGU5Y2FkNDU4OTQ=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-18T03:42:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:55Z"}, "message": "std: adding net::ip::v6 utils and rudimentary tests, huzzah! (see caveats)\n\nlibuv's own ip vetting code appears to in a somewhat woeful state,\nfor both ipv4 and ipv6 (there are some notes in the tests for net_ip, as\nwell as stuff added in uv_ll). They are aware of this and welcome patches.\n\nI have rudimentary code in place that can verify whether the provided str\nip was, in fact, validly parsed by libuv, making a few assumptions:\n\n* for ipv4, we assume that the platform's INADDR_NONE val is 0xffffffff ,\nI should write a helper to return this value from the platform's libc\nheaders instead of hard-coding it in rust.\n* for ipv6, we assume that the library will always return '::' for\nmalformed inputs.. as is the case in 64bit ubuntu. I need to verify this\non other platforms.. but at least the debugging output is in place, so\nif expectations don't line up, it'll be straightforward to address", "tree": {"sha": "0af68a132f58f8ea27ee5086edb2c82965d887f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0af68a132f58f8ea27ee5086edb2c82965d887f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334c783d36522a1825ad994056c774e9cad45894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334c783d36522a1825ad994056c774e9cad45894", "html_url": "https://github.com/rust-lang/rust/commit/334c783d36522a1825ad994056c774e9cad45894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334c783d36522a1825ad994056c774e9cad45894/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6b138630e9b6a9e035be5730c7ef202ba1d4eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b138630e9b6a9e035be5730c7ef202ba1d4eb2", "html_url": "https://github.com/rust-lang/rust/commit/b6b138630e9b6a9e035be5730c7ef202ba1d4eb2"}], "stats": {"total": 115, "additions": 107, "deletions": 8}, "files": [{"sha": "655742b2e2c7565f7783c8c8068a3372a136779b", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 107, "deletions": 8, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/334c783d36522a1825ad994056c774e9cad45894/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334c783d36522a1825ad994056c774e9cad45894/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=334c783d36522a1825ad994056c774e9cad45894", "patch": "@@ -9,6 +9,8 @@ import sockaddr_in = uv::ll::sockaddr_in;\n import sockaddr_in6 = uv::ll::sockaddr_in6;\n import uv_ip4_addr = uv::ll::ip4_addr;\n import uv_ip4_name = uv::ll::ip4_name;\n+import uv_ip6_addr = uv::ll::ip6_addr;\n+import uv_ip6_name = uv::ll::ip6_name;\n \n export ip_addr, parse_addr_err;\n export format_addr;\n@@ -18,7 +20,7 @@ export v4;\n enum ip_addr {\n     #[doc=\"An IPv4 address\"]\n     ipv4(sockaddr_in),\n-    ipv6(u16,u16,u16,u16,u16,u16,u16,u16)\n+    ipv6(sockaddr_in6)\n }\n \n #[doc=\"\n@@ -46,8 +48,14 @@ fn format_addr(ip: ip_addr) -> str {\n             result\n         }\n       }\n-      ipv6(_, _, _, _, _, _, _, _) {\n-        fail \"FIXME (#2651) impl parsing of ipv6 addr\";\n+      ipv6(addr) {\n+        unsafe {\n+            let result = uv_ip6_name(&addr);\n+            if result == \"\" {\n+                fail \"failed to convert inner sockaddr_in address to str\"\n+            }\n+            result\n+        }\n       }\n     }\n }\n@@ -58,7 +66,7 @@ mod v4 {\n \n     # Failure\n \n-j    Fails if the string is not a valid IPv4 address\n+    Fails if the string is not a valid IPv4 address\n \n     # Arguments\n \n@@ -82,16 +90,107 @@ j    Fails if the string is not a valid IPv4 address\n     fn try_parse_addr(ip: str) -> result::result<ip_addr,parse_addr_err> {\n         unsafe {\n             // need to figure out how to establish a parse failure..\n-            result::ok(ipv4(uv_ip4_addr(ip, 22)))\n+            let new_addr = uv_ip4_addr(ip, 22);\n+            let reformatted_name = uv_ip4_name(&new_addr);\n+            log(debug, #fmt(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n+                            ip, reformatted_name));\n+            // here we're going to\n+            let inaddr_none_val = \"255.255.255.255\";\n+            if ip != inaddr_none_val && reformatted_name == inaddr_none_val {\n+                result::err({err_msg:#fmt(\"failed to parse '%s'\",\n+                                           ip)})\n+            }\n+            else {\n+                result::ok(ipv4(new_addr))\n+            }\n         }\n     }\n }\n+mod v6 {\n+    #[doc = \"\n+    Convert a str to `ip_addr`\n+\n+    # Failure\n+\n+    Fails if the string is not a valid IPv6 address\n \n-#[cfg(test)]\n+    # Arguments\n+\n+    * ip - an ipv6 string. See RFC2460 for spec.\n+\n+    # Returns\n+\n+    * an `ip_addr` of the `ipv6` variant\n+    \"]\n+    fn parse_addr(ip: str) -> ip_addr {\n+        alt try_parse_addr(ip) {\n+          // FIXME: more copies brought to light to due the implicit\n+          // copy compiler warning.. what can be done? out pointers,\n+          // ala c#?\n+          result::ok(addr) { copy(addr) }\n+          result::err(err_data) {\n+            fail err_data.err_msg\n+          }\n+        }\n+    }\n+    fn try_parse_addr(ip: str) -> result::result<ip_addr,parse_addr_err> {\n+        unsafe {\n+            // need to figure out how to establish a parse failure..\n+            let new_addr = uv_ip6_addr(ip, 22);\n+            let reparsed_name = uv_ip6_name(&new_addr);\n+            log(debug, #fmt(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n+                            ip, reparsed_name));\n+            // '::' appears to be uv_ip6_name() returns for bogus\n+            // parses..\n+            if  ip != \"::\" && reparsed_name == \"::\" {\n+                result::err({err_msg:#fmt(\"failed to parse '%s'\",\n+                                           ip)})\n+            }\n+            else {\n+                result::ok(ipv6(new_addr))\n+            }\n+        }\n+    }\n+}\n+\n+//#[cfg(test)]\n mod test {\n     #[test]\n     fn test_ipv4_parse_and_format_ip() {\n-        assert (format_addr(v4::parse_addr(\"127.0.0.1\"))\n-                == \"127.0.0.1\")\n+        let localhost_str = \"127.0.0.1\";\n+        assert (format_addr(v4::parse_addr(localhost_str))\n+                == localhost_str)\n+    }\n+    #[test]\n+    fn test_ipv6_parse_and_format_ip() {\n+        let localhost_str = \"::1\";\n+        let format_result = format_addr(v6::parse_addr(localhost_str));\n+        log(debug, #fmt(\"results: expected: '%s' actual: '%s'\",\n+            localhost_str, format_result));\n+        assert format_result == localhost_str;\n+    }\n+    #[test]\n+    fn test_ipv4_bad_parse() {\n+        alt v4::try_parse_addr(\"b4df00d\") {\n+          result::err(err_info) {\n+            log(debug, #fmt(\"got error as expected %?\", err_info));\n+            assert true;\n+          }\n+          result::ok(addr) {\n+            fail #fmt(\"Expected failure, but got addr %?\", addr);\n+          }\n+        }\n+    }\n+    #[test]\n+    fn test_ipv6_bad_parse() {\n+        alt v6::try_parse_addr(\"::,~2234k;\") {\n+          result::err(err_info) {\n+            log(debug, #fmt(\"got error as expected %?\", err_info));\n+            assert true;\n+          }\n+          result::ok(addr) {\n+            fail #fmt(\"Expected failure, but got addr %?\", addr);\n+          }\n+        }\n     }\n }\n\\ No newline at end of file"}]}