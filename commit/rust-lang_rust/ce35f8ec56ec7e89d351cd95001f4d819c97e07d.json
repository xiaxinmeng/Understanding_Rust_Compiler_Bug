{"sha": "ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzVmOGVjNTZlYzdlODlkMzUxY2Q5NTAwMWY0ZDgxOWM5N2UwN2Q=", "commit": {"author": {"name": "danakj", "email": "danakj@chromium.org", "date": "2021-07-22T18:52:45Z"}, "committer": {"name": "danakj", "email": "danakj@chromium.org", "date": "2021-09-07T19:41:30Z"}, "message": "remap-cwd-prefix", "tree": {"sha": "135cb5d9cc036d7cf652db63d502246ab2c612fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135cb5d9cc036d7cf652db63d502246ab2c612fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "html_url": "https://github.com/rust-lang/rust/commit/ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/comments", "author": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36", "html_url": "https://github.com/rust-lang/rust/commit/69c4aa2901ffadf69deaf91b2f90604bcbc2eb36"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "94166715f74f340aa7c21e6598f572c24c246435", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "patch": "@@ -753,6 +753,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(profiler_runtime, \"abc\".to_string());\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n+    tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));\n     tracked!(report_delayed_bugs, true);\n     tracked!(sanitizer, SanitizerSet::ADDRESS);"}, {"sha": "32aa035e1cdecb458faea87ceba51e2f3938c84a", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "patch": "@@ -1920,9 +1920,10 @@ fn parse_extern_dep_specs(\n \n fn parse_remap_path_prefix(\n     matches: &getopts::Matches,\n+    debugging_opts: &DebuggingOptions,\n     error_format: ErrorOutputType,\n ) -> Vec<(PathBuf, PathBuf)> {\n-    matches\n+    let mut mapping: Vec<(PathBuf, PathBuf)> = matches\n         .opt_strs(\"remap-path-prefix\")\n         .into_iter()\n         .map(|remap| match remap.rsplit_once('=') {\n@@ -1932,7 +1933,15 @@ fn parse_remap_path_prefix(\n             ),\n             Some((from, to)) => (PathBuf::from(from), PathBuf::from(to)),\n         })\n-        .collect()\n+        .collect();\n+    match &debugging_opts.remap_cwd_prefix {\n+        Some(to) => match std::env::current_dir() {\n+            Ok(cwd) => mapping.push((cwd, to.clone())),\n+            Err(_) => (),\n+        },\n+        None => (),\n+    };\n+    mapping\n }\n \n pub fn build_session_options(matches: &getopts::Matches) -> Options {\n@@ -2077,7 +2086,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n-    let remap_path_prefix = parse_remap_path_prefix(matches, error_format);\n+    let remap_path_prefix = parse_remap_path_prefix(matches, &debugging_opts, error_format);\n \n     let pretty = parse_pretty(&debugging_opts, error_format);\n "}, {"sha": "293cf1d0ba3657886d54eb6c3fa39d46578ba1b9", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "patch": "@@ -1236,6 +1236,8 @@ options! {\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n+    remap_cwd_prefix: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"remap paths under the current working directory to this path prefix\"),\n     simulate_remapped_rust_src_base: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"simulate the effect of remap-debuginfo = true at bootstrapping by remapping path \\\n         to rust's source base directory. only meant for testing purposes\"),"}, {"sha": "f38b4ca744f7403530b7c0e655c627162374c4bb", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "patch": "@@ -345,6 +345,19 @@ replacement is purely textual, with no consideration of the current system's\n pathname syntax. For example `--remap-path-prefix foo=bar` will match\n `foo/lib.rs` but not `./foo/lib.rs`.\n \n+<a id=\"option-remap-cwd-prefix\"></a>\n+## `--remap-cwd-prefix`: remap paths under the cwd in output\n+\n+Remap all absolute paths that are rooted under the current working directory to\n+be under the given value instead. The given value may be absolute or relative,\n+or empty. This switch takes precidence over `--remap-path-prefix` in case they\n+would both match a given path.\n+\n+This flag allows the command line to be universally reproducible, such that the\n+same execution will work on all machines, regardless of build environment.\n+\n+This is an unstable option. Use `-Z remap-cwd-prefix=val` to specify a value.\n+\n <a id=\"option-json\"></a>\n ## `--json`: configure json messages printed by the compiler\n "}, {"sha": "762cf5ed2ea71f17af181c5ef903b237df937829", "filename": "src/test/run-make-fulldeps/reproducible-build/Makefile", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ce35f8ec56ec7e89d351cd95001f4d819c97e07d/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile?ref=ce35f8ec56ec7e89d351cd95001f4d819c97e07d", "patch": "@@ -10,6 +10,9 @@ all:  \\\n \tlink_paths \\\n \tremap_paths \\\n \tdifferent_source_dirs \\\n+\tremap_cwd_bin \\\n+\tremap_cwd_rlib \\\n+\tremap_cwd_to_empty \\\n \textern_flags\n \n smoke:\n@@ -64,6 +67,45 @@ different_source_dirs:\n \t\t--crate-type rlib)\n \tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1\n \n+remap_cwd_bin:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\tmkdir $(TMPDIR)/test\n+\tcp reproducible-build.rs $(TMPDIR)/test\n+\t$(RUSTC) reproducible-build.rs --crate-type bin -C debuginfo=2 \\\n+\t  -Z remap-cwd-prefix=.\n+\tcp $(TMPDIR)/reproducible-build $(TMPDIR)/first\n+\t(cd $(TMPDIR)/test && \\\n+\t $(RUSTC) reproducible-build.rs --crate-type bin -C debuginfo=2 \\\n+\t   -Z remap-cwd-prefix=.)\n+\tcmp \"$(TMPDIR)/first\" \"$(TMPDIR)/reproducible-build\" || exit 1\n+\n+remap_cwd_rlib:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\tmkdir $(TMPDIR)/test\n+\tcp reproducible-build.rs $(TMPDIR)/test\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib -C debuginfo=2 \\\n+\t  -Z remap-cwd-prefix=.\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfirst.rlib\n+\t(cd $(TMPDIR)/test && \\\n+\t $(RUSTC) reproducible-build.rs --crate-type rlib -C debuginfo=2 \\\n+\t   -Z remap-cwd-prefix=.)\n+\tcmp \"$(TMPDIR)/libfirst.rlib\" \"$(TMPDIR)/libreproducible_build.rlib\" || exit 1\n+\n+remap_cwd_to_empty:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\tmkdir $(TMPDIR)/test\n+\tcp reproducible-build.rs $(TMPDIR)/test\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib -C debuginfo=2 \\\n+\t  -Z remap-cwd-prefix=\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfirst.rlib\n+\t(cd $(TMPDIR)/test && \\\n+\t $(RUSTC) reproducible-build.rs --crate-type rlib -C debuginfo=2 \\\n+\t   -Z remap-cwd-prefix=)\n+\tcmp \"$(TMPDIR)/libfirst.rlib\" \"$(TMPDIR)/libreproducible_build.rlib\" || exit 1\n+\n extern_flags:\n \trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n \t$(RUSTC) reproducible-build-aux.rs"}]}