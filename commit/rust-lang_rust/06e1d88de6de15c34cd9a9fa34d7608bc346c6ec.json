{"sha": "06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZTFkODhkZTZkZTE1YzM0Y2Q5YTlmYTM0ZDc2MDhiYzM0NmM2ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-03T14:24:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-03T14:24:54Z"}, "message": "Rollup merge of #60220 - euclio:rustdoc-test-fatal-parsing-errors, r=QuietMisdreavus\n\nreport fatal errors during doctest parsing\n\nFixes #59557.", "tree": {"sha": "8f63b2234a695bf4f1ed9d0300595e56ab358285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f63b2234a695bf4f1ed9d0300595e56ab358285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczE82CRBK7hj4Ov3rIwAAdHIIAC0RlgK9KVHDrh/opVe8gHjz\nOWXczJyZ3SZ7RD60P3coFpw0f6Gy234wzvgb6/DMWy1tjgl0OI3idKOsY5ubyG4u\nzuZfW0v8pOQk4cwpzWQcRuZdjpoWKkUEA66l1pdVGNIsYB+87xntW7MTPt9EusTj\ns02KLaRson2BZ4zbMt+HQfKDF7/UyaCjzXBziLqw7U+Ow91XIpGj+vXXmWsvVMww\nF4q2TaEtoz3oOJMaS/+Lz+phQ9de2bayWU3AosEpRZ9/DizR9JvnToXT/740WhWR\n8kDqnm8nHkKkmWyLonsSXDkkFF2ONYaiAPIFUsgFrHnAS53+5WUgpcE6n+JEEiE=\n=aKyY\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f63b2234a695bf4f1ed9d0300595e56ab358285\nparent e9509f8847e1a0e9f1bd4ae8e7ff1391f223c167\nparent a912664113394fdf3a7c26a93504ebfe54a66e5c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556893494 +0200\ncommitter GitHub <noreply@github.com> 1556893494 +0200\n\nRollup merge of #60220 - euclio:rustdoc-test-fatal-parsing-errors, r=QuietMisdreavus\n\nreport fatal errors during doctest parsing\n\nFixes #59557.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "html_url": "https://github.com/rust-lang/rust/commit/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9509f8847e1a0e9f1bd4ae8e7ff1391f223c167", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9509f8847e1a0e9f1bd4ae8e7ff1391f223c167", "html_url": "https://github.com/rust-lang/rust/commit/e9509f8847e1a0e9f1bd4ae8e7ff1391f223c167"}, {"sha": "a912664113394fdf3a7c26a93504ebfe54a66e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a912664113394fdf3a7c26a93504ebfe54a66e5c", "html_url": "https://github.com/rust-lang/rust/commit/a912664113394fdf3a7c26a93504ebfe54a66e5c"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "5c0a4da1cd7ef05515e6e683d0ca6af068b8f90a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "patch": "@@ -166,9 +166,18 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n             maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n             persist_doctests: Option<PathBuf>) {\n-    // The test harness wants its own `main` and top-level functions, so\n-    // never wrap the test in `fn main() { ... }`.\n-    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n+    let (test, line_offset) = match panic::catch_unwind(|| {\n+        make_test(test, Some(cratename), as_test_harness, opts)\n+    }) {\n+        Ok((test, line_offset)) => (test, line_offset),\n+        Err(cause) if cause.is::<errors::FatalErrorMarker>() => {\n+            // If the parser used by `make_test` panicked due to a fatal error, pass the test code\n+            // through unchanged. The error will be reported during compilation.\n+            (test.to_owned(), 0)\n+        },\n+        Err(cause) => panic::resume_unwind(cause),\n+    };\n+\n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of `SourceMap::span_to_unmapped_path`.\n     let path = match filename {\n@@ -337,7 +346,13 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     }\n }\n \n-/// Makes the test file. Also returns the number of lines before the code begins\n+/// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n+/// lines before the test code begins.\n+///\n+/// # Panics\n+///\n+/// This function uses the compiler's parser internally. The parser will panic if it encounters a\n+/// fatal error while parsing the test.\n pub fn make_test(s: &str,\n                  cratename: Option<&str>,\n                  dont_insert_main: bool,"}, {"sha": "7b1cd702731402003757e742d75bda70c775f63e", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "patch": "@@ -15,7 +15,7 @@ error[E0425]: cannot find value `no` in this scope\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:310:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n@@ -24,7 +24,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 11)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n-', src/librustdoc/test.rs:332:17\n+', src/librustdoc/test.rs:341:17\n \n \n failures:"}, {"sha": "18d6b32bf40370b46c44fbbff7c6c2389aac7466", "filename": "src/test/rustdoc-ui/unparseable-doc-test.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs?ref=06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+// rustc-env: RUST_BACKTRACE=0\n+\n+/// ```rust\n+/// let x = 7;\n+/// \"unterminated\n+/// ```\n+pub fn foo() {}"}, {"sha": "7048ef2c58977af8aec254ddcedfa92e9d065bcf", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/06e1d88de6de15c34cd9a9fa34d7608bc346c6ec/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=06e1d88de6de15c34cd9a9fa34d7608bc346c6ec", "patch": "@@ -0,0 +1,24 @@\n+\n+running 1 test\n+test $DIR/unparseable-doc-test.rs - foo (line 6) ... FAILED\n+\n+failures:\n+\n+---- $DIR/unparseable-doc-test.rs - foo (line 6) stdout ----\n+error: unterminated double quote string\n+ --> $DIR/unparseable-doc-test.rs:8:1\n+  |\n+2 | \"unterminated\n+  | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+thread '$DIR/unparseable-doc-test.rs - foo (line 6)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n+note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+\n+failures:\n+    $DIR/unparseable-doc-test.rs - foo (line 6)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}]}