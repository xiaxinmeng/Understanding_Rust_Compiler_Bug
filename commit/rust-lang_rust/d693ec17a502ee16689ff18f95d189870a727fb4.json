{"sha": "d693ec17a502ee16689ff18f95d189870a727fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OTNlYzE3YTUwMmVlMTY2ODlmZjE4Zjk1ZDE4OTg3MGE3MjdmYjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-04T10:15:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-05T07:07:48Z"}, "message": "Rollup merge of #22029 - iKevinY:tidy-changes, r=brson\n\n Currently, the list of files linted in `tidy.py` is unordered. It seems more appropriate for more frequently appearing files (like `.rs`) to appear at the top of the list and for \\\"other files\\\" to appear at the very end. This PR also changes the wildcard import of `check_license()` into an explicit one.\n\n```\nBefore:                     After:\n* linted 4 .sh files        * linted 5034 .rs files\n* linted 4 .h files         * linted 29 .c files\n* linted 29 .c files        * linted 28 .py files\n* linted 2 .js files        * linted 4 .sh files\n* linted 0 other files      * linted 4 .h files\n* linted 28 .py files       * linted 2 .js files\n* linted 5034 .rs files     * linted 0 other files\n```\n\nr? @brson", "tree": {"sha": "52c49aef71660714cd67ac89e6b7b4d2f60fa62e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c49aef71660714cd67ac89e6b7b4d2f60fa62e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d693ec17a502ee16689ff18f95d189870a727fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d693ec17a502ee16689ff18f95d189870a727fb4", "html_url": "https://github.com/rust-lang/rust/commit/d693ec17a502ee16689ff18f95d189870a727fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d693ec17a502ee16689ff18f95d189870a727fb4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68740b405404a3f885e388c8d31722797d519c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/68740b405404a3f885e388c8d31722797d519c30", "html_url": "https://github.com/rust-lang/rust/commit/68740b405404a3f885e388c8d31722797d519c30"}, {"sha": "956969162dd199682c16f40e9b124acc853e3992", "url": "https://api.github.com/repos/rust-lang/rust/commits/956969162dd199682c16f40e9b124acc853e3992", "html_url": "https://github.com/rust-lang/rust/commit/956969162dd199682c16f40e9b124acc853e3992"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "c524fae7f0a42e6272ce736cd5d54517702baa11", "filename": "src/etc/tidy.py", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d693ec17a502ee16689ff18f95d189870a727fb4/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/d693ec17a502ee16689ff18f95d189870a727fb4/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=d693ec17a502ee16689ff18f95d189870a727fb4", "patch": "@@ -13,7 +13,7 @@\n import subprocess\n import re\n import os\n-from licenseck import *\n+from licenseck import check_license\n import snapshot\n \n err = 0\n@@ -22,13 +22,8 @@\n tab_flag = \"ignore-tidy-tab\"\n linelength_flag = \"ignore-tidy-linelength\"\n \n-# Be careful to support Python 2.4, 2.6, and 3.x here!\n-config_proc = subprocess.Popen([\"git\", \"config\", \"core.autocrlf\"],\n-                               stdout=subprocess.PIPE)\n-result = config_proc.communicate()[0]\n-\n-true = \"true\".encode('utf8')\n-autocrlf = result.strip() == true if result is not None else False\n+interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+uninteresting_files = ['miniz.c', 'jquery', 'rust_android_dummy']\n \n \n def report_error_name_no(name, no, s):\n@@ -51,6 +46,34 @@ def do_license_check(name, contents):\n     if not check_license(name, contents):\n         report_error_name_no(name, 1, \"incorrect license\")\n \n+\n+def update_counts(current_name):\n+    global file_counts\n+    global count_other_linted_files\n+\n+    _, ext = os.path.splitext(current_name)\n+\n+    if ext in interesting_files:\n+        file_counts[ext] += 1\n+    else:\n+        count_other_linted_files += 1\n+\n+\n+def interesting_file(f):\n+    if any(x in f for x in uninteresting_files):\n+        return False\n+\n+    return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n+\n+\n+# Be careful to support Python 2.4, 2.6, and 3.x here!\n+config_proc = subprocess.Popen([\"git\", \"config\", \"core.autocrlf\"],\n+                               stdout=subprocess.PIPE)\n+result = config_proc.communicate()[0]\n+\n+true = \"true\".encode('utf8')\n+autocrlf = result.strip() == true if result is not None else False\n+\n current_name = \"\"\n current_contents = \"\"\n check_tab = True\n@@ -63,28 +86,16 @@ def do_license_check(name, contents):\n \n src_dir = sys.argv[1]\n \n-try:\n-    count_lines = 0\n-    count_non_blank_lines = 0\n+count_lines = 0\n+count_non_blank_lines = 0\n+count_other_linted_files = 0\n \n-    interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+file_counts = {ext: 0 for ext in interesting_files}\n \n-    file_counts = {ext: 0 for ext in interesting_files}\n-    file_counts['other'] = 0\n-\n-    def update_counts(current_name):\n-        global file_counts\n-        _, ext = os.path.splitext(current_name)\n-\n-        if ext in file_counts:\n-            file_counts[ext] += 1\n-        else:\n-            file_counts['other'] += 1\n-\n-    all_paths = set()\n+all_paths = set()\n \n+try:\n     for (dirpath, dirnames, filenames) in os.walk(src_dir):\n-\n         # Skip some third-party directories\n         skippable_dirs = {\n             'src/jemalloc',\n@@ -103,14 +114,6 @@ def update_counts(current_name):\n         if any(d in dirpath for d in skippable_dirs):\n             continue\n \n-        def interesting_file(f):\n-            if \"miniz.c\" in f \\\n-            or \"jquery\" in f \\\n-            or \"rust_android_dummy\" in f:\n-                return False\n-\n-            return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n-\n         file_names = [os.path.join(dirpath, f) for f in filenames\n                       if interesting_file(f)\n                       and not f.endswith(\"_gen.rs\")\n@@ -196,10 +199,11 @@ def interesting_file(f):\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n print\n-for ext in file_counts:\n-    print \"* linted \" + str(file_counts[ext]) + \" \" + ext + \" files\"\n-print \"* total lines of code: \" + str(count_lines)\n-print \"* total non-blank lines of code: \" + str(count_non_blank_lines)\n+for ext in sorted(file_counts, key=file_counts.get, reverse=True):\n+    print \"* linted {} {} files\".format(file_counts[ext], ext)\n+print \"* linted {} other files\".format(count_other_linted_files)\n+print \"* total lines of code: {}\".format(count_lines)\n+print \"* total non-blank lines of code: {}\".format(count_non_blank_lines)\n print\n \n sys.exit(err)"}]}