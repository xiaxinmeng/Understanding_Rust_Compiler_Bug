{"sha": "8b3788d875a921e367c7df014eb2456cdde30eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzc4OGQ4NzVhOTIxZTM2N2M3ZGYwMTRlYjI0NTZjZGRlMzBlYWM=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-07T20:57:07Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-08T12:48:15Z"}, "message": "rewrite_string: allow to break on a boundary character that is on edge", "tree": {"sha": "82728b203f09671307db8dfb8426bd0eb704b613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82728b203f09671307db8dfb8426bd0eb704b613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3788d875a921e367c7df014eb2456cdde30eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlu7Ug8ACgkQbVYg2Qgh\nATM4AggAlLRrji+575CXeKlYjlGB72qp5I2ydVzKezpqndZez2I6ENKectAdQuJH\n01UM4Yn0niS4zz0CNFdH8+8BdOj53t9wtw0/cG88EGrgVAG3dlCw8Q20aDxWrnYw\n725zIr8mylhEhCjJUFn2gERY6qO2gNX09QwCcCUFuVJRnirNqGlzFdMKW7SkP5a4\n21tJQARc1Ncr4II8H4pRV+S+/cHjI1Cql/qqImvGhtsBEhylCUYukVdqndZoUzoC\nayMTB80npsrDypYsEQVRSZ9+hLX0kurmMjHlArJdLqYol2/h0s4iYyA5ukbIX94p\nTbYPYjllIgOtCgxmmKSYCFEjN1T4sQ==\n=HQo7\n-----END PGP SIGNATURE-----", "payload": "tree 82728b203f09671307db8dfb8426bd0eb704b613\nparent bb7442802abe354a0ed844ec237cd20969789224\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1538945827 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539002895 +0200\n\nrewrite_string: allow to break on a boundary character that is on edge\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3788d875a921e367c7df014eb2456cdde30eac", "html_url": "https://github.com/rust-lang/rust/commit/8b3788d875a921e367c7df014eb2456cdde30eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3788d875a921e367c7df014eb2456cdde30eac/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb7442802abe354a0ed844ec237cd20969789224", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7442802abe354a0ed844ec237cd20969789224", "html_url": "https://github.com/rust-lang/rust/commit/bb7442802abe354a0ed844ec237cd20969789224"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "6a888cf83181c3184beef7c826bcf2c464d87dc6", "filename": "src/string.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8b3788d875a921e367c7df014eb2456cdde30eac/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3788d875a921e367c7df014eb2456cdde30eac/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=8b3788d875a921e367c7df014eb2456cdde30eac", "patch": "@@ -118,7 +118,12 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n         }\n \n         // The input starting at cur_start needs to be broken\n-        match break_string(cur_max_chars, fmt.trim_end, &graphemes[cur_start..]) {\n+        match break_string(\n+            cur_max_chars,\n+            fmt.trim_end,\n+            fmt.line_end,\n+            &graphemes[cur_start..],\n+        ) {\n             SnippetState::LineEnd(line, len) => {\n                 result.push_str(&line);\n                 result.push_str(fmt.line_end);\n@@ -190,7 +195,7 @@ enum SnippetState {\n \n /// Break the input string at a boundary character around the offset `max_chars`. A boundary\n /// character is either a punctuation or a whitespace.\n-fn break_string(max_chars: usize, trim_end: bool, input: &[&str]) -> SnippetState {\n+fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]) -> SnippetState {\n     let break_at = |index /* grapheme at index is included */| {\n         // Take in any whitespaces to the left/right of `input[index]` while\n         // preserving line feeds\n@@ -242,6 +247,17 @@ fn break_string(max_chars: usize, trim_end: bool, input: &[&str]) -> SnippetStat\n     };\n \n     // Find the position in input for breaking the string\n+    if line_end.is_empty()\n+        && trim_end\n+        && !is_whitespace(input[max_chars - 1])\n+        && is_whitespace(input[max_chars])\n+    {\n+        // At a breaking point already\n+        // The line won't invalidate the rewriting because:\n+        // - no extra space needed for the line_end character\n+        // - extra whitespaces to the right can be trimmed\n+        return break_at(max_chars - 1);\n+    }\n     match input[0..max_chars]\n         .iter()\n         .rposition(|grapheme| is_whitespace(grapheme))\n@@ -304,11 +320,11 @@ mod test {\n         let string = \"Placerat felis. Mauris porta ante sagittis purus.\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(20, false, &graphemes[..]),\n+            break_string(20, false, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Placerat felis. \".to_string(), 16)\n         );\n         assert_eq!(\n-            break_string(20, true, &graphemes[..]),\n+            break_string(20, true, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Placerat felis.\".to_string(), 16)\n         );\n     }\n@@ -318,7 +334,7 @@ mod test {\n         let string = \"Placerat_felis._Mauris_porta_ante_sagittis_purus.\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(20, false, &graphemes[..]),\n+            break_string(20, false, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Placerat_felis.\".to_string(), 15)\n         );\n     }\n@@ -328,11 +344,11 @@ mod test {\n         let string = \"Venenatis_tellus_vel_tellus. Aliquam aliquam dolor at justo.\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(20, false, &graphemes[..]),\n+            break_string(20, false, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Venenatis_tellus_vel_tellus. \".to_string(), 29)\n         );\n         assert_eq!(\n-            break_string(20, true, &graphemes[..]),\n+            break_string(20, true, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Venenatis_tellus_vel_tellus.\".to_string(), 29)\n         );\n     }\n@@ -342,7 +358,7 @@ mod test {\n         let string = \"Venenatis_tellus_vel_tellus\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(20, false, &graphemes[..]),\n+            break_string(20, false, \"\", &graphemes[..]),\n             SnippetState::EndOfInput(\"Venenatis_tellus_vel_tellus\".to_string())\n         );\n     }\n@@ -352,21 +368,21 @@ mod test {\n         let string = \"Neque in sem.      \\n      Pellentesque tellus augue.\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(15, false, &graphemes[..]),\n+            break_string(15, false, \"\", &graphemes[..]),\n             SnippetState::EndWithLineFeed(\"Neque in sem.      \\n\".to_string(), 20)\n         );\n         assert_eq!(\n-            break_string(25, false, &graphemes[..]),\n+            break_string(25, false, \"\", &graphemes[..]),\n             SnippetState::EndWithLineFeed(\"Neque in sem.      \\n\".to_string(), 20)\n         );\n-        // if `StringFormat::line_end` is true, then the line feed does not matter anymore\n+\n         assert_eq!(\n-            break_string(15, true, &graphemes[..]),\n-            SnippetState::LineEnd(\"Neque in sem.\".to_string(), 26)\n+            break_string(15, true, \"\", &graphemes[..]),\n+            SnippetState::LineEnd(\"Neque in sem.\".to_string(), 19)\n         );\n         assert_eq!(\n-            break_string(25, true, &graphemes[..]),\n-            SnippetState::LineEnd(\"Neque in sem.\".to_string(), 26)\n+            break_string(25, true, \"\", &graphemes[..]),\n+            SnippetState::EndWithLineFeed(\"Neque in sem.\\n\".to_string(), 20)\n         );\n     }\n \n@@ -375,11 +391,11 @@ mod test {\n         let string = \"Neque in sem.            Pellentesque tellus augue.\";\n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(20, false, &graphemes[..]),\n+            break_string(20, false, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Neque in sem.            \".to_string(), 25)\n         );\n         assert_eq!(\n-            break_string(20, true, &graphemes[..]),\n+            break_string(20, true, \"\", &graphemes[..]),\n             SnippetState::LineEnd(\"Neque in sem.\".to_string(), 25)\n         );\n     }\n@@ -390,11 +406,11 @@ mod test {\n \n         let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n         assert_eq!(\n-            break_string(25, false, &graphemes[..]),\n+            break_string(25, false, \"\", &graphemes[..]),\n             SnippetState::EndWithLineFeed(\"Nulla\\n\".to_string(), 6)\n         );\n         assert_eq!(\n-            break_string(25, true, &graphemes[..]),\n+            break_string(25, true, \"\", &graphemes[..]),\n             SnippetState::EndWithLineFeed(\"Nulla\\n\".to_string(), 6)\n         );\n \n@@ -559,4 +575,39 @@ mod test {\n             Some(\"Aenean\\n    //\\n    // metus. Vestibulum ac\\n    // lacus.\".to_string())\n         );\n     }\n+\n+    #[test]\n+    fn boundary_on_edge() {\n+        let config: Config = Default::default();\n+        let mut fmt = StringFormat {\n+            opener: \"\",\n+            closer: \"\",\n+            line_start: \"// \",\n+            line_end: \"\",\n+            shape: Shape::legacy(13, Indent::from_width(&config, 4)),\n+            trim_end: true,\n+            config: &config,\n+        };\n+\n+        let comment = \"Aenean metus. Vestibulum ac lacus.\";\n+        assert_eq!(\n+            rewrite_string(comment, &fmt),\n+            Some(\"Aenean metus.\\n    // Vestibulum ac\\n    // lacus.\".to_string())\n+        );\n+\n+        fmt.trim_end = false;\n+        let comment = \"Vestibulum ac lacus.\";\n+        assert_eq!(\n+            rewrite_string(comment, &fmt),\n+            Some(\"Vestibulum \\n    // ac lacus.\".to_string())\n+        );\n+\n+        fmt.trim_end = true;\n+        fmt.line_end = \"\\\\\";\n+        let comment = \"Vestibulum ac lacus.\";\n+        assert_eq!(\n+            rewrite_string(comment, &fmt),\n+            Some(\"Vestibulum\\\\\\n    // ac lacus.\".to_string())\n+        );\n+    }\n }"}, {"sha": "82d171e6f6a69c6d5b50c38e718ba2ca8c1abcbf", "filename": "tests/target/comment5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fcomment5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fcomment5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment5.rs?ref=8b3788d875a921e367c7df014eb2456cdde30eac", "patch": "@@ -2,8 +2,8 @@\n // rustfmt-wrap_comments: true\n \n //@ special comment\n-//@ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec adiam\n-//@ lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+//@ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec adiam lectus.\n+//@ Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n //@\n //@ foo\n fn test() {}"}, {"sha": "6bc355bc80768cbc87d6b0732ab8371db3ea059b", "filename": "tests/target/enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=8b3788d875a921e367c7df014eb2456cdde30eac", "patch": "@@ -145,8 +145,8 @@ pub enum Bencoding<'i> {\n     Int(i64),\n     List(Vec<Bencoding<'i>>),\n     /// A bencoded dict value. The first element the slice of bytes in the\n-    /// source that the dict is composed of. The second is the dict,\n-    /// decoded into an ordered map.\n+    /// source that the dict is composed of. The second is the dict, decoded\n+    /// into an ordered map.\n     // TODO make Dict \"structlike\" AKA name the two values.\n     Dict(&'i [u8], BTreeMap<&'i [u8], Bencoding<'i>>),\n }"}, {"sha": "d3bc364c3504ae1c4f84cbc0c64f1a16ceea10ea", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=8b3788d875a921e367c7df014eb2456cdde30eac", "patch": "@@ -40,8 +40,8 @@ fn main() {\n \n     A {\n         // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n-        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n-        // hendrerit. Donec et mollis dolor.\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.\n+        // Donec et mollis dolor.\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n         // Nam tincidunt congue enim, ut porta lorem lacinia consectetur."}, {"sha": "b29aafd05484a18da0f8b3ac17f62965b7d9639b", "filename": "tests/target/struct_lits_multiline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3788d875a921e367c7df014eb2456cdde30eac/tests%2Ftarget%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_multiline.rs?ref=8b3788d875a921e367c7df014eb2456cdde30eac", "patch": "@@ -50,8 +50,8 @@ fn main() {\n \n     A {\n         // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n-        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n-        // hendrerit. Donec et mollis dolor.\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.\n+        // Donec et mollis dolor.\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n         // Nam tincidunt congue enim, ut porta lorem lacinia consectetur."}]}