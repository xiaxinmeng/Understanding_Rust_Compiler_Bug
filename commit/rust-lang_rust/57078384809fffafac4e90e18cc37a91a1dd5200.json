{"sha": "57078384809fffafac4e90e18cc37a91a1dd5200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDc4Mzg0ODA5ZmZmYWZhYzRlOTBlMThjYzM3YTkxYTFkZDUyMDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T07:52:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T08:50:19Z"}, "message": "validate basic sanity for TerminatorKind", "tree": {"sha": "bf7bb0f323a0ca72274e873c4ea63902aaa33440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7bb0f323a0ca72274e873c4ea63902aaa33440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57078384809fffafac4e90e18cc37a91a1dd5200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57078384809fffafac4e90e18cc37a91a1dd5200", "html_url": "https://github.com/rust-lang/rust/commit/57078384809fffafac4e90e18cc37a91a1dd5200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57078384809fffafac4e90e18cc37a91a1dd5200/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fb72a8a9f53de2bcc5638c1358fcb552dba8ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fb72a8a9f53de2bcc5638c1358fcb552dba8ce", "html_url": "https://github.com/rust-lang/rust/commit/91fb72a8a9f53de2bcc5638c1358fcb552dba8ce"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "3db16a71bab150b8ec009af7d0db911d58a2828d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57078384809fffafac4e90e18cc37a91a1dd5200/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57078384809fffafac4e90e18cc37a91a1dd5200/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=57078384809fffafac4e90e18cc37a91a1dd5200", "patch": "@@ -50,7 +50,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.go_to_block(target_block);\n             }\n \n-            Call { ref func, ref args, destination, ref cleanup, .. } => {\n+            Call {\n+                ref func,\n+                ref args,\n+                destination,\n+                ref cleanup,\n+                from_hir_call: _from_hir_call,\n+            } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;\n                 let func = self.eval_operand(func, None)?;"}, {"sha": "046889193dac36d9a783e9a15ee599ed66164293", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/57078384809fffafac4e90e18cc37a91a1dd5200/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57078384809fffafac4e90e18cc37a91a1dd5200/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=57078384809fffafac4e90e18cc37a91a1dd5200", "patch": "@@ -3,8 +3,11 @@\n use super::{MirPass, MirSource};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::{\n-    mir::{Body, Location, Operand, Rvalue, Statement, StatementKind},\n-    ty::{ParamEnv, TyCtxt},\n+    mir::{\n+        BasicBlock, Body, Location, Operand, Rvalue, Statement, StatementKind, Terminator,\n+        TerminatorKind,\n+    },\n+    ty::{self, ParamEnv, TyCtxt},\n };\n use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n \n@@ -38,6 +41,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             &format!(\"broken MIR in {:?} ({}): {}\", self.def_id, self.when, msg.as_ref()),\n         );\n     }\n+\n+    fn check_bb(&self, span: Span, bb: BasicBlock) {\n+        if self.body.basic_blocks().get(bb).is_none() {\n+            self.fail(span, format!(\"encountered jump to invalid basic block {:?}\", bb))\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n@@ -77,4 +86,94 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, _location: Location) {\n+        match &terminator.kind {\n+            TerminatorKind::Goto { target } => {\n+                self.check_bb(terminator.source_info.span, *target);\n+            }\n+            TerminatorKind::SwitchInt { targets, .. } => {\n+                if targets.is_empty() {\n+                    self.fail(\n+                        terminator.source_info.span,\n+                        \"encountered `SwitchInt` terminator with no target to jump to\",\n+                    );\n+                }\n+                for target in targets {\n+                    self.check_bb(terminator.source_info.span, *target);\n+                }\n+            }\n+            TerminatorKind::Drop { target, unwind, .. } => {\n+                self.check_bb(terminator.source_info.span, *target);\n+                if let Some(unwind) = unwind {\n+                    self.check_bb(terminator.source_info.span, *unwind);\n+                }\n+            }\n+            TerminatorKind::DropAndReplace { target, unwind, .. } => {\n+                self.check_bb(terminator.source_info.span, *target);\n+                if let Some(unwind) = unwind {\n+                    self.check_bb(terminator.source_info.span, *unwind);\n+                }\n+            }\n+            TerminatorKind::Call { func, destination, cleanup, .. } => {\n+                let func_ty = func.ty(&self.body.local_decls, self.tcx);\n+                match func_ty.kind {\n+                    ty::FnPtr(..) | ty::FnDef(..) => {}\n+                    _ => self.fail(\n+                        terminator.source_info.span,\n+                        format!(\"encountered non-callable type {} in `Call` terminator\", func_ty),\n+                    ),\n+                }\n+                if let Some((_, target)) = destination {\n+                    self.check_bb(terminator.source_info.span, *target);\n+                }\n+                if let Some(cleanup) = cleanup {\n+                    self.check_bb(terminator.source_info.span, *cleanup);\n+                }\n+            }\n+            TerminatorKind::Assert { cond, target, cleanup, .. } => {\n+                let cond_ty = cond.ty(&self.body.local_decls, self.tcx);\n+                if cond_ty != self.tcx.types.bool {\n+                    self.fail(\n+                        terminator.source_info.span,\n+                        format!(\n+                            \"encountered non-boolean condition of type {} in `Assert` terminator\",\n+                            cond_ty\n+                        ),\n+                    );\n+                }\n+                self.check_bb(terminator.source_info.span, *target);\n+                if let Some(cleanup) = cleanup {\n+                    self.check_bb(terminator.source_info.span, *cleanup);\n+                }\n+            }\n+            TerminatorKind::Yield { resume, drop, .. } => {\n+                self.check_bb(terminator.source_info.span, *resume);\n+                if let Some(drop) = drop {\n+                    self.check_bb(terminator.source_info.span, *drop);\n+                }\n+            }\n+            TerminatorKind::FalseEdges { real_target, imaginary_target } => {\n+                self.check_bb(terminator.source_info.span, *real_target);\n+                self.check_bb(terminator.source_info.span, *imaginary_target);\n+            }\n+            TerminatorKind::FalseUnwind { real_target, unwind } => {\n+                self.check_bb(terminator.source_info.span, *real_target);\n+                if let Some(unwind) = unwind {\n+                    self.check_bb(terminator.source_info.span, *unwind);\n+                }\n+            }\n+            TerminatorKind::InlineAsm { destination, .. } => {\n+                if let Some(destination) = destination {\n+                    self.check_bb(terminator.source_info.span, *destination);\n+                }\n+            }\n+            // Nothing to validate for these.\n+            TerminatorKind::Resume\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Return\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::GeneratorDrop => {}\n+        }\n+    }\n }"}]}