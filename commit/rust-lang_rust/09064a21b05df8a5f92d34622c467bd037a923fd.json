{"sha": "09064a21b05df8a5f92d34622c467bd037a923fd", "node_id": "C_kwDOAAsO6NoAKDA5MDY0YTIxYjA1ZGY4YTVmOTJkMzQ2MjJjNDY3YmQwMzdhOTIzZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T07:12:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T07:12:52Z"}, "message": "Auto merge of #96316 - michaelwoerister:debuginfo-fix-unit-msvc, r=wesleywiser\n\ndebuginfo: Emit ZST struct debuginfo for unit type when CPP-like debuginfo is enabled\n\nAs already discovered in https://github.com/rust-lang/rust/commit/24a728a8eb4832568509eb757c2374934a76cb98, PDB does not play well with custom basic types. This PR extends to the fix to `()`: Instead of a custom basic type, we treat it like an empty tuple (i.e. it is described as a struct which happens to have no fields).\n\nBefore this change anything with a `()` in it would cause trouble, which is especially bad for `*const ()` and `*mut ()` which are often used for opaque pointers. E.g. the test case added in this PR would look like:\n```\n0:000>  dx _ref\nError: Unable to bind name '_ref'\n0:000>  dx _ptr\nError: Unable to bind name '_ptr'\n0:000>  dx _local\nError: Unable to bind name '_local'\n0:000>  dx _field,d\n_field,d         [Type: unit_type::_TypeContainingUnitField]\n    [+0x008] _a               : 123 [Type: unsigned int]\n    [+0x000] _unit            : Unexpected failure to dereference object\n    [+0x000] _b               : 456 [Type: unsigned __int64]\n0:000>  dx ((__int64 *)_ptr),x\nError: Unable to bind name '_ptr'\n```\n\nWith the PR it produces the expected output:\n```\n0:000>  dx _ref\n_ref             : 0x7ff6f2012230 : () [Type: tuple$<> *]\n0:000>  dx _ptr\n_ptr             : 0x7e8ddffc20 : () [Type: tuple$<> *]\n0:000>  dx _local\n_local           : () [Type: tuple$<>]\n0:000>  dx _field,d\n_field,d         [Type: unit_type::_TypeContainingUnitField]\n    [+0x008] _a               : 123 [Type: unsigned int]\n    [+0x000] _unit            : () [Type: tuple$<>]\n    [+0x000] _b               : 456 [Type: unsigned __int64]\n0:000>  dx ((__int64 *)_ptr),x\n((__int64 *)_ptr),x : 0x7e8ddffc20 : 0x1122334455667788 [Type: __int64 *]\n```\n\nr? `@wesleywiser`", "tree": {"sha": "754f9126ab09f697df6fb8026c46822551caded0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754f9126ab09f697df6fb8026c46822551caded0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09064a21b05df8a5f92d34622c467bd037a923fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09064a21b05df8a5f92d34622c467bd037a923fd", "html_url": "https://github.com/rust-lang/rust/commit/09064a21b05df8a5f92d34622c467bd037a923fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09064a21b05df8a5f92d34622c467bd037a923fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9", "html_url": "https://github.com/rust-lang/rust/commit/64c5deb0e3a22b93ed1fe5e2a7f2e8d91eea63b9"}, {"sha": "8b230086fa4b22c647129a8c84fa0bdfc6d82a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b230086fa4b22c647129a8c84fa0bdfc6d82a0d", "html_url": "https://github.com/rust-lang/rust/commit/8b230086fa4b22c647129a8c84fa0bdfc6d82a0d"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "f2cf3b1ef5c1eea396fdd208024118f7a9b7deb6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/09064a21b05df8a5f92d34622c467bd037a923fd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09064a21b05df8a5f92d34622c467bd037a923fd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=09064a21b05df8a5f92d34622c467bd037a923fd", "patch": "@@ -437,11 +437,9 @@ pub fn type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll D\n \n     let DINodeCreationResult { di_node, already_stored_in_typemap } = match *t.kind() {\n         ty::Never | ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n-            DINodeCreationResult::new(build_basic_type_di_node(cx, t), false)\n-        }\n-        ty::Tuple(elements) if elements.is_empty() => {\n-            DINodeCreationResult::new(build_basic_type_di_node(cx, t), false)\n+            build_basic_type_di_node(cx, t)\n         }\n+        ty::Tuple(elements) if elements.is_empty() => build_basic_type_di_node(cx, t),\n         ty::Array(..) => build_fixed_size_array_di_node(cx, unique_type_id, t),\n         ty::Slice(_) | ty::Str => build_slice_type_di_node(cx, t, unique_type_id),\n         ty::Dynamic(..) => build_dyn_type_di_node(cx, t, unique_type_id),\n@@ -640,7 +638,10 @@ impl MsvcBasicName for ty::FloatTy {\n     }\n }\n \n-fn build_basic_type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n+fn build_basic_type_di_node<'ll, 'tcx>(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    t: Ty<'tcx>,\n+) -> DINodeCreationResult<'ll> {\n     debug!(\"build_basic_type_di_node: {:?}\", t);\n \n     // When targeting MSVC, emit MSVC style type names for compatibility with\n@@ -649,7 +650,13 @@ fn build_basic_type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -\n \n     let (name, encoding) = match t.kind() {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n-        ty::Tuple(elements) if elements.is_empty() => (\"()\", DW_ATE_unsigned),\n+        ty::Tuple(elements) if elements.is_empty() => {\n+            if cpp_like_debuginfo {\n+                return build_tuple_type_di_node(cx, UniqueTypeId::for_ty(cx.tcx, t));\n+            } else {\n+                (\"()\", DW_ATE_unsigned)\n+            }\n+        }\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_UTF),\n         ty::Int(int_ty) if cpp_like_debuginfo => (int_ty.msvc_basic_name(), DW_ATE_signed),\n@@ -672,14 +679,14 @@ fn build_basic_type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -\n     };\n \n     if !cpp_like_debuginfo {\n-        return ty_di_node;\n+        return DINodeCreationResult::new(ty_di_node, false);\n     }\n \n     let typedef_name = match t.kind() {\n         ty::Int(int_ty) => int_ty.name_str(),\n         ty::Uint(uint_ty) => uint_ty.name_str(),\n         ty::Float(float_ty) => float_ty.name_str(),\n-        _ => return ty_di_node,\n+        _ => return DINodeCreationResult::new(ty_di_node, false),\n     };\n \n     let typedef_di_node = unsafe {\n@@ -694,7 +701,7 @@ fn build_basic_type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -\n         )\n     };\n \n-    typedef_di_node\n+    DINodeCreationResult::new(typedef_di_node, false)\n }\n \n fn build_foreign_type_di_node<'ll, 'tcx>("}, {"sha": "7aab41a3e7c9b55f462d0c529ebc16ef35008b93", "filename": "src/test/debuginfo/unit-type.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/09064a21b05df8a5f92d34622c467bd037a923fd/src%2Ftest%2Fdebuginfo%2Funit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09064a21b05df8a5f92d34622c467bd037a923fd/src%2Ftest%2Fdebuginfo%2Funit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funit-type.rs?ref=09064a21b05df8a5f92d34622c467bd037a923fd", "patch": "@@ -0,0 +1,71 @@\n+// compile-flags:-g\n+\n+// We only test Rust-aware versions of GDB:\n+// min-gdb-version: 8.2\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command: run\n+\n+// gdb-command: print _ref\n+// gdb-check: $1 = (*mut ()) 0x[...]\n+\n+// gdb-command: print _ptr\n+// gdb-check: $2 = (*mut ()) 0x[...]\n+\n+// gdb-command: print _local\n+// gdb-check: $3 = ()\n+\n+// gdb-command: print _field\n+// gdb-check: $4 = unit_type::_TypeContainingUnitField {_a: 123, _unit: (), _b: 456}\n+\n+// Check that we can cast \"void pointers\" to their actual type in the debugger\n+// gdb-command: print /x *(_ptr as *const u64)\n+// gdb-check: $5 = 0x1122334455667788\n+\n+// === CDB TESTS ===================================================================================\n+\n+// cdb-command: g\n+// cdb-check: Breakpoint 0 hit\n+\n+// cdb-command: dx _ref\n+// cdb-check: _ref             : 0x[...] : () [Type: tuple$<> *]\n+\n+// cdb-command: dx _ptr\n+// cdb-check: _ptr             : 0x[...] : () [Type: tuple$<> *]\n+\n+// cdb-command: dx _local\n+// cdb-check: _local           : () [Type: tuple$<>]\n+\n+// cdb-command: dx _field,d\n+// cdb-check: _field,d         [Type: unit_type::_TypeContainingUnitField]\n+// cdb-check:     [+0x[...]] _a               : 123 [Type: unsigned int]\n+// cdb-check:     [+0x[...]] _unit            : () [Type: tuple$<>]\n+// cdb-check:     [+0x[...]] _b               : 456 [Type: unsigned __int64]\n+\n+// Check that we can cast \"void pointers\" to their actual type in the debugger\n+// cdb-command: dx ((__int64 *)_ptr),x\n+// cdb-check: ((__int64 *)_ptr),x : 0x[...] : 0x1122334455667788 [Type: __int64 *]\n+// cdb-check:     0x1122334455667788 [Type: __int64]\n+\n+struct _TypeContainingUnitField {\n+    _a: u32,\n+    _unit: (),\n+    _b: u64,\n+}\n+\n+fn foo(_ref: &(), _ptr: *const ()) {\n+    let _local = ();\n+    let _field = _TypeContainingUnitField { _a: 123, _unit: (), _b: 456 };\n+\n+    zzz(); // #break\n+}\n+\n+fn main() {\n+    let pointee = 0x1122_3344_5566_7788i64;\n+\n+    foo(&(), &pointee as *const i64 as *const ());\n+}\n+\n+#[inline(never)]\n+fn zzz() {}"}]}