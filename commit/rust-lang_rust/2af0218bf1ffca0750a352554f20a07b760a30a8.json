{"sha": "2af0218bf1ffca0750a352554f20a07b760a30a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZjAyMThiZjFmZmNhMDc1MGEzNTI1NTRmMjBhMDdiNzYwYTMwYTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-20T04:13:24Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-22T19:07:36Z"}, "message": "Recursively expand nonterminals", "tree": {"sha": "2189669905a3cdd18fb060559461b2f11de49d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2189669905a3cdd18fb060559461b2f11de49d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2af0218bf1ffca0750a352554f20a07b760a30a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7IIvkACgkQtAh+UQ6Y\nsWRHvg//blYUR4hnFZKe/brapQ6V7BhM6kNP7+646QYQxjBUgcuyqRrlFoFPjNYB\nXYr6DuwzDZbg5Gt5gmYtB/T5oTrMReAk5Sfqmd//eYa4/9ASEu7dLKGUE8eBlcSk\npr9YbTNgZpPVDZPGoLNL+fpPjAmGvawQUKSI6PlVfJX9gSTGyaev3VpdddTZWdG4\nEOzJLFipkBM5Dp4IX3heIjS78KFChMZOpj/JL0d0AE1Ek4Owj7zpPC3uYulCaAAA\noMB3jGtuYldAUJMp9lUUt8luYCCKGwemFbUZNmD6yObJyKFgFg63HaWXjH29juTe\nTInWvRZgRxAimCqoWHxZrVQElonzOXufO4KlBFoWdDfJjVoAa5lrfUoAi4uJ+FJz\nb9ZDZGQx34zfSwUn36ztlP1cYdB4lBr2qO0GrcRDzLqvfvZvujCDVqQl2d4ZBQD8\nlrWSfykQs9nxj/RyIR+5vRERNpbvEMYT5SYmlh2x+p20HUeg5DgZndK801RoTdHb\nkXU8hG0kgrpFonfk0MfLRuEl1jKz1ZJ3uBAtSPvvKNvIdSB12ty3er9OjdKUyeiv\nYhK2lkH7Waa2O+4YEarsGMNUFSuDCKJspEEamYSVYiIFHFG4CHEVFjBeO9jmbQBR\nKAmrODJzNQkyTUJJ8VgMgbbkcxIhjMmmeN8skcnv5oImYC7hm8A=\n=wUPn\n-----END PGP SIGNATURE-----", "payload": "tree 2189669905a3cdd18fb060559461b2f11de49d3c\nparent 7a4c1865fb2f58c57e3f09645515dec8be3022c6\nauthor Aaron Hill <aa1ronham@gmail.com> 1589948004 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1590174456 -0400\n\nRecursively expand nonterminals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2af0218bf1ffca0750a352554f20a07b760a30a8", "html_url": "https://github.com/rust-lang/rust/commit/2af0218bf1ffca0750a352554f20a07b760a30a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2af0218bf1ffca0750a352554f20a07b760a30a8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4c1865fb2f58c57e3f09645515dec8be3022c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4c1865fb2f58c57e3f09645515dec8be3022c6", "html_url": "https://github.com/rust-lang/rust/commit/7a4c1865fb2f58c57e3f09645515dec8be3022c6"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "ff3469930c6d3f98df89c637be63b5532ec48a23", "filename": "src/librustc_ast/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2af0218bf1ffca0750a352554f20a07b760a30a8/src%2Flibrustc_ast%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af0218bf1ffca0750a352554f20a07b760a30a8/src%2Flibrustc_ast%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftokenstream.rs?ref=2af0218bf1ffca0750a352554f20a07b760a30a8", "patch": "@@ -290,8 +290,6 @@ impl TokenStream {\n         t1.next().is_none() && t2.next().is_none()\n     }\n \n-\n-\n     pub fn map_enumerated<F: FnMut(usize, TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n         TokenStream(Lrc::new(\n             self.0"}, {"sha": "352278d252616fea0972961d7d2c8b23692e7f07", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 95, "deletions": 14, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/2af0218bf1ffca0750a352554f20a07b760a30a8/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2af0218bf1ffca0750a352554f20a07b760a30a8/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=2af0218bf1ffca0750a352554f20a07b760a30a8", "patch": "@@ -7,20 +7,20 @@\n #![feature(or_patterns)]\n \n use rustc_ast::ast;\n-use rustc_ast::token::{self, Nonterminal, Token, TokenKind, DelimToken};\n-use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::tokenstream::{self, IsJoint, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::{FileName, SourceFile, Span};\n use rustc_span::symbol::kw;\n+use rustc_span::{FileName, SourceFile, Span};\n \n+use std::mem;\n use std::path::Path;\n use std::str;\n-use std::mem;\n \n-use log::info;\n+use log::{debug, info};\n \n pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n \n@@ -302,7 +302,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real) {\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real, sess) {\n             return tokens;\n         }\n         info!(\n@@ -381,7 +381,11 @@ fn prepend_attrs(\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &TokenStream) -> bool {\n+pub fn tokenstream_probably_equal_for_proc_macro(\n+    first: &TokenStream,\n+    other: &TokenStream,\n+    sess: &ParseSess,\n+) -> bool {\n     // When checking for `probably_eq`, we ignore certain tokens that aren't\n     // preserved in the AST. Because they are not preserved, the pretty\n     // printer arbitrarily adds or removes them when printing as token\n@@ -409,10 +413,83 @@ pub fn tokenstream_probably_equal_for_proc_macro(first: &TokenStream, other: &To\n         true\n     }\n \n-    let mut t1 = first.trees().filter(semantic_tree);\n-    let mut t2 = other.trees().filter(semantic_tree);\n+    // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n+    //\n+    // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n+    // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n+    // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n+    // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n+    // when determining if two `TokenStream`s are 'probably equal'.\n+    //\n+    // Therefore, we use `break_two_token_op` to convert all tokens\n+    // to the 'unglued' form (if it exists). This ensures that two\n+    // `TokenStream`s which differ only in how their tokens are glued\n+    // will be considered 'probably equal', which allows us to keep spans.\n+    //\n+    // This is important when the original `TokenStream` contained\n+    // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n+    // will be omitted when we pretty-print, which can cause the original\n+    // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n+    // leading to some tokens being 'glued' together in one stream but not\n+    // the other. See #68489 for more details.\n+    fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n+        // In almost all cases, we should have either zero or one levels\n+        // of 'unglueing'. However, in some unusual cases, we may need\n+        // to iterate breaking tokens mutliple times. For example:\n+        // '[BinOpEq(Shr)] => [Gt, Ge] -> [Gt, Gt, Eq]'\n+        let mut token_trees: SmallVec<[_; 2]>;\n+        if let TokenTree::Token(token) = &tree {\n+            let mut out = SmallVec::<[_; 2]>::new();\n+            out.push(token.clone());\n+            // Iterate to fixpoint:\n+            // * We start off with 'out' containing our initial token, and `temp` empty\n+            // * If we are able to break any tokens in `out`, then `out` will have\n+            //   at least one more element than 'temp', so we will try to break tokens\n+            //   again.\n+            // * If we cannot break any tokens in 'out', we are done\n+            loop {\n+                let mut temp = SmallVec::<[_; 2]>::new();\n+                let mut changed = false;\n+\n+                for token in out.into_iter() {\n+                    if let Some((first, second)) = token.kind.break_two_token_op() {\n+                        temp.push(Token::new(first, DUMMY_SP));\n+                        temp.push(Token::new(second, DUMMY_SP));\n+                        changed = true;\n+                    } else {\n+                        temp.push(token);\n+                    }\n+                }\n+                out = temp;\n+                if !changed {\n+                    break;\n+                }\n+            }\n+            token_trees = out.into_iter().map(|t| TokenTree::Token(t)).collect();\n+            if token_trees.len() != 1 {\n+                debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n+            }\n+        } else {\n+            token_trees = SmallVec::new();\n+            token_trees.push(tree);\n+        }\n+        token_trees.into_iter()\n+    }\n+\n+    let expand_nt = |tree: TokenTree| {\n+        if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n+            nt_to_tokenstream(nt, sess, *span).into_trees()\n+        } else {\n+            TokenStream::new(vec![(tree, IsJoint::NonJoint)]).into_trees()\n+        }\n+    };\n+\n+    // Break tokens after we expand any nonterminals, so that we break tokens\n+    // that are produced as a result of nonterminal expansion.\n+    let mut t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let mut t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n     for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-        if !tokentree_probably_equal_for_proc_macro(&t1, &t2) {\n+        if !tokentree_probably_equal_for_proc_macro(&t1, &t2, sess) {\n             return false;\n         }\n     }\n@@ -471,25 +548,29 @@ crate fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bo\n             b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n         }\n \n-        (&Interpolated(_), &Interpolated(_)) => false,\n+        // Expanded by `tokenstream_probably_equal_for_proc_macro`\n+        (&Interpolated(_), &Interpolated(_)) => unreachable!(),\n \n         _ => panic!(\"forgot to add a token?\"),\n     }\n }\n \n-\n // See comments in `Nonterminal::to_tokenstream` for why we care about\n // *probably* equal here rather than actual equality\n //\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n-pub fn tokentree_probably_equal_for_proc_macro(first: &TokenTree, other: &TokenTree) -> bool {\n+pub fn tokentree_probably_equal_for_proc_macro(\n+    first: &TokenTree,\n+    other: &TokenTree,\n+    sess: &ParseSess,\n+) -> bool {\n     match (first, other) {\n         (TokenTree::Token(token), TokenTree::Token(token2)) => {\n             token_probably_equal_for_proc_macro(token, token2)\n         }\n         (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2)\n+            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n         }\n         _ => false,\n     }"}]}