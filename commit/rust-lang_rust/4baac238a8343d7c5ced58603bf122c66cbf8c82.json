{"sha": "4baac238a8343d7c5ced58603bf122c66cbf8c82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYWFjMjM4YTgzNDNkN2M1Y2VkNTg2MDNiZjEyMmM2NmNiZjhjODI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-24T00:26:16Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-24T00:28:45Z"}, "message": "Improve autoimports on completion speed\n\n* Ignore modules eaferly\n* Do less completion string rendering", "tree": {"sha": "eb898d8429aafb3b19e356089bed57994fbbe015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb898d8429aafb3b19e356089bed57994fbbe015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4baac238a8343d7c5ced58603bf122c66cbf8c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4baac238a8343d7c5ced58603bf122c66cbf8c82", "html_url": "https://github.com/rust-lang/rust/commit/4baac238a8343d7c5ced58603bf122c66cbf8c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4baac238a8343d7c5ced58603bf122c66cbf8c82/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036ea6317c7e0a48acafcdcf8ece3a4816fa4036", "url": "https://api.github.com/repos/rust-lang/rust/commits/036ea6317c7e0a48acafcdcf8ece3a4816fa4036", "html_url": "https://github.com/rust-lang/rust/commit/036ea6317c7e0a48acafcdcf8ece3a4816fa4036"}], "stats": {"total": 146, "additions": 114, "deletions": 32}, "files": [{"sha": "f452c98e4e8c66956c161c82f20008210c0932aa", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=4baac238a8343d7c5ced58603bf122c66cbf8c82", "patch": "@@ -79,32 +79,34 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n \n     let potential_import_name = ctx.token.to_string();\n \n-    let possible_imports =\n-        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, 400)\n-            .filter_map(|import_candidate| match import_candidate {\n-                // when completing outside the use declaration, modules are pretty useless\n-                // and tend to bloat the completion suggestions a lot\n-                Either::Left(ModuleDef::Module(_)) => None,\n-                Either::Left(module_def) => Some((\n-                    current_module.find_use_path(ctx.db, module_def)?,\n-                    ScopeDef::ModuleDef(module_def),\n-                )),\n-                Either::Right(macro_def) => Some((\n-                    current_module.find_use_path(ctx.db, macro_def)?,\n-                    ScopeDef::MacroDef(macro_def),\n-                )),\n-            })\n-            .filter(|(mod_path, _)| mod_path.len() > 1)\n-            .filter_map(|(import_path, definition)| {\n-                render_resolution_with_import(\n-                    RenderContext::new(ctx),\n-                    import_path.clone(),\n-                    import_scope.clone(),\n-                    ctx.config.merge,\n-                    &definition,\n-                )\n-            })\n-            .take(20);\n+    let possible_imports = imports_locator::find_similar_imports(\n+        &ctx.sema,\n+        ctx.krate?,\n+        &potential_import_name,\n+        50,\n+        true,\n+    )\n+    .filter_map(|import_candidate| {\n+        Some(match import_candidate {\n+            Either::Left(module_def) => {\n+                (current_module.find_use_path(ctx.db, module_def)?, ScopeDef::ModuleDef(module_def))\n+            }\n+            Either::Right(macro_def) => {\n+                (current_module.find_use_path(ctx.db, macro_def)?, ScopeDef::MacroDef(macro_def))\n+            }\n+        })\n+    })\n+    .filter(|(mod_path, _)| mod_path.len() > 1)\n+    .take(20)\n+    .filter_map(|(import_path, definition)| {\n+        render_resolution_with_import(\n+            RenderContext::new(ctx),\n+            import_path.clone(),\n+            import_scope.clone(),\n+            ctx.config.merge,\n+            &definition,\n+        )\n+    });\n \n     acc.add_all(possible_imports);\n     Some(())"}, {"sha": "bce02f5773888a2a5df2ded5e6785aaf0c30a6a5", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=4baac238a8343d7c5ced58603bf122c66cbf8c82", "patch": "@@ -150,6 +150,7 @@ impl<'a> Render<'a> {\n         import_data: Option<(ModPath, ImportScope, Option<MergeBehaviour>)>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n+        let _p = profile::span(\"render_resolution\");\n         use hir::ModuleDef::*;\n \n         let completion_kind = match resolution {"}, {"sha": "c0f10884808e6516148f858bd0934c3c026a269d", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=4baac238a8343d7c5ced58603bf122c66cbf8c82", "patch": "@@ -7,7 +7,7 @@ use fst::{self, Streamer};\n use hir_expand::name::Name;\n use indexmap::{map::Entry, IndexMap};\n use itertools::Itertools;\n-use rustc_hash::{FxHashMap, FxHasher};\n+use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n use smallvec::SmallVec;\n use syntax::SmolStr;\n \n@@ -225,13 +225,27 @@ fn cmp((_, lhs): &(&ItemInNs, &ImportInfo), (_, rhs): &(&ItemInNs, &ImportInfo))\n     lhs_str.cmp(&rhs_str)\n }\n \n+#[derive(Debug, Eq, PartialEq, Hash)]\n+pub enum ImportKind {\n+    Module,\n+    Function,\n+    Adt,\n+    EnumVariant,\n+    Const,\n+    Static,\n+    Trait,\n+    TypeAlias,\n+    BuiltinType,\n+}\n+\n #[derive(Debug)]\n pub struct Query {\n     query: String,\n     lowercased: String,\n     anchor_end: bool,\n     case_sensitive: bool,\n     limit: usize,\n+    exclude_import_kinds: FxHashSet<ImportKind>,\n }\n \n impl Query {\n@@ -242,6 +256,7 @@ impl Query {\n             anchor_end: false,\n             case_sensitive: false,\n             limit: usize::max_value(),\n+            exclude_import_kinds: FxHashSet::default(),\n         }\n     }\n \n@@ -260,6 +275,12 @@ impl Query {\n     pub fn case_sensitive(self) -> Self {\n         Self { case_sensitive: true, ..self }\n     }\n+\n+    /// Do not include imports of the specified kind in the search results.\n+    pub fn exclude_import_kind(mut self, import_kind: ImportKind) -> Self {\n+        self.exclude_import_kinds.insert(import_kind);\n+        self\n+    }\n }\n \n /// Searches dependencies of `krate` for an importable path matching `query`.\n@@ -303,10 +324,17 @@ pub fn search_dependencies<'a>(\n \n             // Add the items from this `ModPath` group. Those are all subsequent items in\n             // `importables` whose paths match `path`.\n-            let iter = importables.iter().copied().take_while(|item| {\n-                let item_path = &import_map.map[item].path;\n-                fst_path(item_path) == fst_path(path)\n-            });\n+            let iter = importables\n+                .iter()\n+                .copied()\n+                .take_while(|item| {\n+                    let item_path = &import_map.map[item].path;\n+                    fst_path(item_path) == fst_path(path)\n+                })\n+                .filter(|&item| match item_import_kind(item) {\n+                    Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n+                    None => true,\n+                });\n \n             if query.case_sensitive {\n                 // FIXME: This does not do a subsequence match.\n@@ -341,6 +369,20 @@ pub fn search_dependencies<'a>(\n     res\n }\n \n+fn item_import_kind(item: ItemInNs) -> Option<ImportKind> {\n+    Some(match item.as_module_def_id()? {\n+        ModuleDefId::ModuleId(_) => ImportKind::Module,\n+        ModuleDefId::FunctionId(_) => ImportKind::Function,\n+        ModuleDefId::AdtId(_) => ImportKind::Adt,\n+        ModuleDefId::EnumVariantId(_) => ImportKind::EnumVariant,\n+        ModuleDefId::ConstId(_) => ImportKind::Const,\n+        ModuleDefId::StaticId(_) => ImportKind::Static,\n+        ModuleDefId::TraitId(_) => ImportKind::Trait,\n+        ModuleDefId::TypeAliasId(_) => ImportKind::TypeAlias,\n+        ModuleDefId::BuiltinType(_) => ImportKind::BuiltinType,\n+    })\n+}\n+\n #[cfg(test)]\n mod tests {\n     use base_db::{fixture::WithFixture, SourceDatabase, Upcast};\n@@ -758,4 +800,34 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn search_exclusions() {\n+        let ra_fixture = r#\"\n+            //- /main.rs crate:main deps:dep\n+            //- /dep.rs crate:dep\n+\n+            pub struct fmt;\n+            pub struct FMT;\n+        \"#;\n+\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"FMT\"),\n+            expect![[r#\"\n+                dep::fmt (t)\n+                dep::fmt (v)\n+                dep::FMT (t)\n+                dep::FMT (v)\n+            \"#]],\n+        );\n+\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"FMT\").exclude_import_kind(ImportKind::Adt),\n+            expect![[r#\"\"#]],\n+        );\n+    }\n }"}, {"sha": "09046d3c36a8dad72bfd1cf3bc7d8cad9d8071c4", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4baac238a8343d7c5ced58603bf122c66cbf8c82/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=4baac238a8343d7c5ced58603bf122c66cbf8c82", "patch": "@@ -36,8 +36,15 @@ pub fn find_similar_imports<'a>(\n     krate: Crate,\n     name_to_import: &str,\n     limit: usize,\n+    ignore_modules: bool,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_similar_imports\");\n+\n+    let mut external_query = import_map::Query::new(name_to_import).limit(limit);\n+    if ignore_modules {\n+        external_query = external_query.exclude_import_kind(import_map::ImportKind::Module);\n+    }\n+\n     find_imports(\n         sema,\n         krate,\n@@ -46,7 +53,7 @@ pub fn find_similar_imports<'a>(\n             local_query.limit(limit);\n             local_query\n         },\n-        import_map::Query::new(name_to_import).limit(limit),\n+        external_query,\n     )\n }\n "}]}