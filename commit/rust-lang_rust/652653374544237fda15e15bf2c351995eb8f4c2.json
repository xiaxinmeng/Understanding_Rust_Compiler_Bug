{"sha": "652653374544237fda15e15bf2c351995eb8f4c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjY1MzM3NDU0NDIzN2ZkYTE1ZTE1YmYyYzM1MTk5NWViOGY0YzI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T00:56:00Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T00:56:00Z"}, "message": "Merge pull request #879 from matklad/proper-exit-code\n\ncargo-fmt: don't return zero on failure", "tree": {"sha": "0a54cb1217342bc688d1aecd457f5de614c19c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a54cb1217342bc688d1aecd457f5de614c19c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652653374544237fda15e15bf2c351995eb8f4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652653374544237fda15e15bf2c351995eb8f4c2", "html_url": "https://github.com/rust-lang/rust/commit/652653374544237fda15e15bf2c351995eb8f4c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652653374544237fda15e15bf2c351995eb8f4c2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc9f70116657fa104a230798183dbd89cdaf461", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc9f70116657fa104a230798183dbd89cdaf461", "html_url": "https://github.com/rust-lang/rust/commit/cfc9f70116657fa104a230798183dbd89cdaf461"}, {"sha": "ac7778cc51774a96d89f1a9244d41558d7698429", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7778cc51774a96d89f1a9244d41558d7698429", "html_url": "https://github.com/rust-lang/rust/commit/ac7778cc51774a96d89f1a9244d41558d7698429"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "d267dc5e35d18ea144d1fdbc1aebc7e7fb09f35e", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/652653374544237fda15e15bf2c351995eb8f4c2/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652653374544237fda15e15bf2c351995eb8f4c2/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=652653374544237fda15e15bf2c351995eb8f4c2", "patch": "@@ -12,19 +12,30 @@\n \n #![cfg(not(test))]\n #![cfg(feature=\"cargo-fmt\")]\n+#![deny(warnings)]\n \n extern crate getopts;\n extern crate rustc_serialize;\n \n-use std::path::PathBuf;\n-use std::process::Command;\n use std::env;\n+use std::io::Write;\n+use std::path::PathBuf;\n+use std::process::{Command, ExitStatus};\n use std::str;\n \n use getopts::Options;\n use rustc_serialize::json::Json;\n \n fn main() {\n+    let exit_status = execute();\n+    std::io::stdout().flush().unwrap();\n+    std::process::exit(exit_status);\n+}\n+\n+fn execute() -> i32 {\n+    let success = 0;\n+    let failure = 1;\n+\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n     opts.optflag(\"q\", \"quiet\", \"no output printed to stdout\");\n@@ -34,21 +45,34 @@ fn main() {\n         Ok(m) => m,\n         Err(e) => {\n             print_usage(&opts, &e.to_string());\n-            return;\n+            return failure;\n         }\n     };\n \n     let (verbose, quiet) = (matches.opt_present(\"v\"), matches.opt_present(\"q\"));\n \n     if verbose && quiet {\n         print_usage(&opts, \"quiet mode and verbose mode are not compatible\");\n-        return;\n+        return failure;\n     }\n \n     if matches.opt_present(\"h\") {\n         print_usage(&opts, \"\");\n-    } else {\n-        format_crate(&opts, verbose, quiet);\n+        return success;\n+    }\n+\n+    match format_crate(verbose, quiet) {\n+        Err(e) => {\n+            print_usage(&opts, &e.to_string());\n+            failure\n+        }\n+        Ok(status) => {\n+            if status.success() {\n+                success\n+            } else {\n+                status.code().unwrap_or(failure)\n+            }\n+        }\n     }\n }\n \n@@ -59,14 +83,8 @@ fn print_usage(opts: &Options, reason: &str) {\n              opts.usage(&msg));\n }\n \n-fn format_crate(opts: &Options, verbose: bool, quiet: bool) {\n-    let targets = match get_targets() {\n-        Ok(t) => t,\n-        Err(e) => {\n-            print_usage(opts, &e.to_string());\n-            return;\n-        }\n-    };\n+fn format_crate(verbose: bool, quiet: bool) -> Result<ExitStatus, std::io::Error> {\n+    let targets = try!(get_targets());\n \n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets.into_iter()\n@@ -80,7 +98,6 @@ fn format_crate(opts: &Options, verbose: bool, quiet: bool) {\n                                .collect();\n \n     format_files(&files, &get_fmt_args(), verbose, quiet)\n-        .unwrap_or_else(|e| print_usage(opts, &e.to_string()));\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -158,7 +175,7 @@ fn format_files(files: &Vec<PathBuf>,\n                 fmt_args: &Vec<String>,\n                 verbose: bool,\n                 quiet: bool)\n-                -> Result<(), std::io::Error> {\n+                -> Result<ExitStatus, std::io::Error> {\n     let stdout = if quiet {\n         std::process::Stdio::null()\n     } else {\n@@ -179,7 +196,5 @@ fn format_files(files: &Vec<PathBuf>,\n                                .args(files)\n                                .args(fmt_args)\n                                .spawn());\n-    try!(command.wait());\n-\n-    Ok(())\n+    command.wait()\n }"}]}