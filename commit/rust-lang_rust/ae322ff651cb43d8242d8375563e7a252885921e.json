{"sha": "ae322ff651cb43d8242d8375563e7a252885921e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzIyZmY2NTFjYjQzZDgyNDJkODM3NTU2M2U3YTI1Mjg4NTkyMWU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T10:48:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-22T05:22:18Z"}, "message": "Add a new option `-Cbitcode-in-rlib`.\n\nIt defaults to true, but Cargo will set this to false whenever it can to\nreduce compile times.", "tree": {"sha": "ec97e43141a167ef3735c576f7d638dc2ab9436b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec97e43141a167ef3735c576f7d638dc2ab9436b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae322ff651cb43d8242d8375563e7a252885921e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae322ff651cb43d8242d8375563e7a252885921e", "html_url": "https://github.com/rust-lang/rust/commit/ae322ff651cb43d8242d8375563e7a252885921e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae322ff651cb43d8242d8375563e7a252885921e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9f6dfef0bebd2c2c4d871c4d02f4c5a70844fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f6dfef0bebd2c2c4d871c4d02f4c5a70844fe9", "html_url": "https://github.com/rust-lang/rust/commit/b9f6dfef0bebd2c2c4d871c4d02f4c5a70844fe9"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "eb7e34ad9ed2e85fb43bfece0d30c937f3ed8cff", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae322ff651cb43d8242d8375563e7a252885921e/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae322ff651cb43d8242d8375563e7a252885921e/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=ae322ff651cb43d8242d8375563e7a252885921e", "patch": "@@ -387,6 +387,26 @@ It takes one of the following values:\n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n \n+## bitcode-in-rlib\n+\n+This flag controls whether or not the compiler puts compressed LLVM bitcode\n+into generated rlibs. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n+* `n`, `no`, or `off`: omit bitcode from rlibs.\n+\n+LLVM bitcode is only needed when link-time optimization (LTO) is being\n+performed, but it is enabled by default for backwards compatibility reasons.\n+\n+The use of `-C bitcode-in-rlib=no` can significantly improve compile times and\n+reduce generated file sizes. For these reasons, Cargo uses `-C\n+bitcode-in-rlib=no` whenever possible. Likewise, if you are building directly\n+with `rustc` we recommend using `-C bitcode-in-rlib=no` whenever you are not\n+using LTO.\n+\n+If combined with `-C lto`, `-C bitcode-in-rlib=no` will cause `rustc` to abort\n+at start-up, because the combination is invalid.\n+\n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md"}, {"sha": "db60760e4596f7c0f4af56293ad60a777dee9cbd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=ae322ff651cb43d8242d8375563e7a252885921e", "patch": "@@ -378,7 +378,8 @@ pub struct CompiledModules {\n }\n \n fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.crate_types.borrow().contains(&config::CrateType::Rlib)\n+    sess.opts.cg.bitcode_in_rlib\n+        && sess.crate_types.borrow().contains(&config::CrateType::Rlib)\n         && sess.opts.output_types.contains_key(&OutputType::Exe)\n }\n "}, {"sha": "02fad11d9b879b09283dbf62e786c5c281a4e343", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=ae322ff651cb43d8242d8375563e7a252885921e", "patch": "@@ -505,6 +505,10 @@ fn test_codegen_options_tracking_hash() {\n     opts = reference.clone();\n     opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+    opts = reference.clone();\n+    opts.cg.bitcode_in_rlib = false;\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n }\n \n #[test]"}, {"sha": "f6d7e091e00d6b6c5a74825152be8a7275ab9967", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=ae322ff651cb43d8242d8375563e7a252885921e", "patch": "@@ -1685,6 +1685,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    if !cg.bitcode_in_rlib {\n+        match cg.lto {\n+            LtoCli::No | LtoCli::Unspecified => {}\n+            LtoCli::Yes | LtoCli::NoParam | LtoCli::Thin | LtoCli::Fat => early_error(\n+                error_format,\n+                \"options `-C bitcode-in-rlib=no` and `-C lto` are incompatible\",\n+            ),\n+        }\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut debugging_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "62eb3fca595314a87fe635a05e230cadec737077", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae322ff651cb43d8242d8375563e7a252885921e/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=ae322ff651cb43d8242d8375563e7a252885921e", "patch": "@@ -703,6 +703,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n+    bitcode_in_rlib: bool = (true, parse_bool, [TRACKED],\n+        \"emit bitcode in rlibs (default: yes)\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,"}]}