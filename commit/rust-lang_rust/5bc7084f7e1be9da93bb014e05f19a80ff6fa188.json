{"sha": "5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYzcwODRmN2UxYmU5ZGE5M2JiMDE0ZTA1ZjE5YTgwZmY2ZmExODg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T21:31:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-01T22:01:00Z"}, "message": "Convert `x.as_str().to_string()` to `x.to_string()` where possible.", "tree": {"sha": "791694964a4af2e1c0f109fb2c423f2e6f9893c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791694964a4af2e1c0f109fb2c423f2e6f9893c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "html_url": "https://github.com/rust-lang/rust/commit/5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "html_url": "https://github.com/rust-lang/rust/commit/9cf59b517867562ebf7413ca2cda762c6b7d6fc0"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "cea790375fc3d89671c1cd91ced8ff0a1cc5e112", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -525,7 +525,7 @@ impl<'tcx> DepNodeParams<'tcx> for CrateNum {\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n-        tcx.crate_name(*self).as_str().to_string()\n+        tcx.crate_name(*self).to_string()\n     }\n }\n "}, {"sha": "9ff52727187a543781439a90c634634e75fcc23d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -3382,7 +3382,7 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n     // either in std or core, i.e. has either a `::std::ops::Range` or\n     // `::core::ops::Range` prefix.\n     fn is_range_path(path: &Path) -> bool {\n-        let segs: Vec<_> = path.segments.iter().map(|seg| seg.ident.as_str().to_string()).collect();\n+        let segs: Vec<_> = path.segments.iter().map(|seg| seg.ident.to_string()).collect();\n         let segs: Vec<_> = segs.iter().map(|seg| &**seg).collect();\n \n         // \"{{root}}\" is the equivalent of `::` prefix in `Path`."}, {"sha": "328d475be06066e700c7bb09648a88e735e68510", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -564,7 +564,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global asm\"));\n-                self.s.word(ga.asm.as_str().to_string());\n+                self.s.word(ga.asm.to_string());\n                 self.end()\n             }\n             hir::ItemKind::TyAlias(ref ty, ref generics) => {\n@@ -1855,7 +1855,7 @@ impl<'a> State<'a> {\n         self.commasep(Inconsistent, &decl.inputs, |s, ty| {\n             s.ibox(INDENT_UNIT);\n             if let Some(arg_name) = arg_names.get(i) {\n-                s.s.word(arg_name.as_str().to_string());\n+                s.s.word(arg_name.to_string());\n                 s.s.word(\":\");\n                 s.s.space();\n             } else if let Some(body_id) = body_id {"}, {"sha": "b64e44b6a5afba877ebf6c671db1b93a5b0311cb", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> OnUnimplementedDirective {\n                     c.ident().map_or(false, |ident| {\n                         options.contains(&(\n                             ident.name,\n-                            c.value_str().map(|s| s.as_str().to_string())\n+                            c.value_str().map(|s| s.to_string())\n                         ))\n                     })\n                 }) {"}, {"sha": "039949d915a92da0be3e02a25cf470b8fb3ad3ee", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -264,7 +264,7 @@ impl<'sess> OnDiskCache<'sess> {\n             let sorted_cnums = sorted_cnums_including_local_crate(tcx);\n             let prev_cnums: Vec<_> = sorted_cnums.iter()\n                 .map(|&cnum| {\n-                    let crate_name = tcx.original_crate_name(cnum).as_str().to_string();\n+                    let crate_name = tcx.original_crate_name(cnum).to_string();\n                     let crate_disambiguator = tcx.crate_disambiguator(cnum);\n                     (cnum.as_u32(), crate_name, crate_disambiguator)\n                 })"}, {"sha": "c3f2a5161ae1c4c93470268d21fbebf72871fb42", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -552,8 +552,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n         let llmod_id = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                        &[\"crate\"],\n-                                                       Some(\"allocator\")).as_str()\n-                                                                         .to_string();\n+                                                       Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);\n         time(tcx.sess, \"write allocator module\", || {\n             backend.codegen_allocator(tcx, &mut modules, kind)\n@@ -576,8 +575,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         // Codegen the encoded metadata.\n         let metadata_cgu_name = cgu_name_builder.build_cgu_name(LOCAL_CRATE,\n                                                                 &[\"crate\"],\n-                                                                Some(\"metadata\")).as_str()\n-                                                                                 .to_string();\n+                                                                Some(\"metadata\")).to_string();\n         let mut metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n         time(tcx.sess, \"write compressed metadata\", || {\n             backend.write_compressed_metadata(tcx, &ongoing_codegen.metadata,"}, {"sha": "f740d1a9bfaf2cac7d591d11c845f563f4be15c0", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -94,8 +94,8 @@ impl AssertModuleSource<'tcx> {\n             return;\n         }\n \n-        let user_path = self.field(attr, sym::module).as_str().to_string();\n-        let crate_name = self.tcx.crate_name(LOCAL_CRATE).as_str().to_string();\n+        let user_path = self.field(attr, sym::module).to_string();\n+        let crate_name = self.tcx.crate_name(LOCAL_CRATE).to_string();\n \n         if !user_path.starts_with(&crate_name) {\n             let msg = format!(\"Found malformed codegen unit name `{}`. \\\n@@ -131,7 +131,7 @@ impl AssertModuleSource<'tcx> {\n                     cgu_name,\n                     self.available_cgus\n                         .iter()\n-                        .map(|cgu| cgu.as_str().to_string())\n+                        .map(|cgu| cgu.to_string())\n                         .collect::<Vec<_>>()\n                         .join(\", \")));\n         }"}, {"sha": "cc1d1503c43d4a784941fa32e273dffac9aff70e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -1167,7 +1167,7 @@ fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, ha\n         global: false,\n         res: Res::Err,\n         segments: vec![PathSegment {\n-            name: name.as_str().to_string(),\n+            name: name.to_string(),\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs)\n         }],\n     }"}, {"sha": "74ab5c790193dce74893608b9fc3f0ea1f066f55", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -623,7 +623,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n         self.maybe_print_comment(attr.span.lo());\n         if attr.is_sugared_doc {\n-            self.word(attr.value_str().unwrap().as_str().to_string());\n+            self.word(attr.value_str().unwrap().to_string());\n             self.hardbreak()\n         } else {\n             match attr.style {\n@@ -1234,7 +1234,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::GlobalAsm(ref ga) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"));\n-                self.s.word(ga.asm.as_str().to_string());\n+                self.s.word(ga.asm.to_string());\n                 self.end();\n             }\n             ast::ItemKind::TyAlias(ref ty, ref generics) => {\n@@ -2335,7 +2335,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_name(&mut self, name: ast::Name) {\n-        self.s.word(name.as_str().to_string());\n+        self.s.word(name.to_string());\n         self.ann.post(self, AnnNode::Name(&name))\n     }\n "}, {"sha": "2a8c455d7f0298bc938c611c1e5bbb2be98e90ed", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc7084f7e1be9da93bb014e05f19a80ff6fa188/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "patch": "@@ -225,7 +225,7 @@ fn generic_extension<'cx>(\n                 };\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false, None);\n                 p.root_module_name =\n-                    cx.current_expansion.module.mod_path.last().map(|id| id.as_str().to_string());\n+                    cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n                 p.process_potential_macro_variable();"}]}