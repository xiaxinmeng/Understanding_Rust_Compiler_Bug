{"sha": "fa14d02d9bdd17206a26a25c02555a99bf980f1c", "node_id": "C_kwDOAAsO6NoAKGZhMTRkMDJkOWJkZDE3MjA2YTI2YTI1YzAyNTU1YTk5YmY5ODBmMWM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-02T10:42:36Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-02T10:55:52Z"}, "message": "Remove Clean trait implementation for ty::TraitRef", "tree": {"sha": "2e634475b7d7cd6b9779c131ccf4f473021c5e51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e634475b7d7cd6b9779c131ccf4f473021c5e51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa14d02d9bdd17206a26a25c02555a99bf980f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa14d02d9bdd17206a26a25c02555a99bf980f1c", "html_url": "https://github.com/rust-lang/rust/commit/fa14d02d9bdd17206a26a25c02555a99bf980f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa14d02d9bdd17206a26a25c02555a99bf980f1c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482153bc208df5fc236cc0e1cddb24e93fcc332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/482153bc208df5fc236cc0e1cddb24e93fcc332f", "html_url": "https://github.com/rust-lang/rust/commit/482153bc208df5fc236cc0e1cddb24e93fcc332f"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "4c7c9412edda755c99fc9e8cd4ea062c358b61fb", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=fa14d02d9bdd17206a26a25c02555a99bf980f1c", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             kind: Box::new(ImplItem(Box::new(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx)),\n+                trait_: Some(clean_trait_ref_with_bindings(self.cx, trait_ref, &[])),\n                 for_: clean_middle_ty(ty, self.cx, None),\n                 items: Vec::new(),\n                 polarity,"}, {"sha": "01dd95e6e409395848bb6eeca124ca3ad9d9bea3", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=fa14d02d9bdd17206a26a25c02555a99bf980f1c", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(trait_ref.0.clean(cx)),\n+                            trait_: Some(clean_trait_ref_with_bindings(cx, trait_ref.0, &[])),\n                             for_: clean_middle_ty(ty.0, cx, None),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)"}, {"sha": "e86c1d553a8977c2027ae39ea590c7ac487e7147", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=fa14d02d9bdd17206a26a25c02555a99bf980f1c", "patch": "@@ -16,9 +16,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n-    clean_ty_generics, clean_variant_def, clean_visibility, utils, Attributes, AttributesExt,\n-    Clean, ImplKind, ItemId, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty,\n+    clean_trait_ref_with_bindings, clean_ty, clean_ty_generics, clean_variant_def,\n+    clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -450,7 +450,7 @@ pub(crate) fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.map(|t| t.clean(cx));\n+    let trait_ = associated_trait.map(|t| clean_trait_ref_with_bindings(cx, t, &[]));\n     if trait_.as_ref().map(|t| t.def_id()) == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "85505c699f9581142e47f5a6c825da040fc2d288", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa14d02d9bdd17206a26a25c02555a99bf980f1c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fa14d02d9bdd17206a26a25c02555a99bf980f1c", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     }\n }\n \n-fn clean_trait_ref_with_bindings<'tcx>(\n+pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     bindings: &[TypeBinding],\n@@ -180,12 +180,6 @@ fn clean_trait_ref_with_bindings<'tcx>(\n     path\n }\n \n-impl<'tcx> Clean<'tcx, Path> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        clean_trait_ref_with_bindings(cx, *self, &[])\n-    }\n-}\n-\n fn clean_poly_trait_ref_with_bindings<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -432,7 +426,7 @@ fn clean_projection<'tcx>(\n     def_id: Option<DefId>,\n ) -> Type {\n     let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n+    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), &[]);\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))"}]}