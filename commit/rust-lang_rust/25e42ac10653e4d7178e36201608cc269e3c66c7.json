{"sha": "25e42ac10653e4d7178e36201608cc269e3c66c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTQyYWMxMDY1M2U0ZDcxNzhlMzYyMDE2MDhjYzI2OWUzYzY2Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-02T08:42:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-02T08:42:38Z"}, "message": "Auto merge of #31937 - petrochenkov:field, r=eddyb\n\nThe names are \"0\", \"1\", \"2\" etc, the same as used in field access.\n\nThis generally make things simpler and potentially allows to reuse braced struct machinery (struct patterns, struct expressions) for tuple structs.\n\nI haven't touched the AST for stability reasons, but I intend to do it later.\n\nr? @eddyb", "tree": {"sha": "594b59612b39cf9ea5b7204b41ad95abe22b6353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/594b59612b39cf9ea5b7204b41ad95abe22b6353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e42ac10653e4d7178e36201608cc269e3c66c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e42ac10653e4d7178e36201608cc269e3c66c7", "html_url": "https://github.com/rust-lang/rust/commit/25e42ac10653e4d7178e36201608cc269e3c66c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e42ac10653e4d7178e36201608cc269e3c66c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0400d929e8626192ba97b4ec12e52aabc8b476d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0400d929e8626192ba97b4ec12e52aabc8b476d5", "html_url": "https://github.com/rust-lang/rust/commit/0400d929e8626192ba97b4ec12e52aabc8b476d5"}, {"sha": "bc93fbc32fca4d70182bf330f0c99a7852a36f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc93fbc32fca4d70182bf330f0c99a7852a36f17", "html_url": "https://github.com/rust-lang/rust/commit/bc93fbc32fca4d70182bf330f0c99a7852a36f17"}], "stats": {"total": 377, "additions": 144, "deletions": 233}, "files": [{"sha": "11aea3727299db780397e471a73459aaf8782031", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -150,8 +150,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     for field in v.node.data.fields() {\n                         self.create_def_with_parent(\n                             Some(variant_def_index),\n-                            field.node.id,\n-                            DefPathData::Field(field.node.kind));\n+                            field.id,\n+                            DefPathData::Field(field.name));\n                     }\n                 }\n             }\n@@ -166,7 +166,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 }\n \n                 for field in struct_def.fields() {\n-                    self.create_def(field.node.id, DefPathData::Field(field.node.kind));\n+                    self.create_def(field.id, DefPathData::Field(field.name));\n                 }\n             }\n             ItemTrait(_, _, ref bounds, _) => {"}, {"sha": "0f99d85b083fefb76fce0d8d8687592cf5c717d9", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -11,7 +11,6 @@\n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::{DefId, DefIndex};\n use rustc_data_structures::fnv::FnvHashMap;\n-use rustc_front::hir;\n use syntax::ast;\n use syntax::parse::token::InternedString;\n use util::nodemap::NodeMap;\n@@ -84,8 +83,7 @@ pub enum DefPathData {\n     TypeParam(ast::Name),\n     LifetimeDef(ast::Name),\n     EnumVariant(ast::Name),\n-    PositionalField,\n-    Field(hir::StructFieldKind),\n+    Field(ast::Name),\n     StructCtor, // implicit ctor for a tuple-like struct\n     Initializer, // initializer for a const\n     Binding(ast::Name), // pattern binding\n@@ -186,19 +184,11 @@ impl DefPathData {\n             LifetimeDef(name) |\n             EnumVariant(name) |\n             DetachedCrate(name) |\n-            Binding(name) => {\n+            Binding(name) |\n+            Field(name) => {\n                 name.as_str()\n             }\n \n-            Field(hir::StructFieldKind::NamedField(name, _)) => {\n-                name.as_str()\n-            }\n-\n-            PositionalField |\n-            Field(hir::StructFieldKind::UnnamedField(_)) => {\n-                InternedString::new(\"{{field}}\")\n-            }\n-\n             // note that this does not show up in user printouts\n             CrateRoot => {\n                 InternedString::new(\"{{root}}\")"}, {"sha": "fb5413114b7893ddcc78241c98f856a0b0644a09", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n-        self.with_lint_attrs(&s.node.attrs, |cx| {\n+        self.with_lint_attrs(&s.attrs, |cx| {\n             run_lints!(cx, check_struct_field, late_passes, s);\n             hir_visit::walk_struct_field(cx, s);\n         })"}, {"sha": "eefefed5f2daa3ec5baac231de7658ebe4b733a4", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -221,12 +221,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n-            has_extern_repr || inherited_pub_visibility || match f.node.kind {\n-                hir::NamedField(_, hir::Public) => true,\n-                _ => false\n-            }\n+            has_extern_repr || inherited_pub_visibility || f.vis == hir::Public\n         });\n-        self.live_symbols.extend(live_fields.map(|f| f.node.id));\n+        self.live_symbols.extend(live_fields.map(|f| f.id));\n \n         intravisit::walk_struct_def(self, def);\n     }\n@@ -431,17 +428,16 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         should_warn && !self.symbol_is_live(item.id, ctor_id)\n     }\n \n-    fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool {\n-        let is_named = node.name().is_some();\n-        let field_type = self.tcx.node_id_to_type(node.id);\n+    fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n+        let field_type = self.tcx.node_id_to_type(field.id);\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n             _ => false\n         };\n-        is_named\n-            && !self.symbol_is_live(node.id, None)\n+        !field.is_positional()\n+            && !self.symbol_is_live(field.id, None)\n             && !is_marker_field\n-            && !has_allow_dead_code_or_lang_attr(&node.attrs)\n+            && !has_allow_dead_code_or_lang_attr(&field.attrs)\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n@@ -547,9 +543,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, field: &hir::StructField) {\n-        if self.should_warn_about_field(&field.node) {\n-            self.warn_dead_code(field.node.id, field.span,\n-                                field.node.name().unwrap(), \"struct field\");\n+        if self.should_warn_about_field(&field) {\n+            self.warn_dead_code(field.id, field.span,\n+                                field.name, \"struct field\");\n         }\n \n         intravisit::walk_struct_field(self, field);"}, {"sha": "c35c86ce974a5ae9051a58e08d6f938a5b849df1", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n-        self.annotate(s.node.id, &s.node.attrs, s.span, AnnotationKind::Required, |v| {\n+        self.annotate(s.id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n     }"}, {"sha": "5d61892fbe211e347e76e6484aaa65e850d96d37", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -1371,8 +1371,6 @@ pub struct FieldDefData<'tcx, 'container: 'tcx> {\n     /// The field's DefId. NOTE: the fields of tuple-like enum variants\n     /// are not real items, and don't have entries in tcache etc.\n     pub did: DefId,\n-    /// special_idents::unnamed_field.name\n-    /// if this is a tuple-like field\n     pub name: Name,\n     pub vis: hir::Visibility,\n     /// TyIVar is used here to allow for variance (see the doc at"}, {"sha": "75a1363fcf9efab003c7780fd2dc5af93ed69b6a", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -700,15 +700,13 @@ pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> Poly\n }\n \n pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField {\n-    let StructField {node: StructField_ {id, kind, ty, attrs}, span} = f;\n-    Spanned {\n-        node: StructField_ {\n-            id: fld.new_id(id),\n-            kind: kind,\n-            ty: fld.fold_ty(ty),\n-            attrs: fold_attrs(attrs, fld),\n-        },\n-        span: fld.new_span(span),\n+    StructField {\n+        span: fld.new_span(f.span),\n+        id: fld.new_id(f.id),\n+        name: f.name,\n+        vis: f.vis,\n+        ty: fld.fold_ty(f.ty),\n+        attrs: fold_attrs(f.attrs, fld),\n     }\n }\n "}, {"sha": "cc562b0f7b20ad515f1d2a46d0bd0d304d1a98d7", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -24,7 +24,6 @@ pub use self::Mutability::*;\n pub use self::PathListItem_::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n-pub use self::StructFieldKind::*;\n pub use self::TraitItem_::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n@@ -1242,43 +1241,20 @@ impl Visibility {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct StructField_ {\n-    pub kind: StructFieldKind,\n+pub struct StructField {\n+    pub span: Span,\n+    pub name: Name,\n+    pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,\n }\n \n-impl StructField_ {\n-    pub fn name(&self) -> Option<Name> {\n-        match self.kind {\n-            NamedField(name, _) => Some(name),\n-            UnnamedField(_) => None,\n-        }\n-    }\n-}\n-\n-pub type StructField = Spanned<StructField_>;\n-\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum StructFieldKind {\n-    NamedField(Name, Visibility),\n-    /// Element of a tuple-like struct\n-    UnnamedField(Visibility),\n-}\n-\n-impl StructFieldKind {\n-    pub fn is_unnamed(&self) -> bool {\n-        match *self {\n-            UnnamedField(..) => true,\n-            NamedField(..) => false,\n-        }\n-    }\n-\n-    pub fn visibility(&self) -> Visibility {\n-        match *self {\n-            NamedField(_, vis) | UnnamedField(vis) => vis,\n-        }\n+impl StructField {\n+    // Still necessary in couple of places\n+    pub fn is_positional(&self) -> bool {\n+        let first = self.name.as_str().as_bytes()[0];\n+        first >= b'0' && first <= b'9'\n     }\n }\n "}, {"sha": "e6f448654acc56c35717c1f97090452d7b60e467", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -669,9 +669,9 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n-    walk_opt_name(visitor, struct_field.span, struct_field.node.name());\n-    visitor.visit_ty(&struct_field.node.ty);\n-    walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n+    visitor.visit_name(struct_field.span, struct_field.name);\n+    visitor.visit_ty(&struct_field.ty);\n+    walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {"}, {"sha": "1bfcb298586334866b06cc72bff1a763dd46fd2e", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -578,12 +578,14 @@ pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::V\n     match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n+                                           .enumerate()\n                                            .map(|f| lower_struct_field(lctx, f))\n                                            .collect(),\n                                      id)\n         }\n         VariantData::Tuple(ref fields, id) => {\n             hir::VariantData::Tuple(fields.iter()\n+                                          .enumerate()\n                                           .map(|f| lower_struct_field(lctx, f))\n                                           .collect(),\n                                     id)\n@@ -607,15 +609,17 @@ pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::Po\n     }\n }\n \n-pub fn lower_struct_field(lctx: &LoweringContext, f: &StructField) -> hir::StructField {\n-    Spanned {\n-        node: hir::StructField_ {\n-            id: f.node.id,\n-            kind: lower_struct_field_kind(lctx, &f.node.kind),\n-            ty: lower_ty(lctx, &f.node.ty),\n-            attrs: lower_attrs(lctx, &f.node.attrs),\n-        },\n+pub fn lower_struct_field(lctx: &LoweringContext,\n+                          (index, f): (usize, &StructField))\n+                          -> hir::StructField {\n+    hir::StructField {\n         span: f.span,\n+        id: f.node.id,\n+        name: f.node.ident().map(|ident| ident.name)\n+                            .unwrap_or(token::intern(&index.to_string())),\n+        vis: lower_visibility(lctx, f.node.kind.visibility()),\n+        ty: lower_ty(lctx, &f.node.ty),\n+        attrs: lower_attrs(lctx, &f.node.attrs),\n     }\n }\n \n@@ -1589,15 +1593,6 @@ pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::Bindi\n     }\n }\n \n-pub fn lower_struct_field_kind(lctx: &LoweringContext,\n-                               s: &StructFieldKind)\n-                               -> hir::StructFieldKind {\n-    match *s {\n-        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(lctx, vis)),\n-        UnnamedField(vis) => hir::UnnamedField(lower_visibility(lctx, vis)),\n-    }\n-}\n-\n pub fn lower_unsafe_source(_lctx: &LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n     match u {\n         CompilerGenerated => hir::CompilerGenerated,"}, {"sha": "49fbcea3dbf14eefeaae0493716cf03b648eb135", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -915,14 +915,9 @@ impl<'a> State<'a> {\n             if struct_def.is_tuple() {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent, struct_def.fields(), |s, field| {\n-                    match field.node.kind {\n-                        hir::NamedField(..) => panic!(\"unexpected named field\"),\n-                        hir::UnnamedField(vis) => {\n-                            try!(s.print_visibility(vis));\n-                            try!(s.maybe_print_comment(field.span.lo));\n-                            s.print_type(&field.node.ty)\n-                        }\n-                    }\n+                    try!(s.print_visibility(field.vis));\n+                    try!(s.maybe_print_comment(field.span.lo));\n+                    s.print_type(&field.ty)\n                 }));\n                 try!(self.pclose());\n             }\n@@ -939,19 +934,14 @@ impl<'a> State<'a> {\n             try!(self.hardbreak_if_not_bol());\n \n             for field in struct_def.fields() {\n-                match field.node.kind {\n-                    hir::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    hir::NamedField(name, visibility) => {\n-                        try!(self.hardbreak_if_not_bol());\n-                        try!(self.maybe_print_comment(field.span.lo));\n-                        try!(self.print_outer_attributes(&field.node.attrs));\n-                        try!(self.print_visibility(visibility));\n-                        try!(self.print_name(name));\n-                        try!(self.word_nbsp(\":\"));\n-                        try!(self.print_type(&field.node.ty));\n-                        try!(word(&mut self.s, \",\"));\n-                    }\n-                }\n+                try!(self.hardbreak_if_not_bol());\n+                try!(self.maybe_print_comment(field.span.lo));\n+                try!(self.print_outer_attributes(&field.attrs));\n+                try!(self.print_visibility(field.vis));\n+                try!(self.print_name(field.name));\n+                try!(self.word_nbsp(\":\"));\n+                try!(self.print_type(&field.ty));\n+                try!(word(&mut self.s, \",\"));\n             }\n \n             self.bclose(span)"}, {"sha": "2c86c713b1b7ac9001195264c8dfcc92d49b1f66", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n     }\n \n     fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.node.id);\n+        self.operation.visit_id(struct_field.id);\n         intravisit::walk_struct_field(self, struct_field)\n     }\n "}, {"sha": "925aec9894eaa337904db4a92ed937a2017cc62d", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -283,10 +283,7 @@ impl LateLintPass for NonSnakeCase {\n     fn check_struct_def(&mut self, cx: &LateContext, s: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, _: ast::NodeId) {\n         for sf in s.fields() {\n-            if let hir::StructField_ { kind: hir::NamedField(name, _), .. } = sf.node {\n-                self.check_snake_case(cx, \"structure field\", &name.as_str(),\n-                                      Some(sf.span));\n-            }\n+            self.check_snake_case(cx, \"structure field\", &sf.name.as_str(), Some(sf.span));\n         }\n     }\n }"}, {"sha": "2c96b84471de690348602d7bd8c43a575012dd78", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -126,7 +126,7 @@ impl LateLintPass for BoxPointers {\n             hir::ItemStruct(ref struct_def, _) => {\n                 for struct_field in struct_def.fields() {\n                     self.check_heap_type(cx, struct_field.span,\n-                                         cx.tcx.node_id_to_type(struct_field.node.id));\n+                                         cx.tcx.node_id_to_type(struct_field.id));\n                 }\n             }\n             _ => ()\n@@ -428,12 +428,12 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n-        if let hir::NamedField(_, vis) = sf.node.kind {\n-            if vis == hir::Public || self.in_variant {\n+        if !sf.is_positional() {\n+            if sf.vis == hir::Public || self.in_variant {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");\n                 self.check_missing_docs_attrs(cx, Some(cur_struct_def),\n-                                              &sf.node.attrs, sf.span,\n+                                              &sf.attrs, sf.span,\n                                               \"a struct field\")\n             }\n         }"}, {"sha": "bce83d33f9ffe304b7aae7a9b46c4c2cc8617d9f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -48,8 +48,7 @@ use rbml::reader;\n use rbml;\n use serialize::Decodable;\n use syntax::attr;\n-use syntax::parse::token::{IdentInterner, special_idents};\n-use syntax::parse::token;\n+use syntax::parse::token::{self, IdentInterner};\n use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap::{self, Span, BytePos, NO_EXPANSION};\n@@ -406,6 +405,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n                                 tcx: &ty::ctxt<'tcx>) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n+        let mut index = 0;\n         reader::tagged_docs(doc, tag_item_field).map(|f| {\n             let ff = item_family(f);\n             match ff {\n@@ -417,8 +417,9 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                   struct_field_family_to_visibility(ff))\n         }).chain(reader::tagged_docs(doc, tag_item_unnamed_field).map(|f| {\n             let ff = item_family(f);\n-            ty::FieldDefData::new(item_def_id(f, cdata),\n-                                  special_idents::unnamed_field.name,\n+            let name = intr.intern(&index.to_string());\n+            index += 1;\n+            ty::FieldDefData::new(item_def_id(f, cdata), name,\n                                   struct_field_family_to_visibility(ff))\n         })).collect()\n     }\n@@ -1153,10 +1154,13 @@ fn struct_field_family_to_visibility(family: Family) -> hir::Visibility {\n pub fn get_struct_field_names(intr: &IdentInterner, cdata: Cmd, id: DefIndex)\n     -> Vec<ast::Name> {\n     let item = cdata.lookup_item(id);\n+    let mut index = 0;\n     reader::tagged_docs(item, tag_item_field).map(|an_item| {\n         item_name(intr, an_item)\n     }).chain(reader::tagged_docs(item, tag_item_unnamed_field).map(|_| {\n-        special_idents::unnamed_field.name\n+        let name = intr.intern(&index.to_string());\n+        index += 1;\n+        name\n     })).collect()\n }\n "}, {"sha": "8aee6a9a83a08b34b3d5799e5601f8c49169e6be", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -46,7 +46,6 @@ use syntax::codemap::BytePos;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::errors::Handler;\n-use syntax::parse::token::special_idents;\n use syntax;\n use rbml::writer::Encoder;\n \n@@ -249,7 +248,7 @@ fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) {\n fn encode_struct_fields(rbml_w: &mut Encoder,\n                         variant: ty::VariantDef) {\n     for f in &variant.fields {\n-        if f.name == special_idents::unnamed_field.name {\n+        if variant.is_tuple_struct() {\n             rbml_w.start_tag(tag_item_unnamed_field);\n         } else {\n             rbml_w.start_tag(tag_item_field);\n@@ -1752,9 +1751,9 @@ fn encode_struct_field_attrs(ecx: &EncodeContext,\n     impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for StructFieldVisitor<'a, 'b, 'c, 'tcx> {\n         fn visit_struct_field(&mut self, field: &hir::StructField) {\n             self.rbml_w.start_tag(tag_struct_field);\n-            let def_id = self.ecx.tcx.map.local_def_id(field.node.id);\n+            let def_id = self.ecx.tcx.map.local_def_id(field.id);\n             encode_def_id(self.rbml_w, def_id);\n-            encode_attributes(self.rbml_w, &field.node.attrs);\n+            encode_attributes(self.rbml_w, &field.attrs);\n             self.rbml_w.end_tag();\n         }\n     }"}, {"sha": "2e7ace1b6a7e865472a5d0f49e96e1ff96c01a01", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ParentVisitor<'a, 'tcx> {\n         // While we have the id of the struct definition, go ahead and parent\n         // all the fields.\n         for field in s.fields() {\n-            self.parents.insert(field.node.id, self.curparent);\n+            self.parents.insert(field.id, self.curparent);\n         }\n         intravisit::walk_struct_def(self, s)\n     }\n@@ -262,7 +262,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 for variant in &def.variants {\n                     let variant_level = self.update(variant.node.data.id(), item_level);\n                     for field in variant.node.data.fields() {\n-                        self.update(field.node.id, variant_level);\n+                        self.update(field.id, variant_level);\n                     }\n                 }\n             }\n@@ -288,8 +288,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.update(def.id(), item_level);\n                 }\n                 for field in def.fields() {\n-                    if field.node.kind.visibility() == hir::Public {\n-                        self.update(field.node.id, item_level);\n+                    if field.vis == hir::Public {\n+                        self.update(field.id, item_level);\n                     }\n                 }\n             }\n@@ -347,7 +347,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 if item_level.is_some() {\n                     self.reach().visit_generics(generics);\n                     for field in struct_def.fields() {\n-                        if self.get(field.node.id).is_some() {\n+                        if self.get(field.id).is_some() {\n                             self.reach().visit_struct_field(field);\n                         }\n                     }\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n             hir::ItemEnum(ref def, _) => {\n                 for variant in &def.variants {\n                     for field in variant.node.data.fields() {\n-                        check_inherited(field.span, field.node.kind.visibility(),\n+                        check_inherited(field.span, field.vis,\n                                         \"visibility qualifiers have no effect on variant fields\");\n                     }\n                 }\n@@ -1514,10 +1514,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n-        let vis = match s.node.kind {\n-            hir::NamedField(_, vis) | hir::UnnamedField(vis) => vis\n-        };\n-        if vis == hir::Public || self.in_variant {\n+        if s.vis == hir::Public || self.in_variant {\n             intravisit::walk_struct_field(self, s);\n         }\n     }\n@@ -1728,7 +1725,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n                 if item.vis == hir::Public {\n                     check.visit_generics(generics);\n                     for field in struct_def.fields() {\n-                        if field.node.kind.visibility() == hir::Public {\n+                        if field.vis == hir::Public {\n                             check.visit_struct_field(field);\n                         }\n                     }"}, {"sha": "758611a1ec2f0d963515be2e9cb323fcbf721a32", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -41,9 +41,7 @@ use rustc_front::hir::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n use rustc_front::hir::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{NamedField, PathListIdent, PathListMod};\n-use rustc_front::hir::StmtDecl;\n-use rustc_front::hir::UnnamedField;\n+use rustc_front::hir::{PathListIdent, PathListMod, StmtDecl};\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use rustc_front::hir::Visibility;\n use rustc_front::intravisit::{self, Visitor};\n@@ -382,17 +380,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 }\n \n                 // Record the def ID and fields of this struct.\n-                let named_fields = struct_def.fields()\n-                                             .iter()\n-                                             .filter_map(|f| {\n-                                                 match f.node.kind {\n-                                                     NamedField(name, _) => Some(name),\n-                                                     UnnamedField(_) => None,\n-                                                 }\n-                                             })\n-                                             .collect();\n+                let field_names = struct_def.fields()\n+                                            .iter()\n+                                            .map(|f| f.name)\n+                                            .collect();\n                 let item_def_id = self.ast_map.local_def_id(item.id);\n-                self.structs.insert(item_def_id, named_fields);\n+                self.structs.insert(item_def_id, field_names);\n \n                 parent\n             }"}, {"sha": "81dd514ca7839a4ef0d85728edf078c8c28b1356", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -21,7 +21,6 @@ use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n use syntax::codemap::{self, Span};\n-use syntax::parse::token::special_idents;\n \n /// check_drop_impl confirms that the Drop implementation identfied by\n /// `drop_impl_did` is not any more specialized than the type it is\n@@ -299,7 +298,7 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n                     // no need for an additional note if the overflow\n                     // was somehow on the root.\n                 }\n-                TypeContext::ADT { def_id, variant, field, field_index } => {\n+                TypeContext::ADT { def_id, variant, field } => {\n                     let adt = tcx.lookup_adt_def(def_id);\n                     let variant_name = match adt.adt_kind() {\n                         ty::AdtKind::Enum => format!(\"enum {} variant {}\",\n@@ -308,17 +307,12 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n                         ty::AdtKind::Struct => format!(\"struct {}\",\n                                                        tcx.item_path_str(def_id))\n                     };\n-                    let field_name = if field == special_idents::unnamed_field.name {\n-                        format!(\"#{}\", field_index)\n-                    } else {\n-                        format!(\"`{}`\", field)\n-                    };\n                     span_note!(\n                         &mut err,\n                         span,\n                         \"overflowed on {} field {} type: {}\",\n                         variant_name,\n-                        field_name,\n+                        field,\n                         detected_on_typ);\n                 }\n             }\n@@ -338,7 +332,6 @@ enum TypeContext {\n         def_id: DefId,\n         variant: ast::Name,\n         field: ast::Name,\n-        field_index: usize\n     }\n }\n \n@@ -452,7 +445,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n         ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n             let did = def.did;\n             for variant in &def.variants {\n-                for (i, field) in variant.fields.iter().enumerate() {\n+                for field in variant.fields.iter() {\n                     let fty = field.ty(tcx, substs);\n                     let fty = cx.rcx.fcx.resolve_type_vars_if_possible(\n                         cx.rcx.fcx.normalize_associated_types_in(cx.span, &fty));\n@@ -462,7 +455,6 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n                             def_id: did,\n                             field: field.name,\n                             variant: variant.name,\n-                            field_index: i\n                         },\n                         fty,\n                         depth+1))"}, {"sha": "b2a23176c9585e4832960934425a2afd88805838", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -567,7 +567,7 @@ fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let fields =\n         struct_def.fields().iter()\n         .map(|field| {\n-            let field_ty = fcx.tcx().node_id_to_type(field.node.id);\n+            let field_ty = fcx.tcx().node_id_to_type(field.id);\n             let field_ty = fcx.instantiate_type_scheme(field.span,\n                                                        &fcx.inh\n                                                            .infcx"}, {"sha": "941900100bbaf2741e69b3f07770b8e5b36f3154", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -36,7 +36,6 @@ use middle::infer::{self, InferCtxt, TypeOrigin, new_infer_ctxt};\n use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::codemap::Span;\n-use syntax::parse::token;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n@@ -449,13 +448,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                    for a coercion between structures with one field \\\n                                    being coerced, but {} fields need coercions: {}\",\n                                    diff_fields.len(), diff_fields.iter().map(|&(i, a, b)| {\n-                                        let name = fields[i].name;\n-                                        format!(\"{} ({} to {})\",\n-                                                if name == token::special_names::unnamed_field {\n-                                                    i.to_string()\n-                                                } else {\n-                                                    name.to_string()\n-                                                }, a, b)\n+                                        format!(\"{} ({} to {})\", fields[i].name, a, b)\n                                    }).collect::<Vec<_>>().join(\", \"));\n                         return;\n                     }"}, {"sha": "0e64f2cfc41c5277b49c0a5eacc3096998a31713", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -574,20 +574,20 @@ fn convert_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn convert_field<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            struct_generics: &ty::Generics<'tcx>,\n                            struct_predicates: &ty::GenericPredicates<'tcx>,\n-                           v: &hir::StructField,\n+                           field: &hir::StructField,\n                            ty_f: ty::FieldDefMaster<'tcx>)\n {\n-    let tt = ccx.icx(struct_predicates).to_ty(&ExplicitRscope, &v.node.ty);\n+    let tt = ccx.icx(struct_predicates).to_ty(&ExplicitRscope, &field.ty);\n     ty_f.fulfill_ty(tt);\n-    write_ty_to_tcx(ccx.tcx, v.node.id, tt);\n+    write_ty_to_tcx(ccx.tcx, field.id, tt);\n \n     /* add the field to the tcache */\n-    ccx.tcx.register_item_type(ccx.tcx.map.local_def_id(v.node.id),\n+    ccx.tcx.register_item_type(ccx.tcx.map.local_def_id(field.id),\n                                ty::TypeScheme {\n                                    generics: struct_generics.clone(),\n                                    ty: tt\n                                });\n-    ccx.tcx.predicates.borrow_mut().insert(ccx.tcx.map.local_def_id(v.node.id),\n+    ccx.tcx.predicates.borrow_mut().insert(ccx.tcx.map.local_def_id(field.id),\n                                            struct_predicates.clone());\n }\n \n@@ -977,26 +977,19 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                 def: &hir::VariantData) -> ty::VariantDefData<'tcx, 'tcx> {\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields().iter().map(|f| {\n-        let fid = tcx.map.local_def_id(f.node.id);\n-        match f.node.kind {\n-            hir::NamedField(name, vis) => {\n-                let dup_span = seen_fields.get(&name).cloned();\n-                if let Some(prev_span) = dup_span {\n-                    let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n-                                                   \"field `{}` is already declared\",\n-                                                   name);\n-                    span_note!(&mut err, prev_span, \"previously declared here\");\n-                    err.emit();\n-                } else {\n-                    seen_fields.insert(name, f.span);\n-                }\n-\n-                ty::FieldDefData::new(fid, name, vis)\n-            },\n-            hir::UnnamedField(vis) => {\n-                ty::FieldDefData::new(fid, special_idents::unnamed_field.name, vis)\n-            }\n+        let fid = tcx.map.local_def_id(f.id);\n+        let dup_span = seen_fields.get(&f.name).cloned();\n+        if let Some(prev_span) = dup_span {\n+            let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n+                                           \"field `{}` is already declared\",\n+                                           f.name);\n+            span_note!(&mut err, prev_span, \"previously declared here\");\n+            err.emit();\n+        } else {\n+            seen_fields.insert(f.name, f.span);\n         }\n+\n+        ty::FieldDefData::new(fid, f.name, f.vis)\n     }).collect();\n     ty::VariantDefData {\n         did: did,"}, {"sha": "3a2e1ca0ccf936404c73caaac69d44324a4630bd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -188,17 +188,15 @@ fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean\n }\n \n fn build_struct(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::Struct {\n-    use syntax::parse::token::special_idents::unnamed_field;\n-\n     let t = tcx.lookup_item_type(did);\n     let predicates = tcx.lookup_predicates(did);\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n         struct_type: match &*variant.fields {\n             [] => doctree::Unit,\n-            [ref f] if f.name == unnamed_field.name => doctree::Newtype,\n-            [ref f, ..] if f.name == unnamed_field.name => doctree::Tuple,\n+            [_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n+            [..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,\n             _ => doctree::Plain,\n         },\n         generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),"}, {"sha": "af8fee561dd3ac2e4ed0c86ef196c71126cafc8c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -1735,39 +1735,26 @@ pub enum StructField {\n \n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let (name, vis) = match self.node.kind {\n-            hir::NamedField(id, vis) => (Some(id), vis),\n-            hir::UnnamedField(vis) => (None, vis)\n-        };\n         Item {\n-            name: name.clean(cx),\n-            attrs: self.node.attrs.clean(cx),\n+            name: Some(self.name).clean(cx),\n+            attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            visibility: Some(vis),\n-            stability: get_stability(cx, cx.map.local_def_id(self.node.id)),\n-            deprecation: get_deprecation(cx, cx.map.local_def_id(self.node.id)),\n-            def_id: cx.map.local_def_id(self.node.id),\n-            inner: StructFieldItem(TypedStructField(self.node.ty.clean(cx))),\n+            visibility: Some(self.vis),\n+            stability: get_stability(cx, cx.map.local_def_id(self.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n+            def_id: cx.map.local_def_id(self.id),\n+            inner: StructFieldItem(TypedStructField(self.ty.clean(cx))),\n         }\n     }\n }\n \n impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        use syntax::parse::token::special_idents::unnamed_field;\n         // FIXME: possible O(n^2)-ness! Not my fault.\n-        let attr_map =\n-            cx.tcx().sess.cstore.crate_struct_field_attrs(self.did.krate);\n-\n-        let (name, attrs) = if self.name == unnamed_field.name {\n-            (None, None)\n-        } else {\n-            (Some(self.name), Some(attr_map.get(&self.did).unwrap()))\n-        };\n-\n+        let attr_map = cx.tcx().sess.cstore.crate_struct_field_attrs(self.did.krate);\n         Item {\n-            name: name.clean(cx),\n-            attrs: attrs.unwrap_or(&Vec::new()).clean(cx),\n+            name: Some(self.name).clean(cx),\n+            attrs: attr_map.get(&self.did).unwrap_or(&Vec::new()).clean(cx),\n             source: Span::empty(),\n             visibility: Some(self.vis),\n             stability: get_stability(cx, self.did),\n@@ -1884,7 +1871,6 @@ impl Clean<Item> for doctree::Variant {\n \n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        // use syntax::parse::token::special_idents::unnamed_field;\n         let kind = match self.kind() {\n             ty::VariantKind::Unit => CLikeVariant,\n             ty::VariantKind::Tuple => {\n@@ -1946,7 +1932,7 @@ fn struct_def_to_variant_kind(struct_def: &hir::VariantData, cx: &DocContext) ->\n     } else if struct_def.is_unit() {\n         CLikeVariant\n     } else {\n-        TupleVariant(struct_def.fields().iter().map(|x| x.node.ty.clean(cx)).collect())\n+        TupleVariant(struct_def.fields().iter().map(|x| x.ty.clean(cx)).collect())\n     }\n }\n "}, {"sha": "6593b3ea532008b9afb4d947db396644bc521230", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -542,7 +542,7 @@ declare_special_idents_and_keywords! {\n         // outside of libsyntax\n         (7,                          clownshoe_abi,          \"__rust_abi\");\n         (8,                          opaque,                 \"<opaque>\");\n-        (9,                          unnamed_field,          \"<unnamed_field>\");\n+        (9,                          __unused1,              \"<__unused1>\");\n         (super::SELF_TYPE_KEYWORD_NAME_NUM, type_self,       \"Self\");\n         (11,                         prelude_import,         \"prelude_import\");\n     }"}, {"sha": "6a97ae82ddf317685d0f72e11c6cf2938693d29a", "filename": "src/test/compile-fail/issue-27340.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e42ac10653e4d7178e36201608cc269e3c66c7/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27340.rs?ref=25e42ac10653e4d7178e36201608cc269e3c66c7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+#[derive(Copy, Clone)]\n+//~^ ERROR the trait `Copy` may not be implemented for this type; field `0` does not implement\n+struct Bar(Foo);\n+\n+fn main() {}"}]}