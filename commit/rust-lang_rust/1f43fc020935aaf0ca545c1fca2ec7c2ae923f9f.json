{"sha": "1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDNmYzAyMDkzNWFhZjBjYTU0NWMxZmNhMmVjN2MyYWU5MjNmOWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-17T17:46:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-22T19:12:33Z"}, "message": "Tweak wording", "tree": {"sha": "92c2671d1e9b77871c6ab6072852d7548a59694b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c2671d1e9b77871c6ab6072852d7548a59694b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "html_url": "https://github.com/rust-lang/rust/commit/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c1daeb2f626b3923f7574226a089d95c8c7772", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c1daeb2f626b3923f7574226a089d95c8c7772", "html_url": "https://github.com/rust-lang/rust/commit/13c1daeb2f626b3923f7574226a089d95c8c7772"}], "stats": {"total": 95, "additions": 61, "deletions": 34}, "files": [{"sha": "c25a3524dc1087f4c6f92003d3a443fdd2e0116c", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -1034,6 +1034,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         lifetime_names: &FxHashSet<ast::Ident>,\n         params: &[ElisionFailureInfo],\n     ) {\n+        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n+\n         err.span_label(\n             span,\n             &format!(\n@@ -1043,11 +1045,10 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             ),\n         );\n \n-        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n         let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n             err.span_suggestion_verbose(\n                 span,\n-                \"consider using the named lifetime\",\n+                &format!(\"consider using the `{}` lifetime\", lifetime_names.iter().next().unwrap()),\n                 sugg,\n                 Applicability::MaybeIncorrect,\n             );\n@@ -1137,6 +1138,20 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             (0, _, Some(snippet)) if !snippet.ends_with('>') && count == 1 => {\n                 suggest_new(err, &format!(\"{}<'a>\", snippet));\n             }\n+            (n, ..) if n > 1 => {\n+                let spans: Vec<Span> = lifetime_names.iter().map(|lt| lt.span).collect();\n+                err.span_note(spans, \"these named lifetimes are available to use\");\n+                if Some(\"\") == snippet.as_deref() {\n+                    // This happens when we have `Foo<T>` where we point at the space before `T`,\n+                    // but this can be confusing so we give a suggestion with placeholders.\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"consider using one of the available lifetimes here\",\n+                        \"'lifetime, \".repeat(count),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "00f44129cc8b72126cc4f02f48e0179db6bff23d", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL | fn elision<T: Fn() -> &i32>() {\n    |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn elision<T: Fn() -> &'static i32>() {\n    |                       ^^^^^^^^"}, {"sha": "a5242707c7105b1a83cb9018764e18cc87679587", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL | fn elision(_: fn() -> &i32) {\n    |                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn elision(_: fn() -> &'static i32) {\n    |                       ^^^^^^^^"}, {"sha": "ca42263dfed7b0622a542acfb79ab7a77dd42c09", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -7,7 +7,7 @@ LL |     ) -> &dyn Foo\n    |          ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL |     ) -> &'a dyn Foo\n    |          ^^^"}, {"sha": "4626a4bc2dcff84d7599d26c4aed6369f37af457", "filename": "src/test/ui/c-variadic/variadic-ffi-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL | ) -> &usize {\n    |      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | ) -> &'static usize {\n    |      ^^^^^^^^"}, {"sha": "feecb6d80e771ee8f88446d934a7c96f7a22fcd4", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn f() -> &u8;\n    |                   ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     pub fn f() -> &'static u8;\n    |                   ^^^^^^^^"}, {"sha": "321ce7eb34766a57f02d56005c1df35278e688b2", "filename": "src/test/ui/generics/issue-65285-incorrect-explicit-lifetime-name-needed.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-65285-incorrect-explicit-lifetime-name-needed.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -9,14 +9,26 @@ error[E0106]: missing lifetime specifier\n    |\n LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n    |                     ^ expected named lifetime parameter\n+   |\n+note: these named lifetimes are available to use\n+  --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:9:12\n+   |\n+LL | trait X<'a, K: 'a> {\n+   |         ^^\n+LL |     fn foo<'b, L: X<&'b Nested<K>>>();\n+   |            ^^\n+help: consider using one of the available lifetimes here\n+   |\n+LL |     fn foo<'b, L: X<'lifetime, &'b Nested<K>>>();\n+   |                     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-65285-incorrect-explicit-lifetime-name-needed.rs:13:17\n    |\n LL | fn bar<'b, L: X<&'b Nested<i32>>>(){}\n    |                 ^ expected named lifetime parameter\n    |\n-help: consider using the named lifetime\n+help: consider using the `'b` lifetime\n    |\n LL | fn bar<'b, L: X<'b, &'b Nested<i32>>>(){}\n    |                 ^^^"}, {"sha": "a231f73d06729bc5dc9d22dfc238c62d08e4d4a3", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL |     &str\n    |     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     &'static str\n    |     ^^^^^^^^"}, {"sha": "3df58d66d1f8e34a94edd61b741c60260dd99c68", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -17,7 +17,7 @@ LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n    |                                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &'static str { iter() }\n    |                                        ^^^^^^^^\n@@ -29,7 +29,7 @@ LL | fn parse_type_3() -> &str { unimplemented!() }\n    |                      ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn parse_type_3() -> &'static str { unimplemented!() }\n    |                      ^^^^^^^^"}, {"sha": "5809b5bd661e0e7c195bc971973459f90d630c7b", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL | fn f() -> &isize {\n    |           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn f() -> &'static isize {\n    |           ^^^^^^^^\n@@ -41,7 +41,7 @@ LL | fn i(_x: isize) -> &isize {\n    |                    ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn i(_x: isize) -> &'static isize {\n    |                    ^^^^^^^^\n@@ -53,7 +53,7 @@ LL | fn j(_x: StaticStr) -> &isize {\n    |                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn j(_x: StaticStr) -> &'static isize {\n    |                        ^^^^^^^^\n@@ -65,7 +65,7 @@ LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n    |                                                 ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &'a isize {\n    |                                                 ^^^"}, {"sha": "6dd81961c445911a4c950b1425a2e15f3d05072b", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -5,7 +5,7 @@ LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::\n    |                                            ^^^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::\n    |                                            ^^^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap:\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n@@ -41,7 +41,7 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap:\n    |                                             ^^^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap:\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n@@ -65,7 +65,7 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap:\n    |                                             ^^^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(Hash\n    |                                                ^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                ^^^^^^^^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(Hash\n    |                                                ^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                ^^^^^^^^^^^^^^^^^\n@@ -101,7 +101,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(Has\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n@@ -113,7 +113,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(Has\n    |                                                 ^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                 ^^^^^^^^^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(Has\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n@@ -137,7 +137,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(Has\n    |                                                 ^ expected 2 lifetime parameters\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                 ^^^^^^^^^^^^^^^^^\n@@ -149,7 +149,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell\n    |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^"}, {"sha": "2a237d61f50fe4d56fe6043468a62cdd9e52c5bd", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -4,7 +4,7 @@ error[E0106]: missing lifetime specifier\n LL | struct Foo<'a>(&usize);\n    |                ^ expected named lifetime parameter\n    |\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL | struct Foo<'a>(&'a usize);\n    |                ^^^\n@@ -16,7 +16,7 @@ LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n    |                    ---------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL | fn func1<'a>(_arg: &'a Thing) -> &'a () { unimplemented!() }\n    |                                  ^^^\n@@ -28,7 +28,7 @@ LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n    |                    ----------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &'a () { unimplemented!() }\n    |                                   ^^^"}, {"sha": "594cdd245b3ec9875d9e44c2f7e370974b8cc27e", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=1f43fc020935aaf0ca545c1fca2ec7c2ae923f9f", "patch": "@@ -16,7 +16,7 @@ error[E0106]: missing lifetime specifier\n LL | struct Baz<'a>(&'_ &'a u8);\n    |                 ^^ expected named lifetime parameter\n    |\n-help: consider using the named lifetime\n+help: consider using the `'a` lifetime\n    |\n LL | struct Baz<'a>(&'a &'a u8);\n    |                 ^^\n@@ -28,7 +28,7 @@ LL | fn meh() -> Box<dyn for<'_> Meh<'_>>\n    |                                 ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the named lifetime\n+help: consider using the `'static` lifetime\n    |\n LL | fn meh() -> Box<dyn for<'_> Meh<'static>>\n    |                                 ^^^^^^^"}]}