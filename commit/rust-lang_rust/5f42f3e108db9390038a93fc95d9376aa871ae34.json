{"sha": "5f42f3e108db9390038a93fc95d9376aa871ae34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDJmM2UxMDhkYjkzOTAwMzhhOTNmYzk1ZDkzNzZhYTg3MWFlMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T07:47:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T07:47:08Z"}, "message": "Auto merge of #63166 - ksqsf:master, r=alexcrichton\n\nAdd Result::cloned{,_err} and Result::copied{,_err}\n\nThis is a little nice addition to `Result`.\n\n1. I'm not sure how useful are `cloned_err` and `copied_err`, but for the sake of completeness they are here.\n2. Naming is similar to `map`/`map_err`. I thought about naming `cloned` as `cloned_ok` and add another method called `cloned` that clones both Ok and Err, but `cloned_ok` should be more prevalent than `cloned_both`.", "tree": {"sha": "b95686e19c9f177dee1d6a08b0bd00f3f454bde5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95686e19c9f177dee1d6a08b0bd00f3f454bde5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f42f3e108db9390038a93fc95d9376aa871ae34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f42f3e108db9390038a93fc95d9376aa871ae34", "html_url": "https://github.com/rust-lang/rust/commit/5f42f3e108db9390038a93fc95d9376aa871ae34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f42f3e108db9390038a93fc95d9376aa871ae34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9de4ef89e0e53099a084001b26ec3207c5f8391", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9de4ef89e0e53099a084001b26ec3207c5f8391", "html_url": "https://github.com/rust-lang/rust/commit/b9de4ef89e0e53099a084001b26ec3207c5f8391"}, {"sha": "61e52866352339326600fe694e92373f2e07fd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e52866352339326600fe694e92373f2e07fd79", "html_url": "https://github.com/rust-lang/rust/commit/61e52866352339326600fe694e92373f2e07fd79"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "ed40a5f31d9bd75105b25c289407e86d62b2516d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/5f42f3e108db9390038a93fc95d9376aa871ae34/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f42f3e108db9390038a93fc95d9376aa871ae34/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5f42f3e108db9390038a93fc95d9376aa871ae34", "patch": "@@ -820,6 +820,87 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n+impl<T: Copy, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x: Result<&i32, i32> = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.map(|&t| t)\n+    }\n+}\n+\n+impl<T: Copy, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let mut val = 12;\n+    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.map(|&mut t| t)\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x: Result<&i32, i32> = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let mut val = 12;\n+    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+\n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     ///"}]}