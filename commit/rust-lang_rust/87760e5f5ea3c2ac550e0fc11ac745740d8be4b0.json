{"sha": "87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzYwZTVmNWVhM2MyYWM1NTBlMGZjMTFhYzc0NTc0MGQ4YmU0YjA=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-30T17:10:15Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:37Z"}, "message": "collect auto-/blanket-impls during collect-trait-impls", "tree": {"sha": "a6e66766ba9e7db036bf03e41929dc8f5e22e049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e66766ba9e7db036bf03e41929dc8f5e22e049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "html_url": "https://github.com/rust-lang/rust/commit/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e854d39929ffe1e9692be23ac8e7edbcf31b0f24", "html_url": "https://github.com/rust-lang/rust/commit/e854d39929ffe1e9692be23ac8e7edbcf31b0f24"}], "stats": {"total": 128, "additions": 65, "deletions": 63}, "files": [{"sha": "73837db7c3f74a458eaf4b80e77b81c82158c0d9", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "patch": "@@ -29,8 +29,6 @@ use clean::{\n     self,\n     GetDefId,\n     ToSource,\n-    get_auto_traits_with_def_id,\n-    get_blanket_impls_with_def_id,\n };\n \n use super::Clean;\n@@ -56,7 +54,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n     let inner = match def {\n         Def::Trait(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Trait);\n-            ret.extend(build_impls(cx, did, false));\n+            ret.extend(build_impls(cx, did));\n             clean::TraitItem(build_external_trait(cx, did))\n         }\n         Def::Fn(did) => {\n@@ -65,27 +63,27 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n         }\n         Def::Struct(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Struct);\n-            ret.extend(build_impls(cx, did, true));\n+            ret.extend(build_impls(cx, did));\n             clean::StructItem(build_struct(cx, did))\n         }\n         Def::Union(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Union);\n-            ret.extend(build_impls(cx, did, true));\n+            ret.extend(build_impls(cx, did));\n             clean::UnionItem(build_union(cx, did))\n         }\n         Def::TyAlias(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Typedef);\n-            ret.extend(build_impls(cx, did, false));\n+            ret.extend(build_impls(cx, did));\n             clean::TypedefItem(build_type_alias(cx, did), false)\n         }\n         Def::Enum(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Enum);\n-            ret.extend(build_impls(cx, did, true));\n+            ret.extend(build_impls(cx, did));\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Def::ForeignTy(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Foreign);\n-            ret.extend(build_impls(cx, did, false));\n+            ret.extend(build_impls(cx, did));\n             clean::ForeignTypeItem\n         }\n         // Never inline enum variants but leave them shown as re-exports.\n@@ -275,26 +273,14 @@ fn build_type_alias(cx: &DocContext, did: DefId) -> clean::Typedef {\n     }\n }\n \n-pub fn build_impls(cx: &DocContext, did: DefId, auto_traits: bool) -> Vec<clean::Item> {\n+pub fn build_impls(cx: &DocContext, did: DefId) -> Vec<clean::Item> {\n     let tcx = cx.tcx;\n     let mut impls = Vec::new();\n \n     for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, did, &mut impls);\n     }\n \n-    if auto_traits {\n-        let auto_impls = get_auto_traits_with_def_id(cx, did);\n-        {\n-            let mut renderinfo = cx.renderinfo.borrow_mut();\n-            let new_impls: Vec<clean::Item> = auto_impls.into_iter()\n-                .filter(|i| renderinfo.inlined.insert(i.def_id)).collect();\n-\n-            impls.extend(new_impls);\n-        }\n-        impls.extend(get_blanket_impls_with_def_id(cx, did));\n-    }\n-\n     impls\n }\n "}, {"sha": "7c66912694104d92b4f0d535d9c8bf1a61d89aaa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "patch": "@@ -576,9 +576,9 @@ impl Clean<Item> for doctree::Module {\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.extern_crates.iter().map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n-        items.extend(self.structs.iter().flat_map(|x| x.clean(cx)));\n-        items.extend(self.unions.iter().flat_map(|x| x.clean(cx)));\n-        items.extend(self.enums.iter().flat_map(|x| x.clean(cx)));\n+        items.extend(self.structs.iter().map(|x| x.clean(cx)));\n+        items.extend(self.unions.iter().map(|x| x.clean(cx)));\n+        items.extend(self.enums.iter().map(|x| x.clean(cx)));\n         items.extend(self.fns.iter().map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n@@ -2813,14 +2813,10 @@ pub struct Union {\n     pub fields_stripped: bool,\n }\n \n-impl Clean<Vec<Item>> for doctree::Struct {\n-    fn clean(&self, cx: &DocContext) -> Vec<Item> {\n-        let name = self.name.clean(cx);\n-        let mut ret = get_auto_traits_with_node_id(cx, self.id, name.clone());\n-        ret.extend(get_blanket_impls_with_node_id(cx, self.id, name.clone()));\n-\n-        ret.push(Item {\n-            name: Some(name),\n+impl Clean<Item> for doctree::Struct {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n@@ -2833,20 +2829,14 @@ impl Clean<Vec<Item>> for doctree::Struct {\n                 fields: self.fields.clean(cx),\n                 fields_stripped: false,\n             }),\n-        });\n-\n-        ret\n+        }\n     }\n }\n \n-impl Clean<Vec<Item>> for doctree::Union {\n-    fn clean(&self, cx: &DocContext) -> Vec<Item> {\n-        let name = self.name.clean(cx);\n-        let mut ret = get_auto_traits_with_node_id(cx, self.id, name.clone());\n-        ret.extend(get_blanket_impls_with_node_id(cx, self.id, name.clone()));\n-\n-        ret.push(Item {\n-            name: Some(name),\n+impl Clean<Item> for doctree::Union {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n@@ -2859,9 +2849,7 @@ impl Clean<Vec<Item>> for doctree::Union {\n                 fields: self.fields.clean(cx),\n                 fields_stripped: false,\n             }),\n-        });\n-\n-        ret\n+        }\n     }\n }\n \n@@ -2892,14 +2880,10 @@ pub struct Enum {\n     pub variants_stripped: bool,\n }\n \n-impl Clean<Vec<Item>> for doctree::Enum {\n-    fn clean(&self, cx: &DocContext) -> Vec<Item> {\n-        let name = self.name.clean(cx);\n-        let mut ret = get_auto_traits_with_node_id(cx, self.id, name.clone());\n-        ret.extend(get_blanket_impls_with_node_id(cx, self.id, name.clone()));\n-\n-        ret.push(Item {\n-            name: Some(name),\n+impl Clean<Item> for doctree::Enum {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n@@ -2911,9 +2895,7 @@ impl Clean<Vec<Item>> for doctree::Enum {\n                 generics: self.generics.clean(cx),\n                 variants_stripped: false,\n             }),\n-        });\n-\n-        ret\n+        }\n     }\n }\n \n@@ -3442,11 +3424,7 @@ fn build_deref_target_impls(cx: &DocContext,\n         let primitive = match *target {\n             ResolvedPath { did, .. } if did.is_local() => continue,\n             ResolvedPath { did, .. } => {\n-                // We set the last parameter to false to avoid looking for auto-impls for traits\n-                // and therefore avoid an ICE.\n-                // The reason behind this is that auto-traits don't propagate through Deref so\n-                // we're not supposed to synthesise impls for them.\n-                ret.extend(inline::build_impls(cx, did, false));\n+                ret.extend(inline::build_impls(cx, did));\n                 continue\n             }\n             _ => match target.primitive_type() {"}, {"sha": "56940483d7be2f041f6385f47e1a0592795ff1e4", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87760e5f5ea3c2ac550e0fc11ac745740d8be4b0/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=87760e5f5ea3c2ac550e0fc11ac745740d8be4b0", "patch": "@@ -12,14 +12,20 @@ use clean::*;\n \n use super::Pass;\n use core::DocContext;\n+use fold::DocFolder;\n \n pub const COLLECT_TRAIT_IMPLS: Pass =\n     Pass::early(\"collect-trait-impls\", collect_trait_impls,\n                 \"retrieves trait impls for items in the crate\");\n \n-pub fn collect_trait_impls(mut krate: Crate, cx: &DocContext) -> Crate {\n+pub fn collect_trait_impls(krate: Crate, cx: &DocContext) -> Crate {\n+    let mut synth = SyntheticImplCollector::new(cx);\n+    let mut krate = synth.fold_crate(krate);\n+\n     if let Some(ref mut it) = krate.module {\n         if let ModuleItem(Module { ref mut items, .. }) = it.inner {\n+            items.extend(synth.impls);\n+\n             for &cnum in cx.tcx.crates().iter() {\n                 for &did in cx.tcx.all_trait_implementations(cnum).iter() {\n                     inline::build_impl(cx, did, items);\n@@ -90,3 +96,35 @@ pub fn collect_trait_impls(mut krate: Crate, cx: &DocContext) -> Crate {\n \n     krate\n }\n+\n+struct SyntheticImplCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    impls: Vec<Item>,\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+        SyntheticImplCollector {\n+            cx,\n+            impls: Vec::new(),\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n+    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        if i.is_struct() || i.is_enum() || i.is_union() {\n+            if let (Some(node_id), Some(name)) =\n+                (self.cx.tcx.hir.as_local_node_id(i.def_id), i.name.clone())\n+            {\n+                self.impls.extend(get_auto_traits_with_node_id(self.cx, node_id, name.clone()));\n+                self.impls.extend(get_blanket_impls_with_node_id(self.cx, node_id, name));\n+            } else {\n+                self.impls.extend(get_auto_traits_with_def_id(self.cx, i.def_id));\n+                self.impls.extend(get_blanket_impls_with_def_id(self.cx, i.def_id));\n+            }\n+        }\n+\n+        self.fold_item_recur(i)\n+    }\n+}"}]}