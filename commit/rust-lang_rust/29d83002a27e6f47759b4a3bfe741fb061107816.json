{"sha": "29d83002a27e6f47759b4a3bfe741fb061107816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDgzMDAyYTI3ZTZmNDc3NTliNGEzYmZlNzQxZmIwNjExMDc4MTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T23:43:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T23:43:31Z"}, "message": "core::rt: Move uv idle tests to idle mod", "tree": {"sha": "83d7945490d510cf2388bb7142d97afcd4ad3698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d7945490d510cf2388bb7142d97afcd4ad3698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d83002a27e6f47759b4a3bfe741fb061107816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d83002a27e6f47759b4a3bfe741fb061107816", "html_url": "https://github.com/rust-lang/rust/commit/29d83002a27e6f47759b4a3bfe741fb061107816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d83002a27e6f47759b4a3bfe741fb061107816/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a246e8faf362a1615b5bb4938455dd70642e0f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a246e8faf362a1615b5bb4938455dd70642e0f4b", "html_url": "https://github.com/rust-lang/rust/commit/a246e8faf362a1615b5bb4938455dd70642e0f4b"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "a81ab48696a36f192b02ad5e8cc883171a5b2a12", "filename": "src/libcore/rt/uv/idle.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/29d83002a27e6f47759b4a3bfe741fb061107816/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d83002a27e6f47759b4a3bfe741fb061107816/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fidle.rs?ref=29d83002a27e6f47759b4a3bfe741fb061107816", "patch": "@@ -89,3 +89,65 @@ impl NativeHandle<*uvll::uv_idle_t> for IdleWatcher {\n         match self { &IdleWatcher(ptr) => ptr }\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+\n+    use rt::uv::Loop;\n+    use super::*;\n+    use unstable::run_in_bare_thread;\n+\n+    #[test]\n+    #[ignore(reason = \"valgrind - loop destroyed before watcher?\")]\n+    fn idle_new_then_close() {\n+        do run_in_bare_thread {\n+            let mut loop_ = Loop::new();\n+            let idle_watcher = { IdleWatcher::new(&mut loop_) };\n+            idle_watcher.close(||());\n+        }\n+    }\n+\n+    #[test]\n+    fn idle_smoke_test() {\n+        do run_in_bare_thread {\n+            let mut loop_ = Loop::new();\n+            let mut idle_watcher = { IdleWatcher::new(&mut loop_) };\n+            let mut count = 10;\n+            let count_ptr: *mut int = &mut count;\n+            do idle_watcher.start |idle_watcher, status| {\n+                let mut idle_watcher = idle_watcher;\n+                assert!(status.is_none());\n+                if unsafe { *count_ptr == 10 } {\n+                    idle_watcher.stop();\n+                    idle_watcher.close(||());\n+                } else {\n+                    unsafe { *count_ptr = *count_ptr + 1; }\n+                }\n+            }\n+            loop_.run();\n+            loop_.close();\n+            assert_eq!(count, 10);\n+        }\n+    }\n+\n+    #[test]\n+    fn idle_start_stop_start() {\n+        do run_in_bare_thread {\n+            let mut loop_ = Loop::new();\n+            let mut idle_watcher = { IdleWatcher::new(&mut loop_) };\n+            do idle_watcher.start |idle_watcher, status| {\n+                let mut idle_watcher = idle_watcher;\n+                assert!(status.is_none());\n+                idle_watcher.stop();\n+                do idle_watcher.start |idle_watcher, status| {\n+                    assert!(status.is_none());\n+                    let mut idle_watcher = idle_watcher;\n+                    idle_watcher.stop();\n+                    idle_watcher.close(||());\n+                }\n+            }\n+            loop_.run();\n+            loop_.close();\n+        }\n+    }\n+}"}, {"sha": "8cc596b2876d9f6530c530636b31225bde1cbdf2", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/29d83002a27e6f47759b4a3bfe741fb061107816/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d83002a27e6f47759b4a3bfe741fb061107816/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=29d83002a27e6f47759b4a3bfe741fb061107816", "patch": "@@ -364,57 +364,3 @@ fn loop_smoke_test() {\n         loop_.close();\n     }\n }\n-\n-#[test]\n-#[ignore(reason = \"valgrind - loop destroyed before watcher?\")]\n-fn idle_new_then_close() {\n-    do run_in_bare_thread {\n-        let mut loop_ = Loop::new();\n-        let idle_watcher = { IdleWatcher::new(&mut loop_) };\n-        idle_watcher.close(||());\n-    }\n-}\n-\n-#[test]\n-fn idle_smoke_test() {\n-    do run_in_bare_thread {\n-        let mut loop_ = Loop::new();\n-        let mut idle_watcher = { IdleWatcher::new(&mut loop_) };\n-        let mut count = 10;\n-        let count_ptr: *mut int = &mut count;\n-        do idle_watcher.start |idle_watcher, status| {\n-            let mut idle_watcher = idle_watcher;\n-            assert!(status.is_none());\n-            if unsafe { *count_ptr == 10 } {\n-                idle_watcher.stop();\n-                idle_watcher.close(||());\n-            } else {\n-                unsafe { *count_ptr = *count_ptr + 1; }\n-            }\n-        }\n-        loop_.run();\n-        loop_.close();\n-        assert_eq!(count, 10);\n-    }\n-}\n-\n-#[test]\n-fn idle_start_stop_start() {\n-    do run_in_bare_thread {\n-        let mut loop_ = Loop::new();\n-        let mut idle_watcher = { IdleWatcher::new(&mut loop_) };\n-        do idle_watcher.start |idle_watcher, status| {\n-            let mut idle_watcher = idle_watcher;\n-            assert!(status.is_none());\n-            idle_watcher.stop();\n-            do idle_watcher.start |idle_watcher, status| {\n-                assert!(status.is_none());\n-                let mut idle_watcher = idle_watcher;\n-                idle_watcher.stop();\n-                idle_watcher.close(||());\n-            }\n-        }\n-        loop_.run();\n-        loop_.close();\n-    }\n-}"}]}