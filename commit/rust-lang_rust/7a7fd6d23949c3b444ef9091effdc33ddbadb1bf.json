{"sha": "7a7fd6d23949c3b444ef9091effdc33ddbadb1bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2ZkNmQyMzk0OWMzYjQ0NGVmOTA5MWVmZmRjMzNkZGJhZGIxYmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T13:10:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T13:10:55Z"}, "message": "Modernize pattern completion tests", "tree": {"sha": "c3c4a3eb4213a8297b78042553a60b4fd558a510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c4a3eb4213a8297b78042553a60b4fd558a510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf", "html_url": "https://github.com/rust-lang/rust/commit/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dacd2338cbc7b414fc7a22be108500abfa826f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dacd2338cbc7b414fc7a22be108500abfa826f4", "html_url": "https://github.com/rust-lang/rust/commit/9dacd2338cbc7b414fc7a22be108500abfa826f4"}], "stats": {"total": 125, "additions": 37, "deletions": 88}, "files": [{"sha": "41c16df7b1f4e229dd67839b64bdf7808b9a5bbe", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 37, "deletions": 88, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7fd6d23949c3b444ef9091effdc33ddbadb1bf/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=7a7fd6d23949c3b444ef9091effdc33ddbadb1bf", "patch": "@@ -33,107 +33,56 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    fn complete(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Reference)\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn completes_enum_variants_and_modules() {\n-        let completions = complete(\n-            r\"\n-            enum E { X }\n-            use self::E::X;\n-            const Z: E = E::X;\n-            mod m {}\n+        check(\n+            r#\"\n+enum E { X }\n+use self::E::X;\n+const Z: E = E::X;\n+mod m {}\n \n-            static FOO: E = E::X;\n-            struct Bar { f: u32 }\n+static FOO: E = E::X;\n+struct Bar { f: u32 }\n \n-            fn foo() {\n-               match E::X {\n-                   <|>\n-               }\n-            }\n-            \",\n+fn foo() {\n+   match E::X { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                st Bar\n+                en E\n+                ev X ()\n+                ct Z\n+                md m\n+            \"#]],\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Bar\",\n-                source_range: 137..137,\n-                delete: 137..137,\n-                insert: \"Bar\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"E\",\n-                source_range: 137..137,\n-                delete: 137..137,\n-                insert: \"E\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"X\",\n-                source_range: 137..137,\n-                delete: 137..137,\n-                insert: \"X\",\n-                kind: EnumVariant,\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Z\",\n-                source_range: 137..137,\n-                delete: 137..137,\n-                insert: \"Z\",\n-                kind: Const,\n-            },\n-            CompletionItem {\n-                label: \"m\",\n-                source_range: 137..137,\n-                delete: 137..137,\n-                insert: \"m\",\n-                kind: Module,\n-            },\n-        ]\n-        \"###);\n     }\n \n     #[test]\n     fn completes_in_simple_macro_call() {\n-        let completions = complete(\n-            r\"\n-            macro_rules! m { ($e:expr) => { $e } }\n-            enum E { X }\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+enum E { X }\n \n-            fn foo() {\n-               m!(match E::X {\n-                   <|>\n-               })\n-            }\n-            \",\n+fn foo() {\n+   m!(match E::X { <|> })\n+}\n+\"#,\n+            expect![[r#\"\n+                en E\n+                ma m!(\u2026) macro_rules! m\n+            \"#]],\n         );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"E\",\n-                source_range: 90..90,\n-                delete: 90..90,\n-                insert: \"E\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"m!(\u2026)\",\n-                source_range: 90..90,\n-                delete: 90..90,\n-                insert: \"m!($0)\",\n-                kind: Macro,\n-                lookup: \"m!\",\n-                detail: \"macro_rules! m\",\n-            },\n-        ]\n-        \"###);\n     }\n }"}]}