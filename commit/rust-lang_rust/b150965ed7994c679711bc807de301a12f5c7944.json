{"sha": "b150965ed7994c679711bc807de301a12f5c7944", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNTA5NjVlZDc5OTRjNjc5NzExYmM4MDdkZTMwMWExMmY1Yzc5NDQ=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2020-03-15T21:23:18Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2020-03-15T21:23:18Z"}, "message": "Swtches to rust SSR query check", "tree": {"sha": "b8e4e4aed87953ead767861ce5066b8cc950f868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e4e4aed87953ead767861ce5066b8cc950f868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b150965ed7994c679711bc807de301a12f5c7944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b150965ed7994c679711bc807de301a12f5c7944", "html_url": "https://github.com/rust-lang/rust/commit/b150965ed7994c679711bc807de301a12f5c7944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b150965ed7994c679711bc807de301a12f5c7944/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530ff9f57fd27505302d082a6007b49d8b98c8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/530ff9f57fd27505302d082a6007b49d8b98c8af", "html_url": "https://github.com/rust-lang/rust/commit/530ff9f57fd27505302d082a6007b49d8b98c8af"}], "stats": {"total": 83, "additions": 63, "deletions": 20}, "files": [{"sha": "40276d4fef1a9c853a9332bb5b10b9d20d503c1d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -478,9 +478,10 @@ impl Analysis {\n     pub fn structural_search_replace(\n         &self,\n         query: &str,\n+        parse_only: bool,\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n-            let edits = ssr::parse_search_replace(query, db)?;\n+            let edits = ssr::parse_search_replace(query, parse_only, db)?;\n             Ok(SourceChange::source_file_edits(\"ssr\", edits))\n         })\n     }"}, {"sha": "1c9710a5d51303750820a36ac22769c1281e228d", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -1,18 +1,17 @@\n //!  structural search replace\n \n use crate::source_change::SourceFileEdit;\n+use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::symbol_index::SymbolsDatabase;\n use ra_ide_db::RootDatabase;\n-use ra_syntax::ast::make::expr_from_text;\n+use ra_syntax::ast::make::try_expr_from_text;\n use ra_syntax::ast::{AstToken, Comment};\n use ra_syntax::{AstNode, SyntaxElement, SyntaxNode};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n use rustc_hash::FxHashMap;\n use std::collections::HashMap;\n use std::str::FromStr;\n \n-pub use ra_db::{SourceDatabase, SourceDatabaseExt};\n-use ra_ide_db::symbol_index::SymbolsDatabase;\n-\n #[derive(Debug, PartialEq)]\n pub struct SsrError(String);\n \n@@ -26,14 +25,17 @@ impl std::error::Error for SsrError {}\n \n pub fn parse_search_replace(\n     query: &str,\n+    parse_only: bool,\n     db: &RootDatabase,\n ) -> Result<Vec<SourceFileEdit>, SsrError> {\n     let mut edits = vec![];\n     let query: SsrQuery = query.parse()?;\n+    if parse_only {\n+        return Ok(edits);\n+    }\n     for &root in db.local_roots().iter() {\n         let sr = db.source_root(root);\n         for file_id in sr.walk() {\n-            dbg!(db.file_relative_path(file_id));\n             let matches = find(&query.pattern, db.parse(file_id).tree().syntax());\n             if !matches.matches.is_empty() {\n                 edits.push(SourceFileEdit { file_id, edit: replace(&matches, &query.template) });\n@@ -106,7 +108,10 @@ impl FromStr for SsrQuery {\n             template = replace_in_template(template, var, new_var);\n         }\n \n-        let template = expr_from_text(&template).syntax().clone();\n+        let template = try_expr_from_text(&template)\n+            .ok_or(SsrError(\"Template is not an expression\".into()))?\n+            .syntax()\n+            .clone();\n         let mut placeholders = FxHashMap::default();\n \n         traverse(&template, &mut |n| {\n@@ -118,7 +123,13 @@ impl FromStr for SsrQuery {\n             }\n         });\n \n-        let pattern = SsrPattern { pattern: expr_from_text(&pattern).syntax().clone(), vars };\n+        let pattern = SsrPattern {\n+            pattern: try_expr_from_text(&pattern)\n+                .ok_or(SsrError(\"Pattern is not an expression\".into()))?\n+                .syntax()\n+                .clone(),\n+            vars,\n+        };\n         let template = SsrTemplate { template, placeholders };\n         Ok(SsrQuery { pattern, template })\n     }\n@@ -284,7 +295,6 @@ mod tests {\n         assert_eq!(result.pattern.vars[0].0, \"__search_pattern_a\");\n         assert_eq!(result.pattern.vars[1].0, \"__search_pattern_b\");\n         assert_eq!(&result.template.template.text(), \"bar(__search_pattern_b, __search_pattern_a)\");\n-        dbg!(result.template.placeholders);\n     }\n \n     #[test]\n@@ -334,6 +344,16 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn parser_invlid_pattern() {\n+        assert_eq!(parse_error_text(\" ==>> ()\"), \"Parse error: Pattern is not an expression\");\n+    }\n+\n+    #[test]\n+    fn parser_invlid_template() {\n+        assert_eq!(parse_error_text(\"() ==>> )\"), \"Parse error: Template is not an expression\");\n+    }\n+\n     #[test]\n     fn parse_match_replace() {\n         let query: SsrQuery = \"foo($x:expr) ==>> bar($x)\".parse().unwrap();"}, {"sha": "9f6f1cc531048c57aa18e272693b67890a2e1139", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -112,10 +112,14 @@ pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n     let token = token(op);\n     expr_from_text(&format!(\"{}{}\", token, expr.syntax()))\n }\n-pub fn expr_from_text(text: &str) -> ast::Expr {\n+fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }\n \n+pub fn try_expr_from_text(text: &str) -> Option<ast::Expr> {\n+    try_ast_from_text(&format!(\"const C: () = {};\", text))\n+}\n+\n pub fn bind_pat(name: ast::Name) -> ast::BindPat {\n     return from_text(name.text());\n \n@@ -239,6 +243,16 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n     node\n }\n \n+fn try_ast_from_text<N: AstNode>(text: &str) -> Option<N> {\n+    let parse = SourceFile::parse(text);\n+    let node = parse.tree().syntax().descendants().find_map(N::cast)?;\n+    let node = node.syntax().clone();\n+    let node = unroot(node);\n+    let node = N::cast(node).unwrap();\n+    assert_eq!(node.syntax().text_range().start(), 0.into());\n+    Some(node)\n+}\n+\n fn unroot(n: SyntaxNode) -> SyntaxNode {\n     SyntaxNode::new_root(n.green().clone())\n }"}, {"sha": "3a31a6dd761fa1742484a93ea980c6d79c7d1543", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -906,7 +906,10 @@ pub fn handle_document_highlight(\n \n pub fn handle_ssr(world: WorldSnapshot, params: req::SsrParams) -> Result<req::SourceChange> {\n     let _p = profile(\"handle_ssr\");\n-    world.analysis().structural_search_replace(&params.arg)??.try_conv_with(&world)\n+    world\n+        .analysis()\n+        .structural_search_replace(&params.query, params.parse_only)??\n+        .try_conv_with(&world)\n }\n \n pub fn publish_diagnostics(world: &WorldSnapshot, file_id: FileId) -> Result<DiagnosticTask> {"}, {"sha": "435f717aeb29adcf0cb4ac305cd20d61040528f7", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -217,6 +217,8 @@ impl Request for Ssr {\n }\n \n #[derive(Debug, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n pub struct SsrParams {\n-    pub arg: String,\n+    pub query: String,\n+    pub parse_only: bool,\n }"}, {"sha": "6fee051fdf66a1a593923623552aa8f2a563ac9d", "filename": "editors/code/src/commands/ssr.ts", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -10,20 +10,22 @@ export function ssr(ctx: Ctx): Cmd {\n         if (!client) return;\n \n         const options: vscode.InputBoxOptions = {\n-            placeHolder: \"foo($a:expr, $b:expr) ==>> bar($a, foo($b))\",\n-            prompt: \"Enter request\",\n-            validateInput: (x: string) => {\n-                if (x.includes('==>>')) {\n-                    return null;\n+            value: \"() ==>> ()\",\n+            prompt: \"EnteR request, for example 'Foo($a:expr) ==> Foo::new($a)' \",\n+            validateInput: async (x: string) => {\n+                try {\n+                    await client.sendRequest(ra.ssr, { query: x, parseOnly: true });\n+                } catch (e) {\n+                    return e.toString();\n                 }\n-                return \"Enter request: pattern ==>> template\";\n+                return null;\n             }\n         };\n         const request = await vscode.window.showInputBox(options);\n \n         if (!request) return;\n \n-        const change = await client.sendRequest(ra.ssr, { arg: request });\n+        const change = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n \n         await applySourceChange(ctx, change);\n     };"}, {"sha": "6ad93715f939cc2558876dbc4e07d2c103723d78", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b150965ed7994c679711bc807de301a12f5c7944/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b150965ed7994c679711bc807de301a12f5c7944/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=b150965ed7994c679711bc807de301a12f5c7944", "patch": "@@ -108,7 +108,8 @@ export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\"\n \n \n export interface SsrParams {\n-    arg: string;\n+    query: string;\n+    parseOnly: boolean;\n }\n export const ssr = request<SsrParams, SourceChange>(\"ssr\");\n "}]}