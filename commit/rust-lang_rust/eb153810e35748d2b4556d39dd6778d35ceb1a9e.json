{"sha": "eb153810e35748d2b4556d39dd6778d35ceb1a9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMTUzODEwZTM1NzQ4ZDJiNDU1NmQzOWRkNjc3OGQzNWNlYjFhOWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-31T09:09:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-31T09:09:55Z"}, "message": "Use MIRI_ env vars to set RUST_ ones\n\nThis means we can do `MIRI_LOG=debug cargo run` and get something reasonable,\neven if cargo has to build some dependencies first.", "tree": {"sha": "73b86ea35a11d6772124bac3685f4da13a03426a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73b86ea35a11d6772124bac3685f4da13a03426a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb153810e35748d2b4556d39dd6778d35ceb1a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb153810e35748d2b4556d39dd6778d35ceb1a9e", "html_url": "https://github.com/rust-lang/rust/commit/eb153810e35748d2b4556d39dd6778d35ceb1a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb153810e35748d2b4556d39dd6778d35ceb1a9e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2", "html_url": "https://github.com/rust-lang/rust/commit/f0c1f18314bc20c95a46246c9a67d688ef3c0ed2"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "c8103c2a1176b7805de9790b339067e0c047874a", "filename": "src/bin/miri.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/eb153810e35748d2b4556d39dd6778d35ceb1a9e/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb153810e35748d2b4556d39dd6778d35ceb1a9e/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=eb153810e35748d2b4556d39dd6778d35ceb1a9e", "patch": "@@ -12,6 +12,9 @@ extern crate log_settings;\n extern crate syntax;\n extern crate log;\n \n+use std::path::PathBuf;\n+use std::env;\n+\n use rustc::session::Session;\n use rustc_metadata::cstore::CStore;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n@@ -21,7 +24,6 @@ use rustc::hir::{self, itemlikevisit};\n use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use syntax::ast;\n-use std::path::PathBuf;\n \n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n@@ -148,42 +150,31 @@ fn after_analysis<'a, 'tcx>(\n     }\n }\n \n-fn init_logger() {\n-    let format = |formatter: &mut env_logger::fmt::Formatter, record: &log::Record| {\n-        use std::io::Write;\n-        if record.level() == log::Level::Trace {\n-            // prepend frame number\n-            let indentation = log_settings::settings().indentation;\n-            writeln!(\n-                formatter,\n-                \"{indentation}:{lvl}:{module}: {text}\",\n-                lvl = record.level(),\n-                module = record.module_path().unwrap_or(\"<unknown module>\"),\n-                indentation = indentation,\n-                text = record.args(),\n-            )\n-        } else {\n-            writeln!(\n-                formatter,\n-                \"{lvl}:{module}: {text}\",\n-                lvl = record.level(),\n-                module = record.module_path().unwrap_or(\"<unknown_module>\"),\n-                text = record.args(),\n-            )\n+fn init_loggers() {\n+    // Notice that our `extern crate log` is NOT the same as rustc's!  So we have to initialize\n+    // them both.\n+    // First, miri.\n+    let env = env_logger::Env::new().filter(\"MIRI_LOG\").write_style(\"MIRI_LOG_STYLE\");\n+    env_logger::init_from_env(env);\n+    // Now, change the RUST_LOG env var to control rustc's logger.\n+    // If MIRI_LOG is set and RUST_LOG is not, set RUST_LOG.\n+    if let Ok(var) = env::var(\"MIRI_LOG\") {\n+        if env::var(\"RUST_LOG\") == Err(env::VarError::NotPresent) {\n+            // We try to be a bit clever here: If MIRI_LOG is just a single level\n+            // used for everything, we only apply it to the parts of rustc that are\n+            // CTFE-related.  Only if MIRI_LOG contains `module=level`, we just\n+            // use the same value for RUST_LOG.\n+            // This way, if you set `MIRI_LOG=trace`, you get only the right parts of\n+            // rustc traced, but you can also do `MIRI_LOG=miri=trace,rustc_mir::interpret=debug`.\n+            if var.contains('=') {\n+                env::set_var(\"RUST_LOG\", &var);\n+            } else {\n+                env::set_var(\"RUST_LOG\",\n+                    &format!(\"rustc::mir::interpret={0},rustc_mir::interpret={0}\", var));\n+            }\n         }\n-    };\n-\n-    let mut builder = env_logger::Builder::new();\n-    builder.format(format).filter(\n-        None,\n-        log::LevelFilter::Info,\n-    );\n-\n-    if std::env::var(\"MIRI_LOG\").is_ok() {\n-        builder.parse(&std::env::var(\"MIRI_LOG\").unwrap());\n     }\n-\n-    builder.init();\n+    rustc_driver::init_rustc_env_logger();\n }\n \n fn find_sysroot() -> String {\n@@ -208,8 +199,7 @@ fn find_sysroot() -> String {\n }\n \n fn main() {\n-    rustc_driver::init_rustc_env_logger();\n-    init_logger();\n+    init_loggers();\n     let mut args: Vec<String> = std::env::args().collect();\n \n     let sysroot_flag = String::from(\"--sysroot\");"}, {"sha": "fa60a0da00d5ab4361adf49752f7ae6b4ad63acf", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb153810e35748d2b4556d39dd6778d35ceb1a9e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb153810e35748d2b4556d39dd6778d35ceb1a9e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eb153810e35748d2b4556d39dd6778d35ceb1a9e", "patch": "@@ -11,10 +11,12 @@ extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;\n+extern crate rustc_driver;\n extern crate syntax;\n \n use std::collections::HashMap;\n use std::borrow::Cow;\n+use std::env;\n \n use rustc::ty::{self, Ty, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n@@ -157,11 +159,21 @@ pub fn eval_main<'a, 'tcx: 'a>(\n ) {\n     let mut ecx = create_ecx(tcx, main_id, validate).expect(\"Couldn't create ecx\");\n \n+    // If MIRI_BACKTRACE is set and RUST_CTFE_BACKTRACE is not, set RUST_CTFE_BACKTRACE.\n+    // Do this late, so we really only apply this to miri's errors.\n+    if let Ok(var) = env::var(\"MIRI_BACKTRACE\") {\n+        if env::var(\"RUST_CTFE_BACKTRACE\") == Err(env::VarError::NotPresent) {\n+            env::set_var(\"RUST_CTFE_BACKTRACE\", &var);\n+        }\n+    }\n+\n+    // Run! The main execution.\n     let res: EvalResult = (|| {\n         ecx.run()?;\n         ecx.run_tls_dtors()\n     })();\n \n+    // Process the result.\n     match res {\n         Ok(()) => {\n             let leaks = ecx.memory().leak_report();\n@@ -173,7 +185,8 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n         }\n-        Err(e) => {\n+        Err(mut e) => {\n+            e.print_backtrace();\n             if let Some(frame) = ecx.stack().last() {\n                 let block = &frame.mir.basic_blocks()[frame.block];\n                 let span = if frame.stmt < block.statements.len() {"}]}