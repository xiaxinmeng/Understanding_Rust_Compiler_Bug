{"sha": "e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YzMyODczNjc0Y2UzMWYwYWNlNDdlN2FjMDgyNjZmM2U4NmQ2YTA=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T05:12:37Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T05:38:17Z"}, "message": "Reuse a single work buffer every time the SHA1 message block is processed.\n\nThis finally allows the full lib-sha1 test to run in a reasonable amount of\ntime. Was 30s, now 3s. Trims a second or two from stage2/rustc. XFAIL lib-sha1\nin stage0 since it will be very slow until the next snapshot.", "tree": {"sha": "2e7738b2985cccaa261cd3819d05b68ce8278cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7738b2985cccaa261cd3819d05b68ce8278cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "html_url": "https://github.com/rust-lang/rust/commit/e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4c32873674ce31f0ace47e7ac08266f3e86d6a0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "html_url": "https://github.com/rust-lang/rust/commit/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "6aec814c8b880234ee1abcaadd62c439a49be909", "filename": "src/lib/SHA1.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4c32873674ce31f0ace47e7ac08266f3e86d6a0/src%2Flib%2FSHA1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c32873674ce31f0ace47e7ac08266f3e86d6a0/src%2Flib%2FSHA1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FSHA1.rs?ref=e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "patch": "@@ -30,6 +30,7 @@ state type sha1 = state obj {\n // Some unexported constants\n const uint digest_buf_len = 5;\n const uint msg_block_len = 64;\n+const uint work_buf_len = 80;\n \n const u32 k0 = 0x5A827999u32;\n const u32 k1 = 0x6ED9EBA1u32;\n@@ -44,7 +45,8 @@ fn mk_sha1() -> sha1 {\n                                mutable u32 len_high,\n                                vec[mutable u8] msg_block,\n                                mutable uint msg_block_idx,\n-                               mutable bool computed);\n+                               mutable bool computed,\n+                               vec[mutable u32] work_buf);\n \n     fn add_input(&sha1state st, &vec[u8] msg) {\n         // FIXME: Should be typestate precondition\n@@ -73,9 +75,10 @@ fn mk_sha1() -> sha1 {\n \n         // FIXME: Make precondition\n         assert (Vec.len(st.h) == digest_buf_len);\n+        assert (Vec.len(st.work_buf) == work_buf_len);\n \n         let int t; // Loop counter\n-        let vec[mutable u32] w = Vec.init_elt_mut[u32](0u32, 80u);\n+        auto w = st.work_buf;\n \n         // Initialize the first 16 words of the vector w\n         t = 0;\n@@ -279,7 +282,8 @@ fn mk_sha1() -> sha1 {\n                   mutable len_high = 0u32,\n                   msg_block = Vec.init_elt_mut[u8](0u8, msg_block_len),\n                   mutable msg_block_idx = 0u,\n-                  mutable computed = false);\n+                  mutable computed = false,\n+                  work_buf = Vec.init_elt_mut[u32](0u32, work_buf_len));\n     auto sh = sha1(st);\n     sh.reset();\n     ret sh;"}, {"sha": "c89eca59c71018765d805c576ceb08ed62a756c7", "filename": "src/test/run-pass/lib-sha1.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4c32873674ce31f0ace47e7ac08266f3e86d6a0/src%2Ftest%2Frun-pass%2Flib-sha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c32873674ce31f0ace47e7ac08266f3e86d6a0/src%2Ftest%2Frun-pass%2Flib-sha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-sha1.rs?ref=e4c32873674ce31f0ace47e7ac08266f3e86d6a0", "patch": "@@ -1,5 +1,8 @@\n // -*- rust -*-\n \n+// xfail-boot\n+// xfail-stage0\n+\n use std;\n \n import std.SHA1;\n@@ -35,18 +38,13 @@ fn main() {\n                              0x3Bu8, 0xD2u8, 0x6Eu8, 0xBAu8, 0xAEu8,\n                              0x4Au8, 0xA1u8, 0xF9u8, 0x51u8, 0x29u8,\n                              0xE5u8, 0xE5u8, 0x46u8, 0x70u8, 0xF1u8)\n-                )\n-            // FIXME: This test is disabled because it takes some\n-            // minutes to run under rustboot+valgrind. It may be\n-            // possible to reenable once things are more optimized.\n-            /*,\n+                ),\n             rec(input = a_million_letter_a(),\n                 output = vec(0x34u8, 0xAAu8, 0x97u8, 0x3Cu8, 0xD4u8,\n                              0xC4u8, 0xDAu8, 0xA4u8, 0xF6u8, 0x1Eu8,\n                              0xEBu8, 0x2Bu8, 0xDBu8, 0xADu8, 0x27u8,\n                              0x31u8, 0x65u8, 0x34u8, 0x01u8, 0x6Fu8)\n                 )\n-            */\n             );\n \n     // Examples from wikipedia"}]}