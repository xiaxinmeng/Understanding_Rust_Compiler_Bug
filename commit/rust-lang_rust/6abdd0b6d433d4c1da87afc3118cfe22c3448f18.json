{"sha": "6abdd0b6d433d4c1da87afc3118cfe22c3448f18", "node_id": "C_kwDOAAsO6NoAKDZhYmRkMGI2ZDQzM2Q0YzFkYTg3YWZjMzExOGNmZTIyYzM0NDhmMTg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-19T07:19:29Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-19T07:19:29Z"}, "message": "Make std::sys::unix::futex consistent on emscripten.", "tree": {"sha": "8d836c216961933647ed5e3cb0dec5e5b2edf4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d836c216961933647ed5e3cb0dec5e5b2edf4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6abdd0b6d433d4c1da87afc3118cfe22c3448f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6abdd0b6d433d4c1da87afc3118cfe22c3448f18", "html_url": "https://github.com/rust-lang/rust/commit/6abdd0b6d433d4c1da87afc3118cfe22c3448f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6abdd0b6d433d4c1da87afc3118cfe22c3448f18/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8305398d7ae6128811ec2b3223939bcd067530c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8305398d7ae6128811ec2b3223939bcd067530c2", "html_url": "https://github.com/rust-lang/rust/commit/8305398d7ae6128811ec2b3223939bcd067530c2"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "c12ee169e797aa78c904d3e5d125e16ceed4145d", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6abdd0b6d433d4c1da87afc3118cfe22c3448f18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6abdd0b6d433d4c1da87afc3118cfe22c3448f18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=6abdd0b6d433d4c1da87afc3118cfe22c3448f18", "patch": "@@ -52,25 +52,6 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n     }\n }\n \n-#[cfg(target_os = \"emscripten\")]\n-pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) {\n-    extern \"C\" {\n-        fn emscripten_futex_wait(\n-            addr: *const AtomicU32,\n-            val: libc::c_uint,\n-            max_wait_ms: libc::c_double,\n-        ) -> libc::c_int;\n-    }\n-\n-    unsafe {\n-        emscripten_futex_wait(\n-            futex,\n-            expected,\n-            timeout.map_or(crate::f64::INFINITY, |d| d.as_secs_f64() * 1000.0),\n-        );\n-    }\n-}\n-\n /// Wake up one thread that's blocked on futex_wait on this futex.\n ///\n /// Returns true if this actually woke up such a thread,\n@@ -101,10 +82,32 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n }\n \n #[cfg(target_os = \"emscripten\")]\n-pub fn futex_wake(futex: &AtomicU32) -> bool {\n-    extern \"C\" {\n-        fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;\n+extern \"C\" {\n+    fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;\n+    fn emscripten_futex_wait(\n+        addr: *const AtomicU32,\n+        val: libc::c_uint,\n+        max_wait_ms: libc::c_double,\n+    ) -> libc::c_int;\n+}\n+\n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    unsafe {\n+        emscripten_futex_wait(\n+            futex,\n+            expected,\n+            timeout.map_or(f64::INFINITY, |d| d.as_secs_f64() * 1000.0),\n+        ) != -libc::ETIMEDOUT\n     }\n+}\n \n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n     unsafe { emscripten_futex_wake(futex, 1) > 0 }\n }\n+\n+#[cfg(target_os = \"emscripten\")]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    unsafe { emscripten_futex_wake(futex, i32::MAX) };\n+}"}]}