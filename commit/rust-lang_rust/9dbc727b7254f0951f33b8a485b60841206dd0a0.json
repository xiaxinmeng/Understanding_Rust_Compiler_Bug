{"sha": "9dbc727b7254f0951f33b8a485b60841206dd0a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmM3MjdiNzI1NGYwOTUxZjMzYjhhNDg1YjYwODQxMjA2ZGQwYTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-24T12:54:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-24T12:54:22Z"}, "message": "Rustfmt", "tree": {"sha": "534aeea131193b2cd02005e2887638242ed04ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534aeea131193b2cd02005e2887638242ed04ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbc727b7254f0951f33b8a485b60841206dd0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbc727b7254f0951f33b8a485b60841206dd0a0", "html_url": "https://github.com/rust-lang/rust/commit/9dbc727b7254f0951f33b8a485b60841206dd0a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbc727b7254f0951f33b8a485b60841206dd0a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d15d9e5dd33aa3b3576f091f7fb05b942afc576", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d15d9e5dd33aa3b3576f091f7fb05b942afc576", "html_url": "https://github.com/rust-lang/rust/commit/0d15d9e5dd33aa3b3576f091f7fb05b942afc576"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "f0729cad81db82c2f7a335c8bf4db526072fd92b", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9dbc727b7254f0951f33b8a485b60841206dd0a0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbc727b7254f0951f33b8a485b60841206dd0a0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9dbc727b7254f0951f33b8a485b60841206dd0a0", "patch": "@@ -20,11 +20,10 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n         MonoItem::Fn(inst) => {\n             let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n             let mir = match inst.def {\n-                InstanceDef::Item(_)\n-                | InstanceDef::DropGlue(_, _)\n-                | InstanceDef::Virtual(_, _) => {\n+                InstanceDef::Item(_) | InstanceDef::DropGlue(_, _) | InstanceDef::Virtual(_, _) => {\n                     let mut mir = ::std::io::Cursor::new(Vec::new());\n-                    ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir).unwrap();\n+                    ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n+                        .unwrap();\n                     mir.into_inner()\n                 }\n                 InstanceDef::FnPtrShim(_, _)\n@@ -40,7 +39,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n             ::std::fs::write(mir_file_name, mir).unwrap();\n \n             trans_fn(tcx, cx.module, &mut cx.ccx, context, inst);\n-        },\n+        }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.ccx, def_id);\n         }\n@@ -317,24 +316,16 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let rhs = trans_operand(fx, rhs);\n \n                     let res = match ty.sty {\n-                        ty::Bool => {\n-                            trans_bool_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n-                        }\n+                        ty::Bool => trans_bool_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n                         ty::Uint(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n                         }\n                         ty::Int(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true)\n                         }\n-                        ty::Float(_) => {\n-                            trans_float_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n-                        }\n-                        ty::Char => {\n-                            trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n-                        }\n-                        ty::RawPtr(..) => {\n-                            trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n-                        }\n+                        ty::Float(_) => trans_float_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n+                        ty::Char => trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n+                        ty::RawPtr(..) => trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n                         _ => unimplemented!(\"binop {:?} for {:?}\", bin_op, ty),\n                     };\n                     lval.write_cvalue(fx, res);\n@@ -393,15 +384,12 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         | (ty::RawPtr(..), ty::RawPtr(..)) => {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n-                        (ty::RawPtr(..), ty::Uint(_))\n-                        | (ty::FnPtr(..), ty::Uint(_))\n+                        (ty::RawPtr(..), ty::Uint(_)) | (ty::FnPtr(..), ty::Uint(_))\n                             if to_ty.sty == fx.tcx.types.usize.sty =>\n                         {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n-                        (ty::Uint(_), ty::RawPtr(..))\n-                            if from_ty.sty == fx.tcx.types.usize.sty =>\n-                        {\n+                        (ty::Uint(_), ty::RawPtr(..)) if from_ty.sty == fx.tcx.types.usize.sty => {\n                             lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n                         (ty::Char, ty::Uint(_))\n@@ -417,8 +405,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             );\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n-                        (ty::Int(_), ty::Int(_))\n-                        | (ty::Int(_), ty::Uint(_)) => {\n+                        (ty::Int(_), ty::Int(_)) | (ty::Int(_), ty::Uint(_)) => {\n                             let from = operand.load_value(fx);\n                             let res = crate::common::cton_intcast(\n                                 fx,\n@@ -453,8 +440,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             let res = fx.bcx.ins().fcvt_from_uint(f_type, from);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n-                        (ty::Bool, ty::Uint(_))\n-                        | (ty::Bool, ty::Int(_)) => {\n+                        (ty::Bool, ty::Uint(_)) | (ty::Bool, ty::Int(_)) => {\n                             let to_ty = fx.cton_type(to_ty).unwrap();\n                             let from = operand.load_value(fx);\n                             let res = if to_ty != types::I8 {"}]}