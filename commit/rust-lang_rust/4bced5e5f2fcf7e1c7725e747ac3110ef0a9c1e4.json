{"sha": "4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2VkNWU1ZjJmY2Y3ZTFjNzcyNWU3NDdhYzMxMTBlZjBhOWMxZTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-07T18:46:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T00:31:38Z"}, "message": "Use invoke to call (most) rust functions\n\nNo landing pads yet.\n\nIssue #236", "tree": {"sha": "f4411039ef2410b4c5160399c351cc5ae22107c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4411039ef2410b4c5160399c351cc5ae22107c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "html_url": "https://github.com/rust-lang/rust/commit/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4b4d89cee40a04bf4b3227e378588e438e588a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4b4d89cee40a04bf4b3227e378588e438e588a", "html_url": "https://github.com/rust-lang/rust/commit/9f4b4d89cee40a04bf4b3227e378588e438e588a"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "9a8b9bfaba112c0dd59e7220d2662c820399eef3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "patch": "@@ -3761,7 +3761,7 @@ fn trans_call(in_cx: &@block_ctxt, f: &@ast::expr,\n        for the call itself is unreachable. */\n     let retval = C_nil();\n     if !is_terminated(bcx) {\n-        FastCall(bcx, faddr, llargs);\n+        bcx = invoke_fastcall(bcx, faddr, llargs).bcx;\n         alt lliterbody {\n           none. {\n             if !ty::type_is_nil(bcx_tcx(cx), ret_ty) {\n@@ -3794,6 +3794,22 @@ fn trans_call(in_cx: &@block_ctxt, f: &@ast::expr,\n     ret rslt(bcx, retval);\n }\n \n+fn invoke_fastcall(bcx: &@block_ctxt, llfn: ValueRef,\n+                   llargs: &[ValueRef]) -> result {\n+\n+    let normal_bcx = new_sub_block_ctxt(bcx, \"normal return\");\n+    let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n+    let retval = trans_build::FastInvoke(bcx, llfn, llargs,\n+                                         normal_bcx.llbb,\n+                                         unwind_bcx.llbb);\n+    trans_landing_pad(unwind_bcx);\n+    ret rslt(normal_bcx, retval);\n+}\n+\n+fn trans_landing_pad(bcx: &@block_ctxt) {\n+    Unreachable(bcx);\n+}\n+\n fn trans_tup(cx: &@block_ctxt, elts: &[@ast::expr], id: ast::node_id) ->\n    result {\n     let bcx = cx;"}, {"sha": "e7deb97a982ce6fc4d3e406bad2b44fbeb09296b", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=4bced5e5f2fcf7e1c7725e747ac3110ef0a9c1e4", "patch": "@@ -68,6 +68,21 @@ fn Invoke(cx: &@block_ctxt, Fn: ValueRef, Args: &[ValueRef],\n                     });\n }\n \n+fn FastInvoke(cx: &@block_ctxt, Fn: ValueRef, Args: &[ValueRef],\n+              Then: BasicBlockRef, Catch: BasicBlockRef) -> ValueRef {\n+    assert (!cx.terminated);\n+    cx.terminated = true;\n+    let v = str::as_buf(\"\",\n+                        {|buf|\n+                            llvm::LLVMBuildInvoke(B(cx), Fn,\n+                                                  vec::to_ptr(Args),\n+                                                  vec::len(Args), Then,\n+                                                  Catch, buf)\n+                        });\n+    llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n+    ret v;\n+}\n+\n fn Unreachable(cx: &@block_ctxt) -> ValueRef {\n     assert (!cx.terminated);\n     cx.terminated = true;"}]}