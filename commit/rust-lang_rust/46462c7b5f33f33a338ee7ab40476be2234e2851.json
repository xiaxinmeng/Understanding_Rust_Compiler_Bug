{"sha": "46462c7b5f33f33a338ee7ab40476be2234e2851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDYyYzdiNWYzM2YzM2EzMzhlZTdhYjQwNDc2YmUyMjM0ZTI4NTE=", "commit": {"author": {"name": "FuGangqiang", "email": "fu_gangqiang@163.com", "date": "2015-04-24T15:56:02Z"}, "committer": {"name": "FuGangqiang", "email": "fu_gangqiang@163.com", "date": "2015-04-25T08:30:25Z"}, "message": "fix doc", "tree": {"sha": "d3f23208317c7673a819fd975761b94cfa347e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f23208317c7673a819fd975761b94cfa347e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46462c7b5f33f33a338ee7ab40476be2234e2851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46462c7b5f33f33a338ee7ab40476be2234e2851", "html_url": "https://github.com/rust-lang/rust/commit/46462c7b5f33f33a338ee7ab40476be2234e2851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46462c7b5f33f33a338ee7ab40476be2234e2851/comments", "author": {"login": "FuGangqiang", "id": 1223384, "node_id": "MDQ6VXNlcjEyMjMzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1223384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FuGangqiang", "html_url": "https://github.com/FuGangqiang", "followers_url": "https://api.github.com/users/FuGangqiang/followers", "following_url": "https://api.github.com/users/FuGangqiang/following{/other_user}", "gists_url": "https://api.github.com/users/FuGangqiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/FuGangqiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FuGangqiang/subscriptions", "organizations_url": "https://api.github.com/users/FuGangqiang/orgs", "repos_url": "https://api.github.com/users/FuGangqiang/repos", "events_url": "https://api.github.com/users/FuGangqiang/events{/privacy}", "received_events_url": "https://api.github.com/users/FuGangqiang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FuGangqiang", "id": 1223384, "node_id": "MDQ6VXNlcjEyMjMzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1223384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FuGangqiang", "html_url": "https://github.com/FuGangqiang", "followers_url": "https://api.github.com/users/FuGangqiang/followers", "following_url": "https://api.github.com/users/FuGangqiang/following{/other_user}", "gists_url": "https://api.github.com/users/FuGangqiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/FuGangqiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FuGangqiang/subscriptions", "organizations_url": "https://api.github.com/users/FuGangqiang/orgs", "repos_url": "https://api.github.com/users/FuGangqiang/repos", "events_url": "https://api.github.com/users/FuGangqiang/events{/privacy}", "received_events_url": "https://api.github.com/users/FuGangqiang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d439b41777103b8b349635e68e9ccd3648aabc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d439b41777103b8b349635e68e9ccd3648aabc2", "html_url": "https://github.com/rust-lang/rust/commit/9d439b41777103b8b349635e68e9ccd3648aabc2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d0825e543f2c288c678515ad8115d17b28ed1b0d", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=46462c7b5f33f33a338ee7ab40476be2234e2851", "patch": "@@ -1,5 +1,5 @@\n % Getting Started\n \n This first section of the book will get you going with Rust and its tooling.\n-First, we\u2019ll install Rust. Then: the classic \u2018Hello World\u2019 program. Finally,\n+First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager."}, {"sha": "9845fcbdcd173ec3d6b3543bb2fba9689cf5727e", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=46462c7b5f33f33a338ee7ab40476be2234e2851", "patch": "@@ -19,7 +19,7 @@ In the example above `x` and `y` have arity 2. `z` has arity 3.\n \n When a compiler is compiling your program, it does a number of different\n things. One of the things that it does is turn the text of your program into an\n-'abstract syntax tree,' or 'AST.' This tree is a representation of the\n+\u2018abstract syntax tree\u2019, or\u2018AST\u2019. This tree is a representation of the\n structure of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text"}, {"sha": "aca6e327c3bce07f5d0626faaa162b9ba7623d40", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=46462c7b5f33f33a338ee7ab40476be2234e2851", "patch": "@@ -62,14 +62,14 @@ let y = 1.0; // y has type f64\n Here\u2019s a list of the different numeric types, with links to their documentation\n in the standard library:\n \n+* [i8](../std/primitive.i8.html)\n * [i16](../std/primitive.i16.html)\n * [i32](../std/primitive.i32.html)\n * [i64](../std/primitive.i64.html)\n-* [i8](../std/primitive.i8.html)\n+* [u8](../std/primitive.u8.html)\n * [u16](../std/primitive.u16.html)\n * [u32](../std/primitive.u32.html)\n * [u64](../std/primitive.u64.html)\n-* [u8](../std/primitive.u8.html)\n * [isize](../std/primitive.isize.html)\n * [usize](../std/primitive.usize.html)\n * [f32](../std/primitive.f32.html)\n@@ -82,12 +82,12 @@ Let\u2019s go over them by category:\n Integer types come in two varieties: signed and unsigned. To understand the\n difference, let\u2019s consider a number with four bits of size. A signed, four-bit\n number would let you store numbers from `-8` to `+7`. Signed numbers use\n-\u2018two\u2019s compliment representation\u2019. An unsigned four bit number, since it does\n+\u201ctwo\u2019s compliment representation\u201d. An unsigned four bit number, since it does\n not need to store negatives, can store values from `0` to `+15`.\n \n Unsigned types use a `u` for their category, and signed types use `i`. The `i`\n is for \u2018integer\u2019. So `u8` is an eight-bit unsigned number, and `i8` is an\n-eight-bit signed number. \n+eight-bit signed number.\n \n ## Fixed size types\n \n@@ -103,7 +103,7 @@ and unsigned varieties. This makes for two types: `isize` and `usize`.\n \n ## Floating-point types\n \n-Rust also two floating point types: `f32` and `f64`. These correspond to \n+Rust also has two floating point types: `f32` and `f64`. These correspond to\n IEEE-754 single and double precision numbers.\n \n # Arrays\n@@ -241,8 +241,8 @@ println!(\"x is {}\", x);\n Remember [before][let] when I said the left-hand side of a `let` statement was more\n powerful than just assigning a binding? Here we are. We can put a pattern on\n the left-hand side of the `let`, and if it matches up to the right-hand side,\n-we can assign multiple bindings at once. In this case, `let` \"destructures,\"\n-or \"breaks up,\" the tuple, and assigns the bits to three bindings.\n+we can assign multiple bindings at once. In this case, `let` \u201cdestructures\u201d\n+or \u201cbreaks up\u201d the tuple, and assigns the bits to three bindings.\n \n [let]: variable-bindings.html\n "}, {"sha": "0ee34d4b91d03aead1ad2ba4376828465f10c956", "filename": "src/doc/trpl/variable-bindings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/46462c7b5f33f33a338ee7ab40476be2234e2851/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md?ref=46462c7b5f33f33a338ee7ab40476be2234e2851", "patch": "@@ -1,6 +1,6 @@\n % Variable Bindings\n \n-Vitually every non-\u2019Hello World\u2019 Rust program uses *variable bindings*. They\n+Virtually every non-\u2018Hello World\u2019Rust program uses *variable bindings*. They\n look like this:\n \n ```rust"}]}