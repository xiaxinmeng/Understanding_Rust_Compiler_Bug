{"sha": "43126f357339bd35e6cdc28201516422f6a2dac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTI2ZjM1NzMzOWJkMzVlNmNkYzI4MjAxNTE2NDIyZjZhMmRhYzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T11:59:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T12:14:19Z"}, "message": "get rid of min_const_fn references in library/ and rustdoc", "tree": {"sha": "33ab7f643028c1dbeee4a4b13c3f07b9de7242cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ab7f643028c1dbeee4a4b13c3f07b9de7242cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43126f357339bd35e6cdc28201516422f6a2dac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43126f357339bd35e6cdc28201516422f6a2dac1", "html_url": "https://github.com/rust-lang/rust/commit/43126f357339bd35e6cdc28201516422f6a2dac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43126f357339bd35e6cdc28201516422f6a2dac1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "html_url": "https://github.com/rust-lang/rust/commit/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "fe87a97bac1284bc690c9879fcd0474200cbf70d", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43126f357339bd35e6cdc28201516422f6a2dac1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43126f357339bd35e6cdc28201516422f6a2dac1/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=43126f357339bd35e6cdc28201516422f6a2dac1", "patch": "@@ -53,17 +53,11 @@ pub struct RawVec<T, A: Allocator = Global> {\n }\n \n impl<T> RawVec<T, Global> {\n-    /// HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n-    /// to `min_const_fn` and so they cannot be called in `min_const_fn`s either.\n+    /// HACK(Centril): This exists because stable `const fn` can only call stable `const fn`, so\n+    /// they cannot call `Self::new()`.\n     ///\n-    /// If you change `RawVec<T>::new` or dependencies, please take care to not\n-    /// introduce anything that would truly violate `min_const_fn`.\n-    ///\n-    /// NOTE: We could avoid this hack and check conformance with some\n-    /// `#[rustc_force_min_const_fn]` attribute which requires conformance\n-    /// with `min_const_fn` but does not necessarily allow calling it in\n-    /// `stable(...) const fn` / user code not enabling `foo` when\n-    /// `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` is present.\n+    /// If you change `RawVec<T>::new` or dependencies, please take care to not introduce anything\n+    /// that would truly const-call something unstable.\n     pub const NEW: Self = Self::new();\n \n     /// Creates the biggest possible `RawVec` (on the system heap)"}, {"sha": "3986167bac8d3f7b3a52d4489d2275d6c5623e67", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43126f357339bd35e6cdc28201516422f6a2dac1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43126f357339bd35e6cdc28201516422f6a2dac1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=43126f357339bd35e6cdc28201516422f6a2dac1", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -210,7 +209,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let sig = cx.tcx.fn_sig(did);\n \n     let constness =\n-        if is_min_const_fn(cx.tcx, did) { hir::Constness::Const } else { hir::Constness::NotConst };\n+        if cx.tcx.is_const_fn_raw(did) { hir::Constness::Const } else { hir::Constness::NotConst };\n     let asyncness = cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {"}, {"sha": "6b04157d9530fa26dc2858b02637e654d1891fc2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43126f357339bd35e6cdc28201516422f6a2dac1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43126f357339bd35e6cdc28201516422f6a2dac1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=43126f357339bd35e6cdc28201516422f6a2dac1", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc_mir::const_eval::{is_const_fn, is_min_const_fn, is_unstable_const_fn};\n+use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n@@ -1048,7 +1048,7 @@ impl Clean<Item> for ty::AssocItem {\n                     ty::TraitContainer(_) => self.defaultness.has_value(),\n                 };\n                 if provided {\n-                    let constness = if is_min_const_fn(tcx, self.def_id) {\n+                    let constness = if tcx.is_const_fn_raw(self.def_id) {\n                         hir::Constness::Const\n                     } else {\n                         hir::Constness::NotConst"}]}