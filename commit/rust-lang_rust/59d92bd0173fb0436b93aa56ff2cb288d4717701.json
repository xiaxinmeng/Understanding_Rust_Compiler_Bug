{"sha": "59d92bd0173fb0436b93aa56ff2cb288d4717701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDkyYmQwMTczZmIwNDM2YjkzYWE1NmZmMmNiMjg4ZDQ3MTc3MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-16T09:28:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-16T09:28:22Z"}, "message": "Auto merge of #87182 - GuillaumeGomez:rollup-whwohua, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #86983 (Add or improve natvis definitions for common standard library types)\n - #87069 (ExprUseVisitor: Treat ByValue use of Copy types as ImmBorrow)\n - #87138 (Correct invariant documentation for `steps_between`)\n - #87145 (Make --cap-lints and related options leave crate hash alone)\n - #87161 (RFC2229: Use the correct place type)\n - #87162 (Fix type decl layout \"overflow\")\n - #87167 (Fix sidebar display on small devices)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1f19cd5b098ae6b371eba0ae3d8e791fa45b13d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f19cd5b098ae6b371eba0ae3d8e791fa45b13d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d92bd0173fb0436b93aa56ff2cb288d4717701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d92bd0173fb0436b93aa56ff2cb288d4717701", "html_url": "https://github.com/rust-lang/rust/commit/59d92bd0173fb0436b93aa56ff2cb288d4717701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d92bd0173fb0436b93aa56ff2cb288d4717701/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6470c7fa8a511cfbcf9e9d3e1ab6779ac661edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6470c7fa8a511cfbcf9e9d3e1ab6779ac661edb", "html_url": "https://github.com/rust-lang/rust/commit/a6470c7fa8a511cfbcf9e9d3e1ab6779ac661edb"}, {"sha": "b19f37ca54709761948e3eaea3f86f5cd823e9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b19f37ca54709761948e3eaea3f86f5cd823e9d2", "html_url": "https://github.com/rust-lang/rust/commit/b19f37ca54709761948e3eaea3f86f5cd823e9d2"}], "stats": {"total": 956, "additions": 836, "deletions": 120}, "files": [{"sha": "b1e4e3ba395217fefa8917c70aaa31836f42b998", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -236,9 +236,9 @@ fn test_lints_tracking_hash_different_values() {\n         (String::from(\"d\"), Level::Deny),\n     ];\n \n-    assert_different_hash(&v1, &v2);\n-    assert_different_hash(&v1, &v3);\n-    assert_different_hash(&v2, &v3);\n+    assert_non_crate_hash_different(&v1, &v2);\n+    assert_non_crate_hash_different(&v1, &v3);\n+    assert_non_crate_hash_different(&v2, &v3);\n }\n \n #[test]\n@@ -261,7 +261,21 @@ fn test_lints_tracking_hash_different_construction_order() {\n     ];\n \n     // The hash should be order-dependent\n-    assert_different_hash(&v1, &v2);\n+    assert_non_crate_hash_different(&v1, &v2);\n+}\n+\n+#[test]\n+fn test_lint_cap_hash_different() {\n+    let mut v1 = Options::default();\n+    let mut v2 = Options::default();\n+    let v3 = Options::default();\n+\n+    v1.lint_cap = Some(Level::Forbid);\n+    v2.lint_cap = Some(Level::Allow);\n+\n+    assert_non_crate_hash_different(&v1, &v2);\n+    assert_non_crate_hash_different(&v1, &v3);\n+    assert_non_crate_hash_different(&v2, &v3);\n }\n \n #[test]"}, {"sha": "8e2e33f2d51508d51aed04554ad64d8837009754", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -133,9 +133,9 @@ top_level_options!(\n         /// can influence whether overflow checks are done or not.\n         debug_assertions: bool [TRACKED],\n         debuginfo: DebugInfo [TRACKED],\n-        lint_opts: Vec<(String, lint::Level)> [TRACKED],\n-        lint_cap: Option<lint::Level> [TRACKED],\n-        force_warns: Vec<String> [TRACKED],\n+        lint_opts: Vec<(String, lint::Level)> [TRACKED_NO_CRATE_HASH],\n+        lint_cap: Option<lint::Level> [TRACKED_NO_CRATE_HASH],\n+        force_warns: Vec<String> [TRACKED_NO_CRATE_HASH],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],"}, {"sha": "39874f48eb014071aa5d279b5e3cf48bba7dc5e6", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -1528,20 +1528,11 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n     ) {\n         debug!(\n-            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n+            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?})\",\n+            place_with_id, diag_expr_id\n         );\n-\n-        // Copy type being used as ByValue are equivalent to ImmBorrow and don't require any\n-        // escalation.\n-        match mode {\n-            euv::ConsumeMode::Copy => return,\n-            euv::ConsumeMode::Move => {}\n-        };\n-\n         let tcx = self.fcx.tcx;\n         let upvar_id = if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n             upvar_id\n@@ -1716,22 +1707,14 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         }\n     }\n \n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n-    ) {\n-        debug!(\n-            \"consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n-        );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        debug!(\"consume(place_with_id={:?}, diag_expr_id={:?})\", place_with_id, diag_expr_id);\n \n         if !self.capture_information.contains_key(&place_with_id.place) {\n             self.init_capture_info_for_place(&place_with_id, diag_expr_id);\n         }\n \n-        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id, mode);\n+        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id);\n     }\n \n     fn borrow("}, {"sha": "806f1a2711c012b9d52d7830d5d40efd755a5b7a", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -2,8 +2,6 @@\n //! normal visitor, which just walks the entire body in one shot, the\n //! `ExprUseVisitor` determines how expressions are being used.\n \n-pub use self::ConsumeMode::*;\n-\n // Export these here so that Clippy can use them.\n pub use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection};\n \n@@ -28,19 +26,20 @@ use crate::mem_categorization as mc;\n /// This trait defines the callbacks you can expect to receive when\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n-    // The value found at `place` is either copied or moved, depending\n+    // The value found at `place` is moved, depending\n     // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n     //\n+    // Use of a `Copy` type in a ByValue context is considered a use\n+    // by `ImmBorrow` and `borrow` is called instead. This is because\n+    // a shared borrow is the \"minimum access\" that would be needed\n+    // to perform a copy.\n+    //\n+    //\n     // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n     // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n     // id will be the id of the expression `expr` but the place itself will have\n     // the id of the binding in the pattern `pat`.\n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: ConsumeMode,\n-    );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n     // The value found at `place` is being borrowed with kind `bk`.\n     // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n@@ -60,7 +59,7 @@ pub trait Delegate<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum ConsumeMode {\n+enum ConsumeMode {\n     Copy, // reference to x where x has a type that copies\n     Move, // reference to x where x has a type that moves\n }\n@@ -141,10 +140,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn delegate_consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n-\n-        let mode = copy_or_move(&self.mc, place_with_id);\n-        self.delegate.consume(place_with_id, diag_expr_id, mode);\n+        delegate_consume(&self.mc, self.delegate, place_with_id, diag_expr_id)\n     }\n \n     fn consume_exprs(&mut self, exprs: &[hir::Expr<'_>]) {\n@@ -256,12 +252,16 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             | PatKind::Path(..)\n                             | PatKind::Struct(..)\n                             | PatKind::Tuple(..) => {\n-                                // If the PatKind is a TupleStruct, Struct or Tuple then we want to check\n+                                // If the PatKind is a TupleStruct, Path, Struct or Tuple then we want to check\n                                 // whether the Variant is a MultiVariant or a SingleVariant. We only want\n                                 // to borrow discr if it is a MultiVariant.\n                                 // If it is a SingleVariant and creates a binding we will handle that when\n                                 // this callback gets called again.\n-                                if let ty::Adt(def, _) = place.place.base_ty.kind() {\n+\n+                                // Get the type of the Place after all projections have been applied\n+                                let place_ty = place.place.ty();\n+\n+                                if let ty::Adt(def, _) = place_ty.kind() {\n                                     if def.variants.len() > 1 {\n                                         needs_to_be_read = true;\n                                     }\n@@ -653,9 +653,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             delegate.borrow(place, discr_place.hir_id, bk);\n                         }\n                         ty::BindByValue(..) => {\n-                            let mode = copy_or_move(mc, &place);\n                             debug!(\"walk_pat binding consuming pat\");\n-                            delegate.consume(place, discr_place.hir_id, mode);\n+                            delegate_consume(mc, *delegate, place, discr_place.hir_id);\n                         }\n                     }\n                 }\n@@ -773,8 +772,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n                     match capture_info.capture_kind {\n                         ty::UpvarCapture::ByValue(_) => {\n-                            let mode = copy_or_move(&self.mc, &place_with_id);\n-                            self.delegate.consume(&place_with_id, place_with_id.hir_id, mode);\n+                            self.delegate_consume(&place_with_id, place_with_id.hir_id);\n                         }\n                         ty::UpvarCapture::ByRef(upvar_borrow) => {\n                             self.delegate.borrow(\n@@ -798,8 +796,28 @@ fn copy_or_move<'a, 'tcx>(\n         place_with_id.place.ty(),\n         mc.tcx().hir().span(place_with_id.hir_id),\n     ) {\n-        Move\n+        ConsumeMode::Move\n     } else {\n-        Copy\n+        ConsumeMode::Copy\n+    }\n+}\n+\n+// - If a place is used in a `ByValue` context then move it if it's not a `Copy` type.\n+// - If the place that is a `Copy` type consider it a `ImmBorrow`.\n+fn delegate_consume<'a, 'tcx>(\n+    mc: &mc::MemCategorizationContext<'a, 'tcx>,\n+    delegate: &mut (dyn Delegate<'tcx> + 'a),\n+    place_with_id: &PlaceWithHirId<'tcx>,\n+    diag_expr_id: hir::HirId,\n+) {\n+    debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n+\n+    let mode = copy_or_move(&mc, place_with_id);\n+\n+    match mode {\n+        ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n+        ConsumeMode::Copy => {\n+            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+        }\n     }\n }"}, {"sha": "b9387ef49e5fb211ab343869a8a534c3c262f487", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -30,7 +30,7 @@ pub trait Step: Clone + PartialOrd + Sized {\n     /// For any `a`, `b`, and `n`:\n     ///\n     /// * `steps_between(&a, &b) == Some(n)` if and only if `Step::forward_checked(&a, n) == Some(b)`\n-    /// * `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&a, n) == Some(a)`\n+    /// * `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&b, n) == Some(a)`\n     /// * `steps_between(&a, &b) == Some(n)` only if `a <= b`\n     ///   * Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\n     ///   * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;"}, {"sha": "558536fa613a5abae81809ef20ead310cb1850e8", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -1,8 +1,8 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n   <Type Name=\"str\">\n-    <DisplayString>{data_ptr,[length]s8}</DisplayString>\n-    <StringView>data_ptr,[length]s8</StringView>\n+    <DisplayString>{(char*)data_ptr,[length]s8}</DisplayString>\n+    <StringView>(char*)data_ptr,[length]s8</StringView>\n     <Expand>\n       <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>\n       <Synthetic Name=\"[chars]\">"}, {"sha": "d001f40fccbc7d573c526511f5772f162bc2403e", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -48,6 +48,7 @@\n       <Item Name=\"[len]\" ExcludeView=\"simple\">vec.len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n       <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)vec.buf.ptr.pointer,[vec.len]s8}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>vec.len</Size>\n@@ -57,22 +58,38 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"alloc::rc::Rc&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->value}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n+  <Type Name=\"alloc::rc::Weak&lt;*&gt;\">\n+    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n   <Type Name=\"alloc::sync::Arc&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->data}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::sync::Weak&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->data}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::borrow::Cow&lt;*&gt;\">"}, {"sha": "fa8ee2d70bbab4a775a38ca7e401639b4f74b564", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 149, "deletions": 9, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -1,23 +1,163 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-  <Type Name=\"core::ptr::Unique&lt;*&gt;\">\n-    <DisplayString>{{ Unique {pointer} }}</DisplayString>\n+  <Type Name=\"core::cell::Cell&lt;*&gt;\">\n+    <DisplayString>{value.value}</DisplayString>\n     <Expand>\n-      <Item Name=\"[ptr]\">pointer</Item>\n+      <ExpandedItem>value.value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::Ref&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::RefMut&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::RefCell&lt;*&gt;\">\n+    <DisplayString>{value.value}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value == 0\">\"Unborrowed\",sb</Item>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value &gt; 0\">\"Immutably borrowed\",sb</Item>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value &lt; 0\">\"Mutably borrowed\",sb</Item>\n+      <ExpandedItem>value.value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::UnsafeCell&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n     </Expand>\n   </Type>\n \n-  <Type Name=\"core::ptr::Shared&lt;*&gt;\">\n-    <DisplayString>{{ Shared {pointer} }}</DisplayString>\n+  <Type Name=\"core::mem::manually_drop::ManuallyDrop&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n     <Expand>\n-      <Item Name=\"[ptr]\">pointer</Item>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::num::nonzero::NonZeroI8\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI16\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI32\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI64\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI128\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroIsize\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU8\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU16\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU32\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU64\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU128\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroUsize\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::num::wrapping::Wrapping&lt;*&gt;\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::ops::range::Range&lt;*&gt;\">\n+    <DisplayString>({start}..{end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeFrom&lt;*&gt;\">\n+    <DisplayString>({start}..)</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeInclusive&lt;*&gt;\">\n+    <DisplayString>({start}..={end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeTo&lt;*&gt;\">\n+    <DisplayString>(..{end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeToInclusive&lt;*&gt;\">\n+    <DisplayString>(..={end})</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::pin::Pin&lt;*&gt;\">\n+    <DisplayString>Pin({(void*)pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n     </Expand>\n   </Type>\n \n   <Type Name=\"core::ptr::non_null::NonNull&lt;*&gt;\">\n-    <DisplayString>{(void*) pointer}</DisplayString>\n+    <DisplayString>NonNull({(void*) pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::ptr::unique::Unique&lt;*&gt;\">\n+    <DisplayString>Unique({(void*)pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::sync::atomic::AtomicBool\">\n+    <DisplayString>{(bool)v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicIsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+    <Type Name=\"core::sync::atomic::AtomicU8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicUsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::time::Duration\">\n+    <DisplayString>{secs,d}s {nanos,d}ns</DisplayString>\n     <Expand>\n-      <Item Name=\"[value]\">*pointer</Item>\n+      <Item Name=\"seconds\">secs,d</Item>\n+      <Item Name=\"nanoseconds\">nanos,d</Item>\n     </Expand>\n   </Type>\n-</AutoVisualizer>\n\\ No newline at end of file\n+</AutoVisualizer>"}, {"sha": "c7be0167de9fdb8233f84cb35333688c3e0e36de", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -74,9 +74,10 @@\n   </Type>\n \n   <Type Name=\"std::ffi::c_str::CString\">\n-    <DisplayString>{inner.data_ptr,s}</DisplayString>\n+    <DisplayString>{(char*)inner.data_ptr}</DisplayString>\n     <Expand>\n       <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)inner.data_ptr}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>inner.length</Size>\n@@ -101,4 +102,19 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n+\n+  <Type Name=\"std::ffi::os_str::OsString\">\n+    <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+    <Expand>\n+      <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+        <Expand>\n+          <ArrayItems>\n+            <Size>inner.inner.bytes.len</Size>\n+            <ValuePointer>(char*)inner.inner.bytes.buf.ptr.pointer</ValuePointer>\n+          </ArrayItems>\n+        </Expand>\n+      </Synthetic>\n+    </Expand>\n+  </Type>\n </AutoVisualizer>"}, {"sha": "89dbc4d825f3d785b1085e67ee22a9a6cfa4e82c", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -247,6 +247,9 @@ code, pre, a.test-arrow {\n pre {\n \tpadding: 14px;\n }\n+.type-decl pre {\n+\toverflow-x: auto;\n+}\n \n .source .content pre {\n \tpadding: 20px;\n@@ -1631,15 +1634,18 @@ details.undocumented[open] > summary::before {\n \t\tdisplay: none;\n \t}\n \n+\t/* We do NOT hide this element so that alternative device readers still have this information\n+\t   available. */\n \t.sidebar-elems {\n \t\tposition: fixed;\n \t\tz-index: 1;\n-\t\tleft: 0;\n \t\ttop: 45px;\n \t\tbottom: 0;\n+\t\twidth: 246px;\n+\t\t/* We move the sidebar to the left by its own width so it doesn't appear. */\n+\t\tleft: -246px;\n \t\toverflow-y: auto;\n \t\tborder-right: 1px solid;\n-\t\tdisplay: none;\n \t}\n \n \t.sidebar > .block.version {\n@@ -1727,8 +1733,7 @@ details.undocumented[open] > summary::before {\n \t}\n \n \t.show-it {\n-\t\tdisplay: block;\n-\t\twidth: 246px;\n+\t\tleft: 0;\n \t}\n \n \t.show-it > .block.items {"}, {"sha": "bc0266d644ec15a380ff7420b87ea6a97890ab34", "filename": "src/test/debuginfo/duration-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fduration-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fduration-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fduration-type.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,22 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx duration\n+// cdb-check:duration         : 5s 12ns [Type: core::time::Duration]\n+// cdb-check:    [<Raw View>]     [Type: core::time::Duration]\n+// cdb-check:    seconds          : 5 [Type: unsigned __int64]\n+// cdb-check:    nanoseconds      : 12 [Type: unsigned int]\n+\n+use std::time::Duration;\n+\n+fn main() {\n+    let duration = Duration::new(5, 12);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "8373d7856bb376a5093cdfa9ef32d37dfd8b2d93", "filename": "src/test/debuginfo/marker-types.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,49 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx nonnull\n+// cdb-check:nonnull          : NonNull(0x[...]: 0xc) [Type: core::ptr::non_null::NonNull<u32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ptr::non_null::NonNull<u32>]\n+// cdb-check:    0xc [Type: unsigned int]\n+\n+// cdb-command: dx manuallydrop\n+// cdb-check:manuallydrop     : 12345 [Type: core::mem::manually_drop::ManuallyDrop<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::mem::manually_drop::ManuallyDrop<i32>]\n+\n+// cdb-command: dx pin\n+// cdb-check:pin              : Pin(0x[...]: \"this\") [Type: core::pin::Pin<ref_mut$<alloc::string::String> >]\n+// cdb-check:    [<Raw View>]     [Type: core::pin::Pin<ref_mut$<alloc::string::String> >]\n+// cdb-check:    [len]            : 0x4 [Type: unsigned [...]]\n+// cdb-check:    [capacity]       : 0x4 [Type: unsigned [...]]\n+// cdb-check:    [chars]          : \"this\"\n+\n+// cdb-command: dx unique\n+// cdb-check:unique           : Unique(0x[...]: (0x2a, 4321)) [Type: core::ptr::unique::Unique<tuple$<u64,i32> >]\n+// cdb-check:    [<Raw View>]     [Type: core::ptr::unique::Unique<tuple$<u64,i32> >]\n+// cdb-check:    [0]              : 0x2a [Type: unsigned __int64]\n+// cdb-check:    [1]              : 4321 [Type: int]\n+\n+#![feature(ptr_internals)]\n+\n+use std::mem::ManuallyDrop;\n+use std::pin::Pin;\n+use std::ptr::{NonNull, Unique};\n+\n+fn main() {\n+    let nonnull: NonNull<_> = (&12u32).into();\n+\n+    let manuallydrop = ManuallyDrop::new(12345i32);\n+\n+    let mut s = \"this\".to_string();\n+    let pin = Pin::new(&mut s);\n+\n+    let unique: Unique<_> = (&mut (42u64, 4321i32)).into();\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "688483e43e4dbdbf6e0e90895bce185fc90bcc66", "filename": "src/test/debuginfo/mutable-locs.rs", "status": "modified", "additions": 65, "deletions": 12, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -9,26 +9,64 @@\n // cdb-command: g\n \n // cdb-command:dx static_c,d\n-// cdb-check:static_c,d       [Type: core::cell::Cell<i32>]\n-// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:static_c,d       : 10 [Type: core::cell::Cell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::Cell<i32>]\n \n // cdb-command: dx static_c.value,d\n-// cdb-check:static_c.value,d [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 10 [Type: int]\n+// cdb-check:static_c.value,d : 10 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n // cdb-command:  dx dynamic_c,d\n-// cdb-check:dynamic_c,d      [Type: core::cell::RefCell<i32>]\n-// cdb-check:    [...] borrow           [Type: core::cell::Cell<isize>]\n-// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n \n // cdb-command: dx dynamic_c.value,d\n-// cdb-check:dynamic_c.value,d [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 15 [Type: int]\n+// cdb-check:dynamic_c.value,d : 15 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n // cdb-command: dx b,d\n-// cdb-check:b,d              [Type: core::cell::RefMut<i32>]\n-// cdb-check:    [...] value            : [...] : 42 [Type: int *]\n-// cdb-check:    [...] borrow           [Type: core::cell::BorrowRefMut]\n+// cdb-check:b,d              : 42 [Type: core::cell::RefMut<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefMut<i32>]\n+// cdb-check:    42 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Immutably borrowed\n+\n+// cdb-command: dx r_borrow,d\n+// cdb-check:r_borrow,d       : 15 [Type: core::cell::Ref<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::Ref<i32>]\n+// cdb-check:    15 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Mutably borrowed\n+\n+// cdb-command: dx r_borrow_mut,d\n+// cdb-check:r_borrow_mut,d   : 15 [Type: core::cell::RefMut<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefMut<i32>]\n+// cdb-check:    15 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n \n #![allow(unused_variables)]\n \n@@ -46,6 +84,21 @@ fn main() {\n     *b = 42;\n \n     zzz(); // #break\n+\n+    // Check that `RefCell`'s borrow state visualizes correctly\n+    {\n+        let r_borrow = dynamic_c.borrow();\n+        zzz(); // #break\n+    }\n+\n+    zzz(); // #break\n+\n+    {\n+        let r_borrow_mut = dynamic_c.borrow_mut();\n+        zzz(); // #break\n+    }\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "2eae9239b6118018d0a504441d9b8f704f4a4dd7", "filename": "src/test/debuginfo/numeric-types.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,206 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// Tests the visualizations for `NonZero{I,U}{8,16,32,64,128,size}`, `Wrapping<T>` and\n+// `Atomic{Bool,I8,I16,I32,I64,Isize,U8,U16,U32,U64,Usize}` located in `libcore.natvis`.\n+\n+// === CDB TESTS ==================================================================================\n+// cdb-command: g\n+\n+// cdb-command: dx nz_i8\n+// cdb-check:nz_i8            : 11 [Type: core::num::nonzero::NonZeroI8]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI8]\n+\n+// cdb-command: dx nz_i16\n+// cdb-check:nz_i16           : 22 [Type: core::num::nonzero::NonZeroI16]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI16]\n+\n+// cdb-command: dx nz_i32\n+// cdb-check:nz_i32           : 33 [Type: core::num::nonzero::NonZeroI32]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI32]\n+\n+// cdb-command: dx nz_i64\n+// cdb-check:nz_i64           : 44 [Type: core::num::nonzero::NonZeroI64]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI64]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx nz_i128\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI128]\n+\n+// cdb-command: dx nz_isize\n+// cdb-check:nz_isize         : 66 [Type: core::num::nonzero::NonZeroIsize]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroIsize]\n+\n+// cdb-command: dx nz_u8\n+// cdb-check:nz_u8            : 0x4d [Type: core::num::nonzero::NonZeroU8]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU8]\n+\n+// cdb-command: dx nz_u16\n+// cdb-check:nz_u16           : 0x58 [Type: core::num::nonzero::NonZeroU16]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU16]\n+\n+// cdb-command: dx nz_u32\n+// cdb-check:nz_u32           : 0x63 [Type: core::num::nonzero::NonZeroU32]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU32]\n+\n+// cdb-command: dx nz_u64\n+// cdb-check:nz_u64           : 0x64 [Type: core::num::nonzero::NonZeroU64]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU64]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx nz_u128\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU128]\n+\n+// cdb-command: dx nz_usize\n+// cdb-check:nz_usize         : 0x7a [Type: core::num::nonzero::NonZeroUsize]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroUsize]\n+\n+// cdb-command: dx w_i8\n+// cdb-check:w_i8             : 10 [Type: core::num::wrapping::Wrapping<i8>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i8>]\n+\n+// cdb-command: dx w_i16\n+// cdb-check:w_i16            : 20 [Type: core::num::wrapping::Wrapping<i16>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i16>]\n+\n+// cdb-command: dx w_i32\n+// cdb-check:w_i32            : 30 [Type: core::num::wrapping::Wrapping<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i32>]\n+\n+// cdb-command: dx w_i64\n+// cdb-check:w_i64            : 40 [Type: core::num::wrapping::Wrapping<i64>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i64>]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx w_i128\n+// cdb-check:w_i128           [Type: core::num::wrapping::Wrapping<i128>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i128>]\n+\n+// cdb-command: dx w_isize\n+// cdb-check:w_isize          : 60 [Type: core::num::wrapping::Wrapping<isize>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<isize>]\n+\n+// cdb-command: dx w_u8\n+// cdb-check:w_u8             : 0x46 [Type: core::num::wrapping::Wrapping<u8>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u8>]\n+\n+// cdb-command: dx w_u16\n+// cdb-check:w_u16            : 0x50 [Type: core::num::wrapping::Wrapping<u16>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u16>]\n+\n+// cdb-command: dx w_u32\n+// cdb-check:w_u32            : 0x5a [Type: core::num::wrapping::Wrapping<u32>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u32>]\n+\n+// cdb-command: dx w_u64\n+// cdb-check:w_u64            : 0x64 [Type: core::num::wrapping::Wrapping<u64>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u64>]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx w_u128\n+// cdb-check:w_u128           [Type: core::num::wrapping::Wrapping<u128>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u128>]\n+\n+// cdb-command: dx w_usize\n+// cdb-check:w_usize          : 0x78 [Type: core::num::wrapping::Wrapping<usize>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<usize>]\n+\n+// cdb-command: dx a_bool_t\n+// cdb-check:a_bool_t         : true [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_bool_f\n+// cdb-check:a_bool_f         : false [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_i8\n+// cdb-check:a_i8             : 2 [Type: core::sync::atomic::AtomicI8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI8]\n+\n+// cdb-command: dx a_i16\n+// cdb-check:a_i16            : 4 [Type: core::sync::atomic::AtomicI16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI16]\n+\n+// cdb-command: dx a_i32\n+// cdb-check:a_i32            : 8 [Type: core::sync::atomic::AtomicI32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI32]\n+\n+// cdb-command: dx a_i64\n+// cdb-check:a_i64            : 16 [Type: core::sync::atomic::AtomicI64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI64]\n+\n+// cdb-command: dx a_isize\n+// cdb-check:a_isize          : 32 [Type: core::sync::atomic::AtomicIsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicIsize]\n+\n+// cdb-command: dx a_u8\n+// cdb-check:a_u8             : 0x40 [Type: core::sync::atomic::AtomicU8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU8]\n+\n+// cdb-command: dx a_u16\n+// cdb-check:a_u16            : 0x80 [Type: core::sync::atomic::AtomicU16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU16]\n+\n+// cdb-command: dx a_u32\n+// cdb-check:a_u32            : 0x100 [Type: core::sync::atomic::AtomicU32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU32]\n+\n+// cdb-command: dx a_u64\n+// cdb-check:a_u64            : 0x200 [Type: core::sync::atomic::AtomicU64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU64]\n+\n+// cdb-command: dx a_usize\n+// cdb-check:a_usize          : 0x400 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicUsize]\n+\n+use std::num::*;\n+use std::sync::atomic::*;\n+\n+fn main() {\n+    let nz_i8 = NonZeroI8::new(11).unwrap();\n+    let nz_i16 = NonZeroI16::new(22).unwrap();\n+    let nz_i32 = NonZeroI32::new(33).unwrap();\n+    let nz_i64 = NonZeroI64::new(44).unwrap();\n+    let nz_i128 = NonZeroI128::new(55).unwrap();\n+    let nz_isize = NonZeroIsize::new(66).unwrap();\n+\n+    let nz_u8 = NonZeroU8::new(77).unwrap();\n+    let nz_u16 = NonZeroU16::new(88).unwrap();\n+    let nz_u32 = NonZeroU32::new(99).unwrap();\n+    let nz_u64 = NonZeroU64::new(100).unwrap();\n+    let nz_u128 = NonZeroU128::new(111).unwrap();\n+    let nz_usize = NonZeroUsize::new(122).unwrap();\n+\n+    let w_i8 = Wrapping(10i8);\n+    let w_i16 = Wrapping(20i16);\n+    let w_i32 = Wrapping(30i32);\n+    let w_i64 = Wrapping(40i64);\n+    let w_i128 = Wrapping(50i128);\n+    let w_isize = Wrapping(60isize);\n+\n+    let w_u8 = Wrapping(70u8);\n+    let w_u16 = Wrapping(80u16);\n+    let w_u32 = Wrapping(90u32);\n+    let w_u64 = Wrapping(100u64);\n+    let w_u128 = Wrapping(110u128);\n+    let w_usize = Wrapping(120usize);\n+\n+    let a_bool_t = AtomicBool::new(true);\n+    let a_bool_f = AtomicBool::new(false);\n+\n+    let a_i8 = AtomicI8::new(2);\n+    let a_i16 = AtomicI16::new(4);\n+    let a_i32 = AtomicI32::new(8);\n+    let a_i64 = AtomicI64::new(16);\n+    let a_isize = AtomicIsize::new(32);\n+\n+    let a_u8 = AtomicU8::new(64);\n+    let a_u16 = AtomicU16::new(128);\n+    let a_u32 = AtomicU32::new(256);\n+    let a_u64 = AtomicU64::new(512);\n+    let a_usize = AtomicUsize::new(1024);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "d5a6e148b7a66e8b30348bdf687f6935869a18c2", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -111,8 +111,9 @@\n // cdb-check:    [11]             : 33 '!' [Type: char]\n \n // cdb-command: dx os_string\n-// cdb-check:os_string        [Type: [...]::OsString]\n-// NOTE: OsString doesn't have a .natvis entry yet.\n+// cdb-check:os_string        : \"IAMA OS string \ud83d\ude03\" [Type: std::ffi::os_str::OsString]\n+// cdb-check:    [<Raw View>]     [Type: std::ffi::os_str::OsString]\n+// cdb-check:    [chars]          : \"IAMA OS string \ud83d\ude03\"\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n@@ -129,10 +130,24 @@\n // NOTE: cdb fails to interpret debug info of Option enums on i686.\n // cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n \n+// cdb-command: dx linkedlist\n+// cdb-check:linkedlist       : { len=0x2 } [Type: alloc::collections::linked_list::LinkedList<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::collections::linked_list::LinkedList<i32>]\n+// cdb-check:    [0x0]            : 128 [Type: int]\n+// cdb-check:    [0x1]            : 42 [Type: int]\n+\n+// cdb-command: dx vecdeque\n+// cdb-check:vecdeque         : { len=0x2 } [Type: alloc::collections::vec_deque::VecDeque<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::collections::vec_deque::VecDeque<i32>]\n+// cdb-check:    [len]            : 0x2\n+// cdb-check:    [capacity]       : 0x8 [Type: unsigned [...]]\n+// cdb-check:    [0x0]            : 90 [Type: int]\n+// cdb-check:    [0x1]            : 20 [Type: int]\n+\n #![allow(unused_variables)]\n+use std::collections::{LinkedList, VecDeque};\n use std::ffi::OsString;\n \n-\n fn main() {\n \n     // &[]\n@@ -156,6 +171,16 @@ fn main() {\n \n     let some_string = Some(\"IAMA optional string!\".to_owned());\n \n+    // LinkedList\n+    let mut linkedlist = LinkedList::new();\n+    linkedlist.push_back(42);\n+    linkedlist.push_front(128);\n+\n+    // VecDeque\n+    let mut vecdeque = VecDeque::new();\n+    vecdeque.push_back(20);\n+    vecdeque.push_front(90);\n+\n     zzz(); // #break\n }\n "}, {"sha": "7362a50a0301510e79e706103f11a7d76a130b68", "filename": "src/test/debuginfo/range-types.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frange-types.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -9,38 +9,40 @@\n // cdb-command: g\n \n // cdb-command: dx r1,d\n-// cdb-check:r1,d             [Type: core::ops::range::Range<i32>]\n-// cdb-check:    [...] start            : 3 [Type: int]\n-// cdb-check:    [...] end              : 5 [Type: int]\n+// cdb-check:r1,d             : (3..5) [Type: core::ops::range::Range<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::Range<i32>]\n \n // cdb-command: dx r2,d\n-// cdb-check:r2,d             [Type: core::ops::range::RangeFrom<i32>]\n-// cdb-check:    [...] start            : 2 [Type: int]\n+// cdb-check:r2,d             : (2..) [Type: core::ops::range::RangeFrom<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeFrom<i32>]\n \n // cdb-command: dx r3,d\n-// cdb-check:r3,d             [Type: core::ops::range::RangeInclusive<i32>]\n-// cdb-check:    [...] start            : 1 [Type: int]\n-// cdb-check:    [...] end              : 4 [Type: int]\n-// cdb-check:    [...] exhausted        : false [Type: bool]\n+// cdb-check:r3,d             : (1..=4) [Type: core::ops::range::RangeInclusive<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeInclusive<i32>]\n \n // cdb-command: dx r4,d\n-// cdb-check:r4,d             [Type: core::ops::range::RangeToInclusive<i32>]\n-// cdb-check:    [...] end              : 3 [Type: int]\n+// cdb-check:r4,d             : (..10) [Type: core::ops::range::RangeTo<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeTo<i32>]\n \n // cdb-command: dx r5,d\n-// cdb-check:r5,d             [Type: core::ops::range::RangeFull]\n+// cdb-check:r5,d             : (..=3) [Type: core::ops::range::RangeToInclusive<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeToInclusive<i32>]\n+\n+// cdb-command: dx r6,d\n+// cdb-check:r6,d             [Type: core::ops::range::RangeFull]\n \n #[allow(unused_variables)]\n \n use std::ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeToInclusive};\n \n fn main()\n {\n-    let r1 = Range{start: 3, end: 5};\n-    let r2 = RangeFrom{start: 2};\n-    let r3 = RangeInclusive::new(1, 4);\n-    let r4 = RangeToInclusive{end: 3};\n-    let r5 = RangeFull{};\n+    let r1 = (3..5);\n+    let r2 = (2..);\n+    let r3 = (1..=4);\n+    let r4 = (..10);\n+    let r5 = (..=3);\n+    let r6 = (..);\n     zzz(); // #break\n }\n "}, {"sha": "55cddf7c6c6b4d762231e39b34578098fcddee20", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -29,22 +29,39 @@\n \n // cdb-command:dx r,d\n // cdb-check:r,d              : 42 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx r1,d\n // cdb-check:r1,d             : 42 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx w1,d\n-// cdb-check:w1,d             [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [...] ptr              : [...] [Type: core::ptr::non_null::NonNull<alloc::rc::RcBox<i32> >]\n+// cdb-check:w1,d             : 42 [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx a,d\n // cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n // cdb-command:dx a1,d\n // cdb-check:a1,d             : 42 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n // cdb-command:dx w2,d\n // cdb-check:w2,d             : 42 [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "e1c10a4d37fc317bfa6c3c9b4418d9dab6f38e88", "filename": "src/test/debuginfo/rwlock-read.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -11,15 +11,15 @@\n // cdb-command:dx l\n // cdb-check:l                [Type: std::sync::rwlock::RwLock<i32>]\n // cdb-check:    [...] poison           [Type: std::sync::poison::Flag]\n-// cdb-check:    [...] data             [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] data             : 0 [Type: core::cell::UnsafeCell<i32>]\n //\n // cdb-command:dx r\n // cdb-check:r                [Type: std::sync::rwlock::RwLockReadGuard<i32>]\n // cdb-check:    [...] lock             : [...] [Type: std::sync::rwlock::RwLock<i32> *]\n //\n // cdb-command:dx r.lock->data,d\n-// cdb-check:r.lock->data,d   [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 0 [Type: int]\n+// cdb-check:r.lock->data,d   : 0 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n #[allow(unused_variables)]\n "}, {"sha": "9a1442e48a9ea44c4ba7af11debb92b589050257", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,10 @@\n+// This test ensure that the sidebar isn't \"hidden\" on mobile but instead moved out of the viewport.\n+// This is especially important for devices for \"text-first\" content (like for users with\n+// sight issues).\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+// Switching to \"mobile view\" by reducing the width to 600px.\n+size: (600, 600)\n+assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+// Opening the sidebar menu.\n+click: \".sidebar-menu\"\n+assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})"}, {"sha": "0466909479b67966b71a11ba86a3aebc042f1706", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -47,3 +47,10 @@ pub mod sub_mod {\n     /// ```\n     pub struct Foo;\n }\n+\n+pub mod long_trait {\n+    use std::ops::DerefMut;\n+\n+    pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem: DerefMut<Target = u32>\n+        + From<u128> + Send + Sync + AsRef<str> + 'static {}\n+}"}, {"sha": "0a316e220a42ce82fcab9b91af5f03d1357c892e", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,8 @@\n+// This test ensures that the type declaration content overflow is handled inside the <pre> directly.\n+goto: file://|DOC_PATH|/lib2/long_trait/trait.ALongNameBecauseItHelpsTestingTheCurrentProblem.html\n+// We set a fixed size so there is no chance of \"random\" resize.\n+size: (1100, 800)\n+// Logically, the <body> scroll width should be the width of the window.\n+assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n+// However, since there is overflow in the type declaration, its scroll width is bigger.\n+assert-property: (\".type-decl pre\", {\"scrollWidth\": \"1324\"})"}, {"sha": "241ddcb83e10989379c98b10db23ec1efa92f899", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87097.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+// edition:2021\n+\n+enum Variant {\n+    A,\n+    B, //~ WARNING: variant is never constructed: `B`\n+}\n+\n+struct A {\n+    field: Variant,\n+}\n+\n+fn discriminant_is_a_ref() {\n+    let here = A { field: Variant::A };\n+    let out_ref = &here.field;\n+\n+    || match out_ref { //~ WARNING: unused closure that must be used\n+        Variant::A => (),\n+        Variant::B => (),\n+    };\n+}\n+\n+fn discriminant_is_a_field() {\n+    let here = A { field: Variant::A };\n+\n+    || match here.field { //~ WARNING: unused closure that must be used\n+        Variant::A => (),\n+        Variant::B => (),\n+    };\n+}\n+\n+fn main() {\n+    discriminant_is_a_ref();\n+    discriminant_is_a_field();\n+}"}, {"sha": "38f2929a05f2dd2de5786a9ac14b2d072ca1aa2d", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87097.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87097.stderr?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -0,0 +1,33 @@\n+warning: variant is never constructed: `B`\n+  --> $DIR/issue-87097.rs:6:5\n+   |\n+LL |     B,\n+   |     ^\n+   |\n+   = note: `#[warn(dead_code)]` on by default\n+\n+warning: unused closure that must be used\n+  --> $DIR/issue-87097.rs:17:5\n+   |\n+LL | /     || match out_ref {\n+LL | |         Variant::A => (),\n+LL | |         Variant::B => (),\n+LL | |     };\n+   | |______^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+   = note: closures are lazy and do nothing unless called\n+\n+warning: unused closure that must be used\n+  --> $DIR/issue-87097.rs:26:5\n+   |\n+LL | /     || match here.field {\n+LL | |         Variant::A => (),\n+LL | |         Variant::B => (),\n+LL | |     };\n+   | |______^\n+   |\n+   = note: closures are lazy and do nothing unless called\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "0e7abf64fab068cacc48300a876c8e61d9c2c08a", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -195,6 +195,21 @@ fn box_mut_2() {\n     //~| NOTE: Min Capture p_foo[Deref,Deref,(0, 0)] -> UniqueImmBorrow\n }\n \n+// Test that move closures can take ownership of Copy type\n+fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {\n+    let x = 10;\n+\n+    let c = #[rustc_capture_analysis] move || x;\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    //~| First Pass analysis includes:\n+    //~| NOTE: Capturing x[] -> ImmBorrow\n+    //~| Min Capture analysis includes:\n+    //~| NOTE: Min Capture x[] -> ByValue\n+\n+    c\n+}\n+\n fn main() {\n     simple_move_closure();\n     simple_ref();"}, {"sha": "82ed99f9444d32243ab26af32c74d853ecd94084", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -88,6 +88,39 @@ LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:202:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:202:39\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                       ^^^^^^^^^\n+   |\n+note: Capturing x[] -> ImmBorrow\n+  --> $DIR/move_closure.rs:202:47\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                               ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:202:39\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                       ^^^^^^^^^\n+   |\n+note: Min Capture x[] -> ByValue\n+  --> $DIR/move_closure.rs:202:47\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                               ^\n+\n error: First Pass analysis includes:\n   --> $DIR/move_closure.rs:15:5\n    |\n@@ -424,6 +457,6 @@ note: Min Capture p_foo[Deref,Deref,(0, 0)] -> UniqueImmBorrow\n LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;\n    |                                               ^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e1b61e85ec1927d18444a778bcb188820ce67bee", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -3,6 +3,8 @@\n \n // Test that move closures compile properly with `capture_disjoint_fields` enabled.\n \n+#![allow(unused)]\n+\n fn simple_ref() {\n     let mut s = 10;\n     let ref_s = &mut s;\n@@ -92,6 +94,15 @@ fn data_moved_but_not_fn_once() {\n     c();\n }\n \n+// Test that move closures can take ownership of Copy type\n+fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {\n+    let x = 10;\n+\n+    let c = move || x;\n+\n+    c\n+}\n+\n fn main() {\n     simple_ref();\n     struct_contains_ref_to_another_struct();\n@@ -100,4 +111,6 @@ fn main() {\n \n     disjoint_via_ref();\n     data_moved_but_not_fn_once();\n+\n+    returned_closure_owns_copy_type_data();\n }"}, {"sha": "5f400d079da2f1d7b5277e8450703003a6d2a0cc", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -11,7 +11,7 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -133,13 +133,10 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n-                if let ConsumeMode::Move = mode {\n-                    // moved out or in. clearly can't be localized\n-                    self.set.remove(&lid);\n-                }\n+                self.set.remove(&lid);\n                 let map = &self.cx.tcx.hir();\n                 if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n                     if self.set.contains(&lid) {"}, {"sha": "1e54a1e2de165e8781a4c581606d5da9cbf72efe", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if let Some(higher::Range {\n@@ -82,7 +82,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}, {"sha": "57fd03f4e12a68afd6fc8b322cd0b69cf7d599db", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -326,10 +326,8 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId, mode: euv::ConsumeMode) {\n-        if let euv::ConsumeMode::Move = mode {\n-            self.move_common(cmt);\n-        }\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId) {\n+        self.move_common(cmt);\n     }\n \n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}"}, {"sha": "ac885e9994404b605dd5b0d1c91df3cc45c6b970", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d92bd0173fb0436b93aa56ff2cb288d4717701/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=59d92bd0173fb0436b93aa56ff2cb288d4717701", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -67,7 +67,7 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}]}