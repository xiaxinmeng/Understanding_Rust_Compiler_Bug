{"sha": "eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWVjMzExNjg2YjZiNmQ4ZjhmZWE2Yzg2NDY4ZDdjZTZmYTNkMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T06:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T06:36:42Z"}, "message": "Auto merge of #82919 - bstrie:stabchar, r=dtolnay\n\nStabilize `assoc_char_funcs` and `assoc_char_consts`\n\nStabilizes the following associated items on `char`:\n\n* [`char::MAX`](https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX)\n* [`char::REPLACEMENT_CHARACTER`](https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER)\n* [`char::UNICODE_VERSION`](https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION)\n* [`char::decode_utf16`](https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16)\n* [`char::from_u32`](https://doc.rust-lang.org/std/primitive.char.html#method.from_u32)\n* [`char::from_u32_unchecked`](https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked)\n* [`char::from_digit`](https://doc.rust-lang.org/std/primitive.char.html#method.from_digit)\n\nCloses #71763.", "tree": {"sha": "6da21eebb048631a5026c65653dfed42db034481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da21eebb048631a5026c65653dfed42db034481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "html_url": "https://github.com/rust-lang/rust/commit/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd82e451a88ac8b15894af498cdc49e1fe8caa21", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd82e451a88ac8b15894af498cdc49e1fe8caa21", "html_url": "https://github.com/rust-lang/rust/commit/cd82e451a88ac8b15894af498cdc49e1fe8caa21"}, {"sha": "567f0e1a3967942e23d839313dc2d755f97fb81f", "url": "https://api.github.com/repos/rust-lang/rust/commits/567f0e1a3967942e23d839313dc2d755f97fb81f", "html_url": "https://github.com/rust-lang/rust/commit/567f0e1a3967942e23d839313dc2d755f97fb81f"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "6ddc38b0066875b2c7b58379402ae00d6a2d7ffe", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "patch": "@@ -25,7 +25,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(assert_matches)]\n-#![feature(assoc_char_funcs)]\n #![feature(backtrace)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "87a3d375a695113479534beb5514c98dbf9e6808", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=eb9ec311686b6b6d8f8fea6c86468d7ce6fa3d38", "patch": "@@ -18,15 +18,15 @@ impl char {\n     ///\n     /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n     /// [Code Point]: http://www.unicode.org/glossary/#code_point\n-    #[unstable(feature = \"assoc_char_consts\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const MAX: char = '\\u{10ffff}';\n \n     /// `U+FFFD REPLACEMENT CHARACTER` (\ufffd) is used in Unicode to represent a\n     /// decoding error.\n     ///\n     /// It can occur, for example, when giving ill-formed UTF-8 bytes to\n     /// [`String::from_utf8_lossy`](string/struct.String.html#method.from_utf8_lossy).\n-    #[unstable(feature = \"assoc_char_consts\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n \n     /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n@@ -39,7 +39,7 @@ impl char {\n     ///\n     /// The version numbering scheme is explained in\n     /// [Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard](https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4).\n-    #[unstable(feature = \"assoc_char_consts\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const UNICODE_VERSION: (u8, u8, u8) = crate::unicode::UNICODE_VERSION;\n \n     /// Creates an iterator over the UTF-16 encoded code points in `iter`,\n@@ -88,7 +88,7 @@ impl char {\n     ///     \"\ud834\udd1emus\ufffdic\ufffd\"\n     /// );\n     /// ```\n-    #[unstable(feature = \"assoc_char_funcs\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n     #[inline]\n     pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::IntoIter> {\n         super::decode::decode_utf16(iter)\n@@ -136,7 +136,7 @@ impl char {\n     ///\n     /// assert_eq!(None, c);\n     /// ```\n-    #[unstable(feature = \"assoc_char_funcs\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n     #[inline]\n     pub fn from_u32(i: u32) -> Option<char> {\n         super::convert::from_u32(i)\n@@ -177,7 +177,7 @@ impl char {\n     ///\n     /// assert_eq!('\u2764', c);\n     /// ```\n-    #[unstable(feature = \"assoc_char_funcs\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n     #[inline]\n     pub unsafe fn from_u32_unchecked(i: u32) -> char {\n         // SAFETY: the safety contract must be upheld by the caller.\n@@ -233,7 +233,7 @@ impl char {\n     /// // this panics\n     /// char::from_digit(1, 37);\n     /// ```\n-    #[unstable(feature = \"assoc_char_funcs\", reason = \"recently added\", issue = \"71763\")]\n+    #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n     #[inline]\n     pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         super::convert::from_digit(num, radix)"}]}