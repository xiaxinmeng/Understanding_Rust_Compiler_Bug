{"sha": "020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMGJjYjMxZGJiMWU2YTk2NTc1ODA2YTU2MGJkYzA4MmJmYTJiYjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T18:57:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T18:58:27Z"}, "message": "Register frame table in JIT mode", "tree": {"sha": "a3ace80021ada249422d23f52af0b4c49d1608e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ace80021ada249422d23f52af0b4c49d1608e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "html_url": "https://github.com/rust-lang/rust/commit/020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da6488d95cec9709bf77a28913c8040cc0508ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da6488d95cec9709bf77a28913c8040cc0508ee", "html_url": "https://github.com/rust-lang/rust/commit/4da6488d95cec9709bf77a28913c8040cc0508ee"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "66d4be9cfbffb1fe98903a26de062208f4f07d2a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "patch": "@@ -310,6 +310,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"ar\",\n  \"byteorder\",\n+ \"cfg-if\",\n  \"cranelift-codegen\",\n  \"cranelift-frontend\",\n  \"cranelift-module\","}, {"sha": "e9e6008f6cf38e10ce62406fdf8ce981c13e4e9f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "patch": "@@ -18,6 +18,7 @@ target-lexicon = \"0.10.0\"\n ar = \"0.8.0\"\n byteorder = \"1.2.7\"\n indexmap = \"1.0.2\"\n+cfg-if = \"0.1.10\"\n \n [dependencies.object]\n version = \"0.18.0\""}, {"sha": "9cce630fed52f671067f0c525e183380daf46353", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryInto;\n+\n use rustc_data_structures::fx::FxHashMap;\n \n use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n@@ -67,6 +69,25 @@ impl WriterRelocate {\n             writer: EndianVec::new(endian),\n         }\n     }\n+\n+    pub(super) fn relocate_for_jit(\n+        mut self,\n+        jit_module: &mut cranelift_module::Module<cranelift_simplejit::SimpleJITBackend>,\n+    ) -> Vec<u8> {\n+        for reloc in self.relocs.drain(..) {\n+            match reloc.name {\n+                super::DebugRelocName::Section(_) => unreachable!(),\n+                super::DebugRelocName::Symbol(sym) => {\n+                    let addr = jit_module.get_finalized_function(\n+                        cranelift_module::FuncId::from_u32(sym.try_into().unwrap()),\n+                    );\n+                    let val = (addr as u64 as i64 + reloc.addend) as u64;\n+                    self.writer.write_udata_at(reloc.offset as usize, val, reloc.size).unwrap();\n+                }\n+            }\n+        }\n+        self.writer.into_vec()\n+    }\n }\n \n impl Writer for WriterRelocate {"}, {"sha": "83795961377b0b3e65d95be764389e461c18e7be", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "patch": "@@ -64,4 +64,89 @@ impl<'tcx> UnwindContext<'tcx> {\n             }\n         }\n     }\n+\n+    pub(crate) unsafe fn register_jit(\n+        self,\n+        jit_module: &mut Module<cranelift_simplejit::SimpleJITBackend>,\n+    ) -> Option<UnwindRegistry> {\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n+        self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n+\n+        if eh_frame.0.writer.slice().is_empty() {\n+            return None;\n+        }\n+\n+        let mut eh_frame = eh_frame.0.relocate_for_jit(jit_module);\n+\n+        // GCC expects a terminating \"empty\" length, so write a 0 length at the end of the table.\n+        eh_frame.extend(&[0, 0, 0, 0]);\n+\n+        let mut registrations = Vec::new();\n+\n+        // =======================================================================\n+        // Everything after this line up to the end of the file is loosly based on\n+        // https://github.com/bytecodealliance/wasmtime/blob/4471a82b0c540ff48960eca6757ccce5b1b5c3e4/crates/jit/src/unwind/systemv.rs\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"macos\")] {\n+                // On macOS, `__register_frame` takes a pointer to a single FDE\n+                let start = eh_frame.as_ptr();\n+                let end = start.add(eh_frame.len());\n+                let mut current = start;\n+\n+                // Walk all of the entries in the frame table and register them\n+                while current < end {\n+                    let len = std::ptr::read::<u32>(current as *const u32) as usize;\n+\n+                    // Skip over the CIE\n+                    if current != start {\n+                        __register_frame(current);\n+                        registrations.push(current as usize);\n+                    }\n+\n+                    // Move to the next table entry (+4 because the length itself is not inclusive)\n+                    current = current.add(len + 4);\n+                }\n+            } else {\n+                // On other platforms, `__register_frame` will walk the FDEs until an entry of length 0\n+                let ptr = eh_frame.as_ptr();\n+                __register_frame(ptr);\n+                registrations.push(ptr as usize);\n+            }\n+        }\n+\n+        Some(UnwindRegistry {\n+            _frame_table: eh_frame,\n+            registrations,\n+        })\n+    }\n+}\n+\n+/// Represents a registry of function unwind information for System V ABI.\n+pub(crate) struct UnwindRegistry {\n+    _frame_table: Vec<u8>,\n+    registrations: Vec<usize>,\n+}\n+\n+extern \"C\" {\n+    // libunwind import\n+    fn __register_frame(fde: *const u8);\n+    fn __deregister_frame(fde: *const u8);\n+}\n+\n+impl Drop for UnwindRegistry {\n+    fn drop(&mut self) {\n+        unsafe {\n+            // libgcc stores the frame entries as a linked list in decreasing sort order\n+            // based on the PC value of the registered entry.\n+            //\n+            // As we store the registrations in increasing order, it would be O(N^2) to\n+            // deregister in that order.\n+            //\n+            // To ensure that we just pop off the first element in the list upon every\n+            // deregistration, walk our list of registrations backwards.\n+            for fde in self.registrations.iter().rev() {\n+                __deregister_frame(*fde as *const _);\n+            }\n+        }\n+    }\n }"}, {"sha": "08d21b5cc9f6b4fcdb5cc18f8f1590469ff1d329", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020bcb31dbb1e6a96575806a560bdc082bfa2bb6/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=020bcb31dbb1e6a96575806a560bdc082bfa2bb6", "patch": "@@ -63,6 +63,8 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     jit_module.finalize_definitions();\n \n+    let _unwind_register_guard = unsafe { unwind_context.register_jit(&mut jit_module) };\n+\n     tcx.sess.abort_if_errors();\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);"}]}