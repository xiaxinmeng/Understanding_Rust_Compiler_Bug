{"sha": "e81c310b6224946318b8e6af56a55021716ea9b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWMzMTBiNjIyNDk0NjMxOGI4ZTZhZjU2YTU1MDIxNzE2ZWE5YjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T14:22:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T14:22:36Z"}, "message": "Merge #5797\n\n5797: Minor\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8f127e2735b65560ef0006bbbb57c82b7f992e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f127e2735b65560ef0006bbbb57c82b7f992e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81c310b6224946318b8e6af56a55021716ea9b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO+QsCRBK7hj4Ov3rIwAAdHIIAHMypeQ38oW7tc7zFhDw4jrU\nF6NxyPpN2MlvYHTMHhT30XwtjlY2N8kzPKM2dCoWtmWFB3xDxT64VJHu+rnlV5i+\nUq42URboYREytZyCXAMew9zmII1PTtw4LTK2daru/gv4I8/yHhqWQYEzCSkTpg0A\nmIxjdGo5eecw4Siohs1izcNmgxR6YXGOv+fQ30RZxCt+IUdAz6JMM9E0jZQyXy4E\nx4SIih4Es/mnt20vM3HO9cMayE1HE3+Okv41jNqWEoPGddGyMK8m742iz//PbqHU\n60xrbF94HIhqdHcXSdLBrDfRq+TardAxhE5e3YATtb7xGYh1hWM3obPzOgGH7mo=\n=aZPu\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f127e2735b65560ef0006bbbb57c82b7f992e66\nparent 0e66dc690e16f29248f8d00ca0d68e58a34b52d8\nparent eb81731600d1bc50efc00e32b9fc2244a2af52ad\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597760556 +0000\ncommitter GitHub <noreply@github.com> 1597760556 +0000\n\nMerge #5797\n\n5797: Minor\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c310b6224946318b8e6af56a55021716ea9b5", "html_url": "https://github.com/rust-lang/rust/commit/e81c310b6224946318b8e6af56a55021716ea9b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81c310b6224946318b8e6af56a55021716ea9b5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e66dc690e16f29248f8d00ca0d68e58a34b52d8", "html_url": "https://github.com/rust-lang/rust/commit/0e66dc690e16f29248f8d00ca0d68e58a34b52d8"}, {"sha": "eb81731600d1bc50efc00e32b9fc2244a2af52ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb81731600d1bc50efc00e32b9fc2244a2af52ad", "html_url": "https://github.com/rust-lang/rust/commit/eb81731600d1bc50efc00e32b9fc2244a2af52ad"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "1f85805d223aebbed16e03700231af4a2d665fc3", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e81c310b6224946318b8e6af56a55021716ea9b5", "patch": "@@ -4,7 +4,7 @@\n //! macro-expanded files, but we need to present them to the users in terms of\n //! original files. So we need to map the ranges.\n \n-mod diagnostics_with_fix;\n+mod fixes;\n \n use std::cell::RefCell;\n \n@@ -19,9 +19,38 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{Diagnostic, FileId, Fix, SourceFileEdit};\n+use crate::{FileId, SourceChange, SourceFileEdit};\n \n-use self::diagnostics_with_fix::DiagnosticWithFix;\n+use self::fixes::DiagnosticWithFix;\n+\n+#[derive(Debug)]\n+pub struct Diagnostic {\n+    pub name: Option<String>,\n+    pub message: String,\n+    pub range: TextRange,\n+    pub severity: Severity,\n+    pub fix: Option<Fix>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Fix {\n+    pub label: String,\n+    pub source_change: SourceChange,\n+    /// Allows to trigger the fix only when the caret is in the range given\n+    pub fix_trigger_range: TextRange,\n+}\n+\n+impl Fix {\n+    fn new(\n+        label: impl Into<String>,\n+        source_change: SourceChange,\n+        fix_trigger_range: TextRange,\n+    ) -> Self {\n+        let label = label.into();\n+        assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n+        Self { label, source_change, fix_trigger_range }\n+    }\n+}\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {"}, {"sha": "68ae1c23981cafab09872037b9f35dc1619fe26b", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=e81c310b6224946318b8e6af56a55021716ea9b5", "patch": "@@ -1,7 +1,5 @@\n //! Provides a way to attach fixes to the diagnostics.\n //! The same module also has all curret custom fixes for the diagnostics implemented.\n-use crate::Fix;\n-use ast::{edit::IndentLevel, make};\n use base_db::FileId;\n use hir::{\n     db::AstDatabase,\n@@ -12,9 +10,15 @@ use ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,\n };\n-use syntax::{algo, ast, AstNode};\n+use syntax::{\n+    algo,\n+    ast::{self, edit::IndentLevel, make},\n+    AstNode,\n+};\n use text_edit::TextEdit;\n \n+use crate::diagnostics::Fix;\n+\n /// A [Diagnostic] that potentially has a fix available.\n ///\n /// [Diagnostic]: hir::diagnostics::Diagnostic", "previous_filename": "crates/ide/src/diagnostics/diagnostics_with_fix.rs"}, {"sha": "f37119e28bddc4ed4f6128378025223367f8bc7c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81c310b6224946318b8e6af56a55021716ea9b5/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=e81c310b6224946318b8e6af56a55021716ea9b5", "patch": "@@ -65,7 +65,7 @@ pub use crate::{\n     completion::{\n         CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n     },\n-    diagnostics::{DiagnosticsConfig, Severity},\n+    diagnostics::{Diagnostic, DiagnosticsConfig, Fix, Severity},\n     display::NavigationTarget,\n     expand_macro::ExpandedMacro,\n     file_structure::StructureNode,\n@@ -99,35 +99,6 @@ pub use text_edit::{Indel, TextEdit};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n-#[derive(Debug)]\n-pub struct Diagnostic {\n-    pub name: Option<String>,\n-    pub message: String,\n-    pub range: TextRange,\n-    pub severity: Severity,\n-    pub fix: Option<Fix>,\n-}\n-\n-#[derive(Debug)]\n-pub struct Fix {\n-    pub label: String,\n-    pub source_change: SourceChange,\n-    /// Allows to trigger the fix only when the caret is in the range given\n-    pub fix_trigger_range: TextRange,\n-}\n-\n-impl Fix {\n-    pub fn new(\n-        label: impl Into<String>,\n-        source_change: SourceChange,\n-        fix_trigger_range: TextRange,\n-    ) -> Self {\n-        let label = label.into();\n-        assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n-        Self { label, source_change, fix_trigger_range }\n-    }\n-}\n-\n /// Info associated with a text range.\n #[derive(Debug)]\n pub struct RangeInfo<T> {"}]}