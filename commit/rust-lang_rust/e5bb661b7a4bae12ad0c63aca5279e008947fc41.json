{"sha": "e5bb661b7a4bae12ad0c63aca5279e008947fc41", "node_id": "C_kwDOAAsO6NoAKGU1YmI2NjFiN2E0YmFlMTJhZDBjNjNhY2E1Mjc5ZTAwODk0N2ZjNDE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-05T23:12:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-05T23:13:45Z"}, "message": "Highlight `Self` as a keyword by default", "tree": {"sha": "7e9821e4d58d966d33163898f61bd6dbb5f87e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e9821e4d58d966d33163898f61bd6dbb5f87e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5bb661b7a4bae12ad0c63aca5279e008947fc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bb661b7a4bae12ad0c63aca5279e008947fc41", "html_url": "https://github.com/rust-lang/rust/commit/e5bb661b7a4bae12ad0c63aca5279e008947fc41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5bb661b7a4bae12ad0c63aca5279e008947fc41/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb631bf715feca9ab1c2c8de7ded6e8d0585096", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb631bf715feca9ab1c2c8de7ded6e8d0585096", "html_url": "https://github.com/rust-lang/rust/commit/0bb631bf715feca9ab1c2c8de7ded6e8d0585096"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "43a3fb2d71bb46c35f0717ab784673e4ea1ed1b8", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=e5bb661b7a4bae12ad0c63aca5279e008947fc41", "patch": "@@ -190,12 +190,13 @@ fn keyword(\n         T![for] if parent_matches::<ast::ForExpr>(&token) => h | HlMod::ControlFlow,\n         T![unsafe] => h | HlMod::Unsafe,\n         T![true] | T![false] => HlTag::BoolLiteral.into(),\n-        T![Self] => return Some(HlTag::Symbol(SymbolKind::SelfType).into()),\n         // crate is handled just as a token if it's in an `extern crate`\n         T![crate] if parent_matches::<ast::ExternCrate>(&token) => h,\n-        // self, crate and super are handled as either a Name or NameRef already, unless they\n+        // self, crate, super and `Self` are handled as either a Name or NameRef already, unless they\n         // are inside unmapped token trees\n-        T![self] | T![crate] | T![super] if parent_matches::<ast::NameRef>(&token) => return None,\n+        T![self] | T![crate] | T![super] | T![Self] if parent_matches::<ast::NameRef>(&token) => {\n+            return None\n+        }\n         T![self] if parent_matches::<ast::Name>(&token) => return None,\n         T![ref] => match token.parent().and_then(ast::IdentPat::cast) {\n             Some(ident) if sema.is_unsafe_ident_pat(&ident) => h | HlMod::Unsafe,\n@@ -270,12 +271,13 @@ fn highlight_name_ref(\n         }\n         NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n     };\n-    if name_ref.self_token().is_some() {\n-        h.tag = HlTag::Symbol(SymbolKind::SelfParam);\n-    }\n-    if name_ref.crate_token().is_some() || name_ref.super_token().is_some() {\n-        h.tag = HlTag::Keyword;\n-    }\n+\n+    h.tag = match name_ref.token_kind() {\n+        T![Self] => HlTag::Symbol(SymbolKind::SelfType),\n+        T![self] => HlTag::Symbol(SymbolKind::SelfParam),\n+        T![super] | T![crate] => HlTag::Keyword,\n+        _ => h.tag,\n+    };\n     h\n }\n "}, {"sha": "7cdeca8e29010856fc42d0212f37ebc9c19cf6d2", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_keywords.html", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "raw_url": "https://github.com/rust-lang/rust/raw/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html?ref=e5bb661b7a4bae12ad0c63aca5279e008947fc41", "patch": "@@ -0,0 +1,53 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"unresolved_reference\">self</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">use</span> <span class=\"keyword crate_root\">crate</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">__</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">use</span> <span class=\"keyword crate_root\">super</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">__</span> <span class=\"keyword\">where</span> <span class=\"self_type_keyword\">Self</span><span class=\"colon\">:</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">__</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"unresolved_reference\">Self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "599def0341eddf04dc44362e15ab6d4b3b882f49", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=e5bb661b7a4bae12ad0c63aca5279e008947fc41", "patch": "@@ -334,6 +334,26 @@ where\n     );\n }\n \n+#[test]\n+fn test_keyword_highlighting() {\n+    check_highlighting(\n+        r#\"\n+extern crate self;\n+\n+use crate;\n+use self;\n+mod __ {\n+    use super::*;\n+}\n+\n+struct __ where Self:;\n+fn __(_: Self) {}\n+\"#,\n+        expect_file![\"./test_data/highlight_keywords.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_string_highlighting() {\n     // The format string detection is based on macro-expansion,"}, {"sha": "333ee35d636a7a3032acf8ca53caef03d4378ad4", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bb661b7a4bae12ad0c63aca5279e008947fc41/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=e5bb661b7a4bae12ad0c63aca5279e008947fc41", "patch": "@@ -34,6 +34,10 @@ impl ast::NameRef {\n     pub fn as_tuple_field(&self) -> Option<usize> {\n         self.text().parse().ok()\n     }\n+\n+    pub fn token_kind(&self) -> SyntaxKind {\n+        self.syntax().first_token().map_or(SyntaxKind::ERROR, |it| it.kind())\n+    }\n }\n \n fn text_of_first_token(node: &SyntaxNode) -> TokenText<'_> {\n@@ -215,11 +219,11 @@ impl ast::PathSegment {\n \n     pub fn kind(&self) -> Option<PathSegmentKind> {\n         let res = if let Some(name_ref) = self.name_ref() {\n-            match name_ref.syntax().first_token().map(|it| it.kind()) {\n-                Some(T![Self]) => PathSegmentKind::SelfTypeKw,\n-                Some(T![self]) => PathSegmentKind::SelfKw,\n-                Some(T![super]) => PathSegmentKind::SuperKw,\n-                Some(T![crate]) => PathSegmentKind::CrateKw,\n+            match name_ref.token_kind() {\n+                T![Self] => PathSegmentKind::SelfTypeKw,\n+                T![self] => PathSegmentKind::SelfKw,\n+                T![super] => PathSegmentKind::SuperKw,\n+                T![crate] => PathSegmentKind::CrateKw,\n                 _ => PathSegmentKind::Name(name_ref),\n             }\n         } else {"}, {"sha": "4843ea84218b02f8508e51e387c4bac21a6793d0", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5bb661b7a4bae12ad0c63aca5279e008947fc41/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e5bb661b7a4bae12ad0c63aca5279e008947fc41/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e5bb661b7a4bae12ad0c63aca5279e008947fc41", "patch": "@@ -1297,7 +1297,7 @@\n             {\n                 \"id\": \"selfTypeKeyword\",\n                 \"description\": \"Style for the self type keyword\",\n-                \"superType\": \"typeParameter\"\n+                \"superType\": \"keyword\"\n             },\n             {\n                 \"id\": \"semicolon\","}]}