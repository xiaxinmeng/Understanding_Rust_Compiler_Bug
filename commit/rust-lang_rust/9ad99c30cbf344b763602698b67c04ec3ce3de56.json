{"sha": "9ad99c30cbf344b763602698b67c04ec3ce3de56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZDk5YzMwY2JmMzQ0Yjc2MzYwMjY5OGI2N2MwNGVjM2NlM2RlNTY=", "commit": {"author": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-28T12:26:00Z"}, "committer": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-28T12:49:51Z"}, "message": "Refactor into ban_nonexisting_field method", "tree": {"sha": "254e7ede4f335fd0b44036356548ae27fb5fade7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254e7ede4f335fd0b44036356548ae27fb5fade7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ad99c30cbf344b763602698b67c04ec3ce3de56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad99c30cbf344b763602698b67c04ec3ce3de56", "html_url": "https://github.com/rust-lang/rust/commit/9ad99c30cbf344b763602698b67c04ec3ce3de56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ad99c30cbf344b763602698b67c04ec3ce3de56/comments", "author": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "html_url": "https://github.com/rust-lang/rust/commit/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "f59f908465dd378a90991a6105985ba072b92dcc", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9ad99c30cbf344b763602698b67c04ec3ce3de56/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad99c30cbf344b763602698b67c04ec3ce3de56/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9ad99c30cbf344b763602698b67c04ec3ce3de56", "patch": "@@ -1390,33 +1390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n             self.ban_take_value_of_method(expr, expr_t, field);\n         } else if !expr_t.is_primitive_ty() {\n-            let mut err = self.no_such_field_err(field.span, field, expr_t);\n-\n-            match expr_t.peel_refs().kind {\n-                ty::Array(_, len) => {\n-                    self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n-                }\n-                ty::RawPtr(..) => {\n-                    self.suggest_first_deref_field(&mut err, expr, base, field);\n-                }\n-                ty::Adt(def, _) if !def.is_enum() => {\n-                    self.suggest_fields_on_recordish(&mut err, def, field);\n-                }\n-                ty::Param(param_ty) => {\n-                    self.point_at_param_definition(&mut err, param_ty);\n-                }\n-                _ => {}\n-            }\n-\n-            if field.name == kw::Await {\n-                // We know by construction that `<expr>.await` is either on Rust 2015\n-                // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n-                err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n-                err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n-                err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n-            }\n-\n-            err.emit();\n+            self.ban_nonexisting_field(field, base, expr, expr_t);\n         } else {\n             type_error_struct!(\n                 self.tcx().sess,\n@@ -1432,6 +1406,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().types.err\n     }\n \n+    fn ban_nonexisting_field(\n+        &self,\n+        field: ast::Ident,\n+        base: &'tcx hir::Expr,\n+        expr: &'tcx hir::Expr,\n+        expr_t: Ty<'tcx>,\n+    ) {\n+        let mut err = self.no_such_field_err(field.span, field, expr_t);\n+\n+        match expr_t.peel_refs().kind {\n+            ty::Array(_, len) => {\n+                self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n+            }\n+            ty::RawPtr(..) => {\n+                self.suggest_first_deref_field(&mut err, expr, base, field);\n+            }\n+            ty::Adt(def, _) if !def.is_enum() => {\n+                self.suggest_fields_on_recordish(&mut err, def, field);\n+            }\n+            ty::Param(param_ty) => {\n+                self.point_at_param_definition(&mut err, param_ty);\n+            }\n+            _ => {}\n+        }\n+\n+        if field.name == kw::Await {\n+            // We know by construction that `<expr>.await` is either on Rust 2015\n+            // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n+            err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n+            err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n+        }\n+\n+        err.emit();\n+    }\n+\n     fn ban_private_field_access(\n         &self,\n         expr: &hir::Expr,"}]}