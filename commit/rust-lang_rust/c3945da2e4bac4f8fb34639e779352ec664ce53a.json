{"sha": "c3945da2e4bac4f8fb34639e779352ec664ce53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOTQ1ZGEyZTRiYWM0ZjhmYjM0NjM5ZTc3OTM1MmVjNjY0Y2U1M2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T06:48:44Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T06:48:44Z"}, "message": "Add another pile of LLVM bindings.", "tree": {"sha": "1b46887af1fc13a4c5e265b039baf04e43de52e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b46887af1fc13a4c5e265b039baf04e43de52e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3945da2e4bac4f8fb34639e779352ec664ce53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3945da2e4bac4f8fb34639e779352ec664ce53a", "html_url": "https://github.com/rust-lang/rust/commit/c3945da2e4bac4f8fb34639e779352ec664ce53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3945da2e4bac4f8fb34639e779352ec664ce53a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6c1aad826adb0cfd1f8159ef7eb2da3dadad5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6c1aad826adb0cfd1f8159ef7eb2da3dadad5b", "html_url": "https://github.com/rust-lang/rust/commit/8e6c1aad826adb0cfd1f8159ef7eb2da3dadad5b"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "da748bf377c0d7dcdab01fc24ba5fb862cc80333", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/c3945da2e4bac4f8fb34639e779352ec664ce53a/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3945da2e4bac4f8fb34639e779352ec664ce53a/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=c3945da2e4bac4f8fb34639e779352ec664ce53a", "patch": "@@ -1,6 +1,9 @@\n import std._str.rustrt.sbuf;\n import std._vec.rustrt.vbuf;\n \n+type ULongLong = u64;\n+type LongLong = i64;\n+type Long = i32;\n type Bool = int;\n \n native mod llvm = \"libLLVM-2.7.so\" {\n@@ -17,23 +20,41 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   type PassManagerRef;\n   type UseRef;\n \n+\n+  /* Create and destroy contexts. */\n+  fn ContextCreate() -> ContextRef;\n+  fn GetGlobalContext() -> ContextRef;\n+  fn ContextDispose(ContextRef C);\n+  fn GetMDKindIDInContext(ContextRef C, sbuf Name, uint SLen) -> uint;\n+  fn GetMDKindID(sbuf Name, uint SLen) -> uint;\n+\n+  /* Create and destroy modules. */\n   fn ModuleCreateWithName(sbuf ModuleID) -> ModuleRef;\n   fn DisposeModule(ModuleRef M);\n \n+  /** Data layout. See Module::getDataLayout. */\n   fn GetDataLayout(ModuleRef M) -> sbuf;\n   fn SetDataLayout(ModuleRef M, sbuf Triple);\n \n+  /** Target triple. See Module::getTargetTriple. */\n   fn GetTarget(ModuleRef M) -> sbuf;\n   fn SetTarget(ModuleRef M, sbuf Triple);\n \n+  /** See Module::addTypeName. */\n   fn AddTypeName(ModuleRef M, sbuf Name, TypeRef Ty) -> Bool;\n   fn DeleteTypeName(ModuleRef M, sbuf Name);\n   fn GetTypeByName(ModuleRef M, sbuf Name) -> TypeRef;\n \n+  /** See Module::dump. */\n   fn DumpModule(ModuleRef M);\n \n+  /** See Module::setModuleInlineAsm. */\n+  fn SetModuleInlineAsm(ModuleRef M, sbuf Asm);\n+\n+  /** See llvm::LLVMType::getContext. */\n   fn GetTypeContext(TypeRef Ty) -> ContextRef;\n \n+  /* Operations on integer types */\n   fn Int1TypeInContext(ContextRef C) -> TypeRef;\n   fn Int8TypeInContext(ContextRef C) -> TypeRef;\n   fn Int16TypeInContext(ContextRef C) -> TypeRef;\n@@ -49,6 +70,7 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn IntType(uint NumBits) -> TypeRef;\n   fn GetIntTypeWidth(TypeRef IntegerTy) -> uint;\n \n+  /* Operations on real types */\n   fn FloatTypeInContext(ContextRef C) -> TypeRef;\n   fn DoubleTypeInContext(ContextRef C) -> TypeRef;\n   fn X86FP80TypeInContext(ContextRef C) -> TypeRef;\n@@ -61,13 +83,15 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn FP128Type() -> TypeRef;\n   fn PPCFP128Type() -> TypeRef;\n \n+  /* Operations on function types */\n   fn FunctionType(TypeRef ReturnType, vbuf ParamTypes,\n                   uint ParamCount, Bool IsVarArg) -> TypeRef;\n   fn IsFunctionVarArg(TypeRef FunctionTy) -> Bool;\n   fn GetReturnType(TypeRef FunctionTy) -> TypeRef;\n   fn CountParamTypes(TypeRef FunctionTy) -> uint;\n   fn GetParamTypes(TypeRef FunctionTy, vbuf Dest);\n \n+  /* Operations on struct types */\n   fn StructTypeInContext(ContextRef C, vbuf ElementTypes,\n                          uint ElementCount, Bool Packed) -> TypeRef;\n   fn StructType(vbuf ElementTypes, uint ElementCount,\n@@ -76,12 +100,14 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn GetStructElementTypes(TypeRef StructTy, vbuf Dest);\n   fn IsPackedStruct(TypeRef StructTy) -> Bool;\n \n+  /* Operations on union types */\n   fn UnionTypeInContext(ContextRef C, vbuf ElementTypes,\n                         uint ElementCount) -> TypeRef;\n   fn UnionType(vbuf ElementTypes, uint ElementCount) -> TypeRef;\n   fn CountUnionElementTypes(TypeRef UnionTy) -> uint;\n   fn GetUnionElementTypes(TypeRef UnionTy, vbuf Dest);\n \n+  /* Operations on array, pointer, and vector types (sequence types) */\n   fn ArrayType(TypeRef ElementType, uint ElementCount) -> TypeRef;\n   fn PointerType(TypeRef ElementType, uint AddressSpace) -> TypeRef;\n   fn VectorType(TypeRef ElementType, uint ElementCount) -> TypeRef;\n@@ -91,6 +117,7 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn GetPointerAddressSpace(TypeRef PointerTy) -> uint;\n   fn GetVectorSize(TypeRef VectorTy) -> uint;\n \n+  /* Operations on other types */\n   fn VoidTypeInContext(ContextRef C) -> TypeRef;\n   fn LabelTypeInContext(ContextRef C) -> TypeRef;\n   fn OpaqueTypeInContext(ContextRef C) -> TypeRef;\n@@ -99,11 +126,13 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn LabelType() -> TypeRef;\n   fn OpaqueType() -> TypeRef;\n \n+  /* Operations on type handles */\n   fn CreateTypeHandle(TypeRef PotentiallyAbstractTy) -> TypeHandleRef;\n   fn RefineType(TypeRef AbstractTy, TypeRef ConcreteTy);\n   fn ResolveTypeHandle(TypeHandleRef TypeHandle) -> TypeRef;\n   fn DisposeTypeHandle(TypeHandleRef TypeHandle);\n \n+  /* Operations on all values */\n   fn TypeOf(ValueRef Val) -> TypeRef;\n   fn GetValueName(ValueRef Val) -> sbuf;\n   fn SetValueName(ValueRef Val, sbuf Name);\n@@ -113,5 +142,136 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn GetMetadata(ValueRef Val, uint KindID) -> ValueRef;\n   fn SetMetadata(ValueRef Val, uint KindID, ValueRef Node);\n \n+  /* Operations on Uses */\n+  fn GetFirstUse(ValueRef Val) -> UseRef;\n+  fn GetNextUse(UseRef U) -> UseRef;\n+  fn GetUser(UseRef U) -> ValueRef;\n+  fn GetUsedValue(UseRef U) -> ValueRef;\n+\n+  /* Operations on Users */\n+  fn GetOperand(ValueRef Val, uint Index) -> ValueRef;\n+\n+  /* Operations on constants of any type */\n+  fn ConstNull(TypeRef Ty) -> ValueRef; /* all zeroes */\n+  fn ConstAllOnes(TypeRef Ty) -> ValueRef; /* only for int/vector */\n+  fn GetUndef(TypeRef Ty) -> ValueRef;\n+  fn IsConstant(ValueRef Val) -> Bool;\n+  fn IsNull(ValueRef Val) -> Bool;\n+  fn IsUndef(ValueRef Val) -> Bool;\n+  fn ConstPointerNull(TypeRef Ty) -> ValueRef;\n+\n+  /* Operations on metadata */\n+  fn MDStringInContext(ContextRef C, sbuf Str, uint SLen) -> ValueRef;\n+  fn MDString(sbuf Str, uint SLen) -> ValueRef;\n+  fn MDNodeInContext(ContextRef C, vbuf Vals, uint Count) -> ValueRef;\n+  fn MDNode(vbuf Vals, uint Count) -> ValueRef;\n+\n+  /* Operations on scalar constants */\n+  fn ConstInt(TypeRef IntTy, ULongLong N, Bool SignExtend) -> ValueRef;\n+  fn ConstIntOfString(TypeRef IntTy, sbuf Text, u8 Radix) -> ValueRef;\n+  fn ConstIntOfStringAndSize(TypeRef IntTy, sbuf Text,\n+                             uint SLen, u8 Radix) -> ValueRef;\n+  fn ConstReal(TypeRef RealTy, f64 N) -> ValueRef;\n+  fn ConstRealOfString(TypeRef RealTy, sbuf Text) -> ValueRef;\n+  fn ConstRealOfStringAndSize(TypeRef RealTy, sbuf Text,\n+                              uint SLen) -> ValueRef;\n+  fn ConstIntGetZExtValue(ValueRef ConstantVal) -> ULongLong;\n+  fn ConstIntGetSExtValue(ValueRef ConstantVal) -> LongLong;\n+\n+\n+  /* Operations on composite constants */\n+  fn ConstStringInContext(ContextRef C, sbuf Str,\n+                          uint Length, Bool DontNullTerminate) -> ValueRef;\n+  fn ConstStructInContext(ContextRef C, vbuf ConstantVals,\n+                          uint Count, Bool Packed) -> ValueRef;\n+\n+  fn ConstString(sbuf Str, uint Length, Bool DontNullTerminate) -> ValueRef;\n+  fn ConstArray(TypeRef ElementTy,\n+                vbuf ConstantVals, uint Length) -> ValueRef;\n+  fn ConstStruct(vbuf ConstantVals, uint Count, Bool Packed) -> ValueRef;\n+  fn ConstVector(vbuf ScalarConstantVals, uint Size) -> ValueRef;\n+  fn ConstUnion(TypeRef Ty, ValueRef Val) -> ValueRef;\n+\n+  /* Constant expressions */\n+  fn AlignOf(TypeRef Ty) -> ValueRef;\n+  fn SizeOf(TypeRef Ty) -> ValueRef;\n+  fn ConstNeg(ValueRef ConstantVal) -> ValueRef;\n+  fn ConstNSWNeg(ValueRef ConstantVal) -> ValueRef;\n+  fn ConstNUWNeg(ValueRef ConstantVal) -> ValueRef;\n+  fn ConstFNeg(ValueRef ConstantVal) -> ValueRef;\n+  fn ConstNot(ValueRef ConstantVal) -> ValueRef;\n+  fn ConstAdd(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNSWAdd(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNUWAdd(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstFAdd(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstSub(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNSWSub(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNUWSub(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstFSub(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstMul(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNSWMul(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstNUWMul(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstFMul(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstUDiv(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstSDiv(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstExactSDiv(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstFDiv(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstURem(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstSRem(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstFRem(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstAnd(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstOr(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstXor(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstShl(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstLShr(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstAShr(ValueRef LHSConstant, ValueRef RHSConstant) -> ValueRef;\n+  fn ConstGEP(ValueRef ConstantVal,\n+              vbuf ConstantIndices, uint NumIndices) -> ValueRef;\n+  fn ConstInBoundsGEP(ValueRef ConstantVal,\n+                      vbuf ConstantIndices,\n+                      uint NumIndices) -> ValueRef;\n+  fn ConstTrunc(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstSExt(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstZExt(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstFPTrunc(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstFPExt(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstUIToFP(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstSIToFP(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstFPToUI(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstFPToSI(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstPtrToInt(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstIntToPtr(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstBitCast(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstZExtOrBitCast(ValueRef ConstantVal,\n+                        TypeRef ToType) -> ValueRef;\n+  fn ConstSExtOrBitCast(ValueRef ConstantVal,\n+                        TypeRef ToType) -> ValueRef;\n+  fn ConstTruncOrBitCast(ValueRef ConstantVal,\n+                         TypeRef ToType) -> ValueRef;\n+  fn ConstPointerCast(ValueRef ConstantVal,\n+                      TypeRef ToType) -> ValueRef;\n+  fn ConstIntCast(ValueRef ConstantVal, TypeRef ToType,\n+                  Bool isSigned) -> ValueRef;\n+  fn ConstFPCast(ValueRef ConstantVal, TypeRef ToType) -> ValueRef;\n+  fn ConstSelect(ValueRef ConstantCondition,\n+                 ValueRef ConstantIfTrue,\n+                 ValueRef ConstantIfFalse) -> ValueRef;\n+  fn ConstExtractElement(ValueRef VectorConstant,\n+                         ValueRef IndexConstant) -> ValueRef;\n+  fn ConstInsertElement(ValueRef VectorConstant,\n+                        ValueRef ElementValueConstant,\n+                        ValueRef IndexConstant) -> ValueRef;\n+  fn ConstShuffleVector(ValueRef VectorAConstant,\n+                        ValueRef VectorBConstant,\n+                        ValueRef MaskConstant) -> ValueRef;\n+  fn ConstExtractValue(ValueRef AggConstant, vbuf IdxList,\n+                       uint NumIdx) -> ValueRef;\n+  fn ConstInsertValue(ValueRef AggConstant,\n+                      ValueRef ElementValueConstant,\n+                      vbuf IdxList, uint NumIdx) -> ValueRef;\n+  fn ConstInlineAsm(TypeRef Ty,\n+                    sbuf AsmString, sbuf Constraints,\n+                    Bool HasSideEffects, Bool IsAlignStack) -> ValueRef;\n+  fn BlockAddress(ValueRef F, BasicBlockRef BB) -> ValueRef;\n \n }\n\\ No newline at end of file"}]}