{"sha": "a548e8185a945e993e58f4cacf116943907cd29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDhlODE4NWE5NDVlOTkzZTU4ZjRjYWNmMTE2OTQzOTA3Y2QyOWU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-25T20:09:45Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-26T19:23:05Z"}, "message": "Guide: Hello, cargo", "tree": {"sha": "c915ed7317dc8f6025db20f26cd26c5bab42e463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c915ed7317dc8f6025db20f26cd26c5bab42e463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a548e8185a945e993e58f4cacf116943907cd29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a548e8185a945e993e58f4cacf116943907cd29e", "html_url": "https://github.com/rust-lang/rust/commit/a548e8185a945e993e58f4cacf116943907cd29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a548e8185a945e993e58f4cacf116943907cd29e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20f968ed2a4808f98ffce52ce95398009565ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20f968ed2a4808f98ffce52ce95398009565ece", "html_url": "https://github.com/rust-lang/rust/commit/b20f968ed2a4808f98ffce52ce95398009565ece"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "f7d1fad1fae343acdb4d29d1e4a875aa9a19ffb8", "filename": "src/doc/guide.md", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a548e8185a945e993e58f4cacf116943907cd29e/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/a548e8185a945e993e58f4cacf116943907cd29e/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=a548e8185a945e993e58f4cacf116943907cd29e", "patch": "@@ -264,26 +264,139 @@ projects.\n \n ## Hello, Cargo!\n \n+[Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n+Rust projects. Cargo is currently in an alpha state, just like Rust, and so it\n+is still a work in progress. However, it is already good enough to use for many\n+Rust projects, and so it is assumed that Rust projects will use Cargo from the\n+beginning.\n \n+Programmers love car analogies, so I've got a good one for you to think about\n+the relationship between `cargo` and `rustc`: `rustc` is like a car, and\n+`cargo` is like a robotic driver. You can drive your car yourself, of course,\n+but isn't it just easier to let a computer drive it for you?\n \n+Anyway, Cargo manages three things: building your code, downloading the\n+dependencies your code needs, and building the dependencies your code needs.\n+At first, your program doesn't have any dependencies, so we'll only be using\n+the first part of its functionality. Eventually, we'll add more. Since we\n+started off by using Cargo, it'll be easy to add later.\n \n+Let's convert Hello World to Cargo. The first thing we need to do is install\n+it. To do this, we need to build it from source. There are no binaries yet.\n \n+First, let's go back to our projects directory. We don't want Cargo to\n+live in our project!\n \n+```{bash}\n+$ cd ..\n+```\n+\n+Next, we need these commands:\n+\n+```{bash}\n+$ git clone --recursive https://github.com/rust-lang/cargo\n+$ cd cargo\n+$ make\n+$ make install # may need sudo or admin permissions\n+```\n+\n+The `--recursive` downloads Cargo's own dependencies. You can't use Cargo to\n+fetch dependencies until you have Cargo installed!\n+\n+Let's see if that worked. Try this:\n+\n+```{bash}\n+$ cargo\n+Commands:\n+  build          # compile the current project\n+\n+Options (for all commands):\n+\n+-v, [--verbose]\n+-h, [--help]\n+```\n+\n+If you see this output when you run `cargo`, congrats! Cargo is working. If\n+not, please [open an Issue](https://github.com/rust-lang/cargo/issues/new) or\n+drop by the Rust IRC, and we can help you out.\n \n+Let's move back into our `hello_world` directory now:\n \n+```{bash}\n+$ cd ..              # move back up into projects\n+$ cd hello_world     # move into hello_world\n+```\n+\n+To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n+configuration file, and put our source file in the right place. Let's\n+do that part first:\n+\n+```{bash}\n+$ mkdir src\n+$ mv hello_world.rs src/hello_world.rs\n+```\n+\n+Cargo expects your source files to live inside a `src` directory. That leaves\n+the top level for other things, like READMEs, licence information, and anything\n+not related to your code. Cargo helps us keep our projects nice and tidy. A\n+place for everything, and everything in its place.\n \n+Next, our configuration file:\n \n+```{bash}\n+$ editor Cargo.toml\n+```\n \n+Make sure to get this name right: you need the capital `C`!\n \n+Put this inside:\n \n+```\n+[package]\n \n+name = \"hello_world\"\n+version = \"0.1.0\"\n+authors = [ \"someone@example.com\" ]\n \n+[[bin]]\n \n+name = \"hello_world\"\n+```\n \n+This file is in the [TOML](https://github.com/toml-lang/toml) format. Let's let\n+it explain itself to you:\n \n+> TOML aims to be a minimal configuration file format that's easy to read due\n+> to obvious semantics. TOML is designed to map unambiguously to a hash table.\n+> TOML should be easy to parse into data structures in a wide variety of\n+> languages.\n \n+TOML is very similar to INI, but with some extra goodies.\n \n+Anyway, there are two **table**s in this file: `package` and `bin`. The first\n+tells Cargo metadata about your package. The second tells Cargo that we're\n+interested in building a binary, not a library (though we could do both!), as\n+well as what it is named.\n \n+Once you have this file in place, we should be ready to build! Try this:\n+\n+```{bash}\n+$ cargo build\n+   Compiling hello_world v0.1.0 (file:/home/yourname/projects/hello_world)\n+$ ./target/hello_world \n+Hello, world!\n+```\n \n+Bam! We build our project with `cargo build`, and run it with\n+`./target/hello_world`. This hasn't bought us a whole lot over our simple use\n+of `rustc`, but think about the future: when our project has more tha one file,\n+we would need to call `rustc` twice, and pass it a bunch of options to tell it\n+to build everything together. With Cargo, as our project grows, we can just\n+`cargo build` and it'll work the right way.\n \n+That's it! We've successfully built `hello_world` with Cargo. Even though our\n+program is simple, it's using all of the real tooling that you'll use for the\n+rest of your Rust career.\n \n+Next, we'll learn more about Rust itself, by starting to write a more complicated\n+program. We hope you want to do more with Rust than just print \"Hello, world!\""}]}