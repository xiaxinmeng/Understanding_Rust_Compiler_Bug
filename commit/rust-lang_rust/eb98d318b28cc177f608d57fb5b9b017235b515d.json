{"sha": "eb98d318b28cc177f608d57fb5b9b017235b515d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOThkMzE4YjI4Y2MxNzdmNjA4ZDU3ZmI1YjliMDE3MjM1YjUxNWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-14T12:02:36Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-14T12:02:36Z"}, "message": "Require defining uses to use generic parameters for all parameters of a generic existential type", "tree": {"sha": "cf1a1fc49128b7205f29ce4f18a773782d93d7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf1a1fc49128b7205f29ce4f18a773782d93d7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb98d318b28cc177f608d57fb5b9b017235b515d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb98d318b28cc177f608d57fb5b9b017235b515d", "html_url": "https://github.com/rust-lang/rust/commit/eb98d318b28cc177f608d57fb5b9b017235b515d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb98d318b28cc177f608d57fb5b9b017235b515d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93bce85e5e085274febf1ca71b551de3f51429c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93bce85e5e085274febf1ca71b551de3f51429c", "html_url": "https://github.com/rust-lang/rust/commit/c93bce85e5e085274febf1ca71b551de3f51429c"}], "stats": {"total": 125, "additions": 98, "deletions": 27}, "files": [{"sha": "b50a165ba9cd01d3be3413b0dccbc6a5a9e58c4c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -1385,10 +1385,19 @@ fn find_existential_constraints<'a, 'tcx>(\n                     .subst(self.tcx, substs)\n                     .walk()\n                     .filter_map(|t| match &t.sty {\n-                    ty::Param(p) => Some(*index_map.get(p).unwrap()),\n-                    _ => None,\n-                }).collect();\n-                if let Some((prev_span, prev_ty, ref prev_indices)) = self.found {\n+                        ty::Param(p) => Some(*index_map.get(p).unwrap()),\n+                        _ => None,\n+                    }).collect();\n+                let is_param = |ty: ty::Ty| match ty.sty {\n+                    ty::Param(_) => true,\n+                    _ => false,\n+                };\n+                if !substs.types().all(is_param) {\n+                    self.tcx.sess.span_err(\n+                        span,\n+                        \"defining existential type use does not fully define existential type\",\n+                    );\n+                } else if let Some((prev_span, prev_ty, ref prev_indices)) = self.found {\n                     let mut ty = concrete_type.walk().fuse();\n                     let mut p_ty = prev_ty.walk().fuse();\n                     let iter_eq = (&mut ty).zip(&mut p_ty).all(|(t, p)| match (&t.sty, &p.sty) {"}, {"sha": "542e076d88d64c6d242e8fdfe4dba806c863b187", "filename": "src/test/ui/existential_types/bound_reduction2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -8,11 +8,12 @@ trait TraitWithAssoc {\n }\n \n existential type Foo<V>: Trait<V>;\n+//~^ ERROR could not find defining uses\n \n trait Trait<U> {}\n \n impl<W> Trait<W> for () {}\n \n-fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR non-defining\n+fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR does not fully define\n     ()\n }"}, {"sha": "f51f1c9a4e563a2cd7c574d01ffbc88bb748bad1", "filename": "src/test/ui/existential_types/bound_reduction2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -1,16 +1,16 @@\n-error: non-defining existential type use in defining scope\n-  --> $DIR/bound_reduction2.rs:16:1\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/bound_reduction2.rs:17:1\n    |\n-LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR non-defining\n+LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR does not fully define\n LL | |     ()\n LL | | }\n    | |_^\n-   |\n-note: used non-generic type <T as TraitWithAssoc>::Assoc for generic parameter\n-  --> $DIR/bound_reduction2.rs:10:22\n+\n+error: could not find defining uses\n+  --> $DIR/bound_reduction2.rs:10:1\n    |\n LL | existential type Foo<V>: Trait<V>;\n-   |                      ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "10f2c630582fca1f431a4bed078a43a88ac0d19b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use10.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+    (t, 4u32)\n+}"}, {"sha": "4c6897298c44fe034e6ec1dee2d7cabfdff9d1b1", "filename": "src/test/ui/existential_types/generic_duplicate_param_use9.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -0,0 +1,20 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<A, B>: Debug;\n+\n+trait Foo {\n+    type Bar: Debug;\n+    const BAR: Self::Bar;\n+}\n+\n+fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u, T::BAR)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u, 42) //~^ ERROR concrete type differs from previous\n+}"}, {"sha": "a3ce480d66dcdf0e16e83ef2a2e7f1dc0e164621", "filename": "src/test/ui/existential_types/generic_duplicate_param_use9.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -0,0 +1,18 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use9.rs:18:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u, 42) //~^ ERROR concrete type differs from previous\n+LL | | }\n+   | |_^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use9.rs:14:1\n+   |\n+LL | / fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u, T::BAR)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "75af5d9570ff2ca7a4a3676719e5f710aec82c6d", "filename": "src/test/ui/existential_types/generic_nondefining_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -3,8 +3,9 @@\n fn main() {}\n \n existential type Cmp<T>: 'static;\n+//~^ ERROR could not find defining uses\n \n // not a defining use, because it doesn't define *all* possible generics\n-fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+fn cmp() -> Cmp<u32> { //~ ERROR defining existential type use does not fully define\n     5u32\n }"}, {"sha": "8dd88006be9c63f84eeefcbc75d8ce1d9ac15b8b", "filename": "src/test/ui/existential_types/generic_nondefining_use.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -1,16 +1,16 @@\n-error: non-defining existential type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:8:1\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/generic_nondefining_use.rs:9:1\n    |\n-LL | / fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+LL | / fn cmp() -> Cmp<u32> { //~ ERROR defining existential type use does not fully define\n LL | |     5u32\n LL | | }\n    | |_^\n-   |\n-note: used non-generic type u32 for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:5:22\n+\n+error: could not find defining uses\n+  --> $DIR/generic_nondefining_use.rs:5:1\n    |\n LL | existential type Cmp<T>: 'static;\n-   |                      ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "3f81f5177d0a4f5ef6473cf8882cde7beca9adc2", "filename": "src/test/ui/existential_types/not_a_defining_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -7,6 +7,7 @@ fn main() {}\n existential type Two<T, U>: Debug;\n \n fn two<T: Debug>(t: T) -> Two<T, u32> {\n+    //~^ ERROR defining existential type use does not fully define existential type\n     (t, 4i8)\n }\n "}, {"sha": "288a32fc14edd68c56f14d74704f607070abb8b3", "filename": "src/test/ui/existential_types/not_a_defining_use.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb98d318b28cc177f608d57fb5b9b017235b515d/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr?ref=eb98d318b28cc177f608d57fb5b9b017235b515d", "patch": "@@ -1,18 +1,27 @@\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/not_a_defining_use.rs:9:1\n+   |\n+LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n+LL | |     //~^ ERROR defining existential type use does not fully define existential type\n+LL | |     (t, 4i8)\n+LL | | }\n+   | |_^\n+\n error: concrete type differs from previous defining existential type use\n-  --> $DIR/not_a_defining_use.rs:29:1\n+  --> $DIR/not_a_defining_use.rs:30:1\n    |\n LL | / fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> { //~ concrete type differs from previous\n LL | |     (t, <U as Bar>::FOO)\n LL | | }\n    | |_^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n    |\n note: previous use here\n-  --> $DIR/not_a_defining_use.rs:9:1\n+  --> $DIR/not_a_defining_use.rs:14:1\n    |\n-LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n-LL | |     (t, 4i8)\n+LL | / fn three<T: Debug, U>(t: T) -> Two<T, U> {\n+LL | |     (t, 5i8)\n LL | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}