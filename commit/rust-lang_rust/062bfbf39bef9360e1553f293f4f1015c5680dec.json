{"sha": "062bfbf39bef9360e1553f293f4f1015c5680dec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MmJmYmYzOWJlZjkzNjBlMTU1M2YyOTNmNGYxMDE1YzU2ODBkZWM=", "commit": {"author": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-18T10:14:14Z"}, "committer": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-19T21:01:01Z"}, "message": "mv codemap source_map", "tree": {"sha": "84cc72ecf00df5fec9af315ff8d0aef52c55684c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84cc72ecf00df5fec9af315ff8d0aef52c55684c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/062bfbf39bef9360e1553f293f4f1015c5680dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/062bfbf39bef9360e1553f293f4f1015c5680dec", "html_url": "https://github.com/rust-lang/rust/commit/062bfbf39bef9360e1553f293f4f1015c5680dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/062bfbf39bef9360e1553f293f4f1015c5680dec/comments", "author": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fe97f3d32b4cef1c22b6a5ba5326b1b195e262", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fe97f3d32b4cef1c22b6a5ba5326b1b195e262", "html_url": "https://github.com/rust-lang/rust/commit/d3fe97f3d32b4cef1c22b6a5ba5326b1b195e262"}], "stats": {"total": 260, "additions": 130, "deletions": 130}, "files": [{"sha": "a14745a1381273d38bebe104520838dcb86cf6d5", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn finalize_and_compute_crate_hash(mut self,\n                                                   crate_disambiguator: CrateDisambiguator,\n                                                   cstore: &dyn CrateStore,\n-                                                  codemap: &SourceMap,\n+                                                  source_map: &SourceMap,\n                                                   commandline_args_hash: u64)\n                                                   -> (Vec<MapEntry<'hir>>, Svh) {\n         self\n@@ -155,7 +155,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         // If we included the full mapping in the SVH, we could only have\n         // reproducible builds by compiling from the same directory. So we just\n         // hash the result of the mapping instead of the mapping itself.\n-        let mut source_file_names: Vec<_> = codemap\n+        let mut source_file_names: Vec<_> = source_map\n             .files()\n             .iter()\n             .filter(|source_file| CrateNum::from_u32(source_file.crate_of_origin) == LOCAL_CRATE)"}, {"sha": "6c958823d3f92f18d10eaeedff3db230036e543e", "filename": "src/librustc/ich/caching_codemap_view.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fcaching_codemap_view.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -24,14 +24,14 @@ struct CacheEntry {\n \n #[derive(Clone)]\n pub struct CachingCodemapView<'cm> {\n-    codemap: &'cm SourceMap,\n+    source_map: &'cm SourceMap,\n     line_cache: [CacheEntry; 3],\n     time_stamp: usize,\n }\n \n impl<'cm> CachingCodemapView<'cm> {\n-    pub fn new(codemap: &'cm SourceMap) -> CachingCodemapView<'cm> {\n-        let files = codemap.files();\n+    pub fn new(source_map: &'cm SourceMap) -> CachingCodemapView<'cm> {\n+        let files = source_map.files();\n         let first_file = files[0].clone();\n         let entry = CacheEntry {\n             time_stamp: 0,\n@@ -43,7 +43,7 @@ impl<'cm> CachingCodemapView<'cm> {\n         };\n \n         CachingCodemapView {\n-            codemap,\n+            source_map,\n             line_cache: [entry.clone(), entry.clone(), entry.clone()],\n             time_stamp: 0,\n         }\n@@ -78,9 +78,9 @@ impl<'cm> CachingCodemapView<'cm> {\n         // If the entry doesn't point to the correct file, fix it up\n         if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n             let file_valid;\n-            if self.codemap.files().len() > 0 {\n-                let file_index = self.codemap.lookup_source_file_idx(pos);\n-                let file = self.codemap.files()[file_index].clone();\n+            if self.source_map.files().len() > 0 {\n+                let file_index = self.source_map.lookup_source_file_idx(pos);\n+                let file = self.source_map.files()[file_index].clone();\n \n                 if pos >= file.start_pos && pos < file.end_pos {\n                     cache_entry.file = file;"}, {"sha": "e496dbb17f6f2f1b5f0f2bbb41cd1968bef69e64", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -58,8 +58,8 @@ pub struct StableHashingContext<'a> {\n \n     // Very often, we are hashing something that does not need the\n     // CachingCodemapView, so we initialize it lazily.\n-    raw_codemap: &'a SourceMap,\n-    caching_codemap: Option<CachingCodemapView<'a>>,\n+    raw_source_map: &'a SourceMap,\n+    caching_source_map: Option<CachingCodemapView<'a>>,\n \n     pub(super) alloc_id_recursion_tracker: FxHashSet<AllocId>,\n }\n@@ -100,8 +100,8 @@ impl<'a> StableHashingContext<'a> {\n             body_resolver: BodyResolver(krate),\n             definitions,\n             cstore,\n-            caching_codemap: None,\n-            raw_codemap: sess.source_map(),\n+            caching_source_map: None,\n+            raw_source_map: sess.source_map(),\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n@@ -170,12 +170,12 @@ impl<'a> StableHashingContext<'a> {\n \n     #[inline]\n     pub fn source_map(&mut self) -> &mut CachingCodemapView<'a> {\n-        match self.caching_codemap {\n+        match self.caching_source_map {\n             Some(ref mut cm) => {\n                 cm\n             }\n             ref mut none => {\n-                *none = Some(CachingCodemapView::new(self.raw_codemap));\n+                *none = Some(CachingCodemapView::new(self.raw_source_map));\n                 none.as_mut().unwrap()\n             }\n         }"}, {"sha": "78f7de0092dba3e7f3c35702ae79a676baf2ab79", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -980,7 +980,7 @@ pub fn build_session(\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n-    build_session_with_codemap(\n+    build_session_with_source_map(\n         sopts,\n         local_crate_source_file,\n         registry,\n@@ -989,11 +989,11 @@ pub fn build_session(\n     )\n }\n \n-pub fn build_session_with_codemap(\n+pub fn build_session_with_source_map(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: errors::registry::Registry,\n-    codemap: Lrc<source_map::SourceMap>,\n+    source_map: Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n@@ -1020,35 +1020,35 @@ pub fn build_session_with_codemap(\n             (config::ErrorOutputType::HumanReadable(color_config), None) => Box::new(\n                 EmitterWriter::stderr(\n                     color_config,\n-                    Some(codemap.clone()),\n+                    Some(source_map.clone()),\n                     false,\n                     sopts.debugging_opts.teach,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::HumanReadable(_), Some(dst)) => Box::new(\n-                EmitterWriter::new(dst, Some(codemap.clone()), false, false)\n+                EmitterWriter::new(dst, Some(source_map.clone()), false, false)\n                     .ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Json(pretty), None) => Box::new(\n                 JsonEmitter::stderr(\n                     Some(registry),\n-                    codemap.clone(),\n+                    source_map.clone(),\n                     pretty,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n                 JsonEmitter::new(\n                     dst,\n                     Some(registry),\n-                    codemap.clone(),\n+                    source_map.clone(),\n                     pretty,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Short(color_config), None) => Box::new(\n-                EmitterWriter::stderr(color_config, Some(codemap.clone()), true, false),\n+                EmitterWriter::stderr(color_config, Some(source_map.clone()), true, false),\n             ),\n             (config::ErrorOutputType::Short(_), Some(dst)) => {\n-                Box::new(EmitterWriter::new(dst, Some(codemap.clone()), true, false))\n+                Box::new(EmitterWriter::new(dst, Some(source_map.clone()), true, false))\n             }\n         };\n \n@@ -1063,14 +1063,14 @@ pub fn build_session_with_codemap(\n         },\n     );\n \n-    build_session_(sopts, local_crate_source_file, diagnostic_handler, codemap)\n+    build_session_(sopts, local_crate_source_file, diagnostic_handler, source_map)\n }\n \n pub fn build_session_(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     span_diagnostic: errors::Handler,\n-    codemap: Lrc<source_map::SourceMap>,\n+    source_map: Lrc<source_map::SourceMap>,\n ) -> Session {\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = match Target::search(&host_triple) {\n@@ -1083,7 +1083,7 @@ pub fn build_session_(\n     };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n-    let p_s = parse::ParseSess::with_span_handler(span_diagnostic, codemap);\n+    let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n     let default_sysroot = match sopts.maybe_sysroot {\n         Some(_) => None,\n         None => Some(filesearch::get_or_default_sysroot()),"}, {"sha": "7ccd8574e8326856af383eee0f169e2e583fbf21", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -62,7 +62,7 @@ pub struct OnDiskCache<'sess> {\n     prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     cnum_map: Once<IndexVec<CrateNum, Option<CrateNum>>>,\n \n-    codemap: &'sess SourceMap,\n+    source_map: &'sess SourceMap,\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, StableFilemapId>,\n \n     // These two fields caches that are populated lazily during decoding.\n@@ -140,7 +140,7 @@ impl<'sess> OnDiskCache<'sess> {\n             file_index_to_file: Lock::new(FxHashMap()),\n             prev_cnums: footer.prev_cnums,\n             cnum_map: Once::new(),\n-            codemap: sess.source_map(),\n+            source_map: sess.source_map(),\n             current_diagnostics: Lock::new(FxHashMap()),\n             query_result_index: footer.query_result_index.into_iter().collect(),\n             prev_diagnostics_index: footer.diagnostics_index.into_iter().collect(),\n@@ -149,14 +149,14 @@ impl<'sess> OnDiskCache<'sess> {\n         }\n     }\n \n-    pub fn new_empty(codemap: &'sess SourceMap) -> OnDiskCache<'sess> {\n+    pub fn new_empty(source_map: &'sess SourceMap) -> OnDiskCache<'sess> {\n         OnDiskCache {\n             serialized_data: Vec::new(),\n             file_index_to_stable_id: FxHashMap(),\n             file_index_to_file: Lock::new(FxHashMap()),\n             prev_cnums: vec![],\n             cnum_map: Once::new(),\n-            codemap,\n+            source_map,\n             current_diagnostics: Lock::new(FxHashMap()),\n             query_result_index: FxHashMap(),\n             prev_diagnostics_index: FxHashMap(),\n@@ -196,7 +196,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 expn_info_shorthands: FxHashMap(),\n                 interpret_allocs: FxHashMap(),\n                 interpret_allocs_inverse: Vec::new(),\n-                codemap: CachingCodemapView::new(tcx.sess.source_map()),\n+                source_map: CachingCodemapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n             };\n \n@@ -413,7 +413,7 @@ impl<'sess> OnDiskCache<'sess> {\n         let mut decoder = CacheDecoder {\n             tcx,\n             opaque: opaque::Decoder::new(&self.serialized_data[..], pos.to_usize()),\n-            codemap: self.codemap,\n+            source_map: self.source_map,\n             cnum_map: self.cnum_map.get(),\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n@@ -475,7 +475,7 @@ impl<'sess> OnDiskCache<'sess> {\n struct CacheDecoder<'a, 'tcx: 'a, 'x> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     opaque: opaque::Decoder<'x>,\n-    codemap: &'x SourceMap,\n+    source_map: &'x SourceMap,\n     cnum_map: &'x IndexVec<CrateNum, Option<CrateNum>>,\n     synthetic_expansion_infos: &'x Lock<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n     file_index_to_file: &'x Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n@@ -488,13 +488,13 @@ impl<'a, 'tcx, 'x> CacheDecoder<'a, 'tcx, 'x> {\n         let CacheDecoder {\n             ref file_index_to_file,\n             ref file_index_to_stable_id,\n-            ref codemap,\n+            ref source_map,\n             ..\n         } = *self;\n \n         file_index_to_file.borrow_mut().entry(index).or_insert_with(|| {\n             let stable_id = file_index_to_stable_id[&index];\n-            codemap.source_file_by_stable_id(stable_id)\n+            source_map.source_file_by_stable_id(stable_id)\n                    .expect(\"Failed to lookup SourceFile in new context.\")\n         }).clone()\n     }\n@@ -770,7 +770,7 @@ struct CacheEncoder<'enc, 'a, 'tcx, E>\n     expn_info_shorthands: FxHashMap<Mark, AbsoluteBytePos>,\n     interpret_allocs: FxHashMap<interpret::AllocId, usize>,\n     interpret_allocs_inverse: Vec<interpret::AllocId>,\n-    codemap: CachingCodemapView<'tcx>,\n+    source_map: CachingCodemapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n }\n \n@@ -836,7 +836,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<Span> for CacheEncoder<'enc, 'a, 'tcx\n             return TAG_INVALID_SPAN.encode(self);\n         }\n \n-        let (file_lo, line_lo, col_lo) = match self.codemap\n+        let (file_lo, line_lo, col_lo) = match self.source_map\n                                                    .byte_pos_to_line_and_col(span_data.lo) {\n             Some(pos) => pos,\n             None => {"}, {"sha": "f88c619bf77918454f11db0771c4dc2f7c73de65", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -522,9 +522,9 @@ fn run_compiler_with_pool<'a>(\n     };\n \n     let loader = file_loader.unwrap_or(box RealFileLoader);\n-    let codemap = Lrc::new(SourceMap::with_file_loader(loader, sopts.file_path_mapping()));\n-    let mut sess = session::build_session_with_codemap(\n-        sopts, input_file_path.clone(), descriptions, codemap, emitter_dest,\n+    let source_map = Lrc::new(SourceMap::with_file_loader(loader, sopts.file_path_mapping()));\n+    let mut sess = session::build_session_with_source_map(\n+        sopts, input_file_path.clone(), descriptions, source_map, emitter_dest,\n     );\n \n     if let Some(err) = input_err {"}, {"sha": "c242f8d476a71c2bbbf314984b3f08475c244792", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -245,7 +245,7 @@ impl<'a> CrateLoader<'a> {\n             cnum_map,\n             cnum,\n             dependencies: Lock::new(dependencies),\n-            codemap_import_info: RwLock::new(vec![]),\n+            source_map_import_info: RwLock::new(vec![]),\n             alloc_decoding_state: AllocDecodingState::new(interpret_alloc_index),\n             dep_kind: Lock::new(dep_kind),\n             source: cstore::CrateSource {"}, {"sha": "aad632f89180dd09e52b5fe963f5b82fcba71b03", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -44,11 +44,11 @@ pub struct MetadataBlob(pub MetadataRef);\n /// Holds information about a syntax_pos::SourceFile imported from another crate.\n /// See `imported_source_files()` for more information.\n pub struct ImportedSourceFile {\n-    /// This SourceFile's byte-offset within the codemap of its original crate\n+    /// This SourceFile's byte-offset within the source_map of its original crate\n     pub original_start_pos: syntax_pos::BytePos,\n-    /// The end of this SourceFile within the codemap of its original crate\n+    /// The end of this SourceFile within the source_map of its original crate\n     pub original_end_pos: syntax_pos::BytePos,\n-    /// The imported SourceFile's representation within the local codemap\n+    /// The imported SourceFile's representation within the local source_map\n     pub translated_source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n@@ -64,7 +64,7 @@ pub struct CrateMetadata {\n     pub cnum_map: CrateNumMap,\n     pub cnum: CrateNum,\n     pub dependencies: Lock<Vec<CrateNum>>,\n-    pub codemap_import_info: RwLock<Vec<ImportedSourceFile>>,\n+    pub source_map_import_info: RwLock<Vec<ImportedSourceFile>>,\n \n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n     pub alloc_decoding_state: AllocDecodingState,"}, {"sha": "76473ec7781fd64726e9f5c15a09978fdd215ae1", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -1094,49 +1094,49 @@ impl<'a, 'tcx> CrateMetadata {\n         self.def_path_table.def_path_hash(index)\n     }\n \n-    /// Imports the codemap from an external crate into the codemap of the crate\n+    /// Imports the source_map from an external crate into the source_map of the crate\n     /// currently being compiled (the \"local crate\").\n     ///\n     /// The import algorithm works analogous to how AST items are inlined from an\n     /// external crate's metadata:\n-    /// For every SourceFile in the external codemap an 'inline' copy is created in the\n-    /// local codemap. The correspondence relation between external and local\n+    /// For every SourceFile in the external source_map an 'inline' copy is created in the\n+    /// local source_map. The correspondence relation between external and local\n     /// SourceFiles is recorded in the `ImportedSourceFile` objects returned from this\n     /// function. When an item from an external crate is later inlined into this\n     /// crate, this correspondence information is used to translate the span\n     /// information of the inlined item so that it refers the correct positions in\n-    /// the local codemap (see `<decoder::DecodeContext as SpecializedDecoder<Span>>`).\n+    /// the local source_map (see `<decoder::DecodeContext as SpecializedDecoder<Span>>`).\n     ///\n     /// The import algorithm in the function below will reuse SourceFiles already\n-    /// existing in the local codemap. For example, even if the SourceFile of some\n+    /// existing in the local source_map. For example, even if the SourceFile of some\n     /// source file of libstd gets imported many times, there will only ever be\n-    /// one SourceFile object for the corresponding file in the local codemap.\n+    /// one SourceFile object for the corresponding file in the local source_map.\n     ///\n     /// Note that imported SourceFiles do not actually contain the source code of the\n     /// file they represent, just information about length, line breaks, and\n     /// multibyte characters. This information is enough to generate valid debuginfo\n     /// for items inlined from other crates.\n     pub fn imported_source_files(&'a self,\n-                             local_codemap: &source_map::SourceMap)\n+                             local_source_map: &source_map::SourceMap)\n                              -> ReadGuard<'a, Vec<cstore::ImportedSourceFile>> {\n         {\n-            let source_files = self.codemap_import_info.borrow();\n+            let source_files = self.source_map_import_info.borrow();\n             if !source_files.is_empty() {\n                 return source_files;\n             }\n         }\n \n-        // Lock the codemap_import_info to ensure this only happens once\n-        let mut codemap_import_info = self.codemap_import_info.borrow_mut();\n+        // Lock the source_map_import_info to ensure this only happens once\n+        let mut source_map_import_info = self.source_map_import_info.borrow_mut();\n \n-        if !codemap_import_info.is_empty() {\n-            drop(codemap_import_info);\n-            return self.codemap_import_info.borrow();\n+        if !source_map_import_info.is_empty() {\n+            drop(source_map_import_info);\n+            return self.source_map_import_info.borrow();\n         }\n \n-        let external_codemap = self.root.codemap.decode(self);\n+        let external_source_map = self.root.source_map.decode(self);\n \n-        let imported_source_files = external_codemap.map(|source_file_to_import| {\n+        let imported_source_files = external_source_map.map(|source_file_to_import| {\n             // We can't reuse an existing SourceFile, so allocate a new one\n             // containing the information we need.\n             let syntax_pos::SourceFile { name,\n@@ -1167,7 +1167,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 *swc = *swc - start_pos;\n             }\n \n-            let local_version = local_codemap.new_imported_source_file(name,\n+            let local_version = local_source_map.new_imported_source_file(name,\n                                                                    name_was_remapped,\n                                                                    self.cnum.as_u32(),\n                                                                    src_hash,\n@@ -1189,10 +1189,10 @@ impl<'a, 'tcx> CrateMetadata {\n             }\n         }).collect();\n \n-        *codemap_import_info = imported_source_files;\n-        drop(codemap_import_info);\n+        *source_map_import_info = imported_source_files;\n+        drop(source_map_import_info);\n \n         // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n-        self.codemap_import_info.borrow()\n+        self.source_map_import_info.borrow()\n     }\n }"}, {"sha": "4b5c9d68fd7f2e018bd188868ef8e2a18670f96f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -158,9 +158,9 @@ impl<'a, 'tcx> SpecializedEncoder<Span> for EncodeContext<'a, 'tcx> {\n         debug_assert!(span.lo <= span.hi);\n \n         if !self.source_file_cache.contains(span.lo) {\n-            let codemap = self.tcx.sess.source_map();\n-            let source_file_index = codemap.lookup_source_file_idx(span.lo);\n-            self.source_file_cache = codemap.files()[source_file_index].clone();\n+            let source_map = self.tcx.sess.source_map();\n+            let source_file_index = source_map.lookup_source_file_idx(span.lo);\n+            self.source_file_cache = source_map.files()[source_file_index].clone();\n         }\n \n         if !self.source_file_cache.contains(span.hi) {\n@@ -338,8 +338,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_source_map(&mut self) -> LazySeq<syntax_pos::SourceFile> {\n-        let codemap = self.tcx.sess.source_map();\n-        let all_source_files = codemap.files();\n+        let source_map = self.tcx.sess.source_map();\n+        let all_source_files = source_map.files();\n \n         let (working_dir, working_dir_was_remapped) = self.tcx.sess.working_dir.clone();\n \n@@ -418,10 +418,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             IsolatedEncoder::encode_foreign_modules,\n             ());\n \n-        // Encode codemap\n+        // Encode source_map\n         i = self.position();\n-        let codemap = self.encode_source_map();\n-        let codemap_bytes = self.position() - i;\n+        let source_map = self.encode_source_map();\n+        let source_map_bytes = self.position() - i;\n \n         // Encode DefPathTable\n         i = self.position();\n@@ -523,7 +523,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             lang_items_missing,\n             native_libraries,\n             foreign_modules,\n-            codemap,\n+            source_map,\n             def_path_table,\n             impls,\n             exported_symbols,\n@@ -546,7 +546,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"     lib feature bytes: {}\", lib_feature_bytes);\n             println!(\"       lang item bytes: {}\", lang_item_bytes);\n             println!(\"          native bytes: {}\", native_lib_bytes);\n-            println!(\"         codemap bytes: {}\", codemap_bytes);\n+            println!(\"         source_map bytes: {}\", source_map_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n             println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             println!(\"  def-path table bytes: {}\", def_path_table_bytes);"}, {"sha": "8e454ddc0adc4589be929da3c4e09af60e110c44", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -204,7 +204,7 @@ pub struct CrateRoot {\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n     pub native_libraries: LazySeq<NativeLibrary>,\n     pub foreign_modules: LazySeq<ForeignModule>,\n-    pub codemap: LazySeq<syntax_pos::SourceFile>,\n+    pub source_map: LazySeq<syntax_pos::SourceFile>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n     pub exported_symbols: EncodedExportedSymbols,"}, {"sha": "532c36f427b5a1ad62c79607b4b2eadc4e44f75a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -383,8 +383,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         let region_name = self.synthesize_region_name(counter);\n \n                         // Just grab the first character, the `&`.\n-                        let codemap = tcx.sess.source_map();\n-                        let ampersand_span = codemap.start_point(hir_ty.span);\n+                        let source_map = tcx.sess.source_map();\n+                        let ampersand_span = source_map.start_point(hir_ty.span);\n \n                         diag.span_label(\n                             ampersand_span,"}, {"sha": "282589c4e68cf4c6462b5ab6a24a9467a83c0b1a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -414,7 +414,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n ///\n /// Attention: The method used is very fragile since it essentially duplicates the work of the\n /// parser. If you need to use this function or something similar, please consider updating the\n-/// codemap functions and this function to something more robust.\n+/// source_map functions and this function to something more robust.\n fn reduce_impl_span_to_impl_keyword(cm: &SourceMap, impl_span: Span) -> Span {\n     let impl_span = cm.span_until_char(impl_span, '<');\n     let impl_span = cm.span_until_whitespace(impl_span);"}, {"sha": "de211d2209c9a085961f5a1f0592863b1ad7a4e7", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Err(()) => {\n                 // error types are considered \"builtin\"\n                 if !lhs_ty.references_error() {\n-                    let codemap = self.tcx.sess.source_map();\n+                    let source_map = self.tcx.sess.source_map();\n                     match is_assign {\n                         IsAssign::Yes => {\n                             let mut err = struct_span_err!(self.tcx.sess, expr.span, E0368,\n@@ -275,7 +275,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                               Op::Binary(op, is_assign))\n                                             .is_ok()\n                                 } {\n-                                    if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n+                                    if let Ok(lstring) = source_map.span_to_snippet(lhs_expr.span) {\n                                         while let TyRef(_, rty_inner, _) = rty.sty {\n                                             rty = rty_inner;\n                                         }\n@@ -343,7 +343,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                               Op::Binary(op, is_assign))\n                                             .is_ok()\n                                 } {\n-                                    if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n+                                    if let Ok(lstring) = source_map.span_to_snippet(lhs_expr.span) {\n                                         while let TyRef(_, rty_inner, _) = rty.sty {\n                                             rty = rty_inner;\n                                         }\n@@ -420,7 +420,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         err: &mut errors::DiagnosticBuilder,\n         is_assign: bool,\n     ) -> bool {\n-        let codemap = self.tcx.sess.source_map();\n+        let source_map = self.tcx.sess.source_map();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n                    appends the string on the right to the string \\\n@@ -434,7 +434,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if !is_assign {\n                     err.span_label(expr.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n-                    match codemap.span_to_snippet(lhs_expr.span) {\n+                    match source_map.span_to_snippet(lhs_expr.span) {\n                         Ok(lstring) => err.span_suggestion(lhs_expr.span,\n                                                            msg,\n                                                            format!(\"{}.to_owned()\", lstring)),\n@@ -448,8 +448,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n                 match (\n-                    codemap.span_to_snippet(lhs_expr.span),\n-                    codemap.span_to_snippet(rhs_expr.span),\n+                    source_map.span_to_snippet(lhs_expr.span),\n+                    source_map.span_to_snippet(rhs_expr.span),\n                     is_assign,\n                 ) {\n                     (Ok(l), Ok(r), false) => {"}, {"sha": "a312913a69c17bf2ffd23e18acd40a608d6cdee3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -260,7 +260,7 @@ impl DocAccessLevels for AccessLevels<DefId> {\n ///\n /// If the given `error_format` is `ErrorOutputType::Json` and no `SourceMap` is given, a new one\n /// will be created for the handler.\n-pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<source_map::SourceMap>>)\n+pub fn new_handler(error_format: ErrorOutputType, source_map: Option<Lrc<source_map::SourceMap>>)\n     -> errors::Handler\n {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n@@ -270,26 +270,26 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<source_map\n         ErrorOutputType::HumanReadable(color_config) => Box::new(\n             EmitterWriter::stderr(\n                 color_config,\n-                codemap.map(|cm| cm as _),\n+                source_map.map(|cm| cm as _),\n                 false,\n                 sessopts.debugging_opts.teach,\n             ).ui_testing(sessopts.debugging_opts.ui_testing)\n         ),\n         ErrorOutputType::Json(pretty) => {\n-            let codemap = codemap.unwrap_or_else(\n+            let source_map = source_map.unwrap_or_else(\n                 || Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping())));\n             Box::new(\n                 JsonEmitter::stderr(\n                     None,\n-                    codemap,\n+                    source_map,\n                     pretty,\n                 ).ui_testing(sessopts.debugging_opts.ui_testing)\n             )\n         },\n         ErrorOutputType::Short(color_config) => Box::new(\n             EmitterWriter::stderr(\n                 color_config,\n-                codemap.map(|cm| cm as _),\n+                source_map.map(|cm| cm as _),\n                 true,\n                 false)\n         ),\n@@ -387,11 +387,11 @@ pub fn run_core(search_paths: SearchPaths,\n         ..Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n-        let codemap = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n-        let diagnostic_handler = new_handler(error_format, Some(codemap.clone()));\n+        let source_map = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n+        let diagnostic_handler = new_handler(error_format, Some(source_map.clone()));\n \n         let mut sess = session::build_session_(\n-            sessopts, cpath, diagnostic_handler, codemap,\n+            sessopts, cpath, diagnostic_handler, source_map,\n         );\n \n         lint::builtin::HardwiredLints.get_lints()"}, {"sha": "2a9ad6c7f33b2e28298ca3a7e790c007df4ba88d", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -60,7 +60,7 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>,\n /// each span of text in sequence.\n struct Classifier<'a> {\n     lexer: lexer::StringReader<'a>,\n-    codemap: &'a SourceMap,\n+    source_map: &'a SourceMap,\n \n     // State of the classifier.\n     in_attribute: bool,\n@@ -145,10 +145,10 @@ impl<U: Write> Writer for U {\n }\n \n impl<'a> Classifier<'a> {\n-    fn new(lexer: lexer::StringReader<'a>, codemap: &'a SourceMap) -> Classifier<'a> {\n+    fn new(lexer: lexer::StringReader<'a>, source_map: &'a SourceMap) -> Classifier<'a> {\n         Classifier {\n             lexer,\n-            codemap,\n+            source_map,\n             in_attribute: false,\n             in_macro: false,\n             in_macro_nonterminal: false,\n@@ -338,9 +338,9 @@ impl<'a> Classifier<'a> {\n         out.string(Escape(&self.snip(tas.sp)), klass)\n     }\n \n-    // Helper function to get a snippet from the codemap.\n+    // Helper function to get a snippet from the source_map.\n     fn snip(&self, sp: Span) -> String {\n-        self.codemap.span_to_snippet(sp).unwrap()\n+        self.source_map.span_to_snippet(sp).unwrap()\n     }\n }\n "}, {"sha": "3b07a2ccdde09379e8e10fd706d8db6b733f80ca", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -86,14 +86,14 @@ pub fn run(input_path: &Path,\n         ..config::Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, |sessopts| {\n-        let codemap = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n+        let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let handler =\n             errors::Handler::with_tty_emitter(ColorConfig::Auto,\n                                             true, false,\n-                                            Some(codemap.clone()));\n+                                            Some(source_map.clone()));\n \n         let mut sess = session::build_session_(\n-            sessopts, Some(input_path.to_owned()), handler, codemap.clone(),\n+            sessopts, Some(input_path.to_owned()), handler, source_map.clone(),\n         );\n         let codegen_backend = rustc_driver::get_codegen_backend(&sess);\n         let cstore = CStore::new(codegen_backend.metadata_loader());\n@@ -133,7 +133,7 @@ pub fn run(input_path: &Path,\n             false,\n             opts,\n             maybe_sysroot,\n-            Some(codemap),\n+            Some(source_map),\n              None,\n             linker,\n             edition\n@@ -262,19 +262,19 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n-        let codemap = Lrc::new(SourceMap::new_doctest(\n+        let source_map = Lrc::new(SourceMap::new_doctest(\n             sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n         ));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n-                                                        Some(codemap.clone()),\n+                                                        Some(source_map.clone()),\n                                                         false,\n                                                         false);\n \n         // Compile the code\n         let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n         let mut sess = session::build_session_(\n-            sessopts, None, diagnostic_handler, codemap,\n+            sessopts, None, diagnostic_handler, source_map,\n         );\n         let codegen_backend = rustc_driver::get_codegen_backend(&sess);\n         let cstore = CStore::new(codegen_backend.metadata_loader());\n@@ -500,7 +500,7 @@ pub struct Collector {\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n     position: Span,\n-    codemap: Option<Lrc<SourceMap>>,\n+    source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n     edition: Edition,\n@@ -509,7 +509,7 @@ pub struct Collector {\n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, cg: CodegenOptions,\n                externs: Externs, use_headers: bool, opts: TestOptions,\n-               maybe_sysroot: Option<PathBuf>, codemap: Option<Lrc<SourceMap>>,\n+               maybe_sysroot: Option<PathBuf>, source_map: Option<Lrc<SourceMap>>,\n                filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n@@ -523,7 +523,7 @@ impl Collector {\n             opts,\n             maybe_sysroot,\n             position: DUMMY_SP,\n-            codemap,\n+            source_map,\n             filename,\n             linker,\n             edition,\n@@ -589,9 +589,9 @@ impl Collector {\n     }\n \n     pub fn get_line(&self) -> usize {\n-        if let Some(ref codemap) = self.codemap {\n+        if let Some(ref source_map) = self.source_map {\n             let line = self.position.lo().to_usize();\n-            let line = codemap.lookup_char_pos(BytePos(line as u32)).line;\n+            let line = source_map.lookup_char_pos(BytePos(line as u32)).line;\n             if line > 0 { line - 1 } else { line }\n         } else {\n             0\n@@ -603,8 +603,8 @@ impl Collector {\n     }\n \n     fn get_filename(&self) -> FileName {\n-        if let Some(ref codemap) = self.codemap {\n-            let filename = codemap.span_to_filename(self.position);\n+        if let Some(ref source_map) = self.source_map {\n+            let filename = source_map.span_to_filename(self.position);\n             if let FileName::Real(ref filename) = filename {\n                 if let Ok(cur_dir) = env::current_dir() {\n                     if let Ok(path) = filename.strip_prefix(&cur_dir) {"}, {"sha": "434548ffd9d4b235be432add996b03718734059d", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -43,9 +43,9 @@ impl Default for TokenAndSpan {\n \n pub struct StringReader<'a> {\n     pub sess: &'a ParseSess,\n-    /// The absolute offset within the codemap of the next character to read\n+    /// The absolute offset within the source_map of the next character to read\n     pub next_pos: BytePos,\n-    /// The absolute offset within the codemap of the current character\n+    /// The absolute offset within the source_map of the current character\n     pub pos: BytePos,\n     /// The current character (which has been read from self.pos)\n     pub ch: Option<char>,"}, {"sha": "e3a2c83e4c2cdc47baf889be1c0758688d91f97a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -189,7 +189,7 @@ pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path) -> Parser<'a>\n }\n \n /// Given a session, a crate config, a path, and a span, add\n-/// the file at the given path to the codemap, and return a parser.\n+/// the file at the given path to the source_map, and return a parser.\n /// On an error, use the given span as the source of the problem.\n crate fn new_sub_parser_from_file<'a>(sess: &'a ParseSess,\n                                     path: &Path,\n@@ -224,7 +224,7 @@ pub fn new_parser_from_tts(sess: &ParseSess, tts: Vec<TokenTree>) -> Parser {\n // base abstractions\n \n /// Given a session and a path and an optional span (for error reporting),\n-/// add the path to the session's codemap and return the new source_file.\n+/// add the path to the session's source_map and return the new source_file.\n fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n                    -> Lrc<SourceFile> {\n     match sess.source_map().load_file(path) {"}, {"sha": "b1e2e69863d97107b5db07753ece874390b6a8a3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -6322,7 +6322,7 @@ impl<'a> Parser<'a> {\n         id: ast::Ident,\n         relative: Option<ast::Ident>,\n         dir_path: &Path,\n-        codemap: &SourceMap) -> ModulePath\n+        source_map: &SourceMap) -> ModulePath\n     {\n         // If we're in a foo.rs file instead of a mod.rs file,\n         // we need to look for submodules in\n@@ -6342,8 +6342,8 @@ impl<'a> Parser<'a> {\n                                          relative_prefix, mod_name, path::MAIN_SEPARATOR);\n         let default_path = dir_path.join(&default_path_str);\n         let secondary_path = dir_path.join(&secondary_path_str);\n-        let default_exists = codemap.file_exists(&default_path);\n-        let secondary_exists = codemap.file_exists(&secondary_path);\n+        let default_exists = source_map.file_exists(&default_path);\n+        let secondary_exists = source_map.file_exists(&secondary_path);\n \n         let result = match (default_exists, secondary_exists) {\n             (true, false) => Ok(ModulePathSuccess {"}, {"sha": "457a44b9cbb8417cb6f6b07aec46e1b0187ba7f0", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -206,7 +206,7 @@ impl SourceMap {\n         match self.files.borrow().file_maps.last() {\n             None => 0,\n             // Add one so there is some space between files. This lets us distinguish\n-            // positions in the codemap, even in the presence of zero-length files.\n+            // positions in the source_map, even in the presence of zero-length files.\n             Some(last) => last.end_pos.to_usize() + 1,\n         }\n     }\n@@ -895,7 +895,7 @@ impl SourceMap {\n     ///\n     /// Attention: The method used is very fragile since it essentially duplicates the work of the\n     /// parser. If you need to use this function or something similar, please consider updating the\n-    /// codemap functions and this function to something more robust.\n+    /// source_map functions and this function to something more robust.\n     pub fn generate_local_type_param_snippet(&self, span: Span) -> Option<(Span, String)> {\n         // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n         // signature"}, {"sha": "1210f331b285b7c4d7fd820c81076b2800c16e50", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -21,7 +21,7 @@ use ptr::P;\n use tokenstream::TokenStream;\n \n /// Craft a span that will be ignored by the stability lint's\n-/// call to codemap's `is_internal` check.\n+/// call to source_map's `is_internal` check.\n /// The expanded code uses the unstable `#[prelude_import]` attribute.\n fn ignored_span(sp: Span) -> Span {\n     let mark = Mark::fresh(Mark::root());"}, {"sha": "988f50b4f0c9ed845d7d5d3ac0cd8386e06ea966", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -324,7 +324,7 @@ fn generate_test_harness(sess: &ParseSess,\n }\n \n /// Craft a span that will be ignored by the stability lint's\n-/// call to codemap's `is_internal` check.\n+/// call to source_map's `is_internal` check.\n /// The expanded code calls some unstable functions in the test crate.\n fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n     sp.with_ctxt(cx.ctxt)"}, {"sha": "bd70344b018127992879e1f0684868c91cad8035", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -162,11 +162,11 @@ impl FileName {\n }\n \n /// Spans represent a region of code, used for error reporting. Positions in spans\n-/// are *absolute* positions from the beginning of the codemap, not positions\n+/// are *absolute* positions from the beginning of the source_map, not positions\n /// relative to SourceFiles. Methods on the SourceMap can be used to relate spans back\n /// to the original source.\n /// You must be careful if the span crosses more than one file - you will not be\n-/// able to use many of the functions on spans in codemap and you cannot assume\n+/// able to use many of the functions on spans in source_map and you cannot assume\n /// that the length of the span = hi - lo; there may be space in the BytePos\n /// range between files.\n ///"}, {"sha": "646a388c8776e505d6836fce1c21f6a09e274f6f", "filename": "src/test/incremental/span_hash_stable/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // This test makes sure that it doesn't make a difference in which order we are\n-// adding source files to the codemap. The order affects the BytePos values of\n+// adding source files to the source_map. The order affects the BytePos values of\n // the spans and this test makes sure that we handle them correctly by hashing\n // file:line:column instead of raw byte offset.\n "}, {"sha": "7edb3e0f8a08314191df44482ba9a58d53ca9cea", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n                 _: intravisit::FnKind<'tcx>,\n                 _: &'tcx hir::FnDecl,\n                 _: &'tcx hir::Body,\n-                span: codemap::Span,\n+                span: source_map::Span,\n                 id: ast::NodeId) {\n \n         let item = match cx.tcx.hir.get(id) {"}, {"sha": "f06d22d985f49f176f5c88da18d14aab87e7873c", "filename": "src/test/ui/cfg-empty-codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-empty-codemap.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that empty codemaps don't ICE (#23301)\n+// Tests that empty source_maps don't ICE (#23301)\n \n // compile-flags: --cfg \"\"\n "}, {"sha": "1efd9ba8e55ebcee3886695c4098184e53da3f09", "filename": "src/test/ui/mod/mod_file_correct_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fui%2Fmod%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062bfbf39bef9360e1553f293f4f1015c5680dec/src%2Ftest%2Fui%2Fmod%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_correct_spans.rs?ref=062bfbf39bef9360e1553f293f4f1015c5680dec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Testing that the codemap is maintained correctly when parsing mods from external files\n+// Testing that the source_map is maintained correctly when parsing mods from external files\n \n mod mod_file_aux;\n "}]}