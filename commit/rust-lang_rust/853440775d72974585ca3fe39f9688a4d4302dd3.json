{"sha": "853440775d72974585ca3fe39f9688a4d4302dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MzQ0MDc3NWQ3Mjk3NDU4NWNhM2ZlMzlmOTY4OGE0ZDQzMDJkZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-13T14:33:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-13T14:33:32Z"}, "message": "Merge #5342\n\n5342: Don't copy-paste `impl_froms` into every crate r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "89272d8f03145df99fe68f0e35f8892dc4ab2c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89272d8f03145df99fe68f0e35f8892dc4ab2c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853440775d72974585ca3fe39f9688a4d4302dd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDHC8CRBK7hj4Ov3rIwAAdHIIACFoUsImNEvfQzw0rHcQPbdQ\neM86iI8i2Mam8GkzcoWWKPLOUd7ffyAzUkBpo+yx291qeF96n40e+aMBZkPycoW1\nBYmMmAjHOgNfSBU/tFobbI8ZnIymSy3lXMe3PnCKO1euYAjf4pL62/A8EvfOIjhy\nZpGIeqyb3mYdnD8taXBCMNojQV0kQrgOxRBYvyUGPkFpahQO2aeMt05qqkhCfkSX\n917IL9e+qVCoVqArt9vkTaIWn559MrZMT+1H4G+8Q6RtoTysvaiCt/+k2cmyf8oX\nKqZHyv24hM0GpWfALhJo5kG1dvNLFQV/fYRPOJr+z9Q+Ojbhk6CRy0VLVwWmSFc=\n=S7MK\n-----END PGP SIGNATURE-----\n", "payload": "tree 89272d8f03145df99fe68f0e35f8892dc4ab2c72\nparent 4b1c3724364ff538acdcb44bdd23d501ef54cff3\nparent 693ac892f2db5db1ce7cf86db7bf6207b3515c42\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594650812 +0000\ncommitter GitHub <noreply@github.com> 1594650812 +0000\n\nMerge #5342\n\n5342: Don't copy-paste `impl_froms` into every crate r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853440775d72974585ca3fe39f9688a4d4302dd3", "html_url": "https://github.com/rust-lang/rust/commit/853440775d72974585ca3fe39f9688a4d4302dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853440775d72974585ca3fe39f9688a4d4302dd3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1c3724364ff538acdcb44bdd23d501ef54cff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1c3724364ff538acdcb44bdd23d501ef54cff3", "html_url": "https://github.com/rust-lang/rust/commit/4b1c3724364ff538acdcb44bdd23d501ef54cff3"}, {"sha": "693ac892f2db5db1ce7cf86db7bf6207b3515c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/693ac892f2db5db1ce7cf86db7bf6207b3515c42", "html_url": "https://github.com/rust-lang/rust/commit/693ac892f2db5db1ce7cf86db7bf6207b3515c42"}], "stats": {"total": 215, "additions": 90, "deletions": 125}, "files": [{"sha": "2c19b3cde36f5aa4766ef047b14f4d981a51438a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -1081,6 +1081,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"rustc-hash\",\n+ \"stdx\",\n ]\n \n [[package]]\n@@ -1333,6 +1334,7 @@ name = \"ra_tt\"\n version = \"0.1.0\"\n dependencies = [\n  \"smol_str\",\n+ \"stdx\",\n ]\n \n [[package]]"}, {"sha": "512676c996d2ced90fba0331c44f3f875a68570e", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -15,6 +15,7 @@ arrayvec = \"0.5.1\"\n \n itertools = \"0.9.0\"\n \n+stdx = { path = \"../stdx\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }\n ra_prof = { path = \"../ra_prof\" }"}, {"sha": "9222009fecadcae2b006a6a8a366813f492a3815", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -38,6 +38,7 @@ use ra_syntax::{\n     AstNode,\n };\n use rustc_hash::FxHashSet;\n+use stdx::impl_from;\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n@@ -142,8 +143,8 @@ pub enum ModuleDef {\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n }\n-impl_froms!(\n-    ModuleDef: Module,\n+impl_from!(\n+    Module,\n     Function,\n     Adt(Struct, Enum, Union),\n     EnumVariant,\n@@ -152,6 +153,7 @@ impl_froms!(\n     Trait,\n     TypeAlias,\n     BuiltinType\n+    for ModuleDef\n );\n \n impl ModuleDef {\n@@ -541,7 +543,7 @@ pub enum Adt {\n     Union(Union),\n     Enum(Enum),\n }\n-impl_froms!(Adt: Struct, Union, Enum);\n+impl_from!(Struct, Union, Enum for Adt);\n \n impl Adt {\n     pub fn has_non_default_type_params(self, db: &dyn HirDatabase) -> bool {\n@@ -584,7 +586,7 @@ pub enum VariantDef {\n     Union(Union),\n     EnumVariant(EnumVariant),\n }\n-impl_froms!(VariantDef: Struct, Union, EnumVariant);\n+impl_from!(Struct, Union, EnumVariant for VariantDef);\n \n impl VariantDef {\n     pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n@@ -627,8 +629,7 @@ pub enum DefWithBody {\n     Static(Static),\n     Const(Const),\n }\n-\n-impl_froms!(DefWithBody: Function, Const, Static);\n+impl_from!(Function, Const, Static for DefWithBody);\n \n impl DefWithBody {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n@@ -930,14 +931,15 @@ pub enum GenericDef {\n     // consts can have type parameters from their parents (i.e. associated consts of traits)\n     Const(Const),\n }\n-impl_froms!(\n-    GenericDef: Function,\n+impl_from!(\n+    Function,\n     Adt(Struct, Enum, Union),\n     Trait,\n     TypeAlias,\n     ImplDef,\n     EnumVariant,\n     Const\n+    for GenericDef\n );\n \n impl GenericDef {\n@@ -1578,8 +1580,8 @@ pub enum AttrDef {\n     MacroDef(MacroDef),\n }\n \n-impl_froms!(\n-    AttrDef: Module,\n+impl_from!(\n+    Module,\n     Field,\n     Adt(Struct, Enum, Union),\n     EnumVariant,\n@@ -1589,6 +1591,7 @@ impl_froms!(\n     Trait,\n     TypeAlias,\n     MacroDef\n+    for AttrDef\n );\n \n pub trait HasAttrs {"}, {"sha": "7d9b174b4fbc40d383094564c862e8858776736e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -19,25 +19,6 @@\n \n #![recursion_limit = \"512\"]\n \n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident $(($($sv:ident),*))?),*$(,)?) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-            $($(\n-                impl From<$sv> for $e {\n-                    fn from(it: $sv) -> $e {\n-                        $e::$v($v::$sv(it))\n-                    }\n-                }\n-            )*)?\n-        )*\n-    }\n-}\n-\n mod semantics;\n pub mod db;\n mod source_analyzer;"}, {"sha": "42e5a1bdbeb1e7aa90e548a3b64137aeb4ffec52", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -16,6 +16,7 @@ use ra_syntax::{\n     match_ast, AstNode, SyntaxNode,\n };\n use rustc_hash::FxHashMap;\n+use stdx::impl_from;\n \n use crate::{db::HirDatabase, InFile, MacroDefId};\n \n@@ -255,8 +256,7 @@ pub(crate) enum ChildContainer {\n     /// here the children generic parameters, and not, eg enum variants.\n     GenericDefId(GenericDefId),\n }\n-impl_froms! {\n-    ChildContainer:\n+impl_from! {\n     DefWithBodyId,\n     ModuleId,\n     TraitId,\n@@ -265,6 +265,7 @@ impl_froms! {\n     VariantId,\n     TypeAliasId,\n     GenericDefId\n+    for ChildContainer\n }\n \n impl ChildContainer {"}, {"sha": "b71d626c331704920314040bece22315ab449a1b", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -65,6 +65,7 @@ use item_tree::{\n     Const, Enum, Function, Impl, ItemTreeId, ItemTreeNode, ModItem, Static, Struct, Trait,\n     TypeAlias, Union,\n };\n+use stdx::impl_from;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n@@ -223,25 +224,6 @@ pub struct TypeParamId {\n \n pub type LocalTypeParamId = Idx<generics::TypeParamData>;\n \n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-            $($(\n-                impl From<$sv> for $e {\n-                    fn from(it: $sv) -> $e {\n-                        $e::$v($v::$sv(it))\n-                    }\n-                }\n-            )*)?\n-        )*\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),\n@@ -254,7 +236,7 @@ pub enum AssocContainerId {\n     ImplId(ImplId),\n     TraitId(TraitId),\n }\n-impl_froms!(AssocContainerId: ContainerId);\n+impl_from!(ContainerId for AssocContainerId);\n \n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -263,7 +245,7 @@ pub enum AdtId {\n     UnionId(UnionId),\n     EnumId(EnumId),\n }\n-impl_froms!(AdtId: StructId, UnionId, EnumId);\n+impl_from!(StructId, UnionId, EnumId for AdtId);\n \n /// The defs which can be visible in the module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -279,8 +261,8 @@ pub enum ModuleDefId {\n     TypeAliasId(TypeAliasId),\n     BuiltinType(BuiltinType),\n }\n-impl_froms!(\n-    ModuleDefId: ModuleId,\n+impl_from!(\n+    ModuleId,\n     FunctionId,\n     AdtId(StructId, EnumId, UnionId),\n     EnumVariantId,\n@@ -289,6 +271,7 @@ impl_froms!(\n     TraitId,\n     TypeAliasId,\n     BuiltinType\n+    for ModuleDefId\n );\n \n /// The defs which have a body.\n@@ -299,7 +282,7 @@ pub enum DefWithBodyId {\n     ConstId(ConstId),\n }\n \n-impl_froms!(DefWithBodyId: FunctionId, ConstId, StaticId);\n+impl_from!(FunctionId, ConstId, StaticId for DefWithBodyId);\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItemId {\n@@ -311,7 +294,7 @@ pub enum AssocItemId {\n // sure that you can only turn actual assoc items into AssocItemIds. This would\n // require not implementing From, and instead having some checked way of\n // casting them, and somehow making the constructors private, which would be annoying.\n-impl_froms!(AssocItemId: FunctionId, ConstId, TypeAliasId);\n+impl_from!(FunctionId, ConstId, TypeAliasId for AssocItemId);\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDefId {\n@@ -326,14 +309,15 @@ pub enum GenericDefId {\n     // consts can have type parameters from their parents (i.e. associated consts of traits)\n     ConstId(ConstId),\n }\n-impl_froms!(\n-    GenericDefId: FunctionId,\n+impl_from!(\n+    FunctionId,\n     AdtId(StructId, EnumId, UnionId),\n     TraitId,\n     TypeAliasId,\n     ImplId,\n     EnumVariantId,\n     ConstId\n+    for GenericDefId\n );\n \n impl From<AssocItemId> for GenericDefId {\n@@ -361,8 +345,8 @@ pub enum AttrDefId {\n     ImplId(ImplId),\n }\n \n-impl_froms!(\n-    AttrDefId: ModuleId,\n+impl_from!(\n+    ModuleId,\n     FieldId,\n     AdtId(StructId, EnumId, UnionId),\n     EnumVariantId,\n@@ -373,6 +357,7 @@ impl_froms!(\n     TypeAliasId,\n     MacroDefId,\n     ImplId\n+    for AttrDefId\n );\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -381,7 +366,7 @@ pub enum VariantId {\n     StructId(StructId),\n     UnionId(UnionId),\n }\n-impl_froms!(VariantId: EnumVariantId, StructId, UnionId);\n+impl_from!(EnumVariantId, StructId, UnionId for VariantId);\n \n trait Intern {\n     type ID;"}, {"sha": "2ce4f65cccdfb9ea675c73fd2497c283b4bc9396", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -18,8 +18,6 @@ use std::mem;\n use std::ops::Index;\n use std::sync::Arc;\n \n-use rustc_hash::FxHashMap;\n-\n use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData, StaticData},\n@@ -35,6 +33,8 @@ use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n+use stdx::impl_from;\n \n use super::{\n     primitive::{FloatTy, IntTy},\n@@ -84,8 +84,7 @@ enum ExprOrPatId {\n     ExprId(ExprId),\n     PatId(PatId),\n }\n-\n-impl_froms!(ExprOrPatId: ExprId, PatId);\n+impl_from!(ExprId, PatId for ExprOrPatId);\n \n /// Binding modes inferred for patterns.\n /// https://doc.rust-lang.org/reference/patterns.html#binding-modes"}, {"sha": "2652d200f5f644867ab9765236fe8dfeaabfe030", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -6,25 +6,6 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-            $($(\n-                impl From<$sv> for $e {\n-                    fn from(it: $sv) -> $e {\n-                        $e::$v($v::$sv(it))\n-                    }\n-                }\n-            )*)?\n-        )*\n-    }\n-}\n-\n mod autoderef;\n pub mod primitive;\n pub mod traits;"}, {"sha": "101b8aebe5e54b1a71eaca9619660d7d55dda62a", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -5,10 +5,7 @@\n //!  - Building the type for an item: This happens through the `type_for_def` query.\n //!\n //! This usually involves resolving names, collecting generic arguments etc.\n-use std::iter;\n-use std::sync::Arc;\n-\n-use smallvec::SmallVec;\n+use std::{iter, sync::Arc};\n \n use hir_def::{\n     adt::StructKind,\n@@ -24,6 +21,8 @@ use hir_def::{\n use hir_expand::name::Name;\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n+use smallvec::SmallVec;\n+use stdx::impl_from;\n use test_utils::mark;\n \n use crate::{\n@@ -1110,7 +1109,7 @@ pub enum CallableDef {\n     StructId(StructId),\n     EnumVariantId(EnumVariantId),\n }\n-impl_froms!(CallableDef: FunctionId, StructId, EnumVariantId);\n+impl_from!(FunctionId, StructId, EnumVariantId for CallableDef);\n \n impl CallableDef {\n     pub fn krate(self, db: &dyn HirDatabase) -> CrateId {\n@@ -1140,7 +1139,7 @@ pub enum TyDefId {\n     AdtId(AdtId),\n     TypeAliasId(TypeAliasId),\n }\n-impl_froms!(TyDefId: BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId);\n+impl_from!(BuiltinType, AdtId(StructId, EnumId, UnionId), TypeAliasId for TyDefId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ValueTyDefId {\n@@ -1150,7 +1149,7 @@ pub enum ValueTyDefId {\n     ConstId(ConstId),\n     StaticId(StaticId),\n }\n-impl_froms!(ValueTyDefId: FunctionId, StructId, EnumVariantId, ConstId, StaticId);\n+impl_from!(FunctionId, StructId, EnumVariantId, ConstId, StaticId for ValueTyDefId);\n \n /// Build the declared type of an item. This depends on the namespace; e.g. for\n /// `struct Foo(usize)`, we have two types: The type of the struct itself, and"}, {"sha": "b5b12e3afe29a14beb76d3ea85fc97ea4149cd7f", "filename": "crates/ra_tt/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_tt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_tt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2FCargo.toml?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -8,6 +8,7 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n+stdx = { path = \"../stdx\" }\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }"}, {"sha": "8faf1cc679c264ef24a9939c62fe39d8cb06e6bf", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -1,24 +1,13 @@\n //! `tt` crate defines a `TokenTree` data structure: this is the interface (both\n //! input and output) of macros. It closely mirrors `proc_macro` crate's\n //! `TokenTree`.\n-\n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident), *) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-        )*\n-    }\n-}\n-\n use std::{\n     fmt::{self, Debug},\n     panic::RefUnwindSafe,\n };\n \n+use stdx::impl_from;\n+\n pub use smol_str::SmolStr;\n \n /// Represents identity of the token.\n@@ -41,7 +30,7 @@ pub enum TokenTree {\n     Leaf(Leaf),\n     Subtree(Subtree),\n }\n-impl_froms!(TokenTree: Leaf, Subtree);\n+impl_from!(Leaf, Subtree for TokenTree);\n \n impl TokenTree {\n     pub fn empty() -> Self {\n@@ -55,7 +44,7 @@ pub enum Leaf {\n     Punct(Punct),\n     Ident(Ident),\n }\n-impl_froms!(Leaf: Literal, Punct, Ident);\n+impl_from!(Literal, Punct, Ident for Leaf);\n \n #[derive(Clone, PartialEq, Eq, Hash, Default)]\n pub struct Subtree {"}, {"sha": "988853ed2a4eb6a5ca3f091348adc91fd9bd7858", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -1,30 +1,13 @@\n //! Missing batteries for standard libraries.\n use std::{cell::Cell, fmt, time::Instant};\n \n+mod macros;\n+\n #[inline(always)]\n pub fn is_ci() -> bool {\n     option_env!(\"CI\").is_some()\n }\n \n-#[macro_export]\n-macro_rules! eprintln {\n-    ($($tt:tt)*) => {{\n-        if $crate::is_ci() {\n-            panic!(\"Forgot to remove debug-print?\")\n-        }\n-        std::eprintln!($($tt)*)\n-    }}\n-}\n-\n-/// Appends formatted string to a `String`.\n-#[macro_export]\n-macro_rules! format_to {\n-    ($buf:expr) => ();\n-    ($buf:expr, $lit:literal $($arg:tt)*) => {\n-        { use ::std::fmt::Write as _; let _ = ::std::write!($buf, $lit $($arg)*); }\n-    };\n-}\n-\n pub trait SepBy: Sized {\n     /// Returns an `impl fmt::Display`, which joins elements via a separator.\n     fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self>;"}, {"sha": "bf298460f3ae115b5caf27a6110bc7602dbdb921", "filename": "crates/stdx/src/macros.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fstdx%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853440775d72974585ca3fe39f9688a4d4302dd3/crates%2Fstdx%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fmacros.rs?ref=853440775d72974585ca3fe39f9688a4d4302dd3", "patch": "@@ -0,0 +1,40 @@\n+//! Convenience macros.\n+#[macro_export]\n+macro_rules! eprintln {\n+    ($($tt:tt)*) => {{\n+        if $crate::is_ci() {\n+            panic!(\"Forgot to remove debug-print?\")\n+        }\n+        std::eprintln!($($tt)*)\n+    }}\n+}\n+\n+/// Appends formatted string to a `String`.\n+#[macro_export]\n+macro_rules! format_to {\n+    ($buf:expr) => ();\n+    ($buf:expr, $lit:literal $($arg:tt)*) => {\n+        { use ::std::fmt::Write as _; let _ = ::std::write!($buf, $lit $($arg)*); }\n+    };\n+}\n+\n+// Generates `From` impls for `Enum E { Foo(Foo), Bar(Bar) }` enums\n+#[macro_export]\n+macro_rules! impl_from {\n+    ($($variant:ident $(($($sub_variant:ident),*))?),* for $enum:ident) => {\n+        $(\n+            impl From<$variant> for $enum {\n+                fn from(it: $variant) -> $enum {\n+                    $enum::$variant(it)\n+                }\n+            }\n+            $($(\n+                impl From<$sub_variant> for $enum {\n+                    fn from(it: $sub_variant) -> $enum {\n+                        $enum::$variant($variant::$sub_variant(it))\n+                    }\n+                }\n+            )*)?\n+        )*\n+    }\n+}"}]}