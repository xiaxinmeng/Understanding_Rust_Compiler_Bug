{"sha": "0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYjJhZWMxNGE5M2ZkOWM1YjA4NGFhNWY5NzNkMzYwOWU2MjViZjY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-09T15:10:40Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-09T15:10:40Z"}, "message": "display `ConstKind::Param`", "tree": {"sha": "fe4b5cc3b2c9bc3edd69dffe0e53866cc3c9ffce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe4b5cc3b2c9bc3edd69dffe0e53866cc3c9ffce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "html_url": "https://github.com/rust-lang/rust/commit/0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51e004e1bf7f9bba151dd9104a217c1ace6a0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2", "html_url": "https://github.com/rust-lang/rust/commit/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "8ec81fb3c570de3ebc42b5ad00c4933dffd192ae", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -701,12 +701,14 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n-                    // do not try to evaluate unevaluated constants. If we are const evaluating an\n+                    // Do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(write(\"_\"));\n                 } else if let Some(n) = sz.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n+                } else if let ty::ConstKind::Param(param) = sz.val {\n+                    p!(write(\"{}\", param));\n                 } else {\n                     p!(write(\"_\"));\n                 }"}, {"sha": "ed29443332f62fa6810a3473e472e5c70377fc0a", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -13,7 +13,7 @@ LL |         [1, 2] => true,\n    |         ^^^^^^ expected `2usize`, found `N`\n    |\n    = note: expected array `[u32; 2]`\n-              found array `[u32; _]`\n+              found array `[u32; N]`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bd26c08a8e5da2e627c82e022deb3fe4bb555fd9", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -29,7 +29,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::boxed::Box<[T; _]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n+             <std::boxed::Box<[T; N]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n   --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n@@ -53,7 +53,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::rc::Rc<[T; _]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n+             <std::rc::Rc<[T; N]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n   --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n@@ -77,7 +77,7 @@ LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n-             <std::sync::Arc<[T; _]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n+             <std::sync::Arc<[T; N]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "76ccc48c32ac1e34d4873509724449559a330eee", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -39,9 +39,9 @@ LL |     for _ in &[0_usize; 33] {\n    |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n    |\n    = help: the following implementations were found:\n-             <&'a [T; _] as std::iter::IntoIterator>\n+             <&'a [T; N] as std::iter::IntoIterator>\n              <&'a [T] as std::iter::IntoIterator>\n-             <&'a mut [T; _] as std::iter::IntoIterator>\n+             <&'a mut [T; N] as std::iter::IntoIterator>\n              <&'a mut [T] as std::iter::IntoIterator>\n    = note: required by `std::iter::IntoIterator::into_iter`\n "}, {"sha": "d48524f66dd994e280582c8d8ddb21dfbb01cf34", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -10,10 +10,10 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/broken-mir-2.rs:7:36\n    |\n LL | struct S<T: Debug, const N: usize>([T; N]);\n-   |                                    ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[T; _]`\n+   |                                    ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[T; N]`\n    |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; _]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; _]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; N]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; N]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "35ecc49cfb3ab39543d0127fb3dcdefef8dcc8a5", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -10,10 +10,10 @@ error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/derive-debug-array-wrapper.rs:6:5\n    |\n LL |     a: [u32; N],\n-   |     ^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[u32; _]`\n+   |     ^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[u32; N]`\n    |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; _]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; _]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; N]`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; N]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "5d45e302888d424895cb88f12ac906c75de013ea", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db2aec14a93fd9c5b084aa5f973d3609e625bf6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=0db2aec14a93fd9c5b084aa5f973d3609e625bf6", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         ArrayHolder([0; Self::SIZE])\n    |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n    |\n-   = note: expected array `[u32; _]`\n+   = note: expected array `[u32; X]`\n               found array `[u32; _]`\n \n error: constant expression depends on a generic parameter"}]}