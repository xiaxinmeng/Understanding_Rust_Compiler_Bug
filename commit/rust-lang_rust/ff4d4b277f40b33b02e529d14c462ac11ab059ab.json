{"sha": "ff4d4b277f40b33b02e529d14c462ac11ab059ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNGQ0YjI3N2Y0MGIzM2IwMmU1MjlkMTRjNDYyYWMxMWFiMDU5YWI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-30T13:00:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-24T18:37:56Z"}, "message": "Allow subtyping of the final expression of a constant\n\nFixes an ICE for the following code:\n\nfn foo(_ : &()) {}\nstatic X: fn(&'static ()) = foo;", "tree": {"sha": "5f8dca8e8012f2be0ad622b0aaf9e076f6fbc1c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8dca8e8012f2be0ad622b0aaf9e076f6fbc1c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4d4b277f40b33b02e529d14c462ac11ab059ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4d4b277f40b33b02e529d14c462ac11ab059ab", "html_url": "https://github.com/rust-lang/rust/commit/ff4d4b277f40b33b02e529d14c462ac11ab059ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4d4b277f40b33b02e529d14c462ac11ab059ab/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb37c648d7c2b5587182c7d654622cf80542bea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb37c648d7c2b5587182c7d654622cf80542bea9", "html_url": "https://github.com/rust-lang/rust/commit/eb37c648d7c2b5587182c7d654622cf80542bea9"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "16ab233bd2e368893ba3e30c83d621eb4392bf87", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ff4d4b277f40b33b02e529d14c462ac11ab059ab", "patch": "@@ -147,7 +147,21 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             build::construct_fn(cx, id, arguments, safety, abi,\n                                 return_ty, yield_ty, return_ty_span, body)\n         } else {\n-            build::construct_const(cx, body_id, return_ty_span)\n+            // Get the revealed type of this const. This is *not* the adjusted\n+            // type of its body, which may be a subtype of this type. For\n+            // example:\n+            //\n+            // fn foo(_: &()) {}\n+            // static X: fn(&'static ()) = foo;\n+            //\n+            // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n+            // is not the same as the type of X. We need the type of the return\n+            // place to be the type of the constant because NLL typeck will\n+            // equate them.\n+\n+            let return_ty = cx.tables().node_type(id);\n+\n+            build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n         // Convert the Mir to global types.\n@@ -730,16 +744,25 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n fn construct_const<'a, 'gcx, 'tcx>(\n     hir: Cx<'a, 'gcx, 'tcx>,\n     body_id: hir::BodyId,\n-    ty_span: Span,\n+    const_ty: Ty<'tcx>,\n+    const_ty_span: Span,\n ) -> Mir<'tcx> {\n     let tcx = hir.tcx();\n-    let ast_expr = &tcx.hir().body(body_id).value;\n-    let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span, vec![], vec![]);\n+    let mut builder = Builder::new(\n+        hir,\n+        span,\n+        0,\n+        Safety::Safe,\n+        const_ty,\n+        const_ty_span,\n+        vec![],\n+        vec![],\n+    );\n \n     let mut block = START_BLOCK;\n+    let ast_expr = &tcx.hir().body(body_id).value;\n     let expr = builder.hir.mirror(ast_expr);\n     unpack!(block = builder.into_expr(&Place::RETURN_PLACE, block, expr));\n "}, {"sha": "bd715df6e9d1eb938a775a628dbd8e1f11b62b4a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ff4d4b277f40b33b02e529d14c462ac11ab059ab", "patch": "@@ -866,6 +866,8 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             fcx.check_expr_coercable_to_type(&body.value, revealed_ty);\n \n+            fcx.write_ty(id, revealed_ty);\n+\n             fcx\n         };\n "}, {"sha": "193b17af55eff09af6f285d46362d4b3dd6e6766", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ff4d4b277f40b33b02e529d14c462ac11ab059ab", "patch": "@@ -42,6 +42,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         for arg in &body.arguments {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n+        // Type only exists for constants and statics, not functions.\n+        match self.tcx.hir().body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n+                let item_hir_id = self.tcx.hir().node_to_hir_id(item_id);\n+                wbcx.visit_node_id(body.value.span, item_hir_id);\n+            }\n+            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),\n+        }\n         wbcx.visit_body(body);\n         wbcx.visit_upvar_capture_map();\n         wbcx.visit_upvar_list_map();"}, {"sha": "5b1ccd7ddf6d961742d720373188fe729150f508", "filename": "src/test/run-pass/mir/mir_static_subtype.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4d4b277f40b33b02e529d14c462ac11ab059ab/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs?ref=ff4d4b277f40b33b02e529d14c462ac11ab059ab", "patch": "@@ -0,0 +1,8 @@\n+// Test that subtyping the body of a static doesn't cause an ICE.\n+\n+fn foo(_ : &()) {}\n+static X: fn(&'static ()) = foo;\n+\n+fn main() {\n+    let _ = X;\n+}"}]}