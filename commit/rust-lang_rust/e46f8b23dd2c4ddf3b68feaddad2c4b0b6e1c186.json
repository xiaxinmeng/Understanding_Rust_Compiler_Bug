{"sha": "e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "node_id": "C_kwDOAAsO6NoAKGU0NmY4YjIzZGQyYzRkZGYzYjY4ZmVhZGRhZDJjNGIwYjZlMWMxODY", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-04-08T03:44:55Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-04-15T01:19:44Z"}, "message": "Error on `#[rustc_deprecated]`", "tree": {"sha": "cc6e307197c71885776f0350e72443b982707d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6e307197c71885776f0350e72443b982707d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYljIMAAKCRC4DhnkZita\npNNhAQC+7axFhMC9B7npHW4nadwz+1b7xoj5u5ty/G69P3hS5gD/R9F5OuPP9wYL\naNpFeZ1hsYP3VxfF2/mLlBDWZTdrDgs=\n=VjwP\n-----END PGP SIGNATURE-----", "payload": "tree cc6e307197c71885776f0350e72443b982707d0d\nparent 4fbe73e0b79afb9e2b352438bac743104f0d2ba6\nauthor Jacob Pratt <jacob@jhpratt.dev> 1649389495 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1649985584 -0400\n\nError on `#[rustc_deprecated]`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "html_url": "https://github.com/rust-lang/rust/commit/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbe73e0b79afb9e2b352438bac743104f0d2ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbe73e0b79afb9e2b352438bac743104f0d2ba6", "html_url": "https://github.com/rust-lang/rust/commit/4fbe73e0b79afb9e2b352438bac743104f0d2ba6"}], "stats": {"total": 119, "additions": 85, "deletions": 34}, "files": [{"sha": "466ab82031d24a9930dbf28a7a84b64986636e01", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -687,6 +687,14 @@ where\n             break;\n         }\n \n+        // FIXME(jhpratt) remove this eventually\n+        if attr.has_name(sym::rustc_deprecated) {\n+            diagnostic\n+                .struct_span_err(attr.span, \"`#[rustc_deprecated]` has been removed\")\n+                .help(\"use `#[deprecated]` instead\")\n+                .emit();\n+        }\n+\n         let Some(meta) = attr.meta() else {\n             continue;\n         };\n@@ -742,12 +750,24 @@ where\n                                     continue 'outer;\n                                 }\n                             }\n-                            // FIXME(jhpratt) remove this after a bootstrap occurs. Emitting an\n-                            // error specific to the renaming would be a good idea as well.\n+                            // FIXME(jhpratt) remove this eventually\n                             sym::reason if attr.has_name(sym::rustc_deprecated) => {\n                                 if !get(mi, &mut note) {\n                                     continue 'outer;\n                                 }\n+\n+                                let mut diag = diagnostic\n+                                    .struct_span_err(mi.span, \"`reason` has been renamed\");\n+                                match note {\n+                                    Some(note) => diag.span_suggestion(\n+                                        mi.span,\n+                                        \"use `note` instead\",\n+                                        format!(\"note = \\\"{note}\\\"\"),\n+                                        Applicability::MachineApplicable,\n+                                    ),\n+                                    None => diag.span_help(mi.span, \"use `note` instead\"),\n+                                };\n+                                diag.emit();\n                             }\n                             sym::suggestion => {\n                                 if !sess.features_untracked().deprecated_suggestion {"}, {"sha": "ae8fd026dbc90b66760bf61466e8878e8596cd77", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -2201,11 +2201,10 @@ declare_lint! {\n     /// used by user code.\n     ///\n     /// This lint is only enabled in the standard library. It works with the\n-    /// use of `#[rustc_deprecated]` with a `since` field of a version in the\n-    /// future. This allows something to be marked as deprecated in a future\n-    /// version, and then this lint will ensure that the item is no longer\n-    /// used in the standard library. See the [stability documentation] for\n-    /// more details.\n+    /// use of `#[deprecated]` with a `since` field of a version in the future.\n+    /// This allows something to be marked as deprecated in a future version,\n+    /// and then this lint will ensure that the item is no longer used in the\n+    /// standard library. See the [stability documentation] for more details.\n     ///\n     /// [stability documentation]: https://rustc-dev-guide.rust-lang.org/stability.html#rustc_deprecated\n     pub DEPRECATED_IN_FUTURE,"}, {"sha": "22f7c38d097464907b528cd25ceef07034ab6ed2", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -118,8 +118,7 @@ pub fn deprecation_in_effect(depr: &Deprecation) -> bool {\n     }\n \n     if !is_since_rustc_version {\n-        // The `since` field doesn't have semantic purpose in the stable `deprecated`\n-        // attribute, only in `rustc_deprecated`.\n+        // The `since` field doesn't have semantic purpose without `#![staged_api]`.\n         return true;\n     }\n \n@@ -336,7 +335,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // topmost deprecation. For example, if a struct is deprecated,\n                 // the use of a field won't be linted.\n                 //\n-                // #[rustc_deprecated] however wants to emit down the whole\n+                // With #![staged_api], we want to emit down the whole\n                 // hierarchy.\n                 let depr_attr = &depr_entry.attr;\n                 if !skip || depr_attr.is_since_rustc_version {"}, {"sha": "27b13a158ad3e22facc099b846d141611d29e6fe", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -659,8 +659,8 @@ fn short_item_info(\n     if let Some(depr @ Deprecation { note, since, is_since_rustc_version: _, suggestion: _ }) =\n         item.deprecation(cx.tcx())\n     {\n-        // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n-        // but only display the future-deprecation messages for #[rustc_deprecated].\n+        // We display deprecation messages for #[deprecated], but only display\n+        // the future-deprecation messages for rustc versions.\n         let mut message = if let Some(since) = since {\n             let since = since.as_str();\n             if !stability::deprecation_in_effect(&depr) {"}, {"sha": "2670e7f5d046eb0a725246c571dfabbe0e0116bb", "filename": "src/test/rustdoc/deprecated-future-staged-api.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-future-staged-api.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -0,0 +1,18 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+\n+// @has deprecated_future_staged_api/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has deprecated_future_staged_api/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in 99.99.99: effectively never'\n+#[deprecated(since = \"99.99.99\", note = \"effectively never\")]\n+#[stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+pub struct S1;\n+\n+// @has deprecated_future_staged_api/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has deprecated_future_staged_api/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in a future Rust version: literally never'\n+#[deprecated(since = \"TBD\", note = \"literally never\")]\n+#[stable(feature = \"deprecated-future-staged-api\", since = \"1.0.0\")]\n+pub struct S2;"}, {"sha": "13b4c3c7f61a47604d16920cdd03f653d758345d", "filename": "src/test/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -2,7 +2,6 @@\n // build-aux-docs\n \n #![feature(macro_test)]\n-\n #![crate_name = \"foo\"]\n \n extern crate macros;\n@@ -16,5 +15,5 @@ extern crate macros;\n // @has - '//*[@class=\"docblock\"]' 'docs for my_macro'\n // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.2.3: text'\n // @has - '//*[@class=\"stab unstable\"]' 'macro_test'\n-// @has - '//a/@href' '../src/macros/macros.rs.html#9-11'\n+// @has - '//a/@href' '../src/macros/macros.rs.html#8-10'\n pub use macros::my_macro;"}, {"sha": "9bc99d712ecffd206bde3a05f409a009a70d4c0b", "filename": "src/test/rustdoc/rustc_deprecated-future.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fbe73e0b79afb9e2b352438bac743104f0d2ba6/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbe73e0b79afb9e2b352438bac743104f0d2ba6/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs?ref=4fbe73e0b79afb9e2b352438bac743104f0d2ba6", "patch": "@@ -1,18 +0,0 @@\n-#![feature(staged_api)]\n-#![stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-\n-// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecating in 99.99.99: effectively never'\n-#[deprecated(since = \"99.99.99\", note = \"effectively never\")]\n-#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S1;\n-\n-// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n-//      'Deprecating in a future Rust version: literally never'\n-#[deprecated(since = \"TBD\", note = \"literally never\")]\n-#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S2;"}, {"sha": "99d1c73413af4f084b2671da6ad51cd160ddbb2b", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -1,7 +1,7 @@\n warning: use of deprecated function `deprecated_future`: text\n   --> $DIR/deprecation-in-future.rs:9:5\n    |\n-LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n+LL |     deprecated_future(); // ok; deprecated_in_future only applies with `#![feature(staged_api)]`\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default"}, {"sha": "65cc4e2ef1e41b07a22e2de10beff53d6728132b", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -260,7 +260,7 @@ mod this_crate {\n         <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n \n-        // Future deprecations are only permitted for rustc_deprecated.\n+        // Future deprecations are only permitted with `#![feature(staged_api)]`\n         deprecated_future(); //~ ERROR use of deprecated function\n         deprecated_future_text(); //~ ERROR use of deprecated function\n "}, {"sha": "b87bd069c606c0a7c3935b249f40a0960bac6717", "filename": "src/test/ui/deprecation/rustc_deprecated.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.rs?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --crate-type=lib\n+\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"rust1\")]\n+\n+#[rustc_deprecated( //~ ERROR `#[rustc_deprecated]` has been removed\n+    //~^ HELP use `#[deprecated]` instead\n+    since = \"1.100.0\",\n+    reason = \"text\" //~ ERROR `reason` has been renamed\n+    //~^ HELP use `note` instead\n+)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+fn foo() {}"}, {"sha": "4413e196f09c49947dcf098804cafc2528a66152", "filename": "src/test/ui/deprecation/rustc_deprecated.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecated.stderr?ref=e46f8b23dd2c4ddf3b68feaddad2c4b0b6e1c186", "patch": "@@ -0,0 +1,21 @@\n+error: `#[rustc_deprecated]` has been removed\n+  --> $DIR/rustc_deprecated.rs:6:1\n+   |\n+LL | / #[rustc_deprecated(\n+LL | |\n+LL | |     since = \"1.100.0\",\n+LL | |     reason = \"text\"\n+LL | |\n+LL | | )]\n+   | |__^\n+   |\n+   = help: use `#[deprecated]` instead\n+\n+error: `reason` has been renamed\n+  --> $DIR/rustc_deprecated.rs:9:5\n+   |\n+LL |     reason = \"text\"\n+   |     ^^^^^^^^^^^^^^^ help: use `note` instead: `note = \"text\"`\n+\n+error: aborting due to 2 previous errors\n+"}]}