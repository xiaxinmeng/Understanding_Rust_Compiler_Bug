{"sha": "09bf5deb683d801c5e0905b19edfb22d32dad65a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YmY1ZGViNjgzZDgwMWM1ZTA5MDViMTllZGZiMjJkMzJkYWQ2NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T23:46:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T23:46:32Z"}, "message": "auto merge of #10918 : eddyb/rust/inline-finally-dtor, r=thestinger\n\n* fixes the vec::from_elem regression caused by #8780\r\n* added 5 benchmarks for allocating a 1KB `~[u8]` and zeroing it\r\n* closes #7136", "tree": {"sha": "49e8952b63d21e90f7f0572a7f9d199146b4d65c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e8952b63d21e90f7f0572a7f9d199146b4d65c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09bf5deb683d801c5e0905b19edfb22d32dad65a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09bf5deb683d801c5e0905b19edfb22d32dad65a", "html_url": "https://github.com/rust-lang/rust/commit/09bf5deb683d801c5e0905b19edfb22d32dad65a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09bf5deb683d801c5e0905b19edfb22d32dad65a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbbadae80ffda04132e6cf1155e32cc6f910712d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbbadae80ffda04132e6cf1155e32cc6f910712d", "html_url": "https://github.com/rust-lang/rust/commit/fbbadae80ffda04132e6cf1155e32cc6f910712d"}, {"sha": "331c6efe45324ef1b81e3c3bd79281fc12de5123", "url": "https://api.github.com/repos/rust-lang/rust/commits/331c6efe45324ef1b81e3c3bd79281fc12de5123", "html_url": "https://github.com/rust-lang/rust/commit/331c6efe45324ef1b81e3c3bd79281fc12de5123"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "6faf69d2bb98f4a8d03e2926c2a46433694e6770", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09bf5deb683d801c5e0905b19edfb22d32dad65a/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf5deb683d801c5e0905b19edfb22d32dad65a/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=09bf5deb683d801c5e0905b19edfb22d32dad65a", "patch": "@@ -62,6 +62,7 @@ struct Finallyalizer<'a> {\n \n #[unsafe_destructor]\n impl<'a> Drop for Finallyalizer<'a> {\n+    #[inline]\n     fn drop(&mut self) {\n         (self.dtor)();\n     }"}, {"sha": "c31e3b5644432fa4fd8de61ab68e9d3c36877a31", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/09bf5deb683d801c5e0905b19edfb22d32dad65a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf5deb683d801c5e0905b19edfb22d32dad65a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=09bf5deb683d801c5e0905b19edfb22d32dad65a", "patch": "@@ -4217,6 +4217,7 @@ mod bench {\n     use vec;\n     use vec::VectorVector;\n     use option::*;\n+    use ptr;\n \n     #[bench]\n     fn iterator(bh: &mut BenchHarness) {\n@@ -4339,4 +4340,58 @@ mod bench {\n                 vec.contains(&99u);\n         })\n     }\n+\n+    #[bench]\n+    fn zero_1kb_from_elem(bh: &mut BenchHarness) {\n+        bh.iter(|| {\n+            let _v: ~[u8] = vec::from_elem(1024, 0u8);\n+        });\n+    }\n+\n+    #[bench]\n+    fn zero_1kb_set_memory(bh: &mut BenchHarness) {\n+        bh.iter(|| {\n+            let mut v: ~[u8] = vec::with_capacity(1024);\n+            unsafe {\n+                let vp = vec::raw::to_mut_ptr(v);\n+                ptr::set_memory(vp, 0, 1024);\n+                vec::raw::set_len(&mut v, 1024);\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn zero_1kb_fixed_repeat(bh: &mut BenchHarness) {\n+        bh.iter(|| {\n+            let _v: ~[u8] = ~[0u8, ..1024];\n+        });\n+    }\n+\n+    #[bench]\n+    fn zero_1kb_loop_set(bh: &mut BenchHarness) {\n+        // Slower because the { len, cap, [0 x T] }* repr allows a pointer to the length\n+        // field to be aliased (in theory) and prevents LLVM from optimizing loads away.\n+        bh.iter(|| {\n+            let mut v: ~[u8] = vec::with_capacity(1024);\n+            unsafe {\n+                vec::raw::set_len(&mut v, 1024);\n+            }\n+            for i in range(0, 1024) {\n+                v[i] = 0;\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn zero_1kb_mut_iter(bh: &mut BenchHarness) {\n+        bh.iter(|| {\n+            let mut v: ~[u8] = vec::with_capacity(1024);\n+            unsafe {\n+                vec::raw::set_len(&mut v, 1024);\n+            }\n+            for x in v.mut_iter() {\n+                *x = 0;\n+            }\n+        });\n+    }\n }"}]}