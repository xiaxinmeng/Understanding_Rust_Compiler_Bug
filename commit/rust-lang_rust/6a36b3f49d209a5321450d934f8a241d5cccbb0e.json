{"sha": "6a36b3f49d209a5321450d934f8a241d5cccbb0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzZiM2Y0OWQyMDlhNTMyMTQ1MGQ5MzRmOGEyNDFkNWNjY2JiMGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-21T20:54:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-27T09:05:05Z"}, "message": "Apply review comments and improve code", "tree": {"sha": "4e881d6d8087e530a00a88d30f56fa7d185b4523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e881d6d8087e530a00a88d30f56fa7d185b4523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a36b3f49d209a5321450d934f8a241d5cccbb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a36b3f49d209a5321450d934f8a241d5cccbb0e", "html_url": "https://github.com/rust-lang/rust/commit/6a36b3f49d209a5321450d934f8a241d5cccbb0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a36b3f49d209a5321450d934f8a241d5cccbb0e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19630ead410873a08b271606b8ac5a27029d70b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/19630ead410873a08b271606b8ac5a27029d70b6", "html_url": "https://github.com/rust-lang/rust/commit/19630ead410873a08b271606b8ac5a27029d70b6"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "7f329511c3470eab9c85410a2b438c0b7c0f0b8a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a36b3f49d209a5321450d934f8a241d5cccbb0e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a36b3f49d209a5321450d934f8a241d5cccbb0e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6a36b3f49d209a5321450d934f8a241d5cccbb0e", "patch": "@@ -1410,34 +1410,30 @@ impl Type {\n \n impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n-        fn inner<T: GetDefId>(t: &T, cache: Option<&Cache>) -> Option<DefId> {\n-            match cache {\n-                Some(c) => t.def_id_full(c),\n-                None => t.def_id(),\n-            }\n-        }\n-\n-        match *self {\n-            ResolvedPath { did, .. } => Some(did),\n-            Primitive(p) => cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n-            BorrowedRef { type_: box Generic(..), .. } => {\n-                inner(&Primitive(PrimitiveType::Reference), cache)\n-            }\n-            BorrowedRef { ref type_, .. } => inner(&**type_, cache),\n+        let t: &dyn GetDefId = match *self {\n+            ResolvedPath { did, .. } => return Some(did),\n+            Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n+            BorrowedRef { type_: box Generic(..), .. } => &Primitive(PrimitiveType::Reference),\n+            BorrowedRef { ref type_, .. } => return type_.inner_def_id(cache),\n             Tuple(ref tys) => {\n                 if tys.is_empty() {\n-                    inner(&Primitive(PrimitiveType::Unit), cache)\n+                    &Primitive(PrimitiveType::Unit)\n                 } else {\n-                    inner(&Primitive(PrimitiveType::Tuple), cache)\n+                    &Primitive(PrimitiveType::Tuple)\n                 }\n             }\n-            BareFunction(..) => inner(&Primitive(PrimitiveType::Fn), cache),\n-            Never => inner(&Primitive(PrimitiveType::Never), cache),\n-            Slice(..) => inner(&Primitive(PrimitiveType::Slice), cache),\n-            Array(..) => inner(&Primitive(PrimitiveType::Array), cache),\n-            RawPointer(..) => inner(&Primitive(PrimitiveType::RawPointer), cache),\n-            QPath { ref self_type, .. } => inner(&**self_type, cache),\n-            _ => None,\n+            BareFunction(..) => &Primitive(PrimitiveType::Fn),\n+            Never => &Primitive(PrimitiveType::Never),\n+            Slice(..) => &Primitive(PrimitiveType::Slice),\n+            Array(..) => &Primitive(PrimitiveType::Array),\n+            RawPointer(..) => &Primitive(PrimitiveType::RawPointer),\n+            QPath { ref self_type, .. } => return self_type.inner_def_id(cache),\n+            // FIXME: remove this wildcard\n+            _ => return None,\n+        };\n+        match cache {\n+            Some(c) => t.def_id_full(c),\n+            None => t.def_id(),\n         }\n     }\n }"}, {"sha": "5c02be14181ed99bb525c0e171f1372cc8025f92", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a36b3f49d209a5321450d934f8a241d5cccbb0e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a36b3f49d209a5321450d934f8a241d5cccbb0e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=6a36b3f49d209a5321450d934f8a241d5cccbb0e", "patch": "@@ -78,7 +78,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_index_search_type(&item, Some(cache)),\n+                search_type: get_index_search_type(&item, None),\n             });\n             for alias in item.attrs.get_doc_aliases() {\n                 cache"}]}