{"sha": "98c50ebfa124f311f3c889f3cc885df21aaeb31f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzUwZWJmYTEyNGYzMTFmM2M4ODlmM2NjODg1ZGYyMWFhZWIzMWY=", "commit": {"author": {"name": "Tomasz R\u00f3\u017ca\u0144ski", "email": "rosto@tlen.pl", "date": "2019-07-27T15:55:28Z"}, "committer": {"name": "Tomasz R\u00f3\u017ca\u0144ski", "email": "rosto@tlen.pl", "date": "2019-07-27T20:15:09Z"}, "message": "Change the placement of two functions.\n\nRight now, the order is as follows:\n`pop_front()`\n`push_front()`\n`push_back()`\n`pop_back()`\n\n`swap_remove_back()`\n`swap_remove_front()`\n\nI believe it would be more natural, and easier to follow, if we place `pop_back()` right after the `pop_front()`, and `swap_remove_back()` after the `swap_remove_front()` like this:\n`pop_front()`\n`pop_back()`\n`push_front()`\n`push_back()`\n\n`swap_remove_front()`\n`swap_remove_back()`\n\nThe rest of the documentation (at least in this module) adheres to the same logic, where the 'front' function always precedes its 'back' equivalent.", "tree": {"sha": "0a8e6b72bee730496839056790a484cdc35c44b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8e6b72bee730496839056790a484cdc35c44b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c50ebfa124f311f3c889f3cc885df21aaeb31f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c50ebfa124f311f3c889f3cc885df21aaeb31f", "html_url": "https://github.com/rust-lang/rust/commit/98c50ebfa124f311f3c889f3cc885df21aaeb31f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c50ebfa124f311f3c889f3cc885df21aaeb31f/comments", "author": {"login": "tomasz-rozanski", "id": 11074159, "node_id": "MDQ6VXNlcjExMDc0MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/11074159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomasz-rozanski", "html_url": "https://github.com/tomasz-rozanski", "followers_url": "https://api.github.com/users/tomasz-rozanski/followers", "following_url": "https://api.github.com/users/tomasz-rozanski/following{/other_user}", "gists_url": "https://api.github.com/users/tomasz-rozanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomasz-rozanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomasz-rozanski/subscriptions", "organizations_url": "https://api.github.com/users/tomasz-rozanski/orgs", "repos_url": "https://api.github.com/users/tomasz-rozanski/repos", "events_url": "https://api.github.com/users/tomasz-rozanski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomasz-rozanski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomasz-rozanski", "id": 11074159, "node_id": "MDQ6VXNlcjExMDc0MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/11074159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomasz-rozanski", "html_url": "https://github.com/tomasz-rozanski", "followers_url": "https://api.github.com/users/tomasz-rozanski/followers", "following_url": "https://api.github.com/users/tomasz-rozanski/following{/other_user}", "gists_url": "https://api.github.com/users/tomasz-rozanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomasz-rozanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomasz-rozanski/subscriptions", "organizations_url": "https://api.github.com/users/tomasz-rozanski/orgs", "repos_url": "https://api.github.com/users/tomasz-rozanski/repos", "events_url": "https://api.github.com/users/tomasz-rozanski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomasz-rozanski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43753f910aae000f8bcb0a502407ea332afc74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43753f910aae000f8bcb0a502407ea332afc74b", "html_url": "https://github.com/rust-lang/rust/commit/c43753f910aae000f8bcb0a502407ea332afc74b"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "b2fe703521e445142d6ca1163596542c26569161", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/98c50ebfa124f311f3c889f3cc885df21aaeb31f/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c50ebfa124f311f3c889f3cc885df21aaeb31f/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=98c50ebfa124f311f3c889f3cc885df21aaeb31f", "patch": "@@ -1197,6 +1197,31 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n+    /// Removes the last element from the `VecDeque` and returns it, or `None` if\n+    /// it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// assert_eq!(buf.pop_back(), None);\n+    /// buf.push_back(1);\n+    /// buf.push_back(3);\n+    /// assert_eq!(buf.pop_back(), Some(3));\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn pop_back(&mut self) -> Option<T> {\n+        if self.is_empty() {\n+            None\n+        } else {\n+            self.head = self.wrap_sub(self.head, 1);\n+            let head = self.head;\n+            unsafe { Some(self.buffer_read(head)) }\n+        }\n+    }\n+\n     /// Prepends an element to the `VecDeque`.\n     ///\n     /// # Examples\n@@ -1241,38 +1266,13 @@ impl<T> VecDeque<T> {\n         unsafe { self.buffer_write(head, value) }\n     }\n \n-    /// Removes the last element from the `VecDeque` and returns it, or `None` if\n-    /// it is empty.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::VecDeque;\n-    ///\n-    /// let mut buf = VecDeque::new();\n-    /// assert_eq!(buf.pop_back(), None);\n-    /// buf.push_back(1);\n-    /// buf.push_back(3);\n-    /// assert_eq!(buf.pop_back(), Some(3));\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn pop_back(&mut self) -> Option<T> {\n-        if self.is_empty() {\n-            None\n-        } else {\n-            self.head = self.wrap_sub(self.head, 1);\n-            let head = self.head;\n-            unsafe { Some(self.buffer_read(head)) }\n-        }\n-    }\n-\n     #[inline]\n     fn is_contiguous(&self) -> bool {\n         self.tail <= self.head\n     }\n \n-    /// Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n-    /// last element.\n+    /// Removes an element from anywhere in the `VecDeque` and returns it,\n+    /// replacing it with the first element.\n     ///\n     /// This does not preserve ordering, but is O(1).\n     ///\n@@ -1286,28 +1286,28 @@ impl<T> VecDeque<T> {\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n-    /// assert_eq!(buf.swap_remove_back(0), None);\n+    /// assert_eq!(buf.swap_remove_front(0), None);\n     /// buf.push_back(1);\n     /// buf.push_back(2);\n     /// buf.push_back(3);\n     /// assert_eq!(buf, [1, 2, 3]);\n     ///\n-    /// assert_eq!(buf.swap_remove_back(0), Some(1));\n-    /// assert_eq!(buf, [3, 2]);\n+    /// assert_eq!(buf.swap_remove_front(2), Some(3));\n+    /// assert_eq!(buf, [2, 1]);\n     /// ```\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n-    pub fn swap_remove_back(&mut self, index: usize) -> Option<T> {\n+    pub fn swap_remove_front(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n-        if length > 0 && index < length - 1 {\n-            self.swap(index, length - 1);\n+        if length > 0 && index < length && index != 0 {\n+            self.swap(index, 0);\n         } else if index >= length {\n             return None;\n         }\n-        self.pop_back()\n+        self.pop_front()\n     }\n \n-    /// Removes an element from anywhere in the `VecDeque` and returns it,\n-    /// replacing it with the first element.\n+    /// Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n+    /// last element.\n     ///\n     /// This does not preserve ordering, but is O(1).\n     ///\n@@ -1321,24 +1321,24 @@ impl<T> VecDeque<T> {\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n-    /// assert_eq!(buf.swap_remove_front(0), None);\n+    /// assert_eq!(buf.swap_remove_back(0), None);\n     /// buf.push_back(1);\n     /// buf.push_back(2);\n     /// buf.push_back(3);\n     /// assert_eq!(buf, [1, 2, 3]);\n     ///\n-    /// assert_eq!(buf.swap_remove_front(2), Some(3));\n-    /// assert_eq!(buf, [2, 1]);\n+    /// assert_eq!(buf.swap_remove_back(0), Some(1));\n+    /// assert_eq!(buf, [3, 2]);\n     /// ```\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n-    pub fn swap_remove_front(&mut self, index: usize) -> Option<T> {\n+    pub fn swap_remove_back(&mut self, index: usize) -> Option<T> {\n         let length = self.len();\n-        if length > 0 && index < length && index != 0 {\n-            self.swap(index, 0);\n+        if length > 0 && index < length - 1 {\n+            self.swap(index, length - 1);\n         } else if index >= length {\n             return None;\n         }\n-        self.pop_front()\n+        self.pop_back()\n     }\n \n     /// Inserts an element at `index` within the `VecDeque`, shifting all elements with indices"}]}