{"sha": "68aadcb2ae16cc9d6845eefde3ad49b214731954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YWFkY2IyYWUxNmNjOWQ2ODQ1ZWVmZGUzYWQ0OWIyMTQ3MzE5NTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-02T19:31:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-03T22:12:29Z"}, "message": "metadata: Remove unused `Option` from `fn dlsym_proc_macros`", "tree": {"sha": "10cc5df85623ee3631458e14819dfb0232d2ec5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cc5df85623ee3631458e14819dfb0232d2ec5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68aadcb2ae16cc9d6845eefde3ad49b214731954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68aadcb2ae16cc9d6845eefde3ad49b214731954", "html_url": "https://github.com/rust-lang/rust/commit/68aadcb2ae16cc9d6845eefde3ad49b214731954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68aadcb2ae16cc9d6845eefde3ad49b214731954/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f96ba92b643922c02f43cf0df4d780a95375692", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f96ba92b643922c02f43cf0df4d780a95375692", "html_url": "https://github.com/rust-lang/rust/commit/0f96ba92b643922c02f43cf0df4d780a95375692"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "042252bc13e615c9a052a6328e6567f6b4445e1b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/68aadcb2ae16cc9d6845eefde3ad49b214731954/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68aadcb2ae16cc9d6845eefde3ad49b214731954/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=68aadcb2ae16cc9d6845eefde3ad49b214731954", "patch": "@@ -20,7 +20,7 @@ use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n use std::ops::Deref;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::{cmp, fs};\n \n use syntax::ast;\n@@ -229,13 +229,14 @@ impl<'a> CrateLoader<'a> {\n         let dependencies: Vec<CrateNum> = cnum_map.iter().cloned().collect();\n \n         let raw_proc_macros =  crate_root.proc_macro_data.map(|_| {\n-            if self.sess.opts.debugging_opts.dual_proc_macros {\n-                let host_lib = host_lib.as_ref().unwrap();\n-                self.dlsym_proc_macros(host_lib.dylib.as_ref().map(|p| p.0.clone()),\n-                                       &host_lib.metadata.get_root(), span)\n-            } else {\n-                self.dlsym_proc_macros(dylib.clone().map(|p| p.0), &crate_root, span)\n-            }\n+            let temp_root;\n+            let (dlsym_dylib, dlsym_root) = match &host_lib {\n+                Some(host_lib) =>\n+                    (&host_lib.dylib, { temp_root = host_lib.metadata.get_root(); &temp_root }),\n+                None => (&dylib, &crate_root),\n+            };\n+            let dlsym_dylib = dlsym_dylib.as_ref().expect(\"no dylib for a proc-macro crate\");\n+            self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator, span)\n         });\n \n         let interpret_alloc_index: Vec<u32> = crate_root.interpret_alloc_index\n@@ -567,25 +568,21 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn dlsym_proc_macros(&self,\n-                         dylib: Option<PathBuf>,\n-                         root: &CrateRoot<'_>,\n+                         path: &Path,\n+                         disambiguator: CrateDisambiguator,\n                          span: Span\n     ) -> &'static [ProcMacro] {\n         use std::env;\n         use crate::dynamic_lib::DynamicLibrary;\n \n-        let path = match dylib {\n-            Some(dylib) => dylib,\n-            None => span_bug!(span, \"proc-macro crate not dylib\"),\n-        };\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n         let lib = match DynamicLibrary::open(Some(&path)) {\n             Ok(lib) => lib,\n             Err(err) => self.sess.span_fatal(span, &err),\n         };\n \n-        let sym = self.sess.generate_proc_macro_decls_symbol(root.disambiguator);\n+        let sym = self.sess.generate_proc_macro_decls_symbol(disambiguator);\n         let decls = unsafe {\n             let sym = match lib.symbol(&sym) {\n                 Ok(f) => f,"}]}