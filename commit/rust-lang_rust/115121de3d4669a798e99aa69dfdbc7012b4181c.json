{"sha": "115121de3d4669a798e99aa69dfdbc7012b4181c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTEyMWRlM2Q0NjY5YTc5OGU5OWFhNjlkZmRiYzcwMTJiNDE4MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-08T11:55:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-08T11:55:04Z"}, "message": "Auto merge of #26088 - tamird:llvm35-fixes, r=alexcrichton\n\nrebase of #25739, closes #25739. r? @alexcrichton", "tree": {"sha": "110ed67c5a218b0208013515017879efc5e79976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/110ed67c5a218b0208013515017879efc5e79976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/115121de3d4669a798e99aa69dfdbc7012b4181c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/115121de3d4669a798e99aa69dfdbc7012b4181c", "html_url": "https://github.com/rust-lang/rust/commit/115121de3d4669a798e99aa69dfdbc7012b4181c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/115121de3d4669a798e99aa69dfdbc7012b4181c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ade076f62c9e8188c4fb5c888277a1673ac82cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ade076f62c9e8188c4fb5c888277a1673ac82cd", "html_url": "https://github.com/rust-lang/rust/commit/1ade076f62c9e8188c4fb5c888277a1673ac82cd"}, {"sha": "e36e97ba51f512de2fd05e3250db4a7b72caae04", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36e97ba51f512de2fd05e3250db4a7b72caae04", "html_url": "https://github.com/rust-lang/rust/commit/e36e97ba51f512de2fd05e3250db4a7b72caae04"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "379a7da459fdb222b766b9d4700751257b3880d5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=115121de3d4669a798e99aa69dfdbc7012b4181c", "patch": "@@ -1772,6 +1772,8 @@ extern {\n                          -> ValueRef;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n+    pub fn LLVMVersionMajor() -> u32;\n+    pub fn LLVMVersionMinor() -> u32;\n \n     pub fn LLVMRustAddModuleFlag(M: ModuleRef,\n                                  name: *const c_char,"}, {"sha": "663a01e19f342887faeb3ffe170ef2a92893a676", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=115121de3d4669a798e99aa69dfdbc7012b4181c", "patch": "@@ -870,6 +870,11 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.trunc.f32\", fn(t_f32) -> t_f32);\n     ifn!(\"llvm.trunc.f64\", fn(t_f64) -> t_f64);\n \n+    ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n+    ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n+    ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n+    ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n+\n     ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n     ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n     ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);\n@@ -928,22 +933,48 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.lifetime.end\", fn(t_i64, i8p) -> void);\n \n     ifn!(\"llvm.expect.i1\", fn(i1, i1) -> i1);\n-    ifn!(\"llvm.assume\", fn(i1) -> void);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have\n-    // fallbacks in libc or libm and such. Currently, all of these intrinsics\n-    // were introduced in LLVM 3.4, so we case on that.\n+    // fallbacks in libc or libm and such.\n     macro_rules! compatible_ifn {\n-        ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr) => (\n-            ifn!($name, fn($($arg),*) -> $ret);\n+        ($name:expr, noop($cname:ident ($($arg:expr),*) -> void), $llvm_version:expr) => (\n+            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n+                // The `if key == $name` is already in ifn!\n+                ifn!($name, fn($($arg),*) -> void);\n+            } else if *key == $name {\n+                let f = declare::declare_cfn(ccx, stringify!($cname),\n+                                             Type::func(&[$($arg),*], &void),\n+                                             ty::mk_nil(ccx.tcx()));\n+                llvm::SetLinkage(f, llvm::InternalLinkage);\n+\n+                let bld = ccx.builder();\n+                let llbb = unsafe {\n+                    llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), f,\n+                                                        \"entry-block\\0\".as_ptr() as *const _)\n+                };\n+\n+                bld.position_at_end(llbb);\n+                bld.ret_void();\n+\n+                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n+                return Some(f);\n+            }\n+        );\n+        ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr, $llvm_version:expr) => (\n+            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n+                // The `if key == $name` is already in ifn!\n+                ifn!($name, fn($($arg),*) -> $ret);\n+            } else if *key == $name {\n+                let f = declare::declare_cfn(ccx, stringify!($cname),\n+                                             Type::func(&[$($arg),*], &$ret),\n+                                             ty::mk_nil(ccx.tcx()));\n+                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n+                return Some(f);\n+            }\n         )\n     }\n \n-    compatible_ifn!(\"llvm.copysign.f32\", copysignf(t_f32, t_f32) -> t_f32);\n-    compatible_ifn!(\"llvm.copysign.f64\", copysign(t_f64, t_f64) -> t_f64);\n-    compatible_ifn!(\"llvm.round.f32\", roundf(t_f32) -> t_f32);\n-    compatible_ifn!(\"llvm.round.f64\", round(t_f64) -> t_f64);\n-\n+    compatible_ifn!(\"llvm.assume\", noop(llvmcompat_assume(i1) -> void), 6);\n \n     if ccx.sess().opts.debuginfo != NoDebugInfo {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(ccx), Type::metadata(ccx)) -> void);"}, {"sha": "ad6533e5480b1f349794a1c77859ca135db60e7a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/115121de3d4669a798e99aa69dfdbc7012b4181c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=115121de3d4669a798e99aa69dfdbc7012b4181c", "patch": "@@ -233,10 +233,18 @@ DIT unwrapDI(LLVMMetadataRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n-extern \"C\" const uint32_t LLVMRustDebugMetadataVersion() {\n+extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n     return DEBUG_METADATA_VERSION;\n }\n \n+extern \"C\" uint32_t LLVMVersionMinor() {\n+  return LLVM_VERSION_MINOR;\n+}\n+\n+extern \"C\" uint32_t LLVMVersionMajor() {\n+  return LLVM_VERSION_MAJOR;\n+}\n+\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n                                       uint32_t value) {"}]}