{"sha": "2e988794037e821cff9b8b978d3895b2c6532adb", "node_id": "C_kwDOAAsO6NoAKDJlOTg4Nzk0MDM3ZTgyMWNmZjliOGI5NzhkMzg5NWIyYzY1MzJhZGI", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T21:11:15Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "change back to using tcx.hir() visit-item method\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "16dcdf21097bf8d3f7876be4ea3ff32c1364f524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dcdf21097bf8d3f7876be4ea3ff32c1364f524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e988794037e821cff9b8b978d3895b2c6532adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e988794037e821cff9b8b978d3895b2c6532adb", "html_url": "https://github.com/rust-lang/rust/commit/2e988794037e821cff9b8b978d3895b2c6532adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e988794037e821cff9b8b978d3895b2c6532adb/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f975d0511690c1dabe2e9df0dde189b90bec587f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f975d0511690c1dabe2e9df0dde189b90bec587f", "html_url": "https://github.com/rust-lang/rust/commit/f975d0511690c1dabe2e9df0dde189b90bec587f"}], "stats": {"total": 55, "additions": 8, "deletions": 47}, "files": [{"sha": "2405c63206038edaff4071e0e357f8bb62cc6f8b", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e988794037e821cff9b8b978d3895b2c6532adb/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e988794037e821cff9b8b978d3895b2c6532adb/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=2e988794037e821cff9b8b978d3895b2c6532adb", "patch": "@@ -10,7 +10,6 @@\n use rustc_attr as attr;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::hir::nested_filter;\n@@ -58,41 +57,15 @@ impl NonConstExpr {\n \n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n-    let module = tcx.hir_module_items(module_def_id);\n-\n-    for id in module.items() {\n-        vis.visit_item(tcx.hir().item(id));\n-        check_item(tcx, id);\n-    }\n-\n-    for id in module.trait_items() {\n-        vis.visit_trait_item(tcx.hir().trait_item(id));\n-    }\n-\n-    for id in module.impl_items() {\n-        vis.visit_impl_item(tcx.hir().impl_item(id));\n-    }\n-\n-    for id in module.foreign_items() {\n-        vis.visit_foreign_item(tcx.hir().foreign_item(id));\n-    }\n-\n-    // for id in tcx.hir_module_items(module_def_id).items() {\n-    //     check_item(tcx, id);\n-    // }\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut vis);\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n \n-fn check_item<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n     let _: Option<_> = try {\n-        if !matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n-            None?\n-        }\n-\n-        let item = tcx.hir().item(id);\n         if let hir::ItemKind::Impl(ref imp) = item.kind && let hir::Constness::Const = imp.constness {\n             let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n             let ancestors = tcx\n@@ -274,6 +247,11 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        intravisit::walk_item(self, item);\n+        check_item(self.tcx, item);\n+    }\n+\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "762beefe8444ac60cd786cb24526e03d7707e70b", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e988794037e821cff9b8b978d3895b2c6532adb/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e988794037e821cff9b8b978d3895b2c6532adb/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=2e988794037e821cff9b8b978d3895b2c6532adb", "patch": "@@ -3,7 +3,6 @@ use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n-use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, ItemLocalId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n@@ -27,23 +26,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n             errors: &errors,\n         };\n \n-        let module = tcx.hir_module_items(module_id);\n-\n-        for id in module.items() {\n-            v.visit_item(tcx.hir().item(id))\n-        }\n-\n-        for id in module.trait_items() {\n-            v.visit_trait_item(tcx.hir().trait_item(id))\n-        }\n-\n-        for id in module.impl_items() {\n-            v.visit_impl_item(tcx.hir().impl_item(id))\n-        }\n-\n-        for id in module.foreign_items() {\n-            v.visit_foreign_item(tcx.hir().foreign_item(id))\n-        }\n+        tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n     });\n \n     let errors = errors.into_inner();"}]}