{"sha": "0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTY3NTFjMTlkM2JhODBkZjViMGIwMmMwMGJmNDRlMTNjOTdlODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T19:29:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T19:29:01Z"}, "message": "Auto merge of #72378 - Dylan-DPC:rollup-m87bp2d, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #71863 (Suggest fixes and add error recovery for `use foo::self`)\n - #72139 (Make `fold` standalone.)\n - #72275 (Continue lowering for unsupported async generator instead of returning an error.)\n - #72361 (split_inclusive: add tracking issue number (72360))\n - #72364 (Remove unused dependencies)\n - #72366 (Adjust the zero check in `RawVec::grow`.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2ddddb42019aa9592270dedf9eb4ac4ce3229bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddddb42019aa9592270dedf9eb4ac4ce3229bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "html_url": "https://github.com/rust-lang/rust/commit/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8858a435f3eef655df3e4fb6bec15d33e44a374e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8858a435f3eef655df3e4fb6bec15d33e44a374e", "html_url": "https://github.com/rust-lang/rust/commit/8858a435f3eef655df3e4fb6bec15d33e44a374e"}, {"sha": "51f80b7630d8b9c3878f59cbd0cf93579f8fcdcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f80b7630d8b9c3878f59cbd0cf93579f8fcdcb", "html_url": "https://github.com/rust-lang/rust/commit/51f80b7630d8b9c3878f59cbd0cf93579f8fcdcb"}], "stats": {"total": 525, "additions": 415, "deletions": 110}, "files": [{"sha": "d81fd6e8d3afd6fd7ac275674f9cce6d474fad4a", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -4088,7 +4088,6 @@ dependencies = [\n  \"log\",\n  \"measureme\",\n  \"polonius-engine\",\n- \"rustc-rayon\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n@@ -4151,7 +4150,6 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n- \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4295,7 +4293,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_fs_util\",\n- \"rustc_index\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -4328,7 +4325,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n- \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "2bd4733db420bf0c713b0a2d788f5341508838ff", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -401,16 +401,15 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         needed_extra_capacity: usize,\n         placement: ReallocPlacement,\n     ) -> Result<(), TryReserveError> {\n+        // This is ensured by the calling contexts.\n+        debug_assert!(needed_extra_capacity > 0);\n+\n         if mem::size_of::<T>() == 0 {\n             // Since we return a capacity of `usize::MAX` when `elem_size` is\n             // 0, getting to here necessarily means the `RawVec` is overfull.\n             return Err(CapacityOverflow);\n         }\n \n-        if needed_extra_capacity == 0 {\n-            return Ok(());\n-        }\n-\n         // Nothing we can really do about these checks, sadly.\n         let required_cap =\n             used_capacity.checked_add(needed_extra_capacity).ok_or(CapacityOverflow)?;"}, {"sha": "195847ee98dc4755944db419326f636e743961da", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -512,6 +512,9 @@ where\n             acc = self.iter.try_fold(acc, &mut f)?;\n         }\n     }\n+\n+    // No `fold` override, because `fold` doesn't make much sense for `Cycle`,\n+    // and we can't do anything better than the default.\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -643,6 +646,25 @@ where\n         }\n         from_fn(nth(&mut self.iter, self.step)).try_fold(acc, f)\n     }\n+\n+    fn fold<Acc, F>(mut self, mut acc: Acc, mut f: F) -> Acc\n+    where\n+        F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn nth<I: Iterator>(iter: &mut I, step: usize) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth(step)\n+        }\n+\n+        if self.first_take {\n+            self.first_take = false;\n+            match self.iter.next() {\n+                None => return acc,\n+                Some(x) => acc = f(acc, x),\n+            }\n+        }\n+        from_fn(nth(&mut self.iter, self.step)).fold(acc, f)\n+    }\n }\n \n impl<I> StepBy<I>\n@@ -702,6 +724,29 @@ where\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn rfold<Acc, F>(mut self, init: Acc, mut f: F) -> Acc\n+    where\n+        Self: Sized,\n+        F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn nth_back<I: DoubleEndedIterator>(\n+            iter: &mut I,\n+            step: usize,\n+        ) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth_back(step)\n+        }\n+\n+        match self.next_back() {\n+            None => init,\n+            Some(x) => {\n+                let acc = f(init, x);\n+                from_fn(nth_back(&mut self.iter, self.step)).fold(acc, f)\n+            }\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit.\n@@ -1767,6 +1812,20 @@ where\n             self.iter.try_fold(init, check(flag, p, fold)).into_try()\n         }\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(fold)).unwrap()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1838,6 +1897,20 @@ where\n         })\n         .into_try()\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(fold)).unwrap()\n+    }\n }\n \n /// An iterator that skips over `n` elements of `iter`.\n@@ -2006,6 +2079,18 @@ where\n             self.iter.try_rfold(init, check(n, fold)).into_try()\n         }\n     }\n+\n+    fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<Acc, T>(mut f: impl FnMut(Acc, T) -> Acc) -> impl FnMut(Acc, T) -> Result<Acc, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_rfold(init, ok(fold)).unwrap()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -2105,6 +2190,20 @@ where\n             self.iter.try_fold(init, check(n, fold)).into_try()\n         }\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(fold)).unwrap()\n+    }\n }\n \n #[stable(feature = \"double_ended_take_iterator\", since = \"1.38.0\")]\n@@ -2156,6 +2255,24 @@ where\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        if self.n == 0 {\n+            init\n+        } else {\n+            let len = self.iter.len();\n+            if len > self.n && self.iter.nth_back(len - self.n - 1).is_none() {\n+                init\n+            } else {\n+                self.iter.rfold(init, fold)\n+            }\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2237,6 +2354,20 @@ where\n         let f = &mut self.f;\n         self.iter.try_fold(init, scan(state, f, fold)).into_try()\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(fold)).unwrap()\n+    }\n }\n \n /// An iterator that calls a function with a reference to each element before\n@@ -2444,4 +2575,17 @@ where\n             })\n             .into_try()\n     }\n+\n+    fn fold<B, F>(mut self, init: B, fold: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(fold)).unwrap()\n+    }\n }"}, {"sha": "388a5548a31a5e0f0adeb8440822619d6d36faa5", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -658,6 +658,20 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         Try::from_ok(accum)\n     }\n \n+    #[inline]\n+    fn fold<B, F>(mut self, init: B, f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_fold(init, ok(f)).unwrap()\n+    }\n+\n     #[inline]\n     fn last(mut self) -> Option<A> {\n         self.next_back()\n@@ -746,6 +760,20 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n \n         Try::from_ok(accum)\n     }\n+\n+    #[inline]\n+    fn rfold<B, F>(mut self, init: B, f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        #[inline]\n+        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n+            move |acc, x| Ok(f(acc, x))\n+        }\n+\n+        self.try_rfold(init, ok(f)).unwrap()\n+    }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}, {"sha": "cceb373d552a86ba682c5f63121bf6496979f2fa", "filename": "src/libcore/iter/traits/double_ended.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -221,17 +221,16 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    fn rfold<B, F>(mut self, accum: B, f: F) -> B\n+    fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n+        let mut accum = init;\n+        while let Some(x) = self.next_back() {\n+            accum = f(accum, x);\n         }\n-\n-        self.try_rfold(accum, ok(f)).unwrap()\n+        accum\n     }\n \n     /// Searches for an element of an iterator from the back that satisfies a predicate."}, {"sha": "1c3d95cbb8c3504f9e5b47d52ebbe809980ea18f", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1697,8 +1697,8 @@ pub trait Iterator {\n             mut f: impl FnMut(&T) -> bool + 'a,\n             left: &'a mut B,\n             right: &'a mut B,\n-        ) -> impl FnMut(T) + 'a {\n-            move |x| {\n+        ) -> impl FnMut((), T) + 'a {\n+            move |(), x| {\n                 if f(&x) {\n                     left.extend(Some(x));\n                 } else {\n@@ -1710,7 +1710,7 @@ pub trait Iterator {\n         let mut left: B = Default::default();\n         let mut right: B = Default::default();\n \n-        self.for_each(extend(f, &mut left, &mut right));\n+        self.fold((), extend(f, &mut left, &mut right));\n \n         (left, right)\n     }\n@@ -1826,7 +1826,7 @@ pub trait Iterator {\n     ///\n     /// # Note to Implementors\n     ///\n-    /// Most of the other (forward) methods have default implementations in\n+    /// Several of the other (forward) methods have default implementations in\n     /// terms of this one, so try to implement this explicitly if it can\n     /// do something better than the default `for` loop implementation.\n     ///\n@@ -1944,6 +1944,15 @@ pub trait Iterator {\n     /// may not terminate for infinite iterators, even on traits for which a\n     /// result is determinable in finite time.\n     ///\n+    /// # Note to Implementors\n+    ///\n+    /// Several of the other (forward) methods have default implementations in\n+    /// terms of this one, so try to implement this explicitly if it can\n+    /// do something better than the default `for` loop implementation.\n+    ///\n+    /// In particular, try to have this call `fold()` on the internal parts\n+    /// from which this iterator is composed.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1992,17 +2001,16 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fold<B, F>(mut self, init: B, f: F) -> B\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        #[inline]\n-        fn ok<B, T>(mut f: impl FnMut(B, T) -> B) -> impl FnMut(B, T) -> Result<B, !> {\n-            move |acc, x| Ok(f(acc, x))\n+        let mut accum = init;\n+        while let Some(x) = self.next() {\n+            accum = f(accum, x);\n         }\n-\n-        self.try_fold(init, ok(f)).unwrap()\n+        accum\n     }\n \n     /// The same as [`fold()`](#method.fold), but uses the first element in the\n@@ -2273,7 +2281,7 @@ pub trait Iterator {\n         F: FnMut(&Self::Item) -> R,\n         R: Try<Ok = bool, Error = E>,\n     {\n-        self.try_for_each(move |x| match f(&x).into_result() {\n+        self.try_fold((), move |(), x| match f(&x).into_result() {\n             Ok(false) => LoopState::Continue(()),\n             Ok(true) => LoopState::Break(Ok(x)),\n             Err(x) => LoopState::Break(Err(x)),\n@@ -2665,8 +2673,8 @@ pub trait Iterator {\n         fn extend<'a, A, B>(\n             ts: &'a mut impl Extend<A>,\n             us: &'a mut impl Extend<B>,\n-        ) -> impl FnMut((A, B)) + 'a {\n-            move |(t, u)| {\n+        ) -> impl FnMut((), (A, B)) + 'a {\n+            move |(), (t, u)| {\n                 ts.extend(Some(t));\n                 us.extend(Some(u));\n             }\n@@ -2675,7 +2683,7 @@ pub trait Iterator {\n         let mut ts: FromA = Default::default();\n         let mut us: FromB = Default::default();\n \n-        self.for_each(extend(&mut ts, &mut us));\n+        self.fold((), extend(&mut ts, &mut us));\n \n         (ts, us)\n     }"}, {"sha": "9582ac33ff6b78ac9387d9ee6347c58e34a1a19d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1169,7 +1169,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.next().unwrap(), &[10, 40, 33]);\n     /// assert!(iter.next().is_none());\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive<F>(&self, pred: F) -> SplitInclusive<'_, T, F>\n     where\n@@ -1194,7 +1194,7 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(v, [10, 40, 1, 20, 1, 1]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive_mut<F>(&mut self, pred: F) -> SplitInclusiveMut<'_, T, F>\n     where\n@@ -3852,7 +3852,7 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3862,7 +3862,7 @@ where\n     finished: bool,\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusive<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3876,7 +3876,7 @@ where\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> Clone for SplitInclusive<'_, T, P>\n where\n     P: Clone + FnMut(&T) -> bool,\n@@ -3886,7 +3886,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> Iterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3915,7 +3915,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusive<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -3940,7 +3940,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the mutable subslices of the vector which are separated\n@@ -4065,7 +4065,7 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4075,7 +4075,7 @@ where\n     finished: bool,\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitInclusiveMut<'_, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4088,7 +4088,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> Iterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4128,7 +4128,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, T, P> DoubleEndedIterator for SplitInclusiveMut<'a, T, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -4162,7 +4162,7 @@ where\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate"}, {"sha": "c517286d49898ab824872b90c40f8cfed323b6b9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -3335,7 +3335,7 @@ impl str {\n     ///     .split_inclusive('\\n').collect();\n     /// assert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n     /// ```\n-    #[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+    #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n     #[inline]\n     pub fn split_inclusive<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitInclusive<'a, P> {\n         SplitInclusive(SplitInternal {\n@@ -4575,7 +4575,7 @@ pub struct SplitAsciiWhitespace<'a> {\n ///\n /// [`split_inclusive`]: ../../std/primitive.str.html#method.split_inclusive\n /// [`str`]: ../../std/primitive.str.html\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusive<'a, P: Pattern<'a>>(SplitInternal<'a, P>);\n \n impl_fn_for_zst! {\n@@ -4668,7 +4668,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;\n \n@@ -4678,22 +4678,22 @@ impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: fmt::Debug>> fmt::Debug for SplitInclusive<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInclusive\").field(\"0\", &self.0).finish()\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: Clone>> Clone for SplitInclusive<'a, P> {\n     fn clone(&self) -> Self {\n         SplitInclusive(self.0.clone())\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     for SplitInclusive<'a, P>\n {\n@@ -4703,7 +4703,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n     }\n }\n \n-#[unstable(feature = \"split_inclusive\", issue = \"none\")]\n+#[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n /// An iterator of [`u16`] over the string encoded as UTF-16."}, {"sha": "5bcd111706f35704190a2ff8b95f20abe2f627db", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1322,7 +1322,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     \"`async` generators are not yet supported\"\n                 )\n                 .emit();\n-                return hir::ExprKind::Err;\n             }\n             None => self.generator_kind = Some(hir::GeneratorKind::Gen),\n         }"}, {"sha": "0bb32438b727616e654c0e46844028b707b54396", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -14,7 +14,6 @@ arena = { path = \"../libarena\" }\n bitflags = \"1.2.1\"\n scoped-tls = \"1.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n-rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n polonius-engine = \"0.12.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "d2e53facf5e0a997a6462e0a84f3e11d03c16636", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1114,16 +1114,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n-            // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n-            // some `NodeId` do not seem to have a corresponding HirId.\n-            if let Some(hir_id) = definitions.opt_node_id_to_hir_id(k) {\n-                let map = trait_map.entry(hir_id.owner).or_default();\n-                let v = v\n-                    .into_iter()\n-                    .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                    .collect();\n-                map.insert(hir_id.local_id, StableVec::new(v));\n-            }\n+            let hir_id = definitions.node_id_to_hir_id(k);\n+            let map = trait_map.entry(hir_id.owner).or_default();\n+            let v = v\n+                .into_iter()\n+                .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n+                .collect();\n+            map.insert(hir_id.local_id, StableVec::new(v));\n         }\n \n         GlobalCtxt {"}, {"sha": "4a64cf74787ac3d6bca91e90ae8ca80113d5ab4f", "filename": "src/librustc_mir_build/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_mir_build%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_mir_build%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2FCargo.toml?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -20,7 +20,6 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }\n-rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "988ec3d4374e0f375765d8bbc05e2741c09f3a1d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             return;\n                         }\n \n-                        // Replace `use foo::self;` with `use foo;`\n+                        // Replace `use foo::{ self };` with `use foo;`\n                         source = module_path.pop().unwrap();\n                         if rename.is_none() {\n                             ident = source.ident;\n@@ -435,10 +435,33 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 } else {\n                     // Disallow `self`\n                     if source.ident.name == kw::SelfLower {\n+                        let parent = module_path.last();\n+\n+                        let span = match parent {\n+                            // only `::self` from `use foo::self as bar`\n+                            Some(seg) => seg.ident.span.shrink_to_hi().to(source.ident.span),\n+                            None => source.ident.span,\n+                        };\n+                        let span_with_rename = match rename {\n+                            // only `self as bar` from `use foo::self as bar`\n+                            Some(rename) => source.ident.span.to(rename.span),\n+                            None => source.ident.span,\n+                        };\n                         self.r.report_error(\n-                            use_tree.span,\n-                            ResolutionError::SelfImportsOnlyAllowedWithin,\n+                            span,\n+                            ResolutionError::SelfImportsOnlyAllowedWithin {\n+                                root: parent.is_none(),\n+                                span_with_rename,\n+                            },\n                         );\n+\n+                        // Error recovery: replace `use foo::self;` with `use foo;`\n+                        if let Some(parent) = module_path.pop() {\n+                            source = parent;\n+                            if rename.is_none() {\n+                                ident = source.ident;\n+                            }\n+                        }\n                     }\n \n                     // Disallow `use $crate;`"}, {"sha": "ea237f1a04f992d78ebfe7a6a4c14d08b202fe09", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -301,13 +301,40 @@ impl<'a> Resolver<'a> {\n                 }\n                 err\n             }\n-            ResolutionError::SelfImportsOnlyAllowedWithin => struct_span_err!(\n-                self.session,\n-                span,\n-                E0429,\n-                \"{}\",\n-                \"`self` imports are only allowed within a { } list\"\n-            ),\n+            ResolutionError::SelfImportsOnlyAllowedWithin { root, span_with_rename } => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0429,\n+                    \"{}\",\n+                    \"`self` imports are only allowed within a { } list\"\n+                );\n+\n+                // None of the suggestions below would help with a case like `use self`.\n+                if !root {\n+                    // use foo::bar::self        -> foo::bar\n+                    // use foo::bar::self as abc -> foo::bar as abc\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider importing the module directly\",\n+                        \"\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    // use foo::bar::self        -> foo::bar::{self}\n+                    // use foo::bar::self as abc -> foo::bar::{self as abc}\n+                    let braces = vec![\n+                        (span_with_rename.shrink_to_lo(), \"{\".to_string()),\n+                        (span_with_rename.shrink_to_hi(), \"}\".to_string()),\n+                    ];\n+                    err.multipart_suggestion(\n+                        \"alternatively, use the multi-path `use` syntax to import `self`\",\n+                        braces,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                err\n+            }\n             ResolutionError::SelfImportCanOnlyAppearOnceInTheList => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "bfb7f081fc33336ebb9d12c5e0cd8539dae21b70", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -194,7 +194,7 @@ enum ResolutionError<'a> {\n     /// Error E0426: use of undeclared label.\n     UndeclaredLabel(&'a str, Option<Symbol>),\n     /// Error E0429: `self` imports are only allowed within a `{ }` list.\n-    SelfImportsOnlyAllowedWithin,\n+    SelfImportsOnlyAllowedWithin { root: bool, span_with_rename: Span },\n     /// Error E0430: `self` import can only appear once in the list.\n     SelfImportCanOnlyAppearOnceInTheList,\n     /// Error E0431: `self` import can only appear in an import list with a non-empty prefix."}, {"sha": "705c115cf3c854aae664edb9f8a7ff1326bac807", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -17,7 +17,6 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_span = { path = \"../librustc_span\" }\n-rustc_index = { path = \"../librustc_index\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n num_cpus = \"1.0\"\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "d670ababe9f12be8087c1e94615c9a631727be92", "filename": "src/librustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Flibrustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2FCargo.toml?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -20,5 +20,4 @@ rustc_middle = { path = \"../librustc_middle\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "ec58f7068abac0b276f9304b313d7574efebd647", "filename": "src/test/codegen/iter-fold-closure-no-dupes.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8858a435f3eef655df3e4fb6bec15d33e44a374e/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-dupes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8858a435f3eef655df3e4fb6bec15d33e44a374e/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-dupes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-dupes.rs?ref=8858a435f3eef655df3e4fb6bec15d33e44a374e", "patch": "@@ -1,14 +0,0 @@\n-//! Check that fold closures aren't duplicated for each iterator type.\n-// compile-flags: -C opt-level=0\n-\n-fn main() {\n-    (0i32..10).by_ref().count();\n-    (0i32..=10).by_ref().count();\n-}\n-\n-// `count` calls `fold`, which calls `try_fold` -- find the `fold` closure:\n-// CHECK: {{^define.*Iterator::fold::.*closure}}\n-//\n-// Only one closure is needed for both `count` calls, even from different\n-// monomorphized iterator types, as it's only generic over the item type.\n-// CHECK-NOT: {{^define.*Iterator::fold::.*closure}}"}, {"sha": "fbeafd5f395827b8774b5bd1695f4e2560a1d015", "filename": "src/test/codegen/iter-fold-closure-no-iterator.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8858a435f3eef655df3e4fb6bec15d33e44a374e/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8858a435f3eef655df3e4fb6bec15d33e44a374e/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fiter-fold-closure-no-iterator.rs?ref=8858a435f3eef655df3e4fb6bec15d33e44a374e", "patch": "@@ -1,10 +0,0 @@\n-//! Check that fold closures aren't generic in the iterator type.\n-// compile-flags: -C opt-level=0\n-\n-fn main() {\n-    (0i32..10).by_ref().count();\n-}\n-\n-// `count` calls `fold`, which calls `try_fold` -- that `fold` closure should\n-// not be generic in the iterator type, only in the item type.\n-// CHECK-NOT: {{^define.*Iterator::fold::.*closure.*Range}}"}, {"sha": "c598803fa6cb80e2d340e93e552e4c0607b2c940", "filename": "src/test/ui/error-codes/E0429.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1,8 +1,17 @@\n error[E0429]: `self` imports are only allowed within a { } list\n-  --> $DIR/E0429.rs:1:5\n+  --> $DIR/E0429.rs:1:13\n    |\n LL | use std::fmt::self;\n-   |     ^^^^^^^^^^^^^^\n+   |             ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use std::fmt;\n+   |            --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use std::fmt::{self};\n+   |               ^    ^\n \n error: aborting due to previous error\n "}, {"sha": "2dc4331ced775f2490e679b2f866938863511b1c", "filename": "src/test/ui/issues/issue-45829/import-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -9,7 +9,7 @@ use foo::{self};\n use foo as self;\n //~^ ERROR expected identifier\n \n-use foo::self;\n+use foo::self; //~ ERROR is defined multiple times\n //~^ ERROR `self` imports are only allowed within a { } list\n \n use foo::A;"}, {"sha": "158e81cdd9643c179483711e6f9765cdbcf367e9", "filename": "src/test/ui/issues/issue-45829/import-self.stderr", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -5,10 +5,19 @@ LL | use foo as self;\n    |            ^^^^ expected identifier, found keyword\n \n error[E0429]: `self` imports are only allowed within a { } list\n-  --> $DIR/import-self.rs:12:5\n+  --> $DIR/import-self.rs:12:8\n    |\n LL | use foo::self;\n-   |     ^^^^^^^^^\n+   |        ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use foo;\n+   |       --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use foo::{self};\n+   |          ^    ^\n \n error[E0255]: the name `foo` is defined multiple times\n   --> $DIR/import-self.rs:6:11\n@@ -25,6 +34,21 @@ help: you can use `as` to change the binding name of the import\n LL | use foo::{self as other_foo};\n    |           ^^^^^^^^^^^^^^^^^\n \n+error[E0255]: the name `foo` is defined multiple times\n+  --> $DIR/import-self.rs:12:5\n+   |\n+LL | mod foo {\n+   | ------- previous definition of the module `foo` here\n+...\n+LL | use foo::self;\n+   |     ^^^^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo as other_foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n error[E0252]: the name `A` is defined multiple times\n   --> $DIR/import-self.rs:16:11\n    |\n@@ -39,7 +63,7 @@ help: you can use `as` to change the binding name of the import\n LL | use foo::{self as OtherA};\n    |           ^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0252, E0255, E0429.\n For more information about an error, try `rustc --explain E0252`."}, {"sha": "501d14be521778bf0227ba90735f8fbb0e3b16f8", "filename": "src/test/ui/use/use-keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-keyword.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -2,7 +2,7 @@ error[E0429]: `self` imports are only allowed within a { } list\n   --> $DIR/use-keyword.rs:6:13\n    |\n LL |         use self as A;\n-   |             ^^^^^^^^^\n+   |             ^^^^\n \n error[E0432]: unresolved import `super`\n   --> $DIR/use-keyword.rs:8:13"}, {"sha": "a29bd07ac4419eaff767ae9bf767218b7fd14b2e", "filename": "src/test/ui/use/use-mod/use-mod-4.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -1,20 +1,38 @@\n error[E0429]: `self` imports are only allowed within a { } list\n-  --> $DIR/use-mod-4.rs:1:5\n+  --> $DIR/use-mod-4.rs:1:8\n    |\n LL | use foo::self;\n-   |     ^^^^^^^^^\n+   |        ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use foo;\n+   |       --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use foo::{self};\n+   |          ^    ^\n \n error[E0429]: `self` imports are only allowed within a { } list\n-  --> $DIR/use-mod-4.rs:4:5\n+  --> $DIR/use-mod-4.rs:4:13\n    |\n LL | use std::mem::self;\n-   |     ^^^^^^^^^^^^^^\n+   |             ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use std::mem;\n+   |            --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use std::mem::{self};\n+   |               ^    ^\n \n error[E0432]: unresolved import `foo`\n   --> $DIR/use-mod-4.rs:1:5\n    |\n LL | use foo::self;\n-   |     ^^^ maybe a missing crate `foo`?\n+   |     ^^^^^^^^^ no `foo` in the root\n \n error: aborting due to 3 previous errors\n "}, {"sha": "df5b423ec57e6ad195bb6c621f7d58447a64e8fc", "filename": "src/test/ui/use/use-mod/use-mod-5.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -0,0 +1,13 @@\n+mod foo {\n+    pub mod bar {\n+        pub fn drop() {}\n+    }\n+}\n+\n+use foo::bar::self;\n+//~^ ERROR `self` imports are only allowed within a { } list\n+\n+fn main() {\n+    // Because of error recovery this shouldn't error\n+    bar::drop();\n+}"}, {"sha": "ebb71c51293ec277d6bd4a2dd5498d423d286ecd", "filename": "src/test/ui/use/use-mod/use-mod-5.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -0,0 +1,18 @@\n+error[E0429]: `self` imports are only allowed within a { } list\n+  --> $DIR/use-mod-5.rs:7:13\n+   |\n+LL | use foo::bar::self;\n+   |             ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use foo::bar;\n+   |            --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use foo::bar::{self};\n+   |               ^    ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0429`."}, {"sha": "1f8777daca491d5c8b4b86e6d589308771d633b5", "filename": "src/test/ui/use/use-mod/use-mod-6.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.rs?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -0,0 +1,13 @@\n+mod foo {\n+    pub mod bar {\n+        pub fn drop() {}\n+    }\n+}\n+\n+use foo::bar::self as abc;\n+//~^ ERROR `self` imports are only allowed within a { } list\n+\n+fn main() {\n+    // Because of error recovery this shouldn't error\n+    abc::drop();\n+}"}, {"sha": "36fdf9c75c704f5a5a15af0e59dd6fcbdf288687", "filename": "src/test/ui/use/use-mod/use-mod-6.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa6751c19d3ba80df5b0b02c00bf44e13c97e80/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr?ref=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80", "patch": "@@ -0,0 +1,18 @@\n+error[E0429]: `self` imports are only allowed within a { } list\n+  --> $DIR/use-mod-6.rs:7:13\n+   |\n+LL | use foo::bar::self as abc;\n+   |             ^^^^^^\n+   |\n+help: consider importing the module directly\n+   |\n+LL | use foo::bar as abc;\n+   |            --\n+help: alternatively, use the multi-path `use` syntax to import `self`\n+   |\n+LL | use foo::bar::{self as abc};\n+   |               ^           ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0429`."}]}