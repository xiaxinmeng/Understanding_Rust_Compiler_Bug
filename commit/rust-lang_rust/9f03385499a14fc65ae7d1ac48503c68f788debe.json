{"sha": "9f03385499a14fc65ae7d1ac48503c68f788debe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDMzODU0OTlhMTRmYzY1YWU3ZDFhYzQ4NTAzYzY4Zjc4OGRlYmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-20T09:08:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-20T09:08:27Z"}, "message": "Rollup merge of #84337 - matklad:insert_or_insert, r=jyn514\n\nClarify the difference between insert and get_or_insert\n\nTook me a while to realize that the two are actually different.", "tree": {"sha": "7dfd5d08d7c4dd622b73f16ad74e778795b6fdc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dfd5d08d7c4dd622b73f16ad74e778795b6fdc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f03385499a14fc65ae7d1ac48503c68f788debe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfpoLCRBK7hj4Ov3rIwAAn68IAGH/cF4RDsCs2cYIT0TFmBGN\ngTYo6XYpbgWR+Bvq/EE5kR+pX3LtoKPhkl9V2O0wFg1sCc6fwA6czuVZ10jjLrMO\naRqcQkup6BEbN/CYwaRgz3boF044+p7KwBDz0mMDLCLH1pwPusIZdJPkl1aGvHG7\nAerOmVbJMP+e4hvJob7dS4liA2M1XiZRNmEsJPea+rtKACCVTPUaAAdpZJVxf0r9\nGsrLJfED1kb9yMmFkK8xwtcI0YLldRFrvOAnPna42mW1XWy3EKyWLhNHSfxYhk1L\nnEZPPv2vtH4lrKYx0wsp2qrtw3nAKKiH6zxVydQV6Yyk4gIg4JYht1VsCD8gJ3E=\n=lu41\n-----END PGP SIGNATURE-----\n", "payload": "tree 7dfd5d08d7c4dd622b73f16ad74e778795b6fdc9\nparent a70fbf6620ddaacc2ef805fa8c4ac2dc9bf02f3c\nparent de16951dad317a0ce07cf73f7b2202e20f331aa5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618909707 +0200\ncommitter GitHub <noreply@github.com> 1618909707 +0200\n\nRollup merge of #84337 - matklad:insert_or_insert, r=jyn514\n\nClarify the difference between insert and get_or_insert\n\nTook me a while to realize that the two are actually different.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f03385499a14fc65ae7d1ac48503c68f788debe", "html_url": "https://github.com/rust-lang/rust/commit/9f03385499a14fc65ae7d1ac48503c68f788debe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f03385499a14fc65ae7d1ac48503c68f788debe/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70fbf6620ddaacc2ef805fa8c4ac2dc9bf02f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70fbf6620ddaacc2ef805fa8c4ac2dc9bf02f3c", "html_url": "https://github.com/rust-lang/rust/commit/a70fbf6620ddaacc2ef805fa8c4ac2dc9bf02f3c"}, {"sha": "de16951dad317a0ce07cf73f7b2202e20f331aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/de16951dad317a0ce07cf73f7b2202e20f331aa5", "html_url": "https://github.com/rust-lang/rust/commit/de16951dad317a0ce07cf73f7b2202e20f331aa5"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "1c68abaf79d2355ece2f4f4e0ce56f192b65b14b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9f03385499a14fc65ae7d1ac48503c68f788debe/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f03385499a14fc65ae7d1ac48503c68f788debe/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9f03385499a14fc65ae7d1ac48503c68f788debe", "patch": "@@ -594,34 +594,6 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts `value` into the option then returns a mutable reference to it.\n-    ///\n-    /// If the option already contains a value, the old value is dropped.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut opt = None;\n-    /// let val = opt.insert(1);\n-    /// assert_eq!(*val, 1);\n-    /// assert_eq!(opt.unwrap(), 1);\n-    /// let val = opt.insert(2);\n-    /// assert_eq!(*val, 2);\n-    /// *val = 3;\n-    /// assert_eq!(opt.unwrap(), 3);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    pub fn insert(&mut self, value: T) -> &mut T {\n-        *self = Some(value);\n-\n-        match self {\n-            Some(v) => v,\n-            // SAFETY: the code above just filled the option\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -849,12 +821,46 @@ impl<T> Option<T> {\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n-    // Entry-like operations to insert if None and return a reference\n+    // Entry-like operations to insert a value and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Inserts `value` into the option then returns a mutable reference to it.\n+    ///\n+    /// If the option already contains a value, the old value is dropped.\n+    ///\n+    /// See also [`Option::get_or_insert`], which doesn't update the value if\n+    /// the option already contains [`Some`].\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut opt = None;\n+    /// let val = opt.insert(1);\n+    /// assert_eq!(*val, 1);\n+    /// assert_eq!(opt.unwrap(), 1);\n+    /// let val = opt.insert(2);\n+    /// assert_eq!(*val, 2);\n+    /// *val = 3;\n+    /// assert_eq!(opt.unwrap(), 3);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n+    pub fn insert(&mut self, value: T) -> &mut T {\n+        *self = Some(value);\n+\n+        match self {\n+            Some(v) => v,\n+            // SAFETY: the code above just filled the option\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// See also [`Option::insert`], which updates the value even if\n+    /// the option already contains [`Some`].\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}