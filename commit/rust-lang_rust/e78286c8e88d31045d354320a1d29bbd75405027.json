{"sha": "e78286c8e88d31045d354320a1d29bbd75405027", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODI4NmM4ZTg4ZDMxMDQ1ZDM1NDMyMGExZDI5YmJkNzU0MDUwMjc=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-10T01:07:42Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-10T13:43:01Z"}, "message": "Save variant names in EnumData to reduce needless queries\n\nWe already have their names when anyway, and when in all (current)\nsituations where we're interested in an Enum's variants, we want\ntheir names.", "tree": {"sha": "ed4c6f986b6ede2bbafa19a66dd81f5be2d0371c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed4c6f986b6ede2bbafa19a66dd81f5be2d0371c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78286c8e88d31045d354320a1d29bbd75405027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78286c8e88d31045d354320a1d29bbd75405027", "html_url": "https://github.com/rust-lang/rust/commit/e78286c8e88d31045d354320a1d29bbd75405027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78286c8e88d31045d354320a1d29bbd75405027/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "978de5cf8bfd2ff82696fc8d5369b41e147431c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/978de5cf8bfd2ff82696fc8d5369b41e147431c3", "html_url": "https://github.com/rust-lang/rust/commit/978de5cf8bfd2ff82696fc8d5369b41e147431c3"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "bcb705c2490a403e8ecaca3038e85b8f2c9bf1f4", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=e78286c8e88d31045d354320a1d29bbd75405027", "patch": "@@ -7,13 +7,9 @@ use ra_syntax::{\n };\n \n use crate::{\n-<<<<<<< HEAD\n-    DefId, Name, AsName, Struct, Enum, HirDatabase, DefKind,\n-=======\n     DefId, DefLoc, Name, AsName, Struct, Enum, EnumVariant,\n-    VariantData, StructField, HirDatabase, DefKind,\n+    HirDatabase, DefKind,\n     SourceItemId,\n->>>>>>> 95ac72a3... Implement type inference for enum variants\n     type_ref::TypeRef,\n };\n \n@@ -79,13 +75,11 @@ fn get_def_id(\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n-    // TODO: keep track of names also since we already have them?\n-    // then we won't need additional db lookups\n-    pub(crate) variants: Option<Vec<EnumVariant>>,\n+    pub(crate) variants: Vec<(Name, EnumVariant)>,\n }\n \n impl EnumData {\n-    fn new(enum_def: &ast::EnumDef, variants: Option<Vec<EnumVariant>>) -> Self {\n+    fn new(enum_def: &ast::EnumDef, variants: Vec<(Name, EnumVariant)>) -> Self {\n         let name = enum_def.name().map(|n| n.as_name());\n         EnumData { name, variants }\n     }\n@@ -98,14 +92,21 @@ impl EnumData {\n         assert!(def_loc.kind == DefKind::Enum);\n         let syntax = db.file_item(def_loc.source_item_id);\n         let enum_def = ast::EnumDef::cast(&syntax).expect(\"enum def should point to EnumDef node\");\n-        let variants = enum_def.variant_list().map(|vl| {\n+        let variants = if let Some(vl) = enum_def.variant_list() {\n             vl.variants()\n-                .map(|ev| {\n-                    let def_id = get_def_id(db, &def_loc, ev.syntax(), DefKind::EnumVariant);\n-                    EnumVariant::new(def_id)\n+                .filter_map(|variant_def| {\n+                    let name = variant_def.name().map(|n| n.as_name());\n+\n+                    name.map(|n| {\n+                        let def_id =\n+                            get_def_id(db, &def_loc, variant_def.syntax(), DefKind::EnumVariant);\n+                        (n, EnumVariant::new(def_id))\n+                    })\n                 })\n                 .collect()\n-        });\n+        } else {\n+            Vec::new()\n+        };\n         Ok(Arc::new(EnumData::new(enum_def, variants)))\n     }\n }"}, {"sha": "725bc7d808daf27b673b12e4d21583b954b869a1", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=e78286c8e88d31045d354320a1d29bbd75405027", "patch": "@@ -201,7 +201,7 @@ impl Enum {\n         Ok(db.enum_data(self.def_id)?.name.clone())\n     }\n \n-    pub fn variants(&self, db: &impl HirDatabase) -> Cancelable<Option<Vec<EnumVariant>>> {\n+    pub fn variants(&self, db: &impl HirDatabase) -> Cancelable<Vec<(Name, EnumVariant)>> {\n         Ok(db.enum_data(self.def_id)?.variants.clone())\n     }\n }"}, {"sha": "878dc37c8a612ce1ab24549eab58595023f20c8d", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=e78286c8e88d31045d354320a1d29bbd75405027", "patch": "@@ -142,20 +142,10 @@ impl Module {\n                 Def::Enum(e) => {\n                     if segments.len() == idx + 1 {\n                         // enum variant\n-                        let matching_variant = e.variants(db)?.map(|variants| {\n-                            variants\n-                                .into_iter()\n-                                // FIXME: replace by match lol\n-                                .find(|variant| {\n-                                    variant\n-                                        .name(db)\n-                                        .map(|o| o.map(|ref n| n == name))\n-                                        .unwrap_or(Some(false))\n-                                        .unwrap_or(false)\n-                                })\n-                        });\n-\n-                        if let Some(Some(variant)) = matching_variant {\n+                        let matching_variant =\n+                            e.variants(db)?.into_iter().find(|(n, _variant)| n == name);\n+\n+                        if let Some((_n, variant)) = matching_variant {\n                             return Ok(PerNs::both(variant.def_id(), e.def_id()));\n                         } else {\n                             return Ok(PerNs::none());"}, {"sha": "9bfec88d08ab40e1484fbaff49624fc2ed521a81", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78286c8e88d31045d354320a1d29bbd75405027/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=e78286c8e88d31045d354320a1d29bbd75405027", "patch": "@@ -23,17 +23,12 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n         }\n         hir::Def::Enum(e) => {\n             e.variants(ctx.db)?\n-                .unwrap_or(vec![])\n                 .into_iter()\n-                .for_each(|variant| {\n-                    let variant_name = variant.name(ctx.db);\n-\n-                    if let Ok(Some(name)) = variant_name {\n-                        CompletionItem::new(CompletionKind::Reference, name.to_string())\n-                            .kind(CompletionItemKind::EnumVariant)\n-                            .add_to(acc)\n-                    }\n-                })\n+                .for_each(|(variant_name, _variant)| {\n+                    CompletionItem::new(CompletionKind::Reference, variant_name.to_string())\n+                        .kind(CompletionItemKind::EnumVariant)\n+                        .add_to(acc)\n+                });\n         }\n         _ => return Ok(()),\n     };"}]}