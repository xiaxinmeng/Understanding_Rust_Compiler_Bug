{"sha": "61c0b12d177c507f767f9169ed966ef83597eb44", "node_id": "C_kwDOAAsO6NoAKDYxYzBiMTJkMTc3YzUwN2Y3NjdmOTE2OWVkOTY2ZWY4MzU5N2ViNDQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T22:30:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T22:30:18Z"}, "message": "remove Clean trait implementation for hir::WherePredicate", "tree": {"sha": "421d1c3711ffbc06f5dac81140f1fbf7067e2b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421d1c3711ffbc06f5dac81140f1fbf7067e2b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c0b12d177c507f767f9169ed966ef83597eb44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c0b12d177c507f767f9169ed966ef83597eb44", "html_url": "https://github.com/rust-lang/rust/commit/61c0b12d177c507f767f9169ed966ef83597eb44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c0b12d177c507f767f9169ed966ef83597eb44/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71edb3168fcc351e8693d84d3bec6cfcb452560a", "url": "https://api.github.com/repos/rust-lang/rust/commits/71edb3168fcc351e8693d84d3bec6cfcb452560a", "html_url": "https://github.com/rust-lang/rust/commit/71edb3168fcc351e8693d84d3bec6cfcb452560a"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "4c4a7f77a90f614abe8bc80e022f5dea790a9b7a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/61c0b12d177c507f767f9169ed966ef83597eb44/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c0b12d177c507f767f9169ed966ef83597eb44/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=61c0b12d177c507f767f9169ed966ef83597eb44", "patch": "@@ -266,44 +266,45 @@ pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Life\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        if !self.in_where_clause() {\n-            return None;\n-        }\n-        Some(match *self {\n-            hir::WherePredicate::BoundPredicate(ref wbp) => {\n-                let bound_params = wbp\n-                    .bound_generic_params\n-                    .iter()\n-                    .map(|param| {\n-                        // Higher-ranked params must be lifetimes.\n-                        // Higher-ranked lifetimes can't have bounds.\n-                        assert_matches!(\n-                            param,\n-                            hir::GenericParam { kind: hir::GenericParamKind::Lifetime { .. }, .. }\n-                        );\n-                        Lifetime(param.name.ident().name)\n-                    })\n-                    .collect();\n-                WherePredicate::BoundPredicate {\n-                    ty: clean_ty(wbp.bounded_ty, cx),\n-                    bounds: wbp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n-                    bound_params,\n-                }\n+fn clean_where_predicate<'tcx>(\n+    predicate: &hir::WherePredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    if !predicate.in_where_clause() {\n+        return None;\n+    }\n+    Some(match *predicate {\n+        hir::WherePredicate::BoundPredicate(ref wbp) => {\n+            let bound_params = wbp\n+                .bound_generic_params\n+                .iter()\n+                .map(|param| {\n+                    // Higher-ranked params must be lifetimes.\n+                    // Higher-ranked lifetimes can't have bounds.\n+                    assert_matches!(\n+                        param,\n+                        hir::GenericParam { kind: hir::GenericParamKind::Lifetime { .. }, .. }\n+                    );\n+                    Lifetime(param.name.ident().name)\n+                })\n+                .collect();\n+            WherePredicate::BoundPredicate {\n+                ty: clean_ty(wbp.bounded_ty, cx),\n+                bounds: wbp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n+                bound_params,\n             }\n+        }\n \n-            hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n-                lifetime: clean_lifetime(wrp.lifetime, cx),\n-                bounds: wrp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n-            },\n+        hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n+            lifetime: clean_lifetime(wrp.lifetime, cx),\n+            bounds: wrp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n+        },\n \n-            hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n-                lhs: clean_ty(wrp.lhs_ty, cx),\n-                rhs: clean_ty(wrp.rhs_ty, cx).into(),\n-            },\n-        })\n-    }\n+        hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n+            lhs: clean_ty(wrp.lhs_ty, cx),\n+            rhs: clean_ty(wrp.rhs_ty, cx).into(),\n+        },\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n@@ -601,7 +602,11 @@ impl<'tcx> Clean<'tcx, Generics> for hir::Generics<'tcx> {\n \n         let mut generics = Generics {\n             params,\n-            where_predicates: self.predicates.iter().filter_map(|x| x.clean(cx)).collect(),\n+            where_predicates: self\n+                .predicates\n+                .iter()\n+                .filter_map(|x| clean_where_predicate(x, cx))\n+                .collect(),\n         };\n \n         // Some duplicates are generated for ?Sized bounds between type params and where"}]}