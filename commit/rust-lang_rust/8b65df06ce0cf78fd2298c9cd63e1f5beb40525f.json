{"sha": "8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjVkZjA2Y2UwY2Y3OGZkMjI5OGM5Y2Q2M2UxZjViZWI0MDUyNWY=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-08-18T21:02:23Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T22:19:47Z"}, "message": "Address review comments", "tree": {"sha": "9d1ba2b6e8a4e50a9a4d236b2812de887fca8286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1ba2b6e8a4e50a9a4d236b2812de887fca8286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "html_url": "https://github.com/rust-lang/rust/commit/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f4afe0f6e9ce451e2aca0a91100c6335be9181", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4afe0f6e9ce451e2aca0a91100c6335be9181", "html_url": "https://github.com/rust-lang/rust/commit/a2f4afe0f6e9ce451e2aca0a91100c6335be9181"}], "stats": {"total": 105, "additions": 48, "deletions": 57}, "files": [{"sha": "7b595dd18ff6b497a9f2cd50a359e999cc75d857", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 35, "deletions": 49, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "patch": "@@ -1,10 +1,10 @@\n use crate::LateContext;\n use crate::LateLintPass;\n use crate::LintContext;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, PathSegment};\n use rustc_middle::ty;\n use rustc_span::{\n-    symbol::{sym, Symbol, SymbolStr},\n+    symbol::{sym, Symbol},\n     ExpnKind, Span,\n };\n \n@@ -16,34 +16,6 @@ declare_lint! {\n \n declare_lint_pass!(TemporaryCStringAsPtr => [TEMPORARY_CSTRING_AS_PTR]);\n \n-/// Returns the method names and argument list of nested method call expressions that make up\n-/// `expr`. method/span lists are sorted with the most recent call first.\n-pub fn method_calls<'tcx>(\n-    expr: &'tcx Expr<'tcx>,\n-    max_depth: usize,\n-) -> (Vec<Symbol>, Vec<&'tcx [Expr<'tcx>]>, Vec<Span>) {\n-    let mut method_names = Vec::with_capacity(max_depth);\n-    let mut arg_lists = Vec::with_capacity(max_depth);\n-    let mut spans = Vec::with_capacity(max_depth);\n-\n-    let mut current = expr;\n-    for _ in 0..max_depth {\n-        if let ExprKind::MethodCall(path, span, args, _) = &current.kind {\n-            if args.iter().any(|e| e.span.from_expansion()) {\n-                break;\n-            }\n-            method_names.push(path.ident.name);\n-            arg_lists.push(&**args);\n-            spans.push(*span);\n-            current = &args[0];\n-        } else {\n-            break;\n-        }\n-    }\n-\n-    (method_names, arg_lists, spans)\n-}\n-\n fn in_macro(span: Span) -> bool {\n     if span.from_expansion() {\n         !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n@@ -52,47 +24,61 @@ fn in_macro(span: Span) -> bool {\n     }\n }\n \n+fn first_method_call<'tcx>(\n+    expr: &'tcx Expr<'tcx>,\n+) -> Option<(&'tcx PathSegment<'tcx>, &'tcx [Expr<'tcx>])> {\n+    if let ExprKind::MethodCall(path, _, args, _) = &expr.kind {\n+        if args.iter().any(|e| e.span.from_expansion()) { None } else { Some((path, *args)) }\n+    } else {\n+        None\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_macro(expr.span) {\n             return;\n         }\n \n-        let (method_names, arg_lists, _) = method_calls(expr, 2);\n-        let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n-        let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n-\n-        if let [\"as_ptr\", \"unwrap\" | \"expect\"] = method_names.as_slice() {\n-            lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]);\n+        match first_method_call(expr) {\n+            Some((path, args)) if path.ident.name == sym::as_ptr => {\n+                let unwrap_arg = &args[0];\n+                match first_method_call(unwrap_arg) {\n+                    Some((path, args))\n+                        if path.ident.name == sym::unwrap || path.ident.name == sym::expect =>\n+                    {\n+                        let source_arg = &args[0];\n+                        lint_cstring_as_ptr(cx, source_arg, unwrap_arg);\n+                    }\n+                    _ => return,\n+                }\n+            }\n+            _ => return,\n         }\n     }\n }\n \n+const CSTRING_PATH: [Symbol; 4] = [sym::std, sym::ffi, sym::c_str, sym::CString];\n+\n fn lint_cstring_as_ptr(\n     cx: &LateContext<'_>,\n-    expr: &rustc_hir::Expr<'_>,\n     source: &rustc_hir::Expr<'_>,\n     unwrap: &rustc_hir::Expr<'_>,\n ) {\n     let source_type = cx.typeck_results().expr_ty(source);\n     if let ty::Adt(def, substs) = source_type.kind {\n-        if cx.tcx.is_diagnostic_item(Symbol::intern(\"result_type\"), def.did) {\n+        if cx.tcx.is_diagnostic_item(sym::result_type, def.did) {\n             if let ty::Adt(adt, _) = substs.type_at(0).kind {\n-                let path = [\n-                    sym::std,\n-                    Symbol::intern(\"ffi\"),\n-                    Symbol::intern(\"c_str\"),\n-                    Symbol::intern(\"CString\"),\n-                ];\n-                if cx.match_def_path(adt.did, &path) {\n-                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, expr.span, |diag| {\n+                if cx.match_def_path(adt.did, &CSTRING_PATH) {\n+                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, source.span, |diag| {\n                         let mut diag = diag\n-                            .build(\"you are getting the inner pointer of a temporary `CString`\");\n-                        diag.note(\"that pointer will be invalid outside this expression\");\n+                            .build(\"getting the inner pointer of a temporary `CString`\");\n+                        diag.span_label(source.span, \"this pointer will be invalid\");\n                         diag.span_help(\n                             unwrap.span,\n-                            \"assign the `CString` to a variable to extend its lifetime\",\n+                            \"this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\",\n                         );\n+                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\");\n                         diag.emit();\n                     });\n                 }"}, {"sha": "38539643416c2a45a8232f6f38076c22f0e3ca4e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "patch": "@@ -127,6 +127,7 @@ symbols! {\n         ArgumentV1,\n         Arguments,\n         C,\n+        CString,\n         Center,\n         Clone,\n         Copy,\n@@ -261,6 +262,7 @@ symbols! {\n         arm_target_feature,\n         array,\n         arrays,\n+        as_ptr,\n         as_str,\n         asm,\n         assert,\n@@ -310,6 +312,7 @@ symbols! {\n         breakpoint,\n         bridge,\n         bswap,\n+        c_str,\n         c_variadic,\n         call,\n         call_mut,\n@@ -477,6 +480,7 @@ symbols! {\n         existential_type,\n         exp2f32,\n         exp2f64,\n+        expect,\n         expected,\n         expf32,\n         expf64,\n@@ -500,6 +504,7 @@ symbols! {\n         fadd_fast,\n         fdiv_fast,\n         feature,\n+        ffi,\n         ffi_const,\n         ffi_pure,\n         ffi_returns_twice,\n@@ -1167,6 +1172,7 @@ symbols! {\n         unused_qualifications,\n         unwind,\n         unwind_attributes,\n+        unwrap,\n         unwrap_or,\n         use_extern_macros,\n         use_nested_groups,"}, {"sha": "54f57e1dd7712457bf1dca2a175e889d844aca9e", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "patch": "@@ -1,8 +1,7 @@\n-// check-fail\n // ignore-tidy-linelength\n \n use std::ffi::CString;\n \n fn main() {\n-    let s = CString::new(\"some text\").unwrap().as_ptr(); //~ ERROR you are getting the inner pointer of a temporary `CString`\n+    let s = CString::new(\"some text\").unwrap().as_ptr(); //~ ERROR getting the inner pointer of a temporary `CString`\n }"}, {"sha": "34e42a478051dadd00a69d49ca458b9854e7575b", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b65df06ce0cf78fd2298c9cd63e1f5beb40525f/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=8b65df06ce0cf78fd2298c9cd63e1f5beb40525f", "patch": "@@ -1,16 +1,16 @@\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:13\n+error: getting the inner pointer of a temporary `CString`\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:13\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ this pointer will be invalid\n    |\n    = note: `#[deny(temporary_cstring_as_ptr)]` on by default\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:13\n+help: this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:13\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\n \n error: aborting due to previous error\n "}]}