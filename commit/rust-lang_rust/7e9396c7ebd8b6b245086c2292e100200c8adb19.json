{"sha": "7e9396c7ebd8b6b245086c2292e100200c8adb19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOTM5NmM3ZWJkOGI2YjI0NTA4NmMyMjkyZTEwMDIwMGM4YWRiMTk=", "commit": {"author": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-14T07:14:04Z"}, "committer": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-14T07:14:04Z"}, "message": "Change type_arg to type_ref func", "tree": {"sha": "fe033c4dbe2a86e2f3bbf57945af20a4f5d7f8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe033c4dbe2a86e2f3bbf57945af20a4f5d7f8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9396c7ebd8b6b245086c2292e100200c8adb19", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEOrvX5g4uaJk/ZAnkk9Q25ma/D+4FAl6877wACgkQk9Q25ma/\nD+67mgv/aI2Hd4Mlr4job0zNPLPrqqJZFPuTunkQuHAjEi8PvKq/Z3aqz/Mh62+R\nMF3oG2hn4R9INxlND6QYsIjPkunwJNibgHB+XEhK7jMSNPFwGqFeQA304qVqcrI5\nlS7RsnJPyUgKS6KK/zfeU51SApR+h9BgGWpcVTk6FxEjgFIDg8b05U93Me+bQ+YN\nvm8/vJDjWudfzbY9cUztvs7WYyPNI0dWGTR2nEPN7ifVCVLsw8hZjlWo4KcJOFUB\nYdiG9bPVLIfJ9VQcgWU0KZ+ZPwDELjXgK/4cGye8cj5St/DbYGLqZwseI7Fb/YHr\nXyctsWt33yE/0eJn/dVJEuB/lJNID7yfx+QQe84w3+BTZYBbWvpblAKbUB1LJRcG\nWVjcV7atMMZq2SayMGcTxC0XaKpiGjuZ+5hct1C5E7wRzk6a2v5om7vfs6Cv1jha\naA3Q1CW4JCDwvWPhSsuubeSuSoX26+K4jaWAwrlqwCcrra3kawKP5epbufVNCZq6\nqeL24/Zc\n=/3R5\n-----END PGP SIGNATURE-----", "payload": "tree fe033c4dbe2a86e2f3bbf57945af20a4f5d7f8f6\nparent a55ad203888b5e43cf6cbf015d562d7bd1abe0bb\nauthor Fedor Sakharov <fedor.sakharov@gmail.com> 1589440444 +0300\ncommitter Fedor Sakharov <fedor.sakharov@gmail.com> 1589440444 +0300\n\nChange type_arg to type_ref func\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9396c7ebd8b6b245086c2292e100200c8adb19", "html_url": "https://github.com/rust-lang/rust/commit/7e9396c7ebd8b6b245086c2292e100200c8adb19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9396c7ebd8b6b245086c2292e100200c8adb19/comments", "author": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55ad203888b5e43cf6cbf015d562d7bd1abe0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55ad203888b5e43cf6cbf015d562d7bd1abe0bb", "html_url": "https://github.com/rust-lang/rust/commit/a55ad203888b5e43cf6cbf015d562d7bd1abe0bb"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "18f3ec683b61288aedbf9d985e29e19259683b9a", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e9396c7ebd8b6b245086c2292e100200c8adb19/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9396c7ebd8b6b245086c2292e100200c8adb19/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=7e9396c7ebd8b6b245086c2292e100200c8adb19", "patch": "@@ -64,12 +64,11 @@ impl<'a> SubstituteTypeParams<'a> {\n                     let default = k.default(source_scope.db)?;\n                     Some((\n                         k,\n-                        ast::make::type_arg(\n+                        ast::make::type_ref(\n                             &default\n                                 .display_source_code(source_scope.db, source_scope.module()?.into())\n                                 .ok()?,\n                         )\n-                        .type_ref()?,\n                     ))\n                 }\n             })"}, {"sha": "d0e960fb497cd150d82451addfa21f72c75d7d15", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e9396c7ebd8b6b245086c2292e100200c8adb19/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9396c7ebd8b6b245086c2292e100200c8adb19/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=7e9396c7ebd8b6b245086c2292e100200c8adb19", "patch": "@@ -13,8 +13,8 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n \n-pub fn type_arg(text: &str) -> ast::TypeArg {\n-    ast_from_text(&format!(\"impl F<{}> for G {{}}\", text))\n+pub fn type_ref(text: &str) -> ast::TypeRef {\n+    ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }\n \n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {"}]}