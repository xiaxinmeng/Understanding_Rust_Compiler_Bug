{"sha": "d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmZhZjZmODM2ZTZmZjgyNjA1NDgwNDFiZDFkYzlkOGJkMTQ2Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-16T14:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-16T14:12:43Z"}, "message": "Auto merge of #30269 - sanxiyn:no-mangle-generic, r=Aatch\n\nFix #15844.\n\nShould the default be Deny instead?", "tree": {"sha": "95c23c4b74fa68867aaa28b4604a29c22d33474f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c23c4b74fa68867aaa28b4604a29c22d33474f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "html_url": "https://github.com/rust-lang/rust/commit/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785a8a6681963ff389b5902e7d6bd30006fafe0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/785a8a6681963ff389b5902e7d6bd30006fafe0a", "html_url": "https://github.com/rust-lang/rust/commit/785a8a6681963ff389b5902e7d6bd30006fafe0a"}, {"sha": "55ffc33b10cbd0b4d2c2756e525db7551e585a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ffc33b10cbd0b4d2c2756e525db7551e585a79", "html_url": "https://github.com/rust-lang/rust/commit/55ffc33b10cbd0b4d2c2756e525db7551e585a79"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "f27cc629791ed5f1849adbb5eab6e1f95a2d7aab", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "patch": "@@ -966,26 +966,39 @@ declare_lint! {\n     \"const items will not have their symbols exported\"\n }\n \n+declare_lint! {\n+    NO_MANGLE_GENERIC_ITEMS,\n+    Warn,\n+    \"generic items must be mangled\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct InvalidNoMangleItems;\n \n impl LintPass for InvalidNoMangleItems {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PRIVATE_NO_MANGLE_FNS,\n                     PRIVATE_NO_MANGLE_STATICS,\n-                    NO_MANGLE_CONST_ITEMS)\n+                    NO_MANGLE_CONST_ITEMS,\n+                    NO_MANGLE_GENERIC_ITEMS)\n     }\n }\n \n impl LateLintPass for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemFn(..) => {\n-                if attr::contains_name(&it.attrs, \"no_mangle\") &&\n-                       !cx.access_levels.is_reachable(it.id) {\n-                    let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n-                                      it.name);\n-                    cx.span_lint(PRIVATE_NO_MANGLE_FNS, it.span, &msg);\n+            hir::ItemFn(_, _, _, _, ref generics, _) => {\n+                if attr::contains_name(&it.attrs, \"no_mangle\") {\n+                    if !cx.access_levels.is_reachable(it.id) {\n+                        let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n+                                          it.name);\n+                        cx.span_lint(PRIVATE_NO_MANGLE_FNS, it.span, &msg);\n+                    }\n+                    if generics.is_parameterized() {\n+                        cx.span_lint(NO_MANGLE_GENERIC_ITEMS,\n+                                     it.span,\n+                                     \"generic functions must be mangled\");\n+                    }\n                 }\n             },\n             hir::ItemStatic(..) => {"}, {"sha": "2cb73cf2ef79b0ecb827442e58335ac2b2ebae79", "filename": "src/test/compile-fail/generic-no-mangle.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-no-mangle.rs?ref=d4ffaf6f836e6ff8260548041bd1dc9d8bd146f9", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test this should fail to compile (#15844)\n+#![deny(no_mangle_generic_items)]\n \n #[no_mangle]\n-fn foo<T>() {} //~ ERROR generic functions must be mangled\n+pub fn foo<T>() {} //~ ERROR generic functions must be mangled\n \n #[no_mangle]\n-extern fn foo<T>() {} //~ ERROR generic functions must be mangled\n+pub extern fn bar<T>() {} //~ ERROR generic functions must be mangled\n+\n+fn main() {}"}]}