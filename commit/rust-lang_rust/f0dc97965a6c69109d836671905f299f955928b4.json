{"sha": "f0dc97965a6c69109d836671905f299f955928b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZGM5Nzk2NWE2YzY5MTA5ZDgzNjY3MTkwNWYyOTlmOTU1OTI4YjQ=", "commit": {"author": {"name": "Darth-Revan", "email": "18002263+Darth-Revan@users.noreply.github.com", "date": "2019-07-15T16:43:47Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-07-17T06:58:36Z"}, "message": "Corrections for PR review.", "tree": {"sha": "a395b8028aaea81f453f663d6bad50c80ff6aab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a395b8028aaea81f453f663d6bad50c80ff6aab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0dc97965a6c69109d836671905f299f955928b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAl0uxxwACgkQAcg2tkD/\n37F+4Q//bUUg1R1lD8KnOkFxAyPpyXkkJcskL4XoLQpl/jFXbcHWCG4dbBGq2tzx\nwneE9RBmV5OrKZwh+ljEpiDHUHXrmhS/529ERsTq7i1Ec7yxuEd8EfgODCPnaTXY\nVg4Jc9WAvXqKFA20UD7kXoeGpCWZkrMl0bVOjzU/LBxvwGB+zpfnsqArgYfesBkK\nV71IViEIVVBg7a6uTI0USPgvtYp8aYGJI6gfe6JECHh/YYJTHKfL5HdfiZjqPwe3\nazNAhFj7zDVs6KK3okY4Ux9kcnctkzVJlVJSTKlt26wlc/1hrsyRXQ7HBbAcarrw\nGRIzYjo11YKpAK2fXZpOg+ZJ2jKfzbDZUKcCvkhphAgLYgs76KfEqaeo5Gcd0pBW\n69MMUzJ6IH8YdihKL4AOWr9tYx2/Ofj5Cic2vArD5dm0oq0R5mzMRYEyLXWkFMIZ\n6jtvpxkJ/mQokOenxwuhdjvTUPpkFCKLUknHLW3qRsB60lmZ/LNHYB0xCRCaBN5T\n7ndYaXczxFsV4/OndTM6s6mwdGLn77gviH7CqdzRhYDB/+Yl4NNEZDvOzYBBvmNg\n/nRbp3mxmfkNJL7VI5ICvHS4SW6hAWqM33vZdK2oZQ+seKUalKxktdoVzAc4HR+W\nMdR8Z1xe45SvhhAniFtfwvtD0wIV3ADIkshkMc47S5eFXy+a1Lc=\n=wR0r\n-----END PGP SIGNATURE-----", "payload": "tree a395b8028aaea81f453f663d6bad50c80ff6aab2\nparent 0513202d25c67ebeb5a02f9fe9dad5dea3296140\nauthor Darth-Revan <18002263+Darth-Revan@users.noreply.github.com> 1563209027 +0200\ncommitter flip1995 <hello@philkrones.com> 1563346716 +0200\n\nCorrections for PR review.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0dc97965a6c69109d836671905f299f955928b4", "html_url": "https://github.com/rust-lang/rust/commit/f0dc97965a6c69109d836671905f299f955928b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0dc97965a6c69109d836671905f299f955928b4/comments", "author": {"login": "Darth-Revan", "id": 18002263, "node_id": "MDQ6VXNlcjE4MDAyMjYz", "avatar_url": "https://avatars.githubusercontent.com/u/18002263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Darth-Revan", "html_url": "https://github.com/Darth-Revan", "followers_url": "https://api.github.com/users/Darth-Revan/followers", "following_url": "https://api.github.com/users/Darth-Revan/following{/other_user}", "gists_url": "https://api.github.com/users/Darth-Revan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Darth-Revan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Darth-Revan/subscriptions", "organizations_url": "https://api.github.com/users/Darth-Revan/orgs", "repos_url": "https://api.github.com/users/Darth-Revan/repos", "events_url": "https://api.github.com/users/Darth-Revan/events{/privacy}", "received_events_url": "https://api.github.com/users/Darth-Revan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0513202d25c67ebeb5a02f9fe9dad5dea3296140", "url": "https://api.github.com/repos/rust-lang/rust/commits/0513202d25c67ebeb5a02f9fe9dad5dea3296140", "html_url": "https://github.com/rust-lang/rust/commit/0513202d25c67ebeb5a02f9fe9dad5dea3296140"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "ef0a754383794cb77ca52ed02c317b032531aaaa", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0dc97965a6c69109d836671905f299f955928b4/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dc97965a6c69109d836671905f299f955928b4/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=f0dc97965a6c69109d836671905f299f955928b4", "patch": "@@ -17,7 +17,7 @@ declare_clippy_lint! {\n     ///\n     /// ** Example:**\n     ///\n-    /// ```rust,ignore\n+    /// ```rust\n     /// // Bad\n     /// pub struct A;\n     ///\n@@ -26,6 +26,9 @@ declare_clippy_lint! {\n     ///         \"I am A\".to_string()\n     ///     }\n     /// }\n+    /// ```\n+    ///\n+    /// ```rust\n     /// // Good\n     /// use std::fmt;\n     ///\n@@ -39,19 +42,19 @@ declare_clippy_lint! {\n     /// ```\n     pub INHERENT_TO_STRING,\n     style,\n-    \"type implements inherent method 'to_string()', but should instead implement the 'Display' trait\"\n+    \"type implements inherent method `to_string()`, but should instead implement the `Display` trait\"\n }\n \n declare_clippy_lint! {\n     /// **What id does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n     ///\n-    /// **Why is this bad?** This method is also implicitly defined if a type implements the 'Display' trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n+    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n     ///\n-    /// **Known problems:** The inherent method will shadow the implementation by `Display`. If they behave differently, this may lead to confusing situations for users of the respective type.\n+    /// **Known problems:** None\n     ///\n     /// ** Example:**\n     ///\n-    /// ```rust,ignore\n+    /// ```rust\n     /// // Bad\n     /// use std::fmt;\n     ///\n@@ -68,6 +71,9 @@ declare_clippy_lint! {\n     ///         write!(f, \"I am A, too\")\n     ///     }\n     /// }\n+    /// ```\n+    ///\n+    /// ```rust\n     /// // Good\n     /// use std::fmt;\n     ///\n@@ -81,7 +87,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INHERENT_TO_STRING_SHADOW_DISPLAY,\n     correctness,\n-    \"type implements inherent method 'to_string()', which gets shadowed by the implementation of the 'Display' trait \"\n+    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \"\n }\n \n declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);\n@@ -114,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n \n fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem) {\n     let display_trait_id =\n-        get_trait_def_id(cx, &[\"core\", \"fmt\", \"Display\"]).expect(\"Failed to get trait ID of 'Display'!\");\n+        get_trait_def_id(cx, &[\"core\", \"fmt\", \"Display\"]).expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n     let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n@@ -128,21 +134,21 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem) {\n             INHERENT_TO_STRING_SHADOW_DISPLAY,\n             item.span,\n             &format!(\n-                \"type '{}' implements inherent method 'to_string() -> String' which shadows the implementation of 'Display'\",\n+                \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n                 self_type.to_string()\n             ),\n-            &format!(\"remove the inherent method from type '{}'\", self_type.to_string())\n+            &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n         );\n     } else {\n         span_help_and_lint(\n             cx,\n             INHERENT_TO_STRING,\n             item.span,\n             &format!(\n-                \"implementation of inherent method 'to_string() -> String' for type '{}'\",\n+                \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n                 self_type.to_string()\n             ),\n-            &format!(\"implement trait 'Display' for type '{}' instead\", self_type.to_string()),\n+            &format!(\"implement trait `Display` for type `{}` instead\", self_type.to_string()),\n         );\n     }\n }"}, {"sha": "9f81c027f4b0ef8d2c572fcff763ec4c6c092321", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0dc97965a6c69109d836671905f299f955928b4/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0dc97965a6c69109d836671905f299f955928b4/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=f0dc97965a6c69109d836671905f299f955928b4", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::inherent_to_string)]\n-//#![deny(clippy::inherent_to_string_shadow)]\n+#![deny(clippy::inherent_to_string_shadow)]\n \n use std::fmt;\n "}, {"sha": "4a967f34982d711cb1a8324c605066a3dc0c6aec", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0dc97965a6c69109d836671905f299f955928b4/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0dc97965a6c69109d836671905f299f955928b4/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=f0dc97965a6c69109d836671905f299f955928b4", "patch": "@@ -1,4 +1,4 @@\n-error: implementation of inherent method 'to_string() -> String' for type 'A'\n+error: implementation of inherent method `to_string(&self) -> String` for type `A`\n   --> $DIR/inherent_to_string.rs:18:5\n    |\n LL | /     fn to_string(&self) -> String {\n@@ -7,9 +7,9 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::inherent-to-string` implied by `-D warnings`\n-   = help: implement trait 'Display' for type 'A' instead\n+   = help: implement trait `Display` for type `A` instead\n \n-error: type 'C' implements inherent method 'to_string() -> String' which shadows the implementation of 'Display'\n+error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n   --> $DIR/inherent_to_string.rs:42:5\n    |\n LL | /     fn to_string(&self) -> String {\n@@ -18,7 +18,15 @@ LL | |     }\n    | |_____^\n    |\n    = note: #[deny(clippy::inherent_to_string_shadow_display)] on by default\n-   = help: remove the inherent method from type 'C'\n+   = help: remove the inherent method from type `C`\n \n-error: aborting due to 2 previous errors\n+error: unknown clippy lint: clippy::inherent_to_string_shadow\n+  --> $DIR/inherent_to_string.rs:2:9\n+   |\n+LL | #![deny(clippy::inherent_to_string_shadow)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n+\n+error: aborting due to 3 previous errors\n "}]}