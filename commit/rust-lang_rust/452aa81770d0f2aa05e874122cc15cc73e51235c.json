{"sha": "452aa81770d0f2aa05e874122cc15cc73e51235c", "node_id": "C_kwDOAAsO6NoAKDQ1MmFhODE3NzBkMGYyYWEwNWU4NzQxMjJjYzE1Y2M3M2U1MTIzNWM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-27T21:28:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-23T10:51:51Z"}, "message": "rustc_lint: Remove some redundant fields from `EarlyContext`\n\nUse consistent function parameter order for early context construction and early linting\nRename some functions to make it clear that they do not necessarily work on the whole crate", "tree": {"sha": "95335e50b9d8e478575f39de5d218a1f5b6019d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95335e50b9d8e478575f39de5d218a1f5b6019d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452aa81770d0f2aa05e874122cc15cc73e51235c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452aa81770d0f2aa05e874122cc15cc73e51235c", "html_url": "https://github.com/rust-lang/rust/commit/452aa81770d0f2aa05e874122cc15cc73e51235c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452aa81770d0f2aa05e874122cc15cc73e51235c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13e8dd41d44a73664943169d5b7fe39b22c449f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13e8dd41d44a73664943169d5b7fe39b22c449f", "html_url": "https://github.com/rust-lang/rust/commit/d13e8dd41d44a73664943169d5b7fe39b22c449f"}], "stats": {"total": 164, "additions": 70, "deletions": 94}, "files": [{"sha": "93d1976eb1e3987a6e3b390e65c65ff672be9a71", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -236,19 +236,19 @@ pub fn register_plugins<'a>(\n fn pre_expansion_lint(\n     sess: &Session,\n     lint_store: &LintStore,\n-    krate: &ast::Crate,\n     crate_attrs: &[ast::Attribute],\n-    crate_name: &str,\n+    check_node: &ast::Crate,\n+    node_name: &str,\n ) {\n-    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", crate_name).run(|| {\n-        rustc_lint::check_ast_crate(\n+    sess.prof.generic_activity_with_arg(\"pre_AST_expansion_lint_checks\", node_name).run(|| {\n+        rustc_lint::check_ast_node(\n             sess,\n+            true,\n             lint_store,\n-            krate,\n             crate_attrs,\n-            true,\n             None,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n+            check_node,\n         );\n     });\n }\n@@ -265,7 +265,7 @@ pub fn configure_and_expand(\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n     tracing::trace!(\"configure_and_expand\");\n-    pre_expansion_lint(sess, lint_store, &krate, &krate.attrs, crate_name);\n+    pre_expansion_lint(sess, lint_store, &krate.attrs, &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -324,7 +324,7 @@ pub fn configure_and_expand(\n         let crate_attrs = krate.attrs.clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n             let krate = ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false };\n-            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, ident.name.as_str());\n+            pre_expansion_lint(sess, lint_store, &crate_attrs, &krate, ident.name.as_str());\n             (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n@@ -499,14 +499,14 @@ pub fn lower_to_hir<'res, 'tcx>(\n     );\n \n     sess.time(\"early_lint_checks\", || {\n-        rustc_lint::check_ast_crate(\n+        rustc_lint::check_ast_node(\n             sess,\n+            false,\n             lint_store,\n-            &krate,\n             &krate.attrs,\n-            false,\n             Some(std::mem::take(resolver.lint_buffer())),\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+            &krate,\n         )\n     });\n "}, {"sha": "24d295ee9fbf68f4383b6291b2dd9cc049d617b4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -912,7 +912,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n-        if cx.sess.edition() != Edition::Edition2015 {\n+        if cx.sess().edition() != Edition::Edition2015 {\n             // This is a hard error in future editions; avoid linting and erroring\n             return;\n         }\n@@ -921,7 +921,7 @@ impl EarlyLintPass for AnonymousParameters {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n                     if ident.name == kw::Empty {\n                         cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {\n-                            let ty_snip = cx.sess.source_map().span_to_snippet(arg.ty.span);\n+                            let ty_snip = cx.sess().source_map().span_to_snippet(arg.ty.span);\n \n                             let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {\n                                 (snip.as_str(), Applicability::MachineApplicable)\n@@ -1775,7 +1775,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                 };\n                 if join.edition() >= Edition::Edition2021 {\n                     let mut err =\n-                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                        rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, \"{}\", msg,);\n                     err.span_suggestion(\n                         pat.span,\n                         suggestion,\n@@ -1799,7 +1799,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                 let replace = \"..=\".to_owned();\n                 if join.edition() >= Edition::Edition2021 {\n                     let mut err =\n-                        rustc_errors::struct_span_err!(cx.sess, pat.span, E0783, \"{}\", msg,);\n+                        rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, \"{}\", msg,);\n                     err.span_suggestion_short(\n                         join,\n                         suggestion,\n@@ -1983,7 +1983,7 @@ impl KeywordIdents {\n         UnderMacro(under_macro): UnderMacro,\n         ident: Ident,\n     ) {\n-        let next_edition = match cx.sess.edition() {\n+        let next_edition = match cx.sess().edition() {\n             Edition::Edition2015 => {\n                 match ident.name {\n                     kw::Async | kw::Await | kw::Try => Edition::Edition2018,\n@@ -2011,7 +2011,7 @@ impl KeywordIdents {\n         };\n \n         // Don't lint `r#foo`.\n-        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n+        if cx.sess().parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n             return;\n         }\n \n@@ -2379,7 +2379,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for IncompleteFeatures {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n-        let features = cx.sess.features_untracked();\n+        let features = cx.sess().features_untracked();\n         features\n             .declared_lang_features\n             .iter()"}, {"sha": "d762ee2acd2c8cf6cbcca0b6dff95919d4643ddd", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -553,20 +553,9 @@ pub struct LateContext<'tcx> {\n     pub only_module: bool,\n }\n \n-/// Context for lint checking of the AST, after expansion, before lowering to\n-/// HIR.\n+/// Context for lint checking of the AST, after expansion, before lowering to HIR.\n pub struct EarlyContext<'a> {\n-    /// Type context we're checking in.\n-    pub sess: &'a Session,\n-\n-    /// The crate being checked.\n-    pub krate: &'a ast::Crate,\n-\n     pub builder: LintLevelsBuilder<'a>,\n-\n-    /// The store of registered lints and the lint levels.\n-    pub lint_store: &'a LintStore,\n-\n     pub buffered: LintBuffer,\n }\n \n@@ -801,18 +790,14 @@ pub trait LintContext: Sized {\n }\n \n impl<'a> EarlyContext<'a> {\n-    pub fn new(\n+    pub(crate) fn new(\n         sess: &'a Session,\n+        warn_about_weird_lints: bool,\n         lint_store: &'a LintStore,\n-        krate: &'a ast::Crate,\n         crate_attrs: &'a [ast::Attribute],\n         buffered: LintBuffer,\n-        warn_about_weird_lints: bool,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n-            sess,\n-            krate,\n-            lint_store,\n             builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, crate_attrs),\n             buffered,\n         }\n@@ -851,11 +836,11 @@ impl LintContext for EarlyContext<'_> {\n \n     /// Gets the overall compiler `Session` object.\n     fn sess(&self) -> &Session {\n-        &self.sess\n+        &self.builder.sess()\n     }\n \n     fn lints(&self) -> &LintStore {\n-        &*self.lint_store\n+        self.builder.lint_store()\n     }\n \n     fn lookup<S: Into<MultiSpan>>("}, {"sha": "9753bbfe7529102bc4be3ef18f7d665c0bcc8b9e", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 26, "deletions": 38, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -57,7 +57,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_node = id == ast::CRATE_NODE_ID;\n-        let push = self.context.builder.push(attrs, &self.context.lint_store, is_crate_node);\n+        let push = self.context.builder.push(attrs, is_crate_node);\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);\n@@ -325,88 +325,76 @@ macro_rules! early_lint_pass_impl {\n \n crate::early_lint_methods!(early_lint_pass_impl, []);\n \n-fn early_lint_crate<T: EarlyLintPass>(\n+fn early_lint_node(\n     sess: &Session,\n+    warn_about_weird_lints: bool,\n     lint_store: &LintStore,\n-    krate: &ast::Crate,\n     crate_attrs: &[ast::Attribute],\n-    pass: T,\n     buffered: LintBuffer,\n-    warn_about_weird_lints: bool,\n+    pass: impl EarlyLintPass,\n+    check_node: &ast::Crate,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(\n-            sess,\n-            lint_store,\n-            krate,\n-            crate_attrs,\n-            buffered,\n-            warn_about_weird_lints,\n-        ),\n+        context: EarlyContext::new(sess, warn_about_weird_lints, lint_store, crate_attrs, buffered),\n         pass,\n     };\n \n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_early_pass!(cx, check_crate, krate);\n-\n-        ast_visit::walk_crate(cx, krate);\n-\n-        run_early_pass!(cx, check_crate_post, krate);\n+    cx.with_lint_attrs(ast::CRATE_NODE_ID, &check_node.attrs, |cx| {\n+        run_early_pass!(cx, check_crate, check_node);\n+        ast_visit::walk_crate(cx, check_node);\n+        run_early_pass!(cx, check_crate_post, check_node);\n     });\n     cx.context.buffered\n }\n \n-pub fn check_ast_crate<T: EarlyLintPass>(\n+pub fn check_ast_node(\n     sess: &Session,\n+    pre_expansion: bool,\n     lint_store: &LintStore,\n-    krate: &ast::Crate,\n     crate_attrs: &[ast::Attribute],\n-    pre_expansion: bool,\n     lint_buffer: Option<LintBuffer>,\n-    builtin_lints: T,\n+    builtin_lints: impl EarlyLintPass,\n+    check_node: &ast::Crate,\n ) {\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {\n-        buffered = early_lint_crate(\n+        buffered = early_lint_node(\n             sess,\n+            pre_expansion,\n             lint_store,\n-            krate,\n             crate_attrs,\n-            builtin_lints,\n             buffered,\n-            pre_expansion,\n+            builtin_lints,\n+            check_node,\n         );\n \n         if !passes.is_empty() {\n-            buffered = early_lint_crate(\n+            buffered = early_lint_node(\n                 sess,\n+                false,\n                 lint_store,\n-                krate,\n                 crate_attrs,\n-                EarlyLintPassObjects { lints: &mut passes[..] },\n                 buffered,\n-                false,\n+                EarlyLintPassObjects { lints: &mut passes[..] },\n+                check_node,\n             );\n         }\n     } else {\n         for (i, pass) in passes.iter_mut().enumerate() {\n             buffered =\n                 sess.prof.extra_verbose_generic_activity(\"run_lint\", pass.name()).run(|| {\n-                    early_lint_crate(\n+                    early_lint_node(\n                         sess,\n+                        pre_expansion && i == 0,\n                         lint_store,\n-                        krate,\n                         crate_attrs,\n-                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                         buffered,\n-                        pre_expansion && i == 0,\n+                        EarlyLintPassObjects { lints: slice::from_mut(pass) },\n+                        check_node,\n                     )\n                 });\n         }"}, {"sha": "8e6ae2c60fd8f80c74f085bb2958bea54e70c649", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -29,12 +29,12 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n     let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n     let levels = LintLevelsBuilder::new(tcx.sess, false, &store, crate_attrs);\n-    let mut builder = LintLevelMapBuilder { levels, tcx, store };\n+    let mut builder = LintLevelMapBuilder { levels, tcx };\n     let krate = tcx.hir().krate();\n \n     builder.levels.id_to_set.reserve(krate.owners.len() + 1);\n \n-    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n+    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n@@ -78,6 +78,14 @@ impl<'s> LintLevelsBuilder<'s> {\n         builder\n     }\n \n+    pub(crate) fn sess(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    pub(crate) fn lint_store(&self) -> &LintStore {\n+        self.store\n+    }\n+\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n         let mut specs = FxHashMap::default();\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n@@ -217,12 +225,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub(crate) fn push(\n-        &mut self,\n-        attrs: &[ast::Attribute],\n-        store: &LintStore,\n-        is_crate_node: bool,\n-    ) -> BuilderPush {\n+    pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n@@ -310,7 +313,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n-                let lint_result = store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n+                let lint_result =\n+                    self.store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -459,7 +463,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     // Ignore any errors or warnings that happen because the new name is inaccurate\n                     // NOTE: `new_name` already includes the tool name, so we don't have to add it again.\n                     if let CheckLintNameResult::Ok(ids) =\n-                        store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n+                        self.store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n@@ -576,20 +580,19 @@ pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribut\n         .any(|name| name == m_item)\n }\n \n-struct LintLevelMapBuilder<'a, 'tcx> {\n+struct LintLevelMapBuilder<'tcx> {\n     levels: LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    store: &'a LintStore,\n }\n \n-impl LintLevelMapBuilder<'_, '_> {\n+impl LintLevelMapBuilder<'_> {\n     fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_hir = id == hir::CRATE_HIR_ID;\n         let attrs = self.tcx.hir().attrs(id);\n-        let push = self.levels.push(attrs, self.store, is_crate_hir);\n+        let push = self.levels.push(attrs, is_crate_hir);\n         if push.changed {\n             self.levels.register_id(id);\n         }\n@@ -598,7 +601,7 @@ impl LintLevelMapBuilder<'_, '_> {\n     }\n }\n \n-impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n+impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n     type NestedFilter = nested_filter::All;\n \n     fn nested_visit_map(&mut self) -> Self::Map {"}, {"sha": "c36a233df9185e3e8644c57f7cf177909e5bfde0", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -96,7 +96,7 @@ use unused::*;\n pub use builtin::SoftLints;\n pub use context::{CheckLintNameResult, FindLintError, LintStore};\n pub use context::{EarlyContext, LateContext, LintContext};\n-pub use early::check_ast_crate;\n+pub use early::check_ast_node;\n pub use late::check_crate;\n pub use passes::{EarlyLintPass, LateLintPass};\n pub use rustc_session::lint::Level::{self, *};"}, {"sha": "2dd6dbd67a8d2ef1bd94514f0dee539e198e0b7e", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -166,7 +166,7 @@ impl EarlyLintPass for NonAsciiIdents {\n         }\n \n         let mut has_non_ascii_idents = false;\n-        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let symbols = cx.sess().parse_sess.symbol_gallery.symbols.lock();\n \n         // Sort by `Span` so that error messages make sense with respect to the\n         // order of identifier locations in the code."}, {"sha": "f73388c675ee2a25dcc178ffe013976a6daa534d", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452aa81770d0f2aa05e874122cc15cc73e51235c/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=452aa81770d0f2aa05e874122cc15cc73e51235c", "patch": "@@ -164,7 +164,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         let has_repr_c = it\n             .attrs\n             .iter()\n-            .any(|attr| attr::find_repr_attrs(&cx.sess, attr).contains(&attr::ReprC));\n+            .any(|attr| attr::find_repr_attrs(cx.sess(), attr).contains(&attr::ReprC));\n \n         if has_repr_c {\n             return;"}]}