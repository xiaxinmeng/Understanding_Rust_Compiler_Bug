{"sha": "5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjhkNGE3YzMzNmJiNTY3ZDVlMWNjZjJkYTAyYjUyOGYzYjIzMGQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-02T17:10:20Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Make empty match lint more consistent under exhaustive_patterns", "tree": {"sha": "4ff5f02c1cf54a7d889ff8ee48f6e03fffe46747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff5f02c1cf54a7d889ff8ee48f6e03fffe46747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "html_url": "https://github.com/rust-lang/rust/commit/5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c77a049b9595bbc857317ff8a7713c76ddbd8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c77a049b9595bbc857317ff8a7713c76ddbd8af", "html_url": "https://github.com/rust-lang/rust/commit/1c77a049b9595bbc857317ff8a7713c76ddbd8af"}], "stats": {"total": 113, "additions": 74, "deletions": 39}, "files": [{"sha": "e886c4ea443e6b88c279d67cb424c38c20b23f39", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -169,27 +169,29 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             // Then, if the match has no arms, check whether the scrutinee\n             // is uninhabited.\n             let pat_ty = self.tables.node_type(scrut.hir_id);\n-            let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n-            let mut def_span = None;\n-            let mut missing_variants = vec![];\n             if inlined_arms.is_empty() {\n                 let scrutinee_is_visibly_uninhabited = if self.tcx.features().exhaustive_patterns {\n+                    let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n                     match pat_ty.kind {\n                         ty::Never => true,\n                         ty::Adt(def, _) => {\n-                            def_span = self.tcx.hir().span_if_local(def.did);\n-                            missing_variants =\n-                                def.variants.iter().map(|variant| variant.ident).collect();\n-\n                             def.variants.is_empty() && !cx.is_foreign_non_exhaustive_enum(pat_ty)\n                         }\n                         _ => false,\n                     }\n                 };\n                 if !scrutinee_is_visibly_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n+                    let (def_span, missing_variants) = match pat_ty.kind {\n+                        ty::Adt(def, _) => (\n+                            self.tcx.hir().span_if_local(def.did),\n+                            def.variants.iter().map(|variant| variant.ident).collect(),\n+                        ),\n+                        _ => (None, vec![]),\n+                    };\n+\n                     let mut err = create_e0004(\n                         self.tcx.sess,\n                         scrut.span,"}, {"sha": "b568057ed1e5409510ec8cd4ea275696d55114b2", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -25,7 +25,7 @@ fn match_on_uninhab() {\n     }\n \n     match uninhab_union() {\n-        //~^ ERROR non-exhaustive patterns: type `Foo` is non-empty\n+        //~^ ERROR non-exhaustive patterns: pattern `Foo` of type `Foo` is not handled\n     }\n }\n "}, {"sha": "acf926e9a8323b5b2b37e708d2ff2d3408ca1bb1", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -6,11 +6,19 @@ LL |     match uninhab_ref() {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `Foo` of type `Foo` is not handled\n   --> $DIR/always-inhabited-union-ref.rs:27:11\n    |\n-LL |     match uninhab_union() {\n-   |           ^^^^^^^^^^^^^^^\n+LL |   pub union Foo {\n+   |   -         --- variant not covered\n+   |  _|\n+   | |\n+LL | |     foo: !,\n+LL | | }\n+   | |_- `Foo` defined here\n+...\n+LL |       match uninhab_union() {\n+   |             ^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "01671eb5ce3672c0a11755a72f63002f4f8703cb", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -3,15 +3,15 @@\n #![deny(unreachable_patterns)]\n enum Foo {}\n \n-struct NonEmptyStruct(bool);\n-enum NonEmptyEnum1 {\n-    Foo(bool),\n+struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n+    Foo(bool), //~ variant not covered\n }\n-enum NonEmptyEnum2 {\n-    Foo(bool),\n-    Bar,\n+enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n+    Foo(bool), //~ variant not covered\n+    Bar, //~ variant not covered\n }\n-enum NonEmptyEnum5 {\n+enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n }\n \n@@ -35,11 +35,11 @@ fn main() {\n     match 0u8 {}\n     //~^ ERROR type `u8` is non-empty\n     match NonEmptyStruct(true) {}\n-    //~^ ERROR type `NonEmptyStruct` is non-empty\n+    //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n     match NonEmptyEnum1::Foo(true) {}\n-    //~^ ERROR type `NonEmptyEnum1` is non-empty\n+    //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n     match NonEmptyEnum2::Foo(true) {}\n-    //~^ ERROR type `NonEmptyEnum2` is non-empty\n+    //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n     match NonEmptyEnum5::V1 {}\n-    //~^ ERROR type `NonEmptyEnum5` is non-empty\n+    //~^ ERROR multiple patterns of type `NonEmptyEnum5` are not handled\n }"}, {"sha": "d126b9185d109589a638cd147dc2139bf128573b", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -30,35 +30,60 @@ LL |     match 0u8 {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n   --> $DIR/match-empty-exhaustive_patterns.rs:37:11\n    |\n+LL | struct NonEmptyStruct(bool);\n+   | ----------------------------\n+   | |      |\n+   | |      variant not covered\n+   | `NonEmptyStruct` defined here\n+...\n LL |     match NonEmptyStruct(true) {}\n    |           ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `NonEmptyEnum1` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n   --> $DIR/match-empty-exhaustive_patterns.rs:39:11\n    |\n-LL |     match NonEmptyEnum1::Foo(true) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / enum NonEmptyEnum1 {\n+LL | |     Foo(bool),\n+   | |     --- variant not covered\n+LL | | }\n+   | |_- `NonEmptyEnum1` defined here\n+...\n+LL |       match NonEmptyEnum1::Foo(true) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `NonEmptyEnum2` is non-empty\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n   --> $DIR/match-empty-exhaustive_patterns.rs:41:11\n    |\n-LL |     match NonEmptyEnum2::Foo(true) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / enum NonEmptyEnum2 {\n+LL | |     Foo(bool),\n+   | |     --- variant not covered\n+LL | |     Bar,\n+   | |     --- variant not covered\n+LL | | }\n+   | |_- `NonEmptyEnum2` defined here\n+...\n+LL |       match NonEmptyEnum2::Foo(true) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `NonEmptyEnum5` is non-empty\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum5` are not handled\n   --> $DIR/match-empty-exhaustive_patterns.rs:43:11\n    |\n-LL |     match NonEmptyEnum5::V1 {}\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | / enum NonEmptyEnum5 {\n+LL | |     V1, V2, V3, V4, V5,\n+LL | | }\n+   | |_- `NonEmptyEnum5` defined here\n+...\n+LL |       match NonEmptyEnum5::V1 {}\n+   |             ^^^^^^^^^^^^^^^^^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "42a99367fa97730cfa269126c33e7f8f0b27f248", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -1,28 +1,28 @@\n-error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `uninhabited::IndirectUninhabitedEnum` is not handled\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `uninhabited::IndirectUninhabitedStruct` is not handled\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `uninhabited::IndirectUninhabitedTupleStruct` is not handled\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `uninhabited::IndirectUninhabitedVariants` is not handled\n   --> $DIR/indirect_match_with_exhaustive_patterns.rs:36:11\n    |\n LL |     match x {}"}, {"sha": "113b7db1c6e6058e90cbe10778753778fe13ad23", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5628d4a7c336bb567d5e1ccf2da02b528f3b230d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=5628d4a7c336bb567d5e1ccf2da02b528f3b230d", "patch": "@@ -6,23 +6,23 @@ LL |     match x {}\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `uninhabited::UninhabitedStruct` is not handled\n   --> $DIR/match_with_exhaustive_patterns.rs:25:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `uninhabited::UninhabitedTupleStruct` is not handled\n   --> $DIR/match_with_exhaustive_patterns.rs:29:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedVariants` is non-empty\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `uninhabited::UninhabitedVariants` are not handled\n   --> $DIR/match_with_exhaustive_patterns.rs:33:11\n    |\n LL |     match x {}"}]}