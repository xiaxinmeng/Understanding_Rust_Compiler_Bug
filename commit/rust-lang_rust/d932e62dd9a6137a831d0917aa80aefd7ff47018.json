{"sha": "d932e62dd9a6137a831d0917aa80aefd7ff47018", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzJlNjJkZDlhNjEzN2E4MzFkMDkxN2FhODBhZWZkN2ZmNDcwMTg=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-25T20:49:51Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-26T03:03:27Z"}, "message": "Assert that `tag_name` is alphabetic", "tree": {"sha": "731b2223005db9135f69ccfc88643f91b563e063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731b2223005db9135f69ccfc88643f91b563e063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d932e62dd9a6137a831d0917aa80aefd7ff47018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d932e62dd9a6137a831d0917aa80aefd7ff47018", "html_url": "https://github.com/rust-lang/rust/commit/d932e62dd9a6137a831d0917aa80aefd7ff47018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d932e62dd9a6137a831d0917aa80aefd7ff47018/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8ca5764c36feab162893cd16b567d87edd4cf8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ca5764c36feab162893cd16b567d87edd4cf8e", "html_url": "https://github.com/rust-lang/rust/commit/f8ca5764c36feab162893cd16b567d87edd4cf8e"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "28a207a84ba6d300f46142ec6c41749f83c797ff", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d932e62dd9a6137a831d0917aa80aefd7ff47018/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d932e62dd9a6137a831d0917aa80aefd7ff47018/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=d932e62dd9a6137a831d0917aa80aefd7ff47018", "patch": "@@ -72,7 +72,15 @@ impl HtmlWithLimit {\n     }\n \n     /// Open an HTML tag.\n+    ///\n+    /// **Note:** HTML attributes have not yet been implemented.\n+    /// This function will panic if called with a non-alphabetic `tag_name`.\n     pub(super) fn open_tag(&mut self, tag_name: &'static str) {\n+        assert!(\n+            tag_name.chars().all(|c| ('a'..='z').contains(&c)),\n+            \"tag_name contained non-alphabetic chars: {:?}\",\n+            tag_name\n+        );\n         self.queued_tags.push(tag_name);\n     }\n "}]}