{"sha": "cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOTNlNTFlZDNkMWZmZTRlOWQ5ZGVhM2U1YWZmNzU0NjIzZDAzMmY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-02T23:42:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T10:03:18Z"}, "message": "Show defaults in options descriptions.\n\nFor all `-C` and `-Z` options that have them.\n\nThe commit also rewords a few options to make them clearer, mostly by\navoiding the word \"don't\".\n\nIt also removes the listed default for `-Cinline-threshold`, which is\nincorrect -- that option doesn't have a static default.", "tree": {"sha": "05f3d87ab2082eaa9e28de1175b3fd03e8452a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f3d87ab2082eaa9e28de1175b3fd03e8452a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "html_url": "https://github.com/rust-lang/rust/commit/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58217bc996564965d3362ca3010a272b39e229f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/58217bc996564965d3362ca3010a272b39e229f6", "html_url": "https://github.com/rust-lang/rust/commit/58217bc996564965d3362ca3010a272b39e229f6"}], "stats": {"total": 208, "additions": 109, "deletions": 99}, "files": [{"sha": "a7bf1279f283ece418daee55886ae3d0d6eac9fc", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 109, "deletions": 99, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=cc93e51ed3d1ffe4e9d9dea3e5aff754623d032f", "patch": "@@ -622,7 +622,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n+        \"keep dead code at link time (useful for code coverage) (default: no)\"),\n     lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -635,21 +635,21 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of arguments to pass to LLVM (space separated)\"),\n     save_temps: bool = (false, parse_bool, [UNTRACKED],\n-        \"save all temporary output files during compilation\"),\n+        \"save all temporary output files during compilation (default: no)\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],\n-        \"set rpath values in libs/exes\"),\n+        \"set rpath values in libs/exes (default: no)\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n     no_prepopulate_passes: bool = (false, parse_bool, [TRACKED],\n-        \"don't pre-populate the pass manager with a list of passes\"),\n+        \"give an empty list of passes to the pass manager (default: no)\"),\n     no_vectorize_loops: bool = (false, parse_bool, [TRACKED],\n-        \"don't run the loop vectorization optimization passes\"),\n+        \"disable loop vectorization optimization passes (default: no)\"),\n     no_vectorize_slp: bool = (false, parse_bool, [TRACKED],\n-        \"don't run LLVM's SLP vectorization pass\"),\n+        \"disable LLVM's SLP vectorization pass (default: no)\"),\n     soft_float: bool = (false, parse_bool, [TRACKED],\n-        \"use soft float ABI (*eabihf targets only)\"),\n+        \"use soft float ABI (*eabihf targets only) (default: no)\"),\n     prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n-        \"prefer dynamic linking to static linking\"),\n+        \"prefer dynamic linking to static linking (default: no)\"),\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -665,24 +665,24 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"the `--no-stack-check` flag is deprecated and does nothing\"),\n+        \"this option is deprecated and does nothing\"),\n     debuginfo: usize = (0, parse_uint, [TRACKED],\n-        \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n-         2 = full debug info with variable and type information\"),\n+        \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n+         2 = full debug info with variable and type information; default: 0)\"),\n     opt_level: String = (\"0\".to_string(), parse_string, [TRACKED],\n-        \"optimize with possible levels 0-3, s, or z\"),\n+        \"optimization level (0-3, s, or z; default: 0)\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n-        \"set the threshold for inlining a function (default: 225)\"),\n+        \"set the threshold for inlining a function\"),\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n-        \"allow the linker to link its default libraries\"),\n+        \"allow the linker to link its default libraries (default: no)\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"linker flavor\"),\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n@@ -701,111 +701,116 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n-        \"in general, enable more debug printouts\"),\n+        \"in general, enable more debug printouts (default: no)\"),\n+    // o/w tests have closure@path\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n-        \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n+        \"exclude spans when debug-printing compiler state (default: no)\"),\n     identify_regions: bool = (false, parse_bool, [UNTRACKED],\n-        \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n+        \"display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\"),\n     borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n-        \"select which borrowck is used (`mir` or `migrate`)\"),\n+        \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each rustc pass\"),\n+        \"measure time of each rustc pass (default: no)\"),\n     time: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of rustc processes\"),\n+        \"measure time of rustc processes (default: no)\"),\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each LLVM pass\"),\n+        \"measure time of each LLVM pass (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n-        \"generate JSON tracing data file from LLVM data\"),\n+        \"generate JSON tracing data file from LLVM data (default: no)\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather statistics about the input\"),\n+        \"gather statistics about the input (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n-        \"generate comments into the assembly (may change behavior)\"),\n+        \"generate comments into the assembly (may change behavior) (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n-        \"verify LLVM IR\"),\n+        \"verify LLVM IR (default: no)\"),\n     borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather borrowck statistics\"),\n+        \"gather borrowck statistics (default: no)\"),\n     no_landing_pads: bool = (false, parse_bool, [TRACKED],\n-        \"omit landing pads for unwinding\"),\n+        \"omit landing pads for unwinding (default: no)\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],\n-        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n+        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n+        (default: no)\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather metadata statistics\"),\n+        \"gather metadata statistics (default: no)\"),\n     print_link_args: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the arguments passed to the linker\"),\n+        \"print the arguments passed to the linker (default: no)\"),\n     print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"prints the LLVM optimization passes being run\"),\n+        \"print the LLVM optimization passes being run (default: no)\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the AST as JSON and halt\"),\n+        \"print the AST as JSON and halt (default: no)\"),\n     // We default to 1 here since we want to behave like\n     // a sequential compiler for now. This'll likely be adjusted\n     // in the future. Note that -Zthreads=0 is the way to get\n     // the num_cpus behavior.\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the pre-expansion AST as JSON and halt\"),\n+        \"print the pre-expansion AST as JSON and halt (default: no)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n-        \"list the symbols defined by a library crate\"),\n+        \"list the symbols defined by a library crate (default: no)\"),\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n-         addition to normal output\"),\n+         addition to normal output (default: no)\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"prints region inference graph. \\\n-         Use with RUST_REGION_GRAPH=help for more info\"),\n+         Use with RUST_REGION_GRAPH=help for more info (default: no)\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n-        \"parse only; do not compile, assemble, or link\"),\n+        \"parse only; do not compile, assemble, or link (default: no)\"),\n     dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n-        \"load proc macros for both target and host, but only link to the target\"),\n+        \"load proc macros for both target and host, but only link to the target (default: no)\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n-        \"run all passes except codegen; no output\"),\n+        \"run all passes except codegen; no output (default: no)\"),\n     treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-        \"immediately print bugs registered with `delay_span_bug`\"),\n+        \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces\"),\n+        \"show macro backtraces (default: no)\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n-        \"show extended diagnostic help\"),\n+        \"show extended diagnostic help (default: no)\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"set the current terminal width\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n-        \"support compiling tests with panic=abort\"),\n+        \"support compiling tests with panic=abort (default: no)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n-        \"print tasks that execute and the color their dep node gets (requires debug build)\"),\n+        \"print tasks that execute and the color their dep node gets (requires debug build) \\\n+        (default: no)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n-        \"print high-level information about incremental reuse (or the lack thereof)\"),\n+        \"print high-level information about incremental reuse (or the lack thereof) \\\n+        (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n-        \"verify incr. comp. hashes of green query instances\"),\n+        \"verify incr. comp. hashes of green query instances (default: no)\"),\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n-        \"ignore spans during ICH computation -- used for testing\"),\n+        \"ignore spans during ICH computation -- used for testing (default: no)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n-        \"insert function instrument code for mcount-based tracing\"),\n+        \"insert function instrument code for mcount-based tracing (default: no)\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n+        \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n+        (default: no)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable queries of the dependency graph for regression testing\"),\n+        \"enable queries of the dependency graph for regression testing (default: no)\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n-        \"parse and expand the source, but run no analysis\"),\n+        \"parse and expand the source, but run no analysis (default: no)\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-        \"adds unstable command line options to rustc interface\"),\n+        \"adds unstable command line options to rustc interface (default: no)\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force overflow checks on or off\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-        \"for every macro invocation, print its name and arguments\"),\n+        \"for every macro invocation, print its name and arguments (default: no)\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n-        \"emit line numbers debug info inside macros\"),\n+        \"emit line numbers debug info inside macros (default: no)\"),\n     no_generate_arange_section: bool = (false, parse_bool, [TRACKED],\n-        \"don't generate DWARF address ranges that give faster lookups\"),\n+        \"omit DWARF address ranges that give faster lookups (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't clear the hygiene data after analysis\"),\n+        \"keep hygiene data after analysis (default: no)\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"show spans for compiler debugging (expr|pat|ty)\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"print layout information for each type encountered\"),\n+        \"print layout information for each type encountered (default: no)\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-        \"set the MIR optimization level (0-3, default: 1)\"),\n+        \"MIR optimization level (0-3; default: 1)\"),\n     mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -817,29 +822,30 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `foo | bar` all passes for function names containing 'foo' or 'bar'.\"),\n \n     dump_mir_dir: String = (\"mir_dump\".to_string(), parse_string, [UNTRACKED],\n-        \"the directory the MIR is dumped into\"),\n+        \"the directory the MIR is dumped into (default: `mir_dump`)\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n     dump_mir_dataflow: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n-        \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n+        \"exclude the pass number when dumping MIR (used in tests) (default: no)\"),\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n-        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0\"),\n+        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n+        (default: no)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some performance-related statistics\"),\n+        \"print some performance-related statistics (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about the query system\"),\n+        \"print some statistics about the query system (default: no)\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about AST and HIR\"),\n+        \"print some statistics about AST and HIR (default: no)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-        \"encode MIR of all functions into the crate metadata\"),\n+        \"encode MIR of all functions into the crate metadata (default: no)\"),\n     unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n-        \"take the breaks off const evaluation. NOTE: this is unsound\"),\n+        \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n-        \"pass `-install_name @rpath/...` to the macOS linker\"),\n+        \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-                                    \"use a sanitizer\"),\n+        \"use a sanitizer\"),\n     sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n         \"enable recovery for selected sanitizers\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n@@ -849,23 +855,24 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n     force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n-        \"force all crates to be `rustc_private` unstable\"),\n+        \"force all crates to be `rustc_private` unstable (default: no)\"),\n     pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n-                     \"insert profiling code\"),\n+        \"insert profiling code (default: no)\"),\n     no_profiler_runtime: bool = (false, parse_bool, [TRACKED],\n-        \"don't automatically inject the profiler_builtins crate\"),\n+        \"prevent automatic injection of the profiler_builtins crate\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n-                       \"dump facts from NLL analysis into side files\"),\n+        \"dump facts from NLL analysis into side files (default: no)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting)\"),\n+        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n+        (default: no)\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable polonius-based borrow-checker\"),\n+        \"enable polonius-based borrow-checker (default: no)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -874,12 +881,12 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n-         the max/min integer respectively, and NaN is mapped to 0\"),\n+         the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n     human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n-        \"generate human-readable, predictable names for codegen units\"),\n+        \"generate human-readable, predictable names for codegen units (default: no)\"),\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n-         themselves\"),\n+         themselves (default: no)\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:\n@@ -894,63 +901,66 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     // preserving that temporarily, but we're likely to switch the default\n     // soon.\n     run_dsymutil: bool = (true, parse_bool, [TRACKED],\n-        \"run `dsymutil` and delete intermediate object files\"),\n+        \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n-        \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n+        \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-        \"embed LLVM bitcode in object files\"),\n+        \"embed LLVM bitcode in object files (default: no)\"),\n     strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n-        \"tell the linker to strip debuginfo when building without debuginfo enabled\"),\n+        \"tell the linker to strip debuginfo when building without debuginfo enabled \\\n+        (default: no)\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n+        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO) (default: no)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n+        \"disable the 'leak check' for subtyping; unsound, but useful for tests (default: no)\"),\n     no_interleave_lints: bool = (false, parse_bool, [UNTRACKED],\n-        \"don't interleave execution of lints; allows benchmarking individual lints\"),\n+        \"execute lints separately; allows benchmarking individual lints (default: no)\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n     // keep this in sync with the event filter names in librustc_data_structures/profiling.rs\n     self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n-        \"specifies which kinds of events get recorded by the self profiler;\n+        \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, query-keys, function-args, args, llvm\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"emits a section containing stack size metadata\"),\n+        \"emit a section containing stack size metadata (default: no)\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-          \"whether to use the PLT when calling into shared libraries;\n-          only has effect for PIC code on systems with ELF binaries\n-          (default: PLT is disabled if full relro is enabled)\"),\n+        \"whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\"),\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n-        \"control the operation of the MergeFunctions LLVM pass, taking\n+        \"control the operation of the MergeFunctions LLVM pass, taking \\\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n-        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info\"),\n+        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n+        (default: no)\"),\n     insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n         \"fix undefined behavior when a thread doesn't eventually make progress \\\n-         (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n+         (such as entering an empty infinite loop) by inserting llvm.sideeffect \\\n+         (default: no)\"),\n     deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n-        \"deduplicate identical diagnostics\"),\n+        \"deduplicate identical diagnostics (default: yes)\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n         \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n     no_link: bool = (false, parse_bool, [TRACKED],\n-        \"compile without linking\"),\n+        \"compile without linking (default: no)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n-        \"link the `.rlink` file generated by `-Z no-link`\"),\n+        \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n-        \"use new LLVM pass manager\"),\n+        \"use new LLVM pass manager (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n-        \"link native libraries in the linker invocation\"),\n+        \"link native libraries in the linker invocation (default: yes)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n }"}]}