{"sha": "d92355c1db65035e508020e746c141c79dfdbd99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjM1NWMxZGI2NTAzNWU1MDgwMjBlNzQ2YzE0MWM3OWRmZGJkOTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-24T00:01:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-24T00:50:28Z"}, "message": "Highlight parts of fn in type errors\n\nWhen a type error arises between two fn items, fn pointers or tuples,\nhighlight only the differing parts of each.", "tree": {"sha": "a0cf0d266824c1930c716d1e98d9b1b4a818f571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0cf0d266824c1930c716d1e98d9b1b4a818f571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d92355c1db65035e508020e746c141c79dfdbd99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d92355c1db65035e508020e746c141c79dfdbd99", "html_url": "https://github.com/rust-lang/rust/commit/d92355c1db65035e508020e746c141c79dfdbd99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d92355c1db65035e508020e746c141c79dfdbd99/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11759d38c70d3df67135f88a682701c1cf9762a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11759d38c70d3df67135f88a682701c1cf9762a", "html_url": "https://github.com/rust-lang/rust/commit/f11759d38c70d3df67135f88a682701c1cf9762a"}], "stats": {"total": 283, "additions": 238, "deletions": 45}, "files": [{"sha": "7d7e7da1def633d57902be027fadb35e647ca03b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 174, "deletions": 3, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -63,8 +63,8 @@ use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldabl\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_error_codes::*;\n+use rustc_target::spec::abi;\n use syntax_pos::{Pos, Span};\n-\n use std::{cmp, fmt};\n \n mod note;\n@@ -766,7 +766,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             if len > 0 && i != len - 1 {\n                 value.push_normal(\", \");\n             }\n-            //self.push_comma(&mut value, &mut other_value, len, i);\n         }\n         if len > 0 {\n             value.push_highlighted(\">\");\n@@ -868,6 +867,120 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         substs.truncate_to(self.tcx, &generics)\n     }\n \n+    /// Given two `fn` signatures highlight only sub-parts that are different.\n+    fn cmp_fn_sig(\n+        &self,\n+        sig1: &ty::PolyFnSig<'tcx>,\n+        sig2: &ty::PolyFnSig<'tcx>,\n+    ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n+        let get_lifetimes = |sig| {\n+            use crate::hir::def::Namespace;\n+            let mut s = String::new();\n+            let (_, (sig, reg)) = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS)\n+                .name_all_regions(sig)\n+                .unwrap();\n+            let lts: Vec<String> = reg.into_iter().map(|(_, kind)| kind.to_string()).collect();\n+            (if lts.is_empty() {\n+                String::new()\n+            } else {\n+                format!(\"for<{}> \", lts.join(\", \"))\n+            }, sig)\n+        };\n+\n+        let (lt1, sig1) = get_lifetimes(sig1);\n+        let (lt2, sig2) = get_lifetimes(sig2);\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        let mut values = (\n+            DiagnosticStyledString::normal(\"\".to_string()),\n+            DiagnosticStyledString::normal(\"\".to_string()),\n+        );\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        // ^^^^^^\n+        values.0.push(sig1.unsafety.prefix_str().to_string(), sig1.unsafety != sig2.unsafety);\n+        values.1.push(sig2.unsafety.prefix_str().to_string(), sig1.unsafety != sig2.unsafety);\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //        ^^^^^^^^^^\n+        if sig1.abi != abi::Abi::Rust {\n+            values.0.push(format!(\"extern {} \", sig1.abi), sig1.abi != sig2.abi);\n+        }\n+        if sig2.abi != abi::Abi::Rust {\n+            values.1.push(format!(\"extern {} \", sig2.abi), sig1.abi != sig2.abi);\n+        }\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //                   ^^^^^^^^\n+        let lifetime_diff = lt1 != lt2;\n+        values.0.push(lt1, lifetime_diff);\n+        values.1.push(lt2, lifetime_diff);\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //                           ^^^\n+        values.0.push_normal(\"fn(\".to_string());\n+        values.1.push_normal(\"fn(\".to_string());\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //                              ^^^^^\n+        let len1 = sig1.inputs().len();\n+        let len2 = sig2.inputs().len();\n+        if len1 == len2 {\n+            for (i, (l, r)) in sig1.inputs().iter().zip(sig2.inputs().iter()).enumerate() {\n+                let (x1, x2) = self.cmp(l, r);\n+                (values.0).0.extend(x1.0);\n+                (values.1).0.extend(x2.0);\n+                self.push_comma(&mut values.0, &mut values.1, len1, i);\n+            }\n+        } else {\n+            for (i, l) in sig1.inputs().iter().enumerate() {\n+                values.0.push_highlighted(l.to_string());\n+                if i != len1 - 1 {\n+                    values.0.push_highlighted(\", \".to_string());\n+                }\n+            }\n+            for (i, r) in sig2.inputs().iter().enumerate() {\n+                values.1.push_highlighted(r.to_string());\n+                if i != len2 - 1 {\n+                    values.1.push_highlighted(\", \".to_string());\n+                }\n+            }\n+        }\n+\n+        if sig1.c_variadic {\n+            if len1 > 0 {\n+                values.0.push_normal(\", \".to_string());\n+            }\n+            values.0.push(\"...\".to_string(), !sig2.c_variadic);\n+        }\n+        if sig2.c_variadic {\n+            if len2 > 0 {\n+                values.1.push_normal(\", \".to_string());\n+            }\n+            values.1.push(\"...\".to_string(), !sig1.c_variadic);\n+        }\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //                                   ^\n+        values.0.push_normal(\")\".to_string());\n+        values.1.push_normal(\")\".to_string());\n+\n+        // unsafe extern \"C\" for<'a> fn(&'a T) -> &'a T\n+        //                                     ^^^^^^^^\n+        let output1 = sig1.output();\n+        let output2 = sig2.output();\n+        let (x1, x2) = self.cmp(output1, output2);\n+        if !output1.is_unit() {\n+            values.0.push_normal(\" -> \".to_string());\n+            (values.0).0.extend(x1.0);\n+        }\n+        if !output2.is_unit() {\n+            values.1.push_normal(\" -> \".to_string());\n+            (values.1).0.extend(x2.0);\n+        }\n+        values\n+    }\n+\n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n@@ -968,7 +1081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     for (i, lifetimes) in lifetimes.enumerate() {\n                         let l1 = lifetime_display(lifetimes.0);\n                         let l2 = lifetime_display(lifetimes.1);\n-                        if l1 == l2 {\n+                        if lifetimes.0 == lifetimes.1 {\n                             values.0.push_normal(\"'_\");\n                             values.1.push_normal(\"'_\");\n                         } else {\n@@ -1124,6 +1237,64 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 values\n             }\n \n+            // When encountering tuples of the same size, highlight only the differing types\n+            (&ty::Tuple(substs1), &ty::Tuple(substs2)) if substs1.len() == substs2.len() => {\n+                let mut values = (\n+                    DiagnosticStyledString::normal(\"(\".to_string()),\n+                    DiagnosticStyledString::normal(\"(\".to_string()),\n+                );\n+                let len = substs1.len();\n+                for (i, (left, right)) in substs1.types().zip(substs2.types()).enumerate() {\n+                    let (x1, x2) = self.cmp(left, right);\n+                    (values.0).0.extend(x1.0);\n+                    (values.1).0.extend(x2.0);\n+                    self.push_comma(&mut values.0, &mut values.1, len, i);\n+                }\n+                if len == 1 { // Keep the output for single element tuples as `(ty,)`.\n+                    values.0.push_normal(\",\".to_string());\n+                    values.1.push_normal(\",\".to_string());\n+                }\n+                values.0.push_normal(\")\".to_string());\n+                values.1.push_normal(\")\".to_string());\n+                values\n+            }\n+\n+            (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n+                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                let mut values = self.cmp_fn_sig(&sig1, &sig2);\n+                let path1 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did1, substs1));\n+                let path2 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did2, substs2));\n+                let same_path = path1 == path2;\n+                values.0.push(path1, !same_path);\n+                values.1.push(path2, !same_path);\n+                values\n+            }\n+\n+            (ty::FnDef(did1, substs1), ty::FnPtr(sig2)) => {\n+                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n+                let mut values = self.cmp_fn_sig(&sig1, sig2);\n+                values.0.push_normal(format!(\n+                    \" {{{}}}\",\n+                    self.tcx.def_path_str_with_substs(*did1, substs1)),\n+                );\n+                values\n+            }\n+\n+            (ty::FnPtr(sig1), ty::FnDef(did2, substs2)) => {\n+                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                let mut values = self.cmp_fn_sig(sig1, &sig2);\n+                values.1.push_normal(format!(\n+                    \" {{{}}}\",\n+                    self.tcx.def_path_str_with_substs(*did2, substs2)),\n+                );\n+                values\n+            }\n+\n+            (ty::FnPtr(sig1), ty::FnPtr(sig2)) => {\n+                self.cmp_fn_sig(sig1, sig2)\n+            }\n+\n             _ => {\n                 if t1 == t2 {\n                     // The two types are the same, elide and don't highlight."}, {"sha": "93813f71cd26416740efd5ff37cf0f7c8b872bda", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -17,6 +17,7 @@ use syntax::attr::{SignedInt, UnsignedInt};\n use syntax::symbol::{kw, Symbol};\n \n use std::cell::Cell;\n+use std::collections::BTreeMap;\n use std::fmt::{self, Write as _};\n use std::ops::{Deref, DerefMut};\n \n@@ -1054,7 +1055,7 @@ impl<F> FmtPrinter<'a, 'tcx, F> {\n     }\n }\n \n-impl TyCtxt<'_> {\n+impl TyCtxt<'t> {\n     // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n     // (but also some things just print a `DefId` generally so maybe we need this?)\n     fn guess_def_namespace(self, def_id: DefId) -> Namespace {\n@@ -1077,11 +1078,14 @@ impl TyCtxt<'_> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n     pub fn def_path_str(self, def_id: DefId) -> String {\n+        self.def_path_str_with_substs(def_id, &[])\n+    }\n+\n+    pub fn def_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n         let ns = self.guess_def_namespace(def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         let mut s = String::new();\n-        let _ = FmtPrinter::new(self, &mut s, ns)\n-            .print_def_path(def_id, &[]);\n+        let _ = FmtPrinter::new(self, &mut s, ns).print_def_path(def_id, substs);\n         s\n     }\n }\n@@ -1494,7 +1498,10 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n // HACK(eddyb) limited to `FmtPrinter` because of `binder_depth`,\n // `region_index` and `used_region_names`.\n impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n-    pub fn pretty_in_binder<T>(mut self, value: &ty::Binder<T>) -> Result<Self, fmt::Error>\n+    pub fn name_all_regions<T>(\n+        mut self,\n+        value: &ty::Binder<T>,\n+    ) -> Result<(Self, (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)), fmt::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n@@ -1527,8 +1534,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n         define_scoped_cx!(self);\n \n-        let old_region_index = self.region_index;\n-        let mut region_index = old_region_index;\n+        let mut region_index = self.region_index;\n         let new_value = self.tcx.replace_late_bound_regions(value, |br| {\n             let _ = start_or_continue(&mut self, \"for<\", \", \");\n             let br = match br {\n@@ -1550,12 +1556,21 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n                 }\n             };\n             self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n-        }).0;\n+        });\n         start_or_continue(&mut self, \"\", \"> \")?;\n \n         self.binder_depth += 1;\n         self.region_index = region_index;\n-        let mut inner = new_value.print(self)?;\n+        Ok((self, new_value))\n+    }\n+\n+    pub fn pretty_in_binder<T>(self, value: &ty::Binder<T>) -> Result<Self, fmt::Error>\n+    where\n+        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n+    {\n+        let old_region_index = self.region_index;\n+        let (new, new_value) = self.name_all_regions(value)?;\n+        let mut inner = new_value.0.print(new)?;\n         inner.region_index = old_region_index;\n         inner.binder_depth -= 1;\n         Ok(inner)"}, {"sha": "530844ceee11b708fefb6921099d93151dfaffce", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -52,6 +52,13 @@ impl DiagnosticStyledString {\n     pub fn push_highlighted<S: Into<String>>(&mut self, t: S) {\n         self.0.push(StringPart::Highlighted(t.into()));\n     }\n+    pub fn push<S: Into<String>>(&mut self, t: S, highlight: bool) {\n+        if highlight {\n+            self.0.push(StringPart::Highlighted(t.into()));\n+        } else {\n+            self.0.push(StringPart::Normal(t.into()));\n+        }\n+    }\n     pub fn normal<S: Into<String>>(t: S) -> DiagnosticStyledString {\n         DiagnosticStyledString(vec![StringPart::Normal(t.into())])\n     }"}, {"sha": "4f86ffb2b79af2632c65fe854164dc2128061ed2", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -22,8 +22,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n-              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n note: the lifetime `'c` as defined on the method body at 27:24...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |"}, {"sha": "37953d6328f704c9408b0700f71c2435cd15fea2", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -28,17 +28,17 @@ error[E0308]: mismatched types\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                                                        ^^^ expected non-variadic fn, found variadic function\n    |\n-   = note: expected fn pointer `unsafe extern \"C\" fn(isize, u8)`\n-                 found fn item `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n+   = note: expected fn pointer `unsafe extern \"C\" fn(_, _)`\n+                 found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                                                      ^^^ expected variadic fn, found non-variadic function\n    |\n-   = note: expected fn pointer `extern \"C\" fn(isize, u8, ...)`\n-                 found fn item `extern \"C\" fn(isize, u8) {bar}`\n+   = note: expected fn pointer `extern \"C\" fn(_, _, ...)`\n+                 found fn item `extern \"C\" fn(_, _) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-1.rs:22:19"}, {"sha": "8d221c7fa9ce51b7bbb1c9bdeb363645a60a4771", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -21,8 +21,8 @@ error[E0308]: mismatched types\n LL |     let _ = Checked::<{generic_arg::<u32>}>;\n    |                        ^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n    |\n-   = note: expected fn pointer `fn(usize) -> bool`\n-                 found fn item `fn(u32) -> bool {generic_arg::<u32>}`\n+   = note: expected fn pointer `fn(usize) -> _`\n+                 found fn item `fn(u32) -> _ {generic_arg::<u32>}`\n \n error[E0282]: type annotations needed\n   --> $DIR/fn-const-param-infer.rs:22:23"}, {"sha": "68b75c18a43dc52769978449b88d3496156599fc", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -12,8 +12,8 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected fn item `fn(isize) -> isize {foo::<u8>}`\n-    //~|  found fn item `fn(isize) -> isize {bar::<u8>}`\n+    //~|  expected fn item `fn(_) -> _ {foo::<u8>}`\n+    //~|  found fn item `fn(_) -> _ {bar::<u8>}`\n     //~|  expected fn item, found a different fn item\n \n     eq(foo::<u8>, foo::<i8>);\n@@ -22,8 +22,8 @@ fn main() {\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n-    //~|  found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+    //~|  expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n+    //~|  found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n     //~|  expected struct `std::string::String`, found struct `std::vec::Vec`\n \n     // Make sure we distinguish between trait methods correctly."}, {"sha": "4cce25c43c485b31eb8e73bedbc392db400c8a74", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -4,26 +4,26 @@ error[E0308]: mismatched types\n LL |     eq(foo::<u8>, bar::<u8>);\n    |                   ^^^^^^^^^ expected fn item, found a different fn item\n    |\n-   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n-              found fn item `fn(isize) -> isize {bar::<u8>}`\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+              found fn item `fn(_) -> _ {bar::<u8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:19:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n    |                   ^^^^^^^^^ expected `u8`, found `i8`\n    |\n-   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n-              found fn item `fn(isize) -> isize {foo::<i8>}`\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+              found fn item `fn(_) -> _ {foo::<i8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:23:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |                       ^^^^^^^^^^^^^^ expected struct `std::string::String`, found struct `std::vec::Vec`\n    |\n-   = note: expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n-              found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+   = note: expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n+              found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:30:26"}, {"sha": "2dcdaba170ac7be73470e95846c54a98c254e711", "filename": "src/test/ui/issues/issue-15094.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `call_once` has an incompatible type for trait\n LL |     fn call_once(self, _args: ()) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"rust-call\" fn, found \"Rust\" fn\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<T>, ())`\n-              found fn pointer `fn(Debuger<T>, ())`\n+   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<_>, ())`\n+              found fn pointer `fn(Debuger<_>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "66e89998e1db1faf70f98bfcaffe56d76ea1c1db", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -31,8 +31,8 @@ LL |     fn baz(_: (u8, u16));\n LL |     fn baz(_: (u16, u16)) {}\n    |               ^^^^^^^^^^ expected `u8`, found `u16`\n    |\n-   = note: expected fn pointer `fn((u8, u16))`\n-              found fn pointer `fn((u16, u16))`\n+   = note: expected fn pointer `fn((u8, _))`\n+              found fn pointer `fn((u16, _))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17"}, {"sha": "703cdf0854808c5359fd476da3ad339a2d166e21", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -9,8 +9,8 @@ LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> std::option::Option<_>`\n+              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<_>`\n note: the anonymous lifetime #1 defined on the method body at 6:5...\n   --> $DIR/issue-37884.rs:6:5\n    |"}, {"sha": "3e3678a23f74c10740139c65649435d0cf7e35ef", "filename": "src/test/ui/issues/issue-9575.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -4,8 +4,8 @@ error[E0308]: start function has wrong type\n LL | fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected fn pointer `fn(isize, *const *const u8) -> isize`\n-              found fn pointer `fn(isize, *const *const u8, *const u8) -> isize`\n+   = note: expected fn pointer `fn(isize, *const *const u8) -> _`\n+              found fn pointer `fn(isize, *const *const u8, *const u8) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "19f5ef463cef24b95e592c068372cbc522661b55", "filename": "src/test/ui/unsafe/unsafe-subtyping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-subtyping.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -6,8 +6,8 @@ LL | fn foo(x: Option<fn(i32)>) -> Option<unsafe fn(i32)> {\n LL |     x\n    |     ^ expected unsafe fn, found normal fn\n    |\n-   = note: expected enum `std::option::Option<unsafe fn(i32)>`\n-              found enum `std::option::Option<fn(i32)>`\n+   = note: expected enum `std::option::Option<unsafe fn(_)>`\n+              found enum `std::option::Option<fn(_)>`\n \n error: aborting due to previous error\n "}, {"sha": "03a251be1a9141572c001b7ad5ce2822e79533ee", "filename": "src/test/ui/unsafe/unsafe-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n-    //~| expected fn pointer `unsafe fn(&u32) -> u32`\n-    //~| found fn pointer `fn(&u32) -> u32`\n+    //~| expected fn pointer `unsafe fn(&u32) -> _`\n+    //~| found fn pointer `fn(&u32) -> _`\n }\n \n fn main() { }"}, {"sha": "1c3d057cbc9ce0ddf5ae6895faae682c1ce6bcc3", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe fn len(&self) -> u32;\n LL |     fn len(&self) -> u32 { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^ expected unsafe fn, found normal fn\n    |\n-   = note: expected fn pointer `unsafe fn(&u32) -> u32`\n-              found fn pointer `fn(&u32) -> u32`\n+   = note: expected fn pointer `unsafe fn(&u32) -> _`\n+              found fn pointer `fn(&u32) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "31f5a3f698161955bf449558acd9014a9c838032", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d92355c1db65035e508020e746c141c79dfdbd99/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=d92355c1db65035e508020e746c141c79dfdbd99", "patch": "@@ -22,8 +22,8 @@ error[E0053]: method `mul` has an incompatible type for trait\n LL |     fn mul(self, s: f64) -> f64 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `f64`\n    |\n-   = note: expected fn pointer `fn(Vec3, f64) -> i32`\n-              found fn pointer `fn(Vec3, f64) -> f64`\n+   = note: expected fn pointer `fn(Vec3, _) -> i32`\n+              found fn pointer `fn(Vec3, _) -> f64`\n \n error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:45"}]}