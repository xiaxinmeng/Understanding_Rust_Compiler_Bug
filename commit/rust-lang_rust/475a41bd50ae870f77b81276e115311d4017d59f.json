{"sha": "475a41bd50ae870f77b81276e115311d4017d59f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NWE0MWJkNTBhZTg3MGY3N2I4MTI3NmUxMTUzMTFkNDAxN2Q1OWY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-28T17:33:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-28T17:33:56Z"}, "message": "Rollup merge of #36376 - GuillaumeGomez:e0050, r=jonathandturner\n\nUpdate E0050 to new error format\n\nPart of #35233.\nFixes #35211.\n\nr? @jonathandturner", "tree": {"sha": "43c66d34dd2f5bc25f173119a40823d97616e38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c66d34dd2f5bc25f173119a40823d97616e38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/475a41bd50ae870f77b81276e115311d4017d59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/475a41bd50ae870f77b81276e115311d4017d59f", "html_url": "https://github.com/rust-lang/rust/commit/475a41bd50ae870f77b81276e115311d4017d59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/475a41bd50ae870f77b81276e115311d4017d59f/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7971682fadada4efe49eb06bfc7596b964581b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7971682fadada4efe49eb06bfc7596b964581b", "html_url": "https://github.com/rust-lang/rust/commit/4f7971682fadada4efe49eb06bfc7596b964581b"}, {"sha": "61cbf414d7f4ea19de66da25d0ea034541e31750", "url": "https://api.github.com/repos/rust-lang/rust/commits/61cbf414d7f4ea19de66da25d0ea034541e31750", "html_url": "https://github.com/rust-lang/rust/commit/61cbf414d7f4ea19de66da25d0ea034541e31750"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "39114ec4238e72a9682c6a7b99f87e6ed7fe48f1", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/475a41bd50ae870f77b81276e115311d4017d59f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475a41bd50ae870f77b81276e115311d4017d59f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=475a41bd50ae870f77b81276e115311d4017d59f", "patch": "@@ -260,7 +260,7 @@ impl<'ast> Map<'ast> {\n                     EntryVariant(p, _) |\n                     EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n-                EntryTy(p, _) |\n+                    EntryTy(p, _) |\n                     EntryLocal(p, _) |\n                     EntryPat(p, _) |\n                     EntryBlock(p, _) |"}, {"sha": "826a88127d84e78ec5165c29bd083eb884b5bcee", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/475a41bd50ae870f77b81276e115311d4017d59f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475a41bd50ae870f77b81276e115311d4017d59f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=475a41bd50ae870f77b81276e115311d4017d59f", "patch": "@@ -148,14 +148,70 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n \n     if impl_m.fty.sig.0.inputs.len() != trait_m.fty.sig.0.inputs.len() {\n-        span_err!(tcx.sess, impl_m_span, E0050,\n+        let trait_number_args = trait_m.fty.sig.0.inputs.len();\n+        let impl_number_args = impl_m.fty.sig.0.inputs.len();\n+        let trait_m_node_id = tcx.map.as_local_node_id(trait_m.def_id);\n+        let trait_span = if let Some(trait_id) = trait_m_node_id {\n+            match tcx.map.expect_trait_item(trait_id).node {\n+                TraitItem_::MethodTraitItem(ref trait_m_sig, _) => {\n+                    if let Some(arg) = trait_m_sig.decl.inputs.get(\n+                        if trait_number_args > 0 {\n+                            trait_number_args - 1\n+                        } else {\n+                            0\n+                        }) {\n+                        Some(arg.pat.span)\n+                    } else {\n+                        trait_item_span\n+                    }\n+                }\n+                _ => bug!(\"{:?} is not a method\", impl_m)\n+            }\n+        } else {\n+            trait_item_span\n+        };\n+        let impl_m_node_id = tcx.map.as_local_node_id(impl_m.def_id).unwrap();\n+        let impl_span = match tcx.map.expect_impl_item(impl_m_node_id).node {\n+            ImplItemKind::Method(ref impl_m_sig, _) => {\n+                if let Some(arg) = impl_m_sig.decl.inputs.get(\n+                    if impl_number_args > 0 {\n+                        impl_number_args - 1\n+                    } else {\n+                        0\n+                    }) {\n+                    arg.pat.span\n+                } else {\n+                    impl_m_span\n+                }\n+            }\n+            _ => bug!(\"{:?} is not a method\", impl_m)\n+        };\n+        let mut err = struct_span_err!(tcx.sess, impl_span, E0050,\n             \"method `{}` has {} parameter{} \\\n              but the declaration in trait `{}` has {}\",\n             trait_m.name,\n-            impl_m.fty.sig.0.inputs.len(),\n-            if impl_m.fty.sig.0.inputs.len() == 1 {\"\"} else {\"s\"},\n+            impl_number_args,\n+            if impl_number_args == 1 {\"\"} else {\"s\"},\n             tcx.item_path_str(trait_m.def_id),\n-            trait_m.fty.sig.0.inputs.len());\n+            trait_number_args);\n+        if let Some(trait_span) = trait_span {\n+            err.span_label(trait_span,\n+                           &format!(\"trait requires {}\",\n+                                    &if trait_number_args != 1 {\n+                                        format!(\"{} parameters\", trait_number_args)\n+                                    } else {\n+                                        format!(\"{} parameter\", trait_number_args)\n+                                    }));\n+        }\n+        err.span_label(impl_span,\n+                       &format!(\"expected {}, found {}\",\n+                                &if trait_number_args != 1 {\n+                                    format!(\"{} parameters\", trait_number_args)\n+                                } else {\n+                                    format!(\"{} parameter\", trait_number_args)\n+                                },\n+                       impl_number_args));\n+        err.emit();\n         return;\n     }\n "}, {"sha": "5c53d62709aef2bb6239f266a3e375f1c830aae9", "filename": "src/test/compile-fail/E0050.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/475a41bd50ae870f77b81276e115311d4017d59f/src%2Ftest%2Fcompile-fail%2FE0050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/475a41bd50ae870f77b81276e115311d4017d59f/src%2Ftest%2Fcompile-fail%2FE0050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0050.rs?ref=475a41bd50ae870f77b81276e115311d4017d59f", "patch": "@@ -9,13 +9,20 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(&self, x: u8) -> bool;\n+    fn foo(&self, x: u8) -> bool; //~ NOTE trait requires 2 parameters\n+    fn bar(&self, x: u8, y: u8, z: u8); //~ NOTE trait requires 4 parameters\n+    fn less(&self); //~ NOTE trait requires 1 parameter\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     fn foo(&self) -> bool { true } //~ ERROR E0050\n+                                   //~| NOTE expected 2 parameters, found 1\n+    fn bar(&self) { } //~ ERROR E0050\n+                      //~| NOTE expected 4 parameters, found 1\n+    fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n+                                            //~| NOTE expected 1 parameter, found 4\n }\n \n fn main() {"}]}