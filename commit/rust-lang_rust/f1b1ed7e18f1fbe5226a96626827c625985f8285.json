{"sha": "f1b1ed7e18f1fbe5226a96626827c625985f8285", "node_id": "C_kwDOAAsO6NoAKGYxYjFlZDdlMThmMWZiZTUyMjZhOTY2MjY4MjdjNjI1OTg1ZjgyODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-13T10:41:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-13T10:41:50Z"}, "message": "Auto merge of #108471 - clubby789:unbox-the-syntax, r=Nilstrieb,est31\n\nRemove `box_syntax`\n\nr? `@Nilstrieb`\n\nThis removes the feature `box_syntax`, which allows the use of `box <expr>` to create a Box, and finalises removing use of the feature from the compiler. `box_patterns` (allowing the use of `box <pat>` in a pattern) is unaffected.\nIt also removes `ast::ExprKind::Box` - the only way to create a 'box' expression now is with the rustc-internal `#[rustc_box]` attribute.\nAs a temporary measure to help users move away, `box <expr>` now parses the inner expression, and emits a `MachineApplicable` lint to replace it with `Box::new`\n\nCloses #49733", "tree": {"sha": "d424952e590d63a8e4020f65d8d74304daa1397b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d424952e590d63a8e4020f65d8d74304daa1397b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1b1ed7e18f1fbe5226a96626827c625985f8285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b1ed7e18f1fbe5226a96626827c625985f8285", "html_url": "https://github.com/rust-lang/rust/commit/f1b1ed7e18f1fbe5226a96626827c625985f8285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1b1ed7e18f1fbe5226a96626827c625985f8285/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "html_url": "https://github.com/rust-lang/rust/commit/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8"}, {"sha": "8b186dfdb70ebfe722975970458c6230841e6911", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b186dfdb70ebfe722975970458c6230841e6911", "html_url": "https://github.com/rust-lang/rust/commit/8b186dfdb70ebfe722975970458c6230841e6911"}], "stats": {"total": 2033, "additions": 979, "deletions": 1054}, "files": [{"sha": "6503bf2bab7627c84d47829563aa12294b8ffd86", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1230,7 +1230,6 @@ impl Expr {\n \n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n-            ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n@@ -1291,8 +1290,7 @@ impl Expr {\n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.peel_parens().kind {\n-            ExprKind::Box(_)\n-            | ExprKind::Array(_)\n+            ExprKind::Array(_)\n             | ExprKind::Call(_, _)\n             | ExprKind::Tup(_)\n             | ExprKind::Lit(_)\n@@ -1363,8 +1361,6 @@ pub struct StructExpr {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ExprKind {\n-    /// A `box x` expression.\n-    Box(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(ThinVec<P<Expr>>),\n     /// Allow anonymous constants from an inline `const` block"}, {"sha": "45a5a3ecb53f0624a852808d0d154ba1ef16ac86", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1316,7 +1316,6 @@ pub fn noop_visit_expr<T: MutVisitor>(\n     vis: &mut T,\n ) {\n     match kind {\n-        ExprKind::Box(expr) => vis.visit_expr(expr),\n         ExprKind::Array(exprs) => visit_thin_exprs(exprs, vis),\n         ExprKind::ConstBlock(anon_const) => {\n             vis.visit_anon_const(anon_const);"}, {"sha": "607b77705cf83987acf0038e8d1683c48148e117", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -35,7 +35,6 @@ pub fn expr_trailing_brace(mut expr: &ast::Expr) -> Option<&ast::Expr> {\n             | Assign(_, e, _)\n             | AssignOp(_, _, e)\n             | Binary(_, _, e)\n-            | Box(e)\n             | Break(_, Some(e))\n             | Let(_, e, _)\n             | Range(_, Some(e), _)"}, {"sha": "9a4da6d439600f955f39198b3acd5fd9e56edac7", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -772,7 +772,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n     walk_list!(visitor, visit_attribute, expression.attrs.iter());\n \n     match &expression.kind {\n-        ExprKind::Box(subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "4390680c45a6eec361933e3a73cd2aba264ee29a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -70,7 +70,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.lower_attrs(hir_id, &e.attrs);\n \n             let kind = match &e.kind {\n-                ExprKind::Box(inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n                 ExprKind::ConstBlock(anon_const) => {\n                     let anon_const = self.lower_anon_const(anon_const);"}, {"sha": "6a5d5614b1cb91ebd80210cf7dbb9d62e03e4ad6", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -392,14 +392,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n-            ast::ExprKind::Box(_) => {\n-                gate_feature_post!(\n-                    &self,\n-                    box_syntax,\n-                    e.span,\n-                    \"box expression syntax is experimental; you can call `Box::new` instead\"\n-                );\n-            }\n             ast::ExprKind::Type(..) => {\n                 if self.sess.parse_sess.span_diagnostic.err_count() == 0 {\n                     // To avoid noise about type ascription in common syntax errors,\n@@ -604,7 +596,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n-    gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n     gate_all!(type_ascription, \"type ascription is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);"}, {"sha": "e2f63641ffa53b74a5b9eea4656b2690f48756d3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -296,10 +296,6 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match &expr.kind {\n-            ast::ExprKind::Box(expr) => {\n-                self.word_space(\"box\");\n-                self.print_expr_maybe_paren(expr, parser::PREC_PREFIX);\n-            }\n             ast::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);\n             }"}, {"sha": "5d8f4db76f9b17ef7f780f8e5efc7d5c7052a481", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -290,7 +290,6 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Async(_, _, _)\n             | ExprKind::Await(_)\n             | ExprKind::Block(_, _)\n-            | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n             | ExprKind::Closure(_)\n             | ExprKind::ConstBlock(_)"}, {"sha": "4ede2fe4efe82777918ed7cebcefbfe13137872d", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler, box_syntax)]\n+#![feature(start, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n@@ -29,7 +29,7 @@ fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n \n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let world: Box<&str> = box \"Hello World!\\0\";\n+    let world: Box<&str> = Box::new(\"Hello World!\\0\");\n     unsafe {\n         puts(*world as *const str as *const u8);\n     }"}, {"sha": "04e7795bbfa160845b0d61ea47bcde22ac021822", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_core, lang_items, never_type, linkage, extern_types, thread_local, box_syntax)]\n+#![feature(no_core, lang_items, never_type, linkage, extern_types, thread_local)]\n #![no_core]\n #![allow(dead_code, non_camel_case_types)]\n \n@@ -178,7 +178,7 @@ fn main() {\n         let ptr: *const i8 = hello as *const [u8] as *const i8;\n         puts(ptr);\n \n-        let world: Box<&str> = box \"World!\\0\";\n+        let world: Box<&str> = Box::new(\"World!\\0\");\n         puts(*world as *const str as *const i8);\n         world as Box<dyn SomeTrait>;\n \n@@ -238,10 +238,10 @@ fn main() {\n         }\n     }\n \n-    let _ = box NoisyDrop {\n+    let _ = Box::new(NoisyDrop {\n         text: \"Boxed outer got dropped!\\0\",\n         inner: NoisyDropInner,\n-    } as Box<dyn SomeTrait>;\n+    }) as Box<dyn SomeTrait>;\n \n     const FUNC_REF: Option<fn()> = Some(main);\n     match FUNC_REF {"}, {"sha": "754e7931412daa8fe46632a74b3a27b13e2a639b", "filename": "compiler/rustc_codegen_gcc/example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_error_handler, lang_items)]\n+#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]\n #![no_std]\n \n extern crate alloc;\n@@ -38,7 +38,7 @@ unsafe extern \"C\" fn _Unwind_Resume() {\n \n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let world: Box<&str> = box \"Hello World!\\0\";\n+    let world: Box<&str> = Box::new(\"Hello World!\\0\");\n     unsafe {\n         puts(*world as *const str as *const u8);\n     }"}, {"sha": "cff26077740b03c0896b85440376d8c2b3a52623", "filename": "compiler/rustc_codegen_gcc/example/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,7 @@\n // Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n \n #![feature(\n-    no_core, unboxed_closures, start, lang_items, box_syntax, never_type, linkage,\n+    no_core, unboxed_closures, start, lang_items, never_type, linkage,\n     extern_types, thread_local\n )]\n #![no_core]\n@@ -163,7 +163,7 @@ fn main() {\n         let ptr: *const u8 = hello as *const [u8] as *const u8;\n         puts(ptr);\n \n-        let world: Box<&str> = box \"World!\\0\";\n+        let world: Box<&str> = Box::new(\"World!\\0\");\n         puts(*world as *const str as *const u8);\n         world as Box<dyn SomeTrait>;\n \n@@ -223,10 +223,10 @@ fn main() {\n         }\n     }\n \n-    let _ = box NoisyDrop {\n+    let _ = Box::new(NoisyDrop {\n         text: \"Boxed outer got dropped!\\0\",\n         inner: NoisyDropInner,\n-    } as Box<dyn SomeTrait>;\n+    }) as Box<dyn SomeTrait>;\n \n     const FUNC_REF: Option<fn()> = Some(main);\n     #[allow(unreachable_code)]"}, {"sha": "5e2e7f25a2c084974d2e36e0a6a01bd1a5ccde48", "filename": "compiler/rustc_codegen_gcc/example/mod_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_codegen_gcc%2Fexample%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Fmod_bench.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, lang_items)]\n+#![feature(start, core_intrinsics, lang_items)]\n #![no_std]\n \n #[link(name = \"c\")]"}, {"sha": "f03f8a6605f664d82b6d695d29261eb494ef060a", "filename": "compiler/rustc_error_codes/src/error_codes/E0010.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0010.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0010.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0010.md?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -5,7 +5,5 @@ the heap at runtime, and therefore cannot be done at compile time.\n Erroneous code example:\n \n ```compile_fail,E0010\n-#![feature(box_syntax)]\n-\n-const CON : Box<i32> = box 0;\n+const CON : Vec<i32> = vec![1, 2, 3];\n ```"}, {"sha": "c893b34b4ac25e357f612f449c340a711007fcc7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -200,8 +200,6 @@ declare_features! (\n     (active, auto_traits, \"1.50.0\", Some(13231), None),\n     /// Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n-    /// Allows using the `box $expr` syntax.\n-    (active, box_syntax, \"1.0.0\", Some(49733), None),\n     /// Allows `#[doc(notable_trait)]`.\n     /// Renamed from `doc_spotlight`.\n     (active, doc_notable_trait, \"1.52.0\", Some(45040), None),"}, {"sha": "48d9fbfa6d2619e71a2262cee0c5e1e986b04c66", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -52,6 +52,8 @@ declare_features! (\n     (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n+    /// Allows using the `box $expr` syntax.\n+    (removed, box_syntax, \"CURRENT_RUSTC_VERSION\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (removed, capture_disjoint_fields, \"1.49.0\", Some(53488), None, Some(\"stabilized in Rust 2021\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "d715b03e40ebfe761afee13cf19a25a9a272c69b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1367,8 +1367,8 @@ impl<'a> State<'a> {\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match expr.kind {\n             hir::ExprKind::Box(expr) => {\n-                self.word_space(\"box\");\n-                self.print_expr_maybe_paren(expr, parser::PREC_PREFIX);\n+                self.word_space(\"Box::new\");\n+                self.print_call_post(std::slice::from_ref(expr));\n             }\n             hir::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);"}, {"sha": "2fab82d55cd47022327cfd82e09f06c531024f4a", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1371,7 +1371,6 @@ declare_lint_pass!(UnusedAllocation => [UNUSED_ALLOCATION]);\n impl<'tcx> LateLintPass<'tcx> for UnusedAllocation {\n     fn check_expr(&mut self, cx: &LateContext<'_>, e: &hir::Expr<'_>) {\n         match e.kind {\n-            hir::ExprKind::Box(_) => {}\n             hir::ExprKind::Call(path_expr, [_])\n                 if let hir::ExprKind::Path(qpath) = &path_expr.kind\n                 && let Some(did) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()"}, {"sha": "9447a2ff040950fe44db4c1561cc1503acd4ea04", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -158,10 +158,12 @@ impl EnumSizeOpt {\n                             tmp_ty,\n                         ),\n                     };\n-                    let rval = Rvalue::Use(Operand::Constant(box (constant_vals)));\n+                    let rval = Rvalue::Use(Operand::Constant(Box::new(constant_vals)));\n \n-                    let const_assign =\n-                        Statement { source_info, kind: StatementKind::Assign(box (place, rval)) };\n+                    let const_assign = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(Box::new((place, rval))),\n+                    };\n \n                     let discr_place = Place::from(\n                         local_decls\n@@ -170,48 +172,51 @@ impl EnumSizeOpt {\n \n                     let store_discr = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (discr_place, Rvalue::Discriminant(*rhs))),\n+                        kind: StatementKind::Assign(Box::new((\n+                            discr_place,\n+                            Rvalue::Discriminant(*rhs),\n+                        ))),\n                     };\n \n                     let discr_cast_place =\n                         Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n \n                     let cast_discr = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             discr_cast_place,\n                             Rvalue::Cast(\n                                 CastKind::IntToInt,\n                                 Operand::Copy(discr_place),\n                                 tcx.types.usize,\n                             ),\n-                        )),\n+                        ))),\n                     };\n \n                     let size_place =\n                         Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n \n                     let store_size = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             size_place,\n                             Rvalue::Use(Operand::Copy(Place {\n                                 local: size_array_local,\n                                 projection: tcx\n                                     .mk_place_elems(&[PlaceElem::Index(discr_cast_place.local)]),\n                             })),\n-                        )),\n+                        ))),\n                     };\n \n                     let dst =\n                         Place::from(local_decls.push(LocalDecl::new(tcx.mk_mut_ptr(ty), span)));\n \n                     let dst_ptr = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             dst,\n                             Rvalue::AddressOf(Mutability::Mut, *lhs),\n-                        )),\n+                        ))),\n                     };\n \n                     let dst_cast_ty = tcx.mk_mut_ptr(tcx.types.u8);\n@@ -220,21 +225,21 @@ impl EnumSizeOpt {\n \n                     let dst_cast = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             dst_cast_place,\n                             Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(dst), dst_cast_ty),\n-                        )),\n+                        ))),\n                     };\n \n                     let src =\n                         Place::from(local_decls.push(LocalDecl::new(tcx.mk_imm_ptr(ty), span)));\n \n                     let src_ptr = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             src,\n                             Rvalue::AddressOf(Mutability::Not, *rhs),\n-                        )),\n+                        ))),\n                     };\n \n                     let src_cast_ty = tcx.mk_imm_ptr(tcx.types.u8);\n@@ -243,24 +248,24 @@ impl EnumSizeOpt {\n \n                     let src_cast = Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             src_cast_place,\n                             Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(src), src_cast_ty),\n-                        )),\n+                        ))),\n                     };\n \n                     let deinit_old =\n-                        Statement { source_info, kind: StatementKind::Deinit(box dst) };\n+                        Statement { source_info, kind: StatementKind::Deinit(Box::new(dst)) };\n \n                     let copy_bytes = Statement {\n                         source_info,\n-                        kind: StatementKind::Intrinsic(\n-                            box NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping {\n+                        kind: StatementKind::Intrinsic(Box::new(\n+                            NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping {\n                                 src: Operand::Copy(src_cast_place),\n                                 dst: Operand::Copy(dst_cast_place),\n                                 count: Operand::Copy(size_place),\n                             }),\n-                        ),\n+                        )),\n                     };\n \n                     let store_dead = Statement {"}, {"sha": "b2c477c84d2ff8cc5c64fb330a40dc31c85c56d8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n-#![feature(box_syntax)]\n #![feature(let_chains)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "c39ada95a4ec47a012e266cedd14eb4b8bbb0436", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -731,3 +731,6 @@ parse_unknown_start_of_token = unknown start of token: {$escaped}\n         [one] once more\n         *[other] {$repeats} more times\n     }\n+\n+parse_box_syntax_removed = `box_syntax` has been removed\n+    .suggestion = use `Box::new()` instead"}, {"sha": "af0c3026c6605acd9734bc3c0691b8d80ceb112e", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -2300,3 +2300,16 @@ impl HelpUseLatestEdition {\n         }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_box_syntax_removed)]\n+pub struct BoxSyntaxRemoved<'a> {\n+    #[primary_span]\n+    #[suggestion(\n+        code = \"Box::new({code})\",\n+        applicability = \"machine-applicable\",\n+        style = \"verbose\"\n+    )]\n+    pub span: Span,\n+    pub code: &'a str,\n+}"}, {"sha": "296eb4d653cdd83991b2387520a7fbf3db10f567", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -8,6 +8,7 @@ use super::{\n \n use crate::errors;\n use crate::maybe_recover_from_interpolated_ty_qpath;\n+use ast::{Path, PathSegment};\n use core::mem;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n@@ -29,6 +30,7 @@ use rustc_session::errors::{report_lit_error, ExprParenthesesNeeded};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::symbol::kw::PathRoot;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n use thin_vec::{thin_vec, ThinVec};\n@@ -636,11 +638,27 @@ impl<'a> Parser<'a> {\n         self.parse_expr_unary(lo, UnOp::Not)\n     }\n \n-    /// Parse `box expr`.\n+    /// Parse `box expr` - this syntax has been removed, but we still parse this\n+    /// for now to provide an automated way to fix usages of it\n     fn parse_expr_box(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         let (span, expr) = self.parse_expr_prefix_common(lo)?;\n-        self.sess.gated_spans.gate(sym::box_syntax, span);\n-        Ok((span, ExprKind::Box(expr)))\n+        let code = self.sess.source_map().span_to_snippet(span.with_lo(lo.hi())).unwrap();\n+        self.sess.emit_err(errors::BoxSyntaxRemoved { span, code: code.trim() });\n+        // So typechecking works, parse `box <expr>` as `::std::boxed::Box::new(expr)`\n+        let path = Path {\n+            span,\n+            segments: [\n+                PathSegment::from_ident(Ident::with_dummy_span(PathRoot)),\n+                PathSegment::from_ident(Ident::with_dummy_span(sym::std)),\n+                PathSegment::from_ident(Ident::from_str(\"boxed\")),\n+                PathSegment::from_ident(Ident::from_str(\"Box\")),\n+                PathSegment::from_ident(Ident::with_dummy_span(sym::new)),\n+            ]\n+            .into(),\n+            tokens: None,\n+        };\n+        let path = self.mk_expr(span, ExprKind::Path(None, path));\n+        Ok((span, self.mk_call(path, ThinVec::from([expr]))))\n     }\n \n     fn is_mistaken_not_ident_negation(&self) -> bool {"}, {"sha": "3e0d53029ef995bce40160725cb524b96b8af0b3", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -565,7 +565,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         record_variants!(\n             (self, e, e.kind, Id::None, ast, Expr, ExprKind),\n             [\n-                Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n+                Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n                 AssignOp, Field, Index, Range, Underscore, Path, AddrOf, Break, Continue, Ret,\n                 InlineAsm, FormatArgs, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, IncludedBytes, Err"}, {"sha": "a1ac09633b759f1c0c31d37ab58e6f56036576e0", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,8 +4,6 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n-See also [`box_syntax`](box-syntax.md)\n-\n ------------------------\n \n Box patterns let you match on `Box<T>`s:"}, {"sha": "9569974d22ca28124cd888e78c56a9a81d15aedf", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,22 +0,0 @@\n-# `box_syntax`\n-\n-The tracking issue for this feature is: [#49733]\n-\n-[#49733]: https://github.com/rust-lang/rust/issues/49733\n-\n-See also [`box_patterns`](box-patterns.md)\n-\n-------------------------\n-\n-Currently the only stable way to create a `Box` is via the `Box::new` method.\n-Also it is not possible in stable Rust to destructure a `Box` in a match\n-pattern. The unstable `box` keyword can be used to create a `Box`. An example\n-usage would be:\n-\n-```rust\n-#![feature(box_syntax)]\n-\n-fn main() {\n-    let b = box 5;\n-}\n-```"}, {"sha": "9090b134dc688aa8b954e1aa16c50008648c67bf", "filename": "src/doc/unstable-book/src/the-unstable-book.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -5,16 +5,31 @@ each one organized by a \"feature flag.\" That is, when using an unstable\n feature of Rust, you must use a flag, like this:\n \n ```rust\n-#![feature(box_syntax)]\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n \n fn main() {\n-    let five = box 5;\n+    let mut generator = || {\n+        yield 1;\n+        return \"foo\"\n+    };\n+\n+    match Pin::new(&mut generator).resume(()) {\n+        GeneratorState::Yielded(1) => {}\n+        _ => panic!(\"unexpected value from resume\"),\n+    }\n+    match Pin::new(&mut generator).resume(()) {\n+        GeneratorState::Complete(\"foo\") => {}\n+        _ => panic!(\"unexpected value from resume\"),\n+    }\n }\n ```\n \n-The `box_syntax` feature [has a chapter][box] describing how to use it.\n+The `generators` feature [has a chapter][generators] describing how to use it.\n \n-[box]: language-features/box-syntax.md\n+[generators]: language-features/generators.md\n \n Because this documentation relates to unstable features, we make no guarantees\n that what is contained here is accurate or up to date. It's developed on a"}, {"sha": "8aa47b62ebff48c4e4aebedb4c2955b2b00eb5e1", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -596,8 +596,7 @@ fn ident_difference_expr_with_base_location(\n         | (MethodCall(_), MethodCall(_))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n-        | (Array(_), Array(_))\n-        | (Box(_), Box(_)) => {\n+        | (Array(_), Array(_)) => {\n             // keep going\n         },\n         _ => {"}, {"sha": "809d654603a6989473a89b1965c787277e746a2a", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -143,7 +143,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Paren(l), _) => eq_expr(l, r),\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n-        (Box(l), Box(r)) | (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n+        (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n         (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),"}, {"sha": "85bf28b708b7c168f7514769def023015621ef01", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -188,7 +188,6 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             _ if expr.span.ctxt() != ctxt => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::AddrOf(..)\n-            | ast::ExprKind::Box(..)\n             | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)"}, {"sha": "79b6d33fc77ca934c351bd6411e97f129a2ceb9b", "filename": "src/tools/clippy/tests/ui/boxed_local.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,3 @@\n-#![feature(box_syntax)]\n #![feature(lint_reasons)]\n #![allow(\n     clippy::borrowed_box,\n@@ -34,7 +33,7 @@ fn ok_box_trait(boxed_trait: &Box<dyn Z>) {\n }\n \n fn warn_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n     x.foo();\n }\n \n@@ -43,41 +42,41 @@ fn warn_arg(x: Box<A>) {\n }\n \n fn nowarn_closure_arg() {\n-    let x = Some(box A);\n+    let x = Some(Box::new(A));\n     x.map_or((), |x| take_ref(&x));\n }\n \n fn warn_rename_call() {\n-    let x = box A;\n+    let x = Box::new(A);\n \n     let y = x;\n     y.foo(); // via autoderef\n }\n \n fn warn_notuse() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n }\n \n fn warn_pass() {\n-    let bz = box A;\n+    let bz = Box::new(A);\n     take_ref(&bz); // via deref coercion\n }\n \n fn nowarn_return() -> Box<A> {\n-    box A // moved out, \"escapes\"\n+    Box::new(A) // moved out, \"escapes\"\n }\n \n fn nowarn_move() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     drop(bx) // moved in, \"escapes\"\n }\n fn nowarn_call() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     bx.clone(); // method only available to Box, not via autoderef\n }\n \n fn nowarn_pass() {\n-    let bx = box A;\n+    let bx = Box::new(A);\n     take_box(&bx); // fn needs &Box\n }\n \n@@ -86,30 +85,20 @@ fn take_ref(x: &A) {}\n \n fn nowarn_ref_take() {\n     // false positive, should actually warn\n-    let x = box A;\n+    let x = Box::new(A);\n     let y = &x;\n     take_box(y);\n }\n \n fn nowarn_match() {\n-    let x = box A; // moved into a match\n+    let x = Box::new(A); // moved into a match\n     match x {\n         y => drop(y),\n     }\n }\n \n fn warn_match() {\n-    let x = box A;\n-    match &x {\n-        // not moved\n-        y => (),\n-    }\n-}\n-\n-fn nowarn_large_array() {\n-    // should not warn, is large array\n-    // and should not be on stack\n-    let x = box [1; 10000];\n+    let x = Box::new(A);\n     match &x {\n         // not moved\n         y => (),"}, {"sha": "10d78fbc0abb5d2f1c72e86d60c4f464756f22da", "filename": "src/tools/clippy/tests/ui/boxed_local.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fboxed_local.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,25 +1,25 @@\n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:41:13\n+  --> $DIR/boxed_local.rs:40:13\n    |\n LL | fn warn_arg(x: Box<A>) {\n    |             ^\n    |\n    = note: `-D clippy::boxed-local` implied by `-D warnings`\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:132:12\n+  --> $DIR/boxed_local.rs:121:12\n    |\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:196:44\n+  --> $DIR/boxed_local.rs:185:44\n    |\n LL |         fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n    |                                            ^\n \n error: local variable doesn't need to be boxed here\n-  --> $DIR/boxed_local.rs:203:16\n+  --> $DIR/boxed_local.rs:192:16\n    |\n LL |         fn foo(x: Box<u32>) {}\n    |                ^"}, {"sha": "ec8a5aa28c593c57f720570e7b744d0a567cba0f", "filename": "src/tools/clippy/tests/ui/no_effect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,4 +1,4 @@\n-#![feature(box_syntax, fn_traits, unboxed_closures)]\n+#![feature(fn_traits, unboxed_closures)]\n #![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code, path_statements)]\n #![allow(clippy::deref_addrof, clippy::redundant_field_names, clippy::uninlined_format_args)]\n@@ -102,7 +102,6 @@ fn main() {\n     *&42;\n     &6;\n     (5, 6, 7);\n-    box 42;\n     ..;\n     5..;\n     ..5;"}, {"sha": "92f6dbfbdba166139c956bc33165a45a7988cec7", "filename": "src/tools/clippy/tests/ui/no_effect.stderr", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -81,106 +81,100 @@ LL |     (5, 6, 7);\n error: statement with no effect\n   --> $DIR/no_effect.rs:105:5\n    |\n-LL |     box 42;\n-   |     ^^^^^^^\n-\n-error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n-   |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:119:5\n+  --> $DIR/no_effect.rs:118:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:121:5\n+  --> $DIR/no_effect.rs:120:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:121:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:122:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "65d9c910b828dd5371be15fe7b02f2cf090a73a3", "filename": "src/tools/clippy/tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.fixed?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n #![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n #![warn(clippy::unnecessary_operation)]\n \n@@ -59,7 +58,6 @@ fn main() {\n     5;6;get_number();\n     get_number();\n     get_number();\n-    get_number();\n     5;get_number();\n     42;get_number();\n     assert!([42, 55].len() > get_usize());"}, {"sha": "4e2acd59f04aad039d8d7d8ead9f4f482d1693d1", "filename": "src/tools/clippy/tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(box_syntax)]\n #![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n #![warn(clippy::unnecessary_operation)]\n \n@@ -57,7 +56,6 @@ fn main() {\n     *&get_number();\n     &get_number();\n     (5, 6, get_number());\n-    box get_number();\n     get_number()..;\n     ..get_number();\n     5..get_number();"}, {"sha": "44cf2e01ff7392542886f931cb5df673bf1f6395", "filename": "src/tools/clippy/tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_operation.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,128 +1,122 @@\n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:50:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:51:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:52:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:53:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:54:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:55:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:60:5\n-   |\n-LL |     box get_number();\n-   |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n-\n-error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:64:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:65:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     [42, 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:67:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:68:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     [42; 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:69:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:72:5\n+  --> $DIR/unnecessary_operation.rs:70:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),\n LL | |     };\n    | |______^ help: statement can be reduced to: `String::from(\"blah\");`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "89d8d22a9dd0bee344f74b45d5805de9b8effb36", "filename": "src/tools/miri/tests/fail/function_pointers/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,10 +1,8 @@\n // Validation makes this fail in the wrong place\n //@compile-flags: -Zmiri-disable-validation\n \n-#![feature(box_syntax)]\n-\n fn main() {\n-    let x = box 42;\n+    let x = Box::new(42);\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n         f() //~ ERROR: function pointer but it does not point to a function"}, {"sha": "0413ed1fd0c60ece2702e77dc3c5e0ae7f9b1ae5", "filename": "src/tools/miri/tests/pass/drop_empty_slice.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_empty_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_empty_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_empty_slice.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n fn main() {\n     // With the nested Vec, this is calling Offset(Unique::empty(), 0) on drop.\n     let args: Vec<Vec<i32>> = Vec::new();\n-    let _val = box args;\n+    let _val = Box::new(args);\n }"}, {"sha": "59763bbbfdd3638148920d89ce63f8e9d570efb3", "filename": "src/tools/miri/tests/pass/dst-struct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdst-struct.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n struct Fat<T: ?Sized> {\n     f1: isize,\n     f2: &'static str,\n@@ -109,14 +107,14 @@ pub fn main() {\n     assert_eq!((*f2)[1], 2);\n \n     // Nested Box.\n-    let f1: Box<Fat<[isize; 3]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    let f1: Box<Fat<[isize; 3]>> = Box::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f1);\n     let f2: Box<Fat<[isize]>> = f1;\n     foo(&*f2);\n \n     let f3: Box<Fat<[isize]>> =\n         Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);\n-    let f4: Box<Fat<[isize]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    let f4: Box<Fat<[isize]>> = Box::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f4);\n }"}, {"sha": "44e3a60cfe165ce5ba661b2cb2854b6d0fd29dea", "filename": "src/tools/miri/tests/pass/heap.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fheap.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,13 +1,7 @@\n-#![feature(box_syntax)]\n-\n fn make_box() -> Box<(i16, i16)> {\n     Box::new((1, 2))\n }\n \n-fn make_box_syntax() -> Box<(i16, i16)> {\n-    box (1, 2)\n-}\n-\n fn allocate_reallocate() {\n     let mut s = String::new();\n \n@@ -29,6 +23,5 @@ fn allocate_reallocate() {\n \n fn main() {\n     assert_eq!(*make_box(), (1, 2));\n-    assert_eq!(*make_box_syntax(), (1, 2));\n     allocate_reallocate();\n }"}, {"sha": "860d72bb586ff4acb85f67f94d1cb7f005181f03", "filename": "src/tools/miri/tests/pass/issues/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-3794.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,5 +1,3 @@\n-#![feature(box_syntax)]\n-\n trait T {\n     fn print(&self);\n }\n@@ -25,7 +23,7 @@ fn print_s(s: &S) {\n }\n \n pub fn main() {\n-    let s: Box<S> = box S { s: 5 };\n+    let s: Box<S> = Box::new(S { s: 5 });\n     print_s(&*s);\n     let t: Box<dyn T> = s as Box<dyn T>;\n     print_t(&*t);"}, {"sha": "de21d67eb4f62cf1756491d1c7d0861cd19bb6da", "filename": "src/tools/miri/tests/pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-2-unique.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,11 +1,9 @@\n-#![feature(box_syntax)]\n-\n fn test(foo: Box<Vec<isize>>) {\n     assert_eq!((*foo)[0], 10);\n }\n \n pub fn main() {\n-    let x = box vec![10];\n+    let x = Box::new(vec![10]);\n     // Test forgetting a local by move-in\n     test(x);\n }"}, {"sha": "6025481c32e24103f190e4de830e68b6a66257ee", "filename": "src/tools/miri/tests/pass/move-arg-3-unique.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmove-arg-3-unique.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,5 @@\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x = box 10;\n+    let x = Box::new(10);\n     let y = x;\n     assert_eq!(*y, 10);\n }"}, {"sha": "3824a0de907cfee22d9ddeb0712a8e79f78487a1", "filename": "src/tools/miri/tests/pass/mpsc.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmpsc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmpsc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmpsc.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,15 +1,13 @@\n-#![feature(box_syntax)]\n-\n use std::sync::mpsc::channel;\n \n pub fn main() {\n     let (tx, rx) = channel::<Box<_>>();\n-    tx.send(box 100).unwrap();\n+    tx.send(Box::new(100)).unwrap();\n     let v = rx.recv().unwrap();\n-    assert_eq!(v, box 100);\n+    assert_eq!(v, Box::new(100));\n \n-    tx.send(box 101).unwrap();\n-    tx.send(box 102).unwrap();\n-    assert_eq!(rx.recv().unwrap(), box 101);\n-    assert_eq!(rx.recv().unwrap(), box 102);\n+    tx.send(Box::new(101)).unwrap();\n+    tx.send(Box::new(102)).unwrap();\n+    assert_eq!(rx.recv().unwrap(), Box::new(101));\n+    assert_eq!(rx.recv().unwrap(), Box::new(102));\n }"}, {"sha": "445dd43febb13d6e7dc41217e4d771760510c2b2", "filename": "src/tools/miri/tests/pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fregions-lifetime-nonfree-late-bound.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -12,16 +12,14 @@\n // doing region-folding, when really all clients of the region-folding\n // case only want to see *free* lifetime variables, not bound ones.\n \n-#![feature(box_syntax)]\n-\n pub fn main() {\n     fn explicit() {\n         fn test<F>(_x: Option<Box<F>>)\n         where\n             F: FnMut(Box<dyn for<'a> FnMut(&'a isize)>),\n         {\n         }\n-        test(Some(box |_f: Box<dyn for<'a> FnMut(&'a isize)>| {}));\n+        test(Some(Box::new(|_f: Box<dyn for<'a> FnMut(&'a isize)>| {})));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n@@ -32,7 +30,7 @@ pub fn main() {\n             F: FnMut(Box<dyn FnMut(&isize)>),\n         {\n         }\n-        test(Some(box |_f: Box<dyn FnMut(&isize)>| {}));\n+        test(Some(Box::new(|_f: Box<dyn FnMut(&isize)>| {})));\n     }\n \n     explicit();"}, {"sha": "c97144b61b6d86ddd8f7f970c48214cf10d0bca1", "filename": "src/tools/rust-analyzer/crates/ide-completion/src/tests/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -857,9 +857,9 @@ mod lint {\n     #[test]\n     fn lint_feature() {\n         check_edit(\n-            \"box_syntax\",\n+            \"box_patterns\",\n             r#\"#[feature(box_$0)] struct Test;\"#,\n-            r#\"#[feature(box_syntax)] struct Test;\"#,\n+            r#\"#[feature(box_patterns)] struct Test;\"#,\n         )\n     }\n "}, {"sha": "c95e9a97b43d33419f4eba82b7c503f8233d2b81", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -195,7 +195,6 @@ fn rewrite_closure_expr(\n             | ast::ExprKind::Struct(..) => true,\n \n             ast::ExprKind::AddrOf(_, _, ref expr)\n-            | ast::ExprKind::Box(ref expr)\n             | ast::ExprKind::Try(ref expr)\n             | ast::ExprKind::Unary(_, ref expr)\n             | ast::ExprKind::Cast(ref expr, _) => allow_multi_line(expr),\n@@ -441,7 +440,6 @@ fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n         ast::ExprKind::If(..) | ast::ExprKind::While(..) | ast::ExprKind::ForLoop(..) => true,\n         ast::ExprKind::Loop(..) if version == Version::Two => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced_inner(expr, version),"}, {"sha": "7273402ec760f5916a0a86c0cc85b286d768c365", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -236,7 +236,6 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Yeet(Some(ref expr)) => {\n             rewrite_unary_prefix(context, \"do yeet \", &**expr, shape)\n         }\n-        ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n         ast::ExprKind::AddrOf(borrow_kind, mutability, ref expr) => {\n             rewrite_expr_addrof(context, borrow_kind, mutability, expr, shape)\n         }\n@@ -1299,7 +1298,6 @@ pub(crate) fn is_simple_expr(expr: &ast::Expr) -> bool {\n         ast::ExprKind::Lit(..) => true,\n         ast::ExprKind::Path(ref qself, ref path) => qself.is_none() && path.segments.len() <= 1,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Field(ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n@@ -1361,7 +1359,6 @@ pub(crate) fn can_be_overflowed_expr(\n \n         // Handle unary-like expressions\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n@@ -1373,7 +1370,6 @@ pub(crate) fn is_nested_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::Call(..) | ast::ExprKind::MacCall(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => is_nested_call(expr),\n@@ -2133,7 +2129,6 @@ pub(crate) fn is_method_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::MethodCall(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr) => is_method_call(expr),"}, {"sha": "aac5e59b8603ae68325a7fbacfcae2c8f8623159", "filename": "src/tools/rustfmt/src/matches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -592,7 +592,6 @@ fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n         | ast::ExprKind::Struct(..)\n         | ast::ExprKind::Tup(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Index(ref expr, _)"}, {"sha": "a26375ee64384ff906e635846489fa8556b33162", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -492,7 +492,6 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Assign(..)\n         | ast::ExprKind::AssignOp(..)\n         | ast::ExprKind::Await(..)\n-        | ast::ExprKind::Box(..)\n         | ast::ExprKind::Break(..)\n         | ast::ExprKind::Cast(..)\n         | ast::ExprKind::Continue(..)"}, {"sha": "879c551ea490959ae64ab62d4845efc71893a36d", "filename": "src/tools/rustfmt/tests/source/expr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,7 +3,6 @@\n // Test expressions\n \n fn foo() -> bool {\n-    let boxed: Box<i32> = box   5;\n     let referenced = &5 ;\n \n     let very_long_variable_name = ( a +  first +   simple + test   );\n@@ -132,12 +131,6 @@ fn qux() {\n     }\n }\n \n-fn issue227() {\n-    {\n-        let handler = box DocumentProgressHandler::new(addr, DocumentProgressTask::DOMContentLoaded);\n-    }\n-}\n-\n fn issue184(source: &str) {\n     for c in source.chars() {\n         if index < 'a' {\n@@ -413,10 +406,6 @@ fn issue2704() {\n                                 .concat(&requires1)\n                                 .concat(&requires2)\n                                 .distinct_total());\n-    let requires = requires.set(box requires0\n-                                .concat(&requires1)\n-                                .concat(&requires2)\n-                                .distinct_total());\n     let requires = requires.set(requires0\n                                 .concat(&requires1)\n                                 .concat(&requires2)"}, {"sha": "0ab820249374613277d33897a5de785c06a6bcd0", "filename": "src/tools/rustfmt/tests/target/configs/combine_control_expr/false.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -108,12 +108,6 @@ fn main() {\n         bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     ));\n \n-    // Box\n-    foo(box Bar {\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n-    });\n-\n     // Unary\n     foo(!bar(\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,"}, {"sha": "aa41e021fb7abf2660e6fa9202e51047c19049dd", "filename": "src/tools/rustfmt/tests/target/configs/combine_control_expr/true.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -96,12 +96,6 @@ fn main() {\n         bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n     ));\n \n-    // Box\n-    foo(box Bar {\n-        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n-    });\n-\n     // Unary\n     foo(!bar(\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,"}, {"sha": "187a1dc976a464bf92e697720b32bbb68d1e0056", "filename": "src/tools/rustfmt/tests/target/expr.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fexpr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,7 +3,6 @@\n // Test expressions\n \n fn foo() -> bool {\n-    let boxed: Box<i32> = box 5;\n     let referenced = &5;\n \n     let very_long_variable_name = (a + first + simple + test);\n@@ -179,13 +178,6 @@ fn qux() {\n     }\n }\n \n-fn issue227() {\n-    {\n-        let handler =\n-            box DocumentProgressHandler::new(addr, DocumentProgressTask::DOMContentLoaded);\n-    }\n-}\n-\n fn issue184(source: &str) {\n     for c in source.chars() {\n         if index < 'a' {\n@@ -454,12 +446,6 @@ fn issue2704() {\n             .concat(&requires2)\n             .distinct_total(),\n     );\n-    let requires = requires.set(\n-        box requires0\n-            .concat(&requires1)\n-            .concat(&requires2)\n-            .distinct_total(),\n-    );\n     let requires = requires.set(\n         requires0\n             .concat(&requires1)"}, {"sha": "1bbf8f37f292f496c4dec44618fed1f6c335c559", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,12 +3,12 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:+0:11: +0:11\n     let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+2:5: +2:12\n-    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:10: +2:11\n+    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:+3:5: +3:12\n+    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:+3:10: +3:11\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:+1:9: +1:10\n     }\n@@ -17,64 +17,64 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:+1:9: +1:10\n-        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n-        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:+1:13: +1:25\n+        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n+        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:+2:5: +2:23\n                                          // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:7:13: 7:25\n+                                         // + span: $DIR/box_expr.rs:8:5: 8:23\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+1:17: +1:25\n+        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:+2:14: +2:22\n                                          // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n+                                         // + span: $DIR/box_expr.rs:8:14: 8:20\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+1:13: +1:25\n-        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n+        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:+2:5: +2:23\n+        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n-        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+2:5: +2:12\n-        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+2:10: +2:11\n-        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+2:10: +2:11\n-        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+2:5: +2:12\n+        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n+        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n+        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:+3:10: +3:11\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:+3:5: +3:12\n                                          // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:8:5: 8:9\n+                                         // + span: $DIR/box_expr.rs:9:5: 9:9\n                                          // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+2:11: +2:12\n-        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+2:12: +2:13\n-        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +3:2\n-        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n+        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:+3:12: +3:13\n+        _0 = const ();                   // scope 0 at $DIR/box_expr.rs:+0:11: +4:2\n+        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n     }\n \n     bb5: {\n-        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/box_expr.rs:+3:2: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/box_expr.rs:+4:2: +4:2\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:+2:11: +2:12\n+        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+3:1: +3:2\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+1:24: +1:25\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n     }\n \n     bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +3:2\n+        resume;                          // scope 0 at $DIR/box_expr.rs:+0:1: +4:2\n     }\n }"}, {"sha": "ad3670b5dd403a808ff3525f6fe053feb7aae73b", "filename": "tests/mir-opt/box_expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,17 +1,20 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(box_syntax)]\n+#![feature(rustc_attrs, stmt_expr_attributes)]\n \n // EMIT_MIR box_expr.main.ElaborateDrops.before.mir\n fn main() {\n-    let x = box S::new();\n+    let x = #[rustc_box]\n+    Box::new(S::new());\n     drop(x);\n }\n \n struct S;\n \n impl S {\n-    fn new() -> Self { S }\n+    fn new() -> Self {\n+        S\n+    }\n }\n \n impl Drop for S {"}, {"sha": "ed72726c5ae0435fb05ed6872381d7f062b3948c", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,21 +3,21 @@\n fn move_out_by_subslice() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +0:27\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n+    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n+        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n         scope 4 {\n-            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n         }\n     }\n     scope 2 {\n@@ -27,86 +27,86 @@ fn move_out_by_subslice() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n+        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n                                          // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:11:14: 11:19\n+                                         // + span: $DIR/uniform_array_move_out.rs:18:9: 18:20\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n-        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+3:18: +3:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n-        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n                                          // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:11:21: 11:26\n+                                         // + span: $DIR/uniform_array_move_out.rs:20:9: 20:20\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n-        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+5:18: +5:19\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n     }\n \n     bb4: {\n-        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n-        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +1:27\n-        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +6:6\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb5: {\n-        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n-        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:21: +2:22\n-        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n-        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n-        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +3:2\n-        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:21: +7:22\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n+        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+7:10: +7:12\n+        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +8:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb7: {\n-        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n-        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+3:2: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+8:2: +8:2\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +3:2\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +8:2\n     }\n }"}, {"sha": "eca874130f6931daa6266413382b0e2dac2b6c3c", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,21 +3,21 @@\n fn move_out_from_end() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +0:24\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n+    let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        let _12: std::boxed::Box<i32>;   // in scope 1 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n+        let _12: std::boxed::Box<i32>;   // in scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n         scope 4 {\n-            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n         }\n     }\n     scope 2 {\n@@ -27,86 +27,86 @@ fn move_out_from_end() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n+        StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n                                          // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:5:14: 5:19\n+                                         // + span: $DIR/uniform_array_move_out.rs:7:9: 7:20\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n-        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+1:14: +1:19\n-        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:+3:18: +3:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:+3:9: +3:20\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n     }\n \n     bb2: {\n-        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:18: +1:19\n-        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:19: +3:20\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n                                          // mir::Constant\n-                                         // + span: $DIR/uniform_array_move_out.rs:5:21: 5:26\n+                                         // + span: $DIR/uniform_array_move_out.rs:9:9: 9:20\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n-        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n-        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:+5:18: +5:19\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:+5:9: +5:20\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n     }\n \n     bb4: {\n-        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+1:25: +1:26\n-        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +1:27\n-        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:+5:19: +5:20\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:+1:13: +6:6\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb5: {\n-        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n-        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:20: +2:21\n-        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n-        _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:+2:14: +2:16\n-        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +3:2\n-        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        PlaceMention(_1);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:20: +7:21\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n+        _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:+7:14: +7:16\n+        _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:24: +8:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb7: {\n-        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n-        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n-        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+3:2: +3:2\n+        StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        return;                          // scope 0 at $DIR/uniform_array_move_out.rs:+8:2: +8:2\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +3:2\n+        resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:+0:1: +8:2\n     }\n }"}, {"sha": "4ba107c870426dd36b3fa1608aeccbf371d39753", "filename": "tests/mir-opt/building/uniform_array_move_out.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,14 +1,24 @@\n-#![feature(box_syntax)]\n+#![feature(stmt_expr_attributes, rustc_attrs)]\n \n // EMIT_MIR uniform_array_move_out.move_out_from_end.built.after.mir\n fn move_out_from_end() {\n-    let a = [box 1, box 2];\n+    let a = [\n+        #[rustc_box]\n+        Box::new(1),\n+        #[rustc_box]\n+        Box::new(2),\n+    ];\n     let [.., _y] = a;\n }\n \n // EMIT_MIR uniform_array_move_out.move_out_by_subslice.built.after.mir\n fn move_out_by_subslice() {\n-    let a = [box 1, box 2];\n+    let a = [\n+        #[rustc_box]\n+        Box::new(1),\n+        #[rustc_box]\n+        Box::new(2),\n+    ];\n     let [_y @ ..] = a;\n }\n "}, {"sha": "b0e86e7537f13ddd9f274d038beeaf9d7cb07c8b", "filename": "tests/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,14 +4,14 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n+      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+      let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +2:18\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n       }\n@@ -20,41 +20,41 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:+1:9: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n--         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n--         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-+         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-+         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n-          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +1:22\n+          StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n+          _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:+1:14: +2:18\n                                            // mir::Constant\n-                                           // + span: $DIR/boxes.rs:13:14: 13:22\n+                                           // + span: $DIR/boxes.rs:13:14: 14:18\n                                            // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n-          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+1:19: +1:21\n-          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+1:21: +1:22\n-          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +1:22\n-          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +1:26\n-          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+1:25: +1:26\n-          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          _8 = (((_7.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n+          (*_8) = const 42_i32;            // scope 0 at $DIR/boxes.rs:+2:14: +2:16\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:+1:14: +2:18\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:+2:17: +2:18\n+          _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          _2 = (*_9);                      // scope 0 at $DIR/boxes.rs:+1:13: +2:18\n+          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:+1:13: +3:12\n+          StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:+3:11: +3:12\n+          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n       }\n   \n       bb2: {\n-          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+1:26: +1:27\n-          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +2:2\n-          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/boxes.rs:+2:2: +2:2\n+          StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:+3:12: +3:13\n+          _0 = const ();                   // scope 0 at $DIR/boxes.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/boxes.rs:+4:2: +4:2\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +2:2\n+          resume;                          // scope 0 at $DIR/boxes.rs:+0:1: +4:2\n       }\n   }\n   "}, {"sha": "66e8c24d4324d3f0dd6a290b10db7c78e73b61b3", "filename": "tests/mir-opt/const_prop/boxes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboxes.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,11 +4,13 @@\n // ignore-wasm32\n // ignore-wasm64\n \n-#![feature(box_syntax)]\n+#![feature(rustc_attrs, stmt_expr_attributes)]\n \n-// Note: this test verifies that we, in fact, do not const prop `box`\n+// Note: this test verifies that we, in fact, do not const prop `#[rustc_box]`\n \n // EMIT_MIR boxes.main.ConstProp.diff\n fn main() {\n-    let x = *(box 42) + 0;\n+    let x = *(#[rustc_box]\n+    Box::new(42))\n+        + 0;\n }"}, {"sha": "ec9cbb25322cb9f3b9db4ea3db49d29de55cab0c", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 17, "deletions": 33, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -3,58 +3,42 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/derefer_inline_test.rs:+0:11: +0:11\n-      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-      let mut _2: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-      let mut _3: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-      let mut _5: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-      scope 1 {\n-      }\n+      let _1: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n+      let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          _2 = SizeOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          _3 = AlignOf(std::boxed::Box<u32>); // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n+          StorageLive(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n+          _2 = f() -> bb1;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:14: +1:17\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:11:5: 11:12\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+                                           // + span: $DIR/derefer_inline_test.rs:10:14: 10:15\n+                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:+1:9: +1:12\n+          _1 = Box::<Box<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:11:9: 11:10\n-                                           // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n+                                           // + span: $DIR/derefer_inline_test.rs:10:5: 10:13\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: fn(Box<u32>) -> Box<Box<u32>> {Box::<Box<u32>>::new}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          _1 = move _5;                    // scope 0 at $DIR/derefer_inline_test.rs:+1:5: +1:12\n-          drop(_5) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n+          StorageDead(_2);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_1) -> bb3;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n       }\n   \n       bb3: {\n-          StorageDead(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n-      }\n-  \n-      bb4: {\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_inline_test.rs:+1:18: +1:19\n           _0 = const ();                   // scope 0 at $DIR/derefer_inline_test.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/derefer_inline_test.rs:+2:2: +2:2\n       }\n   \n-      bb5 (cleanup): {\n-          drop(_1) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:12: +1:13\n-      }\n-  \n-      bb6 (cleanup): {\n-          drop(_5) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:11: +1:12\n+      bb4 (cleanup): {\n+          drop(_2) -> bb5;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n       }\n   \n-      bb7 (cleanup): {\n+      bb5 (cleanup): {\n           resume;                          // scope 0 at $DIR/derefer_inline_test.rs:+0:1: +2:2\n       }\n   }"}, {"sha": "38311d4d01fb2c670e194382ddfbc7a29392e732", "filename": "tests/mir-opt/derefer_inline_test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fderefer_inline_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fderefer_inline_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -2,11 +2,10 @@\n // EMIT_MIR derefer_inline_test.main.Derefer.diff\n // ignore-wasm32 compiled with panic=abort by default\n \n-#![feature(box_syntax)]\n #[inline]\n fn f() -> Box<u32> {\n-    box 0\n+    Box::new(0)\n }\n fn main() {\n-    box f();\n+    Box::new(f());\n }"}, {"sha": "bc1c913c00e3196e420fae2afe3392c8d3d29cfa", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,81 +4,78 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_into_box_place.rs:+0:11: +0:11\n       let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n-      let mut _2: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-      let mut _3: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-      let mut _6: ();                      // in scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n-      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-+     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+     let mut _9: std::vec::Vec<u32>;      // in scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n+      let mut _2: std::vec::Vec<u32>;      // in scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n       }\n-      scope 2 {\n-      }\n-+     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:8:33: 8:43\n-+         let mut _10: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:7:38: 7:48\n++         let mut _3: alloc::raw_vec::RawVec<u32>; // in scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++     }\n++     scope 3 (inlined Box::<Vec<u32>>::new) { // at $DIR/inline_into_box_place.rs:7:29: 7:49\n++         debug x => _2;                   // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _4: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _5: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _6: *mut u8;             // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         let mut _7: *const std::vec::Vec<u32>; // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         scope 4 {\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n-          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n+          StorageLive(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n+-         _2 = Vec::<u32>::new() -> bb1;   // scope 0 at $DIR/inline_into_box_place.rs:+1:38: +1:48\n++         StorageLive(_3);                 // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _3 = const _;                    // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_into_box_place.rs:8:29: 8:43\n-                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n+-                                          // + span: $DIR/inline_into_box_place.rs:7:38: 7:46\n+-                                          // + user_ty: UserType(2)\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++                                          // + user_ty: UserType(0)\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n++         _2 = Vec::<u32> { buf: move _3, len: const 0_usize }; // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_3);                 // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _4 = SizeOf(std::vec::Vec<u32>); // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _5 = AlignOf(std::vec::Vec<u32>); // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb3, unwind: bb4]; // scope 4 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-          _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n--         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         StorageLive(_8);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         _8 = &mut (*_7);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _10 = const _;                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/inline_into_box_place.rs:8:33: 8:41\n+-         _1 = Box::<Vec<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:49\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline_into_box_place.rs:7:29: 7:37\n -                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n--     }\n-- \n+-                                          // + literal: Const { ty: fn(Vec<u32>) -> Box<Vec<u32>> {Box::<Vec<u32>>::new}, val: Value(<ZST>) }\n++         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n++         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n+      }\n+  \n -     bb2: {\n-+                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         _9 = Vec::<u32> { buf: move _10, len: const 0_usize }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         (*_8) = move _9;                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-+         StorageDead(_8);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43\n-          _1 = move _5;                    // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43\n-          StorageDead(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n-          _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:48: +1:49\n+-         _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n -         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n-+         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n++     bb2 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n       }\n   \n--     bb3: {\n-+     bb2: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n+      bb3: {\n+-         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n+-         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2\n++         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         (*_7) = move _2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         StorageDead(_2);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:48: +1:49\n++         _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2\n++         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2\n       }\n   \n--     bb4 (cleanup): {\n-+     bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n--     }\n-- \n--     bb5 (cleanup): {\n--         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43\n--                                          // mir::Constant\n--                                          // + span: $DIR/inline_into_box_place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n+      bb4 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n++         drop(_2) -> bb2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n       }\n   }\n   "}, {"sha": "b8b73f0c44c2bdce42a8d751a404aadc1df3668e", "filename": "tests/mir-opt/inline/inline_into_box_place.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -2,8 +2,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=4\n \n-#![feature(box_syntax)]\n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {\n-    let _x: Box<Vec<u32>> = box Vec::new();\n+    let _x: Box<Vec<u32>> = Box::new(Vec::new());\n }"}, {"sha": "af1bfea3f30b484854ca0f8011028a3c58774d85", "filename": "tests/mir-opt/issue_62289.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fissue_62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fissue_62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_62289.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -2,11 +2,14 @@\n // initializing it\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(box_syntax)]\n+#![feature(rustc_attrs)]\n \n // EMIT_MIR issue_62289.test.ElaborateDrops.before.mir\n fn test() -> Option<Box<u32>> {\n-    Some(box (None?))\n+    Some(\n+        #[rustc_box]\n+        Box::new(None?),\n+    )\n }\n \n fn main() {"}, {"sha": "22b34975d66acaba5757112380055548ad994fa1", "filename": "tests/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -2,121 +2,121 @@\n \n fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue_62289.rs:+0:14: +0:30\n-    let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-    let mut _2: usize;                   // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-    let mut _3: usize;                   // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n-    let mut _8: isize;                   // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-    let mut _10: !;                      // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-    let _12: u32;                        // in scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+    let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+    let mut _2: usize;                   // in scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue_62289.rs:+3:18: +3:22\n+    let mut _8: isize;                   // in scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+    let mut _10: !;                      // in scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+    let _12: u32;                        // in scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n     scope 1 {\n     }\n     scope 2 {\n-        debug residual => _9;            // in scope 2 at $DIR/issue_62289.rs:+1:19: +1:20\n+        debug residual => _9;            // in scope 2 at $DIR/issue_62289.rs:+3:22: +3:23\n         scope 3 {\n         }\n     }\n     scope 4 {\n-        debug val => _12;                // in scope 4 at $DIR/issue_62289.rs:+1:15: +1:20\n+        debug val => _12;                // in scope 4 at $DIR/issue_62289.rs:+3:18: +3:23\n         scope 5 {\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-        _2 = SizeOf(u32);                // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n-        _3 = AlignOf(u32);               // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n-        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue_62289.rs:+1:10: +1:21\n+        StorageLive(_1);                 // scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+        _2 = SizeOf(u32);                // scope 1 at $DIR/issue_62289.rs:+3:9: +3:24\n+        _3 = AlignOf(u32);               // scope 1 at $DIR/issue_62289.rs:+3:9: +3:24\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue_62289.rs:+3:9: +3:24\n                                          // mir::Constant\n-                                         // + span: $DIR/issue_62289.rs:9:10: 9:21\n+                                         // + span: $DIR/issue_62289.rs:11:9: 11:24\n                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-        StorageLive(_6);                 // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-        StorageLive(_7);                 // scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n-        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue_62289.rs:+1:15: +1:19\n-        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        StorageLive(_5);                 // scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+        StorageLive(_6);                 // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n+        StorageLive(_7);                 // scope 0 at $DIR/issue_62289.rs:+3:18: +3:22\n+        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue_62289.rs:+3:18: +3:22\n+        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n                                          // mir::Constant\n-                                         // + span: $DIR/issue_62289.rs:9:15: 9:20\n+                                         // + span: $DIR/issue_62289.rs:11:18: 11:23\n                                          // + literal: Const { ty: fn(Option<u32>) -> ControlFlow<<Option<u32> as Try>::Residual, <Option<u32> as Try>::Output> {<Option<u32> as Try>::branch}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_7);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-        _8 = discriminant(_6);           // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        StorageDead(_7);                 // scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+        _8 = discriminant(_6);           // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n+        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n     }\n \n     bb3: {\n-        StorageLive(_12);                // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n-        (*_5) = _12;                     // scope 5 at $DIR/issue_62289.rs:+1:15: +1:20\n-        StorageDead(_12);                // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-        _1 = move _5;                    // scope 0 at $DIR/issue_62289.rs:+1:10: +1:21\n-        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n+        StorageLive(_12);                // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n+        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n+        (*_5) = _12;                     // scope 5 at $DIR/issue_62289.rs:+3:18: +3:23\n+        StorageDead(_12);                // scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+        _1 = move _5;                    // scope 0 at $DIR/issue_62289.rs:+3:9: +3:24\n+        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/issue_62289.rs:+1:15: +1:20\n+        unreachable;                     // scope 0 at $DIR/issue_62289.rs:+3:18: +3:23\n     }\n \n     bb5: {\n-        StorageLive(_9);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-        StorageLive(_11);                // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n-        _11 = _9;                        // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n-        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue_62289.rs:+1:15: +1:20\n+        StorageLive(_9);                 // scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+        StorageLive(_11);                // scope 3 at $DIR/issue_62289.rs:+3:22: +3:23\n+        _11 = _9;                        // scope 3 at $DIR/issue_62289.rs:+3:22: +3:23\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue_62289.rs:+3:18: +3:23\n                                          // mir::Constant\n-                                         // + span: $DIR/issue_62289.rs:9:19: 9:20\n+                                         // + span: $DIR/issue_62289.rs:11:22: 11:23\n                                          // + literal: Const { ty: fn(Option<Infallible>) -> Option<Box<u32>> {<Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }\n     }\n \n     bb6: {\n-        StorageDead(_11);                // scope 3 at $DIR/issue_62289.rs:+1:19: +1:20\n-        StorageDead(_9);                 // scope 0 at $DIR/issue_62289.rs:+1:19: +1:20\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n+        StorageDead(_11);                // scope 3 at $DIR/issue_62289.rs:+3:22: +3:23\n+        StorageDead(_9);                 // scope 0 at $DIR/issue_62289.rs:+3:22: +3:23\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n     }\n \n     bb7: {\n-        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue_62289.rs:+1:5: +1:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue_62289.rs:+1:5: +4:6\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n     }\n \n     bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n-        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+2:1: +2:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n+        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+5:1: +5:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+5:2: +5:2\n     }\n \n     bb9: {\n-        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n-        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+2:1: +2:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n+        StorageDead(_1);                 // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n+        StorageDead(_6);                 // scope 0 at $DIR/issue_62289.rs:+5:1: +5:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue_62289.rs:+5:2: +5:2\n     }\n \n     bb10: {\n-        return;                          // scope 0 at $DIR/issue_62289.rs:+2:2: +2:2\n+        return;                          // scope 0 at $DIR/issue_62289.rs:+5:2: +5:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+1:21: +1:22\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n     }\n \n     bb12 (cleanup): {\n-        drop(_5) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+1:20: +1:21\n+        drop(_5) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n     }\n \n     bb13 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_62289.rs:+0:1: +2:2\n+        resume;                          // scope 0 at $DIR/issue_62289.rs:+0:1: +5:2\n     }\n }"}, {"sha": "a958666e3eea849f59a9c41d2b6fbaf092ca87d5", "filename": "tests/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Fast-stmt-expr-attr.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,7 +4,6 @@ fn main() {}\n \n #[cfg(FALSE)]\n fn syntax() {\n-    let _ = #[attr] box 0;\n     let _ = #[attr] [];\n     let _ = #[attr] [0];\n     let _ = #[attr] [0; 0];"}, {"sha": "052c45f2cb8b6a54d06acb2a13ddd3f4603c2745", "filename": "tests/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Fstmt_expr_attributes.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,6 +1,5 @@\n // pp-exact\n \n-#![feature(box_syntax)]\n #![feature(inline_const)]\n #![feature(inline_const_pat)]\n #![feature(rustc_attrs)]\n@@ -140,7 +139,6 @@ fn _10() {\n }\n \n fn _11() {\n-    let _ = #[rustc_dummy] box 0;\n     let _: [(); 0] = #[rustc_dummy] [];\n     let _ = #[rustc_dummy] [0, 0];\n     let _ = #[rustc_dummy] [0; 0];"}, {"sha": "ae375dfab902be5fa8e967aad4a0a66a52d07527", "filename": "tests/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -73,11 +73,10 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n \n     let mut g = |e| f(expr(e));\n \n-    for kind in 0..=19 {\n+    for kind in 0..=18 {\n         match kind {\n-            0 => iter_exprs(depth - 1, &mut |e| g(ExprKind::Box(e))),\n-            1 => iter_exprs(depth - 1, &mut |e| g(ExprKind::Call(e, thin_vec![]))),\n-            2 => {\n+            0 => iter_exprs(depth - 1, &mut |e| g(ExprKind::Call(e, thin_vec![]))),\n+            1 => {\n                 let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::MethodCall(Box::new(MethodCall {\n@@ -90,26 +89,26 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     }))\n                 )});\n             }\n-            3..=8 => {\n+            2..=7 => {\n                 let op = Spanned {\n                     span: DUMMY_SP,\n                     node: match kind {\n-                        3 => BinOpKind::Add,\n-                        4 => BinOpKind::Mul,\n-                        5 => BinOpKind::Shl,\n-                        6 => BinOpKind::And,\n-                        7 => BinOpKind::Or,\n-                        8 => BinOpKind::Lt,\n+                        2 => BinOpKind::Add,\n+                        3 => BinOpKind::Mul,\n+                        4 => BinOpKind::Shl,\n+                        5 => BinOpKind::And,\n+                        6 => BinOpKind::Or,\n+                        7 => BinOpKind::Lt,\n                         _ => unreachable!(),\n                     },\n                 };\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, e, make_x())));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Binary(op, make_x(), e)));\n             }\n-            9 => {\n+            8 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Unary(UnOp::Deref, e)));\n             }\n-            10 => {\n+            9 => {\n                 let block = P(Block {\n                     stmts: ThinVec::new(),\n                     id: DUMMY_NODE_ID,\n@@ -120,7 +119,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             }\n-            11 => {\n+            10 => {\n                 let decl = P(FnDecl { inputs: thin_vec![], output: FnRetTy::Default(DUMMY_SP) });\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::Closure(Box::new(Closure {\n@@ -136,31 +135,31 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     })))\n                 });\n             }\n-            12 => {\n+            11 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x(), DUMMY_SP)));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e, DUMMY_SP)));\n             }\n-            13 => {\n+            12 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, Ident::from_str(\"f\"))));\n             }\n-            14 => {\n+            13 => {\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::Range(Some(e), Some(make_x()), RangeLimits::HalfOpen))\n                 });\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::Range(Some(make_x()), Some(e), RangeLimits::HalfOpen))\n                 });\n             }\n-            15 => {\n+            14 => {\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, e))\n                 });\n             }\n-            16 => {\n+            15 => {\n                 g(ExprKind::Ret(None));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Ret(Some(e))));\n             }\n-            17 => {\n+            16 => {\n                 let path = Path::from_ident(Ident::from_str(\"S\"));\n                 g(ExprKind::Struct(P(StructExpr {\n                     qself: None,\n@@ -169,10 +168,10 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     rest: StructRest::Base(make_x()),\n                 })));\n             }\n-            18 => {\n+            17 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Try(e)));\n             }\n-            19 => {\n+            18 => {\n                 let pat =\n                     P(Pat { id: DUMMY_NODE_ID, kind: PatKind::Wild, span: DUMMY_SP, tokens: None });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Let(pat.clone(), e, DUMMY_SP)))"}, {"sha": "005a77988956e41cd6286a9999a3ad06eaafa0eb", "filename": "tests/ui/check-static-values-constraints.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-static-values-constraints.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,6 @@\n // Verifies all possible restrictions for statics values.\n \n #![allow(warnings)]\n-#![feature(box_syntax)]\n \n use std::marker;\n \n@@ -19,7 +18,7 @@ enum SafeEnum {\n     Variant1,\n     Variant2(isize),\n     Variant3(WithDtor),\n-    Variant4(String)\n+    Variant4(String),\n }\n \n // These should be ok\n@@ -29,42 +28,45 @@ static STATIC3: SafeEnum = SafeEnum::Variant3(WithDtor);\n \n enum UnsafeEnum {\n     Variant5,\n-    Variant6(isize)\n+    Variant6(isize),\n }\n \n impl Drop for UnsafeEnum {\n     fn drop(&mut self) {}\n }\n \n-\n static STATIC4: UnsafeEnum = UnsafeEnum::Variant5;\n static STATIC5: UnsafeEnum = UnsafeEnum::Variant6(0);\n \n-\n struct SafeStruct {\n     field1: SafeEnum,\n     field2: SafeEnum,\n }\n \n-\n // Struct fields are safe, hence this static should be safe\n-static STATIC6: SafeStruct = SafeStruct{field1: SafeEnum::Variant1, field2: SafeEnum::Variant2(0)};\n+static STATIC6: SafeStruct =\n+    SafeStruct { field1: SafeEnum::Variant1, field2: SafeEnum::Variant2(0) };\n \n-static STATIC7: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n-                                        field2: SafeEnum::Variant3(WithDtor)};\n+static STATIC7: SafeStruct =\n+    SafeStruct { field1: SafeEnum::Variant1, field2: SafeEnum::Variant3(WithDtor) };\n \n // Test variadic constructor for structs. The base struct should be examined\n // as well as every field present in the constructor.\n // This example shouldn't fail because all the fields are safe.\n-static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n-                                        ..SafeStruct{field1: SafeEnum::Variant1,\n-                                                     field2: SafeEnum::Variant1}};\n+static STATIC8: SafeStruct = SafeStruct {\n+    field1: SafeEnum::Variant1,\n+    ..SafeStruct { field1: SafeEnum::Variant1, field2: SafeEnum::Variant1 }\n+};\n \n // This example should fail because field1 in the base struct is not safe\n-static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n-                                        ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n-//~^ ERROR destructor of\n-                                                     field2: SafeEnum::Variant1}};\n+static STATIC9: SafeStruct = SafeStruct {\n+    field1: SafeEnum::Variant1,\n+    ..SafeStruct {\n+        //~^ ERROR destructor of\n+        field1: SafeEnum::Variant3(WithDtor),\n+        field2: SafeEnum::Variant1,\n+    }\n+};\n \n struct UnsafeStruct;\n \n@@ -76,38 +78,45 @@ static STATIC10: UnsafeStruct = UnsafeStruct;\n \n struct MyOwned;\n \n-static STATIC11: Box<MyOwned> = box MyOwned;\n+static STATIC11: Vec<MyOwned> = vec![MyOwned];\n //~^ ERROR allocations are not allowed in statics\n+//~^^ ERROR cannot call non-const\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n-static mut STATIC13: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n-                                             field2: SafeEnum::Variant3(WithDtor)};\n+static mut STATIC13: SafeStruct =\n+    SafeStruct { field1: SafeEnum::Variant1, field2: SafeEnum::Variant3(WithDtor) };\n \n static mut STATIC14: SafeStruct = SafeStruct {\n     field1: SafeEnum::Variant1,\n-    field2: SafeEnum::Variant4(\"str\".to_string())\n-//~^ ERROR cannot call non-const fn\n+    field2: SafeEnum::Variant4(\"str\".to_string()), //~ ERROR cannot call non-const fn\n };\n \n-static STATIC15: &'static [Box<MyOwned>] = &[\n-    box MyOwned, //~ ERROR allocations are not allowed in statics\n-    box MyOwned, //~ ERROR allocations are not allowed in statics\n+static STATIC15: &'static [Vec<MyOwned>] = &[\n+    vec![MyOwned], //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR cannot call non-const\n+    vec![MyOwned], //~ ERROR allocations are not allowed in statics\n+                   //~^ ERROR cannot call non-const\n ];\n \n-static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n-    &box MyOwned, //~ ERROR allocations are not allowed in statics\n-    &box MyOwned, //~ ERROR allocations are not allowed in statics\n+static STATIC16: (&'static Vec<MyOwned>, &'static Vec<MyOwned>) = (\n+    &vec![MyOwned], //~ ERROR allocations are not allowed in statics\n+    //~^ ERROR cannot call non-const\n+    &vec![MyOwned], //~ ERROR allocations are not allowed in statics\n+                    //~^ ERROR cannot call non-const\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n-static STATIC19: Box<isize> =\n-    box 3;\n+static STATIC19: Vec<isize> = vec![3];\n //~^ ERROR allocations are not allowed in statics\n+//~^^ ERROR cannot call non-const\n \n pub fn main() {\n-    let y = { static x: Box<isize> = box 3; x };\n-    //~^ ERROR allocations are not allowed in statics\n-    //~| ERROR cannot move out of static item\n+    let y = {\n+        static x: Vec<isize> = vec![3]; //~ ERROR allocations are not allowed in statics\n+        //~^ ERROR cannot call non-const\n+        x\n+        //~^ ERROR cannot move out of static\n+    };\n }"}, {"sha": "064eb4b8a5cee140bd86b1b0e0d9338abf391fce", "filename": "tests/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 122, "deletions": 36, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-static-values-constraints.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,78 +1,164 @@\n error[E0493]: destructor of `SafeStruct` cannot be evaluated at compile-time\n-  --> $DIR/check-static-values-constraints.rs:65:43\n+  --> $DIR/check-static-values-constraints.rs:64:7\n    |\n-LL |                                           ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n-   |  ___________________________________________^\n+LL |       ..SafeStruct {\n+   |  _______^\n LL | |\n-LL | |                                                      field2: SafeEnum::Variant1}};\n-   | |                                                                                ^- value is dropped here\n-   | |________________________________________________________________________________|\n-   |                                                                                  the destructor for this type cannot be evaluated in statics\n+LL | |         field1: SafeEnum::Variant3(WithDtor),\n+LL | |         field2: SafeEnum::Variant1,\n+LL | |     }\n+   | |_____^ the destructor for this type cannot be evaluated in statics\n+LL |   };\n+   |   - value is dropped here\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:79:33\n+  --> $DIR/check-static-values-constraints.rs:81:33\n    |\n-LL | static STATIC11: Box<MyOwned> = box MyOwned;\n-   |                                 ^^^^^^^^^^^ allocation not allowed in statics\n+LL | static STATIC11: Vec<MyOwned> = vec![MyOwned];\n+   |                                 ^^^^^^^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [MyOwned]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:81:33\n+   |\n+LL | static STATIC11: Vec<MyOwned> = vec![MyOwned];\n+   |                                 ^^^^^^^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `<str as ToString>::to_string` in statics\n-  --> $DIR/check-static-values-constraints.rs:89:38\n+  --> $DIR/check-static-values-constraints.rs:92:38\n    |\n-LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n+LL |     field2: SafeEnum::Variant4(\"str\".to_string()),\n    |                                      ^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:94:5\n+  --> $DIR/check-static-values-constraints.rs:96:5\n    |\n-LL |     box MyOwned,\n-   |     ^^^^^^^^^^^ allocation not allowed in statics\n+LL |     vec![MyOwned],\n+   |     ^^^^^^^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [MyOwned]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:96:5\n+   |\n+LL |     vec![MyOwned],\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:98:5\n+   |\n+LL |     vec![MyOwned],\n+   |     ^^^^^^^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [MyOwned]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:98:5\n+   |\n+LL |     vec![MyOwned],\n+   |     ^^^^^^^^^^^^^\n    |\n-LL |     box MyOwned,\n-   |     ^^^^^^^^^^^ allocation not allowed in statics\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:99:6\n+  --> $DIR/check-static-values-constraints.rs:103:6\n+   |\n+LL |     &vec![MyOwned],\n+   |      ^^^^^^^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [MyOwned]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:103:6\n    |\n-LL |     &box MyOwned,\n-   |      ^^^^^^^^^^^ allocation not allowed in statics\n+LL |     &vec![MyOwned],\n+   |      ^^^^^^^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:100:6\n+  --> $DIR/check-static-values-constraints.rs:105:6\n    |\n-LL |     &box MyOwned,\n-   |      ^^^^^^^^^^^ allocation not allowed in statics\n+LL |     &vec![MyOwned],\n+   |      ^^^^^^^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [MyOwned]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:105:6\n+   |\n+LL |     &vec![MyOwned],\n+   |      ^^^^^^^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:106:5\n+  --> $DIR/check-static-values-constraints.rs:111:31\n    |\n-LL |     box 3;\n-   |     ^^^^^ allocation not allowed in statics\n+LL | static STATIC19: Vec<isize> = vec![3];\n+   |                               ^^^^^^^ allocation not allowed in statics\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [isize]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:111:31\n+   |\n+LL | static STATIC19: Vec<isize> = vec![3];\n+   |                               ^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0507]: cannot move out of static item `x`\n-  --> $DIR/check-static-values-constraints.rs:110:45\n+  --> $DIR/check-static-values-constraints.rs:119:9\n    |\n-LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                             ^ move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n+LL |         x\n+   |         ^ move occurs because `x` has type `Vec<isize>`, which does not implement the `Copy` trait\n    |\n help: consider borrowing here\n    |\n-LL |     let y = { static x: Box<isize> = box 3; &x };\n-   |                                             +\n+LL |         &x\n+   |         +\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:110:38\n+  --> $DIR/check-static-values-constraints.rs:117:32\n+   |\n+LL |         static x: Vec<isize> = vec![3];\n+   |                                ^^^^^^^ allocation not allowed in statics\n    |\n-LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                      ^^^^^ allocation not allowed in statics\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [isize]>::into_vec::<std::alloc::Global>` in statics\n+  --> $DIR/check-static-values-constraints.rs:117:32\n+   |\n+LL |         static x: Vec<isize> = vec![3];\n+   |                                ^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0010, E0015, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "43b0b375a982e141404da79a6af7c3fc77b4808d", "filename": "tests/ui/coercion/coerce-expect-unsized-ascribed.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,18 +1,19 @@\n // A version of coerce-expect-unsized that uses type ascription.\n // Doesn't work so far, but supposed to work eventually\n \n-#![feature(box_syntax, type_ascription)]\n+#![feature(type_ascription)]\n \n use std::fmt::Debug;\n \n pub fn main() {\n-    let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>); //~ ERROR mismatched types\n-    let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>); //~ ERROR mismatched types\n-    let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n+    let _ = type_ascribe!(Box::new({ [1, 2, 3] }), Box<[i32]>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new( if true { [1, 2, 3] } else { [1, 3, 4] }), Box<[i32]>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(\n+        Box::new( match true { true => [1, 2, 3], false => [1, 3, 4] }), Box<[i32]>);\n     //~^ ERROR mismatched types\n-    let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>); //~ ERROR mismatched types\n-    let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>); //~ ERROR mismatched types\n-    let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new( { |x| (x as u8) }), Box<dyn Fn(i32) -> _>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new( if true { false } else { true }), Box<dyn Debug>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new( match true { true => 'a', false => 'b' }), Box<dyn Debug>); //~ ERROR mismatched types\n \n     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]); //~ ERROR mismatched types\n     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]); //~ ERROR mismatched types\n@@ -27,6 +28,6 @@ pub fn main() {\n \n     let _ = type_ascribe!(vec![\n         Box::new(|x| (x as u8)),\n-        box |x| (x as i16 as u8),\n+        Box::new(|x| (x as i16 as u8)),\n     ], Vec<Box<dyn Fn(i32) -> _>>);\n }"}, {"sha": "aa5ec6b5ae1fd82b1901a924d1b9f140a9d6190f", "filename": "tests/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,59 +1,59 @@\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:27\n    |\n-LL |     let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n+LL |     let _ = type_ascribe!(Box::new({ [1, 2, 3] }), Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:27\n    |\n-LL |     let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n+LL |     let _ = type_ascribe!(Box::new( if true { [1, 2, 3] } else { [1, 3, 4] }), Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:11:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:12:9\n    |\n-LL |     let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n+LL |         Box::new( match true { true => [1, 2, 3], false => [1, 3, 4] }), Box<[i32]>);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:13:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:14:27\n    |\n-LL |     let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:13:33]>`\n+LL |     let _ = type_ascribe!(Box::new( { |x| (x as u8) }), Box<dyn Fn(i32) -> _>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:14:39]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:33: 13:36]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:14:39: 14:42]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:14:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:15:27\n    |\n-LL |     let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<bool>`\n+LL |     let _ = type_ascribe!(Box::new( if true { false } else { true }), Box<dyn Debug>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<bool>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:15:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:16:27\n    |\n-LL |     let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<char>`\n+LL |     let _ = type_ascribe!(Box::new( match true { true => 'a', false => 'b' }), Box<dyn Debug>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<char>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<char>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:17:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:18:27\n    |\n LL |     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]);\n    |                           ^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n@@ -62,7 +62,7 @@ LL |     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]);\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:18:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:19:27\n    |\n LL |     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n@@ -71,7 +71,7 @@ LL |     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:19:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:20:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3, 4] }, &[i32]);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n@@ -80,16 +80,16 @@ LL |     let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3,\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:21:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:22:27\n    |\n LL |     let _ = type_ascribe!(&{ |x| (x as u8) }, &dyn Fn(i32) -> _);\n-   |                           ^^^^^^^^^^^^^^^^^^ expected `&dyn Fn(i32) -> u8`, found `&[closure@coerce-expect-unsized-ascribed.rs:21:30]`\n+   |                           ^^^^^^^^^^^^^^^^^^ expected `&dyn Fn(i32) -> u8`, found `&[closure@coerce-expect-unsized-ascribed.rs:22:30]`\n    |\n    = note: expected reference `&dyn Fn(i32) -> u8`\n-              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:30: 21:33]`\n+              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:22:30: 22:33]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:22:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:23:27\n    |\n LL |     let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&bool`\n@@ -98,7 +98,7 @@ LL |     let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug);\n               found reference `&bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:23:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:24:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn Debug);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&char`\n@@ -107,7 +107,7 @@ LL |     let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn D\n               found reference `&char`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:25:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:26:27\n    |\n LL |     let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>);\n    |                           ^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n@@ -116,13 +116,13 @@ LL |     let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>);\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:26:27\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:27:27\n    |\n LL |     let _ = type_ascribe!(Box::new(|x| (x as u8)), Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:26:36]>`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:27:36]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:36: 26:39]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:27:36: 27:39]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "39cddda2b80406c3231110b4edd0e586f4a80f7f", "filename": "tests/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,12 +1,11 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(box_syntax)]\n \n use std::mem::ManuallyDrop;\n \n fn main() {}\n \n static TEST_BAD: &mut i32 = {\n-    &mut *(box 0)\n+    &mut *(Box::new(0))\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE calling non-const function `alloc::alloc::exchange_malloc`\n+    //~| NOTE calling non-const function `Box::<i32>::new`\n };"}, {"sha": "407f5d8cb113d128d43dc9229b3a99d74bcad9ad", "filename": "tests/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,31 +1,26 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/box.rs:9:11\n+  --> $DIR/box.rs:8:11\n    |\n-LL |     &mut *(box 0)\n-   |           ^^^^^^^ calling non-const function `alloc::alloc::exchange_malloc`\n+LL |     &mut *(Box::new(0))\n+   |           ^^^^^^^^^^^^^ calling non-const function `Box::<i32>::new`\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/box.rs:9:11\n+  --> $DIR/box.rs:8:11\n    |\n-LL |     &mut *(box 0)\n-   |           ^^^^^^^\n+LL |     &mut *(Box::new(0))\n+   |           ^^^^^^^^^^^^^\n help: skipping check for `const_mut_refs` feature\n-  --> $DIR/box.rs:9:16\n+  --> $DIR/box.rs:8:5\n    |\n-LL |     &mut *(box 0)\n-   |                ^\n-help: skipping check for `const_mut_refs` feature\n-  --> $DIR/box.rs:9:5\n-   |\n-LL |     &mut *(box 0)\n-   |     ^^^^^^^^^^^^^\n+LL |     &mut *(Box::new(0))\n+   |     ^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/box.rs:9:5\n+  --> $DIR/box.rs:8:5\n    |\n-LL |     &mut *(box 0)\n-   |     ^^^^^^^^^^^^^\n+LL |     &mut *(Box::new(0))\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "798fcda2a1013f4ff7fd3498e8421c46449b6105", "filename": "tests/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,8 +1,7 @@\n // compile-flags: -Z teach\n \n-#![feature(box_syntax)]\n #![allow(warnings)]\n \n-const CON : Box<i32> = box 0; //~ ERROR E0010\n-\n+const CON: Vec<i32> = vec![1, 2, 3]; //~ ERROR E0010\n+//~| ERROR cannot call non-const fn\n fn main() {}"}, {"sha": "7634970f36e2e0f843743e470563760c57e6fe53", "filename": "tests/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,11 +1,22 @@\n error[E0010]: allocations are not allowed in constants\n-  --> $DIR/E0010-teach.rs:6:24\n+  --> $DIR/E0010-teach.rs:5:23\n    |\n-LL | const CON : Box<i32> = box 0;\n-   |                        ^^^^^ allocation not allowed in constants\n+LL | const CON: Vec<i32> = vec![1, 2, 3];\n+   |                       ^^^^^^^^^^^^^ allocation not allowed in constants\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error[E0015]: cannot call non-const fn `slice::<impl [i32]>::into_vec::<std::alloc::Global>` in constants\n+  --> $DIR/E0010-teach.rs:5:23\n+   |\n+LL | const CON: Vec<i32> = vec![1, 2, 3];\n+   |                       ^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors have detailed explanations: E0010, E0015.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "11721efffcb5f061c37607fb21d339962911ed0c", "filename": "tests/ui/error-codes/E0010.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0010.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,6 +1,5 @@\n-#![feature(box_syntax)]\n #![allow(warnings)]\n \n-const CON : Box<i32> = box 0; //~ ERROR E0010\n-\n+const CON: Vec<i32> = vec![1, 2, 3]; //~ ERROR E0010\n+//~| ERROR cannot call non-const fn\n fn main() {}"}, {"sha": "0894722242260a960f2828fba167bb66f6db2d57", "filename": "tests/ui/error-codes/E0010.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0010.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,9 +1,21 @@\n error[E0010]: allocations are not allowed in constants\n-  --> $DIR/E0010.rs:4:24\n+  --> $DIR/E0010.rs:3:23\n    |\n-LL | const CON : Box<i32> = box 0;\n-   |                        ^^^^^ allocation not allowed in constants\n+LL | const CON: Vec<i32> = vec![1, 2, 3];\n+   |                       ^^^^^^^^^^^^^ allocation not allowed in constants\n+   |\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: cannot call non-const fn `slice::<impl [i32]>::into_vec::<std::alloc::Global>` in constants\n+  --> $DIR/E0010.rs:3:23\n+   |\n+LL | const CON: Vec<i32> = vec![1, 2, 3];\n+   |                       ^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0010`.\n+Some errors have detailed explanations: E0010, E0015.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "870253d2f052e3455c508631b552d48c625e2bea", "filename": "tests/ui/feature-gates/feature-gate-box-expr.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,14 +0,0 @@\n-// gate-test-box_syntax\n-\n-// Check that `box EXPR` is feature-gated.\n-//\n-// See also feature-gate-placement-expr.rs\n-//\n-// (Note that the two tests are separated since the checks appear to\n-// be performed at distinct phases, with an abort_if_errors call\n-// separating them.)\n-\n-fn main() {\n-    let x = box 'c'; //~ ERROR box expression syntax is experimental\n-    println!(\"x: {}\", x);\n-}"}, {"sha": "af864b25f14bf601d34ecde1523322ab71ad8188", "filename": "tests/ui/feature-gates/feature-gate-box-expr.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box-expr.rs:12:13\n-   |\n-LL |     let x = box 'c';\n-   |             ^^^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "778660cc0b54991d1b456e33f18095a108f091d3", "filename": "tests/ui/feature-gates/feature-gate-box_syntax.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,6 +0,0 @@\n-// Test that the use of the box syntax is gated by `box_syntax` feature gate.\n-\n-fn main() {\n-    let x = box 3;\n-    //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n-}"}, {"sha": "dcf8eeed7cfce3a8d8d4ca9cb211a46127e64c6f", "filename": "tests/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box_syntax.rs:4:13\n-   |\n-LL |     let x = box 3;\n-   |             ^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1cd4c4e4d6c84f7a27ef59f2259ab430b6b4f7f9", "filename": "tests/ui/generator/issue-105084.drop_tracking_mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.drop_tracking_mir.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `g`\n-  --> $DIR/issue-105084.rs:44:14\n+  --> $DIR/issue-105084.rs:45:14\n    |\n LL |     let mut g = || {\n    |         ----- move occurs because `g` has type `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ LL |     let mut h = copy(g.clone());\n    |                       ++++++++\n \n error[E0277]: the trait bound `Box<(i32, ())>: Copy` is not satisfied in `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n-  --> $DIR/issue-105084.rs:38:17\n+  --> $DIR/issue-105084.rs:39:17\n    |\n LL |     let mut g = || {\n    |                 -- within this `[generator@$DIR/issue-105084.rs:22:17: 22:19]`\n@@ -32,13 +32,13 @@ LL |     let mut h = copy(g);\n    |                 ^^^^ within `[generator@$DIR/issue-105084.rs:22:17: 22:19]`, the trait `Copy` is not implemented for `Box<(i32, ())>`\n    |\n note: generator does not implement `Copy` as this value is used across a yield\n-  --> $DIR/issue-105084.rs:28:25\n+  --> $DIR/issue-105084.rs:29:22\n    |\n-LL |         let t = box (5, yield);\n-   |                 --------^^^^^-\n-   |                 |       |\n-   |                 |       yield occurs here, with `box (5, yield)` maybe used later\n-   |                 has type `Box<(i32, ())>` which does not implement `Copy`\n+LL |         Box::new((5, yield));\n+   |         -------------^^^^^--\n+   |         |            |\n+   |         |            yield occurs here, with `Box::new((5, yield))` maybe used later\n+   |         has type `Box<(i32, ())>` which does not implement `Copy`\n note: required by a bound in `copy`\n   --> $DIR/issue-105084.rs:17:12\n    |"}, {"sha": "ff9357b76a08bbbc3d593900e6bf342da1b99ccc", "filename": "tests/ui/generator/issue-105084.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fgenerator%2Fissue-105084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-105084.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -9,7 +9,7 @@\n #![feature(generators)]\n #![feature(generator_clone)]\n #![feature(generator_trait)]\n-#![feature(box_syntax)]\n+#![feature(rustc_attrs, stmt_expr_attributes)]\n \n use std::ops::Generator;\n use std::pin::Pin;\n@@ -25,7 +25,8 @@ fn main() {\n         // - create a Box that is ignored for trait computations;\n         // - compute fields (and yields);\n         // - assign to `t`.\n-        let t = box (5, yield);\n+        let t = #[rustc_box]\n+        Box::new((5, yield));\n         drop(t);\n     };\n "}, {"sha": "dd6fa7c151aa7b82f93d0a964738e363eea551f3", "filename": "tests/ui/generator/yield-in-box.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fgenerator%2Fyield-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fgenerator%2Fyield-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fyield-in-box.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,24 +0,0 @@\n-// run-pass\n-// Test that box-statements with yields in them work.\n-\n-#![feature(generators, box_syntax, generator_trait)]\n-use std::pin::Pin;\n-use std::ops::Generator;\n-use std::ops::GeneratorState;\n-\n-fn main() {\n-    let x = 0i32;\n-    || { //~ WARN unused generator that must be used\n-        let y = 2u32;\n-        {\n-            let _t = box (&x, yield 0, &y);\n-        }\n-        match box (&x, yield 0, &y) {\n-            _t => {}\n-        }\n-    };\n-\n-    let mut g = |_| box yield;\n-    assert_eq!(Pin::new(&mut g).resume(1), GeneratorState::Yielded(()));\n-    assert_eq!(Pin::new(&mut g).resume(2), GeneratorState::Complete(box 2));\n-}"}, {"sha": "9d03ee00800c8f489b7b4ca96952df1d847a7577", "filename": "tests/ui/generator/yield-in-box.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,17 +0,0 @@\n-warning: unused generator that must be used\n-  --> $DIR/yield-in-box.rs:11:5\n-   |\n-LL | /     || {\n-LL | |         let y = 2u32;\n-LL | |         {\n-LL | |             let _t = box (&x, yield 0, &y);\n-...  |\n-LL | |         }\n-LL | |     };\n-   | |_____^\n-   |\n-   = note: generators are lazy and do nothing unless resumed\n-   = note: `#[warn(unused_must_use)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c22b44ffca2a4e354fab2cd7ecfaedda8791510d", "filename": "tests/ui/lang-items/no_owned_box_lang_item.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,16 +0,0 @@\n-// Test that we don't ICE when we are missing the owned_box lang item.\n-\n-// error-pattern: requires `owned_box` lang_item\n-\n-#![feature(lang_items, box_syntax)]\n-#![no_std]\n-\n-use core::panic::PanicInfo;\n-\n-fn main() {\n-    let x = box 1i32;\n-}\n-\n-#[lang = \"eh_personality\"] extern \"C\" fn eh_personality() {}\n-#[lang = \"eh_catch_typeinfo\"] static EH_CATCH_TYPEINFO: u8 = 0;\n-#[lang = \"panic_impl\"] fn panic_impl(panic: &PanicInfo) -> ! { loop {} }"}, {"sha": "c55c246b5e1570096b566379399ea67ea5dd2ed1", "filename": "tests/ui/lang-items/no_owned_box_lang_item.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fno_owned_box_lang_item.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,4 +0,0 @@\n-error: requires `owned_box` lang_item\n-\n-error: aborting due to previous error\n-"}, {"sha": "e88e24482ccc863941873c3f4de91d8adc1d87a5", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/all-expr-kinds.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -5,7 +5,7 @@\n // needs-unwind Asserting on contents of error message\n \n #![allow(path_statements, unused_allocation)]\n-#![feature(box_syntax, core_intrinsics, generic_assert, generic_assert_internals)]\n+#![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n \n macro_rules! test {\n   (\n@@ -127,9 +127,6 @@ fn main() {\n     // block\n     [ { elem } == 3 ] => \"Assertion failed: { elem } == 3\"\n \n-    // box\n-    [ box elem == box 3 ] => \"Assertion failed: box elem == box 3\"\n-\n     // break\n     [ loop { break elem; } ==  3 ] => \"Assertion failed: loop { break elem; } == 3\"\n "}, {"sha": "79d8cd7571603d1c458db2ffbfd2a7bc2810368e", "filename": "tests/ui/macros/stringify.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fstringify.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(async_closure)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(const_trait_impl)]\n #![feature(decl_macro)]\n #![feature(generators)]\n@@ -91,9 +90,6 @@ fn test_block() {\n \n #[test]\n fn test_expr() {\n-    // ExprKind::Box\n-    assert_eq!(stringify_expr!(box expr), \"box expr\");\n-\n     // ExprKind::Array\n     assert_eq!(stringify_expr!([]), \"[]\");\n     assert_eq!(stringify_expr!([true]), \"[true]\");"}, {"sha": "83e1cfb640aa2f1671bcf4bf5976e2cffaf6114c", "filename": "tests/ui/mir/mir_boxing.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fmir%2Fmir_boxing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Fmir%2Fmir_boxing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fmir_boxing.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-#![feature(box_syntax)]\n-\n-fn test() -> Box<i32> {\n-    box 42\n-}\n-\n-fn main() {\n-    assert_eq!(*test(), 42);\n-}"}, {"sha": "c94a32146b90b40af1861d5151ca65fc757de315", "filename": "tests/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,7 +1,5 @@\n fn main() {}\n \n-#[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n-//~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = [#[attr]]; }\n //~^ ERROR expected expression, found `]`\n #[cfg(FALSE)] fn e() { let _ = foo#[attr](); }"}, {"sha": "a857f11fd18d400f9bae083434f828c3acebb55a", "filename": "tests/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 53, "deletions": 62, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,26 +1,17 @@\n-error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:3:36\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = box #![attr] 0; }\n-   |                                    ^^^^^^^^\n-   |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n-   = note: outer attributes, like `#[test]`, annotate the item following them\n-\n error: expected expression, found `]`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:5:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:3:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = [#[attr]]; }\n    |                                        ^ expected expression\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:7:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:5:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo#[attr](); }\n    |                                   ^ expected one of 8 possible tokens\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:9:36\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:7:36\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    |                                    ^^^^^^^^\n@@ -29,13 +20,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:9:44\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:7:44\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = foo(#![attr]); }\n    |                                            ^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:12:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:10:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    |                                      ^^^^^^^^\n@@ -44,13 +35,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `)`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:12:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:10:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.foo(#![attr]); }\n    |                                              ^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:15:36\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:13:36\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n    |                                    ^^^^^^^^\n@@ -59,7 +50,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = 0 + #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:17:33\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:15:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n    |                                 ^^^^^^^^\n@@ -68,7 +59,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = !#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:19:33\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:17:33\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n    |                                 ^^^^^^^^\n@@ -77,13 +68,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = -#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:21:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:19:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x #![attr] as Y; }\n    |                                  ^ expected one of 8 possible tokens\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:23:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:21:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n    |                                   ^^^^^^^^\n@@ -92,7 +83,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] foo; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:25:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:23:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n    |                                        ^^^^^^^^\n@@ -101,7 +92,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] foo; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:27:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:25:35\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n    |                                   ^^^^^^^^\n@@ -110,7 +101,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = || #![attr] {foo}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:29:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:27:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n    |                                        ^^^^^^^^\n@@ -119,19 +110,19 @@ LL | #[cfg(FALSE)] fn e() { let _ = move || #![attr] {foo}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected expression, found `..`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:29:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..#[attr] 0; }\n    |                                        ^^ expected expression\n \n error: expected expression, found `..`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:33:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:31:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] ..; }\n    |                                        ^^ expected expression\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:35:41\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:33:41\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n    |                                         ^^^^^^^^\n@@ -140,7 +131,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &#![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:37:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:35:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |                                             ^^^^^^^^\n@@ -149,7 +140,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:39:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:37:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                --   ^^^^^^^ -- the attributes are attached to this branch\n@@ -158,7 +149,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:41:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:39:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    |                                      ^^^^^^^^\n@@ -167,13 +158,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:43:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:41:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n    |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:45:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:43:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                        ---- ^^^^^^^ -- the attributes are attached to this branch\n@@ -182,7 +173,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                        the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:47:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:45:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |                                              ^^^^^^^^\n@@ -191,7 +182,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:49:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                        ---- ^^^^^^^ ------- the attributes are attached to this branch\n@@ -200,7 +191,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                        the branch belongs to this `else`\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:51:50\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:49:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             --   ^^^^^^^ -- the attributes are attached to this branch\n@@ -209,7 +200,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:51\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:51\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |                                                   ^^^^^^^^\n@@ -218,7 +209,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:55:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:53:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                --           ^^^^^^^ -- the attributes are attached to this branch\n@@ -227,7 +218,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:57:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:55:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    |                                              ^^^^^^^^\n@@ -236,13 +227,13 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:59:48\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:57:48\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n    |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:61:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:59:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                ---- ^^^^^^^ -- the attributes are attached to this branch\n@@ -251,7 +242,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                the branch belongs to this `else`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:63:54\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:61:54\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |                                                      ^^^^^^^^\n@@ -260,7 +251,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:65:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n    |                                                ---- ^^^^^^^ --------------- the attributes are attached to this branch\n@@ -269,7 +260,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}\n    |                                                the branch belongs to this `else`\n \n error: outer attributes are not allowed on `if` and `else` branches\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:67:66\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:65:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n    |                                                     --           ^^^^^^^ -- the attributes are attached to this branch\n@@ -278,7 +269,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}\n    |                                                     the branch belongs to this `if`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:69:67\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:67:67\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n    |                                                                   ^^^^^^^^\n@@ -287,7 +278,7 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:72:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:70:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -298,7 +289,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:72:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -309,7 +300,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    = note: outer attributes, like `#[test]`, annotate the item following them\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n@@ -325,7 +316,7 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!(); }\n    |\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    |                        ------- ^^^^^^^^ ------- the inner attribute doesn't annotate this item macro invocation\n@@ -341,7 +332,7 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo![]; }\n    |\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    |                        ------- ^^^^^^^^ ------ the inner attribute doesn't annotate this item macro invocation\n@@ -357,89 +348,89 @@ LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!{}; }\n    |\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:86:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:84:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:86:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:84:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:89:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:87:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:89:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:87:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:92:39\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:90:39\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n    |                                       ^\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:92:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:92:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:98:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:98:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:101:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:99:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:101:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:99:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:104:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n    |                                     ^^^^^^^\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:108:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:106:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }\n    |                                     ^^^^^^^\n \n-error: aborting due to 53 previous errors\n+error: aborting due to 52 previous errors\n \n For more information about this error, try `rustc --explain E0586`."}, {"sha": "b0e8f4d99885cf3b537519a1171c3cf8b9e0e833", "filename": "tests/ui/parser/issues/issue-65846-rollback-gating-failing-matcher.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-65846-rollback-gating-failing-matcher.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -5,11 +5,17 @@\n \n #[allow(unused_macro_rules)]\n macro_rules! m {\n-    ($e:expr) => { 0 }; // This fails on the input below due to `, foo`.\n-    ($e:expr,) => { 1 }; // This also fails to match due to `foo`.\n-    (box $e:expr, foo) => { 2 }; // Successful matcher, we should get `2`.\n+    ($e:expr) => {\n+        0\n+    }; // This fails on the input below due to `, foo`.\n+    ($e:expr,) => {\n+        1\n+    }; // This also fails to match due to `foo`.\n+    (do yeet $e:expr, foo) => {\n+        2\n+    }; // Successful matcher, we should get `2`.\n }\n \n fn main() {\n-    assert_eq!(2, m!(box 42, foo));\n+    assert_eq!(2, m!(do yeet 42, foo));\n }"}, {"sha": "09d1304b7754646d0aa28d4d57f237bfda673f29", "filename": "tests/ui/parser/removed-syntax-box.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn main() {\n+    #[allow(dead_code)]\n+    struct T {\n+        a: u8,\n+        b: u8,\n+    }\n+    let _ = Box::new(()); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new(1); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new(T { a: 12, b: 18 }); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new([5; 30]); //~ ERROR `box_syntax` has been removed\n+    let _: Box<()> = Box::new(()); //~ ERROR `box_syntax` has been removed\n+}"}, {"sha": "1f5061b02c7050f303b1e4fe2c12763c1fd755a7", "filename": "tests/ui/parser/removed-syntax-box.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn main() {\n+    #[allow(dead_code)]\n+    struct T {\n+        a: u8,\n+        b: u8,\n+    }\n+    let _ = box (); //~ ERROR `box_syntax` has been removed\n+    let _ = box 1; //~ ERROR `box_syntax` has been removed\n+    let _ = box T { a: 12, b: 18 }; //~ ERROR `box_syntax` has been removed\n+    let _ = box [5; 30]; //~ ERROR `box_syntax` has been removed\n+    let _: Box<()> = box (); //~ ERROR `box_syntax` has been removed\n+}"}, {"sha": "46b891587d5a626e0f2d2e2f76b801054a7e08ae", "filename": "tests/ui/parser/removed-syntax-box.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -0,0 +1,57 @@\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:9:13\n+   |\n+LL |     let _ = box ();\n+   |             ^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(());\n+   |             ~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:10:13\n+   |\n+LL |     let _ = box 1;\n+   |             ^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(1);\n+   |             ~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:11:13\n+   |\n+LL |     let _ = box T { a: 12, b: 18 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(T { a: 12, b: 18 });\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:12:13\n+   |\n+LL |     let _ = box [5; 30];\n+   |             ^^^^^^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new([5; 30]);\n+   |             ~~~~~~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:13:22\n+   |\n+LL |     let _: Box<()> = box ();\n+   |                      ^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _: Box<()> = Box::new(());\n+   |                      ~~~~~~~~~~~~\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "00328ea013139fb964563e2a566d9261d4168186", "filename": "tests/ui/reachable/expr_box.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Freachable%2Fexpr_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Freachable%2Fexpr_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freachable%2Fexpr_box.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,8 +0,0 @@\n-#![feature(box_syntax)]\n-#![allow(unused_variables)]\n-#![deny(unreachable_code)]\n-\n-fn main() {\n-    let x = box return; //~ ERROR unreachable\n-    println!(\"hi\");\n-}"}, {"sha": "ea6472cbeab3493f4dfc95cd928d7fc92310db61", "filename": "tests/ui/reachable/expr_box.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Freachable%2Fexpr_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Freachable%2Fexpr_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freachable%2Fexpr_box.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,17 +0,0 @@\n-error: unreachable expression\n-  --> $DIR/expr_box.rs:6:13\n-   |\n-LL |     let x = box return;\n-   |             ^^^^------\n-   |             |   |\n-   |             |   any code following this expression is unreachable\n-   |             unreachable expression\n-   |\n-note: the lint level is defined here\n-  --> $DIR/expr_box.rs:3:9\n-   |\n-LL | #![deny(unreachable_code)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d501e5c295657bfdf78b715687cd71df8a79e65f", "filename": "tests/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,6 +1,4 @@\n-#![feature(box_syntax)]\n-\n-static mut a: Box<isize> = box 3;\n-//~^ ERROR allocations are not allowed in statics\n+static mut a: Box<isize> = Box::new(3);\n+//~^ ERROR cannot call non-const fn\n \n fn main() {}"}, {"sha": "8411a1557b4f1134552cd01d5cfa5dee862369dd", "filename": "tests/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,9 +1,12 @@\n-error[E0010]: allocations are not allowed in statics\n-  --> $DIR/static-mut-not-constant.rs:3:28\n+error[E0015]: cannot call non-const fn `Box::<isize>::new` in statics\n+  --> $DIR/static-mut-not-constant.rs:1:28\n    |\n-LL | static mut a: Box<isize> = box 3;\n-   |                            ^^^^^ allocation not allowed in statics\n+LL | static mut a: Box<isize> = Box::new(3);\n+   |                            ^^^^^^^^^^^\n+   |\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "f53f31138f811d0d8a7d26a7da0869f6699347bd", "filename": "tests/ui/typeck/issue-105946.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ftypeck%2Fissue-105946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ftypeck%2Fissue-105946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-105946.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,12 +1,10 @@\n fn digit() -> str {\n-  return {};\n-  //~^ ERROR: mismatched types [E0308]\n+    return {};\n+    //~^ ERROR: mismatched types [E0308]\n }\n fn main() {\n-    let [_y..] = [box 1, box 2];\n+    let [_y..] = [Box::new(1), Box::new(2)];\n     //~^ ERROR: cannot find value `_y` in this scope [E0425]\n     //~| ERROR: `X..` patterns in slices are experimental [E0658]\n-    //~| ERROR: box expression syntax is experimental; you can call `Box::new` instead [E0658]\n-    //~| ERROR: box expression syntax is experimental; you can call `Box::new` instead [E0658]\n     //~| ERROR: pattern requires 1 element but array has 2 [E0527]\n }"}, {"sha": "26c3b7fbc841dd1c3dd07f54da9ad2c4f09ce7ce", "filename": "tests/ui/typeck/issue-105946.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ftypeck%2Fissue-105946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Ftypeck%2Fissue-105946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-105946.stderr?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -1,49 +1,31 @@\n error[E0425]: cannot find value `_y` in this scope\n   --> $DIR/issue-105946.rs:6:10\n    |\n-LL |     let [_y..] = [box 1, box 2];\n+LL |     let [_y..] = [Box::new(1), Box::new(2)];\n    |          ^^ not found in this scope\n \n error[E0658]: `X..` patterns in slices are experimental\n   --> $DIR/issue-105946.rs:6:10\n    |\n-LL |     let [_y..] = [box 1, box 2];\n+LL |     let [_y..] = [Box::new(1), Box::new(2)];\n    |          ^^^^\n    |\n    = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns_in_slices)]` to the crate attributes to enable\n \n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/issue-105946.rs:6:19\n-   |\n-LL |     let [_y..] = [box 1, box 2];\n-   |                   ^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/issue-105946.rs:6:26\n-   |\n-LL |     let [_y..] = [box 1, box 2];\n-   |                          ^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/issue-105946.rs:2:10\n+  --> $DIR/issue-105946.rs:2:12\n    |\n-LL |   return {};\n-   |          ^^ expected `str`, found `()`\n+LL |     return {};\n+   |            ^^ expected `str`, found `()`\n \n error[E0527]: pattern requires 1 element but array has 2\n   --> $DIR/issue-105946.rs:6:9\n    |\n-LL |     let [_y..] = [box 1, box 2];\n+LL |     let [_y..] = [Box::new(1), Box::new(2)];\n    |         ^^^^^^ expected 2 elements\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0308, E0425, E0527, E0658.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "cd2a82074ed420e237ca98173565f45f8585aaff", "filename": "tests/ui/typeck/issue-87935-unsized-box-expr.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.rs?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,10 +0,0 @@\n-#![feature(box_syntax)]\n-// Box expression needs to be movable, and hence has to be of a Sized type.\n-fn main() {\n-    let _x: Box<[u32]> = box { loop {} };\n-    //~^ ERROR: the size for values of type `[u32]` cannot be known at compilation time\n-\n-    // Check that a deduced size does not cause issues.\n-    let _y: Box<[u32]> = box [];\n-    let _z: Box<[u32; 0]> = box { loop {} };\n-}"}, {"sha": "9ff822352a1551ea8989a3ad3030e5c4a649c08f", "filename": "tests/ui/typeck/issue-87935-unsized-box-expr.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87935-unsized-box-expr.stderr?ref=d610b0c514b9ccb0dad5d0b77ce4c518f71b92c8", "patch": "@@ -1,12 +0,0 @@\n-error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n-  --> $DIR/issue-87935-unsized-box-expr.rs:4:30\n-   |\n-LL |     let _x: Box<[u32]> = box { loop {} };\n-   |                              ^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `[u32]`\n-   = note: the type of a box expression must have a statically known size\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "81f5c88d7902f44d090efe9063a5e332e151ea3b", "filename": "tests/ui/unpretty/box.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Funpretty%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Funpretty%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funpretty%2Fbox.rs?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+#![feature(stmt_expr_attributes, rustc_attrs)]\n+\n+fn main() {\n+    let _ = #[rustc_box]\n+    Box::new(1);\n+}"}, {"sha": "0c6e012e698f9f59ac89943d9f70ef1ec8d39ec9", "filename": "tests/ui/unpretty/box.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Funpretty%2Fbox.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1b1ed7e18f1fbe5226a96626827c625985f8285/tests%2Fui%2Funpretty%2Fbox.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funpretty%2Fbox.stdout?ref=f1b1ed7e18f1fbe5226a96626827c625985f8285", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+#![feature(stmt_expr_attributes, rustc_attrs)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+fn main() {\n+        let _ =\n+            #[rustc_box]\n+            Box::new(1);\n+    }"}]}