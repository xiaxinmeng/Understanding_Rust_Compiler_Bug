{"sha": "1f94425864731772d131f102a9e97c7ffb1c5241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTQ0MjU4NjQ3MzE3NzJkMTMxZjEwMmE5ZTk3YzdmZmIxYzUyNDE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-08T15:29:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T15:29:17Z"}, "message": "Rollup merge of #67955 - ollie27:rustdoc_cfg_dupes, r=GuillaumeGomez\n\nrustdoc: Remove more `#[doc(cfg(..))]` duplicates\n\nThis is a follow up to #66959.\n\nr? @GuillaumeGomez", "tree": {"sha": "79e4f1c7281883453c9cb3879c0dec19cc2d7395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e4f1c7281883453c9cb3879c0dec19cc2d7395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f94425864731772d131f102a9e97c7ffb1c5241", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFfVNCRBK7hj4Ov3rIwAAdHIIAHWz6K0Y2Iu5vBoRVxK7Hnmi\n8TVsN5qPW2MXBme+diTkg21U1mt9fCRVnPNRMWXgMPImCO/QkHliQZmfjMyiiboa\nXxH9FTK1th2BQK2ivPsDo/oVX1nXofD0ZXacqOVxNoRytURVfSeCpwDYFzY8385k\nAi8aeeGwEIDX31VUBFfVPf+jON3qQlgMnSB/HUnX4CGG7w3kHClZ6X61zilTYJfc\nDqaapj9wRofn3CYuN1sctkT5Rqxa8Pjvdbnbm9dLqFheQU1Z0y8NF0Afk4BD08fg\n8qZRglmGgoExRJHnHLMlJB3Uu1hOvAyGadcLJ2kp2HVbnGF/yjl5xWQ6oLic+s0=\n=Tysk\n-----END PGP SIGNATURE-----\n", "payload": "tree 79e4f1c7281883453c9cb3879c0dec19cc2d7395\nparent 1c9b8036bf25b68af7751a1db4a07f98808c0ee7\nparent 86b9d49cbe9fe4b97bbe120d3902f82af9f7993a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578497357 +0900\ncommitter GitHub <noreply@github.com> 1578497357 +0900\n\nRollup merge of #67955 - ollie27:rustdoc_cfg_dupes, r=GuillaumeGomez\n\nrustdoc: Remove more `#[doc(cfg(..))]` duplicates\n\nThis is a follow up to #66959.\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f94425864731772d131f102a9e97c7ffb1c5241", "html_url": "https://github.com/rust-lang/rust/commit/1f94425864731772d131f102a9e97c7ffb1c5241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f94425864731772d131f102a9e97c7ffb1c5241/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b8036bf25b68af7751a1db4a07f98808c0ee7", "html_url": "https://github.com/rust-lang/rust/commit/1c9b8036bf25b68af7751a1db4a07f98808c0ee7"}, {"sha": "86b9d49cbe9fe4b97bbe120d3902f82af9f7993a", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b9d49cbe9fe4b97bbe120d3902f82af9f7993a", "html_url": "https://github.com/rust-lang/rust/commit/86b9d49cbe9fe4b97bbe120d3902f82af9f7993a"}], "stats": {"total": 139, "additions": 120, "deletions": 19}, "files": [{"sha": "84e6ff648a38ff9d7652a05225a8ef980aac9c7d", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=1f94425864731772d131f102a9e97c7ffb1c5241", "patch": "@@ -202,23 +202,34 @@ impl ops::Not for Cfg {\n \n impl ops::BitAndAssign for Cfg {\n     fn bitand_assign(&mut self, other: Cfg) {\n-        if *self == other {\n-            return;\n-        }\n         match (self, other) {\n             (&mut Cfg::False, _) | (_, Cfg::True) => {}\n             (s, Cfg::False) => *s = Cfg::False,\n             (s @ &mut Cfg::True, b) => *s = b,\n-            (&mut Cfg::All(ref mut a), Cfg::All(ref mut b)) => a.append(b),\n-            (&mut Cfg::All(ref mut a), ref mut b) => a.push(mem::replace(b, Cfg::True)),\n+            (&mut Cfg::All(ref mut a), Cfg::All(ref mut b)) => {\n+                for c in b.drain(..) {\n+                    if !a.contains(&c) {\n+                        a.push(c);\n+                    }\n+                }\n+            }\n+            (&mut Cfg::All(ref mut a), ref mut b) => {\n+                if !a.contains(b) {\n+                    a.push(mem::replace(b, Cfg::True));\n+                }\n+            }\n             (s, Cfg::All(mut a)) => {\n                 let b = mem::replace(s, Cfg::True);\n-                a.push(b);\n+                if !a.contains(&b) {\n+                    a.push(b);\n+                }\n                 *s = Cfg::All(a);\n             }\n             (s, b) => {\n-                let a = mem::replace(s, Cfg::True);\n-                *s = Cfg::All(vec![a, b]);\n+                if *s != b {\n+                    let a = mem::replace(s, Cfg::True);\n+                    *s = Cfg::All(vec![a, b]);\n+                }\n             }\n         }\n     }\n@@ -234,23 +245,34 @@ impl ops::BitAnd for Cfg {\n \n impl ops::BitOrAssign for Cfg {\n     fn bitor_assign(&mut self, other: Cfg) {\n-        if *self == other {\n-            return;\n-        }\n         match (self, other) {\n             (&mut Cfg::True, _) | (_, Cfg::False) => {}\n             (s, Cfg::True) => *s = Cfg::True,\n             (s @ &mut Cfg::False, b) => *s = b,\n-            (&mut Cfg::Any(ref mut a), Cfg::Any(ref mut b)) => a.append(b),\n-            (&mut Cfg::Any(ref mut a), ref mut b) => a.push(mem::replace(b, Cfg::True)),\n+            (&mut Cfg::Any(ref mut a), Cfg::Any(ref mut b)) => {\n+                for c in b.drain(..) {\n+                    if !a.contains(&c) {\n+                        a.push(c);\n+                    }\n+                }\n+            }\n+            (&mut Cfg::Any(ref mut a), ref mut b) => {\n+                if !a.contains(b) {\n+                    a.push(mem::replace(b, Cfg::True));\n+                }\n+            }\n             (s, Cfg::Any(mut a)) => {\n                 let b = mem::replace(s, Cfg::True);\n-                a.push(b);\n+                if !a.contains(&b) {\n+                    a.push(b);\n+                }\n                 *s = Cfg::Any(a);\n             }\n             (s, b) => {\n-                let a = mem::replace(s, Cfg::True);\n-                *s = Cfg::Any(vec![a, b]);\n+                if *s != b {\n+                    let a = mem::replace(s, Cfg::True);\n+                    *s = Cfg::Any(vec![a, b]);\n+                }\n             }\n         }\n     }"}, {"sha": "d090bf325038f53def6469ba94aef723fa69bc40", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=1f94425864731772d131f102a9e97c7ffb1c5241", "patch": "@@ -87,6 +87,12 @@ fn test_cfg_and() {\n         x &= word_cfg(\"test3\");\n         assert_eq!(x, word_cfg(\"test3\"));\n \n+        x &= word_cfg(\"test3\");\n+        assert_eq!(x, word_cfg(\"test3\"));\n+\n+        x &= word_cfg(\"test4\");\n+        assert_eq!(x, Cfg::All(vec![word_cfg(\"test3\"), word_cfg(\"test4\")]));\n+\n         x &= word_cfg(\"test4\");\n         assert_eq!(x, Cfg::All(vec![word_cfg(\"test3\"), word_cfg(\"test4\")]));\n \n@@ -105,6 +111,18 @@ fn test_cfg_and() {\n             ])\n         );\n \n+        x &= Cfg::All(vec![word_cfg(\"test6\"), word_cfg(\"test7\")]);\n+        assert_eq!(\n+            x,\n+            Cfg::All(vec![\n+                word_cfg(\"test3\"),\n+                word_cfg(\"test4\"),\n+                word_cfg(\"test5\"),\n+                word_cfg(\"test6\"),\n+                word_cfg(\"test7\"),\n+            ])\n+        );\n+\n         let mut y = Cfg::Any(vec![word_cfg(\"a\"), word_cfg(\"b\")]);\n         y &= x;\n         assert_eq!(\n@@ -119,6 +137,14 @@ fn test_cfg_and() {\n             ])\n         );\n \n+        let mut z = word_cfg(\"test8\");\n+        z &= Cfg::All(vec![word_cfg(\"test9\"), word_cfg(\"test10\")]);\n+        assert_eq!(z, Cfg::All(vec![word_cfg(\"test9\"), word_cfg(\"test10\"), word_cfg(\"test8\")]));\n+\n+        let mut z = word_cfg(\"test11\");\n+        z &= Cfg::All(vec![word_cfg(\"test11\"), word_cfg(\"test12\")]);\n+        assert_eq!(z, Cfg::All(vec![word_cfg(\"test11\"), word_cfg(\"test12\")]));\n+\n         assert_eq!(\n             word_cfg(\"a\") & word_cfg(\"b\") & word_cfg(\"c\"),\n             Cfg::All(vec![word_cfg(\"a\"), word_cfg(\"b\"), word_cfg(\"c\")])\n@@ -145,6 +171,12 @@ fn test_cfg_or() {\n         x |= word_cfg(\"test3\");\n         assert_eq!(x, word_cfg(\"test3\"));\n \n+        x |= word_cfg(\"test3\");\n+        assert_eq!(x, word_cfg(\"test3\"));\n+\n+        x |= word_cfg(\"test4\");\n+        assert_eq!(x, Cfg::Any(vec![word_cfg(\"test3\"), word_cfg(\"test4\")]));\n+\n         x |= word_cfg(\"test4\");\n         assert_eq!(x, Cfg::Any(vec![word_cfg(\"test3\"), word_cfg(\"test4\")]));\n \n@@ -163,6 +195,18 @@ fn test_cfg_or() {\n             ])\n         );\n \n+        x |= Cfg::Any(vec![word_cfg(\"test6\"), word_cfg(\"test7\")]);\n+        assert_eq!(\n+            x,\n+            Cfg::Any(vec![\n+                word_cfg(\"test3\"),\n+                word_cfg(\"test4\"),\n+                word_cfg(\"test5\"),\n+                word_cfg(\"test6\"),\n+                word_cfg(\"test7\"),\n+            ])\n+        );\n+\n         let mut y = Cfg::All(vec![word_cfg(\"a\"), word_cfg(\"b\")]);\n         y |= x;\n         assert_eq!(\n@@ -177,6 +221,14 @@ fn test_cfg_or() {\n             ])\n         );\n \n+        let mut z = word_cfg(\"test8\");\n+        z |= Cfg::Any(vec![word_cfg(\"test9\"), word_cfg(\"test10\")]);\n+        assert_eq!(z, Cfg::Any(vec![word_cfg(\"test9\"), word_cfg(\"test10\"), word_cfg(\"test8\")]));\n+\n+        let mut z = word_cfg(\"test11\");\n+        z |= Cfg::Any(vec![word_cfg(\"test11\"), word_cfg(\"test12\")]);\n+        assert_eq!(z, Cfg::Any(vec![word_cfg(\"test11\"), word_cfg(\"test12\")]));\n+\n         assert_eq!(\n             word_cfg(\"a\") | word_cfg(\"b\") | word_cfg(\"c\"),\n             Cfg::Any(vec![word_cfg(\"a\"), word_cfg(\"b\"), word_cfg(\"c\")])"}, {"sha": "9ccc5d7882eb8d5e781d7bef316eeb20c3b386ba", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=1f94425864731772d131f102a9e97c7ffb1c5241", "patch": "@@ -1,15 +1,42 @@\n+// ignore-tidy-linelength\n+\n #![crate_name = \"foo\"]\n #![feature(doc_cfg)]\n \n-// @has 'foo/index.html'\n-// @!has '-' '//*[@class=\"stab portability\"]' 'feature=\"sync\" and'\n-// @has '-' '//*[@class=\"stab portability\"]' 'feature=\"sync\"'\n+// @has 'foo/struct.Foo.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n #[doc(cfg(feature = \"sync\"))]\n #[doc(cfg(feature = \"sync\"))]\n pub struct Foo;\n \n+// @has 'foo/bar/struct.Bar.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n+\n+// @has 'foo/baz/struct.Baz.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+#[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n+pub mod baz {\n+    #[doc(cfg(feature = \"sync\"))]\n+    pub struct Baz;\n+}\n+\n+// @has 'foo/qux/struct.Qux.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+#[doc(cfg(feature = \"sync\"))]\n+pub mod qux {\n+    #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n+    pub struct Qux;\n+}\n+\n+// @has 'foo/quux/struct.Quux.html'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" and foo and bar only.'\n+#[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n+pub mod quux {\n+    #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]\n+    pub struct Quux;\n+}"}]}