{"sha": "e8f36d5ea0a56250109d93656130b442d2e59e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjM2ZDVlYTBhNTYyNTAxMDlkOTM2NTYxMzBiNDQyZDJlNTllNGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-14T19:47:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-14T19:47:00Z"}, "message": "librustc: Replace `impl Type : Trait` with `impl Trait for Type`. rs=implflipping", "tree": {"sha": "d8b1be86a79e6b1c0a48141857421386cbbab34a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b1be86a79e6b1c0a48141857421386cbbab34a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f36d5ea0a56250109d93656130b442d2e59e4c", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f36d5ea0a56250109d93656130b442d2e59e4c", "html_url": "https://github.com/rust-lang/rust/commit/e8f36d5ea0a56250109d93656130b442d2e59e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f36d5ea0a56250109d93656130b442d2e59e4c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36edd256397d250ce35204ba1a0954609c25a20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36edd256397d250ce35204ba1a0954609c25a20a", "html_url": "https://github.com/rust-lang/rust/commit/36edd256397d250ce35204ba1a0954609c25a20a"}], "stats": {"total": 2230, "additions": 1115, "deletions": 1115}, "files": [{"sha": "89ffaeff63d935f6b2bb2a9e6b9f446f1e058dce", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -74,7 +74,7 @@ pub fn all_values(blk: fn(v: bool)) {\n pub pure fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n #[cfg(notest)]\n-impl bool : cmp::Eq {\n+impl cmp::Eq for bool {\n     pure fn eq(&self, other: &bool) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &bool) -> bool { (*self) != (*other) }\n }"}, {"sha": "daff7d116e8447bced8c5a244389e5b30c19c942", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -251,7 +251,7 @@ pub pure fn cmp(a: char, b: char) -> int {\n }\n \n #[cfg(notest)]\n-impl char : Eq {\n+impl Eq for char {\n     pure fn eq(&self, other: &char) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &char) -> bool { (*self) != (*other) }\n }"}, {"sha": "6580ce55ddd66dda39b5e1b9ca99ca8a42bc769e", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,7 +15,7 @@ pub trait Clone {\n     fn clone(&self) -> Self;\n }\n \n-impl (): Clone {\n+impl Clone for () {\n     #[inline(always)]\n     fn clone(&self) -> () { () }\n }"}, {"sha": "a7c8c1f4d66001aed32f3947d9838f755d6e91b3", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -84,7 +84,7 @@ struct Guard<T, U> {\n     cond: &Condition<T, U>\n }\n \n-impl<T, U> Guard<T, U> : Drop {\n+impl<T, U> Drop for Guard<T, U> {\n     fn finalize(&self) {\n         unsafe {\n             debug!(\"Guard: popping handler from TLS\");"}, {"sha": "0a96bd633d1eff930cc9e6e75b471ec8c0aefdcf", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -358,7 +358,7 @@ impl<A: Copy> DVec<A> {\n     }\n }\n \n-impl<A:Copy> DVec<A>: Index<uint,A> {\n+impl<A:Copy> Index<uint,A> for DVec<A> {\n     #[inline(always)]\n     pure fn index(&self, idx: uint) -> A {\n         self.get_elt(idx)"}, {"sha": "b4f4e7d343b0a2a0f43ecf6183ba7e689a71c375", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -59,7 +59,7 @@ pub trait HashUtil {\n     pure fn hash() -> u64;\n }\n \n-impl <A: Hash> A: HashUtil {\n+impl<A: Hash> HashUtil for A {\n     #[inline(always)]\n     pure fn hash() -> u64 { self.hash_keyed(0,0) }\n }\n@@ -74,7 +74,7 @@ pub trait Streaming {\n     fn reset();\n }\n \n-impl <A: IterBytes> A: Hash {\n+impl<A: IterBytes> Hash for A {\n     #[inline(always)]\n     pure fn hash_keyed(k0: u64, k1: u64) -> u64 {\n         unsafe {\n@@ -187,7 +187,7 @@ fn SipState(key0: u64, key1: u64) -> SipState {\n }\n \n \n-impl SipState : io::Writer {\n+impl io::Writer for SipState {\n \n     // Methods for io::writer\n     #[inline(always)]\n@@ -295,7 +295,7 @@ impl SipState : io::Writer {\n     }\n }\n \n-impl &SipState : Streaming {\n+impl Streaming for &SipState {\n \n     #[inline(always)]\n     fn input(buf: &[const u8]) {"}, {"sha": "1e9f05a35ebdc577650baafb4b66b1dba24797ac", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -240,7 +240,7 @@ pub mod linear {\n         }\n     }\n \n-    impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: BaseIter<(&K, &V)> {\n+    impl<K: Hash IterBytes Eq, V> BaseIter<(&K, &V)> for LinearMap<K, V> {\n         /// Visit all key-value pairs\n         pure fn each(&self, blk: fn(&(&self/K, &self/V)) -> bool) {\n             for uint::range(0, self.buckets.len()) |i| {\n@@ -257,15 +257,15 @@ pub mod linear {\n     }\n \n \n-    impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Container {\n+    impl<K: Hash IterBytes Eq, V> Container for LinearMap<K, V> {\n         /// Return the number of elements in the map\n         pure fn len(&self) -> uint { self.size }\n \n         /// Return true if the map contains no elements\n         pure fn is_empty(&self) -> bool { self.len() == 0 }\n     }\n \n-    impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Mutable {\n+    impl<K: Hash IterBytes Eq, V> Mutable for LinearMap<K, V> {\n         /// Clear the map, removing all key-value pairs.\n         fn clear(&mut self) {\n             for uint::range(0, self.buckets.len()) |idx| {\n@@ -275,7 +275,7 @@ pub mod linear {\n         }\n     }\n \n-    impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Map<K, V> {\n+    impl<K: Hash IterBytes Eq, V> Map<K, V> for LinearMap<K, V> {\n         /// Return true if the map contains a value for the specified key\n         pure fn contains_key(&self, k: &K) -> bool {\n             match self.bucket_for_key(k) {\n@@ -443,7 +443,7 @@ pub mod linear {\n         }\n     }\n \n-    impl<K: Hash IterBytes Eq, V: Eq> LinearMap<K, V>: Eq {\n+    impl<K: Hash IterBytes Eq, V: Eq> Eq for LinearMap<K, V> {\n         pure fn eq(&self, other: &LinearMap<K, V>) -> bool {\n             if self.len() != other.len() { return false; }\n \n@@ -464,13 +464,13 @@ pub mod linear {\n         priv map: LinearMap<T, ()>\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T>: BaseIter<T> {\n+    impl<T: Hash IterBytes Eq> BaseIter<T> for LinearSet<T> {\n         /// Visit all values in order\n         pure fn each(&self, f: fn(&T) -> bool) { self.map.each_key(f) }\n         pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T>: Eq {\n+    impl<T: Hash IterBytes Eq> Eq for LinearSet<T> {\n         pure fn eq(&self, other: &LinearSet<T>) -> bool {\n             self.map == other.map\n         }\n@@ -479,20 +479,20 @@ pub mod linear {\n         }\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T>: Container {\n+    impl<T: Hash IterBytes Eq> Container for LinearSet<T> {\n         /// Return the number of elements in the set\n         pure fn len(&self) -> uint { self.map.len() }\n \n         /// Return true if the set contains no elements\n         pure fn is_empty(&self) -> bool { self.map.is_empty() }\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T>: Mutable {\n+    impl<T: Hash IterBytes Eq> Mutable for LinearSet<T> {\n         /// Clear the set, removing all values.\n         fn clear(&mut self) { self.map.clear() }\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T>: Set<T> {\n+    impl<T: Hash IterBytes Eq> Set<T> for LinearSet<T> {\n         /// Return true if the set contains a value\n         pure fn contains(&self, value: &T) -> bool {\n             self.map.contains_key(value)"}, {"sha": "2173efe5ac66fc9e0dd554121625de571b142b62", "filename": "src/libcore/io.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -169,7 +169,7 @@ pub trait ReaderUtil {\n     fn read_i8(&self) -> i8;\n }\n \n-impl<T: Reader> T : ReaderUtil {\n+impl<T: Reader> ReaderUtil for T {\n \n     fn read_bytes(&self,len: uint) -> ~[u8] {\n         let mut bytes = vec::with_capacity(len);\n@@ -415,7 +415,7 @@ fn convert_whence(whence: SeekStyle) -> i32 {\n     };\n }\n \n-impl *libc::FILE: Reader {\n+impl Reader for *libc::FILE {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         unsafe {\n             do vec::as_mut_buf(bytes) |buf_p, buf_len| {\n@@ -460,7 +460,7 @@ struct Wrapper<T, C> {\n // A forwarding impl of reader that also holds on to a resource for the\n // duration of its lifetime.\n // FIXME there really should be a better way to do this // #2004\n-impl<R: Reader, C> Wrapper<R, C>: Reader {\n+impl<R: Reader, C> Reader for Wrapper<R, C> {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.base.read(bytes, len)\n     }\n@@ -527,7 +527,7 @@ pub struct BytesReader {\n     mut pos: uint\n }\n \n-impl BytesReader: Reader {\n+impl Reader for BytesReader {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         let count = uint::min(len, self.bytes.len() - self.pos);\n \n@@ -589,15 +589,15 @@ pub trait Writer {\n     fn get_type(&self) -> WriterType;\n }\n \n-impl<W: Writer, C> Wrapper<W, C>: Writer {\n+impl<W: Writer, C> Writer for Wrapper<W, C> {\n     fn write(&self, bs: &[const u8]) { self.base.write(bs); }\n     fn seek(&self, off: int, style: SeekStyle) { self.base.seek(off, style); }\n     fn tell(&self) -> uint { self.base.tell() }\n     fn flush(&self) -> int { self.base.flush() }\n     fn get_type(&self) -> WriterType { File }\n }\n \n-impl *libc::FILE: Writer {\n+impl Writer for *libc::FILE {\n     fn write(&self, v: &[const u8]) {\n         unsafe {\n             do vec::as_const_buf(v) |vbuf, len| {\n@@ -647,7 +647,7 @@ pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> Writer {\n     }\n }\n \n-impl fd_t: Writer {\n+impl Writer for fd_t {\n     fn write(&self, v: &[const u8]) {\n         unsafe {\n             let mut count = 0u;\n@@ -890,7 +890,7 @@ pub trait WriterUtil {\n     fn write_i8(&self, n: i8);\n }\n \n-impl<T: Writer> T : WriterUtil {\n+impl<T: Writer> WriterUtil for T {\n     fn write_char(&self, ch: char) {\n         if ch as uint < 128u {\n             self.write(&[ch as u8]);\n@@ -996,7 +996,7 @@ pub struct BytesWriter {\n     mut pos: uint,\n }\n \n-impl BytesWriter: Writer {\n+impl Writer for BytesWriter {\n     fn write(&self, v: &[const u8]) {\n         do self.bytes.swap |bytes| {\n             let mut bytes = move bytes;\n@@ -1112,7 +1112,7 @@ pub mod fsync {\n         arg: Arg<t>,\n     }\n \n-    impl<T: Copy> Res<T>: Drop {\n+    impl<T: Copy> Drop for Res<T> {\n         fn finalize(&self) {\n           match self.arg.opt_level {\n             None => (),"}, {"sha": "7c2b5d7ffcd40b639c7961a017d64dcb0c101335", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,14 +20,14 @@ use option::Option;\n \n use self::inst::{IMPL_T, EACH, SIZE_HINT};\n \n-impl<A> IMPL_T<A>: iter::BaseIter<A> {\n+impl<A> iter::BaseIter<A> for IMPL_T<A> {\n     #[inline(always)]\n     pure fn each(&self, blk: fn(v: &A) -> bool) { EACH(self, blk) }\n     #[inline(always)]\n     pure fn size_hint(&self) -> Option<uint> { SIZE_HINT(self) }\n }\n \n-impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n+impl<A> iter::ExtendedIter<A> for IMPL_T<A> {\n     #[inline(always)]\n     pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n@@ -60,14 +60,14 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n \n }\n \n-impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n+impl<A: Eq> iter::EqIter<A> for IMPL_T<A> {\n     #[inline(always)]\n     pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     #[inline(always)]\n     pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n-impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n+impl<A: Copy> iter::CopyableIter<A> for IMPL_T<A> {\n     #[inline(always)]\n     pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n@@ -80,7 +80,7 @@ impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n     }\n }\n \n-impl<A: Copy Ord> IMPL_T<A>: iter::CopyableOrderedIter<A> {\n+impl<A: Copy Ord> iter::CopyableOrderedIter<A> for IMPL_T<A> {\n     #[inline(always)]\n     pure fn min(&self) -> A { iter::min(self) }\n     #[inline(always)]"}, {"sha": "0f13a8485afdb4814a2b52234b2f03895cabd264", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -46,15 +46,15 @@ pub pure fn mut_ptr_eq<T>(a: @mut T, b: @mut T) -> bool {\n }\n \n #[cfg(notest)]\n-impl<T:Eq> @const T : Eq {\n+impl<T:Eq> Eq for @const T {\n     #[inline(always)]\n     pure fn eq(&self, other: &@const T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n     pure fn ne(&self, other: &@const T) -> bool { *(*self) != *(*other) }\n }\n \n #[cfg(notest)]\n-impl<T:Ord> @const T : Ord {\n+impl<T:Ord> Ord for @const T {\n     #[inline(always)]\n     pure fn lt(&self, other: &@const T) -> bool { *(*self) < *(*other) }\n     #[inline(always)]"}, {"sha": "62ed1d24d790ee379849cf69a6b1ac080105ce40", "filename": "src/libcore/nil.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnil.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,15 +17,15 @@ Functions for the unit type.\n use cmp::{Eq, Ord};\n \n #[cfg(notest)]\n-impl () : Eq {\n+impl Eq for () {\n     #[inline(always)]\n     pure fn eq(&self, _other: &()) -> bool { true }\n     #[inline(always)]\n     pure fn ne(&self, _other: &()) -> bool { false }\n }\n \n #[cfg(notest)]\n-impl () : Ord {\n+impl Ord for () {\n     #[inline(always)]\n     pure fn lt(&self, _other: &()) -> bool { false }\n     #[inline(always)]"}, {"sha": "8350ba42591d75a092abb2dc638f7132449099a4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -253,15 +253,15 @@ pub pure fn logarithm(n: f32, b: f32) -> f32 {\n }\n \n #[cfg(notest)]\n-impl f32 : cmp::Eq {\n+impl cmp::Eq for f32 {\n     #[inline(always)]\n     pure fn eq(&self, other: &f32) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     pure fn ne(&self, other: &f32) -> bool { (*self) != (*other) }\n }\n \n #[cfg(notest)]\n-impl f32 : cmp::Ord {\n+impl cmp::Ord for f32 {\n     #[inline(always)]\n     pure fn lt(&self, other: &f32) -> bool { (*self) < (*other) }\n     #[inline(always)]\n@@ -272,12 +272,12 @@ impl f32 : cmp::Ord {\n     pure fn gt(&self, other: &f32) -> bool { (*self) > (*other) }\n }\n \n-impl f32: num::Zero {\n+impl num::Zero for f32 {\n     #[inline(always)]\n     static pure fn zero() -> f32 { 0.0 }\n }\n \n-impl f32: num::One {\n+impl num::One for f32 {\n     #[inline(always)]\n     static pure fn one() -> f32 { 1.0 }\n }\n@@ -336,7 +336,7 @@ pub extern {\n     fn floorf32(val: f32) -> f32;\n }\n \n-impl f32: num::Round {\n+impl num::Round for f32 {\n     #[inline(always)]\n     pure fn round(&self, mode: num::RoundMode) -> f32 {\n         match mode {\n@@ -464,12 +464,12 @@ pub pure fn to_str_digits(num: f32, dig: uint) -> ~str {\n     r\n }\n \n-impl f32: to_str::ToStr {\n+impl to_str::ToStr for f32 {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n-impl f32: num::ToStrRadix {\n+impl num::ToStrRadix for f32 {\n     #[inline(always)]\n     pure fn to_str_radix(&self, rdx: uint) -> ~str {\n         to_str_radix(*self, rdx)\n@@ -564,12 +564,12 @@ pub pure fn from_str_radix(num: &str, rdx: uint) -> Option<f32> {\n     num::from_str_common(num, rdx, true, true, false, num::ExpNone, false)\n }\n \n-impl f32: from_str::FromStr {\n+impl from_str::FromStr for f32 {\n     #[inline(always)]\n     static pure fn from_str(val: &str) -> Option<f32> { from_str(val) }\n }\n \n-impl f32: num::FromStrRadix {\n+impl num::FromStrRadix for f32 {\n     #[inline(always)]\n     static pure fn from_str_radix(val: &str, rdx: uint) -> Option<f32> {\n         from_str_radix(val, rdx)"}, {"sha": "474067a1860c8673414ea23985a7f345532c7df4", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -278,15 +278,15 @@ pub pure fn logarithm(n: f64, b: f64) -> f64 {\n }\n \n #[cfg(notest)]\n-impl f64 : cmp::Eq {\n+impl cmp::Eq for f64 {\n     #[inline(always)]\n     pure fn eq(&self, other: &f64) -> bool { (*self) == (*other) }\n     #[inline(always)]\n     pure fn ne(&self, other: &f64) -> bool { (*self) != (*other) }\n }\n \n #[cfg(notest)]\n-impl f64 : cmp::Ord {\n+impl cmp::Ord for f64 {\n     #[inline(always)]\n     pure fn lt(&self, other: &f64) -> bool { (*self) < (*other) }\n     #[inline(always)]\n@@ -321,12 +321,12 @@ pub impl f64: NumCast {\n     #[inline(always)] pure fn to_float(&self) -> float { *self as float }\n }\n \n-impl f64: num::Zero {\n+impl num::Zero for f64 {\n     #[inline(always)]\n     static pure fn zero() -> f64 { 0.0 }\n }\n \n-impl f64: num::One {\n+impl num::One for f64 {\n     #[inline(always)]\n     static pure fn one() -> f64 { 1.0 }\n }\n@@ -361,7 +361,7 @@ pub extern {\n     fn floorf64(val: f64) -> f64;\n }\n \n-impl f64: num::Round {\n+impl num::Round for f64 {\n     #[inline(always)]\n     pure fn round(&self, mode: num::RoundMode) -> f64 {\n         match mode {\n@@ -489,12 +489,12 @@ pub pure fn to_str_digits(num: f64, dig: uint) -> ~str {\n     r\n }\n \n-impl f64: to_str::ToStr {\n+impl to_str::ToStr for f64 {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n-impl f64: num::ToStrRadix {\n+impl num::ToStrRadix for f64 {\n     #[inline(always)]\n     pure fn to_str_radix(&self, rdx: uint) -> ~str {\n         to_str_radix(*self, rdx)\n@@ -589,12 +589,12 @@ pub pure fn from_str_radix(num: &str, rdx: uint) -> Option<f64> {\n     num::from_str_common(num, rdx, true, true, false, num::ExpNone, false)\n }\n \n-impl f64: from_str::FromStr {\n+impl from_str::FromStr for f64 {\n     #[inline(always)]\n     static pure fn from_str(val: &str) -> Option<f64> { from_str(val) }\n }\n \n-impl f64: num::FromStrRadix {\n+impl num::FromStrRadix for f64 {\n     #[inline(always)]\n     static pure fn from_str_radix(val: &str, rdx: uint) -> Option<f64> {\n         from_str_radix(val, rdx)"}, {"sha": "0f0b721e4626a51c42d05a993ca1860341055b38", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -201,12 +201,12 @@ pub pure fn to_str_digits(num: float, digits: uint) -> ~str {\n     r\n }\n \n-impl float: to_str::ToStr {\n+impl to_str::ToStr for float {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { to_str_digits(*self, 8) }\n }\n \n-impl float: num::ToStrRadix {\n+impl num::ToStrRadix for float {\n     #[inline(always)]\n     pure fn to_str_radix(&self, radix: uint) -> ~str {\n         to_str_radix(*self, radix)\n@@ -301,12 +301,12 @@ pub pure fn from_str_radix(num: &str, radix: uint) -> Option<float> {\n     num::from_str_common(num, radix, true, true, false, num::ExpNone, false)\n }\n \n-impl float: from_str::FromStr {\n+impl from_str::FromStr for float {\n     #[inline(always)]\n     static pure fn from_str(val: &str) -> Option<float> { from_str(val) }\n }\n \n-impl float: num::FromStrRadix {\n+impl num::FromStrRadix for float {\n     #[inline(always)]\n     static pure fn from_str_radix(val: &str, radix: uint) -> Option<float> {\n         from_str_radix(val, radix)\n@@ -392,25 +392,25 @@ pub pure fn tan(x: float) -> float {\n }\n \n #[cfg(notest)]\n-impl float : Eq {\n+impl Eq for float {\n     pure fn eq(&self, other: &float) -> bool { (*self) == (*other) }\n     pure fn ne(&self, other: &float) -> bool { (*self) != (*other) }\n }\n \n #[cfg(notest)]\n-impl float : Ord {\n+impl Ord for float {\n     pure fn lt(&self, other: &float) -> bool { (*self) < (*other) }\n     pure fn le(&self, other: &float) -> bool { (*self) <= (*other) }\n     pure fn ge(&self, other: &float) -> bool { (*self) >= (*other) }\n     pure fn gt(&self, other: &float) -> bool { (*self) > (*other) }\n }\n \n-impl float: num::Zero {\n+impl num::Zero for float {\n     #[inline(always)]\n     static pure fn zero() -> float { 0.0 }\n }\n \n-impl float: num::One {\n+impl num::One for float {\n     #[inline(always)]\n     static pure fn one() -> float { 1.0 }\n }\n@@ -439,7 +439,7 @@ pub impl float: NumCast {\n     #[inline(always)] pure fn to_float(&self) -> float { *self          }\n }\n \n-impl float: num::Round {\n+impl num::Round for float {\n     #[inline(always)]\n     pure fn round(&self, mode: num::RoundMode) -> float {\n         match mode {"}, {"sha": "eaaa78b84f83772f2f28c8b2247e58348cc3a60d", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -147,7 +147,7 @@ pub pure fn abs(i: T) -> T {\n }\n \n #[cfg(notest)]\n-impl T : Ord {\n+impl Ord for T {\n     #[inline(always)]\n     pure fn lt(&self, other: &T) -> bool { return (*self) < (*other); }\n     #[inline(always)]\n@@ -159,24 +159,24 @@ impl T : Ord {\n }\n \n #[cfg(notest)]\n-impl T : Eq {\n+impl Eq for T {\n     #[inline(always)]\n     pure fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n     #[inline(always)]\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl T: num::Zero {\n+impl num::Zero for T {\n     #[inline(always)]\n     static pure fn zero() -> T { 0 }\n }\n \n-impl T: num::One {\n+impl num::One for T {\n     #[inline(always)]\n     static pure fn one() -> T { 1 }\n }\n \n-impl T: num::Round {\n+impl num::Round for T {\n     #[inline(always)]\n     pure fn round(&self, _: num::RoundMode) -> T { *self }\n \n@@ -236,14 +236,14 @@ pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n                                num::ExpNone, false)\n }\n \n-impl T : FromStr {\n+impl FromStr for T {\n     #[inline(always)]\n     static pure fn from_str(s: &str) -> Option<T> {\n         from_str(s)\n     }\n }\n \n-impl T : FromStrRadix {\n+impl FromStrRadix for T {\n     #[inline(always)]\n     static pure fn from_str_radix(&self, s: &str, radix: uint) -> Option<T> {\n         from_str_radix(s, radix)\n@@ -281,14 +281,14 @@ pub pure fn to_str_radix(num: T, radix: uint) -> ~str {\n #[inline(always)]\n pub pure fn str(i: T) -> ~str { to_str(i) }\n \n-impl T : ToStr {\n+impl ToStr for T {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {\n         to_str(*self)\n     }\n }\n \n-impl T : ToStrRadix {\n+impl ToStrRadix for T {\n     #[inline(always)]\n     pure fn to_str_radix(&self, radix: uint) -> ~str {\n         to_str_radix(*self, radix)"}, {"sha": "76725e3895b559fbce148a1aac350d1216b5f5d9", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -84,4 +84,4 @@ fn test_numcast() {\n     assert (20i16 == num::cast(20f));\n     assert (20i16 == num::cast(20f32));\n     assert (20i16 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1c2d60a80ee2bf504a765f7fa4a81bc6529c7a1c", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -84,4 +84,4 @@ fn test_numcast() {\n     assert (20i32 == num::cast(20f));\n     assert (20i32 == num::cast(20f32));\n     assert (20i32 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b1ef3f11fa4e134b9a441f8a8592828db82af1fd", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -111,7 +111,7 @@ pub pure fn compl(i: T) -> T {\n }\n \n #[cfg(notest)]\n-impl T : Ord {\n+impl Ord for T {\n     #[inline(always)]\n     pure fn lt(&self, other: &T) -> bool { (*self) < (*other) }\n     #[inline(always)]\n@@ -123,24 +123,24 @@ impl T : Ord {\n }\n \n #[cfg(notest)]\n-impl T : Eq {\n+impl Eq for T {\n     #[inline(always)]\n     pure fn eq(&self, other: &T) -> bool { return (*self) == (*other); }\n     #[inline(always)]\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl T: num::Zero {\n+impl num::Zero for T {\n     #[inline(always)]\n     static pure fn zero() -> T { 0 }\n }\n \n-impl T: num::One {\n+impl num::One for T {\n     #[inline(always)]\n     static pure fn one() -> T { 1 }\n }\n \n-impl T: num::Round {\n+impl num::Round for T {\n     #[inline(always)]\n     pure fn round(&self, _: num::RoundMode) -> T { *self }\n \n@@ -200,14 +200,14 @@ pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n                                num::ExpNone, false)\n }\n \n-impl T : FromStr {\n+impl FromStr for T {\n     #[inline(always)]\n     static pure fn from_str(s: &str) -> Option<T> {\n         from_str(s)\n     }\n }\n \n-impl T : FromStrRadix {\n+impl FromStrRadix for T {\n     #[inline(always)]\n     static pure fn from_str_radix(&self, s: &str, radix: uint) -> Option<T> {\n         from_str_radix(s, radix)\n@@ -245,14 +245,14 @@ pub pure fn to_str_radix(num: T, radix: uint) -> ~str {\n #[inline(always)]\n pub pure fn str(i: T) -> ~str { to_str(i) }\n \n-impl T : ToStr {\n+impl ToStr for T {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {\n         to_str(*self)\n     }\n }\n \n-impl T : ToStrRadix {\n+impl ToStrRadix for T {\n     #[inline(always)]\n     pure fn to_str_radix(&self, radix: uint) -> ~str {\n         to_str_radix(*self, radix)"}, {"sha": "57e1f5283f6641a47c5a6fcea8cfda8c598f7056", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -86,4 +86,4 @@ fn test_numcast() {\n     assert (20u16 == num::cast(20f));\n     assert (20u16 == num::cast(20f32));\n     assert (20u16 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7099d15c40b49e0bb0d4ea08982fc352f7786274", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -86,4 +86,4 @@ fn test_numcast() {\n     assert (20u64 == num::cast(20f));\n     assert (20u64 == num::cast(20f32));\n     assert (20u64 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f4d1482de905f585bc304a180c79445274009d30", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -86,4 +86,4 @@ fn test_numcast() {\n     assert (20u64 == num::cast(20f));\n     assert (20u64 == num::cast(20f32));\n     assert (20u64 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e2f8e00db81972e4687a202516105dcc27e44017", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -93,4 +93,4 @@ fn test_numcast() {\n     assert (20u8 == num::cast(20f));\n     assert (20u8 == num::cast(20f32));\n     assert (20u8 == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "cfb445cbdc8786a80b7778100811a1ded8b129b8", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -276,4 +276,4 @@ fn test_numcast() {\n     assert (20u == num::cast(20f));\n     assert (20u == num::cast(20f32));\n     assert (20u == num::cast(20f64));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "230386655e08e9cae315281f65b9977d6cc622df", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,15 +13,15 @@\n use cmp::{Eq, Ord};\n \n #[cfg(notest)]\n-impl<T:Eq> ~const T : Eq {\n+impl<T:Eq> Eq for ~const T {\n     #[inline(always)]\n     pure fn eq(&self, other: &~const T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n     pure fn ne(&self, other: &~const T) -> bool { *(*self) != *(*other) }\n }\n \n #[cfg(notest)]\n-impl<T:Ord> ~const T : Ord {\n+impl<T:Ord> Ord for ~const T {\n     #[inline(always)]\n     pure fn lt(&self, other: &~const T) -> bool { *(*self) < *(*other) }\n     #[inline(always)]"}, {"sha": "91690b6b5b0b220e502baade4890472221789200", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -363,7 +363,7 @@ impl Path {\n     }\n }\n \n-impl PosixPath : ToStr {\n+impl ToStr for PosixPath {\n     pure fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         if self.is_absolute {\n@@ -375,7 +375,7 @@ impl PosixPath : ToStr {\n \n // FIXME (#3227): when default methods in traits are working, de-duplicate\n // PosixPath and WindowsPath, most of their methods are common.\n-impl PosixPath : GenericPath {\n+impl GenericPath for PosixPath {\n \n     static pure fn from_str(s: &str) -> PosixPath {\n         let mut components = str::split_nonempty(s, |c| c == '/');\n@@ -526,7 +526,7 @@ impl PosixPath : GenericPath {\n }\n \n \n-impl WindowsPath : ToStr {\n+impl ToStr for WindowsPath {\n     pure fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         match self.host {\n@@ -545,7 +545,7 @@ impl WindowsPath : ToStr {\n }\n \n \n-impl WindowsPath : GenericPath {\n+impl GenericPath for WindowsPath {\n \n     static pure fn from_str(s: &str) -> WindowsPath {\n         let host;"}, {"sha": "a26a6b5f8ec3d1a3f102ee5f7f7d000a3a9cb6c9", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -112,7 +112,7 @@ enum State {\n     Terminated\n }\n \n-impl State : Eq {\n+impl Eq for State {\n     pure fn eq(&self, other: &State) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n@@ -207,7 +207,7 @@ pub trait HasBuffer {\n     fn set_buffer(b: *libc::c_void);\n }\n \n-impl<T: Owned> Packet<T>: HasBuffer {\n+impl<T: Owned> HasBuffer for Packet<T> {\n     fn set_buffer(b: *libc::c_void) {\n         self.header.buffer = b;\n     }\n@@ -561,7 +561,7 @@ pub pure fn peek<T: Owned, Tb: Owned>(p: &RecvPacketBuffered<T, Tb>) -> bool {\n     }\n }\n \n-impl<T: Owned, Tb: Owned> RecvPacketBuffered<T, Tb>: Peekable<T> {\n+impl<T: Owned, Tb: Owned> Peekable<T> for RecvPacketBuffered<T, Tb> {\n     pure fn peek() -> bool {\n         peek(&self)\n     }\n@@ -734,7 +734,7 @@ trait Selectable {\n     pure fn header() -> *PacketHeader;\n }\n \n-impl *PacketHeader: Selectable {\n+impl Selectable for *PacketHeader {\n     pure fn header() -> *PacketHeader { self }\n }\n \n@@ -783,7 +783,7 @@ pub struct SendPacketBuffered<T, Tbuffer> {\n     mut buffer: Option<BufferResource<Tbuffer>>,\n }\n \n-impl<T:Owned,Tbuffer:Owned> SendPacketBuffered<T,Tbuffer> : ::ops::Drop {\n+impl<T:Owned,Tbuffer:Owned> ::ops::Drop for SendPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {\n         //    debug!(\"drop send %?\", option::get(self.p));\n@@ -852,7 +852,7 @@ pub struct RecvPacketBuffered<T, Tbuffer> {\n     mut buffer: Option<BufferResource<Tbuffer>>,\n }\n \n-impl<T:Owned, Tbuffer:Owned> RecvPacketBuffered<T,Tbuffer> : ::ops::Drop {\n+impl<T:Owned, Tbuffer:Owned> ::ops::Drop for RecvPacketBuffered<T,Tbuffer> {\n     fn finalize(&self) {\n         //if self.p != none {\n         //    debug!(\"drop recv %?\", option::get(self.p));\n@@ -884,7 +884,7 @@ impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> {\n     }\n }\n \n-impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> : Selectable {\n+impl<T: Owned, Tbuffer: Owned> Selectable for RecvPacketBuffered<T, Tbuffer> {\n     pure fn header() -> *PacketHeader {\n         match self.p {\n           Some(packet) => unsafe {\n@@ -1036,7 +1036,7 @@ pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n     (Port_(Port_ { endp: Some(s) }), Chan_(Chan_{ endp: Some(c) }))\n }\n \n-impl<T: Owned> Chan<T>: GenericChan<T> {\n+impl<T: Owned> GenericChan<T> for Chan<T> {\n     fn send(x: T) {\n         let mut endp = None;\n         endp <-> self.endp;\n@@ -1045,7 +1045,7 @@ impl<T: Owned> Chan<T>: GenericChan<T> {\n     }\n }\n \n-impl<T: Owned> Chan<T>: GenericSmartChan<T> {\n+impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n \n     fn try_send(x: T) -> bool {\n         let mut endp = None;\n@@ -1060,7 +1060,7 @@ impl<T: Owned> Chan<T>: GenericSmartChan<T> {\n     }\n }\n \n-impl<T: Owned> Port<T>: GenericPort<T> {\n+impl<T: Owned> GenericPort<T> for Port<T> {\n     fn recv() -> T {\n         let mut endp = None;\n         endp <-> self.endp;\n@@ -1082,7 +1082,7 @@ impl<T: Owned> Port<T>: GenericPort<T> {\n     }\n }\n \n-impl<T: Owned> Port<T>: Peekable<T> {\n+impl<T: Owned> Peekable<T> for Port<T> {\n     pure fn peek() -> bool {\n         unsafe {\n             let mut endp = None;\n@@ -1097,7 +1097,7 @@ impl<T: Owned> Port<T>: Peekable<T> {\n     }\n }\n \n-impl<T: Owned> Port<T>: Selectable {\n+impl<T: Owned> Selectable for Port<T> {\n     pure fn header() -> *PacketHeader {\n         unsafe {\n             match self.endp {\n@@ -1132,7 +1132,7 @@ impl<T: Owned> PortSet<T> {\n     }\n }\n \n-impl<T: Owned> PortSet<T> : GenericPort<T> {\n+impl<T: Owned> GenericPort<T> for PortSet<T> {\n \n     fn try_recv() -> Option<T> {\n         let mut result = None;\n@@ -1162,7 +1162,7 @@ impl<T: Owned> PortSet<T> : GenericPort<T> {\n \n }\n \n-impl<T: Owned> PortSet<T> : Peekable<T> {\n+impl<T: Owned> Peekable<T> for PortSet<T> {\n     pure fn peek() -> bool {\n         // It'd be nice to use self.port.each, but that version isn't\n         // pure.\n@@ -1176,7 +1176,7 @@ impl<T: Owned> PortSet<T> : Peekable<T> {\n /// A channel that can be shared between many senders.\n pub type SharedChan<T> = private::Exclusive<Chan<T>>;\n \n-impl<T: Owned> SharedChan<T>: GenericChan<T> {\n+impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     fn send(x: T) {\n         let mut xx = Some(move x);\n         do self.with_imm |chan| {\n@@ -1187,7 +1187,7 @@ impl<T: Owned> SharedChan<T>: GenericChan<T> {\n     }\n }\n \n-impl<T: Owned> SharedChan<T>: GenericSmartChan<T> {\n+impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n     fn try_send(x: T) -> bool {\n         let mut xx = Some(move x);\n         do self.with_imm |chan| {"}, {"sha": "9df31bbd81f2c81ac7af9a89509e7c1f3b637256", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -291,7 +291,7 @@ pub unsafe fn clone_shared_mutable_state<T: Owned>(rc: &SharedMutableState<T>)\n     ArcDestruct((*rc).data)\n }\n \n-impl<T: Owned> SharedMutableState<T>: Clone {\n+impl<T: Owned> Clone for SharedMutableState<T> {\n     fn clone(&self) -> SharedMutableState<T> {\n         unsafe {\n             clone_shared_mutable_state(self)\n@@ -360,7 +360,7 @@ pub fn exclusive<T:Owned >(user_data: T) -> Exclusive<T> {\n     Exclusive { x: unsafe { shared_mutable_state(move data) } }\n }\n \n-impl<T: Owned> Exclusive<T>: Clone {\n+impl<T: Owned> Clone for Exclusive<T> {\n     // Duplicate an exclusive ARC, as std::arc::clone.\n     fn clone(&self) -> Exclusive<T> {\n         Exclusive { x: unsafe { clone_shared_mutable_state(&self.x) } }"}, {"sha": "d80631a29ee60b8f6613c03d1bc962ec672b4383", "filename": "src/libcore/private/at_exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fat_exit.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -95,4 +95,4 @@ fn test_at_exit_many() {\n             assert j > i;\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "af7197159ca8da87fe429971375fb69821ef0d78", "filename": "src/libcore/private/finally.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -39,7 +39,7 @@ pub trait Finally<T> {\n }\n \n #[cfg(stage0)]\n-impl<T> &fn() -> T: Finally<T> {\n+impl<T> Finally<T> for &fn() -> T {\n     // FIXME #4518: Should not require a mode here\n     fn finally(&self, +dtor: &fn()) -> T {\n         let _d = Finallyalizer {\n@@ -53,7 +53,7 @@ impl<T> &fn() -> T: Finally<T> {\n #[cfg(stage1)]\n #[cfg(stage2)]\n #[cfg(stage3)]\n-impl<T> &fn() -> T: Finally<T> {\n+impl<T> Finally<T> for &fn() -> T {\n     fn finally(&self, dtor: &fn()) -> T {\n         let _d = Finallyalizer {\n             dtor: dtor\n@@ -67,7 +67,7 @@ struct Finallyalizer {\n     dtor: &fn()\n }\n \n-impl Finallyalizer: Drop {\n+impl Drop for Finallyalizer {\n     fn finalize(&self) {\n         (self.dtor)();\n     }"}, {"sha": "621ead48abc1a803fdb63aeab177f916ef35aa67", "filename": "src/libcore/private/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fprivate%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fglobal.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -146,7 +146,7 @@ struct GlobalState {\n     map: LinearMap<uint, (*c_void, ~fn())>\n }\n \n-impl GlobalState: Drop {\n+impl Drop for GlobalState {\n     fn finalize(&self) {\n         for self.map.each_value |v| {\n             match v {"}, {"sha": "acadf079b3b673e86a028be58b027b42fc92036a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -194,7 +194,7 @@ pub extern {\n }\n \n /// Extension methods for immutable pointers\n-impl<T> *T: Ptr<T> {\n+impl<T> Ptr<T> for *T {\n     /// Returns true if the pointer is equal to the null pointer.\n     #[inline(always)]\n     pure fn is_null() -> bool { is_null(self) }\n@@ -209,7 +209,7 @@ impl<T> *T: Ptr<T> {\n }\n \n /// Extension methods for mutable pointers\n-impl<T> *mut T: Ptr<T> {\n+impl<T> Ptr<T> for *mut T {\n     /// Returns true if the pointer is equal to the null pointer.\n     #[inline(always)]\n     pure fn is_null() -> bool { is_null(self) }\n@@ -225,7 +225,7 @@ impl<T> *mut T: Ptr<T> {\n \n // Equality for pointers\n #[cfg(notest)]\n-impl<T> *const T : Eq {\n+impl<T> Eq for *const T {\n     #[inline(always)]\n     pure fn eq(&self, other: &*const T) -> bool {\n         unsafe {\n@@ -240,7 +240,7 @@ impl<T> *const T : Eq {\n \n // Comparison for pointers\n #[cfg(notest)]\n-impl<T> *const T : Ord {\n+impl<T> Ord for *const T {\n     #[inline(always)]\n     pure fn lt(&self, other: &*const T) -> bool {\n         unsafe {\n@@ -277,7 +277,7 @@ impl<T> *const T : Ord {\n \n // Equality for region pointers\n #[cfg(notest)]\n-impl<T:Eq> &const T : Eq {\n+impl<T:Eq> Eq for &const T {\n     #[inline(always)]\n     pure fn eq(&self, other: & &self/const T) -> bool {\n         return *(*self) == *(*other);\n@@ -290,7 +290,7 @@ impl<T:Eq> &const T : Eq {\n \n // Comparison for region pointers\n #[cfg(notest)]\n-impl<T:Ord> &const T : Ord {\n+impl<T:Ord> Ord for &const T {\n     #[inline(always)]\n     pure fn lt(&self, other: & &self/const T) -> bool {\n         *(*self) < *(*other)"}, {"sha": "47a0e11941cb07a3ac843de972d9653de29d9b79", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -24,91 +24,91 @@ pub trait Rand {\n     static fn rand(rng: rand::Rng) -> Self;\n }\n \n-impl int: Rand {\n+impl Rand for int {\n     static fn rand(rng: rand::Rng) -> int {\n         rng.gen_int()\n     }\n }\n \n-impl i8: Rand {\n+impl Rand for i8 {\n     static fn rand(rng: rand::Rng) -> i8 {\n         rng.gen_i8()\n     }\n }\n \n-impl i16: Rand {\n+impl Rand for i16 {\n     static fn rand(rng: rand::Rng) -> i16 {\n         rng.gen_i16()\n     }\n }\n \n-impl i32: Rand {\n+impl Rand for i32 {\n     static fn rand(rng: rand::Rng) -> i32 {\n         rng.gen_i32()\n     }\n }\n \n-impl i64: Rand {\n+impl Rand for i64 {\n     static fn rand(rng: rand::Rng) -> i64 {\n         rng.gen_i64()\n     }\n }\n \n-impl u8: Rand {\n+impl Rand for u8 {\n     static fn rand(rng: rand::Rng) -> u8 {\n         rng.gen_u8()\n     }\n }\n \n-impl u16: Rand {\n+impl Rand for u16 {\n     static fn rand(rng: rand::Rng) -> u16 {\n         rng.gen_u16()\n     }\n }\n \n-impl u32: Rand {\n+impl Rand for u32 {\n     static fn rand(rng: rand::Rng) -> u32 {\n         rng.gen_u32()\n     }\n }\n \n-impl u64: Rand {\n+impl Rand for u64 {\n     static fn rand(rng: rand::Rng) -> u64 {\n         rng.gen_u64()\n     }\n }\n \n-impl float: Rand {\n+impl Rand for float {\n     static fn rand(rng: rand::Rng) -> float {\n         rng.gen_float()\n     }\n }\n \n-impl f32: Rand {\n+impl Rand for f32 {\n     static fn rand(rng: rand::Rng) -> f32 {\n         rng.gen_f32()\n     }\n }\n \n-impl f64: Rand {\n+impl Rand for f64 {\n     static fn rand(rng: rand::Rng) -> f64 {\n         rng.gen_f64()\n     }\n }\n \n-impl char: Rand {\n+impl Rand for char {\n     static fn rand(rng: rand::Rng) -> char {\n         rng.gen_char()\n     }\n }\n \n-impl bool: Rand {\n+impl Rand for bool {\n     static fn rand(rng: rand::Rng) -> bool {\n         rng.gen_bool()\n     }\n }\n \n-impl<T: Rand> Option<T>: Rand {\n+impl<T: Rand> Rand for Option<T> {\n     static fn rand(rng: rand::Rng) -> Option<T> {\n         if rng.gen_bool() { Some(Rand::rand(rng)) }\n         else { None }\n@@ -377,7 +377,7 @@ fn RandRes(c: *rctx) -> RandRes {\n     }\n }\n \n-impl @RandRes: Rng {\n+impl Rng for @RandRes {\n     fn next() -> u32 {\n         unsafe {\n             return rustrt::rand_next((*self).c);\n@@ -418,7 +418,7 @@ struct XorShiftState {\n     mut w: u32,\n }\n \n-impl XorShiftState: Rng {\n+impl Rng for XorShiftState {\n     fn next() -> u32 {\n         let x = self.x;\n         let mut t = x ^ (x << 11);"}, {"sha": "eb407cf1128e9c5ca4b13ff610ecfa2a10b5586f", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -72,7 +72,7 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V> {\n }\n \n /// Abstract type-directed pointer-movement using the MovePtr trait\n-impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n+impl<V: TyVisitor MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     fn visit_bot(&self) -> bool {\n         self.align_to::<()>();\n         if ! self.inner.visit_bot() { return false; }"}, {"sha": "c2266f4fdb0423920e7cccf9dca04deef3a2521f", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -46,7 +46,7 @@ trait EscapedCharWriter {\n     fn write_escaped_char(ch: char);\n }\n \n-impl Writer : EscapedCharWriter {\n+impl EscapedCharWriter for Writer {\n     fn write_escaped_char(ch: char) {\n         match ch {\n             '\\t' => self.write_str(\"\\\\t\"),\n@@ -71,64 +71,64 @@ trait Repr {\n     fn write_repr(writer: @Writer);\n }\n \n-impl () : Repr {\n+impl Repr for () {\n     fn write_repr(writer: @Writer) { writer.write_str(\"()\"); }\n }\n \n-impl bool : Repr {\n+impl Repr for bool {\n     fn write_repr(writer: @Writer) {\n         writer.write_str(if self { \"true\" } else { \"false\" })\n     }\n }\n \n-impl int : Repr {\n+impl Repr for int {\n     fn write_repr(writer: @Writer) { writer.write_int(self); }\n }\n-impl i8 : Repr {\n+impl Repr for i8 {\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n-impl i16 : Repr {\n+impl Repr for i16 {\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n-impl i32 : Repr {\n+impl Repr for i32 {\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n-impl i64 : Repr {\n+impl Repr for i64 {\n     // FIXME #4424: This can lose precision.\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n \n-impl uint : Repr {\n+impl Repr for uint {\n     fn write_repr(writer: @Writer) { writer.write_uint(self); }\n }\n-impl u8 : Repr {\n+impl Repr for u8 {\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n-impl u16 : Repr {\n+impl Repr for u16 {\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n-impl u32 : Repr {\n+impl Repr for u32 {\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n-impl u64 : Repr {\n+impl Repr for u64 {\n     // FIXME #4424: This can lose precision.\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n \n-impl float : Repr {\n+impl Repr for float {\n     // FIXME #4423: This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n-impl f32 : Repr {\n+impl Repr for f32 {\n     // FIXME #4423 This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n-impl f64 : Repr {\n+impl Repr for f64 {\n     // FIXME #4423: This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n \n-impl char : Repr {\n+impl Repr for char {\n     fn write_repr(writer: @Writer) { writer.write_char(self); }\n }\n \n@@ -154,7 +154,7 @@ pub fn ReprVisitor(ptr: *c_void, writer: @Writer) -> ReprVisitor {\n                   writer: writer }\n }\n \n-impl ReprVisitor : MovePtr {\n+impl MovePtr for ReprVisitor {\n     #[inline(always)]\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void) {\n         self.ptr = adjustment(self.ptr);\n@@ -262,7 +262,7 @@ impl ReprVisitor {\n \n }\n \n-impl ReprVisitor : TyVisitor {\n+impl TyVisitor for ReprVisitor {\n     fn visit_bot(&self) -> bool {\n         self.writer.write_str(\"!\");\n         true"}, {"sha": "1761d7658386fda5e15954a7ad79f422f4c1ab92", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -262,7 +262,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n         }\n     }\n \n-    impl ProgRes: Program {\n+    impl Program for ProgRes {\n         fn get_id(&mut self) -> pid_t { return self.r.pid; }\n         fn input(&mut self) -> io::Writer {\n             io::fd_writer(self.r.in_fd, false)"}, {"sha": "7e7a34f1bab0c8e22f5180682b0871a8adac174b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -771,7 +771,7 @@ pure fn gt(a: &str, b: &str) -> bool {\n }\n \n #[cfg(notest)]\n-impl &str : Eq {\n+impl Eq for &str {\n     #[inline(always)]\n     pure fn eq(&self, other: & &self/str) -> bool {\n         eq_slice((*self), (*other))\n@@ -781,7 +781,7 @@ impl &str : Eq {\n }\n \n #[cfg(notest)]\n-impl ~str : Eq {\n+impl Eq for ~str {\n     #[inline(always)]\n     pure fn eq(&self, other: &~str) -> bool {\n         eq_slice((*self), (*other))\n@@ -791,7 +791,7 @@ impl ~str : Eq {\n }\n \n #[cfg(notest)]\n-impl @str : Eq {\n+impl Eq for @str {\n     #[inline(always)]\n     pure fn eq(&self, other: &@str) -> bool {\n         eq_slice((*self), (*other))\n@@ -801,7 +801,7 @@ impl @str : Eq {\n }\n \n #[cfg(notest)]\n-impl ~str : Ord {\n+impl Ord for ~str {\n     #[inline(always)]\n     pure fn lt(&self, other: &~str) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -813,7 +813,7 @@ impl ~str : Ord {\n }\n \n #[cfg(notest)]\n-impl &str : Ord {\n+impl Ord for &str {\n     #[inline(always)]\n     pure fn lt(&self, other: & &self/str) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -825,7 +825,7 @@ impl &str : Ord {\n }\n \n #[cfg(notest)]\n-impl @str : Ord {\n+impl Ord for @str {\n     #[inline(always)]\n     pure fn lt(&self, other: &@str) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -2134,7 +2134,7 @@ pub trait Trimmable {\n }\n \n /// Extension methods for strings\n-impl ~str: Trimmable {\n+impl Trimmable for ~str {\n     /// Returns a string with leading and trailing whitespace removed\n     #[inline]\n     pure fn trim() -> ~str { trim(self) }\n@@ -2151,7 +2151,7 @@ pub mod traits {\n     use ops::Add;\n     use str::append;\n \n-    impl ~str : Add<&str,~str> {\n+    impl Add<&str,~str> for ~str {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/str) -> ~str {\n             append(copy *self, (*rhs))\n@@ -2195,7 +2195,7 @@ pub trait StrSlice {\n }\n \n /// Extension methods for strings\n-impl &str: StrSlice {\n+impl StrSlice for &str {\n     /**\n      * Return true if a predicate matches all characters or if the string\n      * contains no characters"}, {"sha": "35bbc0347ee11dfe2fb2aa97e2ad95c34b7e302b", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -26,9 +26,9 @@ use rt::rust_task;\n type rust_task = libc::c_void;\n \n pub trait LocalData { }\n-impl<T: Durable> @T: LocalData { }\n+impl<T: Durable> LocalData for @T { }\n \n-impl LocalData: Eq {\n+impl Eq for LocalData {\n     pure fn eq(&self, other: &@LocalData) -> bool {\n         unsafe {\n             let ptr_a: (uint, uint) = cast::reinterpret_cast(&(*self));"}, {"sha": "09c558e3be599b358f17db1876d1045eb312f769", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -84,7 +84,7 @@ pub enum TaskResult {\n     Failure,\n }\n \n-impl TaskResult : Eq {\n+impl Eq for TaskResult {\n     pure fn eq(&self, other: &TaskResult) -> bool {\n         match ((*self), (*other)) {\n             (Success, Success) | (Failure, Failure) => true,"}, {"sha": "58ecf2560ace0445ae173dd08f46914069981cde", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -46,7 +46,7 @@ pub trait IterBytes {\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb);\n }\n \n-impl bool: IterBytes {\n+impl IterBytes for bool {\n     #[inline(always)]\n     pure fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         f([\n@@ -55,7 +55,7 @@ impl bool: IterBytes {\n     }\n }\n \n-impl u8: IterBytes {\n+impl IterBytes for u8 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         f([\n@@ -64,7 +64,7 @@ impl u8: IterBytes {\n     }\n }\n \n-impl u16: IterBytes {\n+impl IterBytes for u16 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         if lsb0 {\n@@ -81,7 +81,7 @@ impl u16: IterBytes {\n     }\n }\n \n-impl u32: IterBytes {\n+impl IterBytes for u32 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         if lsb0 {\n@@ -102,7 +102,7 @@ impl u32: IterBytes {\n     }\n }\n \n-impl u64: IterBytes {\n+impl IterBytes for u64 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         if lsb0 {\n@@ -131,35 +131,35 @@ impl u64: IterBytes {\n     }\n }\n \n-impl i8: IterBytes {\n+impl IterBytes for i8 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as u8).iter_bytes(lsb0, f)\n     }\n }\n \n-impl i16: IterBytes {\n+impl IterBytes for i16 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as u16).iter_bytes(lsb0, f)\n     }\n }\n \n-impl i32: IterBytes {\n+impl IterBytes for i32 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as u32).iter_bytes(lsb0, f)\n     }\n }\n \n-impl i64: IterBytes {\n+impl IterBytes for i64 {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as u64).iter_bytes(lsb0, f)\n     }\n }\n \n-impl char: IterBytes {\n+impl IterBytes for char {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as u32).iter_bytes(lsb0, f)\n@@ -190,14 +190,14 @@ pub mod x64 {\n     }\n }\n \n-impl int: IterBytes {\n+impl IterBytes for int {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as uint).iter_bytes(lsb0, f)\n     }\n }\n \n-impl<A: IterBytes> &[A]: IterBytes {\n+impl<A: IterBytes> IterBytes for &[A] {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         for (*self).each |elt| {\n@@ -208,7 +208,7 @@ impl<A: IterBytes> &[A]: IterBytes {\n     }\n }\n \n-impl<A: IterBytes, B: IterBytes> (A,B): IterBytes {\n+impl<A: IterBytes, B: IterBytes> IterBytes for (A,B) {\n   #[inline(always)]\n   pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n     match *self {\n@@ -219,7 +219,7 @@ impl<A: IterBytes, B: IterBytes> (A,B): IterBytes {\n   }\n }\n \n-impl<A: IterBytes, B: IterBytes, C: IterBytes> (A,B,C): IterBytes {\n+impl<A: IterBytes, B: IterBytes, C: IterBytes> IterBytes for (A,B,C) {\n   #[inline(always)]\n   pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n     match *self {\n@@ -235,14 +235,14 @@ pure fn borrow<A>(a: &x/[A]) -> &x/[A] {\n     a\n }\n \n-impl<A: IterBytes> ~[A]: IterBytes {\n+impl<A: IterBytes> IterBytes for ~[A] {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         borrow(*self).iter_bytes(lsb0, f)\n     }\n }\n \n-impl<A: IterBytes> @[A]: IterBytes {\n+impl<A: IterBytes> IterBytes for @[A] {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         borrow(*self).iter_bytes(lsb0, f)\n@@ -352,7 +352,7 @@ pub pure fn iter_bytes_7<A: IterBytes,\n     g.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n \n-impl &str: IterBytes {\n+impl IterBytes for &str {\n     #[inline(always)]\n     pure fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         do str::byte_slice(*self) |bytes| {\n@@ -361,7 +361,7 @@ impl &str: IterBytes {\n     }\n }\n \n-impl ~str: IterBytes {\n+impl IterBytes for ~str {\n     #[inline(always)]\n     pure fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         do str::byte_slice(*self) |bytes| {\n@@ -370,7 +370,7 @@ impl ~str: IterBytes {\n     }\n }\n \n-impl @str: IterBytes {\n+impl IterBytes for @str {\n     #[inline(always)]\n     pure fn iter_bytes(&self, _lsb0: bool, f: Cb) {\n         do str::byte_slice(*self) |bytes| {\n@@ -379,7 +379,7 @@ impl @str: IterBytes {\n     }\n }\n \n-impl<A: IterBytes> Option<A>: IterBytes {\n+impl<A: IterBytes> IterBytes for Option<A> {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         match *self {\n@@ -389,21 +389,21 @@ impl<A: IterBytes> Option<A>: IterBytes {\n     }\n }\n \n-impl<A: IterBytes> &A: IterBytes {\n+impl<A: IterBytes> IterBytes for &A {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (**self).iter_bytes(lsb0, f);\n     }\n }\n \n-impl<A: IterBytes> @A: IterBytes {\n+impl<A: IterBytes> IterBytes for @A {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (**self).iter_bytes(lsb0, f);\n     }\n }\n \n-impl<A: IterBytes> ~A: IterBytes {\n+impl<A: IterBytes> IterBytes for ~A {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (**self).iter_bytes(lsb0, f);\n@@ -412,7 +412,7 @@ impl<A: IterBytes> ~A: IterBytes {\n \n // NB: raw-pointer IterBytes does _not_ dereference\n // to the target; it just gives you the pointer-bytes.\n-impl<A> *const A: IterBytes {\n+impl<A> IterBytes for *const A {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: Cb) {\n         (*self as uint).iter_bytes(lsb0, f);\n@@ -424,7 +424,7 @@ trait ToBytes {\n     fn to_bytes(&self, lsb0: bool) -> ~[u8];\n }\n \n-impl<A: IterBytes> A: ToBytes {\n+impl<A: IterBytes> ToBytes for A {\n     fn to_bytes(&self, lsb0: bool) -> ~[u8] {\n         do io::with_bytes_writer |wr| {\n             for self.iter_bytes(lsb0) |bytes| {"}, {"sha": "a1e77a494d5bd251b3781059fb2ff1b8f2290faf", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -22,28 +22,28 @@ pub trait ToStr {\n     pure fn to_str(&self) -> ~str;\n }\n \n-impl bool: ToStr {\n+impl ToStr for bool {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ::bool::to_str(*self) }\n }\n-impl (): ToStr {\n+impl ToStr for () {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ~\"()\" }\n }\n-impl ~str: ToStr {\n+impl ToStr for ~str {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { copy *self }\n }\n-impl &str: ToStr {\n+impl ToStr for &str {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n }\n-impl @str: ToStr {\n+impl ToStr for @str {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n }\n \n-impl<A: ToStr, B: ToStr> (A, B): ToStr {\n+impl<A: ToStr, B: ToStr> ToStr for (A, B) {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {\n         // FIXME(#4760): this causes an llvm assertion\n@@ -55,7 +55,7 @@ impl<A: ToStr, B: ToStr> (A, B): ToStr {\n         }\n     }\n }\n-impl<A: ToStr, B: ToStr, C: ToStr> (A, B, C): ToStr {\n+impl<A: ToStr, B: ToStr, C: ToStr> ToStr for (A, B, C) {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {\n         // FIXME(#4760): this causes an llvm assertion\n@@ -72,7 +72,7 @@ impl<A: ToStr, B: ToStr, C: ToStr> (A, B, C): ToStr {\n     }\n }\n \n-impl<A: ToStr> ~[A]: ToStr {\n+impl<A: ToStr> ToStr for ~[A] {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {\n         unsafe {\n@@ -92,11 +92,11 @@ impl<A: ToStr> ~[A]: ToStr {\n     }\n }\n \n-impl<A: ToStr> @A: ToStr {\n+impl<A: ToStr> ToStr for @A {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ~\"@\" + (**self).to_str() }\n }\n-impl<A: ToStr> ~A: ToStr {\n+impl<A: ToStr> ToStr for ~A {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str { ~\"~\" + (**self).to_str() }\n }"}, {"sha": "23235104e9fc607d834848f9bd0a4c95bed457a2", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ pub trait CopyableTuple<T, U> {\n     pure fn swap() -> (U, T);\n }\n \n-impl<T: Copy, U: Copy> (T, U): CopyableTuple<T, U> {\n+impl<T: Copy, U: Copy> CopyableTuple<T, U> for (T, U) {\n \n     /// Return the first element of self\n     #[inline(always)]\n@@ -50,7 +50,7 @@ pub trait ImmutableTuple<T, U> {\n     pure fn second_ref(&self) -> &self/U;\n }\n \n-impl<T, U> (T, U): ImmutableTuple<T, U> {\n+impl<T, U> ImmutableTuple<T, U> for (T, U) {\n     #[inline(always)]\n     pure fn first_ref(&self) -> &self/T {\n         match *self {\n@@ -70,7 +70,7 @@ pub trait ExtendedTupleOps<A,B> {\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C];\n }\n \n-impl<A: Copy, B: Copy> (&[A], &[B]): ExtendedTupleOps<A,B> {\n+impl<A: Copy, B: Copy> ExtendedTupleOps<A,B> for (&[A], &[B]) {\n     #[inline(always)]\n     fn zip(&self) -> ~[(A, B)] {\n         match *self {\n@@ -90,7 +90,7 @@ impl<A: Copy, B: Copy> (&[A], &[B]): ExtendedTupleOps<A,B> {\n     }\n }\n \n-impl<A: Copy, B: Copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n+impl<A: Copy, B: Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n \n     #[inline(always)]\n     fn zip(&self) -> ~[(A, B)] {\n@@ -112,7 +112,7 @@ impl<A: Copy, B: Copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n }\n \n #[cfg(notest)]\n-impl<A: Eq, B: Eq> (A, B) : Eq {\n+impl<A: Eq, B: Eq> Eq for (A, B) {\n     #[inline(always)]\n     pure fn eq(&self, other: &(A, B)) -> bool {\n         match (*self) {\n@@ -128,7 +128,7 @@ impl<A: Eq, B: Eq> (A, B) : Eq {\n }\n \n #[cfg(notest)]\n-impl<A: Ord, B: Ord> (A, B) : Ord {\n+impl<A: Ord, B: Ord> Ord for (A, B) {\n     #[inline(always)]\n     pure fn lt(&self, other: &(A, B)) -> bool {\n         match (*self) {\n@@ -153,7 +153,7 @@ impl<A: Ord, B: Ord> (A, B) : Ord {\n }\n \n #[cfg(notest)]\n-impl<A: Eq, B: Eq, C: Eq> (A, B, C) : Eq {\n+impl<A: Eq, B: Eq, C: Eq> Eq for (A, B, C) {\n     #[inline(always)]\n     pure fn eq(&self, other: &(A, B, C)) -> bool {\n         match (*self) {\n@@ -170,7 +170,7 @@ impl<A: Eq, B: Eq, C: Eq> (A, B, C) : Eq {\n }\n \n #[cfg(notest)]\n-impl<A: Ord, B: Ord, C: Ord> (A, B, C) : Ord {\n+impl<A: Ord, B: Ord, C: Ord> Ord for (A, B, C) {\n     #[inline(always)]\n     pure fn lt(&self, other: &(A, B, C)) -> bool {\n         match (*self) {"}, {"sha": "3808e13be1cbc03d0a48072055e8e5f8c0289df6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -1559,7 +1559,7 @@ pure fn eq<T: Eq>(a: &[T], b: &[T]) -> bool {\n }\n \n #[cfg(notest)]\n-impl<T: Eq> &[T] : Eq {\n+impl<T: Eq> Eq for &[T] {\n     #[inline(always)]\n     pure fn eq(&self, other: & &self/[T]) -> bool { eq((*self), (*other)) }\n     #[inline(always)]\n@@ -1568,15 +1568,15 @@ impl<T: Eq> &[T] : Eq {\n \n \n #[cfg(notest)]\n-impl<T: Eq> ~[T] : Eq {\n+impl<T: Eq> Eq for ~[T] {\n     #[inline(always)]\n     pure fn eq(&self, other: &~[T]) -> bool { eq((*self), (*other)) }\n     #[inline(always)]\n     pure fn ne(&self, other: &~[T]) -> bool { !(*self).eq(other) }\n }\n \n #[cfg(notest)]\n-impl<T: Eq> @[T] : Eq {\n+impl<T: Eq> Eq for @[T] {\n     #[inline(always)]\n     pure fn eq(&self, other: &@[T]) -> bool { eq((*self), (*other)) }\n     #[inline(always)]\n@@ -1605,7 +1605,7 @@ pure fn ge<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(a, b) }\n pure fn gt<T: Ord>(a: &[T], b: &[T]) -> bool { lt(b, a)  }\n \n #[cfg(notest)]\n-impl<T: Ord> &[T] : Ord {\n+impl<T: Ord> Ord for &[T] {\n     #[inline(always)]\n     pure fn lt(&self, other: & &self/[T]) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -1617,7 +1617,7 @@ impl<T: Ord> &[T] : Ord {\n }\n \n #[cfg(notest)]\n-impl<T: Ord> ~[T] : Ord {\n+impl<T: Ord> Ord for ~[T] {\n     #[inline(always)]\n     pure fn lt(&self, other: &~[T]) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -1629,7 +1629,7 @@ impl<T: Ord> ~[T] : Ord {\n }\n \n #[cfg(notest)]\n-impl<T: Ord> @[T] : Ord {\n+impl<T: Ord> Ord for @[T] {\n     #[inline(always)]\n     pure fn lt(&self, other: &@[T]) -> bool { lt((*self), (*other)) }\n     #[inline(always)]\n@@ -1646,15 +1646,15 @@ pub mod traits {\n     use ops::Add;\n     use vec::append;\n \n-    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n+    impl<T: Copy> Add<&[const T],~[T]> for ~[T] {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> ~[T] {\n             append(copy *self, (*rhs))\n         }\n     }\n }\n \n-impl<T> &[const T]: Container {\n+impl<T> Container for &[const T] {\n     /// Returns true if a vector contains no elements\n     #[inline]\n     pure fn is_empty(&self) -> bool { is_empty(*self) }\n@@ -1673,7 +1673,7 @@ pub trait CopyableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T: Copy> &[const T]: CopyableVector<T> {\n+impl<T: Copy> CopyableVector<T> for &[const T] {\n     /// Returns the first element of a vector\n     #[inline]\n     pure fn head(&self) -> T { head(*self) }\n@@ -1709,7 +1709,7 @@ pub trait ImmutableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T> &[T]: ImmutableVector<T> {\n+impl<T> ImmutableVector<T> for &[T] {\n     /// Return a slice that points into another slice.\n     #[inline]\n     pure fn view(&self, start: uint, end: uint) -> &self/[T] {\n@@ -1780,7 +1780,7 @@ pub trait ImmutableEqVector<T: Eq> {\n     pure fn rposition_elem(&self, t: &T) -> Option<uint>;\n }\n \n-impl<T: Eq> &[T]: ImmutableEqVector<T> {\n+impl<T: Eq> ImmutableEqVector<T> for &[T] {\n     /**\n      * Find the first index matching some predicate\n      *\n@@ -1825,7 +1825,7 @@ pub trait ImmutableCopyableVector<T> {\n }\n \n /// Extension methods for vectors\n-impl<T: Copy> &[T]: ImmutableCopyableVector<T> {\n+impl<T: Copy> ImmutableCopyableVector<T> for &[T] {\n     /**\n      * Construct a new vector from the elements of a vector for which some\n      * predicate holds.\n@@ -1876,7 +1876,7 @@ pub trait OwnedVector<T> {\n     fn partition(self, f: pure fn(&T) -> bool) -> (~[T], ~[T]);\n }\n \n-impl<T> ~[T]: OwnedVector<T> {\n+impl<T> OwnedVector<T> for ~[T] {\n     #[inline]\n     fn push(&mut self, t: T) {\n         push(self, t);\n@@ -1947,7 +1947,7 @@ impl<T> ~[T]: OwnedVector<T> {\n     }\n }\n \n-impl<T> ~[T]: Mutable {\n+impl<T> Mutable for ~[T] {\n     /// Clear the vector, removing all values.\n     fn clear(&mut self) { self.truncate(0) }\n }\n@@ -1959,7 +1959,7 @@ pub trait OwnedCopyableVector<T: Copy> {\n     fn grow_set(&mut self, index: uint, initval: &T, val: T);\n }\n \n-impl<T: Copy> ~[T]: OwnedCopyableVector<T> {\n+impl<T: Copy> OwnedCopyableVector<T> for ~[T] {\n     #[inline]\n     fn push_all(&mut self, rhs: &[const T]) {\n         push_all(self, rhs);\n@@ -1985,7 +1985,7 @@ trait OwnedEqVector<T: Eq> {\n     fn dedup(&mut self);\n }\n \n-impl<T: Eq> ~[T]: OwnedEqVector<T> {\n+impl<T: Eq> OwnedEqVector<T> for ~[T] {\n     #[inline]\n     fn dedup(&mut self) {\n         dedup(self)\n@@ -2218,7 +2218,7 @@ pub mod bytes {\n // This cannot be used with iter-trait.rs because of the region pointer\n // required in the slice.\n \n-impl<A> &[A]: iter::BaseIter<A> {\n+impl<A> iter::BaseIter<A> for &[A] {\n     pub pure fn each(&self, blk: fn(v: &A) -> bool) {\n         // FIXME(#2263)---should be able to call each(self, blk)\n         for each(*self) |e| {\n@@ -2231,7 +2231,7 @@ impl<A> &[A]: iter::BaseIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A> ~[A]: iter::BaseIter<A> {\n+impl<A> iter::BaseIter<A> for ~[A] {\n     pub pure fn each(&self, blk: fn(v: &A) -> bool) {\n         // FIXME(#2263)---should be able to call each(self, blk)\n         for each(*self) |e| {\n@@ -2244,7 +2244,7 @@ impl<A> ~[A]: iter::BaseIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A> @[A]: iter::BaseIter<A> {\n+impl<A> iter::BaseIter<A> for @[A] {\n     pub pure fn each(&self, blk: fn(v: &A) -> bool) {\n         // FIXME(#2263)---should be able to call each(self, blk)\n         for each(*self) |e| {\n@@ -2256,7 +2256,7 @@ impl<A> @[A]: iter::BaseIter<A> {\n     pure fn size_hint(&self) -> Option<uint> { Some(len(*self)) }\n }\n \n-impl<A> &[A]: iter::ExtendedIter<A> {\n+impl<A> iter::ExtendedIter<A> for &[A] {\n     pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n     }\n@@ -2282,7 +2282,7 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A> ~[A]: iter::ExtendedIter<A> {\n+impl<A> iter::ExtendedIter<A> for ~[A] {\n     pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n     }\n@@ -2308,7 +2308,7 @@ impl<A> ~[A]: iter::ExtendedIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A> @[A]: iter::ExtendedIter<A> {\n+impl<A> iter::ExtendedIter<A> for @[A] {\n     pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n     }\n@@ -2333,24 +2333,24 @@ impl<A> @[A]: iter::ExtendedIter<A> {\n     }\n }\n \n-impl<A: Eq> &[A]: iter::EqIter<A> {\n+impl<A: Eq> iter::EqIter<A> for &[A] {\n     pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Eq> ~[A]: iter::EqIter<A> {\n+impl<A: Eq> iter::EqIter<A> for ~[A] {\n     pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Eq> @[A]: iter::EqIter<A> {\n+impl<A: Eq> iter::EqIter<A> for @[A] {\n     pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n-impl<A: Copy> &[A]: iter::CopyableIter<A> {\n+impl<A: Copy> iter::CopyableIter<A> for &[A] {\n     pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n@@ -2361,7 +2361,7 @@ impl<A: Copy> &[A]: iter::CopyableIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Copy> ~[A]: iter::CopyableIter<A> {\n+impl<A: Copy> iter::CopyableIter<A> for ~[A] {\n     pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n@@ -2372,7 +2372,7 @@ impl<A: Copy> ~[A]: iter::CopyableIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Copy> @[A]: iter::CopyableIter<A> {\n+impl<A: Copy> iter::CopyableIter<A> for @[A] {\n     pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n     }\n@@ -2382,24 +2382,24 @@ impl<A: Copy> @[A]: iter::CopyableIter<A> {\n     }\n }\n \n-impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {\n+impl<A: Copy Ord> iter::CopyableOrderedIter<A> for &[A] {\n     pure fn min(&self) -> A { iter::min(self) }\n     pure fn max(&self) -> A { iter::max(self) }\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Copy Ord> ~[A]: iter::CopyableOrderedIter<A> {\n+impl<A: Copy Ord> iter::CopyableOrderedIter<A> for ~[A] {\n     pure fn min(&self) -> A { iter::min(self) }\n     pure fn max(&self) -> A { iter::max(self) }\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A: Copy Ord> @[A]: iter::CopyableOrderedIter<A> {\n+impl<A: Copy Ord> iter::CopyableOrderedIter<A> for @[A] {\n     pure fn min(&self) -> A { iter::min(self) }\n     pure fn max(&self) -> A { iter::max(self) }\n }\n \n-impl<A:Copy> &[A] : iter::CopyableNonstrictIter<A> {\n+impl<A:Copy> iter::CopyableNonstrictIter<A> for &[A] {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;\n         while i < self.len() {\n@@ -2410,7 +2410,7 @@ impl<A:Copy> &[A] : iter::CopyableNonstrictIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A:Copy> ~[A] : iter::CopyableNonstrictIter<A> {\n+impl<A:Copy> iter::CopyableNonstrictIter<A> for ~[A] {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;\n         while i < self.len() {\n@@ -2421,7 +2421,7 @@ impl<A:Copy> ~[A] : iter::CopyableNonstrictIter<A> {\n }\n \n // FIXME(#4148): This should be redundant\n-impl<A:Copy> @[A] : iter::CopyableNonstrictIter<A> {\n+impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;\n         while i < self.len() {"}, {"sha": "3564e10790d3a0328fcedb6e1893892307cdab63", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -120,7 +120,7 @@ enum Family {\n     InheritedField         // N\n }\n \n-impl Family : cmp::Eq {\n+impl cmp::Eq for Family {\n     pure fn eq(&self, other: &Family) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }"}, {"sha": "ed4ea665aafcd5ba6305d314b6209a26b04e7a83", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -41,7 +41,7 @@ pub fn mk_filesearch(maybe_sysroot: Option<Path>,\n     type filesearch_impl = {sysroot: Path,\n                             addl_lib_search_paths: ~[Path],\n                             target_triple: ~str};\n-    impl filesearch_impl: FileSearch {\n+    impl FileSearch for filesearch_impl {\n         fn sysroot() -> Path { /*bad*/copy self.sysroot }\n         fn lib_search_paths() -> ~[Path] {\n             let mut paths = /*bad*/copy self.addl_lib_search_paths;"}, {"sha": "3b84216b2e6db6660ed4a44be37a5f6eb9b4873b", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -224,19 +224,19 @@ impl extended_decode_ctxt {\n     }\n }\n \n-impl ast::def_id: tr_intern {\n+impl tr_intern for ast::def_id {\n     fn tr_intern(xcx: extended_decode_ctxt) -> ast::def_id {\n         xcx.tr_intern_def_id(self)\n     }\n }\n \n-impl ast::def_id: tr {\n+impl tr for ast::def_id {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def_id {\n         xcx.tr_def_id(self)\n     }\n }\n \n-impl span: tr {\n+impl tr for span {\n     fn tr(xcx: extended_decode_ctxt) -> span {\n         xcx.tr_span(self)\n     }\n@@ -246,7 +246,7 @@ trait def_id_encoder_helpers {\n     fn emit_def_id(did: ast::def_id);\n }\n \n-impl<S: serialize::Encoder> S: def_id_encoder_helpers {\n+impl<S: serialize::Encoder> def_id_encoder_helpers for S {\n     fn emit_def_id(did: ast::def_id) {\n         did.encode(&self)\n     }\n@@ -256,7 +256,7 @@ trait def_id_decoder_helpers {\n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id;\n }\n \n-impl<D: serialize::Decoder> D: def_id_decoder_helpers {\n+impl<D: serialize::Decoder> def_id_decoder_helpers for D {\n \n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id {\n         let did: ast::def_id = Decodable::decode(&self);\n@@ -402,7 +402,7 @@ fn decode_def(xcx: extended_decode_ctxt, doc: ebml::Doc) -> ast::def {\n     def.tr(xcx)\n }\n \n-impl ast::def: tr {\n+impl tr for ast::def {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def {\n         match self {\n           ast::def_fn(did, p) => { ast::def_fn(did.tr(xcx), p) }\n@@ -447,7 +447,7 @@ impl ast::def: tr {\n // ______________________________________________________________________\n // Encoding and decoding of adjustment information\n \n-impl ty::AutoAdjustment: tr {\n+impl tr for ty::AutoAdjustment {\n     fn tr(xcx: extended_decode_ctxt) -> ty::AutoAdjustment {\n         ty::AutoAdjustment {\n             autoderefs: self.autoderefs,\n@@ -456,7 +456,7 @@ impl ty::AutoAdjustment: tr {\n     }\n }\n \n-impl ty::AutoRef: tr {\n+impl tr for ty::AutoRef {\n     fn tr(xcx: extended_decode_ctxt) -> ty::AutoRef {\n         ty::AutoRef {\n             kind: self.kind,\n@@ -466,7 +466,7 @@ impl ty::AutoRef: tr {\n     }\n }\n \n-impl ty::Region: tr {\n+impl tr for ty::Region {\n     fn tr(xcx: extended_decode_ctxt) -> ty::Region {\n         match self {\n             ty::re_bound(br) => ty::re_bound(br.tr(xcx)),\n@@ -477,7 +477,7 @@ impl ty::Region: tr {\n     }\n }\n \n-impl ty::bound_region: tr {\n+impl tr for ty::bound_region {\n     fn tr(xcx: extended_decode_ctxt) -> ty::bound_region {\n         match self {\n             ty::br_anon(_) | ty::br_named(_) | ty::br_self |\n@@ -499,14 +499,14 @@ trait ebml_decoder_helper {\n     fn read_freevar_entry(xcx: extended_decode_ctxt) -> freevar_entry;\n }\n \n-impl reader::Decoder: ebml_decoder_helper {\n+impl ebml_decoder_helper for reader::Decoder {\n     fn read_freevar_entry(xcx: extended_decode_ctxt) -> freevar_entry {\n         let fv: freevar_entry = Decodable::decode(&self);\n         fv.tr(xcx)\n     }\n }\n \n-impl freevar_entry: tr {\n+impl tr for freevar_entry {\n     fn tr(xcx: extended_decode_ctxt) -> freevar_entry {\n         freevar_entry {\n             def: self.def.tr(xcx),\n@@ -522,14 +522,14 @@ trait capture_var_helper {\n     fn read_capture_var(xcx: extended_decode_ctxt) -> moves::CaptureVar;\n }\n \n-impl reader::Decoder : capture_var_helper {\n+impl capture_var_helper for reader::Decoder {\n     fn read_capture_var(xcx: extended_decode_ctxt) -> moves::CaptureVar {\n         let cvar: moves::CaptureVar = Decodable::decode(&self);\n         cvar.tr(xcx)\n     }\n }\n \n-impl moves::CaptureVar : tr {\n+impl tr for moves::CaptureVar {\n     fn tr(xcx: extended_decode_ctxt) -> moves::CaptureVar {\n         moves::CaptureVar {\n             def: self.def.tr(xcx),\n@@ -562,7 +562,7 @@ fn encode_method_map_entry(ecx: @e::encode_ctxt,\n     }\n }\n \n-impl reader::Decoder: read_method_map_entry_helper {\n+impl read_method_map_entry_helper for reader::Decoder {\n     fn read_method_map_entry(xcx: extended_decode_ctxt) -> method_map_entry {\n         do self.read_rec {\n             method_map_entry {\n@@ -583,7 +583,7 @@ impl reader::Decoder: read_method_map_entry_helper {\n     }\n }\n \n-impl method_origin: tr {\n+impl tr for method_origin {\n     fn tr(xcx: extended_decode_ctxt) -> method_origin {\n         match self {\n           typeck::method_static(did) => {\n@@ -673,7 +673,7 @@ trait vtable_decoder_helpers {\n     fn read_vtable_origin(xcx: extended_decode_ctxt) -> typeck::vtable_origin;\n }\n \n-impl reader::Decoder: vtable_decoder_helpers {\n+impl vtable_decoder_helpers for reader::Decoder {\n     fn read_vtable_res(xcx: extended_decode_ctxt) -> typeck::vtable_res {\n         @self.read_to_vec(|| self.read_vtable_origin(xcx) )\n     }\n@@ -731,7 +731,7 @@ trait get_ty_str_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt;\n }\n \n-impl @e::encode_ctxt: get_ty_str_ctxt {\n+impl get_ty_str_ctxt for @e::encode_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt {\n         @tyencode::ctxt {diag: self.tcx.sess.diagnostic(),\n                         ds: e::def_to_str,\n@@ -750,7 +750,7 @@ trait ebml_writer_helpers {\n     fn emit_tpbt(ecx: @e::encode_ctxt, tpbt: ty::ty_param_bounds_and_ty);\n }\n \n-impl writer::Encoder: ebml_writer_helpers {\n+impl ebml_writer_helpers for writer::Encoder {\n     fn emit_ty(ecx: @e::encode_ctxt, ty: ty::t) {\n         do self.emit_opaque {\n             e::write_type(ecx, self, ty)\n@@ -803,7 +803,7 @@ trait write_tag_and_id {\n     fn id(id: ast::node_id);\n }\n \n-impl writer::Encoder: write_tag_and_id {\n+impl write_tag_and_id for writer::Encoder {\n     fn tag(tag_id: c::astencode_tag, f: fn()) {\n         do self.wr_tag(tag_id as uint) { f() }\n     }\n@@ -981,7 +981,7 @@ trait doc_decoder_helpers {\n     fn opt_child(tag: c::astencode_tag) -> Option<ebml::Doc>;\n }\n \n-impl ebml::Doc: doc_decoder_helpers {\n+impl doc_decoder_helpers for ebml::Doc {\n     fn as_int() -> int { reader::doc_as_u64(self) as int }\n     fn opt_child(tag: c::astencode_tag) -> Option<ebml::Doc> {\n         reader::maybe_get_doc(self, tag as uint)\n@@ -1000,7 +1000,7 @@ trait ebml_decoder_decoder_helpers {\n                       did: ast::def_id) -> ast::def_id;\n }\n \n-impl reader::Decoder: ebml_decoder_decoder_helpers {\n+impl ebml_decoder_decoder_helpers for reader::Decoder {\n     fn read_arg(xcx: extended_decode_ctxt) -> ty::arg {\n         do self.read_opaque |doc| {\n             tydecode::parse_arg_data(\n@@ -1198,7 +1198,7 @@ trait fake_ext_ctxt {\n type fake_session = parse::parse_sess;\n \n #[cfg(test)]\n-impl fake_session: fake_ext_ctxt {\n+impl fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {"}, {"sha": "6e5146818b0cc1db3f73b8ba6c52f1338b6b6630", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -106,7 +106,7 @@ pub enum level {\n     allow, warn, deny, forbid\n }\n \n-impl level : cmp::Eq {\n+impl cmp::Eq for level {\n     pure fn eq(&self, other: &level) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }"}, {"sha": "d65c4e0158055f6fbbafe68882d52a8e8687adf3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -141,12 +141,12 @@ pub type last_use_map = HashMap<node_id, @DVec<node_id>>;\n enum Variable = uint;\n enum LiveNode = uint;\n \n-impl Variable : cmp::Eq {\n+impl cmp::Eq for Variable {\n     pure fn eq(&self, other: &Variable) -> bool { *(*self) == *(*other) }\n     pure fn ne(&self, other: &Variable) -> bool { *(*self) != *(*other) }\n }\n \n-impl LiveNode : cmp::Eq {\n+impl cmp::Eq for LiveNode {\n     pure fn eq(&self, other: &LiveNode) -> bool { *(*self) == *(*other) }\n     pure fn ne(&self, other: &LiveNode) -> bool { *(*self) != *(*other) }\n }\n@@ -158,7 +158,7 @@ enum LiveNodeKind {\n     ExitNode\n }\n \n-impl LiveNodeKind : cmp::Eq {\n+impl cmp::Eq for LiveNodeKind {\n     pure fn eq(&self, other: &LiveNodeKind) -> bool {\n         match (*self) {\n             FreeVarNode(e0a) => {\n@@ -224,11 +224,11 @@ pub fn check_crate(tcx: ty::ctxt,\n     return last_use_map;\n }\n \n-impl LiveNode: to_str::ToStr {\n+impl to_str::ToStr for LiveNode {\n     pure fn to_str(&self) -> ~str { fmt!(\"ln(%u)\", **self) }\n }\n \n-impl Variable: to_str::ToStr {\n+impl to_str::ToStr for Variable {\n     pure fn to_str(&self) -> ~str { fmt!(\"v(%u)\", **self) }\n }\n "}, {"sha": "bc48519ffda4c9c8b7d7eb357c5a037bf2c54136", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -179,7 +179,7 @@ pub impl FnType {\n \n enum LLVM_ABIInfo { LLVM_ABIInfo }\n \n-impl LLVM_ABIInfo: ABIInfo {\n+impl ABIInfo for LLVM_ABIInfo {\n     fn compute_info(&self,\n                     atys: &[TypeRef],\n                     rty: TypeRef,"}, {"sha": "a3c5e094ea819514299ce8bf6f964948be9cad8c", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -32,7 +32,7 @@ enum x86_64_reg_class {\n     memory_class\n }\n \n-impl x86_64_reg_class : cmp::Eq {\n+impl cmp::Eq for x86_64_reg_class {\n     pure fn eq(&self, other: &x86_64_reg_class) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n@@ -402,7 +402,7 @@ fn x86_64_tys(atys: &[TypeRef],\n \n enum X86_64_ABIInfo { X86_64_ABIInfo }\n \n-impl X86_64_ABIInfo: ABIInfo {\n+impl ABIInfo for X86_64_ABIInfo {\n     fn compute_info(&self,\n                     atys: &[TypeRef],\n                     rty: TypeRef,"}, {"sha": "6af6adbf68dca6f75652d50b99e39722b33643f6", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -165,7 +165,7 @@ impl Dest {\n     }\n }\n \n-impl Dest : cmp::Eq {\n+impl cmp::Eq for Dest {\n     pure fn eq(&self, other: &Dest) -> bool {\n         match ((*self), (*other)) {\n             (SaveIn(e0a), SaveIn(e0b)) => e0a == e0b,\n@@ -1516,7 +1516,7 @@ pub enum cast_kind {\n     cast_other,\n }\n \n-impl cast_kind : cmp::Eq {\n+impl cmp::Eq for cast_kind {\n     pure fn eq(&self, other: &cast_kind) -> bool {\n         match ((*self), (*other)) {\n             (cast_pointer, cast_pointer) => true,"}, {"sha": "f7fb5b771aa74adfbb916481d0d46c9bbeae2d3d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -111,7 +111,7 @@ pub struct creader_cache_key {\n \n type creader_cache = HashMap<creader_cache_key, t>;\n \n-impl creader_cache_key : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for creader_cache_key {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_3(&self.cnum, &self.pos, &self.len, lsb0, f);\n     }\n@@ -125,7 +125,7 @@ struct intern_key {\n // NB: Do not replace this with #[deriving_eq]. The automatically-derived\n // implementation will not recurse through sty and you will get stack\n // exhaustion.\n-impl intern_key : cmp::Eq {\n+impl cmp::Eq for intern_key {\n     pure fn eq(&self, other: &intern_key) -> bool {\n         unsafe {\n             *self.sty == *other.sty && self.o_def_id == other.o_def_id\n@@ -136,7 +136,7 @@ impl intern_key : cmp::Eq {\n     }\n }\n \n-impl intern_key : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for intern_key {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         unsafe {\n             to_bytes::iter_bytes_2(&*self.sty, &self.o_def_id, lsb0, f);\n@@ -155,7 +155,7 @@ pub type opt_region_variance = Option<region_variance>;\n #[auto_decode]\n pub enum region_variance { rv_covariant, rv_invariant, rv_contravariant }\n \n-impl region_variance : cmp::Eq {\n+impl cmp::Eq for region_variance {\n     pure fn eq(&self, other: &region_variance) -> bool {\n         match ((*self), (*other)) {\n             (rv_covariant, rv_covariant) => true,\n@@ -372,13 +372,13 @@ pub struct FnSig {\n     output: t\n }\n \n-impl BareFnTy : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for BareFnTy {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_3(&self.purity, &self.abi, &self.sig, lsb0, f)\n     }\n }\n \n-impl ClosureTy : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for ClosureTy {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_5(&self.purity, &self.sigil, &self.onceness,\n                                &self.region, &self.sig, lsb0, f)\n@@ -391,7 +391,7 @@ pub struct param_ty {\n     def_id: def_id\n }\n \n-impl param_ty : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for param_ty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.idx, &self.def_id, lsb0, f)\n     }\n@@ -597,7 +597,7 @@ pub enum InferTy {\n     FloatVar(FloatVid)\n }\n \n-impl InferTy : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for InferTy {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           TyVar(ref tv) => to_bytes::iter_bytes_2(&0u8, tv, lsb0, f),\n@@ -614,7 +614,7 @@ pub enum InferRegion {\n     ReSkolemized(uint, bound_region)\n }\n \n-impl InferRegion : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for InferRegion {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n             ReVar(ref rv) => to_bytes::iter_bytes_2(&0u8, rv, lsb0, f),\n@@ -623,7 +623,7 @@ impl InferRegion : to_bytes::IterBytes {\n     }\n }\n \n-impl InferRegion : cmp::Eq {\n+impl cmp::Eq for InferRegion {\n     pure fn eq(&self, other: &InferRegion) -> bool {\n         match ((*self), *other) {\n             (ReVar(rva), ReVar(rvb)) => {\n@@ -640,7 +640,7 @@ impl InferRegion : cmp::Eq {\n     }\n }\n \n-impl param_bound : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for param_bound {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           bound_copy => 0u8.iter_bytes(lsb0, f),\n@@ -1817,19 +1817,19 @@ pub impl TypeContents {\n     }\n }\n \n-impl TypeContents : ops::Add<TypeContents,TypeContents> {\n+impl ops::Add<TypeContents,TypeContents> for TypeContents {\n     pure fn add(&self, other: &TypeContents) -> TypeContents {\n         TypeContents {bits: self.bits | other.bits}\n     }\n }\n \n-impl TypeContents : ops::Sub<TypeContents,TypeContents> {\n+impl ops::Sub<TypeContents,TypeContents> for TypeContents {\n     pure fn sub(&self, other: &TypeContents) -> TypeContents {\n         TypeContents {bits: self.bits & !other.bits}\n     }\n }\n \n-impl TypeContents : ToStr {\n+impl ToStr for TypeContents {\n     pure fn to_str(&self) -> ~str {\n         fmt!(\"TypeContents(%s)\", u32::to_str_radix(self.bits, 2))\n     }\n@@ -2586,7 +2586,7 @@ pub fn index_sty(cx: ctxt, sty: &sty) -> Option<mt> {\n     }\n }\n \n-impl bound_region : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for bound_region {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           ty::br_self => 0u8.iter_bytes(lsb0, f),\n@@ -2606,7 +2606,7 @@ impl bound_region : to_bytes::IterBytes {\n     }\n }\n \n-impl Region : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for Region {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           re_bound(ref br) =>\n@@ -2626,7 +2626,7 @@ impl Region : to_bytes::IterBytes {\n     }\n }\n \n-impl vstore : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for vstore {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           vstore_fixed(ref u) =>\n@@ -2641,44 +2641,44 @@ impl vstore : to_bytes::IterBytes {\n     }\n }\n \n-impl substs : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for substs {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_3(&self.self_r,\n                                  &self.self_ty,\n                                  &self.tps, lsb0, f)\n     }\n }\n \n-impl mt : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for mt {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_2(&self.ty,\n                                  &self.mutbl, lsb0, f)\n     }\n }\n \n-impl field : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for field {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_2(&self.ident,\n                                  &self.mt, lsb0, f)\n     }\n }\n \n-impl arg : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for arg {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.mode,\n                                &self.ty, lsb0, f)\n     }\n }\n \n-impl FnSig : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for FnSig {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.inputs,\n                                &self.output,\n                                lsb0, f);\n     }\n }\n \n-impl sty : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for sty {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           ty_nil => 0u8.iter_bytes(lsb0, f),\n@@ -4383,14 +4383,14 @@ pub fn get_impl_id(tcx: ctxt, trait_id: def_id, self_ty: t) -> def_id {\n     }\n }\n \n-impl mt : cmp::Eq {\n+impl cmp::Eq for mt {\n     pure fn eq(&self, other: &mt) -> bool {\n         (*self).ty == (*other).ty && (*self).mutbl == (*other).mutbl\n     }\n     pure fn ne(&self, other: &mt) -> bool { !(*self).eq(other) }\n }\n \n-impl vstore : cmp::Eq {\n+impl cmp::Eq for vstore {\n     pure fn eq(&self, other: &vstore) -> bool {\n         match (*self) {\n             vstore_fixed(e0a) => {\n@@ -4422,7 +4422,7 @@ impl vstore : cmp::Eq {\n     pure fn ne(&self, other: &vstore) -> bool { !(*self).eq(other) }\n }\n \n-impl Region : cmp::Eq {\n+impl cmp::Eq for Region {\n     pure fn eq(&self, other: &Region) -> bool {\n         match (*self) {\n             re_bound(e0a) => {\n@@ -4460,7 +4460,7 @@ impl Region : cmp::Eq {\n     pure fn ne(&self, other: &Region) -> bool { !(*self).eq(other) }\n }\n \n-impl bound_region : cmp::Eq {\n+impl cmp::Eq for bound_region {\n     pure fn eq(&self, other: &bound_region) -> bool {\n         match (*self) {\n             br_self => {\n@@ -4498,7 +4498,7 @@ impl bound_region : cmp::Eq {\n     pure fn ne(&self, other: &bound_region) -> bool { !(*self).eq(other) }\n }\n \n-impl param_bound : cmp::Eq {\n+impl cmp::Eq for param_bound {\n     pure fn eq(&self, other: &param_bound) -> bool {\n         match (*self) {\n             bound_copy => {"}, {"sha": "f6af29c1a8df9930a61446da815c887ec5ad8c1f", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -490,7 +490,7 @@ trait then {\n         -> Result<T,ty::type_err>;\n }\n \n-impl ures: then {\n+impl then for ures {\n     fn then<T:Copy>(f: fn() -> Result<T,ty::type_err>)\n         -> Result<T,ty::type_err> {\n         self.chain(|_i| f())\n@@ -501,7 +501,7 @@ trait ToUres {\n     fn to_ures() -> ures;\n }\n \n-impl<T> cres<T>: ToUres {\n+impl<T> ToUres for cres<T> {\n     fn to_ures() -> ures {\n         match self {\n           Ok(ref _v) => Ok(()),\n@@ -514,7 +514,7 @@ trait CresCompare<T> {\n     fn compare(t: T, f: fn() -> ty::type_err) -> cres<T>;\n }\n \n-impl<T:Copy Eq> cres<T>: CresCompare<T> {\n+impl<T:Copy Eq> CresCompare<T> for cres<T> {\n     fn compare(t: T, f: fn() -> ty::type_err) -> cres<T> {\n         do self.chain |s| {\n             if s == t {"}, {"sha": "c838a52a6892f18ec8f89cd40e3bda761ae54ad4", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -568,7 +568,7 @@ enum Constraint {\n     ConstrainVarSubReg(RegionVid, Region)\n }\n \n-impl Constraint : cmp::Eq {\n+impl cmp::Eq for Constraint {\n     pure fn eq(&self, other: &Constraint) -> bool {\n         match ((*self), (*other)) {\n             (ConstrainVarSubVar(v0a, v1a), ConstrainVarSubVar(v0b, v1b)) => {\n@@ -588,7 +588,7 @@ impl Constraint : cmp::Eq {\n     pure fn ne(&self, other: &Constraint) -> bool { !(*self).eq(other) }\n }\n \n-impl Constraint : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for Constraint {\n    pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           ConstrainVarSubVar(ref v0, ref v1) =>\n@@ -608,14 +608,14 @@ struct TwoRegions {\n     b: Region,\n }\n \n-impl TwoRegions : cmp::Eq {\n+impl cmp::Eq for TwoRegions {\n     pure fn eq(&self, other: &TwoRegions) -> bool {\n         (*self).a == (*other).a && (*self).b == (*other).b\n     }\n     pure fn ne(&self, other: &TwoRegions) -> bool { !(*self).eq(other) }\n }\n \n-impl TwoRegions : to_bytes::IterBytes {\n+impl to_bytes::IterBytes for TwoRegions {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.a, &self.b, lsb0, f)\n     }"}, {"sha": "fa02c14b6c906eb73f28bb1c4908e689d06ecde3", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -279,7 +279,7 @@ trait get_and_find_region {\n     fn find(br: ty::bound_region) -> Option<ty::Region>;\n }\n \n-impl isr_alist: get_and_find_region {\n+impl get_and_find_region for isr_alist {\n     fn get(br: ty::bound_region) -> ty::Region {\n         self.find(br).get()\n     }"}, {"sha": "f07701f05e7996abcaa6fcc90a8160a017820f9d", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -59,7 +59,7 @@ pub struct Srv {\n     ch: SharedChan<Msg>\n }\n \n-impl Srv: Clone {\n+impl Clone for Srv {\n     fn clone(&self) -> Srv {\n         Srv {\n             ch: self.ch.clone()"}, {"sha": "f75f4b83a1d621ddf3a731509ef60dd126ec0ccd", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -28,7 +28,7 @@ pub enum OutputFormat {\n     pub PandocHtml\n }\n \n-impl OutputFormat : cmp::Eq {\n+impl cmp::Eq for OutputFormat {\n     pure fn eq(&self, other: &OutputFormat) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n@@ -43,7 +43,7 @@ pub enum OutputStyle {\n     pub DocPerMod\n }\n \n-impl OutputStyle : cmp::Eq {\n+impl cmp::Eq for OutputStyle {\n     pure fn eq(&self, other: &OutputStyle) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }"}, {"sha": "3c45c4a6fa03673b867ed04691d25c9f5b18e1f4", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -187,7 +187,7 @@ trait TheShunnedHouse {\n }\n \n /// Whatever\n-impl OmNomNomy: TheShunnedHouse {\n+impl TheShunnedHouse for OmNomNomy {\n     fn dingy_house(&self, _unkempt_yard: int) {\n     }\n "}, {"sha": "40617e13b8d5e8539b6b36aeddd2fbd9ae521a6e", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -284,7 +284,7 @@ pub trait PageUtils {\n     fn types(&self) -> ~[TyDoc];\n }\n \n-impl ~[Page]: PageUtils {\n+impl PageUtils for ~[Page] {\n \n     fn mods(&self) -> ~[ModDoc] {\n         do vec::filter_mapped(*self) |page| {\n@@ -363,7 +363,7 @@ pub trait Item {\n     pure fn item(&self) -> ItemDoc;\n }\n \n-impl ItemTag: Item {\n+impl Item for ItemTag {\n     pure fn item(&self) -> ItemDoc {\n         match self {\n           &doc::ModTag(ref doc) => copy doc.item,\n@@ -379,31 +379,31 @@ impl ItemTag: Item {\n     }\n }\n \n-impl SimpleItemDoc: Item {\n+impl Item for SimpleItemDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl ModDoc: Item {\n+impl Item for ModDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl NmodDoc: Item {\n+impl Item for NmodDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl EnumDoc: Item {\n+impl Item for EnumDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl TraitDoc: Item {\n+impl Item for TraitDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl ImplDoc: Item {\n+impl Item for ImplDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n-impl StructDoc: Item {\n+impl Item for StructDoc {\n     pure fn item(&self) -> ItemDoc { copy self.item }\n }\n \n@@ -416,7 +416,7 @@ pub trait ItemUtils {\n     pure fn sections(&self) -> ~[Section];\n }\n \n-impl<A:Item> A: ItemUtils {\n+impl<A:Item> ItemUtils for A {\n     pure fn id(&self) -> AstId {\n         self.item().id\n     }"}, {"sha": "b9e598dc19d6699cc36d0cf4f358328fe6aabe38", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -35,7 +35,7 @@ pub struct Fold<T> {\n     fold_struct: FoldStruct<T>\n }\n \n-impl<T: Clone> Fold<T>: Clone {\n+impl<T: Clone> Clone for Fold<T> {\n     fn clone(&self) -> Fold<T> {\n         Fold {\n             ctxt: self.ctxt.clone(),"}, {"sha": "f0d9effe6fc517abd993ec68041b3258a57d791b", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -43,7 +43,7 @@ pub trait WriterUtils {\n     fn write_done(&self);\n }\n \n-impl Writer: WriterUtils {\n+impl WriterUtils for Writer {\n     fn write_str(&self, str: ~str) {\n         (*self)(Write(str));\n     }"}, {"sha": "7dc8d0202cbf10df0814f2503a36e9467d36f470", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -34,7 +34,7 @@ struct Ctxt {\n     mut path: ~[~str]\n }\n \n-impl Ctxt: Clone {\n+impl Clone for Ctxt {\n     fn clone(&self) -> Ctxt {\n         Ctxt {\n             srv: self.srv.clone(),"}, {"sha": "3ec9d17c854bec0e4d6e0a5a475d4b43b3c1c6bd", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,6 +17,6 @@ pub struct NominalOp<T> {\n     op: T\n }\n \n-impl<T: Copy> NominalOp<T>: Clone {\n+impl<T: Copy> Clone for NominalOp<T> {\n     fn clone(&self) -> NominalOp<T> { copy *self }\n }"}, {"sha": "59e278f17960ff38d7f14c0eab0c47a8dcc7f60e", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -117,7 +117,7 @@ pub fn unwrap<T: Const Owned>(rc: ARC<T>) -> T {\n     unsafe { unwrap_shared_mutable_state(move x) }\n }\n \n-impl<T: Const Owned> ARC<T>: Clone {\n+impl<T: Const Owned> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n         clone(self)\n     }\n@@ -148,7 +148,7 @@ pub fn mutex_arc_with_condvars<T: Owned>(user_data: T,\n     MutexARC { x: unsafe { shared_mutable_state(move data) } }\n }\n \n-impl<T: Owned> MutexARC<T>: Clone {\n+impl<T: Owned> Clone for MutexARC<T> {\n     /// Duplicate a mutex-protected ARC, as arc::clone.\n     fn clone(&self) -> MutexARC<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n@@ -247,7 +247,7 @@ struct PoisonOnFail {\n     failed: *mut bool,\n }\n \n-impl PoisonOnFail : Drop {\n+impl Drop for PoisonOnFail {\n     fn finalize(&self) {\n         unsafe {\n             /* assert !*self.failed;"}, {"sha": "177932aa072a167629147efd3291d7afda440f58", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -81,7 +81,7 @@ pub struct Arena {\n     priv mut chunks: @List<Chunk>,\n }\n \n-impl Arena : Drop {\n+impl Drop for Arena {\n     fn finalize(&self) {\n         unsafe {\n             destroy_chunk(&self.head);"}, {"sha": "5065e15bb5e30c728d9564e3e3009512f732e970", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ pub trait ToBase64 {\n     pure fn to_base64() -> ~str;\n }\n \n-impl &[u8]: ToBase64 {\n+impl ToBase64 for &[u8] {\n     pure fn to_base64() -> ~str {\n         let chars = str::chars(\n           ~\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n@@ -70,7 +70,7 @@ impl &[u8]: ToBase64 {\n     }\n }\n \n-impl &str: ToBase64 {\n+impl ToBase64 for &str {\n     pure fn to_base64() -> ~str {\n         str::to_bytes(self).to_base64()\n     }\n@@ -80,7 +80,7 @@ pub trait FromBase64 {\n     pure fn from_base64() -> ~[u8];\n }\n \n-impl ~[u8]: FromBase64 {\n+impl FromBase64 for ~[u8] {\n     pure fn from_base64() -> ~[u8] {\n         if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }\n \n@@ -142,7 +142,7 @@ impl ~[u8]: FromBase64 {\n     }\n }\n \n-impl ~str: FromBase64 {\n+impl FromBase64 for ~str {\n     pure fn from_base64() -> ~[u8] {\n         str::to_bytes(self).from_base64()\n     }"}, {"sha": "ab622438511bbe56e54d43af478ec3e2c52c38b9", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -75,53 +75,53 @@ pub struct BigUint {\n     priv data: ~[BigDigit]\n }\n \n-impl BigUint : Eq {\n+impl Eq for BigUint {\n     pure fn eq(&self, other: &BigUint) -> bool { self.cmp(other) == 0 }\n     pure fn ne(&self, other: &BigUint) -> bool { self.cmp(other) != 0 }\n }\n \n-impl BigUint : Ord {\n+impl Ord for BigUint {\n     pure fn lt(&self, other: &BigUint) -> bool { self.cmp(other) <  0 }\n     pure fn le(&self, other: &BigUint) -> bool { self.cmp(other) <= 0 }\n     pure fn ge(&self, other: &BigUint) -> bool { self.cmp(other) >= 0 }\n     pure fn gt(&self, other: &BigUint) -> bool { self.cmp(other) >  0 }\n }\n \n-impl BigUint : ToStr {\n+impl ToStr for BigUint {\n     pure fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n-impl BigUint : from_str::FromStr {\n+impl from_str::FromStr for BigUint {\n     static pure fn from_str(s: &str) -> Option<BigUint> {\n         BigUint::from_str_radix(s, 10)\n     }\n }\n \n-impl BigUint : Shl<uint, BigUint> {\n+impl Shl<uint, BigUint> for BigUint {\n     pure fn shl(&self, rhs: &uint) -> BigUint {\n         let n_unit = *rhs / BigDigit::bits;\n         let n_bits = *rhs % BigDigit::bits;\n         return self.shl_unit(n_unit).shl_bits(n_bits);\n     }\n }\n \n-impl BigUint : Shr<uint, BigUint> {\n+impl Shr<uint, BigUint> for BigUint {\n     pure fn shr(&self, rhs: &uint) -> BigUint {\n         let n_unit = *rhs / BigDigit::bits;\n         let n_bits = *rhs % BigDigit::bits;\n         return self.shr_unit(n_unit).shr_bits(n_bits);\n     }\n }\n \n-impl BigUint : Zero {\n+impl Zero for BigUint {\n     static pure fn zero() -> BigUint { BigUint::new(~[]) }\n }\n \n-impl BigUint : One {\n+impl One for BigUint {\n     static pub pure fn one() -> BigUint { BigUint::new(~[1]) }\n }\n \n-impl BigUint : Add<BigUint, BigUint> {\n+impl Add<BigUint, BigUint> for BigUint {\n     pure fn add(&self, other: &BigUint) -> BigUint {\n         let new_len = uint::max(self.data.len(), other.data.len());\n \n@@ -140,7 +140,7 @@ impl BigUint : Add<BigUint, BigUint> {\n     }\n }\n \n-impl BigUint : Sub<BigUint, BigUint> {\n+impl Sub<BigUint, BigUint> for BigUint {\n     pure fn sub(&self, other: &BigUint) -> BigUint {\n         let new_len = uint::max(self.data.len(), other.data.len());\n \n@@ -165,7 +165,7 @@ impl BigUint : Sub<BigUint, BigUint> {\n     }\n }\n \n-impl BigUint : Mul<BigUint, BigUint> {\n+impl Mul<BigUint, BigUint> for BigUint {\n     pure fn mul(&self, other: &BigUint) -> BigUint {\n         if self.is_zero() || other.is_zero() { return Zero::zero(); }\n \n@@ -230,25 +230,25 @@ impl BigUint : Mul<BigUint, BigUint> {\n     }\n }\n \n-impl BigUint : Div<BigUint, BigUint> {\n+impl Div<BigUint, BigUint> for BigUint {\n     pure fn div(&self, other: &BigUint) -> BigUint {\n         let (d, _) = self.divmod(other);\n         return d;\n     }\n }\n \n-impl BigUint : Modulo<BigUint, BigUint> {\n+impl Modulo<BigUint, BigUint> for BigUint {\n     pure fn modulo(&self, other: &BigUint) -> BigUint {\n         let (_, m) = self.divmod(other);\n         return m;\n     }\n }\n \n-impl BigUint : Neg<BigUint> {\n+impl Neg<BigUint> for BigUint {\n     pure fn neg(&self) -> BigUint { fail!() }\n }\n \n-impl BigUint : IntConvertible {\n+impl IntConvertible for BigUint {\n     pure fn to_int(&self) -> int {\n         uint::min(self.to_uint(), int::max_value as uint) as int\n     }\n@@ -554,12 +554,12 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n /// A Sign is a BigInt's composing element.\n pub enum Sign { Minus, Zero, Plus }\n \n-impl Sign : Eq {\n+impl Eq for Sign {\n     pure fn eq(&self, other: &Sign) -> bool { self.cmp(other) == 0 }\n     pure fn ne(&self, other: &Sign) -> bool { self.cmp(other) != 0 }\n }\n \n-impl Sign : Ord {\n+impl Ord for Sign {\n     pure fn lt(&self, other: &Sign) -> bool { self.cmp(other) <  0 }\n     pure fn le(&self, other: &Sign) -> bool { self.cmp(other) <= 0 }\n     pure fn ge(&self, other: &Sign) -> bool { self.cmp(other) >= 0 }\n@@ -592,53 +592,53 @@ pub struct BigInt {\n     priv data: BigUint\n }\n \n-impl BigInt : Eq {\n+impl Eq for BigInt {\n     pure fn eq(&self, other: &BigInt) -> bool { self.cmp(other) == 0 }\n     pure fn ne(&self, other: &BigInt) -> bool { self.cmp(other) != 0 }\n }\n \n-impl BigInt : Ord {\n+impl Ord for BigInt {\n     pure fn lt(&self, other: &BigInt) -> bool { self.cmp(other) <  0 }\n     pure fn le(&self, other: &BigInt) -> bool { self.cmp(other) <= 0 }\n     pure fn ge(&self, other: &BigInt) -> bool { self.cmp(other) >= 0 }\n     pure fn gt(&self, other: &BigInt) -> bool { self.cmp(other) >  0 }\n }\n \n-impl BigInt : ToStr {\n+impl ToStr for BigInt {\n     pure fn to_str(&self) -> ~str { self.to_str_radix(10) }\n }\n \n-impl BigInt : from_str::FromStr {\n+impl from_str::FromStr for BigInt {\n     static pure fn from_str(s: &str) -> Option<BigInt> {\n         BigInt::from_str_radix(s, 10)\n     }\n }\n \n-impl BigInt : Shl<uint, BigInt> {\n+impl Shl<uint, BigInt> for BigInt {\n     pure fn shl(&self, rhs: &uint) -> BigInt {\n         BigInt::from_biguint(self.sign, self.data << *rhs)\n     }\n }\n \n-impl BigInt : Shr<uint, BigInt> {\n+impl Shr<uint, BigInt> for BigInt {\n     pure fn shr(&self, rhs: &uint) -> BigInt {\n         BigInt::from_biguint(self.sign, self.data >> *rhs)\n     }\n }\n \n-impl BigInt : Zero {\n+impl Zero for BigInt {\n     static pub pure fn zero() -> BigInt {\n         BigInt::from_biguint(Zero, Zero::zero())\n     }\n }\n \n-impl BigInt : One {\n+impl One for BigInt {\n     static pub pure fn one() -> BigInt {\n         BigInt::from_biguint(Plus, One::one())\n     }\n }\n \n-impl BigInt : Add<BigInt, BigInt> {\n+impl Add<BigInt, BigInt> for BigInt {\n     pure fn add(&self, other: &BigInt) -> BigInt {\n         match (self.sign, other.sign) {\n             (Zero, _)      => copy *other,\n@@ -652,7 +652,7 @@ impl BigInt : Add<BigInt, BigInt> {\n     }\n }\n \n-impl BigInt : Sub<BigInt, BigInt> {\n+impl Sub<BigInt, BigInt> for BigInt {\n     pure fn sub(&self, other: &BigInt) -> BigInt {\n         match (self.sign, other.sign) {\n             (Zero, _)    => -other,\n@@ -672,7 +672,7 @@ impl BigInt : Sub<BigInt, BigInt> {\n     }\n }\n \n-impl BigInt : Mul<BigInt, BigInt> {\n+impl Mul<BigInt, BigInt> for BigInt {\n     pure fn mul(&self, other: &BigInt) -> BigInt {\n         match (self.sign, other.sign) {\n             (Zero, _)     | (_,     Zero)  => Zero::zero(),\n@@ -686,27 +686,27 @@ impl BigInt : Mul<BigInt, BigInt> {\n     }\n }\n \n-impl BigInt : Div<BigInt, BigInt> {\n+impl Div<BigInt, BigInt> for BigInt {\n     pure fn div(&self, other: &BigInt) -> BigInt {\n         let (d, _) = self.divmod(other);\n         return d;\n     }\n }\n \n-impl BigInt : Modulo<BigInt, BigInt> {\n+impl Modulo<BigInt, BigInt> for BigInt {\n     pure fn modulo(&self, other: &BigInt) -> BigInt {\n         let (_, m) = self.divmod(other);\n         return m;\n     }\n }\n \n-impl BigInt : Neg<BigInt> {\n+impl Neg<BigInt> for BigInt {\n     pure fn neg(&self) -> BigInt {\n         BigInt::from_biguint(self.sign.neg(), copy self.data)\n     }\n }\n \n-impl BigInt : IntConvertible {\n+impl IntConvertible for BigInt {\n     pure fn to_int(&self) -> int {\n         match self.sign {\n             Plus  => uint::min(self.to_uint(), int::max_value as uint) as int,"}, {"sha": "e6557d163f9dbdd1c283a537b345693e38e51da8", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -507,7 +507,7 @@ impl Bitv {\n \n }\n \n-impl Bitv: Clone {\n+impl Clone for Bitv {\n     /// Makes a copy of a bitvector\n     #[inline(always)]\n     fn clone(&self) -> Bitv {\n@@ -568,7 +568,7 @@ pure fn difference(w0: uint, w1: uint) -> uint { return w0 & !w1; }\n \n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n-impl Bitv: ops::Index<uint,bool> {\n+impl ops::Index<uint,bool> for Bitv {\n     pure fn index(&self, i: uint) -> bool {\n         self.get(i)\n     }"}, {"sha": "696b2753ea44b9d2de30576d2918e32e21115e60", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -56,7 +56,7 @@ struct DtorRes {\n   dtor: Option<fn@()>,\n }\n \n-impl DtorRes : Drop {\n+impl Drop for DtorRes {\n     fn finalize(&self) {\n         match self.dtor {\n           option::None => (),"}, {"sha": "a73b5f2a706d0382ae2ccf46daaccb5f1fbbb4e2", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,7 +21,7 @@ pub trait FuzzyEq<Eps> {\n     pure fn fuzzy_eq_eps(&self, other: &Self, epsilon: &Eps) -> bool;\n }\n \n-impl float: FuzzyEq<float> {\n+impl FuzzyEq<float> for float {\n     pure fn fuzzy_eq(&self, other: &float) -> bool {\n         self.fuzzy_eq_eps(other, &FUZZY_EPSILON)\n     }\n@@ -31,7 +31,7 @@ impl float: FuzzyEq<float> {\n     }\n }\n \n-impl f32: FuzzyEq<f32> {\n+impl FuzzyEq<f32> for f32 {\n     pure fn fuzzy_eq(&self, other: &f32) -> bool {\n         self.fuzzy_eq_eps(other, &(FUZZY_EPSILON as f32))\n     }\n@@ -41,7 +41,7 @@ impl f32: FuzzyEq<f32> {\n     }\n }\n \n-impl f64: FuzzyEq<f64> {\n+impl FuzzyEq<f64> for f64 {\n     pure fn fuzzy_eq(&self, other: &f64) -> bool {\n         self.fuzzy_eq_eps(other, &(FUZZY_EPSILON as f64))\n     }\n@@ -70,7 +70,7 @@ mod test_complex{\n \n     struct Complex { r: float, i: float }\n \n-    impl Complex: FuzzyEq<float> {\n+    impl FuzzyEq<float> for Complex {\n         pure fn fuzzy_eq(&self, other: &Complex) -> bool {\n             self.fuzzy_eq_eps(other, &FUZZY_EPSILON)\n         }"}, {"sha": "47f3c70352c3bd90138642261ce1c521cf557613", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,19 +25,19 @@ pub struct DuplexStream<T, U> {\n     priv port: Port<U>,\n }\n \n-impl<T: Owned, U: Owned> DuplexStream<T, U> : GenericChan<T> {\n+impl<T: Owned, U: Owned> GenericChan<T> for DuplexStream<T, U> {\n     fn send(x: T) {\n         self.chan.send(move x)\n     }\n }\n \n-impl<T: Owned, U: Owned> DuplexStream<T, U> : GenericSmartChan<T> {\n+impl<T: Owned, U: Owned> GenericSmartChan<T> for DuplexStream<T, U> {\n     fn try_send(x: T) -> bool {\n         self.chan.try_send(move x)\n     }\n }\n \n-impl<T: Owned, U: Owned> DuplexStream<T, U> : GenericPort<U> {\n+impl<T: Owned, U: Owned> GenericPort<U> for DuplexStream<T, U> {\n     fn recv() -> U {\n         self.port.recv()\n     }\n@@ -47,13 +47,13 @@ impl<T: Owned, U: Owned> DuplexStream<T, U> : GenericPort<U> {\n     }\n }\n \n-impl<T: Owned, U: Owned> DuplexStream<T, U> : Peekable<U> {\n+impl<T: Owned, U: Owned> Peekable<U> for DuplexStream<T, U> {\n     pure fn peek() -> bool {\n         self.port.peek()\n     }\n }\n \n-impl<T: Owned, U: Owned> DuplexStream<T, U> : Selectable {\n+impl<T: Owned, U: Owned> Selectable for DuplexStream<T, U> {\n     pure fn header() -> *pipes::PacketHeader {\n         self.port.header()\n     }"}, {"sha": "772cacf47a11bf719321fada3d1d37463c46ad39", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -67,7 +67,7 @@ pub fn create<T: Copy>() -> Deque<T> {\n         elts: DVec<Cell<T>>,\n     }\n \n-    impl <T: Copy> Repr<T>: Deque<T> {\n+    impl<T: Copy> Deque<T> for Repr<T> {\n         fn size() -> uint { return self.nelts; }\n         fn add_front(t: T) {\n             let oldlo: uint = self.lo;"}, {"sha": "f691dfe6a627389b8765505a9ef055d0d26a5fd7", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -74,7 +74,7 @@ pub mod reader {\n \n     // ebml reading\n \n-    impl Doc: ops::Index<uint,Doc> {\n+    impl ops::Index<uint,Doc> for Doc {\n         pure fn index(&self, tag: uint) -> Doc {\n             unsafe {\n                 get_doc(*self, tag)\n@@ -285,7 +285,7 @@ pub mod reader {\n         }\n     }\n \n-    impl Decoder: serialize::Decoder {\n+    impl serialize::Decoder for Decoder {\n         fn read_nil(&self) -> () { () }\n \n         fn read_u64(&self) -> u64 { doc_as_u64(self.next_doc(EsU64)) }\n@@ -577,7 +577,7 @@ pub mod writer {\n         }\n     }\n \n-    impl Encoder: ::serialize::Encoder {\n+    impl ::serialize::Encoder for Encoder {\n         fn emit_nil(&self) {}\n \n         fn emit_uint(&self, v: uint) {"}, {"sha": "dad761ac20d7cdf5128ded75f0af30eb06272741", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -303,7 +303,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n     }\n }\n \n-impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C>: GenericChan<T> {\n+impl<T,F:Flattener<T>,C:ByteChan> GenericChan<T> for FlatChan<T, F, C> {\n     fn send(val: T) {\n         self.byte_chan.send(CONTINUE.to_vec());\n         let bytes = self.flattener.flatten(move val);\n@@ -474,7 +474,7 @@ pub mod flatteners {\n         static fn from_writer(w: Writer) -> Self;\n     }\n \n-    impl json::Decoder: FromReader {\n+    impl FromReader for json::Decoder {\n         static fn from_reader(r: Reader) -> json::Decoder {\n             match json::from_reader(r) {\n                 Ok(move json) => {\n@@ -485,21 +485,21 @@ pub mod flatteners {\n         }\n     }\n \n-    impl json::Encoder: FromWriter {\n+    impl FromWriter for json::Encoder {\n         static fn from_writer(w: Writer) -> json::Encoder {\n             json::Encoder(move w)\n         }\n     }\n \n-    impl ebml::reader::Decoder: FromReader {\n+    impl FromReader for ebml::reader::Decoder {\n         static fn from_reader(r: Reader) -> ebml::reader::Decoder {\n             let buf = @r.read_whole_stream();\n             let doc = ebml::reader::Doc(buf);\n             ebml::reader::Decoder(move doc)\n         }\n     }\n \n-    impl ebml::writer::Encoder: FromWriter {\n+    impl FromWriter for ebml::writer::Encoder {\n         static fn from_writer(w: Writer) -> ebml::writer::Encoder {\n             ebml::writer::Encoder(move w)\n         }"}, {"sha": "8659e3cbb102cdb5ebe7c6dea38c21172a10c379", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -36,7 +36,7 @@ pub struct Future<A> {\n \n // FIXME(#2829) -- futures should not be copyable, because they close\n // over fn~'s that have pipes and so forth within!\n-impl<A> Future<A> : Drop {\n+impl<A> Drop for Future<A> {\n     fn finalize(&self) {}\n }\n "}, {"sha": "3cc28563e12eb87b528bd6f047ec0b795e983429", "filename": "src/libstd/io_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio_util.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -42,7 +42,7 @@ pub impl BufReader {\n     }\n }\n \n-impl BufReader: Reader {\n+impl Reader for BufReader {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.as_bytes_reader(|r| r.read(bytes, len) )\n     }"}, {"sha": "fcdd2de5743a3591ceb31b4871be7b217e716b6f", "filename": "src/libstd/json.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -949,7 +949,7 @@ pub impl Decoder: serialize::Decoder {\n     }\n }\n \n-impl Json : Eq {\n+impl Eq for Json {\n     pure fn eq(&self, other: &Json) -> bool {\n         match (self) {\n             &Number(f0) =>\n@@ -987,7 +987,7 @@ impl Json : Eq {\n }\n \n /// Test if two json values are less than one another\n-impl Json : Ord {\n+impl Ord for Json {\n     pure fn lt(&self, other: &Json) -> bool {\n         match (*self) {\n             Number(f0) => {\n@@ -1063,7 +1063,7 @@ impl Json : Ord {\n     pure fn gt(&self, other: &Json) -> bool { (*other).lt(&(*self))  }\n }\n \n-impl Error : Eq {\n+impl Eq for Error {\n     pure fn eq(&self, other: &Error) -> bool {\n         (*self).line == other.line &&\n         (*self).col == other.col &&\n@@ -1074,83 +1074,83 @@ impl Error : Eq {\n \n trait ToJson { fn to_json() -> Json; }\n \n-impl Json: ToJson {\n+impl ToJson for Json {\n     fn to_json() -> Json { copy self }\n }\n \n-impl @Json: ToJson {\n+impl ToJson for @Json {\n     fn to_json() -> Json { (*self).to_json() }\n }\n \n-impl int: ToJson {\n+impl ToJson for int {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl i8: ToJson {\n+impl ToJson for i8 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl i16: ToJson {\n+impl ToJson for i16 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl i32: ToJson {\n+impl ToJson for i32 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl i64: ToJson {\n+impl ToJson for i64 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl uint: ToJson {\n+impl ToJson for uint {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl u8: ToJson {\n+impl ToJson for u8 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl u16: ToJson {\n+impl ToJson for u16 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl u32: ToJson {\n+impl ToJson for u32 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl u64: ToJson {\n+impl ToJson for u64 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl float: ToJson {\n+impl ToJson for float {\n     fn to_json() -> Json { Number(self) }\n }\n \n-impl f32: ToJson {\n+impl ToJson for f32 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl f64: ToJson {\n+impl ToJson for f64 {\n     fn to_json() -> Json { Number(self as float) }\n }\n \n-impl (): ToJson {\n+impl ToJson for () {\n     fn to_json() -> Json { Null }\n }\n \n-impl bool: ToJson {\n+impl ToJson for bool {\n     fn to_json() -> Json { Boolean(self) }\n }\n \n-impl ~str: ToJson {\n+impl ToJson for ~str {\n     fn to_json() -> Json { String(copy self) }\n }\n \n-impl @~str: ToJson {\n+impl ToJson for @~str {\n     fn to_json() -> Json { String(copy *self) }\n }\n \n-impl <A: ToJson, B: ToJson> (A, B): ToJson {\n+impl<A: ToJson, B: ToJson> ToJson for (A, B) {\n     fn to_json() -> Json {\n         match self {\n           (ref a, ref b) => {\n@@ -1160,7 +1160,7 @@ impl <A: ToJson, B: ToJson> (A, B): ToJson {\n     }\n }\n \n-impl <A: ToJson, B: ToJson, C: ToJson> (A, B, C): ToJson {\n+impl<A: ToJson, B: ToJson, C: ToJson> ToJson for (A, B, C) {\n     fn to_json() -> Json {\n         match self {\n           (ref a, ref b, ref c) => {\n@@ -1170,11 +1170,11 @@ impl <A: ToJson, B: ToJson, C: ToJson> (A, B, C): ToJson {\n     }\n }\n \n-impl <A: ToJson> ~[A]: ToJson {\n+impl<A: ToJson> ToJson for ~[A] {\n     fn to_json() -> Json { List(self.map(|elt| elt.to_json())) }\n }\n \n-impl <A: ToJson Copy> LinearMap<~str, A>: ToJson {\n+impl<A: ToJson Copy> ToJson for LinearMap<~str, A> {\n     fn to_json() -> Json {\n         let mut d = LinearMap::new();\n         for self.each |&(key, value)| {\n@@ -1184,7 +1184,7 @@ impl <A: ToJson Copy> LinearMap<~str, A>: ToJson {\n     }\n }\n \n-impl <A: ToJson> Option<A>: ToJson {\n+impl<A: ToJson> ToJson for Option<A> {\n     fn to_json() -> Json {\n         match self {\n           None => Null,\n@@ -1193,11 +1193,11 @@ impl <A: ToJson> Option<A>: ToJson {\n     }\n }\n \n-impl Json: to_str::ToStr {\n+impl to_str::ToStr for Json {\n     pure fn to_str(&self) -> ~str { to_str(self) }\n }\n \n-impl Error: to_str::ToStr {\n+impl to_str::ToStr for Error {\n     pure fn to_str(&self) -> ~str {\n         fmt!(\"%u:%u: %s\", self.line, self.col, *self.msg)\n     }"}, {"sha": "88bacf53e636b05ba8f587477bad97737f9de9ab", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -193,7 +193,7 @@ pub mod v4 {\n         unsafe fn as_u32() -> u32;\n     }\n \n-    impl Ipv4Rep: AsUnsafeU32 {\n+    impl AsUnsafeU32 for Ipv4Rep {\n         // this is pretty dastardly, i know\n         unsafe fn as_u32() -> u32 {\n             *((ptr::addr_of(&self)) as *u32)"}, {"sha": "4e0b5494883b0f8b6887c051946ad020884ee81f", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -51,7 +51,7 @@ pub struct TcpSocket {\n   socket_data: @TcpSocketData,\n }\n \n-impl TcpSocket : Drop {\n+impl Drop for TcpSocket {\n     fn finalize(&self) {\n         unsafe {\n             tear_down_socket_data(self.socket_data)\n@@ -863,7 +863,7 @@ impl TcpSocket {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl TcpSocketBuf: io::Reader {\n+impl io::Reader for TcpSocketBuf {\n     fn read(&self, buf: &mut [u8], len: uint) -> uint {\n         if len == 0 { return 0 }\n         let mut count: uint = 0;\n@@ -963,7 +963,7 @@ impl TcpSocketBuf: io::Reader {\n }\n \n /// Implementation of `io::reader` trait for a buffered `net::tcp::tcp_socket`\n-impl TcpSocketBuf: io::Writer {\n+impl io::Writer for TcpSocketBuf {\n     pub fn write(&self, data: &[const u8]) {\n         unsafe {\n             let socket_data_ptr =\n@@ -1264,7 +1264,7 @@ trait ToTcpErr {\n     fn to_tcp_err() -> TcpErrData;\n }\n \n-impl uv::ll::uv_err_data: ToTcpErr {\n+impl ToTcpErr for uv::ll::uv_err_data {\n     fn to_tcp_err() -> TcpErrData {\n         TcpErrData { err_name: self.err_name, err_msg: self.err_msg }\n     }"}, {"sha": "7874899cb27acbd87e26cc16571c7fb1e88c3e2c", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -668,7 +668,7 @@ pub pure fn from_str(rawurl: &str) -> Result<Url, ~str> {\n     Ok(Url::new(scheme, userinfo, host, port, path, query, fragment))\n }\n \n-impl Url: FromStr {\n+impl FromStr for Url {\n     static pure fn from_str(s: &str) -> Option<Url> {\n         match from_str(s) {\n             Ok(move url) => Some(url),\n@@ -718,13 +718,13 @@ pub pure fn to_str(url: &Url) -> ~str {\n     fmt!(\"%s:%s%s%s%s\", url.scheme, authority, url.path, query, fragment)\n }\n \n-impl Url: to_str::ToStr {\n+impl to_str::ToStr for Url {\n     pub pure fn to_str(&self) -> ~str {\n         to_str(self)\n     }\n }\n \n-impl Url: to_bytes::IterBytes {\n+impl to_bytes::IterBytes for Url {\n     pure fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         self.to_str().iter_bytes(lsb0, f)\n     }"}, {"sha": "3ad45cf2d5b309e97f6600ac14ccf9be2f4a93fe", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -156,12 +156,12 @@ pub mod chained {\n         }\n     }\n \n-    impl<K: Eq IterBytes Hash, V> T<K, V>: Container {\n+    impl<K: Eq IterBytes Hash, V> Container for T<K, V> {\n         pure fn len(&self) -> uint { self.count }\n         pure fn is_empty(&self) -> bool { self.count == 0 }\n     }\n \n-    impl<K: Eq IterBytes Hash, V> T<K, V>: Mutable {\n+    impl<K: Eq IterBytes Hash, V> Mutable for T<K, V> {\n         fn clear(&mut self) {\n             self.count = 0u;\n             self.chains = chains(initial_capacity);\n@@ -347,7 +347,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V>: ToStr {\n+    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> ToStr for T<K, V> {\n         pure fn to_str(&self) -> ~str {\n             unsafe {\n                 // Meh -- this should be safe\n@@ -356,7 +356,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> ops::Index<K, V> for T<K, V> {\n         pure fn index(&self, k: K) -> V {\n             self.get(&k)\n         }"}, {"sha": "5c3477660706e787c47167718467f8c68b343811", "filename": "src/libstd/oldsmallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Foldsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Foldsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldsmallintmap.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -78,7 +78,7 @@ pub pure fn contains_key<T: Copy>(self: SmallIntMap<T>, key: uint) -> bool {\n     return !find(self, key).is_none();\n }\n \n-impl<V> SmallIntMap<V>: Container {\n+impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint {\n         let mut sz = 0u;\n@@ -95,7 +95,7 @@ impl<V> SmallIntMap<V>: Container {\n     pure fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n-impl<V> SmallIntMap<V>: Mutable {\n+impl<V> Mutable for SmallIntMap<V> {\n     fn clear(&mut self) { self.v.set(~[]) }\n }\n \n@@ -162,7 +162,7 @@ impl<V: Copy> SmallIntMap<V> {\n     }\n }\n \n-impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n+impl<V: Copy> ops::Index<uint, V> for SmallIntMap<V> {\n     pure fn index(&self, key: uint) -> V {\n         unsafe {\n             get(*self, key)"}, {"sha": "a25a4196b4cab423d1ca28c114defca1e24cf8dd", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -27,23 +27,23 @@ pub struct PriorityQueue<T> {\n     priv data: ~[T],\n }\n \n-impl <T: Ord> PriorityQueue<T>: BaseIter<T> {\n+impl<T: Ord> BaseIter<T> for PriorityQueue<T> {\n     /// Visit all values in the underlying vector.\n     ///\n     /// The values are **not** visited in order.\n     pure fn each(&self, f: fn(&T) -> bool) { self.data.each(f) }\n     pure fn size_hint(&self) -> Option<uint> { self.data.size_hint() }\n }\n \n-impl <T: Ord> PriorityQueue<T>: Container {\n+impl<T: Ord> Container for PriorityQueue<T> {\n     /// Returns the length of the queue\n     pure fn len(&self) -> uint { self.data.len() }\n \n     /// Returns true if a queue contains no elements\n     pure fn is_empty(&self) -> bool { self.data.is_empty() }\n }\n \n-impl <T: Ord> PriorityQueue<T>: Mutable {\n+impl<T: Ord> Mutable for PriorityQueue<T> {\n     /// Drop all items from the queue\n     fn clear(&mut self) { self.data.truncate(0) }\n }"}, {"sha": "1d91fafa4f96229fc848f4fe0daa054578e59ba4", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -228,7 +228,7 @@ pub fn sha1() -> Sha1 {\n         process_msg_block(st);\n     }\n \n-    impl Sha1State: Sha1 {\n+    impl Sha1 for Sha1State {\n         fn reset(&mut self) {\n             assert (vec::len(self.h) == digest_buf_len);\n             self.len_low = 0u32;"}, {"sha": "382cd658663dc8097b8673eb5557d852018c2ce3", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -22,7 +22,7 @@ pub struct SmallIntMap<T> {\n     priv v: ~[Option<T>],\n }\n \n-impl<V> SmallIntMap<V>: BaseIter<(uint, &V)> {\n+impl<V> BaseIter<(uint, &V)> for SmallIntMap<V> {\n     /// Visit all key-value pairs in order\n     pure fn each(&self, it: fn(&(uint, &self/V)) -> bool) {\n         for uint::range(0, self.v.len()) |i| {\n@@ -36,7 +36,7 @@ impl<V> SmallIntMap<V>: BaseIter<(uint, &V)> {\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl<V> SmallIntMap<V>: ReverseIter<(uint, &V)> {\n+impl<V> ReverseIter<(uint, &V)> for SmallIntMap<V> {\n     /// Visit all key-value pairs in reverse order\n     pure fn each_reverse(&self, it: fn(&(uint, &self/V)) -> bool) {\n         for uint::range_rev(self.v.len(), 0) |i| {\n@@ -48,7 +48,7 @@ impl<V> SmallIntMap<V>: ReverseIter<(uint, &V)> {\n     }\n }\n \n-impl<V> SmallIntMap<V>: Container {\n+impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint {\n         let mut sz = 0;\n@@ -64,12 +64,12 @@ impl<V> SmallIntMap<V>: Container {\n     pure fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n-impl<V> SmallIntMap<V>: Mutable {\n+impl<V> Mutable for SmallIntMap<V> {\n     /// Clear the map, removing all key-value pairs.\n     fn clear(&mut self) { self.v.clear() }\n }\n \n-impl<V> SmallIntMap<V>: Map<uint, V> {\n+impl<V> Map<uint, V> for SmallIntMap<V> {\n     /// Return true if the map contains a value for the specified key\n     pure fn contains_key(&self, key: &uint) -> bool {\n         self.find(key).is_some()"}, {"sha": "98a451dc8abddeaa5ec4a580213da83d5b2303b4", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -169,7 +169,7 @@ pub trait Sort {\n     fn qsort(self);\n }\n \n-impl<T: Copy Ord Eq> &mut [T] : Sort {\n+impl<T: Copy Ord Eq> Sort for &mut [T] {\n     fn qsort(self) { quick_sort3(self); }\n }\n \n@@ -908,7 +908,7 @@ mod test_tim_sort {\n         val: float,\n     }\n \n-    impl CVal: Ord {\n+    impl Ord for CVal {\n         pure fn lt(&self, other: &CVal) -> bool {\n             unsafe {\n                 let rng = rand::Rng();\n@@ -973,7 +973,7 @@ mod test_tim_sort {\n \n     struct DVal { val: uint }\n \n-    impl DVal: Ord {\n+    impl Ord for DVal {\n         pure fn lt(&self, _x: &DVal) -> bool { true }\n         pure fn le(&self, _x: &DVal) -> bool { true }\n         pure fn gt(&self, _x: &DVal) -> bool { true }\n@@ -1182,7 +1182,7 @@ mod big_tests {\n \n     }\n \n-    impl LVal : Drop {\n+    impl Drop for LVal {\n         fn finalize(&self) {\n             let x = unsafe { task::local_data::local_data_get(self.key) };\n             match x {\n@@ -1196,7 +1196,7 @@ mod big_tests {\n         }\n     }\n \n-    impl LVal: Ord {\n+    impl Ord for LVal {\n         pure fn lt(&self, other: &a/LVal/&self) -> bool {\n             (*self).val < other.val\n         }"}, {"sha": "fb6f80a65008424f95db9c066c360252acaf66b4", "filename": "src/libstd/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstats.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,7 +30,7 @@ pub trait Stats {\n     fn median_abs_dev_pct(self) -> f64;\n }\n \n-impl &[f64] : Stats {\n+impl Stats for &[f64] {\n     fn sum(self) -> f64 {\n         vec::foldl(0.0, self, |p,q| p + *q)\n     }"}, {"sha": "af773f5bf4e506716f17ba15ef8031043551ef21", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -167,7 +167,7 @@ type SemRelease = SemReleaseGeneric<()>;\n type SemAndSignalRelease = SemReleaseGeneric<~[Waitqueue]>;\n struct SemReleaseGeneric<Q> { sem: &Sem<Q> }\n \n-impl<Q: Owned> SemReleaseGeneric<Q> : Drop {\n+impl<Q: Owned> Drop for SemReleaseGeneric<Q> {\n     fn finalize(&self) {\n         self.sem.release();\n     }\n@@ -189,7 +189,7 @@ fn SemAndSignalRelease(sem: &r/Sem<~[Waitqueue]>)\n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n pub struct Condvar { priv sem: &Sem<~[Waitqueue]> }\n \n-impl Condvar : Drop { fn finalize(&self) {} }\n+impl Drop for Condvar { fn finalize(&self) {} }\n \n impl &Condvar {\n     /**\n@@ -260,7 +260,7 @@ impl &Condvar {\n             sem: &Sem<~[Waitqueue]>,\n         }\n \n-        impl SemAndSignalReacquire : Drop {\n+        impl Drop for SemAndSignalReacquire {\n             fn finalize(&self) {\n                 unsafe {\n                     // Needs to succeed, instead of itself dying.\n@@ -362,7 +362,7 @@ pub fn semaphore(count: int) -> Semaphore {\n     Semaphore { sem: new_sem(count, ()) }\n }\n \n-impl Semaphore: Clone {\n+impl Clone for Semaphore {\n     /// Create a new handle to the semaphore.\n     fn clone(&self) -> Semaphore {\n         Semaphore { sem: Sem((*self.sem).clone()) }\n@@ -412,7 +412,7 @@ pub fn mutex_with_condvars(num_condvars: uint) -> Mutex {\n     Mutex { sem: new_sem_and_signal(1, num_condvars) }\n }\n \n-impl Mutex: Clone {\n+impl Clone for Mutex {\n     /// Create a new handle to the mutex.\n     fn clone(&self) -> Mutex { Mutex { sem: Sem((*self.sem).clone()) } }\n }\n@@ -610,7 +610,7 @@ struct RWlockReleaseRead {\n     lock: &RWlock,\n }\n \n-impl RWlockReleaseRead : Drop {\n+impl Drop for RWlockReleaseRead {\n     fn finalize(&self) {\n         unsafe {\n             do task::unkillable {\n@@ -644,7 +644,7 @@ struct RWlockReleaseDowngrade {\n     lock: &RWlock,\n }\n \n-impl RWlockReleaseDowngrade : Drop {\n+impl Drop for RWlockReleaseDowngrade {\n     fn finalize(&self) {\n         unsafe {\n             do task::unkillable {\n@@ -682,10 +682,10 @@ fn RWlockReleaseDowngrade(lock: &r/RWlock) -> RWlockReleaseDowngrade/&r {\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n pub struct RWlockWriteMode { priv lock: &RWlock }\n-impl RWlockWriteMode : Drop { fn finalize(&self) {} }\n+impl Drop for RWlockWriteMode { fn finalize(&self) {} }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWlockReadMode  { priv lock: &RWlock }\n-impl RWlockReadMode : Drop { fn finalize(&self) {} }\n+impl Drop for RWlockReadMode { fn finalize(&self) {} }\n \n impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n@@ -1007,7 +1007,7 @@ mod tests {\n             c: pipes::Chan<()>,\n         }\n \n-        impl SendOnFailure : Drop {\n+        impl Drop for SendOnFailure {\n             fn finalize(&self) {\n                 self.c.send(());\n             }"}, {"sha": "77e7e3c3054d8d31c3b45bc6cecb43b425a7620f", "filename": "src/libstd/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -54,14 +54,14 @@ impl Timespec {\n     }\n }\n \n-impl Timespec : Eq {\n+impl Eq for Timespec {\n     pure fn eq(&self, other: &Timespec) -> bool {\n         self.sec == other.sec && self.nsec == other.nsec\n     }\n     pure fn ne(&self, other: &Timespec) -> bool { !self.eq(other) }\n }\n \n-impl Timespec : Ord {\n+impl Ord for Timespec {\n     pure fn lt(&self, other: &Timespec) -> bool {\n         self.sec < other.sec ||\n             (self.sec == other.sec && self.nsec < other.nsec)\n@@ -129,7 +129,7 @@ pub struct Tm {\n     tm_nsec: i32, // nanoseconds\n }\n \n-impl Tm : Eq {\n+impl Eq for Tm {\n     pure fn eq(&self, other: &Tm) -> bool {\n         self.tm_sec == (*other).tm_sec &&\n         self.tm_min == (*other).tm_min &&"}, {"sha": "282ecf086e4e8f5b95e1f99f5bb201965f7cbdf8", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -39,7 +39,7 @@ pub struct TreeMap<K, V> {\n     priv length: uint\n }\n \n-impl <K: Eq Ord, V: Eq> TreeMap<K, V>: Eq {\n+impl<K: Eq Ord, V: Eq> Eq for TreeMap<K, V> {\n     pure fn eq(&self, other: &TreeMap<K, V>) -> bool {\n         if self.len() != other.len() {\n             false\n@@ -85,7 +85,7 @@ pure fn lt<K: Ord, V>(a: &TreeMap<K, V>, b: &TreeMap<K, V>) -> bool {\n     return a_len < b_len;\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: Ord {\n+impl<K: Ord, V> Ord for TreeMap<K, V> {\n     #[inline(always)]\n     pure fn lt(&self, other: &TreeMap<K, V>) -> bool {\n         lt(self, other)\n@@ -104,38 +104,38 @@ impl <K: Ord, V> TreeMap<K, V>: Ord {\n     }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: BaseIter<(&K, &V)> {\n+impl<K: Ord, V> BaseIter<(&K, &V)> for TreeMap<K, V> {\n     /// Visit all key-value pairs in order\n     pure fn each(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n         each(&self.root, f)\n     }\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: ReverseIter<(&K, &V)> {\n+impl<K: Ord, V> ReverseIter<(&K, &V)> for TreeMap<K, V> {\n     /// Visit all key-value pairs in reverse order\n     pure fn each_reverse(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n         each_reverse(&self.root, f);\n     }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: Container {\n+impl<K: Ord, V> Container for TreeMap<K, V> {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint { self.length }\n \n     /// Return true if the map contains no elements\n     pure fn is_empty(&self) -> bool { self.root.is_none() }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: Mutable {\n+impl<K: Ord, V> Mutable for TreeMap<K, V> {\n     /// Clear the map, removing all key-value pairs.\n     fn clear(&mut self) {\n         self.root = None;\n         self.length = 0\n     }\n }\n \n-impl <K: Ord, V> TreeMap<K, V>: Map<K, V> {\n+impl<K: Ord, V> Map<K, V> for TreeMap<K, V> {\n     /// Return true if the map contains a value for the specified key\n     pure fn contains_key(&self, key: &K) -> bool {\n         self.find(key).is_some()\n@@ -246,25 +246,25 @@ pub struct TreeSet<T> {\n     priv map: TreeMap<T, ()>\n }\n \n-impl <T: Ord> TreeSet<T>: BaseIter<T> {\n+impl<T: Ord> BaseIter<T> for TreeSet<T> {\n     /// Visit all values in order\n     pure fn each(&self, f: fn(&T) -> bool) { self.map.each_key(f) }\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n-impl <T: Ord> TreeSet<T>: ReverseIter<T> {\n+impl<T: Ord> ReverseIter<T> for TreeSet<T> {\n     /// Visit all values in reverse order\n     pure fn each_reverse(&self, f: fn(&T) -> bool) {\n         self.map.each_key_reverse(f)\n     }\n }\n \n-impl <T: Eq Ord> TreeSet<T>: Eq {\n+impl<T: Eq Ord> Eq for TreeSet<T> {\n     pure fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n-impl <T: Ord> TreeSet<T>: Ord {\n+impl<T: Ord> Ord for TreeSet<T> {\n     #[inline(always)]\n     pure fn lt(&self, other: &TreeSet<T>) -> bool { self.map < other.map }\n     #[inline(always)]\n@@ -275,20 +275,20 @@ impl <T: Ord> TreeSet<T>: Ord {\n     pure fn gt(&self, other: &TreeSet<T>) -> bool { self.map > other.map }\n }\n \n-impl <T: Ord> TreeSet<T>: Container {\n+impl<T: Ord> Container for TreeSet<T> {\n     /// Return the number of elements in the set\n     pure fn len(&self) -> uint { self.map.len() }\n \n     /// Return true if the set contains no elements\n     pure fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n-impl <T: Ord> TreeSet<T>: Mutable {\n+impl<T: Ord> Mutable for TreeSet<T> {\n     /// Clear the set, removing all values.\n     fn clear(&mut self) { self.map.clear() }\n }\n \n-impl <T: Ord> TreeSet<T>: Set<T> {\n+impl<T: Ord> Set<T> for TreeSet<T> {\n     /// Return true if the set contains a value\n     pure fn contains(&self, value: &T) -> bool {\n         self.map.contains_key(value)"}, {"sha": "3152f0b54052421047ecbb92a86006da234cbda2", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -51,7 +51,7 @@ fn get_monitor_task_gl() -> IoTask {\n \n     struct GlobalIoTask(IoTask);\n \n-    impl GlobalIoTask: Clone {\n+    impl Clone for GlobalIoTask {\n         fn clone(&self) -> GlobalIoTask {\n             GlobalIoTask((**self).clone())\n         }"}, {"sha": "a93bdf86a6428a785030b182e8f98f04d45f67b1", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -31,7 +31,7 @@ pub struct IoTask {\n     op_chan: SharedChan<IoTaskMsg>\n }\n \n-impl IoTask: Clone {\n+impl Clone for IoTask {\n     fn clone(&self) -> IoTask {\n         IoTask{\n             async_handle: self.async_handle,"}, {"sha": "d652b18cfad470f55903e92aa434fe246c6501a1", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -104,7 +104,7 @@ struct WorkKey {\n     name: ~str\n }\n \n-impl WorkKey: to_bytes::IterBytes {\n+impl to_bytes::IterBytes for WorkKey {\n     #[inline(always)]\n     pure fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         let mut flag = true;\n@@ -114,7 +114,7 @@ impl WorkKey: to_bytes::IterBytes {\n     }\n }\n \n-impl WorkKey: cmp::Ord {\n+impl cmp::Ord for WorkKey {\n     pure fn lt(&self, other: &WorkKey) -> bool {\n         self.kind < other.kind ||\n             (self.kind == other.kind &&\n@@ -285,7 +285,7 @@ trait TPrep {\n         Decodable<json::Decoder>>(&self, blk: ~fn(&Exec) -> T) -> Work<T>;\n }\n \n-impl @Mut<Prep> : TPrep {\n+impl TPrep for @Mut<Prep> {\n     fn declare_input(&self, kind:&str, name:&str, val:&str) {\n         do self.borrow_mut |p| {\n             p.declared_inputs.insert(WorkKey::new(kind, name),"}, {"sha": "e3d1fb9781b2ef56f708787663938e4dc4f04506", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -326,7 +326,7 @@ pub enum inline_attr {\n     ia_never,\n }\n \n-impl inline_attr : cmp::Eq {\n+impl cmp::Eq for inline_attr {\n     pure fn eq(&self, other: &inline_attr) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }"}, {"sha": "2b24d03f8e9e5df980a489eb48727aad0dcb2dc4", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -63,7 +63,7 @@ struct CodemapT {\n     cm: @codemap::CodeMap,\n }\n \n-impl CodemapT: span_handler {\n+impl span_handler for CodemapT {\n     fn span_fatal(@mut self, sp: span, msg: &str) -> ! {\n         self.handler.emit(Some((self.cm, sp)), msg, fatal);\n         fail!();\n@@ -89,7 +89,7 @@ impl CodemapT: span_handler {\n     }\n }\n \n-impl HandlerT: handler {\n+impl handler for HandlerT {\n     fn fatal(@mut self, msg: &str) -> ! {\n         (self.emit)(None, msg, fatal);\n         fail!();"}, {"sha": "9c0550c98752781e1ebbbe803eb9e5cc79084c10", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -23,15 +23,15 @@ For example, a type like:\n \n would generate two implementations like:\n \n-impl<S: std::serialize::Encoder> Node: Encodable<S> {\n+impl<S: std::serialize::Encoder> Encodable<S> for Node {\n     fn encode(&self, s: &S) {\n         do s.emit_struct(\"Node\", 1) {\n             s.emit_field(\"id\", 0, || s.emit_uint(self.id))\n         }\n     }\n }\n \n-impl<D: Decoder> node_id: Decodable {\n+impl<D: Decoder> Decodable for node_id {\n     static fn decode(d: &D) -> Node {\n         do d.read_struct(\"Node\", 1) {\n             Node {"}, {"sha": "951e350f8b29014ca469246e153559ca353ffb98", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -197,7 +197,7 @@ pub fn mk_ctxt(parse_sess: parse::parse_sess,\n         mod_path: ~[ast::ident],\n         trace_mac: bool\n     }\n-    impl CtxtRepr: ext_ctxt {\n+    impl ext_ctxt for CtxtRepr {\n         fn codemap(@mut self) -> @CodeMap { self.parse_sess.cm }\n         fn parse_sess(@mut self) -> parse::parse_sess { self.parse_sess }\n         fn cfg(@mut self) -> ast::crate_cfg { self.cfg }"}, {"sha": "ffa6101d58fccc812f047bc7b42f6be87d9306a1", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -53,7 +53,7 @@ pub mod rt {\n         pub fn to_tokens(_cx: ext_ctxt) -> ~[token_tree];\n     }\n \n-    impl ~[token_tree]: ToTokens {\n+    impl ToTokens for ~[token_tree] {\n         pub fn to_tokens(_cx: ext_ctxt) -> ~[token_tree] {\n             copy self\n         }\n@@ -78,87 +78,87 @@ pub mod rt {\n         pub fn to_source(cx: ext_ctxt) -> ~str;\n     }\n \n-    impl ast::ident: ToSource {\n+    impl ToSource for ast::ident {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             copy *cx.parse_sess().interner.get(self)\n         }\n     }\n \n-    impl @ast::item: ToSource {\n+    impl ToSource for @ast::item {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             item_to_str(self, cx.parse_sess().interner)\n         }\n     }\n \n-    impl ~[@ast::item]: ToSource {\n+    impl ToSource for ~[@ast::item] {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             str::connect(self.map(|i| i.to_source(cx)), ~\"\\n\\n\")\n         }\n     }\n \n-    impl @ast::Ty: ToSource {\n+    impl ToSource for @ast::Ty {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             ty_to_str(self, cx.parse_sess().interner)\n         }\n     }\n \n-    impl ~[@ast::Ty]: ToSource {\n+    impl ToSource for ~[@ast::Ty] {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             str::connect(self.map(|i| i.to_source(cx)), ~\", \")\n         }\n     }\n \n-    impl ~[ast::ty_param]: ToSource {\n+    impl ToSource for ~[ast::ty_param] {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             pprust::typarams_to_str(self, cx.parse_sess().interner)\n         }\n     }\n \n-    impl @ast::expr: ToSource {\n+    impl ToSource for @ast::expr {\n         fn to_source(cx: ext_ctxt) -> ~str {\n             pprust::expr_to_str(self, cx.parse_sess().interner)\n         }\n     }\n \n     // Alas ... we write these out instead. All redundant.\n \n-    impl ast::ident: ToTokens {\n+    impl ToTokens for ast::ident {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl @ast::item: ToTokens {\n+    impl ToTokens for @ast::item {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl ~[@ast::item]: ToTokens {\n+    impl ToTokens for ~[@ast::item] {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl @ast::Ty: ToTokens {\n+    impl ToTokens for @ast::Ty {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl ~[@ast::Ty]: ToTokens {\n+    impl ToTokens for ~[@ast::Ty] {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl ~[ast::ty_param]: ToTokens {\n+    impl ToTokens for ~[ast::ty_param] {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n     }\n \n-    impl @ast::expr: ToTokens {\n+    impl ToTokens for @ast::expr {\n         fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source(cx))\n         }\n@@ -171,7 +171,7 @@ pub mod rt {\n         fn parse_tts(s: ~str) -> ~[ast::token_tree];\n     }\n \n-    impl ext_ctxt: ExtParseUtils {\n+    impl ExtParseUtils for ext_ctxt {\n \n         fn parse_item(s: ~str) -> @ast::item {\n             let res = parse::parse_item_from_source_str("}, {"sha": "e297e33d825c6bba54639e803d22b6181773fc4e", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,7 +30,7 @@ pub trait parser_attr {\n     fn parse_optional_meta() -> ~[@ast::meta_item];\n }\n \n-impl Parser: parser_attr {\n+impl parser_attr for Parser {\n \n     // Parse attributes that appear before an item\n     fn parse_outer_attributes() -> ~[ast::attribute] {"}, {"sha": "2cadf195778a28570713e6166a60906ac072ff0a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -34,7 +34,7 @@ pub enum cmnt_style {\n     blank_line, // Just a manual blank line \"\\n\\n\", for layout\n }\n \n-impl cmnt_style : cmp::Eq {\n+impl cmp::Eq for cmnt_style {\n     pure fn eq(&self, other: &cmnt_style) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }"}, {"sha": "f5fbefdd89b4b0200fc9a6218458d1c3e96b6f5c", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -108,7 +108,7 @@ fn dup_string_reader(r: @mut StringReader) -> @mut StringReader {\n     }\n }\n \n-impl StringReader: reader {\n+impl reader for StringReader {\n     fn is_eof(@mut self) -> bool { is_eof(self) }\n     // return the next token. EFFECT: advances the string_reader.\n     fn next_token(@mut self) -> TokenAndSpan {"}, {"sha": "3279c79e5af0d4ea8a6c4d0c1346b0cf878ae4de", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -520,7 +520,7 @@ pub fn reserved_keyword_table() -> HashMap<~str, ()> {\n }\n \n \n-impl Token : cmp::Eq {\n+impl cmp::Eq for Token {\n     pure fn eq(&self, other: &Token) -> bool {\n         match (*self) {\n             EQ => {"}, {"sha": "c6dfe7b79a9d0b52769a83bb680721cde355eb27", "filename": "src/test/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n trait me {\n     fn me() -> uint;\n }\n-impl uint: me { fn me() -> uint { self } }\n+impl me for uint { fn me() -> uint { self } }"}, {"sha": "ab744d60ac22834bb072aff6a726c2c404776a42", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,7 +14,7 @@ trait uint_helpers {\n     fn to(v: uint, f: fn(uint));\n }\n \n-impl uint: uint_helpers {\n+impl uint_helpers for uint {\n     #[inline]\n     fn to(v: uint, f: fn(uint)) {\n         let mut i = self;"}, {"sha": "c790252244f6bc9f24b703070d661718634d2df3", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ pub struct Bar {\n     x: ~str\n }\n \n-impl Bar : Foo {\n+impl Foo for Bar {\n     #[inline(always)]\n     fn f(&self) {\n         io::println((*self).x);"}, {"sha": "d8c2a9ede5cffec91302f5c018af25398d8a969f", "filename": "src/test/auxiliary/impl_privacy_xc_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -6,7 +6,7 @@ pub struct Fish {\n \n mod unexported {\n     use super::Fish;\n-    impl Fish : Eq {\n+    impl Eq for Fish {\n         pure fn eq(&self, _: &Fish) -> bool { true }\n         pure fn ne(&self, _: &Fish) -> bool { false }\n     }"}, {"sha": "7cc8dcb22c99558eecc1392b655bd1c3a4c53ca1", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,7 +14,7 @@\n pub trait i<T> { }\n \n pub fn f<T>() -> i<T> {\n-    impl<T> (): i<T> { }\n+    impl<T> i<T> for () { }\n \n     () as i::<T>\n }"}, {"sha": "fb97adf51a5349a9ad0e06720ce2f81d7211765b", "filename": "src/test/auxiliary/issue-2414-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-a.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ trait foo {\n     fn foo();\n }\n \n-impl ~str: foo {\n+impl foo for ~str {\n     fn foo() {}\n }\n "}, {"sha": "f9d08713852e402265c5e1825e11241dcf01f882", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -19,7 +19,7 @@ struct arc_destruct<T> {\n   _data: int,\n }\n \n-impl<T:Const> arc_destruct<T> : Drop {\n+impl<T:Const> Drop for arc_destruct<T> {\n     fn finalize(&self) {}\n }\n \n@@ -43,7 +43,7 @@ struct context_res {\n     ctx : int,\n }\n \n-impl context_res : Drop {\n+impl Drop for context_res {\n     fn finalize(&self) {}\n }\n "}, {"sha": "ead338c4bc803a0a27fca208a70e41cf654b42df", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n enum maybe<T> { just(T), nothing }\n \n-impl methods<T:copy> for maybe<T> {\n+impl copy> for maybe<T> for methods<T {\n     fn ~[](idx: uint) -> T {\n         match self {\n           just(t) { t }"}, {"sha": "9037417ef6224060c1087a373ad3a1503f05b62f", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,8 +15,8 @@ use issue2378a::methods;\n \n type two_maybes<T> = {a: maybe<T>, b: maybe<T>};\n \n-impl methods<T:copy> for two_maybes<T> {\n+impl copy> for two_maybes<T> for methods<T {\n     fn ~[](idx: uint) -> (T, T) {\n         (self.a[idx], self.b[idx])\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2e3c7eedfcc3829e5d4d5af041274c2e428dabb1", "filename": "src/test/auxiliary/issue4516_ty_param_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,4 +10,4 @@\n \n pub fn to_closure<A: Durable Copy>(x: A) -> @fn() -> A {\n     fn@() -> A { copy x }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c2caf1e77ee9d65c099695d0a222c95270299c34", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,6 +15,6 @@ trait to_strz {\n     fn to_strz() -> ~str;\n }\n \n-impl ~str: to_strz {\n+impl to_strz for ~str {\n     fn to_strz() -> ~str { copy self }\n }"}, {"sha": "40a2bcc114a532c5f7a52853e66a4bfbd76c805d", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,6 +15,6 @@ extern mod a;\n \n use a::to_strz;\n \n-impl bool: to_strz {\n+impl to_strz for bool {\n     fn to_strz() -> ~str { fmt!(\"%b\", self) }\n }"}, {"sha": "e1be3adcd4a02c35f32ea7efc5e6b1585e68c51b", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -19,6 +19,6 @@ trait T {\n     fn bar();\n }\n \n-impl S: T {\n+impl T for S {\n     fn bar() { }\n }"}, {"sha": "4de0b900dd3eaad20080b894a74220bbe64ac69b", "filename": "src/test/auxiliary/issue_3136_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3136_a.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ trait x {\n     fn use_x<T>();\n }\n enum y = (); \n-impl y:x { \n+impl x for y { \n     fn use_x<T>() {\n         struct foo { //~ ERROR quux\n             i: ()"}, {"sha": "606a662315a0d95f97f2ac17b9cc55575165cb5d", "filename": "src/test/auxiliary/private_variant_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,4 +12,4 @@ mod super_sekrit {\n     pub enum sooper_sekrit {\n         pub quux, priv baz\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f06f2e31b710f47cb8945b6aa8eb79dbabebda63", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,13 +17,13 @@ pub trait read {\n     static fn readMaybe(s: ~str) -> Option<Self>;\n }\n \n-impl int: read {\n+impl read for int {\n     static fn readMaybe(s: ~str) -> Option<int> {\n         int::from_str(s)\n     }\n }\n \n-impl bool: read {\n+impl read for bool {\n     static fn readMaybe(s: ~str) -> Option<bool> {\n         match s {\n           ~\"true\" => Some(true),"}, {"sha": "f595529b7f6d79cceafc60707be818bdc9f9d9a6", "filename": "src/test/auxiliary/static_fn_inline_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ pub mod num {\n }\n \n pub mod float {\n-    impl float: ::num::Num2 {\n+    impl ::num::Num2 for float {\n         #[inline]\n         static pure fn from_int2(n: int) -> float { return n as float;  }\n     }"}, {"sha": "80734b8336b872aafdb90d2309571bdbda2fdc14", "filename": "src/test/auxiliary/static_fn_trait_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -5,7 +5,7 @@ pub mod num {\n }\n \n pub mod float {\n-    impl float: ::num::Num2 {\n+    impl ::num::Num2 for float {\n         static pure fn from_int2(n: int) -> float { return n as float;  }\n     }\n }"}, {"sha": "11d4b28c215217bd6b6042df2708bd9058645f42", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_2_aux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,8 +14,8 @@ pub trait Baz { fn h() -> int; }\n \n pub struct A { x: int }\n \n-impl A : Foo { fn f() -> int { 10 } }\n-impl A : Bar { fn g() -> int { 20 } }\n-impl A : Baz { fn h() -> int { 30 } }\n+impl Foo for A { fn f() -> int { 10 } }\n+impl Bar for A { fn g() -> int { 20 } }\n+impl Baz for A { fn h() -> int { 30 } }\n \n "}, {"sha": "97a363f6b0c45a8e77cb6ac7f157e36cf44d1572", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_aux.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ trait Baz { fn h() -> int; }\n \n trait Quux: Foo Bar Baz { }\n \n-impl<T: Foo Bar Baz> T: Quux { }\n+impl<T: Foo Bar Baz> Quux for T { }"}, {"sha": "724860d6855444dbd75699c06ebab7797e3ebbb0", "filename": "src/test/auxiliary/trait_inheritance_cross_trait_call_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,6 +17,6 @@ pub struct A {\n     x: int\n }\n \n-impl A : Foo {\n+impl Foo for A {\n     fn f() -> int { 10 }\n }"}, {"sha": "76a76887772180d0a6d9cc0a044b7334eeb78187", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -29,7 +29,7 @@ struct cmplx {\n     im: f64\n }\n \n-impl cmplx : ops::Mul<cmplx,cmplx> {\n+impl ops::Mul<cmplx,cmplx> for cmplx {\n     pure fn mul(&self, x: &cmplx) -> cmplx {\n         cmplx {\n             re: self.re*(*x).re - self.im*(*x).im,\n@@ -38,7 +38,7 @@ impl cmplx : ops::Mul<cmplx,cmplx> {\n     }\n }\n \n-impl cmplx : ops::Add<cmplx,cmplx> {\n+impl ops::Add<cmplx,cmplx> for cmplx {\n     pure fn add(&self, x: &cmplx) -> cmplx {\n         cmplx {\n             re: self.re + (*x).re,\n@@ -98,7 +98,7 @@ fn chanmb(i: uint, size: uint) -> Line\n \n struct Devnull();\n \n-impl Devnull: io::Writer {\n+impl io::Writer for Devnull {\n     fn write(&self, _b: &[const u8]) {}\n     fn seek(&self, _i: int, _s: io::SeekStyle) {}\n     fn tell(&self) -> uint {0_u}"}, {"sha": "5f0530871fc835c56f55b4381e241de5543ee04c", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -56,7 +56,7 @@ struct r {\n   _l: @nillist,\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {}\n }\n "}, {"sha": "b6b2313aa09c36dd66ff66cad5cd87bca9eedf26", "filename": "src/test/compile-fail/alt-arrows-block-then-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn main() {\n       0 => {\n       } + 5 //~ ERROR unexpected token: `+`\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3f484511859f31dc4430d825b88fd06b02afed37", "filename": "src/test/compile-fail/alt-range-fail-dominate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -44,4 +44,4 @@ fn main() {\n       0.02 => {}\n       _ => {}\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ed18abe9bf0ab7b3bc04f9b6db9dab746a88ea92", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,6 +15,6 @@ use ambig_impl_2_lib::me;\n trait me {\n     fn me() -> uint;\n }\n-impl uint: me { fn me() -> uint { self } } //~ NOTE is `__extensions__::me`\n+impl me for uint { fn me() -> uint { self } } //~ NOTE is `__extensions__::me`\n fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n //~^ NOTE is `ambig_impl_2_lib::__extensions__::me`"}, {"sha": "d4fe51835aee58db60e2a50096bdddcf4afe59be", "filename": "src/test/compile-fail/ambig_impl_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn foo<T: A B>(t: T) {\n     //~^^ NOTE candidate #2 derives from the bound `B`\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "7e27a51ccdd8977302f5222f2af56be61e593bf3", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,11 +12,11 @@ trait foo {\n     fn foo() -> int;\n }\n \n-impl ~[uint]: foo {\n+impl foo for ~[uint] {\n     fn foo() -> int {1} //~ NOTE candidate #1 is `__extensions__::foo`\n }\n \n-impl ~[int]: foo {\n+impl foo for ~[int] {\n     fn foo() -> int {2} //~ NOTE candidate #2 is `__extensions__::foo`\n }\n "}, {"sha": "17c7ff1bb6037bfc249e9db83cea547d4760c47b", "filename": "src/test/compile-fail/assign-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-super.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     let mut x: ~[mut int] = ~[mut 3];\n     let y: ~[int] = ~[3];\n     x = y; //~ ERROR values differ in mutability\n-}\n\\ No newline at end of file\n+}"}, {"sha": "06dd154c279055ea4cc398022bb616bd0fa6a7eb", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@ fn main() {\n     let x = 0;\n     log(debug, x.foo); //~ ERROR attempted access of field\n     log(debug, x.bar); //~ ERROR attempted access of field\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2675b865e901726c077f8e08b48820f70698fbba", "filename": "src/test/compile-fail/attr-before-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n fn main() {\n     #[attr]\n     debug!(\"hi\"); //~ ERROR expected item after attrs\n-}\n\\ No newline at end of file\n+}"}, {"sha": "51ee903b1b1db04b2cb6e213d2c0a3f99dba2b77", "filename": "src/test/compile-fail/attr-before-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n fn main() {\n     #[attr]\n     let _i = 0; //~ ERROR expected item\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f5dbef3c061bf50143e395ff44660ac40fb1467d", "filename": "src/test/compile-fail/auto-ref-borrowck-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-borrowck-failure.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,7 +18,7 @@ trait Stuff {\n     fn printme();\n }\n \n-impl &mut Foo : Stuff {\n+impl Stuff for &mut Foo {\n     fn printme() {\n         io::println(fmt!(\"%d\", self.x));\n     }"}, {"sha": "db89dcfea02b2eaf20562a30bad543988e30ef75", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -23,6 +23,6 @@ trait MyIter {\n     pure fn test_mut(&mut self);\n }\n \n-impl &[int]: MyIter {\n+impl MyIter for &[int] {\n     pure fn test_mut(&mut self) { }\n }"}, {"sha": "7032a3a0b22e769e6e299f08e814400e30856d9a", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ trait bar {\n     fn bar<T:Copy>();\n }\n \n-impl uint: bar {\n+impl bar for uint {\n     fn bar<T:Copy>() {\n     }\n }"}, {"sha": "17157623863adca5673368329640848acb130e8f", "filename": "src/test/compile-fail/bad-value-ident-false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn false() { } //~ ERROR found `false` in ident position\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "5160471e95c80937d6f224d41ab5db060e0bf8d9", "filename": "src/test/compile-fail/bad-value-ident-true.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn true() { } //~ ERROR found `true` in ident position\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "298e5d53c940148dfc1ec04876dda21d2a4145d0", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: () }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "162a10a370b78369e6f0da3d0fc3a58bad834440", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "1aed491bbf0694c6b4eec75b3122fa8547e6bbb5", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "9c879e297090f76eb74e82b9bdf9143c3f1be467", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "586285d9566916f6b8e9d709c220438e805e0312", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "9ed48fe33e31917e927b2b34dad23a824a0c98f7", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "d60ef84f04024ee2318e24a48176ed9b4e34616b", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: (), }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"destructor runs\");\n     }"}, {"sha": "679deceb7bca35e88de2cd5d8cd74165f943e485", "filename": "src/test/compile-fail/binop-add-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbinop-add-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fbinop-add-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-ptr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:binary operation + cannot be applied to type `*int`\n \n fn die() -> *int { (0 as *int) + (0 as *int) }\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "abeefa4aac81015c31a88ab7b0ba9543c92248c9", "filename": "src/test/compile-fail/block-must-not-have-result-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-do.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn main() {\n     loop {\n         true\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d1e001f722c3fbaea03baa9c38923756bdf64cfa", "filename": "src/test/compile-fail/block-must-not-have-result-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     for vec::each(~[0]) |_i| {  //~ ERROR A for-loop body must return (), but\n         true\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6095d645f483db95e2d4ddb0dbfffb7f5dbba70b", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@\n \n struct r {}\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {\n         true\n     }"}, {"sha": "e4aceabf0c8fbc0e81d8c748262a256270788d74", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn main() {\n     while true {\n         true\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8bd3832d70cebdd07b28f819b0bd75e4b8022874", "filename": "src/test/compile-fail/borrowck-addr-of-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,4 +21,4 @@ fn zed(x: @int) -> fn@() -> int {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "78a95cb33c0c312d648ee3012f3380f3c5a2f835", "filename": "src/test/compile-fail/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn main() {\n     // assigning to various global constants\n     None = Some(3); //~ ERROR assigning to static item\n     foo = 6; //~ ERROR assigning to static item\n-}\n\\ No newline at end of file\n+}"}, {"sha": "25a320061d4517f7c306656bdbdd3638489be31a", "filename": "src/test/compile-fail/borrowck-assign-to-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@ enum foo = int;\n fn main() {\n     let x = foo(3);\n     *x = 4; //~ ERROR assigning to enum content\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9e90995c33abfd6a62c9cb588c6799a0d2b7daad", "filename": "src/test/compile-fail/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -27,4 +27,4 @@ fn main() {\n     p.x.a = 2;     //~ ERROR assigning to immutable field\n     p.y.a = 2;     //~ ERROR assigning to const field\n     p.z.a = 2;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "404644e78e2e51465c940ff1656013153c72fe51", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct defer {\n     x: &[&str],\n }\n \n-impl defer : Drop {\n+impl Drop for defer {\n     fn finalize(&self) {\n         error!(\"%?\", self.x);\n     }"}, {"sha": "e0fca586b6b7bc41f67c0b71ebbaf2b6e1649840", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -31,4 +31,4 @@ fn bar(f: &mut Foo) {\n fn main() {\n   let mut f = Foo { n: LinearSet::new() };\n   bar(&mut f);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0b9375bc543a1b526c46930c6e16a418ffe262ad", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@\n \n enum foo = ~uint;\n \n-impl foo : Add<foo, foo> {\n+impl Add<foo, foo> for foo {\n     pure fn add(f: &foo) -> foo {\n         foo(~(**self + **(*f)))\n     }"}, {"sha": "e15edd8cf199c9d54b7f51d883431d2c12e6f05c", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,7 +13,7 @@ struct Point {\n     y: int,\n }\n \n-impl Point : ops::Add<int,int> {\n+impl ops::Add<int,int> for Point {\n     pure fn add(&self, z: &int) -> int {\n         self.x + self.y + (*z)\n     }"}, {"sha": "97b46c714921f99c482db583a6d2b5e47c7fb88d", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ trait methods {\n     pure fn purem();\n }\n \n-impl point: methods {\n+impl methods for point {\n     fn impurem() {\n     }\n "}, {"sha": "b0b22dcfe61d0f187b3f19865f46107d8fd7695e", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -41,4 +41,4 @@ fn has_mut_vec_and_tries_to_change_it() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7154683565960c8f9d05091b95a7e37d294e5780", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn foo(x: *~int) -> ~int {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3c67b6d5caf8d8269f255f19ac4cefca17effc76", "filename": "src/test/compile-fail/borrowck-mut-deref-comp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-deref-comp.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ fn borrow(x: @mut foo) {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "685efcacf0c5802c5dd355f91bf51319458f0afb", "filename": "src/test/compile-fail/borrowck-mut-field-imm-base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -27,4 +27,4 @@ fn main() {\n     *q += 1;\n     io::println(fmt!(\"*r = %u\", *r));\n     io::println(fmt!(\"*r = %u\", *s));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "43feb65c8b96b9492e4ab595c0405033dc2d77f1", "filename": "src/test/compile-fail/borrowck-mut-vec-as-imm-slice-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,4 +21,4 @@ fn has_mut_vec(+v: @~[mut int]) -> int {\n \n fn main() {\n     assert has_mut_vec(@~[mut 1, 2, 3]) == 6;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7ff13739ba7e67af9a02f3510b81ec3d450e0357", "filename": "src/test/compile-fail/borrowck-pure-scope-in-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,4 +30,4 @@ fn test2() {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a25fc8327bd10c3a3ed6d318a518d8439b4e0d98", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct noncopyable {\n     i: (),\n }\n \n-impl noncopyable : Drop {\n+impl Drop for noncopyable {\n     fn finalize(&self) {\n         error!(\"dropped\");\n     }"}, {"sha": "262bf1030bcbe1df7e8903db2030eb9ad5221b5a", "filename": "src/test/compile-fail/cast-from-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-from-nil.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: cast from nil: `()` as `u32`\n-fn main() { let u = (assert true) as u32; }\n\\ No newline at end of file\n+fn main() { let u = (assert true) as u32; }"}, {"sha": "1a5c0744f70a2f19a086da52f75de43bae6d3ea7", "filename": "src/test/compile-fail/cast-to-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-nil.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: cast to nil: `u32` as `()`\n-fn main() { let u = 0u32 as (); }\n\\ No newline at end of file\n+fn main() { let u = 0u32 as (); }"}, {"sha": "671298040a90b2df88b8b37b8e15ab2c9b8115d4", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -34,7 +34,7 @@ impl cat {\n   }\n }\n \n-impl cat : noisy {\n+impl noisy for cat {\n   fn speak() { self.meow(); }\n \n }"}, {"sha": "2a7e2cea6fa984b6dcb87a7957f6770b6c212742", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ struct cat {\n   meows: uint,\n }\n \n-impl cat : animal {\n+impl animal for cat {\n }\n \n fn cat(in_x : uint) -> cat {\n@@ -28,4 +28,4 @@ fn cat(in_x : uint) -> cat {\n \n fn main() {\n   let nyan = cat(0u);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9d3eb6446565f18c30b9ef6599024e01319172ee", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -23,4 +23,4 @@ priv impl cat {\n }\n \n \n- fn main() { }\n\\ No newline at end of file\n+ fn main() { }"}, {"sha": "6ce969c7eaf3c31c0b0f8ecbb6a2e1e6190c0a26", "filename": "src/test/compile-fail/coerce-bad-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn give_away3(y: @mut @int) {\n     mutate(y); //~ ERROR values differ in mutability\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "f565a44c97f97ad989805df7e871430512d9ccbf", "filename": "src/test/compile-fail/const-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@ const a: int = b;\n const b: int = a;\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "95fd9b938f07b649a0db58b68dc3c1d2ecab1050", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct foo {\n   i: int,\n }\n \n-impl foo : Drop {\n+impl Drop for foo {\n     fn finalize(&self) {}\n }\n "}, {"sha": "9019d338d09039e677369994b881a48f40212c83", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct X {\n     x: ~str,\n }\n \n-impl X : Drop {\n+impl Drop for X {\n     fn finalize(&self) {\n         error!(\"value: %s\", self.x);\n     }"}, {"sha": "4e5b64c8f3db4a8ada76ed2150a26eb885f99afb", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n type Foo = @[u8];\n \n-impl Foo : Drop {   //~ ERROR the Drop trait may only be implemented\n+impl Drop for Foo {   //~ ERROR the Drop trait may only be implemented\n //~^ ERROR cannot provide an extension implementation\n     fn finalize(&self) {\n         io::println(\"kaboom\");"}, {"sha": "b62214b12f9a03edc2af928eaca23d8942783c21", "filename": "src/test/compile-fail/elided-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Felided-test.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@\n // and the build will fail because main doesn't exist\n #[test]\n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "74ac36f3694544e6b1bc64b34b0d7c446ba2177e", "filename": "src/test/compile-fail/empty-record-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-record-type.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@\n type t = {};\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "71674186b6125b9e4caec2612056a0ecabba1b24", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct Foo {\n     x: int\n }\n \n-impl Foo : Drop {\n+impl Drop for Foo {\n     fn finalize(&self) {\n         io::println(\"kaboom\");\n     }"}, {"sha": "3b1dda19448cc51453c939cb7f816548db02f431", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,13 +16,13 @@ trait Bar : Drop {\n     fn blah();\n }\n \n-impl Foo : Drop {\n+impl Drop for Foo {\n     fn finalize(&self) {\n         io::println(\"kaboom\");\n     }\n }\n \n-impl Foo : Bar {\n+impl Bar for Foo {\n     fn blah() {\n         self.finalize();    //~ ERROR explicit call to destructor\n     }"}, {"sha": "eacad50b92f07d2b06035b4408921cbb624f4f5f", "filename": "src/test/compile-fail/ext-after-attrib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@\n // item attribute. Probably could use a better error message.\n #[foo = \"bar\"]\n fmt!(\"baz\")\n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "8c6deb34816746ba8da6bfc1319024b0f6d3acb8", "filename": "src/test/compile-fail/extern-no-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ extern fn f() {\n \n fn main() {\n     f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "58e78953d5a78a8147753e16da8acefc4b3bef58", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@\n fn main() {\n     let a = if true { true };\n     log(debug, a);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e557eaba8347491176f5c53bb835a9a8d35e0763", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn g() {\n \n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "ce91de7e9d97a120a442d0a3887718b84d96c546", "filename": "src/test/compile-fail/import-from-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-path.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:expected\n-use foo::{bar}::baz\n\\ No newline at end of file\n+use foo::{bar}::baz"}, {"sha": "b6bc53fad945f0f63823f5ce8068061446fdce6e", "filename": "src/test/compile-fail/import-glob-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-path.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:expected\n-use foo::*::bar\n\\ No newline at end of file\n+use foo::*::bar"}, {"sha": "21f49b11f66a11668ec117a7cccfde63d578e0f8", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,13 +15,13 @@ trait to_opt {\n     fn to_option() -> Option<Self>;\n }\n \n-impl uint: to_opt {\n+impl to_opt for uint {\n     fn to_option() -> Option<uint> {\n         Some(self)\n     }\n }\n \n-impl<T:Copy> Option<T>: to_opt {\n+impl<T:Copy> to_opt for Option<T> {\n     fn to_option() -> Option<Option<T>> {\n         Some(self)\n     }"}, {"sha": "0974668f19d31b7f8dd150ca1a617315266cf478", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@\n \n enum mlist { cons(int, mlist), nil, }\n \n-fn main() { let a = cons(10, cons(11, nil)); }\n\\ No newline at end of file\n+fn main() { let a = cons(10, cons(11, nil)); }"}, {"sha": "8ce99f517c48af568cd611a0b2ec3c3747a3a83a", "filename": "src/test/compile-fail/issue-1802-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1802-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1802-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1802-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:no valid digits found for number\n fn main() {\n     log(error, 0b42);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c7aacdfc68aac7eb252eeecd82c6f4cd9b652fc9", "filename": "src/test/compile-fail/issue-1802-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:no valid digits found for number\n fn main() {\n     log(error, 0bu);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5def792558aac2763e08cd9fc734974a8a6db1eb", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,4 +20,4 @@ fn main () {\n     let myInt: uint = (aFn.theFn)();\n \n     assert myInt == 10;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ae46ab8116f1560bd0cbf191971fb7993817d3f2", "filename": "src/test/compile-fail/issue-1900.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern: main function is not allowed to have type parameters\n-fn main<T>() { }\n\\ No newline at end of file\n+fn main<T>() { }"}, {"sha": "8f344f42606640603220d19b52e4308409bc61cb", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ trait to_str_2 {\n // I use an impl here because it will cause\n // the compiler to attempt autoderef and then\n // try to resolve the method.\n-impl t: to_str_2 {\n+impl to_str_2 for t {\n     fn to_str() -> ~str { ~\"t\" }\n }\n "}, {"sha": "40010b203aa9bc46393640cc93f56339cc99ec3c", "filename": "src/test/compile-fail/issue-2111.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2111.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,4 +18,4 @@ fn foo(a: Option<uint>, b: Option<uint>) {\n \n fn main() {\n   foo(None, None);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7e3ffb92950ad6b67b9f550f436170fb99d6a9b3", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ trait vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]);\n }\n \n-impl<A> ~[A]: vec_monad<A> {\n+impl<A> vec_monad<A> for ~[A] {\n     fn bind<B>(f: fn(A) -> ~[B]) {\n         let mut r = fail!();\n         for self.each |elt| { r += f(*elt); }"}, {"sha": "e255d46633a6277c65c1b3655aa6602958bf7849", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,7 +15,7 @@ trait channel<T> {\n }\n \n // `chan` is not a trait, it's an enum\n-impl int: chan { //~ ERROR can only implement trait types\n+impl chan for int { //~ ERROR can only implement trait types\n     fn send(v: int) { fail!() }\n }\n "}, {"sha": "abc734697191f4096219e5d0e1d0404fd6c39eaa", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ struct foo {\n \n }\n \n-impl foo : Drop {\n+impl Drop for foo {\n     fn finalize(&self) {\n         io::println(\"Goodbye, World!\");\n         *self.x += 1;"}, {"sha": "22ae941350b4cc8a0626151620634bcfa5f555fb", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,7 +18,7 @@ trait parse {\n     fn parse() -> ~[int];\n }\n \n-impl parser: parse {\n+impl parse for parser {\n     fn parse() -> ~[int] {\n         dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n     }"}, {"sha": "5da3d08e34c56984626e5b66fb339e89b4b8b0b6", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -23,7 +23,7 @@ struct E {\n  f: int\n }\n \n-impl E: A {\n+impl A for E {\n   fn b<F:Copy, G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n "}, {"sha": "c8f3f9a4a5a3d39e2366ddac1a340520b8dc5eb7", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ struct E {\n  f: int\n }\n \n-impl E: A {\n+impl A for E {\n   fn b<F:Copy Const, G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 2 bounds, but\n }\n "}, {"sha": "f8f7704bcd9d00475bc34f88e466c85a6b703b11", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ struct E {\n  f: int\n }\n \n-impl E: A {\n+impl A for E {\n   // n.b. The error message is awful -- see #3404\n   fn b<F:Copy, G>(_x: G) -> G { fail!() } //~ ERROR method `b` has an incompatible type\n }"}, {"sha": "890b984e42ef270a5effc52d57c93cbd7422a62b", "filename": "src/test/compile-fail/issue-2817-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -24,4 +24,4 @@ fn main() {\n     for not_bool() |_i| {\n     //~^ ERROR A `for` loop iterator should expect a closure that returns `bool`\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b29b19b406f03634cc944f5db4b264590b869374", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct C {\n     x: int,\n }\n \n-impl C : Drop {\n+impl Drop for C {\n     fn finalize(&self) {\n         error!(\"dropping: %?\", self.x);\n     }"}, {"sha": "3874d9b13f5ca1dbf972728bcd9c70289d6be4e1", "filename": "src/test/compile-fail/issue-2951.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ fn foo<T, U>(x: T, y: U) {\n \n fn main() {\n     \n-}\n\\ No newline at end of file\n+}"}, {"sha": "5c48416667fe19d28f60de829dde9c1614948b2d", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,4 +10,4 @@\n \n fn bad (p: *int) {\n     let _q: &int = p as &int; //~ ERROR non-scalar cast\n-}\n\\ No newline at end of file\n+}"}, {"sha": "38bd007f1891e076caccbeb26f672347a432aed9", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -28,7 +28,7 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n         return v0 ^ v1;\n     }\n \n-   impl sipstate: siphash {\n+   impl siphash for sipstate {\n         fn reset() {\n             self.v0 = k0 ^ 0x736f6d6570736575;  //~ ERROR attempted dynamic environment-capture\n             //~^ ERROR unresolved name: k0"}, {"sha": "fdfd25621750844596d371f6a9dad844724bd0c3", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ fn siphash(k0 : u64) -> siphash {\n     };\n \n \n-   impl sipstate: siphash {\n+   impl siphash for sipstate {\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0"}, {"sha": "8f638713742e555fa63394a7aa3100ca67d1f5d7", "filename": "src/test/compile-fail/issue-3154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3154.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,4 +18,4 @@ fn thing<Q>(x: &Q) -> thing<Q> {\n \n fn main() {\n     thing(&());\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ff19551896b860b4b1af111bd37f88084d3b8a9d", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,7 +14,7 @@ fn foo<T>() {\n         //~^ ERROR use of undeclared type name\n     }\n \n-    impl<T> foo<T> : Drop {\n+    impl<T> Drop for foo<T> {\n         fn finalize(&self) {}\n     }\n }"}, {"sha": "ac5c099e1146ac322910474db13da0f9fdaf557b", "filename": "src/test/compile-fail/issue-3243.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,4 +18,4 @@ fn function() -> &[mut int] {\n fn main() {\n     let x = function();\n     error!(\"%?\", x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2d31867752ac557d87a7fe54a6e0cd434c215ac4", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum thing = uint;\n-impl thing : cmp::Ord { //~ ERROR missing method `gt`\n+impl cmp::Ord for thing { //~ ERROR missing method `gt`\n     pure fn lt(&self, other: &thing) -> bool { **self < **other }\n     pure fn le(&self, other: &thing) -> bool { **self < **other }\n     pure fn ge(&self, other: &thing) -> bool { **self < **other }"}, {"sha": "23e680fd851c37de7cc0d0f9753e673ad0fc2e02", "filename": "src/test/compile-fail/issue-3477.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n     let _p: char = 100; //~ ERROR mismatched types: expected `char` but found\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2431313df631c4b0dc89adea04f6a2ece6d9db80", "filename": "src/test/compile-fail/issue-3651-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,4 +10,4 @@\n \n fn main() {\n     do 5.times {} //~ ERROR Do-block body must return bool, but returns () here. Perhaps\n-}\n\\ No newline at end of file\n+}"}, {"sha": "38e9348155ac352253a595906c74a374faf1d79b", "filename": "src/test/compile-fail/issue-3651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,4 +10,4 @@\n \n fn main() {\n     for task::spawn { return true; } //~ ERROR A `for` loop iterator should expect a closure that\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2b25afeb0e7b431210374fe1534f424a171cbf9b", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,7 +13,7 @@ trait PTrait {\n    fn getChildOption() -> Option<@P>;\n }\n \n-impl P: PTrait {\n+impl PTrait for P {\n    fn getChildOption() -> Option<@P> {\n        const childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n        fail!();"}, {"sha": "54100d543dda06084b5d933da974d81c45d1ee78", "filename": "src/test/compile-fail/issue-3702-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,7 +13,7 @@ trait Add {\n     fn add_dynamic(&self, other: &Add) -> int;\n }\n \n-impl int: Add {\n+impl Add for int {\n     fn to_int(&self) -> int { *self }\n     fn add_dynamic(&self, other: &Add) -> int {\n         self.to_int() + other.to_int() //~ ERROR multiple applicable methods in scope"}, {"sha": "3a726d270ffce285d8b4ddcc8014495f7c060364", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,7 +13,7 @@ struct Thing {\n     x: int\n }\n \n-impl Thing/*: Mul<int, Thing>*/ { //~ ERROR Look ma, no Mul!\n+impl Mul<int, Thing>*/ for Thing/* { //~ ERROR Look ma, no Mul!\n     pure fn mul(c: &int) -> Thing {\n         Thing {x: self.x * *c}\n     }"}, {"sha": "2c797691b8d7a5e33b6c3e9195cd26a3e64d874d", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,7 +21,7 @@ enum Lol = int;\n \n pub impl Lol: Hahaha { }\n \n-impl Lol: Eq {\n+impl Eq for Lol {\n     pure fn eq(&self, other: &Lol) -> bool { **self != **other }\n     pure fn ne(&self, other: &Lol) -> bool { **self == **other }\n }\n@@ -32,4 +32,4 @@ fn main() {\n     } else {\n         io::println(\"2 != 4\");\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "812e0fc8c9660da6e00b9dbb857ff287a4a5aebe", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,7 +15,7 @@ struct Point {\n     mut y: float,\n }\n \n-impl Point : ToStr { //~ ERROR implements a method not defined in the trait\n+impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n     static fn new(x: float, y: float) -> Point {\n         Point { x: x, y: y }\n     }"}, {"sha": "7242d993f33f74d975fedbc3c0f6723c4e6589f8", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ fn f<T>(v: &r/T) -> &r/fn()->T { id::<&r/fn()->T>(|| *v) } //~ ERROR ???\n fn main() {\n     let v = &5;\n     io::println(fmt!(\"%d\", f(v)()));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "49510c33858be863c5239f359b49fe8f6e789182", "filename": "src/test/compile-fail/issue-4523.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ const f: fn() = foopy; //~ ERROR mismatched types: expected `&static/fn()`\n \n fn main () {\n     f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "00f2df00385947d138c07d604ddd6afafcbcbcf2", "filename": "src/test/compile-fail/issue-818.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fissue-818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-818.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,4 +21,4 @@ fn main() {\n     let c = ctr::new(42);\n     let c2 = ctr::inc(c);\n     assert *c2 == 5; //~ ERROR can only dereference enums with a single, public variant\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a513e367fe5bc83d904aecd072b1580a4f266446", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,4 +15,4 @@ fn main() {\n     let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n     let _ = fn~(copy x) { foo(x); }; //~ ERROR value has non-owned type `@uint`\n     let _ = fn~(move x) { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2864e27f42f8f178745491d89861ad3012387a29", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,7 +10,7 @@\n \n trait repeat<A> { fn get() -> A; }\n \n-impl<A:Copy> @A: repeat<A> {\n+impl<A:Copy> repeat<A> for @A {\n     fn get() -> A { *self }\n }\n \n@@ -28,4 +28,4 @@ fn main() {\n         repeater(@x)\n     };\n     assert 3 == *(y.get()); //~ ERROR reference is not valid\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3d83f13c211ba49376522736dcb6f845f721ae09", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,7 +15,7 @@ trait foo {\n     fn foo(i: &self/int) -> int;\n }\n \n-impl<T:Copy> T: foo {\n+impl<T:Copy> foo for T {\n     fn foo(i: &self/int) -> int {*i}\n }\n \n@@ -42,4 +42,4 @@ fn to_foo_3<T:Copy &static>(t: T) -> foo {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9da103396d87c97746f1bef3bddb54cd96fca17b", "filename": "src/test/compile-fail/lint-deprecated-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-deprecated-self.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -8,7 +8,7 @@ mod a {\n         x: int\n     }\n \n-    impl S : T {\n+    impl T for S {\n         fn f() {    //~ ERROR this method form is deprecated\n         }\n     }"}, {"sha": "27c9ca64a93c64ff64aeb5f6b22acddb9d600abb", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -31,4 +31,4 @@ enum Foo5 {\n trait foo6 { //~ ERROR type, variant, or trait should have a camel case identifier\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "b5157c669a73a5be8ae299863ed946c3539a2f46", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -62,7 +62,7 @@ struct r {\n     x: (),\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {}\n }\n "}, {"sha": "0a9d9fb20ab0e88a668d9f9c6f981a1d99f4c341", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -19,4 +19,4 @@ fn forever() -> ! {\n \n fn main() {\n   if (1 == 2) { forever(); }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c2879d7f27203571837226e3f95c13f94b62543a", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -24,4 +24,4 @@ fn main() {\n \n     two_args(x, y); //~ ERROR (values differ in mutability)\n     two_args(a, b); //~ ERROR (values differ in mutability)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3d63b622fcc96cad567468704ac2ceb74e58f25e", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ struct A {\n     x: int\n }\n \n-impl int : MyEq {\n+impl MyEq for int {\n     pure fn eq(&self, other: &int) -> bool { *self == *other }\n }\n "}, {"sha": "f2973fb0d5eaeb018acde86171dcb1141d6f61a5", "filename": "src/test/compile-fail/mod_file_correct_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ mod mod_file_aux;\n \n fn main() {\n     assert mod_file_aux::bar() == 10; //~ ERROR unresolved name\n-}\n\\ No newline at end of file\n+}"}, {"sha": "42a43ea358ca577028a8b7d42d7d1f90b8b4c125", "filename": "src/test/compile-fail/mod_file_not_exist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_not_exist.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,4 +12,4 @@ mod not_a_real_file; //~ ERROR not_a_real_file.rs\n \n fn main() {\n     assert mod_file_aux::bar() == 10;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "56be5e5022a0e57ba46d220c34ed8bbf6f2e7e99", "filename": "src/test/compile-fail/mod_file_with_path_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_with_path_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmod_file_with_path_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_with_path_attr.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@ mod m; //~ ERROR not_a_real_file.rs\n \n fn main() {\n     assert m::foo() == 10;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6cc19b18c20a6aba95093db356394b10948736b8", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn f20() {\n     touch(&x[0]); //~ ERROR use of partially moved value: `x`\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "ef8cd58abf992d57fce370419b3aeadad390eea0", "filename": "src/test/compile-fail/multiple-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmultiple-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmultiple-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultiple-main.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ fn main() {\n mod foo {\n     fn main() { //~ ERROR multiple 'main' functions\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b49ee5aab47e639b5da2b633ecf544ed29f767c9", "filename": "src/test/compile-fail/multitrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct S {\n  y: int\n }\n \n-impl S: Cmp, ToStr { //~ ERROR: expected `{` but found `,`\n+impl Cmp, ToStr for S { //~ ERROR: expected `{` but found `,`\n   fn eq(&&other: S) { false }\n   fn to_str(&self) -> ~str { ~\"hi\" }\n }"}, {"sha": "4954bbfa09d068aa4aeeca93802e99fb9ae87e82", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -15,7 +15,7 @@ fn main() {\n       _x: Port<()>,\n     }\n \n-    impl foo : Drop {\n+    impl Drop for foo {\n         fn finalize(&self) {}\n     }\n "}, {"sha": "9bc4ce87787ed0c9d4437c8b3a9aff6c61d852fc", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ struct r {\n   x:int,\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {}\n }\n \n@@ -30,7 +30,7 @@ struct r2 {\n   x:@mut int,\n }\n \n-impl r2 : Drop {\n+impl Drop for r2 {\n     fn finalize(&self) {}\n }\n "}, {"sha": "115120ff37263d6e928605b4c3fa3b5689f8c342", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,7 +14,7 @@ struct bar {\n   x: int,\n }\n \n-impl bar : Drop {\n+impl Drop for bar {\n     fn finalize(&self) {}\n }\n "}, {"sha": "fcbfb115af7567930ae23691fe297170e9d76560", "filename": "src/test/compile-fail/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-in-item-fn.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn foo(x) { //~ ERROR expected `:` but found `)`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "13087e05d0be466c4c6b9d613838d5bafeeba344", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn main() {\n \n     let_in(3, fn&(i) { assert i == 3u; });\n     //~^ ERROR expected `int` but found `uint`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "43515e265297e1ca72bc518cfdc12e332ecef391", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct r {\n   i: @mut int,\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }"}, {"sha": "b3717c5b20ec4c46396ae5b7e63a63eef9b54b50", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ fn bar(_t: foo) {}\n fn main() {\n     // we used to print foo<int>:\n     bar(Some(3u)); //~ ERROR mismatched types: expected `foo`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e6a27e6a4bb544a67a659bc26e2517b5f2e310b2", "filename": "src/test/compile-fail/private_variant_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,4 +14,4 @@ extern mod private_variant_1;\n \n fn main() {\n     let _x = private_variant_1::super_sekrit::baz; //~ ERROR baz is private\n-}\n\\ No newline at end of file\n+}"}, {"sha": "90c507091e93292bd24bc1a8c9464f7df8e45dfb", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -22,7 +22,7 @@ trait modify_in_box_rec {\n     pure fn modify_in_box_rec(sum: @{mut f: int});\n }\n \n-impl int: modify_in_box_rec {\n+impl modify_in_box_rec for int {\n     pure fn modify_in_box_rec(sum: @{mut f: int}) {\n         sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n     }"}, {"sha": "e4e61e438f938446c1e7a255c413bb7eef7a81cb", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -31,7 +31,7 @@ trait fake_ext_ctxt {\n \n type fake_session = parse::parse_sess;\n \n-impl fake_session: fake_ext_ctxt {\n+impl fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {"}, {"sha": "abe62e15e1309f6bb8c80c3f78fe4f40f1888390", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,7 +30,7 @@ trait fake_ext_ctxt {\n \n type fake_session = parse::parse_sess;\n \n-impl fake_session: fake_ext_ctxt {\n+impl fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { ~[] }\n     fn parse_sess() -> parse::parse_sess { self }\n     fn call_site() -> span {"}, {"sha": "962201aa9b966f8a1d09b2a3b1cff6f24fd2a24f", "filename": "src/test/compile-fail/rec-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frec-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-expected.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ fn have_bar(b: bar) {\n     want_foo(b); //~ ERROR expected a record with field `a`\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "2a1db52d73312bbfcc315c91c0294ce49c70017b", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct my_resource {\n   x: int,\n }\n \n-impl my_resource : Drop {\n+impl Drop for my_resource {\n     fn finalize(&self) {\n         log(error, self.x);\n     }"}, {"sha": "54d7c0b4d18b7b8bdf9ee45642d1116fc3a65a81", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn bar(a: int) {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0681680b9c4a24d37407e4a49c0053da72f86a75", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ trait deref {\n     fn get() -> int;\n }\n \n-impl &int: deref {\n+impl deref for &int {\n     fn get() -> int {\n         *self\n     }"}, {"sha": "1d6ddc4cd9adec95867d240a642fcdc08573b756", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,4 +12,4 @@ const c_x: &blk/int = &22; //~ ERROR only the static region is allowed here\n const c_y: &static/int = &22;\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "baf072c01eea212bcbafe69684c0c255a5edf07c", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,4 +20,4 @@ enum yes2 {\n     x5(&foo/uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "a3ff05634839de809582f02e907011b47e3288ff", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,23 +12,23 @@ struct yes0 {\n   x: &uint,\n }\n \n-impl yes0 : Drop {\n+impl Drop for yes0 {\n     fn finalize(&self) {}\n }\n \n struct yes1 {\n   x: &self/uint,\n }\n \n-impl yes1 : Drop {\n+impl Drop for yes1 {\n     fn finalize(&self) {}\n }\n \n struct yes2 {\n   x: &foo/uint, //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n-impl yes2 : Drop {\n+impl Drop for yes2 {\n     fn finalize(&self) {}\n }\n "}, {"sha": "a83b747d2f11d581a78ff35de2f3dbedf2def773", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,4 +20,4 @@ type item_ty_yes2 = {\n     x: &foo/uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n };\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "762142993f9d93bb917b5aedc256db07d7586268", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -21,4 +21,4 @@ fn manip(x: &a/int) -> int {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e9603dba74424f8e6b789353cca583bac6250c29", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-immutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-immutability.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: contravariant/&r) -> contravariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5c57fe26c24b7f1f07e8032550c06b6d01a55510", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,4 +30,4 @@ fn to_longer_lifetime(bi: contravariant/&r) -> contravariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a7363867ddc56c09c089bce022be9cfec1447be1", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -29,4 +29,4 @@ fn to_longer_lifetime(bi: covariant/&r) -> covariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a22bc7c08c574fe4a16a1cadc57f015bb1edba1b", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-arg-and-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-arg-and-ret.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -29,4 +29,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "83c2c5806e45005defd3f81ee6d2a8505a69cded", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1a20ca23faedbcc67a38a4f6e08a4108bfdac53a", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3d831f02a916b69f8c98e26a44c1b5c3ecc3b61a", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2c232f70bc412617805a1382c348c66bd7df1cd4", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fabce969b9c3ffd59a0e8c42b6ab3332c74d1ee4", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c3ce00594f4c1da2a0793996d9e308a668b5106d", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,7 +20,7 @@ trait set_f {\n     fn set_f_bad(b: @b);\n }\n \n-impl c: set_f {\n+impl set_f for c {\n     fn set_f_ok(b: @b/&self) {\n         self.f = b;\n     }"}, {"sha": "a75e1deb6a2a320fefb6ce6bef64d57002a76e89", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -23,7 +23,7 @@ trait set_foo_foo {\n     fn set_foo(f: foo);\n }\n \n-impl with_foo: set_foo_foo {\n+impl set_foo_foo for with_foo {\n     fn set_foo(f: foo) {\n         self.f = f; //~ ERROR mismatched types: expected `@foo/&self` but found `@foo/&`\n     }\n@@ -41,7 +41,7 @@ trait set_foo_bar {\n     fn set_foo(f: bar);\n }\n \n-impl with_bar: set_foo_bar {\n+impl set_foo_bar for with_bar {\n     fn set_foo(f: bar) {\n         self.f = f;\n     }"}, {"sha": "7b8b8daf565b4aedd2811ef867eba23a89650f4e", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,4 +16,4 @@ enum foo = fn~(x: &int);\n fn take_foo(x: foo/&) {} //~ ERROR no region bound is allowed on `foo`\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ee2aea1086be320b3cdec256663052482b492031", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -18,4 +18,4 @@ fn nested() {\n     });\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "4d53db35596bc5db3efee08320073f1fed0e94b4", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -27,4 +27,4 @@ fn nested(x: &x/int) {\n     });\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "102ff8b3998bf531ff67e3dd6a17df43aa7c5585", "filename": "src/test/compile-fail/regions-out-of-scope-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-out-of-scope-slice.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -19,4 +19,4 @@ fn foo(cond: bool) {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "380a9a57d01feede7fd71d79725a89bb4434ced2", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -53,4 +53,4 @@ fn nested(x: &x/int) {  // (1)\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "de31c64328f92778e3c4c485a3a72ff410a270cf", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ trait get_ctxt {\n \n type has_ctxt = { c: &ctxt };\n \n-impl has_ctxt: get_ctxt {\n+impl get_ctxt for has_ctxt {\n \n     // Here an error occurs because we used `&self` but\n     // the definition used `&`:"}, {"sha": "f19417425aaceff45f8ded351193f1e975692cae", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ trait get_ctxt {\n \n type has_ctxt = { c: &ctxt };\n \n-impl has_ctxt: get_ctxt {\n+impl get_ctxt for has_ctxt {\n     fn get_ctxt() -> &self/ctxt { self.c }\n }\n "}, {"sha": "48ef79a998488d4c651065fb93b44ebfb3a56c09", "filename": "src/test/compile-fail/regions-var-type-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -19,4 +19,4 @@ fn foo(cond: bool) {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "18bdb564441d342de0bba848e769d982db45600c", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n \n }\n \n-impl Foo : Drop {\n+impl Drop for Foo {\n     fn finalize(&self) {\n         io::println(\"Goodbye!\");\n     }"}, {"sha": "386d53cc16e92c6f8c464a118b89b032591de3f7", "filename": "src/test/compile-fail/reserved-be.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Freserved-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Freserved-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freserved-be.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n fn main() {\n     let be = 0;\n     //~^ ERROR `be` is a reserved keyword\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c89d1d2795b51a7e0a6c1f3da3ecf840c00b26fb", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ trait add {\n     fn plus(++x: Self) -> Self;\n }\n \n-impl int: add {\n+impl add for int {\n     fn plus(++x: int) -> int { self + x }\n }\n "}, {"sha": "0d253d782832a1f3bd90be7ce1b81273923e1739", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,10 +12,10 @@ extern mod std;\n fn main() {\n trait seq { }\n \n-impl<T> ~[T]: seq<T> { //~ ERROR wrong number of type arguments\n+impl<T> seq<T> for ~[T] { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n-impl u32: seq<bool> {\n+impl seq<bool> for u32 {\n    /* Treat the integer as a sequence of bits */\n }\n "}, {"sha": "e67a4099987989b20b9c9fda890c7bbc16d5b4f2", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,7 +13,7 @@ trait foo {\n     static fn bar();\n }\n \n-impl int: foo {\n+impl foo for int {\n     fn bar() {} //~ ERROR method `bar` is declared as static in its trait, but not in its impl\n }\n "}, {"sha": "ffbfecdc48c7ec94bf08b9f57e56d8468c0138d8", "filename": "src/test/compile-fail/struct-fields-dupe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-dupe.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,4 +17,4 @@ fn main() {\n         foo: 0,\n         foo: 0 //~ ERROR field `foo` specified more than once\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c1a0b2209711c0783d78ba3ba11c2a5277aa15b0", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -30,4 +30,4 @@ fn main() {\n     // No error when type of parameter actually IS @const int\n     let b = box_impl::<@const int>(@3);\n     set_box_impl(b, @mut 5);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1514dc5fd546dd2734fb93d899133588e02aea7a", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -25,4 +25,4 @@ fn main() {\n     let x: @const int = @3; // only way I could find to upcast\n     let b = box_impl::<@const int>({mut f: x});\n     set_box_impl(b, @mut 5);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f2e030b259ed5fdc69b458834d18eb2c1f2ba1bd", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -17,7 +17,7 @@ enum box_impl<T> = {\n     mut f: T\n };\n \n-impl<T:Copy> box_impl<T>: box_trait<T> {\n+impl<T:Copy> box_trait<T> for box_impl<T> {\n     fn get() -> T { return self.f; }\n     fn set(t: T) { self.f = t; }\n }\n@@ -36,4 +36,4 @@ fn main() {\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a20186c362b10e4f479dfdd10e476f3e18a41dca", "filename": "src/test/compile-fail/trait-impl-can-not-have-untraitful-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-methods.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,8 +10,8 @@\n \n trait A { }\n \n-impl int: A {\n+impl A for int {\n     fn foo() { } //~ ERROR method `foo` is not a member of trait `A`\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "f32793ad1e45a00fee9fd84d075202937e90d866", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,7 +11,7 @@\n trait foo {\n     fn bar(x: uint) -> Self;\n }\n-impl int: foo {\n+impl foo for int {\n     fn bar() -> int {\n         //~^ ERROR method `bar` has 0 parameters but the trait has 1\n         self"}, {"sha": "6931e680e08f23fe991427e7ab103bfd6d5e025c", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -14,7 +14,7 @@ trait Mumbo {\n     fn jbmbo(&self) -> @uint;\n }\n \n-impl uint: Mumbo {\n+impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n     fn jumbo(&self, x: @uint) { *self + *x; }\n     //~^ ERROR expected pure fn but found impure fn"}, {"sha": "eb34ebbdfb0d80f5b0606fb86894f531641851d9", "filename": "src/test/compile-fail/trait-impl-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ trait Mumbo {\n     fn jumbo(&self, x: @uint) -> uint;\n }\n \n-impl uint: Mumbo {\n+impl Mumbo for uint {\n     // Note: this method def is ok, it is more accepting and\n     // less effecting than the trait method:\n     pure fn jumbo(&self, x: @const uint) -> uint { *self + *x }"}, {"sha": "a341c2426113573dfc6619ae06d24e66adf2fbcc", "filename": "src/test/compile-fail/trait-inheritance-missing-requirement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -24,7 +24,7 @@ struct A {\n }\n \n // Can't implement Bar without an impl of Foo\n-impl A : Bar {\n+impl Bar for A {\n     fn g() { }\n }\n "}, {"sha": "e60be6c81eb585147a0078d82fd4758f2b03ee3d", "filename": "src/test/compile-fail/trait-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-keyword.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,4 +10,4 @@\n \n iface foo { } //~ ERROR iface\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "73b7c4369ac8eedc5e305ba5b51a9badf042929c", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait bar { fn dup() -> Self; fn blah<X>(); }\n-impl int: bar { fn dup() -> int { self } fn blah<X>() {} }\n-impl uint: bar { fn dup() -> uint { self } fn blah<X>() {} }\n+impl bar for int { fn dup() -> int { self } fn blah<X>() {} }\n+impl bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n \n fn main() {\n     10i.dup::<int>(); //~ ERROR does not take type parameters"}, {"sha": "cd92801fb4d288f6ef6727eca93b16b53b3c9adf", "filename": "src/test/compile-fail/trait-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -10,6 +10,6 @@\n \n trait foo { fn foo(); }\n \n-impl uint: int { fn foo() {} } //~ ERROR trait\n+impl int for uint { fn foo() {} } //~ ERROR trait\n \n fn main() {}"}, {"sha": "c68af84b95be0862be6b5e57cbe07e834c2f2aa4", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -29,4 +29,4 @@ fn main() {\n     identity_u16(a); \n     //~^ ERROR mismatched types: expected `u16` but found `int`\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "a3a197505a34022957fab8ae0a74859dbafecacc", "filename": "src/test/compile-fail/unique-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-mut.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -11,4 +11,4 @@\n //error-pattern:mismatched types\n fn main() {\n     let i: ~int = ~mut 0;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "edc8a47822d72524b7c1af79d7d6594132323f2f", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -16,11 +16,11 @@ struct Bar {\n     x: int,\n }\n \n-impl Bar : Drop {\n+impl Drop for Bar {\n     fn finalize(&self) {}\n }\n \n-impl Bar : Foo {\n+impl Foo for Bar {\n     fn f(&self) {\n         io::println(\"hi\");\n     }"}, {"sha": "1eebc7701328cf6509e3c50eb1e207a905113993", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct r {\n   b:bool,\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {}\n }\n "}, {"sha": "28a7b37d6e20b1327ec37272778220cb283f6cba", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -12,7 +12,7 @@ struct r {\n   i: @mut int,\n }\n \n-impl r : Drop {\n+impl Drop for r {\n     fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }"}, {"sha": "8ddd934f5804d78e6de240da78b0d0c889a3f869", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -13,4 +13,4 @@ fn main() {\n   loop{}\n              // red herring to make sure compilation fails\n   log(error, 42 == 'c');\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f9ad20eaeb9b4801bd827be14d2022bf62dc65d1", "filename": "src/test/compile-fail/vec-concat-bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f36d5ea0a56250109d93656130b442d2e59e4c/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-concat-bug.rs?ref=e8f36d5ea0a56250109d93656130b442d2e59e4c", "patch": "@@ -20,4 +20,4 @@ fn concat<T: Copy>(v: ~[const ~[const T]]) -> ~[T] {\n     return r;\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}]}