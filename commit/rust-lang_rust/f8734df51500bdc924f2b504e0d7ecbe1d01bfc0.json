{"sha": "f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzM0ZGY1MTUwMGJkYzkyNGYyYjUwNGUwZDdlY2JlMWQwMWJmYzA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T04:57:59Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T15:59:03Z"}, "message": "rustc: remove use of @[].", "tree": {"sha": "2ff711d439e5e2cdc49975807a1f2e1820628a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff711d439e5e2cdc49975807a1f2e1820628a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "html_url": "https://github.com/rust-lang/rust/commit/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891ada9be16451e46268ea0924c1710596e7ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/891ada9be16451e46268ea0924c1710596e7ddbb", "html_url": "https://github.com/rust-lang/rust/commit/891ada9be16451e46268ea0924c1710596e7ddbb"}], "stats": {"total": 369, "additions": 189, "deletions": 180}, "files": [{"sha": "1a65b326bbdea51b09f52f88dc1cb3f6e706dc24", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -18,6 +18,7 @@ use middle::ty;\n use middle::typeck;\n \n use std::vec;\n+use std::rc::Rc;\n use reader = extra::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;\n@@ -221,8 +222,8 @@ pub fn get_field_type(tcx: ty::ctxt, class_id: ast::DefId,\n                  class_id, def) );\n     let ty = decoder::item_type(def, the_field, tcx, cdata);\n     ty::ty_param_bounds_and_ty {\n-        generics: ty::Generics {type_param_defs: @~[],\n-                                region_param_defs: @[]},\n+        generics: ty::Generics {type_param_defs: Rc::new(~[]),\n+                                region_param_defs: Rc::new(~[])},\n         ty: ty\n     }\n }"}, {"sha": "8514025f9dd32d0573d3f94f9b70fecd0e63355c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -25,11 +25,11 @@ use middle::ty;\n use middle::typeck;\n use middle::astencode::vtable_decoder_helpers;\n \n-use std::at_vec;\n use std::u64;\n use std::io;\n use std::io::extensions::u64_from_be_bytes;\n use std::option;\n+use std::rc::Rc;\n use std::vec;\n use extra::ebml::reader;\n use extra::ebml;\n@@ -246,7 +246,7 @@ fn item_ty_param_defs(item: ebml::Doc,\n                       tcx: ty::ctxt,\n                       cdata: Cmd,\n                       tag: uint)\n-                      -> @~[ty::TypeParameterDef] {\n+                      -> Rc<~[ty::TypeParameterDef]> {\n     let mut bounds = ~[];\n     reader::tagged_docs(item, tag, |p| {\n         let bd = parse_type_param_def_data(\n@@ -255,27 +255,27 @@ fn item_ty_param_defs(item: ebml::Doc,\n         bounds.push(bd);\n         true\n     });\n-    @bounds\n+    Rc::new(bounds)\n }\n \n fn item_region_param_defs(item_doc: ebml::Doc,\n                           tcx: ty::ctxt,\n                           cdata: Cmd)\n-                          -> @[ty::RegionParameterDef] {\n-    at_vec::build(None, |push| {\n-        reader::tagged_docs(item_doc, tag_region_param_def, |rp_doc| {\n+                          -> Rc<~[ty::RegionParameterDef]> {\n+    let mut v = ~[];\n+    reader::tagged_docs(item_doc, tag_region_param_def, |rp_doc| {\n             let ident_str_doc = reader::get_doc(rp_doc,\n                                                 tag_region_param_def_ident);\n             let ident = item_name(tcx.sess.intr(), ident_str_doc);\n             let def_id_doc = reader::get_doc(rp_doc,\n                                              tag_region_param_def_def_id);\n             let def_id = reader::with_doc_data(def_id_doc, parse_def_id);\n             let def_id = translate_def_id(cdata, def_id);\n-            push(ty::RegionParameterDef { ident: ident,\n-                                          def_id: def_id });\n+            v.push(ty::RegionParameterDef { ident: ident,\n+                                            def_id: def_id });\n             true\n         });\n-    })\n+    Rc::new(v)\n }\n \n fn item_ty_param_count(item: ebml::Doc) -> uint {"}, {"sha": "4170d572f20ba581305392e34142f871a391bd01", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -171,7 +171,7 @@ pub fn def_to_str(did: DefId) -> ~str {\n \n fn encode_ty_type_param_defs(ebml_w: &mut writer::Encoder,\n                              ecx: &EncodeContext,\n-                             params: @~[ty::TypeParameterDef],\n+                             params: &[ty::TypeParameterDef],\n                              tag: uint) {\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n@@ -188,7 +188,7 @@ fn encode_ty_type_param_defs(ebml_w: &mut writer::Encoder,\n \n fn encode_region_param_defs(ebml_w: &mut writer::Encoder,\n                             ecx: &EncodeContext,\n-                            params: @[ty::RegionParameterDef]) {\n+                            params: &[ty::RegionParameterDef]) {\n     for param in params.iter() {\n         ebml_w.start_tag(tag_region_param_def);\n \n@@ -215,9 +215,9 @@ fn encode_item_variances(ebml_w: &mut writer::Encoder,\n fn encode_bounds_and_type(ebml_w: &mut writer::Encoder,\n                           ecx: &EncodeContext,\n                           tpt: &ty::ty_param_bounds_and_ty) {\n-    encode_ty_type_param_defs(ebml_w, ecx, tpt.generics.type_param_defs,\n+    encode_ty_type_param_defs(ebml_w, ecx, tpt.generics.type_param_defs(),\n                               tag_items_data_item_ty_param_bounds);\n-    encode_region_param_defs(ebml_w, ecx, tpt.generics.region_param_defs);\n+    encode_region_param_defs(ebml_w, ecx, tpt.generics.region_param_defs());\n     encode_type(ecx, ebml_w, tpt.ty);\n }\n \n@@ -786,7 +786,7 @@ fn encode_method_ty_fields(ecx: &EncodeContext,\n     encode_def_id(ebml_w, method_ty.def_id);\n     encode_name(ecx, ebml_w, method_ty.ident);\n     encode_ty_type_param_defs(ebml_w, ecx,\n-                              method_ty.generics.type_param_defs,\n+                              method_ty.generics.type_param_defs(),\n                               tag_item_method_tps);\n     encode_method_fty(ecx, ebml_w, &method_ty.fty);\n     encode_visibility(ebml_w, method_ty.vis);\n@@ -827,7 +827,7 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     }\n \n     for &ast_method in ast_method_opt.iter() {\n-        let num_params = tpt.generics.type_param_defs.len();\n+        let num_params = tpt.generics.type_param_defs().len();\n         if num_params > 0u || is_default_impl\n             || should_inline(ast_method.attrs) {\n             (ecx.encode_inlined_item)(\n@@ -1171,10 +1171,10 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_item_variances(ebml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n         encode_ty_type_param_defs(ebml_w, ecx,\n-                                  trait_def.generics.type_param_defs,\n+                                  trait_def.generics.type_param_defs(),\n                                   tag_items_data_item_ty_param_bounds);\n         encode_region_param_defs(ebml_w, ecx,\n-                                 trait_def.generics.region_param_defs);\n+                                 trait_def.generics.region_param_defs());\n         encode_trait_ref(ebml_w, ecx, trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(ecx, ebml_w, item.ident);\n         encode_attributes(ebml_w, item.attrs);"}, {"sha": "29ea3475d3441bc42758d574dbdb541ed0158654", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -32,10 +32,10 @@ use syntax::fold::Folder;\n use syntax::parse::token;\n use syntax;\n \n-use std::at_vec;\n use std::libc;\n use std::cast;\n use std::io::Seek;\n+use std::rc::Rc;\n \n use extra::ebml::reader;\n use extra::ebml;\n@@ -812,13 +812,13 @@ impl<'a> ebml_writer_helpers for writer::Encoder<'a> {\n             this.emit_struct_field(\"generics\", 0, |this| {\n                 this.emit_struct(\"Generics\", 2, |this| {\n                     this.emit_struct_field(\"type_param_defs\", 0, |this| {\n-                        this.emit_from_vec(*tpbt.generics.type_param_defs,\n+                        this.emit_from_vec(tpbt.generics.type_param_defs(),\n                                            |this, type_param_def| {\n                             this.emit_type_param_def(ecx, type_param_def);\n                         })\n                     });\n                     this.emit_struct_field(\"region_param_defs\", 1, |this| {\n-                        tpbt.generics.region_param_defs.encode(this);\n+                        tpbt.generics.region_param_defs().encode(this);\n                     })\n                 })\n             });\n@@ -997,7 +997,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             ebml_w.tag(c::tag_table_tcache, |ebml_w| {\n                 ebml_w.id(id);\n                 ebml_w.tag(c::tag_table_val, |ebml_w| {\n-                    ebml_w.emit_tpbt(ecx, *tpbt);\n+                    ebml_w.emit_tpbt(ecx, tpbt.clone());\n                 })\n             })\n         }\n@@ -1064,7 +1064,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             ebml_w.tag(c::tag_table_capture_map, |ebml_w| {\n                 ebml_w.id(id);\n                 ebml_w.tag(c::tag_table_val, |ebml_w| {\n-                    ebml_w.emit_from_vec(*cap_vars, |ebml_w, cap_var| {\n+                    ebml_w.emit_from_vec(*cap_vars.borrow(), |ebml_w, cap_var| {\n                         cap_var.encode(ebml_w);\n                     })\n                 })\n@@ -1183,8 +1183,8 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n                                 this.read_struct_field(\"type_param_defs\",\n                                                        0,\n                                                        |this| {\n-                                    @this.read_to_vec(|this|\n-                                        this.read_type_param_def(xcx))\n+                                    Rc::new(this.read_to_vec(|this|\n+                                                             this.read_type_param_def(xcx)))\n                             }),\n                             region_param_defs:\n                                 this.read_struct_field(\"region_param_defs\",\n@@ -1382,13 +1382,11 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     }\n                     c::tag_table_capture_map => {\n                         let cvars =\n-                            at_vec::to_managed_move(\n-                                val_dsr.read_to_vec(\n-                                    |val_dsr| val_dsr.read_capture_var(xcx)));\n+                                val_dsr.read_to_vec(|val_dsr| val_dsr.read_capture_var(xcx));\n                         let mut capture_map = dcx.maps\n                                                  .capture_map\n                                                  .borrow_mut();\n-                        capture_map.get().insert(id, cvars);\n+                        capture_map.get().insert(id, Rc::new(cvars));\n                     }\n                     _ => {\n                         xcx.dcx.tcx.sess.bug("}, {"sha": "b280da31c45371301f2cb2e77326275e591bbadb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -733,7 +733,7 @@ fn check_loans_in_fn<'a>(this: &mut CheckLoanCtxt<'a>,\n                                 span: Span) {\n         let capture_map = this.bccx.capture_map.borrow();\n         let cap_vars = capture_map.get().get(&closure_id);\n-        for cap_var in cap_vars.iter() {\n+        for cap_var in cap_vars.borrow().iter() {\n             let var_id = ast_util::def_id_of_def(cap_var.def).node;\n             let var_path = @LpVar(var_id);\n             this.check_if_path_is_moved(closure_id, span,\n@@ -839,4 +839,3 @@ fn check_loans_in_block<'a>(this: &mut CheckLoanCtxt<'a>,\n     visit::walk_block(this, blk, ());\n     this.check_for_conflicting_loans(blk.id);\n }\n-"}, {"sha": "0d9b4b0b171cc487c95e29f62ae7e13ae0eabd96", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -69,7 +69,7 @@ pub fn gather_captures(bccx: &BorrowckCtxt,\n                        closure_expr: &ast::Expr) {\n     let capture_map = bccx.capture_map.borrow();\n     let captured_vars = capture_map.get().get(&closure_expr.id);\n-    for captured_var in captured_vars.iter() {\n+    for captured_var in captured_vars.borrow().iter() {\n         match captured_var.mode {\n             moves::CapMove => {\n                 let fvar_id = ast_util::def_id_of_def(captured_var.def).node;"}, {"sha": "d0ca53116b8b984738ee722c5e7335d93021db05", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -24,6 +24,7 @@ use syntax::{ast, ast_map, ast_util};\n \n use std::cell::RefCell;\n use std::hashmap::HashMap;\n+use std::rc::Rc;\n \n //\n // This pass classifies expressions by their constant-ness.\n@@ -321,7 +322,7 @@ pub enum const_val {\n     const_int(i64),\n     const_uint(u64),\n     const_str(InternedString),\n-    const_binary(@[u8]),\n+    const_binary(Rc<~[u8]>),\n     const_bool(bool)\n }\n \n@@ -510,7 +511,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n pub fn lit_to_const(lit: &Lit) -> const_val {\n     match lit.node {\n         LitStr(ref s, _) => const_str((*s).clone()),\n-        LitBinary(data) => const_binary(data),\n+        LitBinary(ref data) => const_binary(data.clone()),\n         LitChar(n) => const_uint(n as u64),\n         LitInt(n, _) => const_int(n),\n         LitUint(n, _) => const_uint(n),"}, {"sha": "0d6dc6572c36ec8ebf86d5170fd0fd452118f8bc", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -277,7 +277,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n               ExprPath(_) => {\n                 let did = ast_util::def_id_of_def(def_map.get()\n                                                          .get_copy(&e.id));\n-                ty::lookup_item_type(cx.tcx, did).generics.type_param_defs\n+                ty::lookup_item_type(cx.tcx, did).generics.type_param_defs.clone()\n               }\n               _ => {\n                 // Type substitutions should only occur on paths and\n@@ -289,6 +289,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n                     \"non path/method call expr has type substs??\")\n               }\n             };\n+            let type_param_defs = type_param_defs.borrow();\n             if ts.len() != type_param_defs.len() {\n                 // Fail earlier to make debugging easier\n                 fail!(\"internal error: in kind::check_expr, length \\\n@@ -362,8 +363,8 @@ fn check_ty(cx: &mut Context, aty: &Ty) {\n             for ts in r.iter() {\n                 let def_map = cx.tcx.def_map.borrow();\n                 let did = ast_util::def_id_of_def(def_map.get().get_copy(&id));\n-                let type_param_defs =\n-                    ty::lookup_item_type(cx.tcx, did).generics.type_param_defs;\n+                let generics = ty::lookup_item_type(cx.tcx, did).generics;\n+                let type_param_defs = generics.type_param_defs();\n                 for (&ty, type_param_def) in ts.iter().zip(type_param_defs.iter()) {\n                     check_typaram_bounds(cx, aty.id, aty.span, ty, type_param_def)\n                 }"}, {"sha": "fb5e548e12f6eb7b8a24f19274b92b4476eb9a25", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -502,7 +502,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: &Expr, this: @IrMaps) {\n         let capture_map = this.capture_map.borrow();\n         let cvs = capture_map.get().get(&expr.id);\n         let mut call_caps = ~[];\n-        for cv in cvs.iter() {\n+        for cv in cvs.borrow().iter() {\n             match moves::moved_variable_node_id_from_def(cv.def) {\n               Some(rv) => {\n                 let cv_ln = this.add_live_node(FreeVarNode(cv.span));"}, {"sha": "d73d7f3d6f1dbf803e4a573c8980880e1918c4e5", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -136,9 +136,9 @@ use util::ppaux::Repr;\n use util::common::indenter;\n use util::ppaux::UserString;\n \n-use std::at_vec;\n use std::cell::RefCell;\n use std::hashmap::{HashSet, HashMap};\n+use std::rc::Rc;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;\n@@ -159,7 +159,7 @@ pub struct CaptureVar {\n     mode: CaptureMode // How variable is being accessed\n }\n \n-pub type CaptureMap = @RefCell<HashMap<NodeId, @[CaptureVar]>>;\n+pub type CaptureMap = @RefCell<HashMap<NodeId, Rc<~[CaptureVar]>>>;\n \n pub type MovesMap = @RefCell<HashSet<NodeId>>;\n \n@@ -681,23 +681,22 @@ impl VisitContext {\n         self.consume_expr(arg_expr)\n     }\n \n-    pub fn compute_captures(&mut self, fn_expr_id: NodeId) -> @[CaptureVar] {\n+    pub fn compute_captures(&mut self, fn_expr_id: NodeId) -> Rc<~[CaptureVar]> {\n         debug!(\"compute_capture_vars(fn_expr_id={:?})\", fn_expr_id);\n         let _indenter = indenter();\n \n         let fn_ty = ty::node_id_to_type(self.tcx, fn_expr_id);\n         let sigil = ty::ty_closure_sigil(fn_ty);\n         let freevars = freevars::get_freevars(self.tcx, fn_expr_id);\n-        if sigil == BorrowedSigil {\n+        let v = if sigil == BorrowedSigil {\n             // || captures everything by ref\n-            at_vec::from_fn(freevars.len(), |i| {\n-                let fvar = &freevars[i];\n-                CaptureVar {def: fvar.def, span: fvar.span, mode: CapRef}\n-            })\n+            freevars.iter()\n+                    .map(|fvar| CaptureVar {def: fvar.def, span: fvar.span, mode: CapRef})\n+                    .collect()\n         } else {\n             // @fn() and ~fn() capture by copy or by move depending on type\n-            at_vec::from_fn(freevars.len(), |i| {\n-                let fvar = &freevars[i];\n+            freevars.iter()\n+                    .map(|fvar| {\n                 let fvar_def_id = ast_util::def_id_of_def(fvar.def).node;\n                 let fvar_ty = ty::node_id_to_type(self.tcx, fvar_def_id);\n                 debug!(\"fvar_def_id={:?} fvar_ty={}\",\n@@ -708,7 +707,9 @@ impl VisitContext {\n                     CapCopy\n                 };\n                 CaptureVar {def: fvar.def, span: fvar.span, mode:mode}\n-            })\n-        }\n+\n+                }).collect()\n+        };\n+        Rc::new(v)\n     }\n }"}, {"sha": "c4a30171687d260c5895fee671add77241ea91aa", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -13,8 +13,9 @@\n use middle::ty;\n use middle::ty_fold;\n use middle::ty_fold::TypeFolder;\n+\n+use std::rc::Rc;\n use syntax::opt_vec::OptVec;\n-use std::at_vec;\n \n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`\n@@ -84,10 +85,9 @@ impl<T:Subst> Subst for ~[T] {\n         self.map(|t| t.subst(tcx, substs))\n     }\n }\n-\n-impl<T:Subst> Subst for @[T] {\n-    fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> @[T] {\n-        at_vec::map(*self, |t| t.subst(tcx, substs))\n+impl<T:Subst> Subst for Rc<T> {\n+    fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> Rc<T> {\n+        Rc::new(self.borrow().subst(tcx, substs))\n     }\n }\n "}, {"sha": "80d92d856864c05368af7595c79d067b8bb529a0", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -220,7 +220,7 @@ fn resolve_default_method_vtables(bcx: &Block,\n         bcx.tcx(), param_substs, impl_res.trait_vtables);\n \n     // Now we pull any vtables for parameters on the actual method.\n-    let num_method_vtables = method.generics.type_param_defs.len();\n+    let num_method_vtables = method.generics.type_param_defs().len();\n     let method_vtables = match impl_vtables {\n         Some(vtables) => {\n             let num_impl_type_parameters ="}, {"sha": "c9631a72ee7c9823589d6b91c237b3361e117153", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -403,11 +403,11 @@ pub fn trans_expr_fn<'a>(\n         let capture_map = ccx.maps.capture_map.borrow();\n         capture_map.get().get_copy(&user_id)\n     };\n-    let ClosureResult {llbox, cdata_ty, bcx} = build_closure(bcx, cap_vars, sigil);\n+    let ClosureResult {llbox, cdata_ty, bcx} = build_closure(bcx, *cap_vars.borrow(), sigil);\n     trans_closure(ccx, sub_path, decl, body, llfn,\n                   bcx.fcx.param_substs, user_id,\n                   [], ty::ty_fn_ret(fty),\n-                  |bcx| load_environment(bcx, cdata_ty, cap_vars, sigil));\n+                  |bcx| load_environment(bcx, cdata_ty, *cap_vars.borrow(), sigil));\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n \n     bcx"}, {"sha": "c60199b3c0d0ad4eaa4150dae1b699b7253df212", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -152,7 +152,7 @@ pub fn maybe_instantiate_inline(ccx: @CrateContext, fn_id: ast::DefId)\n \n             let impl_tpt = ty::lookup_item_type(ccx.tcx, impl_did);\n             let num_type_params =\n-                impl_tpt.generics.type_param_defs.len() +\n+                impl_tpt.generics.type_param_defs().len() +\n                 mth.generics.ty_params.len();\n \n           if num_type_params == 0 {"}, {"sha": "b13a8800cee84d238d621e0df6c2adf689c0ba7a", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -182,7 +182,7 @@ pub fn trans_static_method_callee(bcx: &Block,\n     // out which impl the `Trait<T1...Tn>` bound on the type `self` was\n     // bound to.\n     let bound_index = ty::lookup_trait_def(bcx.tcx(), trait_id).\n-        generics.type_param_defs.len();\n+        generics.type_param_defs().len();\n \n     let mname = if method_id.crate == ast::LOCAL_CRATE {\n         {\n@@ -318,7 +318,7 @@ pub fn combine_impl_and_methods_tps(bcx: &Block,\n \n     let ccx = bcx.ccx();\n     let method = ty::method(ccx.tcx, mth_did);\n-    let n_m_tps = method.generics.type_param_defs.len();\n+    let n_m_tps = method.generics.type_param_defs().len();\n     let node_substs = node_id_type_params(bcx, callee_id);\n     debug!(\"rcvr_substs={:?}\", rcvr_substs.repr(ccx.tcx));\n     let ty_substs"}, {"sha": "dd7c0803333b95ad57ef3a740c043f4845177112", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -34,6 +34,7 @@ use std::cmp;\n use std::hashmap::{HashMap, HashSet};\n use std::ops;\n use std::ptr::to_unsafe_ptr;\n+use std::rc::Rc;\n use std::to_bytes;\n use std::to_str::ToStr;\n use std::vec;\n@@ -870,15 +871,21 @@ pub struct RegionParameterDef {\n #[deriving(Clone)]\n pub struct Generics {\n     /// List of type parameters declared on the item.\n-    type_param_defs: @~[TypeParameterDef],\n+    type_param_defs: Rc<~[TypeParameterDef]>,\n \n     /// List of region parameters declared on the item.\n-    region_param_defs: @[RegionParameterDef],\n+    region_param_defs: Rc<~[RegionParameterDef]>,\n }\n \n impl Generics {\n     pub fn has_type_params(&self) -> bool {\n-        !self.type_param_defs.is_empty()\n+        !self.type_param_defs.borrow().is_empty()\n+    }\n+    pub fn type_param_defs<'a>(&'a self) -> &'a [TypeParameterDef] {\n+        self.type_param_defs.borrow().as_slice()\n+    }\n+    pub fn region_param_defs<'a>(&'a self) -> &'a [RegionParameterDef] {\n+        self.region_param_defs.borrow().as_slice()\n     }\n }\n \n@@ -3105,7 +3112,7 @@ pub fn expr_has_ty_params(cx: ctxt, expr: &ast::Expr) -> bool {\n pub fn method_call_type_param_defs(tcx: ctxt,\n                                    method_map: typeck::method_map,\n                                    id: ast::NodeId)\n-                                   -> Option<@~[TypeParameterDef]> {\n+                                   -> Option<Rc<~[TypeParameterDef]>> {\n     let method_map = method_map.borrow();\n     method_map.get().find(&id).map(|method| {\n         match method.origin {\n@@ -3125,12 +3132,12 @@ pub fn method_call_type_param_defs(tcx: ctxt,\n             // method bounds, so we must preprend the tps from the\n             // trait itself.  This ought to be harmonized.\n             let trait_type_param_defs =\n-                lookup_trait_def(tcx, trt_id).generics.type_param_defs;\n-            @vec::append(\n-                (*trait_type_param_defs).clone(),\n-                *ty::trait_method(tcx,\n-                                  trt_id,\n-                                  n_mth).generics.type_param_defs)\n+                lookup_trait_def(tcx, trt_id).generics.type_param_defs();\n+            Rc::new(vec::append(\n+                trait_type_param_defs.to_owned(),\n+                ty::trait_method(tcx,\n+                                 trt_id,\n+                                 n_mth).generics.type_param_defs()))\n           }\n         }\n     })\n@@ -4212,7 +4219,7 @@ pub fn lookup_field_type(tcx: ctxt,\n                Some(&ty_param_bounds_and_ty {ty, ..}) => ty,\n                None => {\n                    let tpt = csearch::get_field_type(tcx, struct_id, id);\n-                   tcache.get().insert(id, tpt);\n+                   tcache.get().insert(id, tpt.clone());\n                    tpt.ty\n                }\n             }"}, {"sha": "0cc646aa5c3e3587ec8a8ee432eae4885a16bc5a", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -170,7 +170,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n     // If the type is parameterized by the this region, then replace this\n     // region with the current anon region binding (in other words,\n     // whatever & would get replaced with).\n-    let expected_num_region_params = decl_generics.region_param_defs.len();\n+    let expected_num_region_params = decl_generics.region_param_defs().len();\n     let supplied_num_region_params = path.segments.last().unwrap().lifetimes.len();\n     let regions = if expected_num_region_params == supplied_num_region_params {\n         path.segments.last().unwrap().lifetimes.map(\n@@ -197,8 +197,8 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n \n     // Convert the type parameters supplied by the user.\n     let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).len();\n-    let formal_ty_param_count = decl_generics.type_param_defs.len();\n-    let required_ty_param_count = decl_generics.type_param_defs.iter()\n+    let formal_ty_param_count = decl_generics.type_param_defs().len();\n+    let required_ty_param_count = decl_generics.type_param_defs().iter()\n                                                .take_while(|x| x.default.is_none())\n                                                .len();\n     if supplied_ty_param_count < required_ty_param_count {\n@@ -228,7 +228,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n                                  ~\"provided type arguments with defaults\");\n     }\n \n-    let defaults = decl_generics.type_param_defs.slice_from(supplied_ty_param_count)\n+    let defaults = decl_generics.type_param_defs().slice_from(supplied_ty_param_count)\n                                 .iter().map(|&x| x.default.unwrap());\n     let tps = path.segments.iter().flat_map(|s| s.types.iter())\n                             .map(|&a_t| ast_ty_to_ty(this, rscope, a_t))"}, {"sha": "e57e3ff4712704f9b870917da63ce91728cfe4f2", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -147,7 +147,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                             ty::enum_variant_with_id(tcx, enm, var);\n                         let var_tpt = ty::lookup_item_type(tcx, var);\n                         vinfo.args.map(|t| {\n-                            if var_tpt.generics.type_param_defs.len() ==\n+                            if var_tpt.generics.type_param_defs().len() ==\n                                 expected_substs.tps.len()\n                             {\n                                 ty::subst(tcx, expected_substs, *t)\n@@ -172,7 +172,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                              None);\n                     fcx.write_error(pat.id);\n                     kind_name = \"[error]\";\n-                    arg_types = (*subpats).clone()\n+                    arg_types = subpats.clone()\n                                           .unwrap_or_default()\n                                           .map(|_| ty::mk_err());\n                 }\n@@ -221,7 +221,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                     None);\n             fcx.write_error(pat.id);\n             kind_name = \"[error]\";\n-            arg_types = (*subpats).clone()\n+            arg_types = subpats.clone()\n                                   .unwrap_or_default()\n                                   .map(|_| ty::mk_err());\n         }\n@@ -699,4 +699,3 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n \n #[deriving(Eq)]\n enum PointerKind { Send, Borrowed }\n-"}, {"sha": "e7e4f61741ff17cf200629e183f485ddf0dc716b", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -954,7 +954,7 @@ impl<'a> LookupContext<'a> {\n         // If they were not explicitly supplied, just construct fresh\n         // type variables.\n         let num_supplied_tps = self.supplied_tps.len();\n-        let num_method_tps = candidate.method_ty.generics.type_param_defs.len();\n+        let num_method_tps = candidate.method_ty.generics.type_param_defs().len();\n         let m_substs = {\n             if num_supplied_tps == 0u {\n                 self.fcx.infcx().next_ty_vars(num_method_tps)"}, {"sha": "f446326eb16ee2101fc0bd376d4d47c39b0d5efa", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -564,7 +564,7 @@ pub fn check_item(ccx: @CrateCtxt, it: &ast::Item) {\n         let param_env = ty::construct_parameter_environment(\n                 ccx.tcx,\n                 None,\n-                *fn_tpt.generics.type_param_defs,\n+                fn_tpt.generics.type_param_defs(),\n                 [],\n                 [],\n                 body.id);\n@@ -674,9 +674,9 @@ fn check_method_body(ccx: @CrateCtxt,\n         ty::construct_parameter_environment(\n             ccx.tcx,\n             self_bound,\n-            *item_generics.type_param_defs,\n-            *method_generics.type_param_defs,\n-            item_generics.region_param_defs,\n+            item_generics.type_param_defs(),\n+            method_generics.type_param_defs(),\n+            item_generics.region_param_defs(),\n             method.body.id);\n \n     // Compute the fty from point of view of inside fn\n@@ -776,7 +776,7 @@ fn compare_impl_method(tcx: ty::ctxt,\n     debug!(\"compare_impl_method()\");\n     let infcx = infer::new_infer_ctxt(tcx);\n \n-    let impl_tps = impl_generics.type_param_defs.len();\n+    let impl_tps = impl_generics.type_param_defs().len();\n \n     // Try to give more informative error messages about self typing\n     // mismatches.  Note that any mismatch will also be detected\n@@ -812,8 +812,8 @@ fn compare_impl_method(tcx: ty::ctxt,\n         }\n     }\n \n-    let num_impl_m_type_params = impl_m.generics.type_param_defs.len();\n-    let num_trait_m_type_params = trait_m.generics.type_param_defs.len();\n+    let num_impl_m_type_params = impl_m.generics.type_param_defs().len();\n+    let num_trait_m_type_params = trait_m.generics.type_param_defs().len();\n     if num_impl_m_type_params != num_trait_m_type_params {\n         tcx.sess.span_err(\n             impl_m_span,\n@@ -838,10 +838,10 @@ fn compare_impl_method(tcx: ty::ctxt,\n         return;\n     }\n \n-    for (i, trait_param_def) in trait_m.generics.type_param_defs.iter().enumerate() {\n-        // For each of the corresponding impl ty param's bounds...\n-        let impl_param_def = &impl_m.generics.type_param_defs[i];\n+    let it = trait_m.generics.type_param_defs().iter()\n+        .zip(impl_m.generics.type_param_defs().iter());\n \n+    for (i, (trait_param_def, impl_param_def)) in it.enumerate() {\n         // Check that the impl does not require any builtin-bounds\n         // that the trait does not guarantee:\n         let extra_bounds =\n@@ -886,15 +886,15 @@ fn compare_impl_method(tcx: ty::ctxt,\n     // impl type is \"&'a str\", then this would replace the self\n     // type with a free region `self`.\n     let dummy_impl_tps: ~[ty::t] =\n-        impl_generics.type_param_defs.iter().enumerate().\n+        impl_generics.type_param_defs().iter().enumerate().\n         map(|(i,t)| ty::mk_param(tcx, i, t.def_id)).\n         collect();\n     let dummy_method_tps: ~[ty::t] =\n-        impl_m.generics.type_param_defs.iter().enumerate().\n+        impl_m.generics.type_param_defs().iter().enumerate().\n         map(|(i,t)| ty::mk_param(tcx, i + impl_tps, t.def_id)).\n         collect();\n     let dummy_impl_regions: OptVec<ty::Region> =\n-        impl_generics.region_param_defs.iter().\n+        impl_generics.region_param_defs().iter().\n         map(|l| ty::ReFree(ty::FreeRegion {\n                 scope_id: impl_m_body_id,\n                 bound_region: ty::BrNamed(l.def_id, l.ident)})).\n@@ -1374,8 +1374,8 @@ pub fn impl_self_ty(vcx: &VtableContext,\n \n     let (n_tps, n_rps, raw_ty) = {\n         let ity = ty::lookup_item_type(tcx, did);\n-        (ity.generics.type_param_defs.len(),\n-         ity.generics.region_param_defs.len(),\n+        (ity.generics.type_param_defs().len(),\n+         ity.generics.region_param_defs().len(),\n          ity.ty)\n     };\n \n@@ -1419,10 +1419,10 @@ fn generics_of_static_method_container(type_context: ty::ctxt,\n                                        -> ty::Generics {\n     match provenance {\n         ast::FromTrait(trait_def_id) => {\n-            ty::lookup_trait_def(type_context, trait_def_id).generics\n+            ty::lookup_trait_def(type_context, trait_def_id).generics.clone()\n         }\n         ast::FromImpl(impl_def_id) => {\n-            ty::lookup_item_type(type_context, impl_def_id).generics\n+            ty::lookup_item_type(type_context, impl_def_id).generics.clone()\n         }\n     }\n }\n@@ -1485,7 +1485,7 @@ fn check_type_parameter_positions_in_path(function_context: @FnCtxt,\n \n             // Make sure lifetime parameterization agrees with the trait or\n             // implementation type.\n-            let trait_region_parameter_count = generics.region_param_defs.len();\n+            let trait_region_parameter_count = generics.region_param_defs().len();\n             let supplied_region_parameter_count = trait_segment.lifetimes.len();\n             if trait_region_parameter_count != supplied_region_parameter_count\n                 && supplied_region_parameter_count != 0 {\n@@ -1501,8 +1501,8 @@ fn check_type_parameter_positions_in_path(function_context: @FnCtxt,\n             // Make sure the number of type parameters supplied on the trait\n             // or implementation segment equals the number of type parameters\n             // on the trait or implementation definition.\n-            let formal_ty_param_count = generics.type_param_defs.len();\n-            let required_ty_param_count = generics.type_param_defs.iter()\n+            let formal_ty_param_count = generics.type_param_defs().len();\n+            let required_ty_param_count = generics.type_param_defs().iter()\n                                                   .take_while(|x| x.default.is_none())\n                                                   .len();\n             let supplied_ty_param_count = trait_segment.types.len();\n@@ -1517,7 +1517,7 @@ fn check_type_parameter_positions_in_path(function_context: @FnCtxt,\n                 } else {\n                     \"s\"\n                 };\n-                let needs = if required_ty_param_count < generics.type_param_defs.len() {\n+                let needs = if required_ty_param_count < generics.type_param_defs().len() {\n                     \"needs at least\"\n                 } else {\n                     \"needs\"\n@@ -1539,7 +1539,7 @@ fn check_type_parameter_positions_in_path(function_context: @FnCtxt,\n                 } else {\n                     \"s\"\n                 };\n-                let needs = if required_ty_param_count < generics.type_param_defs.len() {\n+                let needs = if required_ty_param_count < generics.type_param_defs().len() {\n                     \"needs at most\"\n                 } else {\n                     \"needs\"\n@@ -2465,8 +2465,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         // Look up the number of type parameters and the raw type, and\n         // determine whether the class is region-parameterized.\n         let item_type = ty::lookup_item_type(tcx, class_id);\n-        let type_parameter_count = item_type.generics.type_param_defs.len();\n-        let region_parameter_count = item_type.generics.region_param_defs.len();\n+        let type_parameter_count = item_type.generics.type_param_defs().len();\n+        let region_parameter_count = item_type.generics.region_param_defs().len();\n         let raw_type = item_type.ty;\n \n         // Generate the struct type.\n@@ -2523,8 +2523,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         // Look up the number of type parameters and the raw type, and\n         // determine whether the enum is region-parameterized.\n         let item_type = ty::lookup_item_type(tcx, enum_id);\n-        let type_parameter_count = item_type.generics.type_param_defs.len();\n-        let region_parameter_count = item_type.generics.region_param_defs.len();\n+        let type_parameter_count = item_type.generics.type_param_defs().len();\n+        let region_parameter_count = item_type.generics.region_param_defs().len();\n         let raw_type = item_type.ty;\n \n         // Generate the enum type.\n@@ -3710,8 +3710,8 @@ pub fn instantiate_path(fcx: @FnCtxt,\n                         node_id: ast::NodeId) {\n     debug!(\">>> instantiate_path\");\n \n-    let ty_param_count = tpt.generics.type_param_defs.len();\n-    let ty_param_req = tpt.generics.type_param_defs.iter()\n+    let ty_param_count = tpt.generics.type_param_defs().len();\n+    let ty_param_req = tpt.generics.type_param_defs().iter()\n                                                    .take_while(|x| x.default.is_none())\n                                                    .len();\n     let mut ty_substs_len = 0;\n@@ -3726,7 +3726,7 @@ pub fn instantiate_path(fcx: @FnCtxt,\n \n     // determine the region parameters, using the value given by the user\n     // (if any) and otherwise using a fresh region variable\n-    let num_expected_regions = tpt.generics.region_param_defs.len();\n+    let num_expected_regions = tpt.generics.region_param_defs().len();\n     let num_supplied_regions = pth.segments.last().unwrap().lifetimes.len();\n     let regions = if num_expected_regions == num_supplied_regions {\n         pth.segments.last().unwrap().lifetimes.map(\n@@ -3755,7 +3755,7 @@ pub fn instantiate_path(fcx: @FnCtxt,\n         ast::DefStaticMethod(_, provenance @ ast::FromTrait(_), _) => {\n             let generics = generics_of_static_method_container(fcx.ccx.tcx,\n                                                                provenance);\n-            (ty_param_count - 1, ty_param_req - 1, Some(generics.type_param_defs.len()))\n+            (ty_param_count - 1, ty_param_req - 1, Some(generics.type_param_defs().len()))\n         }\n         _ => (ty_param_count, ty_param_req, None),\n     };\n@@ -3800,7 +3800,7 @@ pub fn instantiate_path(fcx: @FnCtxt,\n         // at the appropriate position.\n         let mut result = ~[];\n         let mut pushed = false;\n-        let defaults = tpt.generics.type_param_defs.iter()\n+        let defaults = tpt.generics.type_param_defs().iter()\n                           .enumerate().filter_map(|(i, x)| {\n             match self_parameter_index {\n                 Some(index) if index == i => None,\n@@ -4305,7 +4305,7 @@ pub fn check_intrinsic_type(ccx: @CrateCtxt, it: &ast::ForeignItem) {\n                     variadic: false}\n     });\n     let i_ty = ty::lookup_item_type(ccx.tcx, local_def(it.id));\n-    let i_n_tps = i_ty.generics.type_param_defs.len();\n+    let i_n_tps = i_ty.generics.type_param_defs().len();\n     if i_n_tps != n_tps {\n         tcx.sess.span_err(it.span, format!(\"intrinsic has wrong number \\\n                                          of type parameters: found {}, \\"}, {"sha": "4db43b2c9137089bdcd7fd7dd23c578569a011a3", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -423,7 +423,7 @@ fn search_for_vtable(vcx: &VtableContext,\n         let im_generics =\n             ty::lookup_item_type(tcx, im.did).generics;\n         let subres = lookup_vtables(vcx, location_info,\n-                                    *im_generics.type_param_defs, &substs,\n+                                    im_generics.type_param_defs(), &substs,\n                                     is_early);\n \n \n@@ -688,12 +688,12 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: @FnCtxt, is_early: bool) {\n             let item_ty = ty::lookup_item_type(cx.tcx, did);\n             debug!(\"early resolve expr: def {:?} {:?}, {:?}, {}\", ex.id, did, def,\n                    fcx.infcx().ty_to_str(item_ty.ty));\n-            if has_trait_bounds(*item_ty.generics.type_param_defs) {\n+            if has_trait_bounds(item_ty.generics.type_param_defs()) {\n                 debug!(\"early_resolve_expr: looking up vtables for type params {}\",\n-                       item_ty.generics.type_param_defs.repr(fcx.tcx()));\n+                       item_ty.generics.type_param_defs().repr(fcx.tcx()));\n                 let vcx = fcx.vtable_context();\n                 let vtbls = lookup_vtables(&vcx, &location_info_for_expr(ex),\n-                                           *item_ty.generics.type_param_defs,\n+                                           item_ty.generics.type_param_defs(),\n                                            substs, is_early);\n                 if !is_early {\n                     insert_vtables(fcx, ex.id, vtbls);\n@@ -717,11 +717,11 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: @FnCtxt, is_early: bool) {\n           Some(type_param_defs) => {\n             debug!(\"vtable resolution on parameter bounds for method call {}\",\n                    ex.repr(fcx.tcx()));\n-            if has_trait_bounds(*type_param_defs) {\n+            if has_trait_bounds(*type_param_defs.borrow()) {\n                 let substs = fcx.node_ty_substs(callee_id);\n                 let vcx = fcx.vtable_context();\n                 let vtbls = lookup_vtables(&vcx, &location_info_for_expr(ex),\n-                                           *type_param_defs, &substs, is_early);\n+                                           *type_param_defs.borrow(), &substs, is_early);\n                 if !is_early {\n                     insert_vtables(fcx, callee_id, vtbls);\n                 }\n@@ -784,9 +784,9 @@ pub fn resolve_impl(ccx: @CrateCtxt,\n     let param_env = ty::construct_parameter_environment(\n         ccx.tcx,\n         None,\n-        *impl_generics.type_param_defs,\n+        impl_generics.type_param_defs(),\n         [],\n-        impl_generics.region_param_defs,\n+        impl_generics.region_param_defs(),\n         impl_item.id);\n \n     let impl_trait_ref = @impl_trait_ref.subst(ccx.tcx, &param_env.free_substs);\n@@ -800,7 +800,7 @@ pub fn resolve_impl(ccx: @CrateCtxt,\n     let trait_def = ty::lookup_trait_def(ccx.tcx, impl_trait_ref.def_id);\n     let vtbls = lookup_vtables(&vcx,\n                                &loc_info,\n-                               *trait_def.generics.type_param_defs,\n+                               trait_def.generics.type_param_defs(),\n                                &impl_trait_ref.substs,\n                                false);\n "}, {"sha": "5ca879fea4a67cd472760fd25195a9bf8abd7b4a", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -47,13 +47,13 @@ use syntax::visit;\n \n use std::cell::RefCell;\n use std::hashmap::HashSet;\n-use std::result::Ok;\n+use std::rc::Rc;\n use std::vec;\n \n pub struct UniversalQuantificationResult {\n     monotype: t,\n     type_variables: ~[ty::t],\n-    type_param_defs: @~[ty::TypeParameterDef]\n+    type_param_defs: Rc<~[ty::TypeParameterDef]>\n }\n \n pub fn get_base_type(inference_context: @InferCtxt,\n@@ -356,11 +356,11 @@ impl CoherenceChecker {\n             // construct the polytype for the method based on the method_ty\n             let new_generics = ty::Generics {\n                 type_param_defs:\n-                    @vec::append(\n-                        (*impl_poly_type.generics.type_param_defs).clone(),\n-                        *new_method_ty.generics.type_param_defs),\n+                    Rc::new(vec::append(\n+                        impl_poly_type.generics.type_param_defs().to_owned(),\n+                            new_method_ty.generics.type_param_defs())),\n                 region_param_defs:\n-                    impl_poly_type.generics.region_param_defs\n+                    impl_poly_type.generics.region_param_defs.clone()\n             };\n             let new_polytype = ty::ty_param_bounds_and_ty {\n                 generics: new_generics,\n@@ -449,7 +449,7 @@ impl CoherenceChecker {\n                     let polytype_b = self.get_self_type_for_implementation(\n                             implementation_b);\n \n-                    if self.polytypes_unify(polytype_a, polytype_b) {\n+                    if self.polytypes_unify(polytype_a.clone(), polytype_b) {\n                         let session = self.crate_context.tcx.sess;\n                         session.span_err(\n                             self.span_of_impl(implementation_b),\n@@ -497,13 +497,13 @@ impl CoherenceChecker {\n     pub fn universally_quantify_polytype(&self,\n                                          polytype: ty_param_bounds_and_ty)\n                                          -> UniversalQuantificationResult {\n-        let region_parameter_count = polytype.generics.region_param_defs.len();\n+        let region_parameter_count = polytype.generics.region_param_defs().len();\n         let region_parameters =\n             self.inference_context.next_region_vars(\n                 infer::BoundRegionInCoherence,\n                 region_parameter_count);\n \n-        let bounds_count = polytype.generics.type_param_defs.len();\n+        let bounds_count = polytype.generics.type_param_defs().len();\n         let type_parameters = self.inference_context.next_ty_vars(bounds_count);\n \n         let substitutions = substs {\n@@ -518,7 +518,7 @@ impl CoherenceChecker {\n         UniversalQuantificationResult {\n             monotype: monotype,\n             type_variables: substitutions.tps,\n-            type_param_defs: polytype.generics.type_param_defs\n+            type_param_defs: polytype.generics.type_param_defs.clone()\n         }\n     }\n \n@@ -770,15 +770,15 @@ pub fn make_substs_for_receiver_types(tcx: ty::ctxt,\n     // determine how many type parameters were declared on the impl\n     let num_impl_type_parameters = {\n         let impl_polytype = ty::lookup_item_type(tcx, impl_id);\n-        impl_polytype.generics.type_param_defs.len()\n+        impl_polytype.generics.type_param_defs().len()\n     };\n \n     // determine how many type parameters appear on the trait\n     let num_trait_type_parameters = trait_ref.substs.tps.len();\n \n     // the current method type has the type parameters from the trait + method\n     let num_method_type_parameters =\n-        num_trait_type_parameters + method.generics.type_param_defs.len();\n+        num_trait_type_parameters + method.generics.type_param_defs().len();\n \n     // the new method type will have the type parameters from the impl + method\n     let combined_tps = vec::from_fn(num_method_type_parameters, |i| {\n@@ -789,7 +789,7 @@ pub fn make_substs_for_receiver_types(tcx: ty::ctxt,\n             // replace type parameters that belong to method with another\n             // type parameter, this time with the index adjusted\n             let method_index = i - num_trait_type_parameters;\n-            let type_param_def = &method.generics.type_param_defs[method_index];\n+            let type_param_def = &method.generics.type_param_defs()[method_index];\n             let new_index = num_impl_type_parameters + method_index;\n             ty::mk_param(tcx, new_index, type_param_def.def_id)\n         }"}, {"sha": "c1a6e53069efeb3ff2a08fd06a1ce543cd629b65", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -44,6 +44,7 @@ use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::ppaux;\n use util::ppaux::Repr;\n \n+use std::rc::Rc;\n use std::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n@@ -285,28 +286,28 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let dummy_defid = ast::DefId {crate: 0, node: 0};\n \n         // Represents [A',B',C']\n-        let num_trait_bounds = trait_ty_generics.type_param_defs.len();\n+        let num_trait_bounds = trait_ty_generics.type_param_defs().len();\n         let non_shifted_trait_tps = vec::from_fn(num_trait_bounds, |i| {\n-            ty::mk_param(tcx, i, trait_ty_generics.type_param_defs[i].def_id)\n+            ty::mk_param(tcx, i, trait_ty_generics.type_param_defs()[i].def_id)\n         });\n \n         // Represents [D']\n         let self_param = ty::mk_param(tcx, num_trait_bounds,\n                                       dummy_defid);\n \n         // Represents [E',F',G']\n-        let num_method_bounds = m.generics.type_param_defs.len();\n+        let num_method_bounds = m.generics.type_param_defs().len();\n         let shifted_method_tps = vec::from_fn(num_method_bounds, |i| {\n             ty::mk_param(tcx, i + num_trait_bounds + 1,\n-                         m.generics.type_param_defs[i].def_id)\n+                         m.generics.type_param_defs()[i].def_id)\n         });\n \n         // Convert the regions 'a, 'b, 'c defined on the trait into\n         // bound regions on the fn. Note that because these appear in the\n         // bound for `Self` they must be early bound.\n-        let new_early_region_param_defs = trait_ty_generics.region_param_defs;\n+        let new_early_region_param_defs = trait_ty_generics.region_param_defs.clone();\n         let rps_from_trait =\n-            trait_ty_generics.region_param_defs.iter().\n+            trait_ty_generics.region_param_defs().iter().\n             enumerate().\n             map(|(index,d)| ty::ReEarlyBound(d.def_id.node, index, d.ident)).\n             collect();\n@@ -334,7 +335,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let mut new_type_param_defs = ~[];\n         let substd_type_param_defs =\n             trait_ty_generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(*substd_type_param_defs);\n+        new_type_param_defs.push_all(*substd_type_param_defs.borrow());\n \n         // add in the \"self\" type parameter\n         let self_trait_def = get_trait_def(ccx, local_def(trait_id));\n@@ -351,7 +352,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n \n         // add in the type parameters from the method\n         let substd_type_param_defs = m.generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(*substd_type_param_defs);\n+        new_type_param_defs.push_all(*substd_type_param_defs.borrow());\n \n         debug!(\"static method {} type_param_defs={} ty={}, substs={}\",\n                m.def_id.repr(tcx),\n@@ -363,7 +364,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         tcache.get().insert(m.def_id,\n                           ty_param_bounds_and_ty {\n                               generics: ty::Generics {\n-                                  type_param_defs: @new_type_param_defs,\n+                                  type_param_defs: Rc::new(new_type_param_defs),\n                                   region_param_defs: new_early_region_param_defs\n                               },\n                               ty: ty\n@@ -383,7 +384,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let trait_self_ty = ty::mk_self(this.tcx, local_def(trait_id));\n         let fty = astconv::ty_of_method(this, *m_id, *m_purity, trait_self_ty,\n                                         *m_explicit_self, m_decl);\n-        let num_trait_type_params = trait_generics.type_param_defs.len();\n+        let num_trait_type_params = trait_generics.type_param_defs().len();\n         ty::Method::new(\n             *m_ident,\n             // FIXME(#5121) -- distinguish early vs late lifetime params\n@@ -466,7 +467,7 @@ fn convert_methods(ccx: &CrateCtxt,\n {\n     let tcx = ccx.tcx;\n     for m in ms.iter() {\n-        let num_rcvr_ty_params = rcvr_ty_generics.type_param_defs.len();\n+        let num_rcvr_ty_params = rcvr_ty_generics.type_param_defs().len();\n         let m_ty_generics = ty_generics(ccx, &m.generics, num_rcvr_ty_params);\n         let mty = @ty_of_method(ccx,\n                                 container,\n@@ -489,10 +490,10 @@ fn convert_methods(ccx: &CrateCtxt,\n                 // itself\n                 ty_param_bounds_and_ty {\n                     generics: ty::Generics {\n-                        type_param_defs: @vec::append(\n-                            (*rcvr_ty_generics.type_param_defs).clone(),\n-                            *m_ty_generics.type_param_defs),\n-                        region_param_defs: rcvr_ty_generics.region_param_defs,\n+                        type_param_defs: Rc::new(vec::append(\n+                            rcvr_ty_generics.type_param_defs().to_owned(),\n+                            m_ty_generics.type_param_defs())),\n+                        region_param_defs: rcvr_ty_generics.region_param_defs.clone(),\n                     },\n                     ty: fty\n                 });\n@@ -574,7 +575,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n             let mut tcache = tcx.tcache.borrow_mut();\n             tcache.get().insert(local_def(it.id),\n                               ty_param_bounds_and_ty {\n-                                  generics: i_ty_generics,\n+                                  generics: i_ty_generics.clone(),\n                                   ty: selfty});\n         }\n \n@@ -637,7 +638,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n \n         {\n             let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n         }\n \n         convert_struct(ccx, struct_def, tpt, it.id);\n@@ -816,7 +817,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n     {\n         let tcache = tcx.tcache.borrow();\n         match tcache.get().find(&def_id) {\n-            Some(&tpt) => return tpt,\n+            Some(tpt) => return tpt.clone(),\n             _ => {}\n         }\n     }\n@@ -826,7 +827,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n             let tpt = no_params(typ);\n \n             let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n         ast::ItemFn(decl, purity, abi, ref generics, _) => {\n@@ -838,8 +839,8 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n                                               decl);\n             let tpt = ty_param_bounds_and_ty {\n                 generics: ty::Generics {\n-                    type_param_defs: ty_generics.type_param_defs,\n-                    region_param_defs: @[],\n+                    type_param_defs: ty_generics.type_param_defs.clone(),\n+                    region_param_defs: Rc::new(~[]),\n                 },\n                 ty: ty::mk_bare_fn(ccx.tcx, tofd)\n             };\n@@ -849,14 +850,14 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n                     ppaux::ty_to_str(tcx, tpt.ty));\n \n             let mut tcache = ccx.tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n         ast::ItemTy(t, ref generics) => {\n             {\n                 let mut tcache = tcx.tcache.borrow_mut();\n                 match tcache.get().find(&local_def(it.id)) {\n-                    Some(&tpt) => return tpt,\n+                    Some(tpt) => return tpt.clone(),\n                     None => { }\n                 }\n             }\n@@ -870,7 +871,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n             };\n \n             let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n         ast::ItemEnum(_, ref generics) => {\n@@ -884,7 +885,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n             };\n \n             let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n         ast::ItemTrait(..) => {\n@@ -902,7 +903,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n             };\n \n             let mut tcache = tcx.tcache.borrow_mut();\n-            tcache.get().insert(local_def(it.id), tpt);\n+            tcache.get().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n         ast::ItemImpl(..) | ast::ItemMod(_) |\n@@ -925,8 +926,8 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n         ast::ForeignItemStatic(t, _) => {\n             ty::ty_param_bounds_and_ty {\n                 generics: ty::Generics {\n-                    type_param_defs: @~[],\n-                    region_param_defs: @[],\n+                    type_param_defs: Rc::new(~[]),\n+                    region_param_defs: Rc::new(~[]),\n                 },\n                 ty: ast_ty_to_ty(ccx, &ExplicitRscope, t)\n             }\n@@ -938,11 +939,11 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                    generics: &ast::Generics,\n                    base_index: uint) -> ty::Generics {\n     return ty::Generics {\n-        region_param_defs: generics.lifetimes.iter().map(|l| {\n+        region_param_defs: Rc::new(generics.lifetimes.iter().map(|l| {\n                 ty::RegionParameterDef { ident: l.ident,\n                                          def_id: local_def(l.id) }\n-            }).collect(),\n-        type_param_defs: @generics.ty_params.mapi_to_vec(|offset, param| {\n+            }).collect()),\n+        type_param_defs: Rc::new(generics.ty_params.mapi_to_vec(|offset, param| {\n             let existing_def_opt = {\n                 let ty_param_defs = ccx.tcx.ty_param_defs.borrow();\n                 ty_param_defs.get().find(&param.id).map(|def| *def)\n@@ -969,7 +970,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                     def\n                 }\n             }\n-        })\n+        }))\n     };\n \n     fn compute_bounds(\n@@ -1040,7 +1041,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n     };\n \n     let mut tcache = ccx.tcx.tcache.borrow_mut();\n-    tcache.get().insert(def_id, tpt);\n+    tcache.get().insert(def_id, tpt.clone());\n     return tpt;\n }\n \n@@ -1049,11 +1050,11 @@ pub fn mk_item_substs(ccx: &CrateCtxt,\n                       self_ty: Option<ty::t>) -> ty::substs\n {\n     let params: ~[ty::t] =\n-        ty_generics.type_param_defs.iter().enumerate().map(\n+        ty_generics.type_param_defs().iter().enumerate().map(\n             |(i, t)| ty::mk_param(ccx.tcx, i, t.def_id)).collect();\n \n     let regions: OptVec<ty::Region> =\n-        ty_generics.region_param_defs.iter().enumerate().map(\n+        ty_generics.region_param_defs().iter().enumerate().map(\n             |(i, l)| ty::ReEarlyBound(l.def_id.node, i, l.ident)).collect();\n \n     substs {regions: ty::NonerasedRegions(regions),"}, {"sha": "a6fc91899f06732734d3eb452772f145fba7da4b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -70,6 +70,7 @@ use util::ppaux;\n \n use std::cell::RefCell;\n use std::hashmap::HashMap;\n+use std::rc::Rc;\n use std::result;\n use extra::list::List;\n use extra::list;\n@@ -271,8 +272,8 @@ pub fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)\n \n pub fn no_params(t: ty::t) -> ty::ty_param_bounds_and_ty {\n     ty::ty_param_bounds_and_ty {\n-        generics: ty::Generics {type_param_defs: @~[],\n-                                region_param_defs: @[]},\n+        generics: ty::Generics {type_param_defs: Rc::new(~[]),\n+                                region_param_defs: Rc::new(~[])},\n         ty: t\n     }\n }"}, {"sha": "cd4abd70ecded0aa02b71871e767555749a4f93b", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -750,7 +750,7 @@ impl<'a> ConstraintContext<'a> {\n                                    variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_substs(def_id={:?})\", def_id);\n \n-        for (i, p) in generics.type_param_defs.iter().enumerate() {\n+        for (i, p) in generics.type_param_defs().iter().enumerate() {\n             let variance_decl =\n                 self.declared_variance(p.def_id, def_id, TypeParam, i);\n             let variance_i = self.xform(variance, variance_decl);\n@@ -760,7 +760,7 @@ impl<'a> ConstraintContext<'a> {\n         match substs.regions {\n             ty::ErasedRegions => {}\n             ty::NonerasedRegions(ref rps) => {\n-                for (i, p) in generics.region_param_defs.iter().enumerate() {\n+                for (i, p) in generics.region_param_defs().iter().enumerate() {\n                     let variance_decl =\n                         self.declared_variance(p.def_id, def_id, RegionParam, i);\n                     let variance_i = self.xform(variance, variance_decl);"}, {"sha": "27d15d7382532b11ffe42aec6fff003f5f448aad", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -522,11 +522,11 @@ pub fn parameterized(cx: ctxt,\n     }\n \n     let generics = if is_trait {\n-        ty::lookup_trait_def(cx, did).generics\n+        ty::lookup_trait_def(cx, did).generics.clone()\n     } else {\n         ty::lookup_item_type(cx, did).generics\n     };\n-    let ty_params = generics.type_param_defs.iter();\n+    let ty_params = generics.type_param_defs().iter();\n     let num_defaults = ty_params.zip(tps.iter()).rev().take_while(|&(def, &actual)| {\n         match def.default {\n             Some(default) => default == actual,\n@@ -789,8 +789,8 @@ impl Repr for ty::ty_param_bounds_and_ty {\n impl Repr for ty::Generics {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         format!(\"Generics(type_param_defs: {}, region_param_defs: {})\",\n-                self.type_param_defs.repr(tcx),\n-                self.region_param_defs.repr(tcx))\n+                self.type_param_defs().repr(tcx),\n+                self.region_param_defs().repr(tcx))\n     }\n }\n "}, {"sha": "d6b4d3f5656294fa3b48f63c36b1982b646126e8", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8734df51500bdc924f2b504e0d7ecbe1d01bfc0/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=f8734df51500bdc924f2b504e0d7ecbe1d01bfc0", "patch": "@@ -250,7 +250,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_evec_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_evec_box(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n         true\n     }\n "}]}