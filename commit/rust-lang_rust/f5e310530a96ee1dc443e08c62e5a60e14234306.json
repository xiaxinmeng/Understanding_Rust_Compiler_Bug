{"sha": "f5e310530a96ee1dc443e08c62e5a60e14234306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTMxMDUzMGE5NmVlMWRjNDQzZTA4YzYyZTVhNjBlMTQyMzQzMDY=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-14T19:05:31Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-18T12:36:37Z"}, "message": "Refactor 'ReadForMatch' into 'FakeRead' and add the cause of the fake read", "tree": {"sha": "3b80651fb59a3d4255febfa1ab66b057b16d172e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b80651fb59a3d4255febfa1ab66b057b16d172e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e310530a96ee1dc443e08c62e5a60e14234306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e310530a96ee1dc443e08c62e5a60e14234306", "html_url": "https://github.com/rust-lang/rust/commit/f5e310530a96ee1dc443e08c62e5a60e14234306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e310530a96ee1dc443e08c62e5a60e14234306/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b53629901f2f797bf0191afdaba380234f81ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b53629901f2f797bf0191afdaba380234f81ad", "html_url": "https://github.com/rust-lang/rust/commit/52b53629901f2f797bf0191afdaba380234f81ad"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "313ef054829c5adcd6e7f393d80faebf12f68350", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -238,7 +238,8 @@ for mir::StatementKind<'gcx> {\n                 place.hash_stable(hcx, hasher);\n                 rvalue.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::ReadForMatch(ref place) => {\n+            mir::StatementKind::FakeRead(ref cause, ref place) => {\n+                cause.hash_stable(hcx, hasher);\n                 place.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::SetDiscriminant { ref place, variant_index } => {\n@@ -271,6 +272,8 @@ for mir::StatementKind<'gcx> {\n     }\n }\n \n+impl_stable_hash_for!(enum mir::FakeReadCause { ForMatch, ForLet });\n+\n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n     for mir::ValidationOperand<'gcx, T>\n     where T: HashStable<StableHashingContext<'a>>"}, {"sha": "8e9c1ad23c8643eb31391600140969491b6ce567", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -1613,8 +1613,10 @@ pub enum StatementKind<'tcx> {\n     Assign(Place<'tcx>, Rvalue<'tcx>),\n \n     /// This represents all the reading that a pattern match may do\n-    /// (e.g. inspecting constants and discriminant values).\n-    ReadForMatch(Place<'tcx>),\n+    /// (e.g. inspecting constants and discriminant values), and the\n+    /// kind of pattern it comes from. This is in order to adapt potential\n+    /// error messages to these specific patterns.\n+    FakeRead(FakeReadCause, Place<'tcx>),\n \n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant {\n@@ -1662,6 +1664,13 @@ pub enum StatementKind<'tcx> {\n     Nop,\n }\n \n+/// The `FakeReadCause` describes the type of pattern why a `FakeRead` statement exists.\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum FakeReadCause {\n+    ForMatch,\n+    ForLet,\n+}\n+\n /// The `ValidationOp` describes what happens with each of the operands of a\n /// `Validate` statement.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n@@ -1718,7 +1727,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n-            ReadForMatch(ref place) => write!(fmt, \"ReadForMatch({:?})\", place),\n+            FakeRead(ref cause, ref place) => write!(fmt, \"FakeRead({:?}, {:?})\", cause, place),\n             // (reuse lifetime rendering policy from ppaux.)\n             EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             Validate(ref op, ref places) => write!(fmt, \"Validate({:?}, {:?})\", op, places),\n@@ -2585,6 +2594,7 @@ CloneTypeFoldableAndLiftImpls! {\n     Mutability,\n     SourceInfo,\n     UpvarDecl,\n+    FakeReadCause,\n     ValidationOp,\n     SourceScope,\n     SourceScopeData,\n@@ -2651,7 +2661,7 @@ BraceStructTypeFoldableImpl! {\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for StatementKind<'tcx> {\n         (StatementKind::Assign)(a, b),\n-        (StatementKind::ReadForMatch)(place),\n+        (StatementKind::FakeRead)(cause, place),\n         (StatementKind::SetDiscriminant) { place, variant_index },\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),"}, {"sha": "91c83ecb2e23ce308852999cf78ecc891a95dfc1", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -354,7 +354,7 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, place, rvalue, location);\n                     }\n-                    StatementKind::ReadForMatch(ref $($mutability)* place) => {\n+                    StatementKind::FakeRead(_, ref $($mutability)* place) => {\n                         self.visit_place(place,\n                                          PlaceContext::Inspect,\n                                          location);"}, {"sha": "1fdbf687be8f81f3c99820b1240cf0c00cb6eff0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -1330,7 +1330,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n         \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n-        \"in match codegen, do not include ReadForMatch statements (used by mir-borrowck)\"),\n+        \"in match codegen, do not include FakeRead statements (used by mir-borrowck)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting).\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "aaa0b9fe51321a0b4bd8b4acd67ddd9290a1c2cc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -1478,7 +1478,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.emit_read_for_match()\n     }\n \n-    /// If true, make MIR codegen for `match` emit ReadForMatch\n+    /// If true, make MIR codegen for `match` emit FakeRead\n     /// statements (which simulate the maximal effect of executing the\n     /// patterns in a match arm).\n     pub fn emit_read_for_match(&self) -> bool {"}, {"sha": "b4eb7615f98b42fbf59f404c815514c3bfcd6e5c", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -89,7 +89,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n                 bx\n             }\n-            mir::StatementKind::ReadForMatch(_) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n             mir::StatementKind::AscribeUserType(..) |"}, {"sha": "478a2326be3a6c600e333e50fabc6e563df57123", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -478,9 +478,9 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                     flow_state,\n                 );\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.access_place(\n-                    ContextKind::ReadForMatch.new(location),\n+                    ContextKind::FakeRead.new(location),\n                     (place, span),\n                     (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n                     LocalMutationIsAllowed::No,\n@@ -2206,7 +2206,7 @@ enum ContextKind {\n     CallDest,\n     Assert,\n     Yield,\n-    ReadForMatch,\n+    FakeRead,\n     StorageDead,\n }\n "}, {"sha": "0b7fededa973236c37c7b791d1eab88553890a66", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -93,9 +93,9 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                     JustWrite\n                 );\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.access_place(\n-                    ContextKind::ReadForMatch.new(location),\n+                    ContextKind::FakeRead.new(location),\n                     place,\n                     (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n                     LocalMutationIsAllowed::No,"}, {"sha": "1f12e9c747f450c86a89b102831ce5267fbacedb", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -995,7 +995,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::ReadForMatch(_)\n+            StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::InlineAsm { .. }"}, {"sha": "49c1308329f3c13d70cd2a6ba9931bd6f0bd4b46", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             *pre_binding_block,\n                             Statement {\n                                 source_info: pattern_source_info,\n-                                kind: StatementKind::ReadForMatch(borrow_temp.clone()),\n+                                kind: StatementKind::FakeRead(FakeReadCause::ForMatch, borrow_temp.clone()),\n                             },\n                         );\n                     }\n@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::ReadForMatch(place.clone()),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n                     },\n                 );\n \n@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::ReadForMatch(place.clone()),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n                     },\n                 );\n "}, {"sha": "ed2f780baf1c29dca01f9322b81c4523daf18e5f", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            mir::StatementKind::ReadForMatch(..) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |"}, {"sha": "63adcb5132a7142d183bedc7480b37bfe3bd838d", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -281,7 +281,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n-            StatementKind::ReadForMatch(ref place) => {\n+            StatementKind::FakeRead(_, ref place) => {\n                 self.create_move_path(place);\n             }\n             StatementKind::InlineAsm { ref outputs, ref inputs, ref asm } => {"}, {"sha": "5db7e0b5eb531fa2c1be8334e6a91b5fe7988078", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -150,9 +150,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 self.deallocate_local(old_val)?;\n             }\n \n-            // No dynamic semantics attached to `ReadForMatch`; MIR\n+            // No dynamic semantics attached to `FakeRead`; MIR\n             // interpreter is solely intended for borrowck'ed code.\n-            ReadForMatch(..) => {}\n+            FakeRead(..) => {}\n \n             // Validity checks.\n             Validate(op, ref places) => {"}, {"sha": "286de52bec5cae574859100116fd81918fbc0cfc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n         self.source_info = statement.source_info;\n         match statement.kind {\n             StatementKind::Assign(..) |\n-            StatementKind::ReadForMatch(..) |\n+            StatementKind::FakeRead(..) |\n             StatementKind::SetDiscriminant { .. } |\n             StatementKind::StorageLive(..) |\n             StatementKind::StorageDead(..) |"}, {"sha": "a997bd37c50a39a8468fc0f7afeea95154f1d51d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -1090,7 +1090,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::Assign(ref place, ref rvalue) => {\n                     this.visit_assign(bb, place, rvalue, location);\n                 }\n-                StatementKind::ReadForMatch(..) |\n+                StatementKind::FakeRead(..) |\n                 StatementKind::SetDiscriminant { .. } |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |"}, {"sha": "541b3c0607de31686bb433287dd5a1411d6c26fb", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -216,7 +216,7 @@ fn check_statement(\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::ReadForMatch(_) => Err((span, \"match in const fn is unstable\".into())),\n+        StatementKind::FakeRead(..) => Err((span, \"match in const fn is unstable\".into())),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),"}, {"sha": "298e38228d3570b3e0673aa9e3159aaeeb248ef1", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -49,7 +49,7 @@ impl RemoveNoopLandingPads {\n     ) -> bool {\n         for stmt in &mir[bb].statements {\n             match stmt.kind {\n-                StatementKind::ReadForMatch(_) |\n+                StatementKind::FakeRead(..) |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |"}, {"sha": "487a18f6620b2c9edfd434068f81bb5797bfab86", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -157,7 +157,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::Assign(ref place, ref rvalue) => {\n                 (place, rvalue)\n             }\n-            mir::StatementKind::ReadForMatch(_) |\n+            mir::StatementKind::FakeRead(..) |\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |"}, {"sha": "0b9b20d3c45398495cbe898d729a1968ac562ca6", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e310530a96ee1dc443e08c62e5a60e14234306/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=f5e310530a96ee1dc443e08c62e5a60e14234306", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"Statement\", statement);\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n-            StatementKind::ReadForMatch(..) => \"StatementKind::ReadForMatch\",\n+            StatementKind::FakeRead(..) => \"StatementKind::FakeRead\",\n             StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n             StatementKind::Validate(..) => \"StatementKind::Validate\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\","}]}