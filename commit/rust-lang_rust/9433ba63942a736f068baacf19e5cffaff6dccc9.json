{"sha": "9433ba63942a736f068baacf19e5cffaff6dccc9", "node_id": "C_kwDOAAsO6NoAKDk0MzNiYTYzOTQyYTczNmYwNjhiYWFjZjE5ZTVjZmZhZmY2ZGNjYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T16:59:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T16:59:18Z"}, "message": "Auto merge of #107644 - Zoxc:query-cache-tweak, r=cjgillot\n\nRemove QueryStorage::store_nocache\n\nThis method was added in https://github.com/rust-lang/rust/pull/70674 but it doesn't seem to serve any purpose.", "tree": {"sha": "e10e5914260521574d7d682d5afc29aa212eb72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10e5914260521574d7d682d5afc29aa212eb72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9433ba63942a736f068baacf19e5cffaff6dccc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9433ba63942a736f068baacf19e5cffaff6dccc9", "html_url": "https://github.com/rust-lang/rust/commit/9433ba63942a736f068baacf19e5cffaff6dccc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9433ba63942a736f068baacf19e5cffaff6dccc9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00e24d76a9ac03b146d3bf89e2161b2466c6551", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e24d76a9ac03b146d3bf89e2161b2466c6551", "html_url": "https://github.com/rust-lang/rust/commit/a00e24d76a9ac03b146d3bf89e2161b2466c6551"}, {"sha": "d4598406336a1100786ff15708b48a51768ec235", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4598406336a1100786ff15708b48a51768ec235", "html_url": "https://github.com/rust-lang/rust/commit/d4598406336a1100786ff15708b48a51768ec235"}], "stats": {"total": 41, "additions": 4, "deletions": 37}, "files": [{"sha": "9f875b4373173cac741bc7fdd5058627de025b0e", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9433ba63942a736f068baacf19e5cffaff6dccc9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433ba63942a736f068baacf19e5cffaff6dccc9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=9433ba63942a736f068baacf19e5cffaff6dccc9", "patch": "@@ -23,10 +23,6 @@ pub trait CacheSelector<'tcx, V> {\n pub trait QueryStorage {\n     type Value: Debug;\n     type Stored: Copy;\n-\n-    /// Store a value without putting it in the cache.\n-    /// This is meant to be used with cycle errors.\n-    fn store_nocache(&self, value: Self::Value) -> Self::Stored;\n }\n \n pub trait QueryCache: QueryStorage + Sized {\n@@ -68,12 +64,6 @@ impl<K, V> Default for DefaultCache<K, V> {\n impl<K: Eq + Hash, V: Copy + Debug> QueryStorage for DefaultCache<K, V> {\n     type Value = V;\n     type Stored = V;\n-\n-    #[inline]\n-    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n-        // We have no dedicated storage\n-        value\n-    }\n }\n \n impl<K, V> QueryCache for DefaultCache<K, V>\n@@ -144,13 +134,6 @@ impl<'tcx, K, V> Default for ArenaCache<'tcx, K, V> {\n impl<'tcx, K: Eq + Hash, V: Debug + 'tcx> QueryStorage for ArenaCache<'tcx, K, V> {\n     type Value = V;\n     type Stored = &'tcx V;\n-\n-    #[inline]\n-    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n-        let value = self.arena.alloc((value, DepNodeIndex::INVALID));\n-        let value = unsafe { &*(&value.0 as *const _) };\n-        &value\n-    }\n }\n \n impl<'tcx, K, V: 'tcx> QueryCache for ArenaCache<'tcx, K, V>\n@@ -231,12 +214,6 @@ impl<K: Idx, V> Default for VecCache<K, V> {\n impl<K: Eq + Idx, V: Copy + Debug> QueryStorage for VecCache<K, V> {\n     type Value = V;\n     type Stored = V;\n-\n-    #[inline]\n-    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n-        // We have no dedicated storage\n-        value\n-    }\n }\n \n impl<K, V> QueryCache for VecCache<K, V>\n@@ -309,13 +286,6 @@ impl<'tcx, K: Idx, V> Default for VecArenaCache<'tcx, K, V> {\n impl<'tcx, K: Eq + Idx, V: Debug + 'tcx> QueryStorage for VecArenaCache<'tcx, K, V> {\n     type Value = V;\n     type Stored = &'tcx V;\n-\n-    #[inline]\n-    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n-        let value = self.arena.alloc((value, DepNodeIndex::INVALID));\n-        let value = unsafe { &*(&value.0 as *const _) };\n-        &value\n-    }\n }\n \n impl<'tcx, K, V: 'tcx> QueryCache for VecArenaCache<'tcx, K, V>"}, {"sha": "ed66d1929c5e78d1843c78fe756f057ce4bf8096", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9433ba63942a736f068baacf19e5cffaff6dccc9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433ba63942a736f068baacf19e5cffaff6dccc9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=9433ba63942a736f068baacf19e5cffaff6dccc9", "patch": "@@ -121,20 +121,17 @@ where\n \n #[cold]\n #[inline(never)]\n-fn mk_cycle<Qcx, V, R, D: DepKind>(\n+fn mk_cycle<Qcx, R, D: DepKind>(\n     qcx: Qcx,\n     cycle_error: CycleError<D>,\n     handler: HandleCycleError,\n-    cache: &dyn crate::query::QueryStorage<Value = V, Stored = R>,\n ) -> R\n where\n     Qcx: QueryContext + crate::query::HasDepContext<DepKind = D>,\n-    V: std::fmt::Debug + Value<Qcx::DepContext, Qcx::DepKind>,\n-    R: Copy,\n+    R: std::fmt::Debug + Value<Qcx::DepContext, Qcx::DepKind>,\n {\n     let error = report_cycle(qcx.dep_context().sess(), &cycle_error);\n-    let value = handle_cycle_error(*qcx.dep_context(), &cycle_error, error, handler);\n-    cache.store_nocache(value)\n+    handle_cycle_error(*qcx.dep_context(), &cycle_error, error, handler)\n }\n \n fn handle_cycle_error<Tcx, V>(\n@@ -397,7 +394,7 @@ where\n             (result, Some(dep_node_index))\n         }\n         TryGetJob::Cycle(error) => {\n-            let result = mk_cycle(qcx, error, Q::HANDLE_CYCLE_ERROR, cache);\n+            let result = mk_cycle(qcx, error, Q::HANDLE_CYCLE_ERROR);\n             (result, None)\n         }\n         #[cfg(parallel_compiler)]"}]}