{"sha": "6d3d07abfede1f885230ecefa2a076919ef6290c", "node_id": "C_kwDOAAsO6NoAKDZkM2QwN2FiZmVkZTFmODg1MjMwZWNlZmEyYTA3NjkxOWVmNjI5MGM", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-09-22T00:03:25Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-22T00:19:35Z"}, "message": "Feature-flag doc tests so they run for core", "tree": {"sha": "6b7a8f0fc68d83d7a05ddedcfb5c34f37de169a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7a8f0fc68d83d7a05ddedcfb5c34f37de169a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3d07abfede1f885230ecefa2a076919ef6290c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3d07abfede1f885230ecefa2a076919ef6290c", "html_url": "https://github.com/rust-lang/rust/commit/6d3d07abfede1f885230ecefa2a076919ef6290c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3d07abfede1f885230ecefa2a076919ef6290c/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8342fe75f2925cda4787561272eec87efe596303", "url": "https://api.github.com/repos/rust-lang/rust/commits/8342fe75f2925cda4787561272eec87efe596303", "html_url": "https://github.com/rust-lang/rust/commit/8342fe75f2925cda4787561272eec87efe596303"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "2bae414ebfb5494621051e09554287683b3e10a7", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=6d3d07abfede1f885230ecefa2a076919ef6290c", "patch": "@@ -10,7 +10,8 @@ macro_rules! impl_uint_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::MAX;\")]\n             /// let x = Simd::from_array([2, 1, 0, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -29,7 +30,8 @@ macro_rules! impl_uint_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::MAX;\")]\n             /// let x = Simd::from_array([2, 1, 0, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -54,7 +56,8 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, 0, 1, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -73,7 +76,8 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, -2, -1, MAX]);\n             /// let max = Simd::splat(MAX);\n@@ -92,7 +96,8 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let xs = Simd::from_array([MIN, MIN +1, -5, 0]);\n             /// assert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n@@ -110,7 +115,8 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let xs = Simd::from_array([MIN, -2, 0, 3]);\n             /// let unsat = xs.abs();\n@@ -132,7 +138,8 @@ macro_rules! impl_int_arith {\n             /// # Examples\n             /// ```\n             /// # #![feature(portable_simd)]\n-            /// # use core_simd::*;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             #[doc = concat!(\"# use core::\", stringify!($ty), \"::{MIN, MAX};\")]\n             /// let x = Simd::from_array([MIN, -2, 3, MAX]);\n             /// let unsat = -x;"}, {"sha": "3e31c3365e884f6948bf90e3431cd9cd4b4bd7a2", "filename": "crates/core_simd/src/permute.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=6d3d07abfede1f885230ecefa2a076919ef6290c", "patch": "@@ -18,7 +18,8 @@ macro_rules! impl_shuffle_lane {\n             ///\n             /// ```\n             /// #![feature(portable_simd)]\n-            /// # use core_simd::Simd;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             /// let a = Simd::from_array([1.0, 2.0, 3.0, 4.0]);\n             /// let b = Simd::from_array([5.0, 6.0, 7.0, 8.0]);\n             /// const IDXS: [u32; 4] = [4,0,3,7];\n@@ -59,7 +60,8 @@ macro_rules! impl_shuffle_lane {\n             ///\n             /// ```\n             /// #![feature(portable_simd)]\n-            /// # use core_simd::Simd;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             /// let a = Simd::from_array([0, 1, 2, 3]);\n             /// let b = Simd::from_array([4, 5, 6, 7]);\n             /// let (x, y) = a.interleave(b);\n@@ -111,7 +113,8 @@ macro_rules! impl_shuffle_lane {\n             ///\n             /// ```\n             /// #![feature(portable_simd)]\n-            /// # use core_simd::Simd;\n+            /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+            /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n             /// let a = Simd::from_array([0, 4, 1, 5]);\n             /// let b = Simd::from_array([2, 6, 3, 7]);\n             /// let (x, y) = a.deinterleave(b);"}, {"sha": "c3d69a83088b4929869d2bd10170e117c33b2fd9", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=6d3d07abfede1f885230ecefa2a076919ef6290c", "patch": "@@ -61,7 +61,8 @@ where\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::{Mask, Simd};\n+    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n     /// let a = Simd::from_array([0, 1, 2, 3]);\n     /// let b = Simd::from_array([4, 5, 6, 7]);\n     /// let mask = Mask::from_array([true, false, false, true]);\n@@ -72,7 +73,8 @@ where\n     /// `select` can also be used on masks:\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::Mask;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Mask;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Mask;\n     /// let a = Mask::<i32, 4>::from_array([true, true, false, false]);\n     /// let b = Mask::<i32, 4>::from_array([false, false, true, true]);\n     /// let mask = Mask::<i32, 4>::from_array([true, false, false, true]);"}, {"sha": "eee53385c15e9636446eb43b2866ce366d8f3d08", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3d07abfede1f885230ecefa2a076919ef6290c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=6d3d07abfede1f885230ecefa2a076919ef6290c", "patch": "@@ -53,7 +53,8 @@ where\n     /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -71,7 +72,8 @@ where\n     /// Out-of-bounds indices instead use the default value for that lane (0).\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     ///\n@@ -91,7 +93,8 @@ where\n     /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n+    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -121,7 +124,8 @@ where\n     /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);\n@@ -139,7 +143,8 @@ where\n     /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n+    /// # #[cfg(feature = \"std\")] use core_simd::{Simd, Mask};\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, Mask};\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);"}]}