{"sha": "887028fcf52bf7f3af55114f112123c902989bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzAyOGZjZjUyYmY3ZjNhZjU1MTE0ZjExMjEyM2M5MDI5ODliZWQ=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T05:25:36Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:52Z"}, "message": "Remove old_source now we've fully migrated\n\nFixes #6913", "tree": {"sha": "ff129d5891de09502ada5eccab45e42fbec9ea82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff129d5891de09502ada5eccab45e42fbec9ea82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887028fcf52bf7f3af55114f112123c902989bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887028fcf52bf7f3af55114f112123c902989bed", "html_url": "https://github.com/rust-lang/rust/commit/887028fcf52bf7f3af55114f112123c902989bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887028fcf52bf7f3af55114f112123c902989bed/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c659c21dda26311be584d0bb89b80f8ae3d7bae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c659c21dda26311be584d0bb89b80f8ae3d7bae", "html_url": "https://github.com/rust-lang/rust/commit/5c659c21dda26311be584d0bb89b80f8ae3d7bae"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "57baeb3cf39ebf3a2c602af57a39ad05d0534283", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/887028fcf52bf7f3af55114f112123c902989bed/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887028fcf52bf7f3af55114f112123c902989bed/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=887028fcf52bf7f3af55114f112123c902989bed", "patch": "@@ -16,8 +16,6 @@ use crate::{\n \n pub trait HasSource {\n     type Ast;\n-    #[deprecated = \"migrating to source() method that returns an Option\"]\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>>;\n }\n \n@@ -48,15 +46,6 @@ impl Module {\n \n impl HasSource for Field {\n     type Ast = FieldSource;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<FieldSource> {\n-        let var = VariantId::from(self.parent);\n-        let src = var.child_source(db.upcast());\n-        src.map(|it| match it[self.id].clone() {\n-            Either::Left(it) => FieldSource::Pos(it),\n-            Either::Right(it) => FieldSource::Named(it),\n-        })\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db.upcast());\n@@ -69,126 +58,74 @@ impl HasSource for Field {\n }\n impl HasSource for Struct {\n     type Ast = ast::Struct;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::Union;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Union> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::Enum;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Variant {\n     type Ast = ast::Variant;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n-        self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<ast::Variant>> {\n         Some(self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone()))\n     }\n }\n impl HasSource for Function {\n     type Ast = ast::Fn;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Const {\n     type Ast = ast::Const;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Const> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Static {\n     type Ast = ast::Static;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Static> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for Trait {\n     type Ast = ast::Trait;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Trait> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAlias;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::TypeAlias> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::Macro;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Macro> {\n-        InFile {\n-            file_id: self.id.ast_id.expect(\"MacroDef without ast_id\").file_id,\n-            value: self.id.ast_id.expect(\"MacroDef without ast_id\").to_node(db.upcast()),\n-        }\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let ast_id = self.id.ast_id?;\n         Some(InFile { file_id: ast_id.file_id, value: ast_id.to_node(db.upcast()) })\n     }\n }\n impl HasSource for Impl {\n     type Ast = ast::Impl;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n \n impl HasSource for TypeParam {\n     type Ast = Either<ast::Trait, ast::TypeParam>;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n-        let child_source = self.id.parent.child_source(db.upcast());\n-        child_source.map(|it| it[self.id.local_id].clone())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         Some(child_source.map(|it| it[self.id.local_id].clone()))\n@@ -197,11 +134,6 @@ impl HasSource for TypeParam {\n \n impl HasSource for LifetimeParam {\n     type Ast = ast::LifetimeParam;\n-    fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n-        let child_source = self.id.parent.child_source(db.upcast());\n-        child_source.map(|it| it[self.id.local_id].clone())\n-    }\n-\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         Some(child_source.map(|it| it[self.id.local_id].clone()))"}]}