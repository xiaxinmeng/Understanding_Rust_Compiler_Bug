{"sha": "97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "node_id": "C_kwDOAAsO6NoAKDk3ZGRjNjM0M2FmZDFmM2Y5MTZkNTdhNWMwZThmYzQ0NjdjNzYwZGE", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-04T04:59:04Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-04T04:59:04Z"}, "message": "remove unused argument from `throw_unresolved_import_error`", "tree": {"sha": "8a18838cca98a67af90915946cda4d1bdfb2c1b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a18838cca98a67af90915946cda4d1bdfb2c1b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "html_url": "https://github.com/rust-lang/rust/commit/97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ddc6343afd1f3f916d57a5c0e8fc4467c760da/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b55ac39fa633d0983fad014469e1036669bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b55ac39fa633d0983fad014469e1036669bf28", "html_url": "https://github.com/rust-lang/rust/commit/33b55ac39fa633d0983fad014469e1036669bf28"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "44965dd6db84f3e8b41bd52ce61593421f23776c", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97ddc6343afd1f3f916d57a5c0e8fc4467c760da/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddc6343afd1f3f916d57a5c0e8fc4467c760da/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 {\n                     // In the case of a new import line, throw a diagnostic message\n                     // for the previous line.\n-                    self.throw_unresolved_import_error(errors, None);\n+                    self.throw_unresolved_import_error(errors);\n                     errors = vec![];\n                 }\n                 if seen_spans.insert(err.span) {\n@@ -482,29 +482,21 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n \n         if !errors.is_empty() {\n-            self.throw_unresolved_import_error(errors, None);\n+            self.throw_unresolved_import_error(errors);\n         }\n     }\n \n-    fn throw_unresolved_import_error(\n-        &self,\n-        errors: Vec<(String, UnresolvedImportError)>,\n-        span: Option<MultiSpan>,\n-    ) {\n+    fn throw_unresolved_import_error(&self, errors: Vec<(String, UnresolvedImportError)>) {\n+        if errors.is_empty() {\n+            return;\n+        }\n+\n         /// Upper limit on the number of `span_label` messages.\n         const MAX_LABEL_COUNT: usize = 10;\n \n-        let (span, msg) = if errors.is_empty() {\n-            (span.unwrap(), \"unresolved import\".to_string())\n-        } else {\n-            let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n-\n-            let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n-\n-            let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n-\n-            (span, msg)\n-        };\n+        let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n+        let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n+        let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n "}]}