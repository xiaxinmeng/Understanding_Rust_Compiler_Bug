{"sha": "908dba0c9477b7dd022a236cb1514ddfca9369f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOGRiYTBjOTQ3N2I3ZGQwMjJhMjM2Y2IxNTE0ZGRmY2E5MzY5ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-01T15:21:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-01T15:21:11Z"}, "message": "Auto merge of #38048 - rkruppe:llvm-stringref-fixes, r=alexcrichton\n\n[LLVM 4.0] Don't assume llvm::StringRef is null terminated\n\nStringRefs have a length and their contents are not usually null-terminated. The solution is to either copy the string data (in `rustc_llvm::diagnostic`) or take the size into account (in LLVMRustPrintPasses).\n\nI couldn't trigger a bug caused by this (apparently all the strings returned in practice are actually null-terminated) but this is more correct and more future-proof.\n\ncc #37609", "tree": {"sha": "a616d31780537a8a3d6bf2e9fcd027bcf8d7ebcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a616d31780537a8a3d6bf2e9fcd027bcf8d7ebcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2", "html_url": "https://github.com/rust-lang/rust/commit/908dba0c9477b7dd022a236cb1514ddfca9369f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149e76f12cea86338785050165b65965b1b524a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/149e76f12cea86338785050165b65965b1b524a9", "html_url": "https://github.com/rust-lang/rust/commit/149e76f12cea86338785050165b65965b1b524a9"}, {"sha": "85dc08e525622365909cdaae27f4b89179321a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/85dc08e525622365909cdaae27f4b89179321a92", "html_url": "https://github.com/rust-lang/rust/commit/85dc08e525622365909cdaae27f4b89179321a92"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "cef6199a74af6efa5833afffcc4d0ac732876942", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=908dba0c9477b7dd022a236cb1514ddfca9369f2", "patch": "@@ -13,7 +13,7 @@\n pub use self::OptimizationDiagnosticKind::*;\n pub use self::Diagnostic::*;\n \n-use libc::{c_char, c_uint};\n+use libc::c_uint;\n use std::ptr;\n \n use {DiagnosticInfoRef, TwineRef, ValueRef};\n@@ -45,7 +45,7 @@ impl OptimizationDiagnosticKind {\n \n pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n-    pub pass_name: *const c_char,\n+    pub pass_name: String,\n     pub function: ValueRef,\n     pub debug_loc: DebugLocRef,\n     pub message: String,\n@@ -55,21 +55,23 @@ impl OptimizationDiagnostic {\n     unsafe fn unpack(kind: OptimizationDiagnosticKind,\n                      di: DiagnosticInfoRef)\n                      -> OptimizationDiagnostic {\n-        let mut pass_name = ptr::null();\n         let mut function = ptr::null_mut();\n         let mut debug_loc = ptr::null_mut();\n \n-        let message = super::build_string(|message|\n-            super::LLVMRustUnpackOptimizationDiagnostic(di,\n-                                                        &mut pass_name,\n-                                                        &mut function,\n-                                                        &mut debug_loc,\n-                                                        message)\n+        let mut message = None;\n+        let pass_name = super::build_string(|pass_name|\n+            message = super::build_string(|message|\n+                super::LLVMRustUnpackOptimizationDiagnostic(di,\n+                                                            pass_name,\n+                                                            &mut function,\n+                                                            &mut debug_loc,\n+                                                            message)\n+            )\n         );\n \n         OptimizationDiagnostic {\n             kind: kind,\n-            pass_name: pass_name,\n+            pass_name: pass_name.expect(\"got a non-UTF8 pass name from LLVM\"),\n             function: function,\n             debug_loc: debug_loc,\n             message: message.expect(\"got a non-UTF8 OptimizationDiagnostic message from LLVM\")"}, {"sha": "98816826b9ed23a85e6b4f31306aade271f0a00f", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=908dba0c9477b7dd022a236cb1514ddfca9369f2", "patch": "@@ -1820,7 +1820,7 @@ extern \"C\" {\n                                            DiagnosticContext: *mut c_void);\n \n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n-                                                pass_name_out: *mut *const c_char,\n+                                                pass_name_out: RustStringRef,\n                                                 function_out: *mut ValueRef,\n                                                 debugloc_out: *mut DebugLocRef,\n                                                 message_out: RustStringRef);"}, {"sha": "ae5d02c7e048a9dad4eee4bd11343f7ca9d9531e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=908dba0c9477b7dd022a236cb1514ddfca9369f2", "patch": "@@ -26,7 +26,7 @@ use errors::emitter::Emitter;\n use syntax_pos::MultiSpan;\n use context::{is_pie_binary, get_reloc_model};\n \n-use std::ffi::{CStr, CString};\n+use std::ffi::CString;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -403,19 +403,16 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n         }\n \n         llvm::diagnostic::Optimization(opt) => {\n-            let pass_name = str::from_utf8(CStr::from_ptr(opt.pass_name).to_bytes())\n-                                .ok()\n-                                .expect(\"got a non-UTF8 pass name from LLVM\");\n             let enabled = match cgcx.remark {\n                 AllPasses => true,\n-                SomePasses(ref v) => v.iter().any(|s| *s == pass_name),\n+                SomePasses(ref v) => v.iter().any(|s| *s == opt.pass_name),\n             };\n \n             if enabled {\n                 let loc = llvm::debug_loc_to_string(llcx, opt.debug_loc);\n                 cgcx.handler.note_without_error(&format!(\"optimization {} for {} at {}: {}\",\n                                                 opt.kind.describe(),\n-                                                pass_name,\n+                                                opt.pass_name,\n                                                 if loc.is_empty() { \"[unknown]\" } else { &*loc },\n                                                 opt.message));\n             }"}, {"sha": "d1eb261abd34500c08378589a75d42e78b2bbc97", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=908dba0c9477b7dd022a236cb1514ddfca9369f2", "patch": "@@ -530,9 +530,11 @@ LLVMRustPrintPasses() {\n     struct MyListener : PassRegistrationListener {\n         void passEnumerate(const PassInfo *info) {\n #if LLVM_VERSION_GE(4, 0)\n-            if (!info->getPassArgument().empty()) {\n-                printf(\"%15s - %s\\n\", info->getPassArgument().data(),\n-                       info->getPassName().data());\n+            StringRef PassArg = info->getPassArgument();\n+            StringRef PassName = info->getPassName();\n+            if (!PassArg.empty()) {\n+                printf(\"%15.*s - %.*s\\n\", PassArg.size(), PassArg.data(),\n+                       PassName.size(), PassName.data());\n             }\n #else\n             if (info->getPassArgument() && *info->getPassArgument()) {"}, {"sha": "818737dfe7c1b208dba125553f93046a9e01ae34", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/908dba0c9477b7dd022a236cb1514ddfca9369f2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=908dba0c9477b7dd022a236cb1514ddfca9369f2", "patch": "@@ -872,7 +872,7 @@ LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef str) {\n extern \"C\" void\n LLVMRustUnpackOptimizationDiagnostic(\n     LLVMDiagnosticInfoRef di,\n-    const char **pass_name_out,\n+    RustStringRef pass_name_out,\n     LLVMValueRef *function_out,\n     LLVMDebugLocRef *debugloc_out,\n     RustStringRef message_out)\n@@ -881,15 +881,12 @@ LLVMRustUnpackOptimizationDiagnostic(\n     llvm::DiagnosticInfoOptimizationBase *opt\n         = static_cast<llvm::DiagnosticInfoOptimizationBase*>(unwrap(di));\n \n-#if LLVM_VERSION_GE(4, 0)\n-    *pass_name_out = opt->getPassName().data();\n-#else\n-    *pass_name_out = opt->getPassName();\n-#endif\n+    raw_rust_string_ostream pass_name_os(pass_name_out);\n+    pass_name_os << opt->getPassName();\n     *function_out = wrap(&opt->getFunction());\n     *debugloc_out = wrap(&opt->getDebugLoc());\n-    raw_rust_string_ostream os(message_out);\n-    os << opt->getMsg();\n+    raw_rust_string_ostream message_os(message_out);\n+    message_os << opt->getMsg();\n }\n \n extern \"C\" void"}]}