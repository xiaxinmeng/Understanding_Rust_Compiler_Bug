{"sha": "d5f0bf922c96054d628bd4bca986726643c799b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjBiZjkyMmM5NjA1NGQ2MjhiZDRiY2E5ODY3MjY2NDNjNzk5YjU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-25T00:13:36Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-25T01:20:16Z"}, "message": "Add a section on syntax extensions to the Rust reference docs.", "tree": {"sha": "4e608977ef1e8efdb91476b59a2f402d4f6de6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e608977ef1e8efdb91476b59a2f402d4f6de6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f0bf922c96054d628bd4bca986726643c799b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f0bf922c96054d628bd4bca986726643c799b5", "html_url": "https://github.com/rust-lang/rust/commit/d5f0bf922c96054d628bd4bca986726643c799b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f0bf922c96054d628bd4bca986726643c799b5/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90812c143dbc5aff21f1cee88e60d86419cc39ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/90812c143dbc5aff21f1cee88e60d86419cc39ac", "html_url": "https://github.com/rust-lang/rust/commit/90812c143dbc5aff21f1cee88e60d86419cc39ac"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "7c5b1957f825c35a30dc2e6647a99f7493b9f96e", "filename": "doc/rust.md", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d5f0bf922c96054d628bd4bca986726643c799b5/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d5f0bf922c96054d628bd4bca986726643c799b5/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=d5f0bf922c96054d628bd4bca986726643c799b5", "patch": "@@ -350,7 +350,7 @@ error.\n Examples of integer literals of various forms:\n \n ~~~~\n-123; 0xff00;                       // type determined by program context; \n+123; 0xff00;                       // type determined by program context\n                                    // defaults to int in absence of type\n                                    // information\n \n@@ -455,6 +455,95 @@ let x = id::<int>(10);           // Type arguments used in a call expression\n # }\n ~~~~\n \n+# Syntax extensions\n+\n+A number of minor features of Rust are not central enough to have their own\n+syntax, and yet are not implementable as functions. Instead, they are given\n+names, and invoked through a consistent syntax: `name!(...)`. Examples\n+include:\n+\n+* `fmt!` : format data into a string\n+* `env!` : look up an environment variable's value at compile time\n+* `stringify!` : pretty-print the Rust expression given as an argument\n+* `proto!` : define a protocol for inter-task communication\n+* `include!` : include the Rust expression in the given file\n+* `include_str!` : include the contents of the given file as a string\n+* `include_bin!` : include the contents of the given file as a binary blob\n+\n+All of the above extensions, with the exception of `proto!`, are expressions\n+with values. `proto!` is an item, defining a new name.\n+\n+## Macros\n+\n+User-defined syntax extensions are called \"macros\", and they can be defined\n+with the `macro_rules!` syntax extension.\n+\n+~~~~ {.ebnf .gram}\n+expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')'\n+macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';'\n+matcher : '(' matcher * ')' | '[' matcher * ']'\n+        | '{' matcher * '}' | '$' ident ':' ident\n+        | '$' '(' matcher * ')' sep_token? [ '*' | '+' ]\n+        | non_special_token\n+transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n+            | '{' transcriber * '}' | '$' ident\n+            | '$' '(' transcriber * ')' sep_token? [ '*' | '+' ]\n+            | non_special_token\n+\n+~~~~\n+(A `sep_token` is any token other than `*` and `+`. A `non_special_token` is\n+any token other than a delimiter or `$`.)\n+\n+Macro invocations are looked up by name, and each macro rule is tried in turn;\n+the first successful match is transcribed. The matching and transcribing\n+processes are close cousins, and will be described together:\n+\n+### Macro By Example\n+\n+Everything that does not begin with a `$` is matched and transcirbed\n+literally, including delimiters. For parsing reasons, they must be matched,\n+but they are otherwise not special.\n+\n+In the matcher, `$` _name_ `:` _designator_ matches the nonterminal in the\n+Rust syntax named by _designator_. Valid designators are `item`, `block`,\n+`stmt`, `pat`, `expr`, `ty`, `ident`, `path`, `tt`, `matchers`. The last two\n+are the right-hand side and the left-hand side respectively of the `=>` in\n+macro rules. In the transcriber, the designator is already known, and so only\n+the name of a matched nonterminal comes after the dollar sign.\n+\n+In bothe the matcher and transcriber, the Kleene star-like operator,\n+consisting of `$` and parens, optionally followed by a separator token,\n+followed by `*` or `+`, indicates repetition. (`*` means zero or more\n+repetitions, `+` means at least one repetition. The parens are not matched or\n+transcribed). On the matcher side, a name is bound to _all_ of the names it\n+matches, in a structure that mimics the structure of the repetition\n+encountered on a successful match. The job of the transcriber is to sort that\n+structure out.\n+\n+The rules for transcription of these repetitions are called \"Macro By Example\". Essentially, one \"layer\" of repetition is discharged at a time, and all of\n+them must be discharged by the time a name is transcribed. Therefore,\n+`( $( $i:ident ),* ) => ( $i )` is an invalid macro, but\n+`( $( $i:ident ),* ) => ( $( $i:ident ),*  )` is acceptable (if trivial).\n+\n+When Macro By Example encounters a repetition, it examines all of the `$`\n+_name_ s that occur in its body. At the \"current layer\", they all must repeat\n+the same number of times, so\n+` ( $( $i:ident ),* ; $( $j:ident ),* ) => ( $( ($i,$j) ),* )` is valid if\n+given the argument `(a,b,c ; d,e,f)`, but not `(a,b,c ; d,e)`. The repetition\n+walks through the choices at that layer in lockstep, so the former input\n+transcribes to `( (a,d), (b,e), (c,f) )`.\n+\n+Nested repetitions are allowed.\n+\n+## Syntax extensions useful for the macro author\n+\n+* `log_syntax!` : print out the arguments at compile time\n+* `trace_macros!` : supply `true` or `false` to enable or disable printing\n+of the macro expansion process.\n+* `ident_to_str!` : turns the identifier argument into a string literal\n+* `concat_idents!` : creates a new identifier by concatenating its arguments\n+\n+\n \n # Crates and source files\n "}]}