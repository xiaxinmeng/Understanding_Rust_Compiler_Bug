{"sha": "4ad4363870246040a69c18dad217b235113ecd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDQzNjM4NzAyNDYwNDBhNjljMThkYWQyMTdiMjM1MTEzZWNkMWM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-10T10:11:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-14T09:55:42Z"}, "message": "Better explanation of AutoDerefRef", "tree": {"sha": "964256a2f10af3cfadc1b1f6742a75fd96f1a202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/964256a2f10af3cfadc1b1f6742a75fd96f1a202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad4363870246040a69c18dad217b235113ecd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad4363870246040a69c18dad217b235113ecd1c", "html_url": "https://github.com/rust-lang/rust/commit/4ad4363870246040a69c18dad217b235113ecd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad4363870246040a69c18dad217b235113ecd1c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c2e768d6ba55bdfb8292320ebac00e69ca2e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c2e768d6ba55bdfb8292320ebac00e69ca2e42", "html_url": "https://github.com/rust-lang/rust/commit/73c2e768d6ba55bdfb8292320ebac00e69ca2e42"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "c0b4800bb05521c25bd2486f22f8c1845fdb35ca", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ad4363870246040a69c18dad217b235113ecd1c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad4363870246040a69c18dad217b235113ecd1c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4ad4363870246040a69c18dad217b235113ecd1c", "patch": "@@ -849,7 +849,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         self.walk_autoderefs(expr, adj.autoderefs);\n \n         // Weird hacky special case: AutoUnsizeUniq, which converts\n-        // from a Box<T> to a Box<Trait> etc, always comes in a stylized\n+        // from a ~T to a ~Trait etc, always comes in a stylized\n         // fashion. In particular, we want to consume the ~ pointer\n         // being dereferenced, not the dereferenced content (as the\n         // content is, at least for upcasts, unsized).\n@@ -865,7 +865,6 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             }\n         }\n \n-        //let autoref = adj.autoref.as_ref();\n         let cmt_derefd = return_if_err!(\n             self.mc.cat_expr_autoderefd(expr, adj.autoderefs));\n         self.walk_autoref(expr, cmt_derefd, adj.autoref);"}, {"sha": "ce543845717ca47743818b176a071db44f4f0aa7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4ad4363870246040a69c18dad217b235113ecd1c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad4363870246040a69c18dad217b235113ecd1c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4ad4363870246040a69c18dad217b235113ecd1c", "patch": "@@ -288,13 +288,44 @@ pub enum AutoAdjustment<'tcx> {\n     AdjustDerefRef(AutoDerefRef<'tcx>),\n }\n \n+/// Represents coercing a pointer to a different kind of pointer - where 'kind'\n+/// here means either or both of raw vs borrowed vs unique and fat vs thin.\n+/// The simplest cases are where the pointer is not adjusted fat vs thin. Here\n+/// the pointer will be dereferenced N times (where a dereference can happen to\n+/// to raw or borrowed pointers or any smart pointer which implements Deref,\n+/// including Box<_>). The number of dereferences is given by `autoderefs`.\n+/// It can then be auto-referenced zero or one times, indicated by `autoref`, to\n+/// either a raw or borrowed pointer. In these cases unsize is None.\n+///\n+/// A DST coercon involves unsizing the underlying data. We start with a thin\n+/// pointer, deref a number of times, unsize the underlying data, then autoref.\n+/// The 'unsize' phase may change a fixed length array to a dynamically sized one,\n+/// a concrete object to a trait object, or statically sized struct to a dyncamically\n+/// sized one.\n+/// E.g., &[i32; 4] -> &[i32] is represented by:\n+/// AutoDerefRef {\n+///     autoderefs: 1,          // &[i32; 4] -> [i32; 4]\n+///     unsize: Some([i32]),    // [i32; 4] -> [i32]\n+///     autoref: Some(AutoPtr), // [i32] -> &[i32]\n+/// }\n+/// Note that for a struct, the 'deep' unsizing of the struct is not recorded.\n+/// E.g., `struct Foo<T> { x: T }` we can coerce &Foo<[i32; 4]> to &Foo<[i32]>\n+/// The autoderef and -ref are the same as in the above example, but the type\n+/// stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n+/// the underlying conversions from `[i32; 4]` to `[i32]`.\n+///\n+/// Box pointers are treated somewhat differently, the last deref is not counted,\n+/// nor is the 'ref' to a `Box<_>`. Imagine them more like structs.\n+/// E.g., Box<[i32; 4]> -> Box<[i32]> is represented by:\n+/// AutoDerefRef {\n+///     autoderefs: 0,\n+///     unsize: Some(Box<[i32]>),\n+///     autoref: None,\n+/// }\n #[derive(Copy, Clone, Debug)]\n pub struct AutoDerefRef<'tcx> {\n     // FIXME with more powerful date structures we could have a better design\n-    // here. Some constraints:\n-    //  unsize => autoref\n-    //  unsize => autodefs == 0\n-\n+    // here.\n \n     /// Apply a number of dereferences, producing an lvalue.\n     pub autoderefs: usize,"}]}