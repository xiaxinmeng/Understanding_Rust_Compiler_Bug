{"sha": "b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjM2ODY1MTU0MTBjMDEzZjZjZDEyY2U0ZmM1MjM2ZTNkZWUzZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-27T19:38:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-27T19:38:12Z"}, "message": "auto merge of #6703 : sanxiyn/rust/allocation-lint, r=sanxiyn\n\nFix #6145. In particular, handle operator overloading.", "tree": {"sha": "d8c26fa0f1db08519245c29c5c8d9775fa00cf73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c26fa0f1db08519245c29c5c8d9775fa00cf73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "html_url": "https://github.com/rust-lang/rust/commit/b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98cc9995fb5c87230f57eeffb8061df25d85190", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98cc9995fb5c87230f57eeffb8061df25d85190", "html_url": "https://github.com/rust-lang/rust/commit/d98cc9995fb5c87230f57eeffb8061df25d85190"}, {"sha": "8f80323f09ef150efc5cf729100f99981afc96e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f80323f09ef150efc5cf729100f99981afc96e1", "html_url": "https://github.com/rust-lang/rust/commit/8f80323f09ef150efc5cf729100f99981afc96e1"}], "stats": {"total": 357, "additions": 168, "deletions": 189}, "files": [{"sha": "8aac20d7a6356d5faac762f41f089db067f9da8b", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -462,7 +462,7 @@ pub impl Bitv {\n      */\n      fn to_str(&self) -> ~str {\n        let mut rs = ~\"\";\n-       for self.each() |i| { if i { rs += ~\"1\"; } else { rs += ~\"0\"; } };\n+       for self.each() |i| { if i { rs += \"1\"; } else { rs += \"0\"; } };\n        rs\n      }\n "}, {"sha": "3c223fe05d410560fffd6ac68885f34fcff4120e", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -193,19 +193,19 @@ pub enum Fail_ {\n pub fn fail_str(f: Fail_) -> ~str {\n     return match f {\n         ArgumentMissing(ref nm) => {\n-            ~\"Argument to option '\" + *nm + ~\"' missing.\"\n+            ~\"Argument to option '\" + *nm + \"' missing.\"\n         }\n         UnrecognizedOption(ref nm) => {\n-            ~\"Unrecognized option: '\" + *nm + ~\"'.\"\n+            ~\"Unrecognized option: '\" + *nm + \"'.\"\n         }\n         OptionMissing(ref nm) => {\n-            ~\"Required option '\" + *nm + ~\"' missing.\"\n+            ~\"Required option '\" + *nm + \"' missing.\"\n         }\n         OptionDuplicated(ref nm) => {\n-            ~\"Option '\" + *nm + ~\"' given more than once.\"\n+            ~\"Option '\" + *nm + \"' given more than once.\"\n         }\n         UnexpectedArgument(ref nm) => {\n-            ~\"Option \" + *nm + ~\" does not take an argument.\"\n+            ~\"Option \" + *nm + \" does not take an argument.\"\n         }\n     };\n }\n@@ -618,7 +618,7 @@ pub mod groups {\n             row += match hasarg {\n                 No    => ~\"\",\n                 Yes   => hint,\n-                Maybe => ~\"[\" + hint + ~\"]\",\n+                Maybe => ~\"[\" + hint + \"]\",\n             };\n \n             // FIXME: #5516\n@@ -650,10 +650,10 @@ pub mod groups {\n             row\n         });\n \n-        return str::to_owned(brief)    +\n-               ~\"\\n\\nOptions:\\n\"         +\n+        return str::to_owned(brief) +\n+               \"\\n\\nOptions:\\n\" +\n                str::connect(rows, \"\\n\") +\n-               ~\"\\n\\n\";\n+               \"\\n\\n\";\n     }\n } // end groups module\n "}, {"sha": "adf2c4f35b51e972aecf6a3b1c1e6f082df3623c", "filename": "src/libextra/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -47,18 +47,18 @@ fn escape_str(s: &str) -> ~str {\n     let mut escaped = ~\"\\\"\";\n     for str::each_char(s) |c| {\n         match c {\n-          '\"' => escaped += ~\"\\\\\\\"\",\n-          '\\\\' => escaped += ~\"\\\\\\\\\",\n-          '\\x08' => escaped += ~\"\\\\b\",\n-          '\\x0c' => escaped += ~\"\\\\f\",\n-          '\\n' => escaped += ~\"\\\\n\",\n-          '\\r' => escaped += ~\"\\\\r\",\n-          '\\t' => escaped += ~\"\\\\t\",\n+          '\"' => escaped += \"\\\\\\\"\",\n+          '\\\\' => escaped += \"\\\\\\\\\",\n+          '\\x08' => escaped += \"\\\\b\",\n+          '\\x0c' => escaped += \"\\\\f\",\n+          '\\n' => escaped += \"\\\\n\",\n+          '\\r' => escaped += \"\\\\r\",\n+          '\\t' => escaped += \"\\\\t\",\n           _ => escaped += str::from_char(c)\n         }\n     };\n \n-    escaped += ~\"\\\"\";\n+    escaped += \"\\\"\";\n \n     escaped\n }"}, {"sha": "9873d7fcd8e3516c6e150f3448364dcd6d938a35", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -115,7 +115,7 @@ pub fn md4_str(msg: &[u8]) -> ~str {\n         let mut i = 0u32;\n         while i < 4u32 {\n             let byte = (u >> (i * 8u32)) as u8;\n-            if byte <= 16u8 { result += ~\"0\"; }\n+            if byte <= 16u8 { result += \"0\"; }\n             result += uint::to_str_radix(byte as uint, 16u);\n             i += 1u32;\n         }"}, {"sha": "fc59df8d2489497b00b3000569bd6b5b69870c9e", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -22,42 +22,42 @@ pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n         data_layout: match target_os {\n           session::os_macos => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_win32 => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_linux => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_android => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_freebsd => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n         },\n "}, {"sha": "b7e33d7c68dccb85f1fb07b83a54fc1e69f51074", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -54,7 +54,7 @@ pub fn llvm_err(sess: Session, msg: ~str) -> ! {\n         if cstr == ptr::null() {\n             sess.fatal(msg);\n         } else {\n-            sess.fatal(msg + ~\": \" + str::raw::from_c_str(cstr));\n+            sess.fatal(msg + \": \" + str::raw::from_c_str(cstr));\n         }\n     }\n }\n@@ -653,13 +653,13 @@ pub fn sanitize(s: &str) -> ~str {\n     let mut result = ~\"\";\n     for str::each_char(s) |c| {\n         match c {\n-          '@' => result += ~\"_sbox_\",\n-          '~' => result += ~\"_ubox_\",\n-          '*' => result += ~\"_ptr_\",\n-          '&' => result += ~\"_ref_\",\n-          ',' => result += ~\"_\",\n+          '@' => result += \"_sbox_\",\n+          '~' => result += \"_ubox_\",\n+          '*' => result += \"_ptr_\",\n+          '&' => result += \"_ref_\",\n+          ',' => result += \"_\",\n \n-          '{' | '(' => result += ~\"_of_\",\n+          '{' | '(' => result += \"_of_\",\n           'a' .. 'z'\n           | 'A' .. 'Z'\n           | '0' .. '9'\n@@ -693,7 +693,7 @@ pub fn mangle(sess: Session, ss: path) -> ~str {\n           n += fmt!(\"%u%s\", str::len(sani), sani);\n         } }\n     }\n-    n += ~\"E\"; // End name-sequence.\n+    n += \"E\"; // End name-sequence.\n     n\n }\n "}, {"sha": "3409db5aabe3f9cb2cfb90dcb07dbfc6689f9859", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -22,42 +22,42 @@ pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n         data_layout: match target_os {\n           session::os_macos => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_win32 => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_linux => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_android => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n \n           session::os_freebsd => {\n             ~\"e-p:32:32:32\" +\n-                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n-                ~\"-f32:32:32-f64:64:64\" +\n-                ~\"-v64:64:64-v128:64:128\" +\n-                ~\"-a0:0:64-n32\"\n+                \"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                \"-f32:32:32-f64:64:64\" +\n+                \"-v64:64:64-v128:64:128\" +\n+                \"-a0:0:64-n32\"\n           }\n         },\n "}, {"sha": "c5dbbf8f028dba1b9ffd5703ca44f3b7437546d4", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -23,9 +23,9 @@ pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n         data_layout: match target_os {\n           session::os_macos => {\n             ~\"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" +\n-                ~\"-i32:32:32-i64:32:64\" +\n-                ~\"-f32:32:32-f64:32:64-v64:64:64\" +\n-                ~\"-v128:128:128-a0:0:64-f80:128:128\" + ~\"-n8:16:32\"\n+                \"-i32:32:32-i64:32:64\" +\n+                \"-f32:32:32-f64:32:64-v64:64:64\" +\n+                \"-v128:128:128-a0:0:64-f80:128:128\" + \"-n8:16:32\"\n           }\n \n           session::os_win32 => {"}, {"sha": "42420094e1767926a4a2988e351a1c9d701891fc", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -23,32 +23,32 @@ pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n         data_layout: match target_os {\n           session::os_macos => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n-                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n-                ~\"s0:64:64-f80:128:128-n8:16:32:64\"\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64\"\n           }\n \n           session::os_win32 => {\n             // FIXME: Test this. Copied from linux (#2398)\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n-                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n-                ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n \n           session::os_linux => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n-                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n-                ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n           session::os_android => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n-                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n-                ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n \n           session::os_freebsd => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n-                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n-                ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n         },\n "}, {"sha": "d189ddf9533f6cbd91dc1d944bdcb104484d380d", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -170,8 +170,8 @@ fn visit_item(e: @mut Env, i: @ast::item) {\n                             if *nn == ~\"\" {\n                                 e.diag.span_fatal(\n                                     i.span,\n-                                    ~\"empty #[link_name] not allowed; use \" +\n-                                    ~\"#[nolink].\");\n+                                    \"empty #[link_name] not allowed; use \\\n+                                     #[nolink].\");\n                             }\n                             nn\n                         }\n@@ -183,7 +183,7 @@ fn visit_item(e: @mut Env, i: @ast::item) {\n                 }\n                 if !link_args.is_empty() && already_added {\n                     e.diag.span_fatal(i.span, ~\"library '\" + *foreign_name +\n-                               ~\"' already added: can't specify link_args.\");\n+                               \"' already added: can't specify link_args.\");\n                 }\n             }\n             ast::anonymous => { /* do nothing */ }"}, {"sha": "bb35af198079de7bccaf08581ee9a6b6ab8956f4", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -528,7 +528,7 @@ pub fn _each_path(intr: @ident_interner,\n                     if path_is_empty {\n                         reexport_path = reexport_name;\n                     } else {\n-                        reexport_path = path + ~\"::\" + reexport_name;\n+                        reexport_path = path + \"::\" + reexport_name;\n                     }\n \n                     // This reexport may be in yet another crate"}, {"sha": "5467c50c7b8358d6daad9ef43ee3818ead9e896b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -922,7 +922,7 @@ fn encode_info_for_item(ecx: @EncodeContext,\n \n         // >:-<\n         let mut impl_path = vec::append(~[], path);\n-        impl_path += ~[ast_map::path_name(item.ident)];\n+        impl_path += [ast_map::path_name(item.ident)];\n \n         for methods.each |m| {\n             index.push(entry {val: m.id, pos: ebml_w.writer.tell()});"}, {"sha": "94060ab327181bd2eba77b7076e9e6ba9db33e02", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -81,7 +81,7 @@ fn find_library_crate_aux(\n     filesearch: @filesearch::FileSearch\n ) -> Option<(~str, @~[u8])> {\n     let crate_name = crate_name_from_metas(cx.metas);\n-    let prefix: ~str = prefix + *crate_name + ~\"-\";\n+    let prefix: ~str = prefix + *crate_name + \"-\";\n     let suffix: ~str = /*bad*/copy suffix;\n \n     let mut matches = ~[];\n@@ -262,7 +262,7 @@ pub fn list_file_metadata(intr: @ident_interner,\n       option::Some(bytes) => decoder::list_crate_metadata(intr, bytes, out),\n       option::None => {\n         out.write_str(~\"could not find metadata in \"\n-                      + path.to_str() + ~\".\\n\");\n+                      + path.to_str() + \".\\n\");\n       }\n     }\n }"}, {"sha": "42423b4df29f31e73d42a4a40e6b40993ec3ab23", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -89,8 +89,8 @@ pub fn enc_ty(w: @io::Writer, cx: @ctxt, t: ty::t) {\n           let abbrev_len = 3u + estimate_sz(pos) + estimate_sz(len);\n           if abbrev_len < len {\n               // I.e. it's actually an abbreviation.\n-              let s = ~\"#\" + uint::to_str_radix(pos, 16u) + ~\":\" +\n-                  uint::to_str_radix(len, 16u) + ~\"#\";\n+              let s = ~\"#\" + uint::to_str_radix(pos, 16u) + \":\" +\n+                  uint::to_str_radix(len, 16u) + \"#\";\n               let a = ty_abbrev { pos: pos, len: len, s: @s };\n               abbrevs.insert(t, a);\n           }"}, {"sha": "01398db432416ca78d019a2b8cf6931022f83044", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -110,7 +110,7 @@ pub fn check_expr(sess: Session,\n             if !ty::type_is_numeric(ety) && !ty::type_is_unsafe_ptr(ety) {\n                 sess.span_err(e.span, ~\"can not cast to `\" +\n                               ppaux::ty_to_str(tcx, ety) +\n-                              ~\"` in a constant expression\");\n+                              \"` in a constant expression\");\n             }\n           }\n           expr_path(pth) => {"}, {"sha": "803fdc4ed5d70e47620bdcfcd19c54dae8cb1ab4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -171,7 +171,7 @@ pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n         }\n     };\n     let msg = ~\"non-exhaustive patterns\" + match ext {\n-        Some(ref s) => ~\": \" + **s + ~\" not covered\",\n+        Some(ref s) => ~\": \" + **s + \" not covered\",\n         None => ~\"\"\n     };\n     cx.tcx.sess.span_err(sp, msg);"}, {"sha": "ae60a90c7acd85a7423026da5d71a0ecc0f155a1", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -892,14 +892,9 @@ fn lint_session(cx: @mut Context) -> visit::vt<()> {\n }\n \n fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n-    // If the expression `e` has an allocated type, but `t` dictates that it's\n-    // something like a slice (doesn't need allocation), emit a warning with the\n-    // specified span.\n-    //\n-    // Currently, this only applies to string and vector literals with sigils in\n-    // front. Those can have the sigil removed to get a borrowed pointer\n-    // automatically.\n-    fn check(cx: @mut Context, e: @ast::expr, t: ty::t) {\n+    // Warn if string and vector literals with sigils are immediately borrowed.\n+    // Those can have the sigil removed.\n+    fn check(cx: @mut Context, e: @ast::expr) {\n         match e.node {\n             ast::expr_vstore(e2, ast::expr_vstore_uniq) |\n             ast::expr_vstore(e2, ast::expr_vstore_box) => {\n@@ -914,9 +909,9 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n             _ => return\n         }\n \n-        match ty::get(t).sty {\n-            ty::ty_estr(ty::vstore_slice(*)) |\n-            ty::ty_evec(_, ty::vstore_slice(*)) => {\n+        match cx.tcx.adjustments.find_copy(&e.id) {\n+            Some(@ty::AutoDerefRef(ty::AutoDerefRef {\n+                autoref: Some(ty::AutoBorrowVec(*)), _ })) => {\n                 cx.span_lint(unnecessary_allocation,\n                              e.span, \"unnecessary allocation, the sigil can be \\\n                                       removed\");\n@@ -927,23 +922,7 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n     }\n \n     let visit_expr: @fn(@ast::expr) = |e| {\n-        match e.node {\n-            ast::expr_call(c, ref args, _) => {\n-                let t = ty::node_id_to_type(cx.tcx, c.id);\n-                let s = ty::ty_fn_sig(t);\n-                for vec::each2(*args, s.inputs) |e, t| {\n-                    check(cx, *e, *t);\n-                }\n-            }\n-            ast::expr_method_call(_, _, _, ref args, _) => {\n-                let t = ty::node_id_to_type(cx.tcx, e.callee_id);\n-                let s = ty::ty_fn_sig(t);\n-                for vec::each2(*args, s.inputs) |e, t| {\n-                    check(cx, *e, *t);\n-                }\n-            }\n-            _ => {}\n-        }\n+        check(cx, e);\n     };\n \n     visit::mk_simple_visitor(@visit::SimpleVisitor {"}, {"sha": "fad5dc73c1a120ba838dc1b0e81787eb24995f52", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -90,7 +90,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n \n     let mut clobbers = getClobbers();\n     if *ia.clobbers != ~\"\" && clobbers != ~\"\" {\n-        clobbers = *ia.clobbers + ~\",\" + clobbers;\n+        clobbers = *ia.clobbers + \",\" + clobbers;\n     } else {\n         clobbers += *ia.clobbers;\n     };"}, {"sha": "7826781aa6b96324e3d2e0f0225a3dbbb018e0c1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -1984,7 +1984,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n \n     debug!(\"trans_enum_variant: name=%s tps=%s repr=%? enum_ty=%s\",\n            unsafe { str::raw::from_c_str(llvm::LLVMGetValueName(llfndecl)) },\n-           ~\"[\" + str::connect(ty_param_substs.map(|&t| ty_to_str(ccx.tcx, t)), \", \") + ~\"]\",\n+           ~\"[\" + str::connect(ty_param_substs.map(|&t| ty_to_str(ccx.tcx, t)), \", \") + \"]\",\n            repr, ty_to_str(ccx.tcx, enum_ty));\n \n     adt::trans_start_init(bcx, repr, fcx.llretptr.get(), disr);\n@@ -2901,7 +2901,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n     let mapname = if *sess.building_library {\n-        mapmeta.name.to_owned() + ~\"_\" + mapmeta.vers.to_owned() + ~\"_\"\n+        mapmeta.name.to_owned() + \"_\" + mapmeta.vers.to_owned() + \"_\"\n             + mapmeta.extras_hash.to_owned()\n     } else {\n         ~\"toplevel\"\n@@ -2925,8 +2925,8 @@ pub fn fill_crate_map(ccx: @CrateContext, map: ValueRef) {\n     while cstore::have_crate_data(cstore, i) {\n         let cdata = cstore::get_crate_data(cstore, i);\n         let nm = ~\"_rust_crate_map_\" + *cdata.name +\n-            ~\"_\" + *cstore::get_crate_vers(cstore, i) +\n-            ~\"_\" + *cstore::get_crate_hash(cstore, i);\n+            \"_\" + *cstore::get_crate_vers(cstore, i) +\n+            \"_\" + *cstore::get_crate_hash(cstore, i);\n         let cr = str::as_c_str(nm, |buf| {\n             unsafe {\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n@@ -3035,7 +3035,7 @@ pub fn trans_crate(sess: session::Session,\n     // crashes if the module identifer is same as other symbols\n     // such as a function name in the module.\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-    let llmod_id = link_meta.name.to_owned() + ~\".rc\";\n+    let llmod_id = link_meta.name.to_owned() + \".rc\";\n \n     unsafe {\n         let llmod = str::as_c_str(llmod_id, |buf| {"}, {"sha": "7079c11e7d0d25c34b8ddc6eb7f3774f4fa91f06", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -65,12 +65,12 @@ pub fn count_insn(cx: block, category: &str) {\n         i = 0u;\n         while i < len {\n             i = *mm.get(&v[i]);\n-            s += ~\"/\";\n+            s += \"/\";\n             s += v[i];\n             i += 1u;\n         }\n \n-        s += ~\"/\";\n+        s += \"/\";\n         s += category;\n \n         let n = match h.find(&s) {"}, {"sha": "be074cfc57a30c8d1b090cb8bb3555c11be76b44", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -356,7 +356,7 @@ pub type fn_ctxt = @mut fn_ctxt_;\n pub fn warn_not_to_commit(ccx: @CrateContext, msg: &str) {\n     if !*ccx.do_not_commit_warning_issued {\n         *ccx.do_not_commit_warning_issued = true;\n-        ccx.sess.warn(msg.to_str() + ~\" -- do not commit like this!\");\n+        ccx.sess.warn(msg.to_str() + \" -- do not commit like this!\");\n     }\n }\n \n@@ -1420,7 +1420,7 @@ pub fn path_str(sess: session::Session, p: &[path_elt]) -> ~str {\n         match *e {\n             ast_map::path_name(s) | ast_map::path_mod(s) => {\n                 if first { first = false; }\n-                else { r += ~\"::\"; }\n+                else { r += \"::\"; }\n                 r += *sess.str_of(s);\n             }\n         }"}, {"sha": "79b88a9ba812d9daf1c3aa74d83c9d36e834bd2f", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -402,7 +402,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         let lname = link_name(ccx, foreign_item);\n         let llbasefn = base_fn(ccx, *lname, tys, cc);\n         // Name the shim function\n-        let shim_name = *lname + ~\"__c_stack_shim\";\n+        let shim_name = *lname + \"__c_stack_shim\";\n         build_shim_fn_(ccx,\n                        shim_name,\n                        llbasefn,"}, {"sha": "b8d38cf7701bcf4f8c3dec373676b6c17d4d770e", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -279,7 +279,7 @@ pub impl Reflector {\n             let opaqueptrty = ty::mk_ptr(ccx.tcx, ty::mt { ty: opaquety, mutbl: ast::m_imm });\n \n             let make_get_disr = || {\n-                let sub_path = bcx.fcx.path + ~[path_name(special_idents::anon)];\n+                let sub_path = bcx.fcx.path + [path_name(special_idents::anon)];\n                 let sym = mangle_internal_name_by_path_and_seq(ccx,\n                                                                sub_path,\n                                                                \"get_disr\");"}, {"sha": "6d1ae8ff0e6a8d893cae27b8c5cd8801974ed528", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -3354,8 +3354,8 @@ pub fn occurs_check(tcx: ctxt, sp: span, vid: TyVid, rt: t) {\n                 (sp, ~\"type inference failed because I \\\n                      could not find a type\\n that's both of the form \"\n                  + ::util::ppaux::ty_to_str(tcx, mk_var(tcx, vid)) +\n-                 ~\" and of the form \" + ::util::ppaux::ty_to_str(tcx, rt) +\n-                 ~\" - such a type would have to be infinitely large.\");\n+                 \" and of the form \" + ::util::ppaux::ty_to_str(tcx, rt) +\n+                 \" - such a type would have to be infinitely large.\");\n     }\n }\n "}, {"sha": "ec76e74ae8f6640ace3bc954b9ff32142831df23", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -1870,7 +1870,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                     let (_, seen) = *class_field_map.get(&name);\n                     if !seen {\n                         missing_fields.push(\n-                            ~\"`\" + *tcx.sess.str_of(name) + ~\"`\");\n+                            ~\"`\" + *tcx.sess.str_of(name) + \"`\");\n                     }\n                 }\n \n@@ -3669,7 +3669,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n         ref other => {\n             tcx.sess.span_err(it.span,\n                               ~\"unrecognized intrinsic function: `\" +\n-                              (*other) + ~\"`\");\n+                              (*other) + \"`\");\n             return;\n         }\n     };"}, {"sha": "b75654e7251b71fe8b7e8e4e6c840423ef65be2b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -256,7 +256,7 @@ pub fn require_same_types(\n     match infer::mk_eqty(l_infcx, t1_is_expected, span, t1, t2) {\n         result::Ok(()) => true,\n         result::Err(ref terr) => {\n-            l_tcx.sess.span_err(span, msg() + ~\": \" +\n+            l_tcx.sess.span_err(span, msg() + \": \" +\n                                 ty::type_err_to_str(l_tcx, terr));\n             ty::note_and_explain_type_err(l_tcx, terr);\n             false\n@@ -323,7 +323,7 @@ fn check_main_fn_ty(ccx: @mut CrateCtxt,\n         _ => {\n             tcx.sess.span_bug(main_span,\n                               ~\"main has a non-function type: found `\" +\n-                              ppaux::ty_to_str(tcx, main_t) + ~\"`\");\n+                              ppaux::ty_to_str(tcx, main_t) + \"`\");\n         }\n     }\n }\n@@ -372,7 +372,7 @@ fn check_start_fn_ty(ccx: @mut CrateCtxt,\n         _ => {\n             tcx.sess.span_bug(start_span,\n                               ~\"start has a non-function type: found `\" +\n-                              ppaux::ty_to_str(tcx, start_t) + ~\"`\");\n+                              ppaux::ty_to_str(tcx, start_t) + \"`\");\n         }\n     }\n }"}, {"sha": "9d74f6c7b0ed77b9ca36df3ea63b6650b928b534", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -382,10 +382,10 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n                        m.fty.purity,\n                        m.fty.abis,\n                        Some(m.ident),\n-                       &m.fty.sig) + ~\";\"\n+                       &m.fty.sig) + \";\"\n     }\n     fn field_to_str(cx: ctxt, f: field) -> ~str {\n-        return *cx.sess.str_of(f.ident) + ~\": \" + mt_to_str(cx, &f.mt);\n+        return *cx.sess.str_of(f.ident) + \": \" + mt_to_str(cx, &f.mt);\n     }\n \n     // if there is an id, print that instead of the structural type:\n@@ -413,11 +413,11 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_rptr(r, ref tm) => {\n         region_to_str_space(cx, \"&\", r) + mt_to_str(cx, tm)\n       }\n-      ty_unboxed_vec(ref tm) => { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + ~\">\" }\n+      ty_unboxed_vec(ref tm) => { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + \">\" }\n       ty_type => ~\"type\",\n       ty_tup(ref elems) => {\n         let strs = elems.map(|elem| ty_to_str(cx, *elem));\n-        ~\"(\" + str::connect(strs, \",\") + ~\")\"\n+        ~\"(\" + str::connect(strs, \",\") + \")\"\n       }\n       ty_closure(ref f) => {\n           closure_to_str(cx, f)"}, {"sha": "5cbadaf2df683295db5233418512be3dc5087692", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -1711,9 +1711,9 @@ pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n     result::chain(read_whole_file(file), |bytes| {\n         if str::is_utf8(bytes) {\n             result::Ok(str::from_bytes(bytes))\n-       } else {\n-           result::Err(file.to_str() + ~\" is not UTF-8\")\n-       }\n+        } else {\n+            result::Err(file.to_str() + \" is not UTF-8\")\n+        }\n     })\n }\n "}, {"sha": "9ca54066289a3352b874a86e8c021c4d00c6a0d9", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -46,7 +46,7 @@ impl<A:ToStr> ToStr for (A,) {\n     fn to_str(&self) -> ~str {\n         match *self {\n             (ref a,) => {\n-                ~\"(\" + a.to_str() + ~\", \" + ~\")\"\n+                ~\"(\" + a.to_str() + \",)\"\n             }\n         }\n     }\n@@ -97,7 +97,7 @@ impl<A:ToStr,B:ToStr> ToStr for (A, B) {\n         //let &(ref a, ref b) = self;\n         match *self {\n             (ref a, ref b) => {\n-                ~\"(\" + a.to_str() + ~\", \" + b.to_str() + ~\")\"\n+                ~\"(\" + a.to_str() + \", \" + b.to_str() + \")\"\n             }\n         }\n     }"}, {"sha": "0057579c9b7ee5a0ad6e44acde6f753000f84412", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -241,16 +241,16 @@ fn highlight_lines(cm: @codemap::CodeMap,\n     // Print the offending lines\n     for display_lines.each |line| {\n         io::stderr().write_str(fmt!(\"%s:%u \", fm.name, *line + 1u));\n-        let s = fm.get_line(*line as int) + ~\"\\n\";\n+        let s = fm.get_line(*line as int) + \"\\n\";\n         io::stderr().write_str(s);\n     }\n     if elided {\n         let last_line = display_lines[display_lines.len() - 1u];\n         let s = fmt!(\"%s:%u \", fm.name, last_line + 1u);\n         let mut indent = str::len(s);\n         let mut out = ~\"\";\n-        while indent > 0u { out += ~\" \"; indent -= 1u; }\n-        out += ~\"...\\n\";\n+        while indent > 0u { out += \" \"; indent -= 1u; }\n+        out += \"...\\n\";\n         io::stderr().write_str(out);\n     }\n \n@@ -271,7 +271,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n         // part of the 'filename:line ' part of the previous line.\n         let skip = str::len(fm.name) + digits + 3u;\n         for skip.times() {\n-            s += ~\" \";\n+            s += \" \";\n         }\n         let orig = fm.get_line(lines.lines[0] as int);\n         for uint::range(0u,left-skip) |pos| {\n@@ -281,14 +281,14 @@ fn highlight_lines(cm: @codemap::CodeMap,\n                 _ => \" \"         // -squigly-line as well (instead of a\n             };                   // space). This way the squigly-line will\n         }                        // usually appear in the correct position.\n-        s += ~\"^\";\n+        s += \"^\";\n         let hi = cm.lookup_char_pos(sp.hi);\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squiglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n-            for num_squiglies.times() { s += ~\"~\"; }\n+            for num_squiglies.times() { s += \"~\"; }\n         }\n-        io::stderr().write_str(s + ~\"\\n\");\n+        io::stderr().write_str(s + \"\\n\");\n     }\n }\n "}, {"sha": "05ac87adcc53b9bfc696e1ca8f315a7a969cb838", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -114,7 +114,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n                         p.eat(&token::COMMA);\n                     }\n \n-                    let clob = ~\"~{\" + *p.parse_str() + ~\"}\";\n+                    let clob = ~\"~{\" + *p.parse_str() + \"}\";\n                     clobs.push(clob);\n                 }\n "}, {"sha": "2efed5780b47cc3ad14bfc36c75ec22d782bec2b", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -158,15 +158,15 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n               FlagSignAlways => {\n                 if !is_signed_type(cnv) {\n                     cx.span_fatal(sp,\n-                                  ~\"+ flag only valid in \" +\n-                                      ~\"signed fmt! conversion\");\n+                                  \"+ flag only valid in \\\n+                                   signed fmt! conversion\");\n                 }\n               }\n               FlagSpaceForSign => {\n                 if !is_signed_type(cnv) {\n                     cx.span_fatal(sp,\n-                                  ~\"space flag only valid in \" +\n-                                      ~\"signed fmt! conversions\");\n+                                  \"space flag only valid in \\\n+                                   signed fmt! conversions\");\n                 }\n               }\n               FlagLeftZeroPad => (),\n@@ -284,8 +284,8 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n                 n += 1u;\n                 if n >= nargs {\n                     cx.span_fatal(sp,\n-                                  ~\"not enough arguments to fmt! \" +\n-                                  ~\"for the given format string\");\n+                                  \"not enough arguments to fmt! \\\n+                                   for the given format string\");\n                 }\n \n                 log_conv(conv);"}, {"sha": "e55ecbc29bca2e020d4f79d29714e61f25476cd1", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -66,7 +66,7 @@ impl gen_send for message {\n \n             let mut body = ~\"{\\n\";\n             body += fmt!(\"use super::%s;\\n\", name);\n-            body += ~\"let mut pipe = pipe;\\n\";\n+            body += \"let mut pipe = pipe;\\n\";\n \n             if this.proto.is_bounded() {\n                 let (sp, rp) = match (this.dir, next.dir) {\n@@ -76,7 +76,7 @@ impl gen_send for message {\n                   (recv, recv) => (~\"c\", ~\"s\")\n                 };\n \n-                body += ~\"let mut b = pipe.reuse_buffer();\\n\";\n+                body += \"let mut b = pipe.reuse_buffer();\\n\";\n                 body += fmt!(\"let %s = ::std::pipes::SendPacketBuffered(\\\n                               &mut (b.buffer.data.%s));\\n\",\n                              sp, next.name);\n@@ -103,7 +103,7 @@ impl gen_send for message {\n             if !try {\n                 body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n                 // return the new channel\n-                body += ~\"c }\";\n+                body += \"c }\";\n             }\n             else {\n                 body += fmt!(\"if ::std::pipes::send(pipe, message) {\\n \\\n@@ -152,7 +152,7 @@ impl gen_send for message {\n                 }\n                 else {\n                     ~\"(\" + str::connect(arg_names.map(|x| copy *x),\n-                                        \", \") + ~\")\"\n+                                        \", \") + \")\"\n                 };\n \n                 let mut body = ~\"{ \";\n@@ -161,7 +161,7 @@ impl gen_send for message {\n \n                 if !try {\n                     body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n-                    body += ~\" }\";\n+                    body += \" }\";\n                 } else {\n                     body += fmt!(\"if ::std::pipes::send(pipe, message) \\\n                                         { \\"}, {"sha": "ed9a83d6b1ebc7feb6d87baf4be517abe1d648d2", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -42,7 +42,7 @@ impl parser_attr for Parser {\n                 if self.look_ahead(1u) != token::LBRACKET {\n                     break;\n                 }\n-                attrs += ~[self.parse_attribute(ast::attr_outer)];\n+                attrs += [self.parse_attribute(ast::attr_outer)];\n               }\n               token::DOC_COMMENT(s) => {\n                 let attr = ::attr::mk_sugared_doc_attr(\n@@ -53,7 +53,7 @@ impl parser_attr for Parser {\n                 if attr.node.style != ast::attr_outer {\n                   self.fatal(\"expected outer comment\");\n                 }\n-                attrs += ~[attr];\n+                attrs += [attr];\n                 self.bump();\n               }\n               _ => break\n@@ -105,15 +105,15 @@ impl parser_attr for Parser {\n                 let attr = self.parse_attribute(ast::attr_inner);\n                 if *self.token == token::SEMI {\n                     self.bump();\n-                    inner_attrs += ~[attr];\n+                    inner_attrs += [attr];\n                 } else {\n                     // It's not really an inner attribute\n                     let outer_attr =\n                         spanned(attr.span.lo, attr.span.hi,\n                             ast::attribute_ { style: ast::attr_outer,\n                                               value: attr.node.value,\n                                               is_sugared_doc: false });\n-                    next_outer_attrs += ~[outer_attr];\n+                    next_outer_attrs += [outer_attr];\n                     break;\n                 }\n               }\n@@ -125,9 +125,9 @@ impl parser_attr for Parser {\n                 );\n                 self.bump();\n                 if attr.node.style == ast::attr_inner {\n-                  inner_attrs += ~[attr];\n+                  inner_attrs += [attr];\n                 } else {\n-                  next_outer_attrs += ~[attr];\n+                  next_outer_attrs += [attr];\n                   break;\n                 }\n               }"}, {"sha": "3fa0fa3b0f06cf66038de0cacc36898424284aa3", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -235,7 +235,7 @@ fn read_block_comment(rdr: @mut StringReader,\n             bump(rdr);\n         }\n         if !is_eof(rdr) {\n-            curr_line += ~\"*/\";\n+            curr_line += \"*/\";\n             bump(rdr);\n             bump(rdr);\n         }\n@@ -259,13 +259,13 @@ fn read_block_comment(rdr: @mut StringReader,\n                 if rdr.curr == '/' && nextch(rdr) == '*' {\n                     bump(rdr);\n                     bump(rdr);\n-                    curr_line += ~\"*\";\n+                    curr_line += \"*\";\n                     level += 1;\n                 } else {\n                     if rdr.curr == '*' && nextch(rdr) == '/' {\n                         bump(rdr);\n                         bump(rdr);\n-                        curr_line += ~\"/\";\n+                        curr_line += \"/\";\n                         level -= 1;\n                     } else { bump(rdr); }\n                 }"}, {"sha": "bdbe91e4112b72c786704db9373f3e1282ba5366", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -194,9 +194,9 @@ pub impl Parser {\n         } else {\n             let mut s: ~str = ~\"expected `\";\n             s += self.token_to_str(&token::GT);\n-            s += ~\"`, found `\";\n+            s += \"`, found `\";\n             s += self.this_token_to_str();\n-            s += ~\"`\";\n+            s += \"`\";\n             self.fatal(s);\n         }\n     }"}, {"sha": "eabe664d8ef6244f6193c5c29b8c47697d292074", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -320,7 +320,7 @@ fn consume_block_comment(rdr: @mut StringReader)\n         if is_eof(rdr) {\n             rdr.fatal(~\"unterminated block doc-comment\");\n         } else {\n-            acc += ~\"*/\";\n+            acc += \"*/\";\n             bump(rdr);\n             bump(rdr);\n             // but comments with only \"*\"s between two \"/\"s are not"}, {"sha": "1af0cfab273e3f36899f52735324bf82cb939b85", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -3584,7 +3584,7 @@ pub impl Parser {\n         let prefix = prefix.dir_path();\n         let mod_path_stack = &*self.mod_path_stack;\n         let mod_path = Path(\".\").push_many(*mod_path_stack);\n-        let default_path = *self.sess.interner.get(id) + ~\".rs\";\n+        let default_path = *self.sess.interner.get(id) + \".rs\";\n         let file_path = match ::attr::first_attr_value_str_by_name(\n             outer_attrs, \"path\") {\n             Some(d) => {\n@@ -4213,8 +4213,8 @@ pub impl Parser {\n         // FAILURE TO PARSE ITEM\n         if visibility != inherited {\n             let mut s = ~\"unmatched visibility `\";\n-            s += if visibility == public { ~\"pub\" } else { ~\"priv\" };\n-            s += ~\"`\";\n+            s += if visibility == public { \"pub\" } else { \"priv\" };\n+            s += \"`\";\n             self.span_fatal(*self.last_span, s);\n         }\n         return iovi_none;"}, {"sha": "c43924486e7118b0ae018ffbf5bb55614e3cec3b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -138,7 +138,7 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n       OROR => ~\"||\",\n       ANDAND => ~\"&&\",\n       BINOP(op) => binop_to_str(op),\n-      BINOPEQ(op) => binop_to_str(op) + ~\"=\",\n+      BINOPEQ(op) => binop_to_str(op) + \"=\",\n \n       /* Structural symbols */\n       AT => ~\"@\",\n@@ -163,7 +163,7 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n \n       /* Literals */\n       LIT_INT(c, ast::ty_char) => {\n-        ~\"'\" + char::escape_default(c as char) + ~\"'\"\n+        ~\"'\" + char::escape_default(c as char) + \"'\"\n       }\n       LIT_INT(i, t) => {\n           i.to_str() + ast_util::int_ty_to_str(t)\n@@ -175,18 +175,18 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n       LIT_FLOAT(s, t) => {\n         let mut body = copy *in.get(s);\n         if body.ends_with(\".\") {\n-            body = body + ~\"0\";  // `10.f` is not a float literal\n+            body += \"0\";  // `10.f` is not a float literal\n         }\n         body + ast_util::float_ty_to_str(t)\n       }\n       LIT_FLOAT_UNSUFFIXED(s) => {\n         let mut body = copy *in.get(s);\n         if body.ends_with(\".\") {\n-            body = body + ~\"0\";  // `10.f` is not a float literal\n+            body += \"0\";  // `10.f` is not a float literal\n         }\n         body\n       }\n-      LIT_STR(s) => { ~\"\\\"\" + str::escape_default(*in.get(s)) + ~\"\\\"\" }\n+      LIT_STR(s) => { ~\"\\\"\" + str::escape_default(*in.get(s)) + \"\\\"\" }\n \n       /* Name components */\n       IDENT(s, _) => copy *in.get(s),"}, {"sha": "d3b5c751e695dbaef73f8c88c376a5ecf795fb30", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -120,12 +120,12 @@ pub fn buf_str(toks: ~[token], szs: ~[int], left: uint, right: uint,\n     let mut s = ~\"[\";\n     while i != right && L != 0u {\n         L -= 1u;\n-        if i != left { s += ~\", \"; }\n+        if i != left { s += \", \"; }\n         s += fmt!(\"%d=%s\", szs[i], tok_str(toks[i]));\n         i += 1u;\n         i %= n;\n     }\n-    s += ~\"]\";\n+    s += \"]\";\n     return s;\n }\n "}, {"sha": "3ecd0e6ab80a3eceb879a1a39c951024ac4dc719", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f3686515410c013f6cd12ce4fc5236e3dee3f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "patch": "@@ -1996,7 +1996,7 @@ pub fn print_literal(s: @ps, lit: @ast::lit) {\n     match lit.node {\n       ast::lit_str(st) => print_string(s, *st),\n       ast::lit_int(ch, ast::ty_char) => {\n-        word(s.s, ~\"'\" + char::escape_default(ch as char) + ~\"'\");\n+        word(s.s, ~\"'\" + char::escape_default(ch as char) + \"'\");\n       }\n       ast::lit_int(i, t) => {\n         if i < 0_i64 {"}]}