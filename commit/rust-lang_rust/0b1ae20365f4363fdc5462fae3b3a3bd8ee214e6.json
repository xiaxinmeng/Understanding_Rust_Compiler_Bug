{"sha": "0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "node_id": "C_kwDOAAsO6NoAKDBiMWFlMjAzNjVmNDM2M2ZkYzU0NjJmYWUzYjNhM2JkOGVlMjE0ZTY", "commit": {"author": {"name": "Jirka Vebr", "email": "jirkavebr@gmail.com", "date": "2023-02-16T12:29:38Z"}, "committer": {"name": "Jirka Vebr", "email": "jirkavebr@gmail.com", "date": "2023-02-16T12:29:38Z"}, "message": "Fix dogfood tests by adding type annotations", "tree": {"sha": "ee90689ea1a19fbd0a244069b1733950bd11b48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee90689ea1a19fbd0a244069b1733950bd11b48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEETIK5e7AnTTVwmxKOXZiyBdhD34MFAmPuIbIUHGppcmthdmVi\nckBnbWFpbC5jb20ACgkQXZiyBdhD34M8rg/+J3y1S+RvXxWSSeEqCrNRl4rL1MEF\ndUJ3AV8gvi/Hka6+hcAPlVMfsFd8eI7E+VCFEQ537K33fM1QmCsYgILqsuSug3X4\nDtLQjDPUN/Ae6jj6nr5nNKuntIEvNevadKKS8yaPU9rognjhQhCZzoS4n6/58DK0\nUn+vZvVnL3LqXM93XTCm7q1LXf4WNzotm3RysiHv8fN8XDQaDgRLH1j/xdISX82J\n8OhpV6HhUgg2zvu5f5fB9lGECNazp07ukVOKR+cPY9SWI0g6Mx0Os7gPqZmMtsYA\ny3Sv1ff9/KC7hlfi/9JOxmR2mPnmBmexUiILPYb2QYI042up5iNLvwxCHh9OUmMs\nzGBsbczlQmPBQ2yXJ+tpaPeXWaYLRH38WDur54/hpWAky98bDJ4t5Orsy5V8Gq8F\np4csxRP1F2C6O+bmfm4rUwOh8b3m9wbTuPyahWOg0dstcAzwxDNq3+p3ETiEAHS3\nEg4dtg+YsxW6y5Kc+oicq8i4aS98e2qip8HVGf544SM1gTxiNp0lRp1n+XG6BHYh\n4o95LTfdUa1xidE+fMfwkigZhp7AO5b6p4HFEtpZGzJllGKDY8Jx8nNTTCZFw5+X\nb1qFaXJC0A2kQFf7X+0SMK8YuhgtXtMv3+yGwMSRNg6klba2F8a5yfSGKm19Ld02\nO8ONgTWDftTIvAE=\n=UDiq\n-----END PGP SIGNATURE-----", "payload": "tree ee90689ea1a19fbd0a244069b1733950bd11b48c\nparent 2d4d39de53ccbada5012e8289625b2a5c2d683b9\nauthor Jirka Vebr <jirkavebr@gmail.com> 1676550578 +0100\ncommitter Jirka Vebr <jirkavebr@gmail.com> 1676550578 +0100\n\nFix dogfood tests by adding type annotations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "html_url": "https://github.com/rust-lang/rust/commit/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/comments", "author": {"login": "JirkaVebr", "id": 361072, "node_id": "MDQ6VXNlcjM2MTA3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/361072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JirkaVebr", "html_url": "https://github.com/JirkaVebr", "followers_url": "https://api.github.com/users/JirkaVebr/followers", "following_url": "https://api.github.com/users/JirkaVebr/following{/other_user}", "gists_url": "https://api.github.com/users/JirkaVebr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JirkaVebr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JirkaVebr/subscriptions", "organizations_url": "https://api.github.com/users/JirkaVebr/orgs", "repos_url": "https://api.github.com/users/JirkaVebr/repos", "events_url": "https://api.github.com/users/JirkaVebr/events{/privacy}", "received_events_url": "https://api.github.com/users/JirkaVebr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JirkaVebr", "id": 361072, "node_id": "MDQ6VXNlcjM2MTA3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/361072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JirkaVebr", "html_url": "https://github.com/JirkaVebr", "followers_url": "https://api.github.com/users/JirkaVebr/followers", "following_url": "https://api.github.com/users/JirkaVebr/following{/other_user}", "gists_url": "https://api.github.com/users/JirkaVebr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JirkaVebr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JirkaVebr/subscriptions", "organizations_url": "https://api.github.com/users/JirkaVebr/orgs", "repos_url": "https://api.github.com/users/JirkaVebr/repos", "events_url": "https://api.github.com/users/JirkaVebr/events{/privacy}", "received_events_url": "https://api.github.com/users/JirkaVebr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4d39de53ccbada5012e8289625b2a5c2d683b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d39de53ccbada5012e8289625b2a5c2d683b9", "html_url": "https://github.com/rust-lang/rust/commit/2d4d39de53ccbada5012e8289625b2a5c2d683b9"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "420214d9256d8a050d80a97aa3154da1db80e9e2", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -1,5 +1,6 @@\n use crate::clippy_project_root;\n use indoc::{formatdoc, writedoc};\n+use std::fmt;\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -256,7 +257,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n+    let _: fmt::Result = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n         formatdoc!(\n@@ -353,7 +354,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n     let mut lint_file_contents = String::new();\n \n     if enable_msrv {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use clippy_utils::msrvs::{{self, Msrv}};\n@@ -373,7 +374,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n             name_upper = name_upper,\n         );\n     } else {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use rustc_lint::{{{context_import}, LintContext}};\n@@ -521,7 +522,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n         .chain(std::iter::once(&*lint_name_upper))\n         .filter(|s| !s.is_empty())\n     {\n-        let _ = write!(new_arr_content, \"\\n    {ident},\");\n+        let _: fmt::Result = write!(new_arr_content, \"\\n    {ident},\");\n     }\n     new_arr_content.push('\\n');\n "}, {"sha": "779e4d0e1e308dc39e467e7a6969b965ac4e9d6e", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::fs::{self, OpenOptions};\n use std::io::{self, Read, Seek, SeekFrom, Write as _};\n use std::ops::Range;\n@@ -691,7 +691,7 @@ fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n     let mut output = GENERATED_FILE_COMMENT.to_string();\n     output.push_str(\"{\\n\");\n     for lint in lints {\n-        let _ = write!(\n+        let _: fmt::Result = write!(\n             output,\n             concat!(\n                 \"    store.register_removed(\\n\",\n@@ -726,7 +726,7 @@ fn gen_declared_lints<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n+        let _: fmt::Result = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n     }\n     output.push_str(\"];\\n\");\n "}, {"sha": "48a54f60253c85032b9698d7d058f607db07a378", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n     source::{reindent_multiline, snippet_indent, snippet_with_applicability, snippet_with_context},\n     SpanlessEq,\n };\n-use core::fmt::Write;\n+use core::fmt::{self, Write};\n use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n@@ -536,7 +536,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n             if is_expr_used_or_unified(cx.tcx, insertion.call) {\n                 write_wrapped(&mut res, insertion, ctxt, app);\n             } else {\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"e.insert({})\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -552,7 +552,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `Some(&mut value)`, but the entry returns `&mut value`\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"Some(e.insert({}))\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -566,7 +566,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `None`, but the entry returns a mutable reference.\n-                let _ = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n+                let _: fmt::Result = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n                     write!(\n                         res,\n                         \"e.insert({});\\n{}None\","}, {"sha": "1ad886f2cf35fe5a7b6526d2bae3baaa1971f502", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    let _ = write!(fields_snippet, \"{ident}, \");\n+                    let _: fmt::Result = write!(fields_snippet, \"{ident}, \");\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n "}, {"sha": "8097627c869bad998c2f9c83b86f15e12cb18595", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -484,7 +484,7 @@ impl DecimalLiteralRepresentation {\n             then {\n                 let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n-                let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n+                let _: Result<(), ()> = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n                     warning_type.display(num_lit.format(), cx, span);\n                 });\n             }"}, {"sha": "349fcd2274d3ec61a7b0e2352298999c2265138e", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -134,7 +134,7 @@ fn process_paths_for_mod_files<'a>(\n     mod_folders: &mut FxHashSet<&'a OsStr>,\n ) {\n     let mut comp = path.components().rev().peekable();\n-    let _ = comp.next();\n+    let _: Option<_> = comp.next();\n     if path.ends_with(\"mod.rs\") {\n         mod_folders.insert(comp.peek().map(|c| c.as_os_str()).unwrap_or_default());\n     }"}, {"sha": "c225398ad2a8fdfed1a54fec623970ef62f0e8ec", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -186,7 +186,7 @@ impl<'a> NumericLiteral<'a> {\n         // The exponent may have a sign, output it early, otherwise it will be\n         // treated as a digit\n         if digits.clone().next() == Some('-') {\n-            let _ = digits.next();\n+            let _: Option<char> = digits.next();\n             output.push('-');\n         }\n "}, {"sha": "51e270d330c88d78eb102856950e7257a1a9777c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::{FakeReadCause, Mutability};\n use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use std::borrow::Cow;\n-use std::fmt::{Display, Write as _};\n+use std::fmt::{self, Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n@@ -932,7 +932,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                let _ = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -947,7 +947,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, self_expr, ..) if self_expr.hir_id == cmt.hir_id => {\n-                            let _ = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n+                            let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -1055,7 +1055,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n-                let _ = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n             }\n             self.next_pos = span.hi();\n         }"}, {"sha": "23c85298027597f33bcef3cec8ff5a591f64982c", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "patch": "@@ -17,9 +17,9 @@ use crate::recursive::LintcheckServer;\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::env::consts::EXE_SUFFIX;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n use std::fs;\n-use std::io::ErrorKind;\n+use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -145,8 +145,8 @@ impl ClippyWarning {\n             }\n \n             let mut output = String::from(\"| \");\n-            let _ = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n-            let _ = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n+            let _: fmt::Result = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n+            let _: fmt::Result = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n             output.push('\\n');\n             output\n         } else {\n@@ -632,7 +632,7 @@ fn main() {\n         .unwrap();\n \n     let server = config.recursive.then(|| {\n-        let _ = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n+        let _: io::Result<()> = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n \n         LintcheckServer::spawn(recursive_options)\n     });\n@@ -689,7 +689,7 @@ fn main() {\n     write!(text, \"{}\", all_msgs.join(\"\")).unwrap();\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n     for (cratename, msg) in &ices {\n-        let _ = write!(text, \"{cratename}: '{msg}'\");\n+        let _: fmt::Result = write!(text, \"{cratename}: '{msg}'\");\n     }\n \n     println!(\"Writing logs to {}\", config.lintcheck_results_path.display());"}]}