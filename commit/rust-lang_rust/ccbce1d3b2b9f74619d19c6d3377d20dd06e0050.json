{"sha": "ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYmNlMWQzYjJiOWY3NDYxOWQxOWM2ZDMzNzdkMjBkZDA2ZTAwNTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T19:49:02Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-10T20:57:05Z"}, "message": "Update tests for updated set_panic.", "tree": {"sha": "1ad1f18b68ad1c4a898314a7e849e48e39d08fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ad1f18b68ad1c4a898314a7e849e48e39d08fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "html_url": "https://github.com/rust-lang/rust/commit/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e96604c0115ee77b0817d8bb053bcfd4625b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e96604c0115ee77b0817d8bb053bcfd4625b70", "html_url": "https://github.com/rust-lang/rust/commit/72e96604c0115ee77b0817d8bb053bcfd4625b70"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "555b90fbd19e5bca5eb18364632c5a030405be08", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "patch": "@@ -5,7 +5,8 @@\n \n use std::fmt;\n use std::fmt::{Display, Formatter};\n-use std::io::{self, set_panic, LocalOutput, Write};\n+use std::io::{self, set_panic, Write};\n+use std::sync::{Arc, Mutex};\n \n pub struct A;\n \n@@ -16,6 +17,7 @@ impl Display for A {\n }\n \n struct Sink;\n+\n impl Write for Sink {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         Ok(buf.len())\n@@ -24,14 +26,9 @@ impl Write for Sink {\n         Ok(())\n     }\n }\n-impl LocalOutput for Sink {\n-    fn clone_box(&self) -> Box<dyn LocalOutput> {\n-        Box::new(Sink)\n-    }\n-}\n \n fn main() {\n-    set_panic(Some(Box::new(Sink)));\n+    set_panic(Some(Arc::new(Mutex::new(Sink))));\n     assert!(std::panic::catch_unwind(|| {\n         eprintln!(\"{}\", A);\n     })"}, {"sha": "8bd78158b54b2c003b109a224bb21733178f376b", "filename": "src/test/ui/threads-sendsync/task-stderr.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbce1d3b2b9f74619d19c6d3377d20dd06e0050/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs?ref=ccbce1d3b2b9f74619d19c6d3377d20dd06e0050", "patch": "@@ -1,33 +1,21 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-#![feature(box_syntax, set_stdio)]\n+#![feature(set_stdio)]\n \n-use std::io::prelude::*;\n use std::io;\n use std::str;\n use std::sync::{Arc, Mutex};\n use std::thread;\n \n-struct Sink(Arc<Mutex<Vec<u8>>>);\n-impl Write for Sink {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Write::write(&mut *self.0.lock().unwrap(), data)\n-    }\n-    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n-}\n-impl io::LocalOutput for Sink {\n-    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n-        Box::new(Sink(self.0.clone()))\n-    }\n-}\n-\n fn main() {\n     let data = Arc::new(Mutex::new(Vec::new()));\n-    let sink = Sink(data.clone());\n-    let res = thread::Builder::new().spawn(move|| -> () {\n-        io::set_panic(Some(Box::new(sink)));\n-        panic!(\"Hello, world!\")\n+    let res = thread::Builder::new().spawn({\n+        let data = data.clone();\n+        move || {\n+            io::set_panic(Some(data));\n+            panic!(\"Hello, world!\")\n+        }\n     }).unwrap().join();\n     assert!(res.is_err());\n "}]}