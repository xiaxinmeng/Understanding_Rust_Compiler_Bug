{"sha": "411a01feb302dd64b669658562f2052decc80f19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMWEwMWZlYjMwMmRkNjRiNjY5NjU4NTYyZjIwNTJkZWNjODBmMTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-13T03:10:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T20:54:01Z"}, "message": "std::comm: replace Handle.id with a method.\n\nThe `id` shouldn't be changed by external code, and exposing it publicly\nallows to be accidentally changed.\n\nAlso, remove the first element special case in the `select!` macro.", "tree": {"sha": "07a5743dbd042d185eda54a8b8872be25820e10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a5743dbd042d185eda54a8b8872be25820e10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/411a01feb302dd64b669658562f2052decc80f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/411a01feb302dd64b669658562f2052decc80f19", "html_url": "https://github.com/rust-lang/rust/commit/411a01feb302dd64b669658562f2052decc80f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/411a01feb302dd64b669658562f2052decc80f19/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866d6cc33d06050b546abbe5930546ff17d96493", "url": "https://api.github.com/repos/rust-lang/rust/commits/866d6cc33d06050b546abbe5930546ff17d96493", "html_url": "https://github.com/rust-lang/rust/commit/866d6cc33d06050b546abbe5930546ff17d96493"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2a8a874b7984e6c162779bfaff7f608a7044fc76", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/411a01feb302dd64b669658562f2052decc80f19/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411a01feb302dd64b669658562f2052decc80f19/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=411a01feb302dd64b669658562f2052decc80f19", "patch": "@@ -60,21 +60,17 @@ use uint;\n \n macro_rules! select {\n     (\n-        $name1:pat = $port1:ident.$meth1:ident() => $code1:expr,\n-        $($name:pat = $port:ident.$meth:ident() => $code:expr),*\n+        $($name:pat = $port:ident.$meth:ident() => $code:expr),+\n     ) => ({\n         use std::comm::Select;\n         let sel = Select::new();\n-        let mut $port1 = sel.handle(&$port1);\n-        $( let mut $port = sel.handle(&$port); )*\n+        $( let mut $port = sel.handle(&$port); )+\n         unsafe {\n-            $port1.add();\n-            $( $port.add(); )*\n+            $( $port.add(); )+\n         }\n         let ret = sel.wait();\n-        if ret == $port1.id { let $name1 = $port1.$meth1(); $code1 }\n-        $( else if ret == $port.id { let $name = $port.$meth(); $code } )*\n-        else { unreachable!() }\n+        $( if ret == $port.id() { let $name = $port.$meth(); $code } else )+\n+        { unreachable!() }\n     })\n }\n \n@@ -94,7 +90,7 @@ pub struct Select {\n pub struct Handle<'port, T> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n-    id: uint,\n+    priv id: uint,\n     priv selector: &'port Select,\n     priv next: *mut Handle<'static, ()>,\n     priv prev: *mut Handle<'static, ()>,\n@@ -150,7 +146,7 @@ impl Select {\n \n     /// Waits for an event on this port set. The returned valus is *not* and\n     /// index, but rather an id. This id can be queried against any active\n-    /// `Handle` structures (each one has a public `id` field). The handle with\n+    /// `Handle` structures (each one has an `id` method). The handle with\n     /// the matching `id` will have some sort of event available on it. The\n     /// event could either be that data is available or the corresponding\n     /// channel has been closed.\n@@ -242,6 +238,10 @@ impl Select {\n }\n \n impl<'port, T: Send> Handle<'port, T> {\n+    /// Retrieve the id of this handle.\n+    #[inline]\n+    pub fn id(&self) -> uint { self.id }\n+\n     /// Receive a value on the underlying port. Has the same semantics as\n     /// `Port.recv`\n     pub fn recv(&mut self) -> T { self.port.recv() }\n@@ -355,7 +355,7 @@ mod test {\n         )\n         drop(c2);\n         select! (\n-            bar = p2.recv_opt() => { assert_eq!(bar, None); },\n+            bar = p2.recv_opt() => { assert_eq!(bar, None); }\n         )\n     })\n "}]}