{"sha": "d8b828beea89f1131c878f824cadcf92145f5c3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjgyOGJlZWE4OWYxMTMxYzg3OGY4MjRjYWRjZjkyMTQ1ZjVjM2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-26T00:13:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-26T00:13:32Z"}, "message": "Rollup merge of #61184 - wesleywiser:const_prop_tracing, r=oli-obk\n\nAdd additional trace statements to the const propagator\n\nThis makes it easier to figure out when const propagation fails.", "tree": {"sha": "4ca7c533b465d588e8faeecbbf2a42d2269e06ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca7c533b465d588e8faeecbbf2a42d2269e06ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b828beea89f1131c878f824cadcf92145f5c3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6dosCRBK7hj4Ov3rIwAAdHIIAJAiTIGLCRsSlTYOicbMw+vm\nk/FnulCm90bCLAm/RGqUesLMcvONyo0grcuyghL9LsxRD+pJPXwY+gO+9R+CGNmr\nyrfwmW/vuwFemAIQdpshXy9GMxrHk9Ml7qBy8z3rBVbmPIj8r8D44jbypnUwnd5e\nsrf5XEFshB5EEAjy3rBqubPJgM8lFCfCY20s8veIcBNhVfbb/PVgyPpp/+jfCH2g\nAvexEe5Nwb444u2aFHlLmr1MSvjvc+WgIPP3DU+R1PDXhsIDPYRnvsEl/5XovwYe\nx3Lkq+y6STCvx/vzjJUXsZvFYX4UYBQ9qv1JPVBCscW7pnOHa+RfffjWdYzPSno=\n=hZ1M\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ca7c533b465d588e8faeecbbf2a42d2269e06ef\nparent f530f90b56969ba0d2f269f843f01c4a9386d20c\nparent 9bfbbd2a786b7d69908f25e5d1f4170316f38726\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558829612 +0200\ncommitter GitHub <noreply@github.com> 1558829612 +0200\n\nRollup merge of #61184 - wesleywiser:const_prop_tracing, r=oli-obk\n\nAdd additional trace statements to the const propagator\n\nThis makes it easier to figure out when const propagation fails.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b828beea89f1131c878f824cadcf92145f5c3e", "html_url": "https://github.com/rust-lang/rust/commit/d8b828beea89f1131c878f824cadcf92145f5c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b828beea89f1131c878f824cadcf92145f5c3e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f530f90b56969ba0d2f269f843f01c4a9386d20c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f530f90b56969ba0d2f269f843f01c4a9386d20c", "html_url": "https://github.com/rust-lang/rust/commit/f530f90b56969ba0d2f269f843f01c4a9386d20c"}, {"sha": "9bfbbd2a786b7d69908f25e5d1f4170316f38726", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfbbd2a786b7d69908f25e5d1f4170316f38726", "html_url": "https://github.com/rust-lang/rust/commit/9bfbbd2a786b7d69908f25e5d1f4170316f38726"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "b2976cd501e7f20e37135c87db39ac255d985dcb", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8b828beea89f1131c878f824cadcf92145f5c3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b828beea89f1131c878f824cadcf92145f5c3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d8b828beea89f1131c878f824cadcf92145f5c3e", "patch": "@@ -295,6 +295,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     }\n \n     fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+        trace!(\"eval_place(place={:?})\", place);\n         match *place {\n             Place::Base(PlaceBase::Local(loc)) => self.places[loc].clone(),\n             Place::Projection(ref proj) => match proj.elem {\n@@ -516,6 +517,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     }\n \n     fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+        trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n         self.ecx.validate_operand(\n             value,\n             vec![],\n@@ -579,6 +581,10 @@ impl CanConstProp {\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n             *val = mir.local_kind(local) == LocalKind::Temp;\n+\n+            if !*val {\n+                trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n+            }\n         }\n         cpv.visit_mir(mir);\n         cpv.can_const_prop\n@@ -598,6 +604,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // FIXME(oli-obk): we could be more powerful here, if the multiple writes\n             // only occur in independent execution paths\n             MutatingUse(MutatingUseContext::Store) => if self.found_assignment[local] {\n+                trace!(\"local {:?} can't be propagated because of multiple assignments\", local);\n                 self.can_const_prop[local] = false;\n             } else {\n                 self.found_assignment[local] = true\n@@ -609,7 +616,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             NonMutatingUse(NonMutatingUseContext::Projection) |\n             MutatingUse(MutatingUseContext::Projection) |\n             NonUse(_) => {},\n-            _ => self.can_const_prop[local] = false,\n+            _ => {\n+                trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n+                self.can_const_prop[local] = false;\n+            },\n         }\n     }\n }"}]}