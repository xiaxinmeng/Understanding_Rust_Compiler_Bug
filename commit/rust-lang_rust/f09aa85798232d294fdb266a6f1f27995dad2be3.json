{"sha": "f09aa85798232d294fdb266a6f1f27995dad2be3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWFhODU3OTgyMzJkMjk0ZmRiMjY2YTZmMWYyNzk5NWRhZDJiZTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-19T18:41:12Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-19T18:41:12Z"}, "message": "Merge pull request #619 from SiegeLord/item_brace_style_1\n\nImplement initial option for brace style for non-fn items.", "tree": {"sha": "e33bfbe8673824263bf483810fc793dbe7898517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33bfbe8673824263bf483810fc793dbe7898517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09aa85798232d294fdb266a6f1f27995dad2be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09aa85798232d294fdb266a6f1f27995dad2be3", "html_url": "https://github.com/rust-lang/rust/commit/f09aa85798232d294fdb266a6f1f27995dad2be3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09aa85798232d294fdb266a6f1f27995dad2be3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9c034a3faae3eb05da2ff0f3ae5c4901c1c958", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9c034a3faae3eb05da2ff0f3ae5c4901c1c958", "html_url": "https://github.com/rust-lang/rust/commit/8d9c034a3faae3eb05da2ff0f3ae5c4901c1c958"}, {"sha": "10560067905331adc158b5613fa8460a3122be1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/10560067905331adc158b5613fa8460a3122be1f", "html_url": "https://github.com/rust-lang/rust/commit/10560067905331adc158b5613fa8460a3122be1f"}], "stats": {"total": 223, "additions": 219, "deletions": 4}, "files": [{"sha": "5407ad8e8b8b6443101a54b08b3618287842cae0", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -268,6 +268,7 @@ create_config! {\n         \"Maximum width in the body of a struct lit before falling back to vertical formatting\";\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n+    item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";"}, {"sha": "bc57a3e5ed63ddbf5137c3347620fae0807b95e0", "filename": "src/items.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -639,6 +639,8 @@ impl<'a> FmtVisitor<'a> {\n         let generics_str = self.format_generics(generics,\n                                                 \"{\",\n                                                 \"{\",\n+                                                self.config.item_brace_style,\n+                                                enum_def.variants.is_empty(),\n                                                 self.block_indent,\n                                                 self.block_indent.block_indent(self.config),\n                                                 mk_sp(span.lo, body_start))\n@@ -818,11 +820,18 @@ impl<'a> FmtVisitor<'a> {\n                 try_opt!(self.format_generics(g,\n                                               \"{\",\n                                               \"{\",\n+                                              self.config.item_brace_style,\n+                                              fields.is_empty(),\n                                               offset,\n                                               offset + header_str.len(),\n                                               mk_sp(span.lo, body_lo)))\n             }\n-            None => \" {\".to_owned(),\n+            None => if self.config.item_brace_style == BraceStyle::AlwaysNextLine &&\n+                       !fields.is_empty() {\n+                format!(\"\\n{}{{\", self.block_indent.to_string(self.config))\n+            } else {\n+                \" {\".to_owned()\n+            },\n         };\n         result.push_str(&generics_str);\n \n@@ -955,6 +964,8 @@ impl<'a> FmtVisitor<'a> {\n                        generics: &ast::Generics,\n                        opener: &str,\n                        terminator: &str,\n+                       brace_style: BraceStyle,\n+                       force_same_line_brace: bool,\n                        offset: Indent,\n                        generics_offset: Indent,\n                        span: Span)\n@@ -969,11 +980,22 @@ impl<'a> FmtVisitor<'a> {\n                                                                       terminator,\n                                                                       Some(span.hi)));\n             result.push_str(&where_clause_str);\n-            result.push('\\n');\n-            result.push_str(&self.block_indent.to_string(self.config));\n+            if !force_same_line_brace &&\n+               (brace_style == BraceStyle::SameLineWhere ||\n+                brace_style == BraceStyle::AlwaysNextLine) {\n+                result.push('\\n');\n+                result.push_str(&self.block_indent.to_string(self.config));\n+            } else {\n+                result.push(' ');\n+            }\n             result.push_str(opener);\n         } else {\n-            result.push(' ');\n+            if !force_same_line_brace && brace_style == BraceStyle::AlwaysNextLine {\n+                result.push('\\n');\n+                result.push_str(&self.block_indent.to_string(self.config));\n+            } else {\n+                result.push(' ');\n+            }\n             result.push_str(opener);\n         }\n "}, {"sha": "96a628349eaa89541805b1c589ca0a11dac3b787", "filename": "tests/source/item-brace-style-always-next-line.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-always-next-line.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-item_brace_style: AlwaysNextLine\n+\n+mod M {\n+    enum A {\n+        A,\n+    }\n+\n+    struct B {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T> where T: Copy {\n+        A,\n+    }\n+\n+    struct B<T> where T: Copy {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T> where T: Copy {}\n+\n+    struct D<T> where T: Copy {}\n+}"}, {"sha": "636a584ff68afa9280b38af1c99cc93ad6007cdd", "filename": "tests/source/item-brace-style-prefer-same-line.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-prefer-same-line.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-item_brace_style: PreferSameLine\n+\n+mod M {\n+    enum A\n+    {\n+        A,\n+    }\n+\n+    struct B\n+    {\n+        b: i32,\n+    }\n+\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T> where T: Copy {\n+        A,\n+    }\n+\n+    struct B<T> where T: Copy {\n+        b: i32,\n+    }\n+\n+    enum C<T> where T: Copy {}\n+\n+    struct D<T> where T: Copy {}\n+}"}, {"sha": "7b2a95d3245d5a250930458a712afd3374e73083", "filename": "tests/source/item-brace-style-same-line-where.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Fsource%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitem-brace-style-same-line-where.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,31 @@\n+// rustfmt-item_brace_style: SameLineWhere\n+\n+mod M {\n+    enum A\n+    {\n+        A,\n+    }\n+\n+    struct B\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T> where T: Copy {\n+        A,\n+    }\n+\n+    struct B<T> where T: Copy {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T> where T: Copy {}\n+\n+    struct D<T> where T: Copy {}\n+}"}, {"sha": "48dcebc0263e112b12a5cae16b47bb6a0fc8ad93", "filename": "tests/target/item-brace-style-always-next-line.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-always-next-line.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,37 @@\n+// rustfmt-item_brace_style: AlwaysNextLine\n+\n+mod M {\n+    enum A\n+    {\n+        A,\n+    }\n+\n+    struct B\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T>\n+        where T: Copy\n+    {\n+        A,\n+    }\n+\n+    struct B<T>\n+        where T: Copy\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T>\n+        where T: Copy {}\n+\n+    struct D<T>\n+        where T: Copy {}\n+}"}, {"sha": "b38bd2e1a19149e9153f8e02626f5e4f18008f02", "filename": "tests/target/item-brace-style-prefer-same-line.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-prefer-same-line.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,31 @@\n+// rustfmt-item_brace_style: PreferSameLine\n+\n+mod M {\n+    enum A {\n+        A,\n+    }\n+\n+    struct B {\n+        b: i32,\n+    }\n+\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T>\n+        where T: Copy {\n+        A,\n+    }\n+\n+    struct B<T>\n+        where T: Copy {\n+        b: i32,\n+    }\n+\n+    enum C<T>\n+        where T: Copy {}\n+\n+    struct D<T>\n+        where T: Copy {}\n+}"}, {"sha": "cdcd813fda4aa6dd22ba0b4d9b048d217d3d8da5", "filename": "tests/target/item-brace-style-same-line-where.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09aa85798232d294fdb266a6f1f27995dad2be3/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitem-brace-style-same-line-where.rs?ref=f09aa85798232d294fdb266a6f1f27995dad2be3", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-item_brace_style: SameLineWhere\n+\n+mod M {\n+    enum A {\n+        A,\n+    }\n+\n+    struct B {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C {}\n+\n+    struct D {}\n+\n+    enum A<T>\n+        where T: Copy\n+    {\n+        A,\n+    }\n+\n+    struct B<T>\n+        where T: Copy\n+    {\n+        b: i32,\n+    }\n+\n+    // For empty enums and structs, the brace remains on the same line.\n+    enum C<T>\n+        where T: Copy {}\n+\n+    struct D<T>\n+        where T: Copy {}\n+}"}]}