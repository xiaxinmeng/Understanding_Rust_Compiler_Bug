{"sha": "f4b1fb1554b639374adeffa50d4719f834a0d475", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjFmYjE1NTRiNjM5Mzc0YWRlZmZhNTBkNDcxOWY4MzRhMGQ0NzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T11:12:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T11:12:45Z"}, "message": "Reorder", "tree": {"sha": "ce2e04a611618bdd47bd81b6f15fcdf324308913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2e04a611618bdd47bd81b6f15fcdf324308913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b1fb1554b639374adeffa50d4719f834a0d475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b1fb1554b639374adeffa50d4719f834a0d475", "html_url": "https://github.com/rust-lang/rust/commit/f4b1fb1554b639374adeffa50d4719f834a0d475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b1fb1554b639374adeffa50d4719f834a0d475/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "html_url": "https://github.com/rust-lang/rust/commit/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "b6d851776129c2f1ade35a03fee43af02c689022", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f4b1fb1554b639374adeffa50d4719f834a0d475/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b1fb1554b639374adeffa50d4719f834a0d475/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=f4b1fb1554b639374adeffa50d4719f834a0d475", "patch": "@@ -80,16 +80,16 @@ pub struct CrateGraph {\n     arena: FxHashMap<CrateId, CrateData>,\n }\n \n-#[derive(Debug)]\n-pub struct CyclicDependencies;\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n-impl CrateId {\n-    pub fn shift(self, amount: u32) -> CrateId {\n-        CrateId(self.0 + amount)\n-    }\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+struct CrateData {\n+    file_id: FileId,\n+    edition: Edition,\n+    cfg_options: CfgOptions,\n+    env: Env,\n+    dependencies: Vec<Dependency>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -103,37 +103,12 @@ pub struct Env {\n     entries: FxHashMap<String, String>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-struct CrateData {\n-    file_id: FileId,\n-    edition: Edition,\n-    dependencies: Vec<Dependency>,\n-    cfg_options: CfgOptions,\n-    env: Env,\n-}\n-\n-impl CrateData {\n-    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n-    }\n-\n-    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n-        self.dependencies.push(Dependency { name, crate_id })\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n     pub name: SmolStr,\n }\n \n-impl Dependency {\n-    pub fn crate_id(&self) -> CrateId {\n-        self.crate_id\n-    }\n-}\n-\n impl CrateGraph {\n     pub fn add_crate_root(\n         &mut self,\n@@ -158,9 +133,9 @@ impl CrateGraph {\n         from: CrateId,\n         name: SmolStr,\n         to: CrateId,\n-    ) -> Result<(), CyclicDependencies> {\n+    ) -> Result<(), CyclicDependenciesError> {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependencies);\n+            return Err(CyclicDependenciesError);\n         }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n@@ -231,9 +206,20 @@ impl CrateGraph {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct ParseEditionError {\n-    invalid_input: String,\n+impl CrateId {\n+    pub fn shift(self, amount: u32) -> CrateId {\n+        CrateId(self.0 + amount)\n+    }\n+}\n+\n+impl CrateData {\n+    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n+        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n+    }\n+\n+    fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n+        self.dependencies.push(Dependency { name, crate_id })\n+    }\n }\n \n impl FromStr for Edition {\n@@ -249,6 +235,17 @@ impl FromStr for Edition {\n     }\n }\n \n+impl Dependency {\n+    pub fn crate_id(&self) -> CrateId {\n+        self.crate_id\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct ParseEditionError {\n+    invalid_input: String,\n+}\n+\n impl fmt::Display for ParseEditionError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"invalid edition: {:?}\", self.invalid_input)\n@@ -257,6 +254,9 @@ impl fmt::Display for ParseEditionError {\n \n impl std::error::Error for ParseEditionError {}\n \n+#[derive(Debug)]\n+pub struct CyclicDependenciesError;\n+\n #[cfg(test)]\n mod tests {\n     use super::{CfgOptions, CrateGraph, Edition::Edition2018, Env, FileId, SmolStr};"}]}