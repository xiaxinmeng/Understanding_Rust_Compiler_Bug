{"sha": "414dfb13df96a373c7fd37f6beb299e176675e0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNGRmYjEzZGY5NmEzNzNjN2ZkMzdmNmJlYjI5OWUxNzY2NzVlMGU=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-30T09:51:40Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-30T09:51:40Z"}, "message": "rustc: Improve long diagnostics for E0282\n\nThe new example uses a `char` iterator instead of `i32`, to avoid interplay\nbetween type inference and the default type for integer literals.", "tree": {"sha": "5f63b2ddbd0fb2c0bc62723d2aade9a8d69e352c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f63b2ddbd0fb2c0bc62723d2aade9a8d69e352c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/414dfb13df96a373c7fd37f6beb299e176675e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/414dfb13df96a373c7fd37f6beb299e176675e0e", "html_url": "https://github.com/rust-lang/rust/commit/414dfb13df96a373c7fd37f6beb299e176675e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/414dfb13df96a373c7fd37f6beb299e176675e0e/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b292cd4c48f0876b4280dfdf0c38d474fe44330", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b292cd4c48f0876b4280dfdf0c38d474fe44330", "html_url": "https://github.com/rust-lang/rust/commit/6b292cd4c48f0876b4280dfdf0c38d474fe44330"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "39ebcda4778c7a0616133bf52d0e8c9415b67e81", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/414dfb13df96a373c7fd37f6beb299e176675e0e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/414dfb13df96a373c7fd37f6beb299e176675e0e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=414dfb13df96a373c7fd37f6beb299e176675e0e", "patch": "@@ -375,39 +375,40 @@ by adding a type annotation. Sometimes you need to specify a generic type\n parameter manually.\n \n A common example is the `collect` method on `Iterator`. It has a generic type\n-parameter with a `FromIterator` bound, which is implemented by `Vec` and\n-`VecDeque` among others. Consider the following snippet:\n+parameter with a `FromIterator` bound, which for a `char` iterator is\n+implemented by `Vec` and `String` among others. Consider the following snippet\n+that reverses the characters of a string:\n \n ```\n-let x = (1_i32 .. 10).collect();\n+let x = \"hello\".chars().rev().collect();\n ```\n \n In this case, the compiler cannot infer what the type of `x` should be:\n-`Vec<i32>` and `VecDeque<i32>` are both suitable candidates. To specify which\n-type to use, you can use a type annotation on `x`:\n+`Vec<char>` and `String` are both suitable candidates. To specify which type to\n+use, you can use a type annotation on `x`:\n \n ```\n-let x: Vec<i32> = (1_i32 .. 10).collect();\n+let x: Vec<char> = \"hello\".chars().rev().collect();\n ```\n \n-It is not necessary to annotate the full type, once the ambiguity is resolved,\n+It is not necessary to annotate the full type. Once the ambiguity is resolved,\n the compiler can infer the rest:\n \n ```\n-let x: Vec<_> = (1_i32 .. 10).collect();\n+let x: Vec<_> = \"hello\".chars().rev().collect();\n ```\n \n Another way to provide the compiler with enough information, is to specify the\n generic type parameter:\n \n ```\n-let x = (1_i32 .. 10).collect::<Vec<i32>>();\n+let x = \"hello\".chars().rev().collect::<Vec<char>>();\n ```\n \n Again, you need not specify the full type if the compiler can infer it:\n \n ```\n-let x = (1_i32 .. 10).collect::<Vec<_>>();\n+let x = \"hello\".chars().rev().collect::<Vec<_>>();\n ```\n \n Apart from a method or function with a generic type parameter, this error can"}]}