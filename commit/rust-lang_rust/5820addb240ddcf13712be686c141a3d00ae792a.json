{"sha": "5820addb240ddcf13712be686c141a3d00ae792a", "node_id": "C_kwDOAAsO6NoAKDU4MjBhZGRiMjQwZGRjZjEzNzEyYmU2ODZjMTQxYTNkMDBhZTc5MmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T13:44:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T13:44:35Z"}, "message": "Auto merge of #9269 - nahuakang:collapsible_str_replace, r=flip1995\n\nLint `collapsible_str_replace`\n\nfixes #6651\n\n```\nchangelog: [`collapsible_str_replace`]: create new lint `collapsible_str_replace`\n```\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[ ] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`", "tree": {"sha": "297098b255071459a13e77d3e7dafbb0af7d2280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297098b255071459a13e77d3e7dafbb0af7d2280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5820addb240ddcf13712be686c141a3d00ae792a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5820addb240ddcf13712be686c141a3d00ae792a", "html_url": "https://github.com/rust-lang/rust/commit/5820addb240ddcf13712be686c141a3d00ae792a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5820addb240ddcf13712be686c141a3d00ae792a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dfec010110acef86eb880e5f4ee0aba09217018", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfec010110acef86eb880e5f4ee0aba09217018", "html_url": "https://github.com/rust-lang/rust/commit/0dfec010110acef86eb880e5f4ee0aba09217018"}, {"sha": "b070b4045f348f9222008270a435bda17b048c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/b070b4045f348f9222008270a435bda17b048c15", "html_url": "https://github.com/rust-lang/rust/commit/b070b4045f348f9222008270a435bda17b048c15"}], "stats": {"total": 374, "additions": 371, "deletions": 3}, "files": [{"sha": "caa488a7a9cc8ea943b8eb3f1fe1f5861ef04cb2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -3642,6 +3642,7 @@ Released 2018-09-13\n [`collapsible_else_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n+[`collapsible_str_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime"}, {"sha": "dac6aed61c0e0669f027bfabaa08275132f46421", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -154,6 +154,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::CHARS_NEXT_CMP),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::COLLAPSIBLE_STR_REPLACE),\n     LintId::of(methods::ERR_EXPECT),\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),"}, {"sha": "be58e14418493f943c8c5086a8e7a72be55b7a8d", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -287,6 +287,7 @@ store.register_lints(&[\n     methods::CLONE_DOUBLE_REF,\n     methods::CLONE_ON_COPY,\n     methods::CLONE_ON_REF_PTR,\n+    methods::COLLAPSIBLE_STR_REPLACE,\n     methods::ERR_EXPECT,\n     methods::EXPECT_FUN_CALL,\n     methods::EXPECT_USED,"}, {"sha": "531fc47f8fac2be16277402e4f53fd984b290408", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -13,6 +13,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(loops::MISSING_SPIN_LOOP),\n     LintId::of(loops::NEEDLESS_COLLECT),\n     LintId::of(manual_retain::MANUAL_RETAIN),\n+    LintId::of(methods::COLLAPSIBLE_STR_REPLACE),\n     LintId::of(methods::EXPECT_FUN_CALL),\n     LintId::of(methods::EXTEND_WITH_DRAIN),\n     LintId::of(methods::ITER_NTH),"}, {"sha": "561033be5b6af3945bfadf83c6903a56b7f486c9", "filename": "clippy_lints/src/methods/collapsible_str_replace.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -0,0 +1,96 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::visitors::for_each_expr;\n+use clippy_utils::{eq_expr_value, get_parent_expr};\n+use core::ops::ControlFlow;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use std::collections::VecDeque;\n+\n+use super::method_call;\n+use super::COLLAPSIBLE_STR_REPLACE;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    from: &'tcx hir::Expr<'tcx>,\n+    to: &'tcx hir::Expr<'tcx>,\n+) {\n+    let replace_methods = collect_replace_calls(cx, expr, to);\n+    if replace_methods.methods.len() > 1 {\n+        let from_kind = cx.typeck_results().expr_ty(from).peel_refs().kind();\n+        // If the parent node's `to` argument is the same as the `to` argument\n+        // of the last replace call in the current chain, don't lint as it was already linted\n+        if let Some(parent) = get_parent_expr(cx, expr)\n+            && let Some((\"replace\", [_, current_from, current_to], _)) = method_call(parent)\n+            && eq_expr_value(cx, to, current_to)\n+            && from_kind == cx.typeck_results().expr_ty(current_from).peel_refs().kind()\n+        {\n+            return;\n+        }\n+\n+        check_consecutive_replace_calls(cx, expr, &replace_methods, to);\n+    }\n+}\n+\n+struct ReplaceMethods<'tcx> {\n+    methods: VecDeque<&'tcx hir::Expr<'tcx>>,\n+    from_args: VecDeque<&'tcx hir::Expr<'tcx>>,\n+}\n+\n+fn collect_replace_calls<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    to_arg: &'tcx hir::Expr<'tcx>,\n+) -> ReplaceMethods<'tcx> {\n+    let mut methods = VecDeque::new();\n+    let mut from_args = VecDeque::new();\n+\n+    let _: Option<()> = for_each_expr(expr, |e| {\n+        if let Some((\"replace\", [_, from, to], _)) = method_call(e) {\n+            if eq_expr_value(cx, to_arg, to) && cx.typeck_results().expr_ty(from).peel_refs().is_char() {\n+                methods.push_front(e);\n+                from_args.push_front(from);\n+                ControlFlow::Continue(())\n+            } else {\n+                ControlFlow::BREAK\n+            }\n+        } else {\n+            ControlFlow::Continue(())\n+        }\n+    });\n+\n+    ReplaceMethods { methods, from_args }\n+}\n+\n+/// Check a chain of `str::replace` calls for `collapsible_str_replace` lint.\n+fn check_consecutive_replace_calls<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    replace_methods: &ReplaceMethods<'tcx>,\n+    to_arg: &'tcx hir::Expr<'tcx>,\n+) {\n+    let from_args = &replace_methods.from_args;\n+    let from_arg_reprs: Vec<String> = from_args\n+        .iter()\n+        .map(|from_arg| snippet(cx, from_arg.span, \"..\").to_string())\n+        .collect();\n+    let app = Applicability::MachineApplicable;\n+    let earliest_replace_call = replace_methods.methods.front().unwrap();\n+    if let Some((_, [..], span_lo)) = method_call(earliest_replace_call) {\n+        span_lint_and_sugg(\n+            cx,\n+            COLLAPSIBLE_STR_REPLACE,\n+            expr.span.with_lo(span_lo.lo()),\n+            \"used consecutive `str::replace` call\",\n+            \"replace with\",\n+            format!(\n+                \"replace([{}], {})\",\n+                from_arg_reprs.join(\", \"),\n+                snippet(cx, to_arg.span, \"..\"),\n+            ),\n+            app,\n+        );\n+    }\n+}"}, {"sha": "49d4900295fd88ba4725e664da43dbd8b18ffcc3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -12,6 +12,7 @@ mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod cloned_instead_of_copied;\n+mod collapsible_str_replace;\n mod err_expect;\n mod expect_fun_call;\n mod expect_used;\n@@ -137,6 +138,32 @@ declare_clippy_lint! {\n     \"used `cloned` where `copied` could be used instead\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for consecutive calls to `str::replace` (2 or more)\n+    /// that can be collapsed into a single call.\n+    ///\n+    /// ### Why is this bad?\n+    /// Consecutive `str::replace` calls scan the string multiple times\n+    /// with repetitive code.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let hello = \"hesuo worpd\"\n+    ///     .replace('s', \"l\")\n+    ///     .replace(\"u\", \"l\")\n+    ///     .replace('p', \"l\");\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let hello = \"hesuo worpd\".replace(&['s', 'u', 'p'], \"l\");\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub COLLAPSIBLE_STR_REPLACE,\n+    perf,\n+    \"collapse consecutive calls to str::replace (2 or more) into a single call\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `_.cloned().<func>()` where call to `.cloned()` can be postponed.\n@@ -3001,6 +3028,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    COLLAPSIBLE_STR_REPLACE,\n     ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,\n     FLAT_MAP_OPTION,\n@@ -3479,6 +3507,14 @@ impl Methods {\n                 (\"repeat\", [arg]) => {\n                     repeat_once::check(cx, expr, recv, arg);\n                 },\n+                (name @ (\"replace\" | \"replacen\"), [arg1, arg2] | [arg1, arg2, _]) => {\n+                    no_effect_replace::check(cx, expr, arg1, arg2);\n+\n+                    // Check for repeated `str::replace` calls to perform `collapsible_str_replace` lint\n+                    if name == \"replace\" && let Some((\"replace\", ..)) = method_call(recv) {\n+                        collapsible_str_replace::check(cx, expr, arg1, arg2);\n+                    }\n+                },\n                 (\"resize\", [count_arg, default_arg]) => {\n                     vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n                 },\n@@ -3556,9 +3592,6 @@ impl Methods {\n                         unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n                     },\n                 },\n-                (\"replace\" | \"replacen\", [arg1, arg2] | [arg1, arg2, _]) => {\n-                    no_effect_replace::check(cx, expr, arg1, arg2);\n-                },\n                 (\"zip\", [arg]) => {\n                     if let ExprKind::MethodCall(name, [iter_recv], _) = recv.kind\n                         && name.ident.name == sym::iter"}, {"sha": "49fc9a9629e25415a714b6e3616602c77367f239", "filename": "tests/ui/collapsible_str_replace.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.fixed?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![warn(clippy::collapsible_str_replace)]\n+\n+fn get_filter() -> char {\n+    'u'\n+}\n+\n+fn main() {\n+    let d = 'd';\n+    let p = 'p';\n+    let s = 's';\n+    let u = 'u';\n+    let l = \"l\";\n+\n+    let mut iter = [\"l\", \"z\"].iter();\n+\n+    // LINT CASES\n+    let _ = \"hesuo worpd\".replace(['s', 'u'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u'], l);\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\"\n+        .replace(['s', 'u', 'p', 'd'], \"l\");\n+\n+    let _ = \"hesuo world\".replace([s, 'u'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace([s, 'u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace([s, u, 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace([s, u, p], \"l\");\n+\n+    let _ = \"hesuo worlp\".replace(['s', 'u'], \"l\").replace('p', \"d\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"x\").replace(['u', 'p'], \"l\");\n+\n+    // Note: Future iterations could lint `replace(|c| matches!(c, \"su\" | 'd' | 'p'), \"l\")`\n+    let _ = \"hesudo worpd\".replace(\"su\", \"l\").replace(['d', 'p'], \"l\");\n+\n+    let _ = \"hesudo worpd\".replace([d, 'p'], \"l\").replace(\"su\", \"l\");\n+\n+    let _ = \"hesuo world\".replace([get_filter(), 's'], \"l\");\n+\n+    // NO LINT CASES\n+    let _ = \"hesuo world\".replace('s', \"l\").replace('u', \"p\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace('p', l);\n+\n+    let _ = \"hesudo worpd\".replace('d', \"l\").replace(\"su\", \"l\").replace('p', \"l\");\n+\n+    // Note: Future iterations of `collapsible_str_replace` might lint this and combine to `[s, u, p]`\n+    let _ = \"hesuo worpd\".replace([s, u], \"l\").replace([u, p], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u'], \"l\").replace(['u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace(['u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u', 'p'], \"l\").replace('r', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u', 'p'], l).replace('r', l);\n+\n+    let _ = \"hesuo worpd\".replace(['s', u, 'p'], \"l\").replace('r', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace([s, u], \"l\").replace(p, \"l\");\n+\n+    // Regression test\n+    let _ = \"hesuo worpd\"\n+        .replace('u', iter.next().unwrap())\n+        .replace('s', iter.next().unwrap());\n+}"}, {"sha": "e3e25c4146ffa6bdd7a71bcd2067ba9a6ec6b68e", "filename": "tests/ui/collapsible_str_replace.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.rs?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -0,0 +1,76 @@\n+// run-rustfix\n+\n+#![warn(clippy::collapsible_str_replace)]\n+\n+fn get_filter() -> char {\n+    'u'\n+}\n+\n+fn main() {\n+    let d = 'd';\n+    let p = 'p';\n+    let s = 's';\n+    let u = 'u';\n+    let l = \"l\";\n+\n+    let mut iter = [\"l\", \"z\"].iter();\n+\n+    // LINT CASES\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace('s', l).replace('u', l);\n+\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\").replace('p', \"l\");\n+\n+    let _ = \"hesuo worpd\"\n+        .replace('s', \"l\")\n+        .replace('u', \"l\")\n+        .replace('p', \"l\")\n+        .replace('d', \"l\");\n+\n+    let _ = \"hesuo world\".replace(s, \"l\").replace('u', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(s, \"l\").replace('u', \"l\").replace('p', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace('p', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace(p, \"l\");\n+\n+    let _ = \"hesuo worlp\".replace('s', \"l\").replace('u', \"l\").replace('p', \"d\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"x\").replace('u', \"l\").replace('p', \"l\");\n+\n+    // Note: Future iterations could lint `replace(|c| matches!(c, \"su\" | 'd' | 'p'), \"l\")`\n+    let _ = \"hesudo worpd\".replace(\"su\", \"l\").replace('d', \"l\").replace('p', \"l\");\n+\n+    let _ = \"hesudo worpd\".replace(d, \"l\").replace('p', \"l\").replace(\"su\", \"l\");\n+\n+    let _ = \"hesuo world\".replace(get_filter(), \"l\").replace('s', \"l\");\n+\n+    // NO LINT CASES\n+    let _ = \"hesuo world\".replace('s', \"l\").replace('u', \"p\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace('p', l);\n+\n+    let _ = \"hesudo worpd\".replace('d', \"l\").replace(\"su\", \"l\").replace('p', \"l\");\n+\n+    // Note: Future iterations of `collapsible_str_replace` might lint this and combine to `[s, u, p]`\n+    let _ = \"hesuo worpd\".replace([s, u], \"l\").replace([u, p], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u'], \"l\").replace(['u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace('s', \"l\").replace(['u', 'p'], \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u', 'p'], \"l\").replace('r', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace(['s', 'u', 'p'], l).replace('r', l);\n+\n+    let _ = \"hesuo worpd\".replace(['s', u, 'p'], \"l\").replace('r', \"l\");\n+\n+    let _ = \"hesuo worpd\".replace([s, u], \"l\").replace(p, \"l\");\n+\n+    // Regression test\n+    let _ = \"hesuo worpd\"\n+        .replace('u', iter.next().unwrap())\n+        .replace('s', iter.next().unwrap());\n+}"}, {"sha": "8e3daf3b898a3328e6f5f9de77f42e24f2729b79", "filename": "tests/ui/collapsible_str_replace.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5820addb240ddcf13712be686c141a3d00ae792a/tests%2Fui%2Fcollapsible_str_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_str_replace.stderr?ref=5820addb240ddcf13712be686c141a3d00ae792a", "patch": "@@ -0,0 +1,86 @@\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:19:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], \"l\")`\n+   |\n+   = note: `-D clippy::collapsible-str-replace` implied by `-D warnings`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:21:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace('s', l).replace('u', l);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], l)`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:23:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace('s', \"l\").replace('u', \"l\").replace('p', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u', 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:26:10\n+   |\n+LL |           .replace('s', \"l\")\n+   |  __________^\n+LL | |         .replace('u', \"l\")\n+LL | |         .replace('p', \"l\")\n+LL | |         .replace('d', \"l\");\n+   | |__________________________^ help: replace with: `replace(['s', 'u', 'p', 'd'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:31:27\n+   |\n+LL |     let _ = \"hesuo world\".replace(s, \"l\").replace('u', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, 'u'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:33:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace('u', \"l\").replace('p', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, 'u', 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:35:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace('p', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, u, 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:37:27\n+   |\n+LL |     let _ = \"hesuo worpd\".replace(s, \"l\").replace(u, \"l\").replace(p, \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([s, u, p], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:39:27\n+   |\n+LL |     let _ = \"hesuo worlp\".replace('s', \"l\").replace('u', \"l\").replace('p', \"d\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['s', 'u'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:41:45\n+   |\n+LL |     let _ = \"hesuo worpd\".replace('s', \"x\").replace('u', \"l\").replace('p', \"l\");\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['u', 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:44:47\n+   |\n+LL |     let _ = \"hesudo worpd\".replace(\"su\", \"l\").replace('d', \"l\").replace('p', \"l\");\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace(['d', 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:46:28\n+   |\n+LL |     let _ = \"hesudo worpd\".replace(d, \"l\").replace('p', \"l\").replace(\"su\", \"l\");\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([d, 'p'], \"l\")`\n+\n+error: used consecutive `str::replace` call\n+  --> $DIR/collapsible_str_replace.rs:48:27\n+   |\n+LL |     let _ = \"hesuo world\".replace(get_filter(), \"l\").replace('s', \"l\");\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `replace([get_filter(), 's'], \"l\")`\n+\n+error: aborting due to 13 previous errors\n+"}]}