{"sha": "17312337a9eb16389d11eca8472d1d083aa473bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzEyMzM3YTllYjE2Mzg5ZDExZWNhODQ3MmQxZDA4M2FhNDczYmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-17T19:52:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-07-26T14:46:35Z"}, "message": "rustc: Stabilize options for pipelined compilation\n\nThis commit stabilizes options in the compiler necessary for Cargo to\nenable \"pipelined compilation\" by default. The concept of pipelined\ncompilation, how it's implemented, and what it means for rustc are\ndocumented in #60988. This PR is coupled with a PR against Cargo\n(rust-lang/cargo#7143) which updates Cargo's support for pipelined\ncompliation to rustc, and also enables support by default in Cargo.\n(note that the Cargo PR cannot land until this one against rustc lands).\n\nThe technical changes performed here were to stabilize the functionality\nproposed in #60419 and #60987, the underlying pieces to enable pipelined\ncompilation support in Cargo. The issues have had some discussion during\nstabilization, but the newly stabilized surface area here is:\n\n* A new `--json` flag was added to the compiler.\n* The `--json` flag can be passed multiple times.\n* The value of the `--json` flag is a comma-separated list of\n  directives.\n* The `--json` flag cannot be combined with `--color`\n* The `--json` flag must be combined with `--error-format=json`\n* The acceptable list of directives to `--json` are:\n  * `diagnostic-short` - the `rendered` field of diagnostics will have a\n    \"short\" rendering matching `--error-format=short`\n  * `diagnostic-rendered-ansi` - the `rendered` field of diagnostics\n    will be colorized with ansi color codes embedded in the string field\n  * `artifacts` - JSON blobs will be emitted for artifacts being emitted\n    by the compiler\n\nThe unstable `-Z emit-artifact-notifications` and `--json-rendered`\nflags have also been removed during this commit as well.\n\nCloses #60419\nCloses #60987\nCloses #60988", "tree": {"sha": "e0856da3c56ec8a4b0732376afe06d672382ee36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0856da3c56ec8a4b0732376afe06d672382ee36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17312337a9eb16389d11eca8472d1d083aa473bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17312337a9eb16389d11eca8472d1d083aa473bd", "html_url": "https://github.com/rust-lang/rust/commit/17312337a9eb16389d11eca8472d1d083aa473bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17312337a9eb16389d11eca8472d1d083aa473bd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a563362865e6051d4c350544131228e8eff5138", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a563362865e6051d4c350544131228e8eff5138", "html_url": "https://github.com/rust-lang/rust/commit/1a563362865e6051d4c350544131228e8eff5138"}], "stats": {"total": 349, "additions": 237, "deletions": 112}, "files": [{"sha": "3a33eb50b9a003b9805c3dbfce6a1e064660cd3f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -229,6 +229,9 @@ impl Step for Cargo {\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n         // Disable a test that has issues with mingw.\n         cargo.env(\"CARGO_TEST_DISABLE_GIT_CLI\", \"1\");\n+        // Forcibly disable tests using nightly features since any changes to\n+        // those features won't be able to land.\n+        cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n \n         try_run(\n             builder,"}, {"sha": "d774e465118b3d520be86a402fc64466b214a5c1", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -271,3 +271,36 @@ current directory out of pathnames emitted into the object files. The\n replacement is purely textual, with no consideration of the current system's\n pathname syntax. For example `--remap-path-prefix foo=bar` will match\n `foo/lib.rs` but not `./foo/lib.rs`.\n+\n+## `--json`: configure json messages printed by the compiler\n+\n+When the `--error-format=json` option is passed to rustc then all of the\n+compiler's diagnostic output will be emitted in the form of JSON blobs. The\n+`--json` argument can be used in conjunction with `--error-format=json` to\n+configure what the JSON blobs contain as well as which ones are emitted.\n+\n+With `--error-format=json` the compiler will always emit any compiler errors as\n+a JSON blob, but the following options are also available to the `--json` flag\n+to customize the output:\n+\n+- `diagnostic-short` - json blobs for diagnostic messages should use the \"short\"\n+  rendering instead of the normal \"human\" default. This means that the output of\n+  `--error-format=short` will be embedded into the JSON diagnostics instead of\n+  the default `--error-format=human`.\n+\n+- `diagnostic-rendered-ansi` - by default JSON blobs in their `rendered` field\n+  will contain a plain text rendering of the diagnostic. This option instead\n+  indicates that the diagnostic should have embedded ANSI color codes intended\n+  to be used to colorize the message in the manner rustc typically already does\n+  for terminal outputs. Note that this is usefully combined with crates like\n+  `fwdansi` to translate these ANSI codes on Windows to console commands or\n+  `strip-ansi-escapes` if you'd like to optionally remove the ansi colors\n+  afterwards.\n+\n+- `artifacts` - this instructs rustc to emit a JSON blob for each artifact that\n+  is emitted. An artifact corresponds to a request from the `--emit` CLI\n+  argument, and as soon as the artifact is available on the filesystem a\n+  notification will be emitted.\n+\n+Note that it is invalid to combine the `--json` argument with the `--color`\n+argument, and it is required to combine `--json` with `--error-format=json`."}, {"sha": "b00b129af3477d5f1cd7786b5dcbd408e1ab09b5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 107, "deletions": 47, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -438,6 +438,10 @@ top_level_options!(\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n \n         edition: Edition [TRACKED],\n+\n+        // Whether or not we're emitting JSON blobs about each artifact produced\n+        // by the compiler.\n+        json_artifact_notifications: bool [TRACKED],\n     }\n );\n \n@@ -625,6 +629,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n+            json_artifact_notifications: false,\n         }\n     }\n }\n@@ -1463,8 +1468,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n-    emit_artifact_notifications: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit notifications after each artifact has been output (only in the JSON format)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n@@ -1822,11 +1825,11 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"How errors and other messages are produced\",\n             \"human|json|short\",\n         ),\n-        opt::opt(\n+        opt::multi_s(\n             \"\",\n-            \"json-rendered\",\n-            \"Choose `rendered` field of json diagnostics render scheme\",\n-            \"plain|termcolor\",\n+            \"json\",\n+            \"Configure the JSON output of the compiler\",\n+            \"CONFIG\",\n         ),\n         opt::opt_s(\n             \"\",\n@@ -1922,10 +1925,9 @@ pub fn get_cmd_lint_options(matches: &getopts::Matches,\n     (lint_opts, describe_lints, lint_cap)\n }\n \n-pub fn build_session_options_and_crate_config(\n-    matches: &getopts::Matches,\n-) -> (Options, FxHashSet<(String, Option<String>)>) {\n-    let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n+/// Parse the `--color` flag\n+pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n+    match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n         Some(\"auto\") => ColorConfig::Auto,\n         Some(\"always\") => ColorConfig::Always,\n         Some(\"never\") => ColorConfig::Never,\n@@ -1940,46 +1942,52 @@ pub fn build_session_options_and_crate_config(\n                 arg\n             ),\n         ),\n-    };\n+    }\n+}\n \n-    let edition = match matches.opt_str(\"edition\") {\n-        Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n+/// Parse the `--json` flag.\n+///\n+/// The first value returned is how to render JSON diagnostics, and the second\n+/// is whether or not artifact notifications are enabled.\n+pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool) {\n+    let mut json_rendered: fn(ColorConfig) -> HumanReadableErrorType =\n+        HumanReadableErrorType::Default;\n+    let mut json_color = ColorConfig::Never;\n+    let mut json_artifact_notifications = false;\n+    for option in matches.opt_strs(\"json\") {\n+        // For now conservatively forbid `--color` with `--json` since `--json`\n+        // won't actually be emitting any colors and anything colorized is\n+        // embedded in a diagnostic message anyway.\n+        if matches.opt_str(\"color\").is_some() {\n             early_error(\n                 ErrorOutputType::default(),\n-                &format!(\n-                    \"argument for --edition must be one of: \\\n-                     {}. (instead was `{}`)\",\n-                    EDITION_NAME_LIST,\n-                    arg\n-                ),\n-            ),\n-        ),\n-        None => DEFAULT_EDITION,\n-    };\n+                \"cannot specify the `--color` option with `--json`\",\n+            );\n+        }\n \n-    if !edition.is_stable() && !nightly_options::is_nightly_build() {\n-        early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"Edition {} is unstable and only \\\n-                     available for nightly builds of rustc.\",\n-                    edition,\n-                )\n-        )\n+        for sub_option in option.split(',') {\n+            match sub_option {\n+                \"diagnostic-short\" => json_rendered = HumanReadableErrorType::Short,\n+                \"diagnostic-rendered-ansi\" => json_color = ColorConfig::Always,\n+                \"artifacts\" => json_artifact_notifications = true,\n+                s => {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\"unknown `--json` option `{}`\", s),\n+                    )\n+                }\n+            }\n+        }\n     }\n+    (json_rendered(json_color), json_artifact_notifications)\n+}\n \n-    let json_rendered = matches.opt_str(\"json-rendered\").and_then(|s| match s.as_str() {\n-        \"plain\" => None,\n-        \"termcolor\" => Some(HumanReadableErrorType::Default(ColorConfig::Always)),\n-        _ => early_error(\n-            ErrorOutputType::default(),\n-            &format!(\n-                \"argument for --json-rendered must be `plain` or `termcolor` (instead was `{}`)\",\n-                s,\n-            ),\n-        ),\n-    }).unwrap_or(HumanReadableErrorType::Default(ColorConfig::Never));\n-\n+/// Parse the `--error-format` flag\n+pub fn parse_error_format(\n+    matches: &getopts::Matches,\n+    color: ColorConfig,\n+    json_rendered: HumanReadableErrorType,\n+) -> ErrorOutputType {\n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n@@ -2008,6 +2016,60 @@ pub fn build_session_options_and_crate_config(\n         ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color))\n     };\n \n+    match error_format {\n+        ErrorOutputType::Json { .. } => {}\n+\n+        // Conservatively require that the `--json` argument is coupled with\n+        // `--error-format=json`. This means that `--json` is specified we\n+        // should actually be emitting JSON blobs.\n+        _ if matches.opt_strs(\"json\").len() > 0 => {\n+            early_error(\n+                ErrorOutputType::default(),\n+                \"using `--json` requires also using `--error-format=json`\",\n+            );\n+        }\n+\n+        _ => {}\n+    }\n+\n+    return error_format;\n+}\n+\n+pub fn build_session_options_and_crate_config(\n+    matches: &getopts::Matches,\n+) -> (Options, FxHashSet<(String, Option<String>)>) {\n+    let color = parse_color(matches);\n+\n+    let edition = match matches.opt_str(\"edition\") {\n+        Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n+            early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"argument for --edition must be one of: \\\n+                     {}. (instead was `{}`)\",\n+                    EDITION_NAME_LIST,\n+                    arg\n+                ),\n+            ),\n+        ),\n+        None => DEFAULT_EDITION,\n+    };\n+\n+    if !edition.is_stable() && !nightly_options::is_nightly_build() {\n+        early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"Edition {} is unstable and only \\\n+                     available for nightly builds of rustc.\",\n+                    edition,\n+                )\n+        )\n+    }\n+\n+    let (json_rendered, json_artifact_notifications) = parse_json(matches);\n+\n+    let error_format = parse_error_format(matches, color, json_rendered);\n+\n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n@@ -2018,9 +2080,6 @@ pub fn build_session_options_and_crate_config(\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n \n     if !debugging_opts.unstable_options {\n-        if matches.opt_str(\"json-rendered\").is_some() {\n-            early_error(error_format, \"`--json-rendered=x` is unstable\");\n-        }\n         if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n             early_error(\n                 ErrorOutputType::Json { pretty: false, json_rendered },\n@@ -2445,6 +2504,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n+            json_artifact_notifications,\n         },\n         cfg,\n     )"}, {"sha": "35b9cc822e9dd02f6cf754e616d8e18a3ff912f4", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -95,7 +95,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n                     );\n                 }\n             }\n-            if sess.opts.debugging_opts.emit_artifact_notifications {\n+            if sess.opts.json_artifact_notifications {\n                 sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename, \"link\");\n             }\n         }"}, {"sha": "fe9a40d7a427d10c7ee724a0d563047e03fba615", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -696,7 +696,7 @@ fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames:\n \n     match result {\n         Ok(_) => {\n-            if sess.opts.debugging_opts.emit_artifact_notifications {\n+            if sess.opts.json_artifact_notifications {\n                  sess.parse_sess.span_diagnostic\n                     .emit_artifact_notification(&deps_filename, \"dep-info\");\n             }\n@@ -1059,7 +1059,7 @@ fn encode_and_write_metadata(\n         if let Err(e) = fs::rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n-        if tcx.sess.opts.debugging_opts.emit_artifact_notifications {\n+        if tcx.sess.opts.json_artifact_notifications {\n             tcx.sess.parse_sess.span_diagnostic\n                 .emit_artifact_notification(&out_filename, \"metadata\");\n         }"}, {"sha": "6f781a2b5e4d24f9c6e66f9d8d1590f36b404f2a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -1087,7 +1087,7 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n             file_name\n         };\n \n-        if sess.opts.debugging_opts.emit_artifact_notifications {\n+        if sess.opts.json_artifact_notifications {\n             sess.parse_sess.span_diagnostic\n                 .emit_artifact_notification(&file_name, \"save-analysis\");\n         }"}, {"sha": "db90bb4524dcfe87a7968fb61180f5ee0c0f005e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -3,10 +3,9 @@ use std::fmt;\n use std::path::PathBuf;\n \n use errors;\n-use errors::emitter::{ColorConfig, HumanReadableErrorType};\n use getopts;\n use rustc::lint::Level;\n-use rustc::session::early_error;\n+use rustc::session;\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n                              get_cmd_lint_options, ExternEntry};\n@@ -243,36 +242,9 @@ impl Options {\n             return Err(0);\n         }\n \n-        let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n-            Some(\"auto\") => ColorConfig::Auto,\n-            Some(\"always\") => ColorConfig::Always,\n-            Some(\"never\") => ColorConfig::Never,\n-            None => ColorConfig::Auto,\n-            Some(arg) => {\n-                early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for `--color` must be `auto`, `always` or `never` \\\n-                                      (instead was `{}`)\", arg));\n-            }\n-        };\n-        // FIXME: deduplicate this code from the identical code in librustc/session/config.rs\n-        let error_format = match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n-            None |\n-            Some(\"human\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color)),\n-            Some(\"json\") => ErrorOutputType::Json {\n-                pretty: false,\n-                json_rendered: HumanReadableErrorType::Default(ColorConfig::Never),\n-            },\n-            Some(\"pretty-json\") => ErrorOutputType::Json {\n-                pretty: true,\n-                json_rendered: HumanReadableErrorType::Default(ColorConfig::Never),\n-            },\n-            Some(\"short\") => ErrorOutputType::HumanReadable(HumanReadableErrorType::Short(color)),\n-            Some(arg) => {\n-                early_error(ErrorOutputType::default(),\n-                            &format!(\"argument for `--error-format` must be `human`, `json` or \\\n-                                      `short` (instead was `{}`)\", arg));\n-            }\n-        };\n+        let color = session::config::parse_color(&matches);\n+        let (json_rendered, _artifacts) = session::config::parse_json(&matches);\n+        let error_format = session::config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n         let debugging_options = build_debugging_options(matches, error_format);"}, {"sha": "fac1656abca668ecde931adafc576068aae882ab", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -289,6 +289,12 @@ fn opts() -> Vec<RustcOptGroup> {\n                      \"How errors and other messages are produced\",\n                      \"human|json|short\")\n         }),\n+        stable(\"json\", |o| {\n+            o.optopt(\"\",\n+                     \"json\",\n+                     \"Configure the structure of JSON diagnostics\",\n+                     \"CONFIG\")\n+        }),\n         unstable(\"disable-minification\", |o| {\n              o.optflag(\"\",\n                        \"disable-minification\","}, {"sha": "6aab237b94d628a34c8186bfb9ae9d5038cd7a59", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:--emit=metadata --error-format=json -Z emit-artifact-notifications\n+// compile-flags:--emit=metadata --error-format=json --json artifacts\n // build-pass (FIXME(62277): could be check-pass?)\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed."}, {"sha": "efc07a541bee6f752ccbab30e305310875efc2a2", "filename": "src/test/ui/json-and-color.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-color.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-color.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-and-color.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,4 @@\n+// build-fail\n+// compile-flags: --json=artifacts --error-format=json --color never\n+\n+fn main() {}"}, {"sha": "1cda6af090dfac9fb96c4ea9d4896f44904ac240", "filename": "src/test/ui/json-and-color.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-color.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-color.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-and-color.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,2 @@\n+error: cannot specify the `--color` option with `--json`\n+"}, {"sha": "6b369307fa4860eee028a3e7fe287411e96d086e", "filename": "src/test/ui/json-and-error-format.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-error-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-error-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-and-error-format.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,4 @@\n+// build-fail\n+// compile-flags: --json=artifacts --error-format=short\n+\n+fn main() {}"}, {"sha": "80e0221376e706679c11a164d619b0ac1a925b1a", "filename": "src/test/ui/json-and-error-format.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-error-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-and-error-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-and-error-format.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,2 @@\n+error: using `--json` requires also using `--error-format=json`\n+"}, {"sha": "a8c0c819a0bfcf6928159d852fd2fc4f61c49baa", "filename": "src/test/ui/json-invalid.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-invalid.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,4 @@\n+// build-fail\n+// compile-flags: --json=foo --error-format=json\n+\n+fn main() {}"}, {"sha": "18bc76ab7eb049ccc0750b95c3e3b22edc48e4a9", "filename": "src/test/ui/json-invalid.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-invalid.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,2 @@\n+error: unknown `--json` option `foo`\n+"}, {"sha": "c2cb8bcde19d30ecd072bf9554c9d9e80f0515f4", "filename": "src/test/ui/json-multiple.nll.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json-multiple.nll/libjson_multiple.rlib\",\"emit\":\"link\"}"}, {"sha": "a8a2518eb1f0823fb55c7ecc16241480ef8b4a17", "filename": "src/test/ui/json-multiple.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,4 @@\n+// build-pass\n+// compile-flags: --json=diagnostic-short --json artifacts --error-format=json\n+\n+#![crate_type = \"lib\"]"}, {"sha": "7ed345113cb47aadd3b4ab95a765172261d500cf", "filename": "src/test/ui/json-multiple.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json-multiple/libjson_multiple.rlib\",\"emit\":\"link\"}"}, {"sha": "f19a9cd92afc3070d8af35a19079897c88569d25", "filename": "src/test/ui/json-options.nll.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.nll.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json-options.nll/libjson_options.rlib\",\"emit\":\"link\"}"}, {"sha": "c871933f8824880aa29cbc6c4e36dc551556bcab", "filename": "src/test/ui/json-options.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,4 @@\n+// build-pass\n+// compile-flags: --json=diagnostic-short,artifacts --error-format=json\n+\n+#![crate_type = \"lib\"]"}, {"sha": "24977731d17b7d037da01ae068fe3b5035a0ec23", "filename": "src/test/ui/json-options.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/json-options/libjson_options.rlib\",\"emit\":\"link\"}"}, {"sha": "01a311b939cbf1c66efc6937f2488a9e4519ac76", "filename": "src/test/ui/json-short.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-short.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-short.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-short.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,2 @@\n+// build-fail\n+// compile-flags: --json=diagnostic-short --error-format=json"}, {"sha": "dffbdb7e4802d980d7efe50cdd21a288d72278cb", "filename": "src/test/ui/json-short.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-short.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fjson-short.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-short.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -0,0 +1,19 @@\n+{\"message\":\"`main` function not found in crate `json_short`\",\"code\":{\"code\":\"E0601\",\"explanation\":\"\n+No `main` function was found in a binary crate. To fix this error, add a\n+`main` function. For example:\n+\n+```\n+fn main() {\n+    // Your program will start here.\n+    println!(\\\"Hello world!\\\");\n+}\n+```\n+\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"},\"level\":\"error\",\"spans\":[],\"children\":[{\"message\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"error[E0601]: `main` function not found in crate `json_short`\n+\"}\n+{\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n+\"}\n+{\"message\":\"For more information about this error, try `rustc --explain E0601`.\",\"code\":null,\"level\":\"\",\"spans\":[],\"children\":[],\"rendered\":\"For more information about this error, try `rustc --explain E0601`.\n+\"}"}, {"sha": "1828b8c2dc735165977f7dcbc93c042053d12fbb", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -1,6 +1,6 @@\n // ignore-cloudabi\n // ignore-windows\n-// compile-flags: --error-format pretty-json -Zunstable-options --json-rendered=termcolor\n+// compile-flags: --error-format pretty-json --json=diagnostic-rendered-ansi\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "c7c53abcf440663c5baf1caa6d942b2e42ac573f", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -73,8 +73,8 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 484,\n-      \"byte_end\": 488,\n+      \"byte_start\": 471,\n+      \"byte_end\": 475,\n       \"line_start\": 12,\n       \"line_end\": 12,\n       \"column_start\": 12,\n@@ -101,8 +101,8 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -124,8 +124,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -147,8 +147,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -170,8 +170,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -193,8 +193,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -216,8 +216,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -239,8 +239,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -262,8 +262,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -285,8 +285,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -308,8 +308,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -331,8 +331,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,\n@@ -354,8 +354,8 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 461,\n-          \"byte_end\": 461,\n+          \"byte_start\": 448,\n+          \"byte_end\": 448,\n           \"line_start\": 11,\n           \"line_end\": 11,\n           \"column_start\": 1,"}, {"sha": "9179944a6201d62cd56e64e303f9473c62d2bc37", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17312337a9eb16389d11eca8472d1d083aa473bd/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=17312337a9eb16389d11eca8472d1d083aa473bd", "patch": "@@ -1,5 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-// compile-flags: -Zsave-analysis -Zemit-artifact-notifications\n+// compile-flags: -Zsave-analysis --json artifacts\n // compile-flags: --crate-type rlib --error-format=json\n // ignore-pass\n // ^-- needed because otherwise, the .stderr file changes with --pass check"}]}