{"sha": "a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "node_id": "C_kwDOAAsO6NoAKGE3M2UyNTU3YzdiYTI1ZGRiYzg4NmFkOTA4NWEzMDI1ZGI1MWNlYjM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-06T15:44:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-06T17:28:42Z"}, "message": "fix ICE in ConstProp", "tree": {"sha": "f91c0645c3d11333d02af8e68f3892fcca33b1e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91c0645c3d11333d02af8e68f3892fcca33b1e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "html_url": "https://github.com/rust-lang/rust/commit/a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd243e27c5f3e169511cf300b61928ecd31db5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd243e27c5f3e169511cf300b61928ecd31db5c", "html_url": "https://github.com/rust-lang/rust/commit/dfd243e27c5f3e169511cf300b61928ecd31db5c"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "cb5634b77148458bb57648d1a37219ffd8695314", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::abi::Abi as FnAbi;\n \n use super::{\n     AllocId, AllocRange, Allocation, ConstAllocation, Frame, ImmTy, InterpCx, InterpResult,\n@@ -139,7 +139,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce integers and floats not having provenance.\n     fn enforce_number_no_provenance(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n-    /// Whether function calls should be [ABI](Abi)-checked.\n+    /// Whether function calls should be [ABI](FnAbi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         true\n     }\n@@ -170,7 +170,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        abi: Abi,\n+        abi: FnAbi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         destination: &PlaceTy<'tcx, Self::PointerTag>,\n         target: Option<mir::BasicBlock>,\n@@ -182,7 +182,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn call_extra_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         fn_val: Self::ExtraFnVal,\n-        abi: Abi,\n+        abi: FnAbi,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         destination: &PlaceTy<'tcx, Self::PointerTag>,\n         target: Option<mir::BasicBlock>,\n@@ -480,7 +480,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn call_extra_fn(\n         _ecx: &mut InterpCx<$mir, $tcx, Self>,\n         fn_val: !,\n-        _abi: Abi,\n+        _abi: FnAbi,\n         _args: &[OpTy<$tcx>],\n         _destination: &PlaceTy<$tcx, Self::PointerTag>,\n         _target: Option<mir::BasicBlock>,"}, {"sha": "4cc722353e64c0278afda9a83a4ba094052680ed", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "patch": "@@ -22,8 +22,8 @@ use rustc_middle::ty::{\n     self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_span::{def_id::DefId, Span};\n-use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n-use rustc_target::spec::abi::Abi;\n+use rustc_target::abi::{self, HasDataLayout, Size, TargetDataLayout};\n+use rustc_target::spec::abi::Abi as FnAbi;\n use rustc_trait_selection::traits;\n \n use crate::MirPass;\n@@ -199,7 +199,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n-        _abi: Abi,\n+        _abi: FnAbi,\n         _args: &[OpTy<'tcx>],\n         _destination: &PlaceTy<'tcx>,\n         _target: Option<BasicBlock>,\n@@ -654,6 +654,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     (Ok(_), Ok(_)) => return this.ecx.eval_rvalue_into_place(rvalue, place),\n                 };\n \n+                if !matches!(const_arg.layout.abi, abi::Abi::Scalar(..)) {\n+                    // We cannot handle Scalar Pair stuff.\n+                    return this.ecx.eval_rvalue_into_place(rvalue, place);\n+                }\n+\n                 let arg_value = const_arg.to_scalar()?.to_bits(const_arg.layout.size)?;\n                 let dest = this.ecx.eval_place(place)?;\n "}, {"sha": "14c0a1399a00ebd4b17f3d0bdbbbeac26515f076", "filename": "src/test/ui/consts/issue-96169.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73e2557c7ba25ddbc886ad9085a3025db51ceb3/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-96169.rs?ref=a73e2557c7ba25ddbc886ad9085a3025db51ceb3", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// compile-flags: -Zmir-opt-level=4 --emit=mir\n+#![allow(unused)]\n+fn a() -> usize { 0 }\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+}"}]}