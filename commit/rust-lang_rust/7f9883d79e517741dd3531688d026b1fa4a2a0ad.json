{"sha": "7f9883d79e517741dd3531688d026b1fa4a2a0ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTg4M2Q3OWU1MTc3NDFkZDM1MzE2ODhkMDI2YjFmYTRhMmEwYWQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-15T10:34:10Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-15T10:34:10Z"}, "message": "Add unstable VecDeque::rotate_{left|right}", "tree": {"sha": "ee98016fc1e7837cea08b0724c7d29f7eb75bd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee98016fc1e7837cea08b0724c7d29f7eb75bd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9883d79e517741dd3531688d026b1fa4a2a0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9883d79e517741dd3531688d026b1fa4a2a0ad", "html_url": "https://github.com/rust-lang/rust/commit/7f9883d79e517741dd3531688d026b1fa4a2a0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9883d79e517741dd3531688d026b1fa4a2a0ad/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf920fc2707c3f126a2963a686ed800eeea49e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf920fc2707c3f126a2963a686ed800eeea49e6", "html_url": "https://github.com/rust-lang/rust/commit/bcf920fc2707c3f126a2963a686ed800eeea49e6"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "954a1c8becf157719d3cdc175282019fa1a352f3", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7f9883d79e517741dd3531688d026b1fa4a2a0ad/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9883d79e517741dd3531688d026b1fa4a2a0ad/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=7f9883d79e517741dd3531688d026b1fa4a2a0ad", "patch": "@@ -1927,6 +1927,108 @@ impl<T> VecDeque<T> {\n             self.truncate(new_len);\n         }\n     }\n+\n+    /// Rotates the double-ended queue `mid` places to the left.\n+    ///\n+    /// Equivalently,\n+    /// - Rotates item `mid` into the first position.\n+    /// - Pops the first `mid` items and pushes them to the end.\n+    /// - Rotates `len() - mid` places to the right.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If `mid` is greater than `len()`.  Note that `mid == len()`\n+    /// does _not_ panic and is a no-op rotation.\n+    ///\n+    /// # Complexity\n+    ///\n+    /// Takes `O(min(mid, len() - mid))` time and no extra space.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vecdeque_rotate)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf: VecDeque<_> = (0..10).collect();\n+    ///\n+    /// buf.rotate_left(3);\n+    /// assert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n+    ///\n+    /// for i in 1..10 {\n+    ///     assert_eq!(i * 3 % 10, buf[0]);\n+    ///     buf.rotate_left(3);\n+    /// }\n+    /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    /// ```\n+    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    pub fn rotate_left(&mut self, mid: usize) {\n+        assert!(mid <= self.len());\n+        let k = self.len() - mid;\n+        if mid <= k {\n+            unsafe { self.rotate_left_inner(mid) }\n+        } else {\n+            unsafe { self.rotate_right_inner(k) }\n+        }\n+    }\n+\n+    /// Rotates the double-ended queue `k` places to the right.\n+    ///\n+    /// Equivalently,\n+    /// - Rotates the first item into position `k`.\n+    /// - Pops the last `k` items and pushes them to the front.\n+    /// - Rotates `len() - k` places to the left.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If `k` is greater than `len()`.  Note that `k == len()`\n+    /// does _not_ panic and is a no-op rotation.\n+    ///\n+    /// # Complexity\n+    ///\n+    /// Takes `O(min(k, len() - k))` time and no extra space.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vecdeque_rotate)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf: VecDeque<_> = (0..10).collect();\n+    ///\n+    /// buf.rotate_right(3);\n+    /// assert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n+    ///\n+    /// for i in 1..10 {\n+    ///     assert_eq!(0, buf[i * 3 % 10]);\n+    ///     buf.rotate_right(3);\n+    /// }\n+    /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    /// ```\n+    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    pub fn rotate_right(&mut self, k: usize) {\n+        assert!(k <= self.len());\n+        let mid = self.len() - k;\n+        if k <= mid {\n+            unsafe { self.rotate_right_inner(k) }\n+        } else {\n+            unsafe { self.rotate_left_inner(mid) }\n+        }\n+    }\n+\n+    unsafe fn rotate_left_inner(&mut self, mid: usize) {\n+        self.wrap_copy(self.head, self.tail, mid);\n+        self.head = self.wrap_add(self.head, mid);\n+        self.tail = self.wrap_add(self.tail, mid);\n+    }\n+\n+    unsafe fn rotate_right_inner(&mut self, k: usize) {\n+        self.head = self.wrap_sub(self.head, k);\n+        self.tail = self.wrap_sub(self.tail, k);\n+        self.wrap_copy(self.tail, self.head, k);\n+    }\n }\n \n impl<T: Clone> VecDeque<T> {"}]}