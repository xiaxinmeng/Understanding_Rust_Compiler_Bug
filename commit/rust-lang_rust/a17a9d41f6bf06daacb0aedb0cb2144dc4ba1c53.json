{"sha": "a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExN2E5ZDQxZjZiZjA2ZGFhY2IwYWVkYjBjYjIxNDRkYzRiYTFjNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T20:30:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T20:30:46Z"}, "message": "auto merge of #5624 : thestinger/rust/tutorial, r=pcwalton", "tree": {"sha": "6bcaac5473675e1f4d2add3a2db6691d9387872a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcaac5473675e1f4d2add3a2db6691d9387872a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "html_url": "https://github.com/rust-lang/rust/commit/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5e522acd7d3e95efa15315ddb6ad4853cdd2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5e522acd7d3e95efa15315ddb6ad4853cdd2a9", "html_url": "https://github.com/rust-lang/rust/commit/0a5e522acd7d3e95efa15315ddb6ad4853cdd2a9"}, {"sha": "0189ef360092dbebfef5bdfd7a2ebe0c0ccc0f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0189ef360092dbebfef5bdfd7a2ebe0c0ccc0f3c", "html_url": "https://github.com/rust-lang/rust/commit/0189ef360092dbebfef5bdfd7a2ebe0c0ccc0f3c"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "7518e3ef6761453aa4ef01e2214a387d374d7346", "filename": "doc/tutorial.md", "status": "modified", "additions": 73, "deletions": 13, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a17a9d41f6bf06daacb0aedb0cb2144dc4ba1c53", "patch": "@@ -1002,11 +1002,46 @@ refer to that through a pointer.\n \n ## Owned boxes\n \n-An owned box (`~`) is a uniquely owned allocation on the heap. An owned box\n-inherits the mutability and lifetime of the owner as it would if there was no\n-box. The purpose of an owned box is to add a layer of indirection in order to\n-create recursive data structures or cheaply pass around an object larger than a\n-pointer.\n+An owned box (`~`) is a uniquely owned allocation on the heap. It inherits the\n+mutability and lifetime of the owner as it would if there was no box.\n+\n+~~~~\n+let x = 5; // immutable\n+let mut y = 5; // mutable\n+y += 2;\n+\n+let x = ~5; // immutable\n+let mut y = ~5; // mutable\n+*y += 2; // the * operator is needed to access the contained value\n+~~~~\n+\n+The purpose of an owned box is to add a layer of indirection in order to create\n+recursive data structures or cheaply pass around an object larger than a\n+pointer. Since an owned box has a unique owner, it can be used to represent any\n+tree data structure.\n+\n+The following struct won't compile, because the lack of indirection would mean\n+it has an infinite size:\n+\n+~~~~ {.xfail-test}\n+struct Foo {\n+    child: Option<Foo>\n+}\n+~~~~\n+\n+> ***Note:*** The `Option` type is an enum that represents an *optional* value.\n+> It's comparable to a nullable pointer in many other languages, but stores the\n+> contained value unboxed.\n+\n+Adding indirection with an owned pointer allocates the child outside of the\n+struct on the heap, which makes it a finite size and won't result in a\n+compile-time error:\n+\n+~~~~\n+struct Foo {\n+    child: Option<~Foo>\n+}\n+~~~~\n \n ## Managed boxes\n \n@@ -1018,6 +1053,20 @@ mutability. They do own the contained object, and mutability is defined by the\n type of the shared box (`@` or `@mut`). An object containing a managed box is\n not `Owned`, and can't be sent between tasks.\n \n+~~~~\n+let a = @5; // immutable\n+\n+let mut b = @5; // mutable variable, immutable box\n+b = @10;\n+\n+let c = @mut 5; // immutable variable, mutable box\n+*c = 10;\n+\n+let mut d = @mut 5; // mutable variable, mutable box\n+*d += 5;\n+d = @mut 15;\n+~~~~\n+\n # Move semantics\n \n Rust uses a shallow copy for parameter passing, assignment and returning values\n@@ -1035,10 +1084,10 @@ let z = x; // no new memory allocated, x can no longer be used\n # Borrowed pointers\n \n Rust's borrowed pointers are a general purpose reference type. In contrast with\n-owned pointers, where the holder of an owned pointer is the owner of the\n-pointed-to memory, borrowed pointers never imply ownership. A pointer can be\n-borrowed to any object, and the compiler verifies that it cannot outlive the\n-lifetime of the object.\n+owned boxes, where the holder of an owned box is the owner of the pointed-to\n+memory, borrowed pointers never imply ownership. A pointer can be borrowed to\n+any object, and the compiler verifies that it cannot outlive the lifetime of\n+the object.\n \n As an example, consider a simple struct type, `Point`:\n \n@@ -1124,10 +1173,7 @@ For a more in-depth explanation of borrowed pointers, read the\n ## Freezing\n \n Borrowing an immutable pointer to an object freezes it and prevents mutation.\n-`Owned` objects have freezing enforced statically at compile-time. Mutable\n-managed boxes handle freezing dynamically when any of their contents are\n-borrowed, and the task will fail if an attempt to modify them is made while\n-they are frozen.\n+`Owned` objects have freezing enforced statically at compile-time.\n \n ~~~~\n let mut x = 5;\n@@ -1137,6 +1183,20 @@ let mut x = 5;\n // x is now unfrozen again\n ~~~~\n \n+Mutable managed boxes handle freezing dynamically when any of their contents\n+are borrowed, and the task will fail if an attempt to modify them is made while\n+they are frozen:\n+\n+~~~~\n+let x = @mut 5;\n+let y = x;\n+{\n+    let y = &*y; // the managed box is now frozen\n+    // modifying it through x or y will cause a task failure\n+}\n+// the box is now unfrozen again\n+~~~~\n+\n # Dereferencing pointers\n \n Rust uses the unary star operator (`*`) to access the contents of a"}]}