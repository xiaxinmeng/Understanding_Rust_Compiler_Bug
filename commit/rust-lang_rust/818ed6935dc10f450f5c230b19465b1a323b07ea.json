{"sha": "818ed6935dc10f450f5c230b19465b1a323b07ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOGVkNjkzNWRjMTBmNDUwZjVjMjMwYjE5NDY1YjFhMzIzYjA3ZWE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-19T15:39:01Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-19T15:39:01Z"}, "message": "dropck: simplify common patterns", "tree": {"sha": "cd17facc75a2b7a61fe7ccbf6150428b9d971ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd17facc75a2b7a61fe7ccbf6150428b9d971ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/818ed6935dc10f450f5c230b19465b1a323b07ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/818ed6935dc10f450f5c230b19465b1a323b07ea", "html_url": "https://github.com/rust-lang/rust/commit/818ed6935dc10f450f5c230b19465b1a323b07ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/818ed6935dc10f450f5c230b19465b1a323b07ea/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "html_url": "https://github.com/rust-lang/rust/commit/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b993dd6080bb6c92fec4966805a1d38a9e5667a0", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/818ed6935dc10f450f5c230b19465b1a323b07ea/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818ed6935dc10f450f5c230b19465b1a323b07ea/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=818ed6935dc10f450f5c230b19465b1a323b07ea", "patch": "@@ -55,8 +55,8 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         let c_ty = self.infcx.canonicalize_query(&self.param_env.and(ty), &mut orig_values);\n         let span = self.cause.span;\n         debug!(\"c_ty = {:?}\", c_ty);\n-        match &gcx.dropck_outlives(c_ty) {\n-            Ok(result) if result.is_proven() => {\n+        if let Ok(result) = &gcx.dropck_outlives(c_ty) {\n+            if result.is_proven() {\n                 if let Ok(InferOk { value, obligations }) =\n                     self.infcx.instantiate_query_response_and_region_obligations(\n                     self.cause,\n@@ -72,8 +72,6 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n                     };\n                 }\n             }\n-\n-            _ => { /* fallthrough to error-handling code below */ }\n         }\n \n         // Errors and ambiuity in dropck occur in two cases:\n@@ -82,10 +80,11 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         // Either of these should have created an error before.\n         tcx.sess\n             .delay_span_bug(span, \"dtorck encountered internal error\");\n-        return InferOk {\n+\n+        InferOk {\n             value: vec![],\n             obligations: vec![],\n-        };\n+        }\n     }\n }\n \n@@ -102,7 +101,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n         span: Span,\n         ty: Ty<'tcx>,\n     ) {\n-        for overflow_ty in self.overflows.iter().take(1) {\n+        if let Some(overflow_ty) = self.overflows.iter().next() {\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,"}]}