{"sha": "b6f1e3084fccac7bada780f285ea048ec8a56521", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZjFlMzA4NGZjY2FjN2JhZGE3ODBmMjg1ZWEwNDhlYzhhNTY1MjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-03T23:28:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-03T23:28:51Z"}, "message": "librustc: Add missing cases in kind and privacy checking to try to put out the burning tinderbox. rs=rustbot", "tree": {"sha": "e3ee468c9b61a6a3deab14defb5e3516eb9a4b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ee468c9b61a6a3deab14defb5e3516eb9a4b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f1e3084fccac7bada780f285ea048ec8a56521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f1e3084fccac7bada780f285ea048ec8a56521", "html_url": "https://github.com/rust-lang/rust/commit/b6f1e3084fccac7bada780f285ea048ec8a56521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f1e3084fccac7bada780f285ea048ec8a56521/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a55ea73a985a331635fe5a8c505f7f74328c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a55ea73a985a331635fe5a8c505f7f74328c11", "html_url": "https://github.com/rust-lang/rust/commit/83a55ea73a985a331635fe5a8c505f7f74328c11"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "8b1f68a375be4fbbd97ac410dae0fa8d8c3d3b06", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f1e3084fccac7bada780f285ea048ec8a56521/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f1e3084fccac7bada780f285ea048ec8a56521/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=b6f1e3084fccac7bada780f285ea048ec8a56521", "patch": "@@ -239,7 +239,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n     debug!(\"kind::check_expr(%s)\", expr_to_str(e, cx.tcx.sess.intr()));\n     let id_to_use = match e.node {\n         expr_index(*)|expr_assign_op(*)|\n-        expr_unary(*)|expr_binary(*) => e.callee_id,\n+        expr_unary(*)|expr_binary(*)|expr_method_call(*) => e.callee_id,\n         _ => e.id\n     };\n "}, {"sha": "cebf7e9b58c6227a2cd1f934b6e6a51a6ea8d4c5", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b6f1e3084fccac7bada780f285ea048ec8a56521/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f1e3084fccac7bada780f285ea048ec8a56521/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=b6f1e3084fccac7bada780f285ea048ec8a56521", "patch": "@@ -4,14 +4,13 @@\n use /*mod*/ syntax::ast;\n use /*mod*/ syntax::visit;\n use syntax::ast_map;\n-use syntax::ast::{def_variant, expr_field, expr_struct, expr_unary, ident,\n-                  item_class};\n-use syntax::ast::{item_impl, item_trait, item_enum, local_crate, node_id,\n-                  pat_struct};\n-use syntax::ast::{private, provided, required};\n+use syntax::ast::{def_variant, expr_field, expr_method_call, expr_struct};\n+use syntax::ast::{expr_unary, ident, item_class, item_enum, item_impl};\n+use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n+use syntax::ast::{provided, required};\n use syntax::ast_map::{node_item, node_method};\n-use syntax::ast_util::{has_legacy_export_attr, is_local,\n-                       visibility_to_privacy, Private, Public};\n+use syntax::ast_util::{Private, Public, has_legacy_export_attr, is_local};\n+use syntax::ast_util::{visibility_to_privacy};\n use ty::{ty_class, ty_enum};\n use typeck::{method_map, method_origin, method_param, method_self};\n use typeck::{method_static, method_trait};\n@@ -213,6 +212,27 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                         _ => {}\n                     }\n                 }\n+                expr_method_call(base, _, _, _, _) => {\n+                    match ty::get(ty::expr_ty(tcx, base)).sty {\n+                        ty_class(id, _)\n+                        if id.crate != local_crate ||\n+                           !privileged_items.contains(&(id.node)) => {\n+                            match method_map.find(expr.id) {\n+                                None => {\n+                                    tcx.sess.span_bug(expr.span,\n+                                                      ~\"method call not in \\\n+                                                        method map\");\n+                                }\n+                                Some(entry) => {\n+                                    debug!(\"(privacy checking) checking \\\n+                                            impl method\");\n+                                    check_method(expr.span, &entry.origin);\n+                                }\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n                 expr_struct(_, fields, _) => {\n                     match ty::get(ty::expr_ty(tcx, expr)).sty {\n                         ty_class(id, _) => {"}]}