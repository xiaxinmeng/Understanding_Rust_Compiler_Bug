{"sha": "9b726508907320f731129b085f2dcdc5fa97abea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNzI2NTA4OTA3MzIwZjczMTEyOWIwODVmMmRjZGM1ZmE5N2FiZWE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-27T00:29:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-27T00:29:48Z"}, "message": "Rollup merge of #36723 - GuillaumeGomez:e0513, r=jonathandturner\n\nE0513\n\nPart of #35233\n\nr? @jonathandturner", "tree": {"sha": "35610c6a6ad8b0bb96b5e7464a981797bfd74dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35610c6a6ad8b0bb96b5e7464a981797bfd74dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b726508907320f731129b085f2dcdc5fa97abea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b726508907320f731129b085f2dcdc5fa97abea", "html_url": "https://github.com/rust-lang/rust/commit/9b726508907320f731129b085f2dcdc5fa97abea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b726508907320f731129b085f2dcdc5fa97abea/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02cc57867698df86d6193748a53092eae3828790", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cc57867698df86d6193748a53092eae3828790", "html_url": "https://github.com/rust-lang/rust/commit/02cc57867698df86d6193748a53092eae3828790"}, {"sha": "96a0f06b2f4a62f825b91dbf630a4b8bd8f81749", "url": "https://api.github.com/repos/rust-lang/rust/commits/96a0f06b2f4a62f825b91dbf630a4b8bd8f81749", "html_url": "https://github.com/rust-lang/rust/commit/96a0f06b2f4a62f825b91dbf630a4b8bd8f81749"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "fa4b4ace7266d8dc271a9db7b117b09db6443d92", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b726508907320f731129b085f2dcdc5fa97abea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b726508907320f731129b085f2dcdc5fa97abea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b726508907320f731129b085f2dcdc5fa97abea", "patch": "@@ -1525,9 +1525,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match self.locals.borrow().get(&nid) {\n             Some(&t) => t,\n             None => {\n-                span_err!(self.tcx.sess, span, E0513,\n-                          \"no type for local variable {}\",\n-                          nid);\n+                struct_span_err!(self.tcx.sess, span, E0513,\n+                                 \"no type for local variable {}\",\n+                                 self.tcx.map.node_to_string(nid))\n+                    .span_label(span, &\"no type for variable\")\n+                    .emit();\n                 self.tcx.types.err\n             }\n         }"}, {"sha": "0d6b43b59c6ad7b17371a7fefef4dcf92795dd4f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b726508907320f731129b085f2dcdc5fa97abea/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b726508907320f731129b085f2dcdc5fa97abea/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9b726508907320f731129b085f2dcdc5fa97abea", "patch": "@@ -3766,6 +3766,45 @@ extern \"platform-intrinsic\" {\n ```\n \"##,\n \n+E0513: r##\"\n+The type of the variable couldn't be found out.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0513\n+use std::mem;\n+\n+unsafe {\n+    let size = mem::size_of::<u32>();\n+    mem::transmute_copy::<u32, [u8; size]>(&8_8);\n+    // error: no type for local variable\n+}\n+```\n+\n+To fix this error, please use a constant size instead of `size`. To make\n+this error more obvious, you could run:\n+\n+```compile_fail,E0080\n+use std::mem;\n+\n+unsafe {\n+    mem::transmute_copy::<u32, [u8; mem::size_of::<u32>()]>(&8_8);\n+    // error: constant evaluation error\n+}\n+```\n+\n+So now, you can fix your code by setting the size directly:\n+\n+```\n+use std::mem;\n+\n+unsafe {\n+    mem::transmute_copy::<u32, [u8; 4]>(&8_8);\n+    // `u32` is 4 bytes so we replace the `mem::size_of` call with its size\n+}\n+```\n+\"##,\n+\n E0516: r##\"\n The `typeof` keyword is currently reserved but unimplemented.\n Erroneous code example:\n@@ -4064,7 +4103,6 @@ register_diagnostics! {\n     E0399, // trait items need to be implemented because the associated\n            // type `{}` was overridden\n     E0436, // functional record update requires a struct\n-    E0513, // no type for local variable ..\n     E0521, // redundant default implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n     E0562, // `impl Trait` not allowed outside of function"}, {"sha": "726e23265241dac4f6ac35e5c78113466dafffbb", "filename": "src/test/compile-fail/E0513.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b726508907320f731129b085f2dcdc5fa97abea/src%2Ftest%2Fcompile-fail%2FE0513.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b726508907320f731129b085f2dcdc5fa97abea/src%2Ftest%2Fcompile-fail%2FE0513.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0513.rs?ref=9b726508907320f731129b085f2dcdc5fa97abea", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    unsafe {\n+        let size = mem::size_of::<u32>();\n+        mem::transmute_copy::<u32, [u8; size]>(&8_8); //~ ERROR E0513\n+                                                      //~| NOTE no type for variable\n+    }\n+}"}]}