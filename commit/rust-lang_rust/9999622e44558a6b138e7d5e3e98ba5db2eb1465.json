{"sha": "9999622e44558a6b138e7d5e3e98ba5db2eb1465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OTk2MjJlNDQ1NThhNmIxMzhlN2Q1ZTNlOThiYTVkYjJlYjE0NjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-20T19:14:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:53:44Z"}, "message": "Patch up some code that was using irrefutable patterns incorrectly.", "tree": {"sha": "666f5c112c5737516ac2a6fd294be198b8cf4b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666f5c112c5737516ac2a6fd294be198b8cf4b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9999622e44558a6b138e7d5e3e98ba5db2eb1465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9999622e44558a6b138e7d5e3e98ba5db2eb1465", "html_url": "https://github.com/rust-lang/rust/commit/9999622e44558a6b138e7d5e3e98ba5db2eb1465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9999622e44558a6b138e7d5e3e98ba5db2eb1465/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba13482dfabe4d0022f1fc2375b500cce53a05ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba13482dfabe4d0022f1fc2375b500cce53a05ce", "html_url": "https://github.com/rust-lang/rust/commit/ba13482dfabe4d0022f1fc2375b500cce53a05ce"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "b7bec95e6554e861881389f175a1ab21d10f0d69", "filename": "src/libstd/run.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9999622e44558a6b138e7d5e3e98ba5db2eb1465/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9999622e44558a6b138e7d5e3e98ba5db2eb1465/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=9999622e44558a6b138e7d5e3e98ba5db2eb1465", "patch": "@@ -715,10 +715,16 @@ fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n         let mut tmps = ~[];\n         let mut ptrs = ~[];\n \n-        for es.iter().advance |&(k, v)| {\n-            let kv = @fmt!(\"%s=%s\", k, v);\n-            tmps.push(kv);\n-            ptrs.push(str::as_c_str(*kv, |b| b));\n+        for es.iter().advance |pair| {\n+            // Use of match here is just to workaround limitations\n+            // in the stage0 irrefutable pattern impl.\n+            match pair {\n+                &(ref k, ref v) => {\n+                    let kv = @fmt!(\"%s=%s\", *k, *v);\n+                    tmps.push(kv);\n+                    ptrs.push(str::as_c_str(*kv, |b| b));\n+                }\n+            }\n         }\n \n         ptrs.push(ptr::null());\n@@ -1294,9 +1300,9 @@ mod tests {\n         let output = str::from_bytes(prog.finish_with_output().output);\n \n         let r = os::env();\n-        for r.iter().advance |&(k, v)| {\n+        for r.iter().advance |&(ref k, ref v)| {\n             // don't check windows magical empty-named variables\n-            assert!(k.is_empty() || output.contains(fmt!(\"%s=%s\", k, v)));\n+            assert!(k.is_empty() || output.contains(fmt!(\"%s=%s\", *k, *v)));\n         }\n     }\n     #[test]"}, {"sha": "b4e891414f61c78450f9eb4aec21a048b6bc0b56", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9999622e44558a6b138e7d5e3e98ba5db2eb1465/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9999622e44558a6b138e7d5e3e98ba5db2eb1465/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9999622e44558a6b138e7d5e3e98ba5db2eb1465", "patch": "@@ -281,16 +281,16 @@ pub trait VectorVector<T> {\n impl<'self, T:Copy> VectorVector<T> for &'self [~[T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n     pub fn concat_vec(&self) -> ~[T] {\n-        self.flat_map(|&inner| inner)\n+        self.flat_map(|inner| copy *inner)\n     }\n \n     /// Concatenate a vector of vectors, placing a given separator between each.\n     pub fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n-        for self.iter().advance |&inner| {\n+        for self.iter().advance |inner| {\n             if first { first = false; } else { r.push(copy *sep); }\n-            r.push_all(inner);\n+            r.push_all(copy *inner);\n         }\n         r\n     }"}]}