{"sha": "ff12beb8756f028d44f898a91960ed70102a4792", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMTJiZWI4NzU2ZjAyOGQ0NGY4OThhOTE5NjBlZDcwMTAyYTQ3OTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-30T08:45:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-07T08:56:07Z"}, "message": "Revert changes to bootstrap, rustc_driver and fix {core,std}simd", "tree": {"sha": "b1a12ec881a468e12040479d16923c0ae6aba52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a12ec881a468e12040479d16923c0ae6aba52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff12beb8756f028d44f898a91960ed70102a4792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff12beb8756f028d44f898a91960ed70102a4792", "html_url": "https://github.com/rust-lang/rust/commit/ff12beb8756f028d44f898a91960ed70102a4792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff12beb8756f028d44f898a91960ed70102a4792/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163cb572a491cb3eb7f2c792415c93840cb7e9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/163cb572a491cb3eb7f2c792415c93840cb7e9c0", "html_url": "https://github.com/rust-lang/rust/commit/163cb572a491cb3eb7f2c792415c93840cb7e9c0"}], "stats": {"total": 97, "additions": 36, "deletions": 61}, "files": [{"sha": "0578f929224d99a0cbbaf97e64a2f29477dc7b60", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -14,6 +14,10 @@\n # =============================================================================\n [llvm]\n \n+# Indicates whether rustc will support compilation with LLVM\n+# note: rustc does not compile without LLVM at the moment\n+#enabled = true\n+\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n \n@@ -330,8 +334,8 @@\n # This is an array of the codegen backends that will be compiled for the rustc\n # that's being compiled. The default is to only build the LLVM codegen backend,\n # but you can also optionally enable the \"emscripten\" backend for asm.js or\n-# make this an empty array (which will disable LLVM, but that probably won't\n-# get too far in the bootstrap)\n+# make this an empty array (but that probably won't get too far in the\n+# bootstrap)\n #codegen-backends = [\"llvm\"]\n \n # This is the name of the directory in which codegen backends will get installed"}, {"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -107,11 +107,6 @@ fn main() {\n              env::join_paths(&dylib_path).unwrap());\n     let mut maybe_crate = None;\n \n-    // Don't use metadata only backend for snapshot compiler, because it may be broken\n-    if env::var(\"RUSTC_SHOULD_USE_METADATA_ONLY_BACKEND\").is_err() {\n-        cmd.arg(\"--cfg\").arg(\"codegen_backend=\\\"llvm\\\"\");\n-    }\n-\n     // Print backtrace in case of ICE\n     if env::var(\"RUSTC_BACKTRACE_ON_ICE\").is_ok() && env::var(\"RUST_BACKTRACE\").is_err() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");"}, {"sha": "fad0a553802a27e200faad6983ffa18835e29cea", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -747,10 +747,6 @@ impl<'a> Builder<'a> {\n             stage = compiler.stage;\n         }\n \n-        if self.config.rust_codegen_backends.is_empty() {\n-            cargo.env(\"RUSTC_SHOULD_USE_METADATA_ONLY_BACKEND\", \"1\");\n-        }\n-\n         let mut extra_args = env::var(&format!(\"RUSTFLAGS_STAGE_{}\", stage)).unwrap_or_default();\n         if stage != 0 {\n             let s = env::var(\"RUSTFLAGS_STAGE_NOT_0\").unwrap_or_default();\n@@ -897,7 +893,7 @@ impl<'a> Builder<'a> {\n         //\n         // If LLVM support is disabled we need to use the snapshot compiler to compile\n         // build scripts, as the new compiler doesn't support executables.\n-        if mode == Mode::Std || self.config.rust_codegen_backends.is_empty() {\n+        if mode == Mode::Std || !self.config.llvm_enabled {\n             cargo\n                 .env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());"}, {"sha": "298bd58c6cdfe0545fc55271b948d46134e9e6a0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -182,13 +182,11 @@ pub fn std_cargo(builder: &Builder,\n             // missing\n             // We also only build the runtimes when --enable-sanitizers (or its\n             // config.toml equivalent) is used\n-            if !builder.config.rust_codegen_backends.is_empty() {\n-                let llvm_config = builder.ensure(native::Llvm {\n-                    target: builder.config.build,\n-                    emscripten: false,\n-                });\n-                cargo.env(\"LLVM_CONFIG\", llvm_config);\n-            }\n+            let llvm_config = builder.ensure(native::Llvm {\n+                target: builder.config.build,\n+                emscripten: false,\n+            });\n+            cargo.env(\"LLVM_CONFIG\", llvm_config);\n         }\n \n         cargo.arg(\"--features\").arg(features)\n@@ -645,13 +643,14 @@ impl Step for CodegenBackend {\n \n     fn make_run(run: RunConfig) {\n         let backend = run.builder.config.rust_codegen_backends.get(0);\n-        if let Some(backend) = backend.cloned() {\n-            run.builder.ensure(CodegenBackend {\n-                compiler: run.builder.compiler(run.builder.top_stage, run.host),\n-                target: run.target,\n-                backend,\n-            });\n-        }\n+        let backend = backend.cloned().unwrap_or_else(|| {\n+            INTERNER.intern_str(\"llvm\")\n+        });\n+        run.builder.ensure(CodegenBackend {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            target: run.target,\n+            backend,\n+        });\n     }\n \n     fn run(self, builder: &Builder) {"}, {"sha": "b3ed10257bdacf2d3c11256b45f7959df593b646", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -74,6 +74,7 @@ pub struct Config {\n     pub backtrace_on_ice: bool,\n \n     // llvm codegen options\n+    pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n     pub llvm_optimize: bool,\n     pub llvm_release_debuginfo: bool,\n@@ -238,6 +239,7 @@ struct Install {\n #[derive(Deserialize, Default)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Llvm {\n+    enabled: Option<bool>,\n     ccache: Option<StringOrBool>,\n     ninja: Option<bool>,\n     assertions: Option<bool>,\n@@ -339,6 +341,7 @@ impl Config {\n \n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n+        config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;\n         config.use_jemalloc = true;\n@@ -493,6 +496,7 @@ impl Config {\n                 Some(StringOrBool::Bool(false)) | None => {}\n             }\n             set(&mut config.ninja, llvm.ninja);\n+            set(&mut config.llvm_enabled, llvm.enabled);\n             llvm_assertions = llvm.assertions;\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);"}, {"sha": "6254f98165665630550f7c68dbf88be360cb6dab", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -1096,7 +1096,7 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n-        if !builder.config.rust_codegen_backends.is_empty() {\n+        if builder.config.llvm_enabled {\n             let llvm_config = builder.ensure(native::Llvm {\n                 target: builder.config.build,\n                 emscripten: false,\n@@ -1129,7 +1129,7 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if suite == \"run-make-fulldeps\" && builder.config.rust_codegen_backends.is_empty() {\n+        if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n             builder.info(&format!(\n                 \"Ignoring run-make test suite as they generally don't work without LLVM\"\n             ));"}, {"sha": "b3d7b9a91ecfe34e4ffecfbbc222cb11df095369", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -672,7 +672,7 @@ impl<'a> Builder<'a> {\n     }\n \n     fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if !self.config.rust_codegen_backends.is_empty() && !self.config.dry_run {\n+        if self.config.llvm_enabled && !self.config.dry_run {\n             let llvm_config = self.ensure(native::Llvm {\n                 target: self.config.build,\n                 emscripten: false,"}, {"sha": "bbe6ae8619fec5bd27a154fe61afb5794b0a3664", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -241,13 +241,12 @@ macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*)\n #[path = \"../stdsimd/coresimd/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-// allow changes to how stdsimd works in stage0 and don't use whithout LLVM\n-#[cfg(all(not(stage0), codegen_backend=\"llvm\"))]\n+#[cfg(not(stage0))] // allow changes to how stdsimd works in stage0\n mod coresimd;\n \n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-#[cfg(all(not(stage0), codegen_backend=\"llvm\"))]\n+#[cfg(not(stage0))]\n pub use coresimd::simd;\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-#[cfg(all(not(stage0), codegen_backend=\"llvm\"))]\n+#[cfg(not(stage0))]\n pub use coresimd::arch;"}, {"sha": "95c68214ec7ce6e7a62a8c2dc63001d31a93ded2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -1418,18 +1418,6 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.crate_types.contains(&CrateTypeProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n-    /*if nightly_options::is_nightly_build() {\n-        let backend_name = sess.opts\n-            .debugging_opts\n-            .codegen_backend\n-            .as_ref()\n-            .map(|s| s as &str)\n-            .unwrap_or(\"llvm\");\n-        ret.insert((\n-            Symbol::intern(\"codegen_backend\"),\n-            Some(Symbol::intern(backend_name)),\n-        ));\n-    }*/\n     return ret;\n }\n "}, {"sha": "84f7b35d21f33c542ba2d01dd37d44bebb7c2557", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -375,20 +375,10 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<CodegenBackend> {\n     match file {\n         Some(ref s) => return load_backend_from_dylib(s),\n         None => {\n-            if !::rustc::session::config::nightly_options::is_nightly_build() {\n-                let err = format!(\"failed to load default codegen backend for `{}`, \\\n+            let err = format!(\"failed to load default codegen backend for `{}`, \\\n                                no appropriate codegen dylib found in `{}`\",\n                                backend_name, sysroot.display());\n-                early_error(ErrorOutputType::default(), &err);\n-            } else {\n-                let warn = format!(\"no codegen-backend `{}`, \\\n-                               no appropriate dylib in `{}`. \\\n-                               Falling back to metadata_only codegen backend. \\\n-                               **This is suitable for dev purposes only**\",\n-                               backend_name, sysroot.display());\n-                early_warn(ErrorOutputType::default(), &warn);\n-                return rustc_codegen_utils::codegen_backend::MetadataOnlyCodegenBackend::new;\n-            }\n+            early_error(ErrorOutputType::default(), &err);\n         }\n     }\n "}, {"sha": "d73cb1f8349a655ca5414a42445b93360bc31cc8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff12beb8756f028d44f898a91960ed70102a4792/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ff12beb8756f028d44f898a91960ed70102a4792", "patch": "@@ -523,22 +523,22 @@ pub mod rt;\n #[path = \"../stdsimd/stdsimd/mod.rs\"]\n #[allow(missing_debug_implementations, missing_docs, dead_code)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-#[cfg(all(not(stage0), not(test), codegen_backend=\"llvm\"))]\n+#[cfg(all(not(stage0), not(test)))]\n mod stdsimd;\n \n // A \"fake\" module needed by the `stdsimd` module to compile, not actually\n // exported though.\n-#[cfg(all(not(stage0), codegen_backend=\"llvm\"))]\n+#[cfg(not(stage0))]\n mod coresimd {\n     pub use core::arch;\n     pub use core::simd;\n }\n \n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-#[cfg(all(not(stage0), not(test), codegen_backend=\"llvm\"))]\n+#[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::simd;\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-#[cfg(all(not(stage0), not(test), codegen_backend=\"llvm\"))]\n+#[cfg(all(not(stage0), not(test)))]\n pub use stdsimd::arch;\n \n // Include a number of private modules that exist solely to provide"}]}