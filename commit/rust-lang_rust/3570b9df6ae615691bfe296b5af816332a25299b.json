{"sha": "3570b9df6ae615691bfe296b5af816332a25299b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzBiOWRmNmFlNjE1NjkxYmZlMjk2YjVhZjgxNjMzMmEyNTI5OWI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-02-24T00:01:51Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-03-05T20:43:44Z"}, "message": "MAKE IT FAILgit statusgit status", "tree": {"sha": "9c217d6a5ccd2753a24c473ac8fe2f074befd0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c217d6a5ccd2753a24c473ac8fe2f074befd0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3570b9df6ae615691bfe296b5af816332a25299b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3570b9df6ae615691bfe296b5af816332a25299b", "html_url": "https://github.com/rust-lang/rust/commit/3570b9df6ae615691bfe296b5af816332a25299b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3570b9df6ae615691bfe296b5af816332a25299b/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62621839a64352e41f8908021cfe8e7d91f064a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62621839a64352e41f8908021cfe8e7d91f064a", "html_url": "https://github.com/rust-lang/rust/commit/d62621839a64352e41f8908021cfe8e7d91f064a"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "a2d42a00c36d0ba7b16cf1b9b478f763a151ed14", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3570b9df6ae615691bfe296b5af816332a25299b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3570b9df6ae615691bfe296b5af816332a25299b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=3570b9df6ae615691bfe296b5af816332a25299b", "patch": "@@ -10,10 +10,10 @@\n \n //! Check license of third-party deps by inspecting src/vendor\n \n+use std::collections::HashSet;\n use std::fs::File;\n use std::io::Read;\n use std::path::Path;\n-\n use std::process::Command;\n \n use serde_json;\n@@ -56,22 +56,40 @@ static WHITELIST: &'static [(&'static str, &'static str)] = &[];\n #[derive(Deserialize)]\n struct Output {\n     packages: Vec<Package>,\n-    _resolve: String,\n+\n+    // Not used, but needed to not confuse serde :P\n+    #[allow(dead_code)] resolve: Resolve,\n }\n \n #[derive(Deserialize)]\n struct Package {\n-    _id: String,\n     name: String,\n     version: String,\n-    _source: Option<String>,\n-    _manifest_path: String,\n+\n+    // Not used, but needed to not confuse serde :P\n+    #[allow(dead_code)] id: String,\n+    #[allow(dead_code)] source: Option<String>,\n+    #[allow(dead_code)] manifest_path: String,\n+}\n+\n+// Not used, but needed to not confuse serde :P\n+#[allow(dead_code)]\n+#[derive(Deserialize)]\n+struct Resolve {\n+    nodes: Vec<ResolveNode>,\n+}\n+\n+// Not used, but needed to not confuse serde :P\n+#[allow(dead_code)]\n+#[derive(Deserialize)]\n+struct ResolveNode {\n+    id: String,\n+    dependencies: Vec<String>,\n }\n \n /// Checks the dependency at the given path. Changes `bad` to `true` if a check failed.\n ///\n-/// Specifically, this checks that the license is correct and that the dependencies are on the\n-/// whitelist.\n+/// Specifically, this checks that the license is correct.\n pub fn check(path: &Path, bad: &mut bool) {\n     // Check licences\n     let path = path.join(\"vendor\");\n@@ -95,21 +113,35 @@ pub fn check(path: &Path, bad: &mut bool) {\n         *bad = *bad || !check_license(&toml);\n     }\n     assert!(saw_dir, \"no vendored source\");\n+}\n \n+/// Checks the dependency at the given path. Changes `bad` to `true` if a check failed.\n+///\n+/// Specifically, this checks that the dependencies are on the whitelist.\n+pub fn check_whitelist(path: &Path, bad: &mut bool) {\n     // Check dependencies\n-    let deps = get_deps(&path);\n-    *bad = *bad\n-        || deps.iter().any(\n-            |&Package {\n-                 ref name,\n-                 ref version,\n-                 ..\n-             }| {\n-                WHITELIST\n-                    .iter()\n-                    .all(|&(wname, wversion)| name != wname || version != wversion)\n-            },\n-        );\n+    let deps: HashSet<_> = get_deps(&path)\n+        .into_iter()\n+        .map(|Package { name, version, .. }| (name, version))\n+        .collect();\n+    let whitelist: HashSet<(String, String)> = WHITELIST\n+        .iter()\n+        .map(|&(n, v)| (n.to_owned(), v.to_owned()))\n+        .collect();\n+\n+    // Dependencies not in the whitelist\n+    let mut unapproved: Vec<_> = deps.difference(&whitelist).collect();\n+\n+    // For ease of reading\n+    unapproved.sort();\n+\n+    if unapproved.len() > 0 {\n+        println!(\"Dependencies not on the whitelist:\");\n+        for dep in unapproved {\n+            println!(\"* {} {}\", dep.0, dep.1); // name version\n+        }\n+        *bad = true;\n+    }\n }\n \n fn check_license(path: &Path) -> bool {"}, {"sha": "f64536e2f59ed7d1397aaa2c2c3d4244e83febfd", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3570b9df6ae615691bfe296b5af816332a25299b/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3570b9df6ae615691bfe296b5af816332a25299b/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=3570b9df6ae615691bfe296b5af816332a25299b", "patch": "@@ -41,6 +41,7 @@ fn main() {\n     if !args.iter().any(|s| *s == \"--no-vendor\") {\n         deps::check(&path, &mut bad);\n     }\n+    deps::check_whitelist(&path, &mut bad);\n \n     if bad {\n         eprintln!(\"some tidy checks failed\");"}]}