{"sha": "06f1c8f5a10f0114cbd94111312ea58d59570efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjFjOGY1YTEwZjAxMTRjYmQ5NDExMTMxMmVhNThkNTk1NzBlZmM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-01-21T08:53:24Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-01-21T08:53:24Z"}, "message": "Add assist: add lifetime to type #7200\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "b4b967dc4a9361d6c6be070edd971d9ea6f13438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b967dc4a9361d6c6be070edd971d9ea6f13438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f1c8f5a10f0114cbd94111312ea58d59570efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f1c8f5a10f0114cbd94111312ea58d59570efc", "html_url": "https://github.com/rust-lang/rust/commit/06f1c8f5a10f0114cbd94111312ea58d59570efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f1c8f5a10f0114cbd94111312ea58d59570efc/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d9944c17d1477fa78cb0683fe60a8445458586", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d9944c17d1477fa78cb0683fe60a8445458586", "html_url": "https://github.com/rust-lang/rust/commit/35d9944c17d1477fa78cb0683fe60a8445458586"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "c1603e9722a33fdcf8bbb65c453972b3db0eab80", "filename": "crates/assists/src/handlers/add_lifetime_to_type.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/06f1c8f5a10f0114cbd94111312ea58d59570efc/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f1c8f5a10f0114cbd94111312ea58d59570efc/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs?ref=06f1c8f5a10f0114cbd94111312ea58d59570efc", "patch": "@@ -8,8 +8,8 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Adds a new lifetime to a struct, enum or union.\n //\n // ```\n-// struct Point$0 {\n-//     x: &u32,\n+// struct Point {\n+//     x: &$0u32,\n //     y: u32,\n // }\n // ```\n@@ -21,6 +21,11 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let ref_type_focused = ctx.find_node_at_offset::<ast::RefType>()?;\n+    if ref_type_focused.lifetime().is_some() {\n+        return None;\n+    }\n+\n     let node = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let has_lifetime = node\n         .generic_param_list()\n@@ -148,13 +153,13 @@ mod tests {\n     fn add_lifetime_to_struct() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo$0 { a: &i32 }\",\n+            \"struct Foo { a: &$0i32 }\",\n             \"struct Foo<'a> { a: &'a i32 }\",\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo$0 { a: &i32, b: &usize }\",\n+            \"struct Foo { a: &$0i32, b: &usize }\",\n             \"struct Foo<'a> { a: &'a i32, b: &'a usize }\",\n         );\n \n@@ -166,58 +171,58 @@ mod tests {\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo<T>$0 { a: &T, b: usize }\",\n+            \"struct Foo<T> { a: &$0T, b: usize }\",\n             \"struct Foo<'a, T> { a: &'a T, b: usize }\",\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a>$0 { a: &'a i32 }\");\n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo$0 { a: &'a i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a> { a: &$0'a i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo { a: &'a$0 i32 }\");\n     }\n \n     #[test]\n     fn add_lifetime_to_enum() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo$0 { Bar { a: i32 }, Other, Tuple(u32, &u32)}\",\n+            \"enum Foo { Bar { a: i32 }, Other, Tuple(u32, &$0u32)}\",\n             \"enum Foo<'a> { Bar { a: i32 }, Other, Tuple(u32, &'a u32)}\",\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo$0 { Bar { a: &i32 }}\",\n+            \"enum Foo { Bar { a: &$0i32 }}\",\n             \"enum Foo<'a> { Bar { a: &'a i32 }}\",\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo<T>$0 { Bar { a: &i32, b: &T }}\",\n+            \"enum Foo<T> { Bar { a: &$0i32, b: &T }}\",\n             \"enum Foo<'a, T> { Bar { a: &'a i32, b: &'a T }}\",\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo<'a>$0 { Bar { a: &'a i32 }}\");\n-        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo$0 { Bar, Misc }\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo<'a> { Bar { a: &$0'a i32 }}\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo { Bar, $0Misc }\");\n     }\n \n     #[test]\n     fn add_lifetime_to_union() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo$0 { a: &i32 }\",\n+            \"union Foo { a: &$0i32 }\",\n             \"union Foo<'a> { a: &'a i32 }\",\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo$0 { a: &i32, b: &usize }\",\n+            \"union Foo { a: &$0i32, b: &usize }\",\n             \"union Foo<'a> { a: &'a i32, b: &'a usize }\",\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo<T>$0 { a: &T, b: usize }\",\n+            \"union Foo<T> { a: &$0T, b: usize }\",\n             \"union Foo<'a, T> { a: &'a T, b: usize }\",\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a>$0 { a: &'a i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a> { a: &'a $0i32 }\");\n     }\n }"}, {"sha": "9aa807f10a8f1ff2396488fa409667ef0b4c08b6", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f1c8f5a10f0114cbd94111312ea58d59570efc/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f1c8f5a10f0114cbd94111312ea58d59570efc/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=06f1c8f5a10f0114cbd94111312ea58d59570efc", "patch": "@@ -108,8 +108,8 @@ fn doctest_add_lifetime_to_type() {\n     check_doc_test(\n         \"add_lifetime_to_type\",\n         r#####\"\n-struct Point$0 {\n-    x: &u32,\n+struct Point {\n+    x: &$0u32,\n     y: u32,\n }\n \"#####,"}]}