{"sha": "b043947301e9c386c9131d7008ee90a315f48545", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDM5NDczMDFlOWMzODZjOTEzMWQ3MDA4ZWU5MGEzMTVmNDg1NDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T15:19:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T15:19:51Z"}, "message": "Simplify", "tree": {"sha": "55bbba22ce35c35df505aa5f1d7586b87e7cc3a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55bbba22ce35c35df505aa5f1d7586b87e7cc3a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b043947301e9c386c9131d7008ee90a315f48545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b043947301e9c386c9131d7008ee90a315f48545", "html_url": "https://github.com/rust-lang/rust/commit/b043947301e9c386c9131d7008ee90a315f48545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b043947301e9c386c9131d7008ee90a315f48545/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d549f6164c89bed66432ab5e5ea6e38cc8b4da6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d549f6164c89bed66432ab5e5ea6e38cc8b4da6b", "html_url": "https://github.com/rust-lang/rust/commit/d549f6164c89bed66432ab5e5ea6e38cc8b4da6b"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "47e9d0c215808198c221c293b1adea0902bc2dbc", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b043947301e9c386c9131d7008ee90a315f48545/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043947301e9c386c9131d7008ee90a315f48545/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=b043947301e9c386c9131d7008ee90a315f48545", "patch": "@@ -242,11 +242,11 @@ pub(crate) struct AstNodeSrc {\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Field {\n     Token(String),\n-    Node { name: String, ty: String, valence: Valence },\n+    Node { name: String, ty: String, cardinality: Cardinality },\n }\n \n #[derive(Debug, Eq, PartialEq)]\n-pub(crate) enum Valence {\n+pub(crate) enum Cardinality {\n     Optional,\n     Many,\n }"}, {"sha": "84ddda5cb72712e8ad013ca8e1c459a78ed16d17", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b043947301e9c386c9131d7008ee90a315f48545/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043947301e9c386c9131d7008ee90a315f48545/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=b043947301e9c386c9131d7008ee90a315f48545", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use ungrammar::{Grammar, Rule};\n \n use crate::{\n-    ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Field, KindsSrc, Valence, KINDS_SRC},\n+    ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Cardinality, Field, KindsSrc, KINDS_SRC},\n     codegen::{self, update, Mode},\n     project_root, Result,\n };\n@@ -431,7 +431,7 @@ fn pluralize(s: &str) -> String {\n \n impl Field {\n     fn is_many(&self) -> bool {\n-        matches!(self, Field::Node { valence: Valence::Many, .. })\n+        matches!(self, Field::Node { cardinality: Cardinality::Many, .. })\n     }\n     fn token_kind(&self) -> Option<proc_macro2::TokenStream> {\n         match self {\n@@ -509,7 +509,7 @@ fn lower(grammar: &Grammar) -> AstSrc {\n             }\n             None => {\n                 let mut fields = Vec::new();\n-                lower_rule(&mut fields, grammar, rule);\n+                lower_rule(&mut fields, grammar, None, rule);\n                 res.nodes.push(AstNodeSrc { doc: Vec::new(), name, traits: Vec::new(), fields });\n             }\n         }\n@@ -537,19 +537,20 @@ fn lower_enum(grammar: &Grammar, rule: &Rule) -> Option<Vec<String>> {\n     Some(variants)\n }\n \n-fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n-    if lower_comma_list(acc, grammar, rule) {\n+fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, rule: &Rule) {\n+    if lower_comma_list(acc, grammar, label, rule) {\n         return;\n     }\n \n     match rule {\n         Rule::Node(node) => {\n             let ty = grammar[*node].name.clone();\n-            let name = to_lower_snake_case(&ty);\n-            let field = Field::Node { name, ty, valence: Valence::Optional };\n+            let name = label.cloned().unwrap_or_else(|| to_lower_snake_case(&ty));\n+            let field = Field::Node { name, ty, cardinality: Cardinality::Optional };\n             acc.push(field);\n         }\n         Rule::Token(token) => {\n+            assert!(label.is_none());\n             let mut name = grammar[*token].name.clone();\n             if name != \"int_number\" && name != \"string\" {\n                 if \"[]{}()\".contains(&name) {\n@@ -562,44 +563,33 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n         Rule::Rep(inner) => {\n             if let Rule::Node(node) = &**inner {\n                 let ty = grammar[*node].name.clone();\n-                let name = pluralize(&to_lower_snake_case(&ty));\n-                let field = Field::Node { name, ty, valence: Valence::Many };\n+                let name = label.cloned().unwrap_or_else(|| pluralize(&to_lower_snake_case(&ty)));\n+                let field = Field::Node { name, ty, cardinality: Cardinality::Many };\n                 acc.push(field);\n                 return;\n             }\n             todo!(\"{:?}\", rule)\n         }\n-        Rule::Labeled { label, rule } => {\n-            let node = match &**rule {\n-                Rule::Rep(inner) | Rule::Opt(inner) => match &**inner {\n-                    Rule::Node(node) => node,\n-                    _ => todo!(\"{:?}\", rule),\n-                },\n-                Rule::Node(node) => node,\n-                _ => todo!(\"{:?}\", rule),\n-            };\n-            let ty = grammar[*node].name.clone();\n-            let field = Field::Node {\n-                name: label.clone(),\n-                ty,\n-                valence: match &**rule {\n-                    Rule::Rep(_) => Valence::Many,\n-                    _ => Valence::Optional,\n-                },\n-            };\n-            acc.push(field);\n+        Rule::Labeled { label: l, rule } => {\n+            assert!(label.is_none());\n+            lower_rule(acc, grammar, Some(l), rule);\n         }\n         Rule::Seq(rules) | Rule::Alt(rules) => {\n             for rule in rules {\n-                lower_rule(acc, grammar, rule)\n+                lower_rule(acc, grammar, label, rule)\n             }\n         }\n-        Rule::Opt(rule) => lower_rule(acc, grammar, rule),\n+        Rule::Opt(rule) => lower_rule(acc, grammar, label, rule),\n     }\n }\n \n // (T (',' T)* ','?)\n-fn lower_comma_list(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) -> bool {\n+fn lower_comma_list(\n+    acc: &mut Vec<Field>,\n+    grammar: &Grammar,\n+    label: Option<&String>,\n+    rule: &Rule,\n+) -> bool {\n     let rule = match rule {\n         Rule::Seq(it) => it,\n         _ => return false,\n@@ -619,8 +609,8 @@ fn lower_comma_list(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) -> boo\n         _ => return false,\n     }\n     let ty = grammar[*node].name.clone();\n-    let name = pluralize(&to_lower_snake_case(&ty));\n-    let field = Field::Node { name, ty, valence: Valence::Many };\n+    let name = label.cloned().unwrap_or_else(|| pluralize(&to_lower_snake_case(&ty)));\n+    let field = Field::Node { name, ty, cardinality: Cardinality::Many };\n     acc.push(field);\n     true\n }\n@@ -656,7 +646,7 @@ fn extract_enums(ast: &mut AstSrc) {\n                 node.remove_field(to_remove);\n                 let ty = enm.name.clone();\n                 let name = to_lower_snake_case(&ty);\n-                node.fields.push(Field::Node { name, ty, valence: Valence::Optional });\n+                node.fields.push(Field::Node { name, ty, cardinality: Cardinality::Optional });\n             }\n         }\n     }"}]}