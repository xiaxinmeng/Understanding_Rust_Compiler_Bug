{"sha": "b4b536d34d8d2371a4be95a2b294bbf0088807b7", "node_id": "C_kwDOAAsO6NoAKGI0YjUzNmQzNGQ4ZDIzNzFhNGJlOTVhMmIyOTRiYmYwMDg4ODA3Yjc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-18T10:48:46Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-19T15:33:09Z"}, "message": "Preserve the path of the target spec json file for usage by rustdoc", "tree": {"sha": "d3623c8c1c1d12bbe7ed6e8ad94420dd994c35a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3623c8c1c1d12bbe7ed6e8ad94420dd994c35a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b536d34d8d2371a4be95a2b294bbf0088807b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b536d34d8d2371a4be95a2b294bbf0088807b7", "html_url": "https://github.com/rust-lang/rust/commit/b4b536d34d8d2371a4be95a2b294bbf0088807b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b536d34d8d2371a4be95a2b294bbf0088807b7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072b7db56161ee4c7a4411d8398c90512c153e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/072b7db56161ee4c7a4411d8398c90512c153e16", "html_url": "https://github.com/rust-lang/rust/commit/072b7db56161ee4c7a4411d8398c90512c153e16"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "fd0c3f36e7299fbd7072f709cf5325e8e5dd57c7", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 76, "deletions": 8, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b4b536d34d8d2371a4be95a2b294bbf0088807b7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b536d34d8d2371a4be95a2b294bbf0088807b7/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b4b536d34d8d2371a4be95a2b294bbf0088807b7", "patch": "@@ -39,11 +39,13 @@ use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::symbol::{sym, Symbol};\n use serde_json::Value;\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n use std::convert::TryFrom;\n+use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n@@ -2248,7 +2250,7 @@ impl Target {\n \n                 Err(format!(\"Could not find specification for target {:?}\", target_triple))\n             }\n-            TargetTriple::TargetJson { triple: _, ref contents } => {\n+            TargetTriple::TargetJson { ref contents, .. } => {\n                 let obj = serde_json::from_str(contents).map_err(|e| e.to_string())?;\n                 Target::from_json(obj)\n             }\n@@ -2419,10 +2421,77 @@ impl ToJson for Target {\n }\n \n /// Either a target triple string or a path to a JSON file.\n-#[derive(PartialEq, Clone, Debug, Hash, Encodable, Decodable)]\n+#[derive(Clone, Debug)]\n pub enum TargetTriple {\n     TargetTriple(String),\n-    TargetJson { triple: String, contents: String },\n+    TargetJson {\n+        /// Warning: This field may only be used by rustdoc. Using it anywhere else will lead to\n+        /// inconsistencies as it is discarded during serialization.\n+        path_for_rustdoc: PathBuf,\n+        triple: String,\n+        contents: String,\n+    },\n+}\n+\n+// Use a manual implementation to ignore the path field\n+impl PartialEq for TargetTriple {\n+    fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::TargetTriple(l0), Self::TargetTriple(r0)) => l0 == r0,\n+            (\n+                Self::TargetJson { path_for_rustdoc: _, triple: l_triple, contents: l_contents },\n+                Self::TargetJson { path_for_rustdoc: _, triple: r_triple, contents: r_contents },\n+            ) => l_triple == r_triple && l_contents == r_contents,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+// Use a manual implementation to ignore the path field\n+impl Hash for TargetTriple {\n+    fn hash<H: Hasher>(&self, state: &mut H) -> () {\n+        match self {\n+            TargetTriple::TargetTriple(triple) => {\n+                0u8.hash(state);\n+                triple.hash(state)\n+            }\n+            TargetTriple::TargetJson { path_for_rustdoc: _, triple, contents } => {\n+                1u8.hash(state);\n+                triple.hash(state);\n+                contents.hash(state)\n+            }\n+        }\n+    }\n+}\n+\n+// Use a manual implementation to prevent encoding the target json file path in the crate metadata\n+impl<S: Encoder> Encodable<S> for TargetTriple {\n+    fn encode(&self, s: &mut S) {\n+        match self {\n+            TargetTriple::TargetTriple(triple) => s.emit_enum_variant(0, |s| s.emit_str(triple)),\n+            TargetTriple::TargetJson { path_for_rustdoc: _, triple, contents } => s\n+                .emit_enum_variant(1, |s| {\n+                    s.emit_str(triple);\n+                    s.emit_str(contents)\n+                }),\n+        }\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for TargetTriple {\n+    fn decode(d: &mut D) -> Self {\n+        match d.read_usize() {\n+            0 => TargetTriple::TargetTriple(d.read_str().to_owned()),\n+            1 => TargetTriple::TargetJson {\n+                path_for_rustdoc: PathBuf::new(),\n+                triple: d.read_str().to_owned(),\n+                contents: d.read_str().to_owned(),\n+            },\n+            _ => {\n+                panic!(\"invalid enum variant tag while decoding `TargetTriple`, expected 0..2\");\n+            }\n+        }\n+    }\n }\n \n impl TargetTriple {\n@@ -2437,7 +2506,7 @@ impl TargetTriple {\n         let contents = std::fs::read_to_string(&canonicalized_path).map_err(|err| {\n             io::Error::new(\n                 io::ErrorKind::InvalidInput,\n-                format!(\"Target path {:?} is not a valid file: {}\", canonicalized_path, err),\n+                format!(\"target path {:?} is not a valid file: {}\", canonicalized_path, err),\n             )\n         })?;\n         let triple = canonicalized_path\n@@ -2446,7 +2515,7 @@ impl TargetTriple {\n             .to_str()\n             .expect(\"target path must be valid unicode\")\n             .to_owned();\n-        Ok(TargetTriple::TargetJson { triple, contents })\n+        Ok(TargetTriple::TargetJson { path_for_rustdoc: canonicalized_path, triple, contents })\n     }\n \n     /// Returns a string triple for this target.\n@@ -2455,7 +2524,7 @@ impl TargetTriple {\n     pub fn triple(&self) -> &str {\n         match *self {\n             TargetTriple::TargetTriple(ref triple)\n-            | TargetTriple::TargetJson { ref triple, contents: _ } => triple,\n+            | TargetTriple::TargetJson { ref triple, .. } => triple,\n         }\n     }\n \n@@ -2465,11 +2534,10 @@ impl TargetTriple {\n     /// by `triple()`.\n     pub fn debug_triple(&self) -> String {\n         use std::collections::hash_map::DefaultHasher;\n-        use std::hash::{Hash, Hasher};\n \n         match self {\n             TargetTriple::TargetTriple(triple) => triple.to_owned(),\n-            TargetTriple::TargetJson { triple, contents: content } => {\n+            TargetTriple::TargetJson { path_for_rustdoc: _, triple, contents: content } => {\n                 let mut hasher = DefaultHasher::new();\n                 content.hash(&mut hasher);\n                 let hash = hasher.finish();"}, {"sha": "ab72f4a3f502cf6991f2bac390341bbe99ec3446", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4b536d34d8d2371a4be95a2b294bbf0088807b7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b536d34d8d2371a4be95a2b294bbf0088807b7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b4b536d34d8d2371a4be95a2b294bbf0088807b7", "patch": "@@ -365,8 +365,8 @@ fn run_test(\n     }\n     compiler.arg(\"--target\").arg(match target {\n         TargetTriple::TargetTriple(s) => s,\n-        TargetTriple::TargetPath(path) => {\n-            path.to_str().expect(\"target path must be valid unicode\").to_string()\n+        TargetTriple::TargetJson { path_for_rustdoc, .. } => {\n+            path_for_rustdoc.to_str().expect(\"target path must be valid unicode\").to_string()\n         }\n     });\n     if let ErrorOutputType::HumanReadable(kind) = rustdoc_options.error_format {"}]}