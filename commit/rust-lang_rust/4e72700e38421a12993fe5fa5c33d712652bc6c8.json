{"sha": "4e72700e38421a12993fe5fa5c33d712652bc6c8", "node_id": "C_kwDOAAsO6NoAKDRlNzI3MDBlMzg0MjFhMTI5OTNmZTVmYTVjMzNkNzEyNjUyYmM2Yzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-27T12:00:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-27T12:00:04Z"}, "message": "Merge #11573\n\n11573: refactorings and FIXME fixes in text edit r=lnicola a=HansAuger\n\nThis is mainly me learning some rust, and only anecdotally about addressing some `fixme`s. Feel free to nope :)\r\n\r\nThere is a follow up PR in the pipeline which tackles the other two `fixme`s but it's a bit more invasive. So I wanted to get this out of the way\n\nCo-authored-by: Moritz Vetter <mv@3yourmind.com>", "tree": {"sha": "13cd88808f8a574f04775e738f451024a13d695f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13cd88808f8a574f04775e738f451024a13d695f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e72700e38421a12993fe5fa5c33d712652bc6c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiG2fECRBK7hj4Ov3rIwAAslgIAH+REEJc3htsxCB4qhKnvUWf\nesz5k167r8RvP1y3xoRQaLQ4jRoOz8e9IUwhJJrZGjNhD85trm0wNUe49T6L9rzB\naFEQ38N2yQvTK5wlpQKUydQLXtoM7hSMnr+PfgJIZke2cFhfvGTDKPK8+g7XcsOI\nSn483PXj1TsHvGHb9NeQJ9zS69zLFqtv/HJ/3upr6H7YvkTPc2y3hoBqg2Jg9NVF\nv9vb6aW5j2sorGycl3jPgBoAD06HdroTLuYZ/u+1d39qHslJcZWRa5wL7V2jKOxU\nm0oweHAd6oh+sUwqlVjwQonZhKB5PNBGzbuPvz3Dk40O34wudCGx6DXmelVMQgM=\n=bikI\n-----END PGP SIGNATURE-----\n", "payload": "tree 13cd88808f8a574f04775e738f451024a13d695f\nparent a53915c10d4c6da768602f70d6ec23cde608dd7d\nparent ff59147d5377d3ab06cb0d675725da10534d94e9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645963204 +0000\ncommitter GitHub <noreply@github.com> 1645963204 +0000\n\nMerge #11573\n\n11573: refactorings and FIXME fixes in text edit r=lnicola a=HansAuger\n\nThis is mainly me learning some rust, and only anecdotally about addressing some `fixme`s. Feel free to nope :)\r\n\r\nThere is a follow up PR in the pipeline which tackles the other two `fixme`s but it's a bit more invasive. So I wanted to get this out of the way\n\nCo-authored-by: Moritz Vetter <mv@3yourmind.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e72700e38421a12993fe5fa5c33d712652bc6c8", "html_url": "https://github.com/rust-lang/rust/commit/4e72700e38421a12993fe5fa5c33d712652bc6c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e72700e38421a12993fe5fa5c33d712652bc6c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53915c10d4c6da768602f70d6ec23cde608dd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53915c10d4c6da768602f70d6ec23cde608dd7d", "html_url": "https://github.com/rust-lang/rust/commit/a53915c10d4c6da768602f70d6ec23cde608dd7d"}, {"sha": "ff59147d5377d3ab06cb0d675725da10534d94e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff59147d5377d3ab06cb0d675725da10534d94e9", "html_url": "https://github.com/rust-lang/rust/commit/ff59147d5377d3ab06cb0d675725da10534d94e9"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "19c96d34c5753d7110790225380aab8299c86db0", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4e72700e38421a12993fe5fa5c33d712652bc6c8/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e72700e38421a12993fe5fa5c33d712652bc6c8/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=4e72700e38421a12993fe5fa5c33d712652bc6c8", "patch": "@@ -90,28 +90,22 @@ impl TextEdit {\n             _ => (),\n         }\n \n-        let mut total_len = TextSize::of(&*text);\n+        let text_size = TextSize::of(&*text);\n+        let mut total_len = text_size.clone();\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n-            total_len -= indel.delete.end() - indel.delete.start();\n+            total_len -= indel.delete.len();\n         }\n-        let mut buf = String::with_capacity(total_len.into());\n-        let mut prev = 0;\n-        for indel in &self.indels {\n-            let start: usize = indel.delete.start().into();\n-            let end: usize = indel.delete.end().into();\n-            if start > prev {\n-                buf.push_str(&text[prev..start]);\n-            }\n-            buf.push_str(&indel.insert);\n-            prev = end;\n+\n+        if let Some(additional) = total_len.checked_sub(text_size.into()) {\n+            text.reserve(additional.into());\n+        }\n+\n+        for indel in self.indels.iter().rev() {\n+            indel.apply(text);\n         }\n-        buf.push_str(&text[prev..text.len()]);\n-        assert_eq!(TextSize::of(&buf), total_len);\n \n-        // FIXME: figure out a way to mutate the text in-place or reuse the\n-        // memory in some other way\n-        *text = buf;\n+        assert_eq!(TextSize::of(&*text), total_len);\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n@@ -203,3 +197,45 @@ fn check_disjoint_and_sort(indels: &mut [impl std::borrow::Borrow<Indel>]) -> bo\n         l.delete.end() <= r.delete.start() || l == r\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{TextEdit, TextEditBuilder, TextRange};\n+\n+    fn range(start: u32, end: u32) -> TextRange {\n+        TextRange::new(start.into(), end.into())\n+    }\n+\n+    #[test]\n+    fn test_apply() {\n+        let mut text = \"_11h1_2222_xx3333_4444_6666\".to_string();\n+        let mut builder = TextEditBuilder::default();\n+        builder.replace(range(3, 4), \"1\".to_string());\n+        builder.delete(range(11, 13));\n+        builder.insert(22.into(), \"_5555\".to_string());\n+\n+        let text_edit = builder.finish();\n+        text_edit.apply(&mut text);\n+\n+        assert_eq!(text, \"_1111_2222_3333_4444_5555_6666\")\n+    }\n+\n+    #[test]\n+    fn test_union() {\n+        let mut edit1 = TextEdit::delete(range(7, 11));\n+        let mut builder = TextEditBuilder::default();\n+        builder.delete(range(1, 5));\n+        builder.delete(range(13, 17));\n+\n+        let edit2 = builder.finish();\n+        assert!(edit1.union(edit2).is_ok());\n+        assert_eq!(edit1.indels.len(), 3);\n+    }\n+\n+    #[test]\n+    fn test_union_panics() {\n+        let mut edit1 = TextEdit::delete(range(7, 11));\n+        let edit2 = TextEdit::delete(range(9, 13));\n+        assert!(edit1.union(edit2).is_err());\n+    }\n+}"}]}