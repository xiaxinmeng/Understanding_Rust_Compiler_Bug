{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "node_id": "C_kwDOAAsO6NoAKDBiNDJkZWFjY2MyY2JlMTdhNjgwNjdhYTVmZGI3NjEwNDM2OWUxZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T15:01:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T15:01:42Z"}, "message": "Auto merge of #85157 - the8472:drain-drop-in-place, r=Mark-Simulacrum\n\nreplace vec::Drain drop loops with drop_in_place\n\nThe `Drain::drop` implementation came up in https://github.com/rust-lang/rust/pull/82185#issuecomment-789584796 as potentially interfering with other optimization work due its widespread use somewhere in `println!`\n\n`@rustbot` label T-libs-impl", "tree": {"sha": "3100221fc6d0e1931cfaeec889597f880178e426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3100221fc6d0e1931cfaeec889597f880178e426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "html_url": "https://github.com/rust-lang/rust/commit/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765"}, {"sha": "2d8a11bdbb2623a4e2983870006cbd00eb210ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8a11bdbb2623a4e2983870006cbd00eb210ffb", "html_url": "https://github.com/rust-lang/rust/commit/2d8a11bdbb2623a4e2983870006cbd00eb210ffb"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "089cd4db64c1d597e28f6ff14f0ba2ffe47acdfc", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0b42deaccc2cbe17a68067aa5fdb76104369e1fd/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b42deaccc2cbe17a68067aa5fdb76104369e1fd/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "patch": "@@ -1,7 +1,7 @@\n use crate::alloc::{Allocator, Global};\n use core::fmt;\n use core::iter::{FusedIterator, TrustedLen};\n-use core::mem::{self};\n+use core::mem;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n \n@@ -104,16 +104,11 @@ impl<T, A: Allocator> DoubleEndedIterator for Drain<'_, T, A> {\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n     fn drop(&mut self) {\n-        /// Continues dropping the remaining elements in the `Drain`, then moves back the\n-        /// un-`Drain`ed elements to restore the original `Vec`.\n+        /// Moves back the un-`Drain`ed elements to restore the original `Vec`.\n         struct DropGuard<'r, 'a, T, A: Allocator>(&'r mut Drain<'a, T, A>);\n \n         impl<'r, 'a, T, A: Allocator> Drop for DropGuard<'r, 'a, T, A> {\n             fn drop(&mut self) {\n-                // Continue the same loop we have below. If the loop already finished, this does\n-                // nothing.\n-                self.0.for_each(drop);\n-\n                 if self.0.tail_len > 0 {\n                     unsafe {\n                         let source_vec = self.0.vec.as_mut();\n@@ -131,15 +126,45 @@ impl<T, A: Allocator> Drop for Drain<'_, T, A> {\n             }\n         }\n \n-        // exhaust self first\n-        while let Some(item) = self.next() {\n-            let guard = DropGuard(self);\n-            drop(item);\n-            mem::forget(guard);\n+        let iter = mem::replace(&mut self.iter, (&mut []).iter());\n+        let drop_len = iter.len();\n+        let drop_ptr = iter.as_slice().as_ptr();\n+\n+        // forget iter so there's no aliasing reference\n+        drop(iter);\n+\n+        let mut vec = self.vec;\n+\n+        if mem::size_of::<T>() == 0 {\n+            // ZSTs have no identity, so we don't need to move them around, we only need to drop the correct amount.\n+            // this can be achieved by manipulating the Vec length instead of moving values out from `iter`.\n+            unsafe {\n+                let vec = vec.as_mut();\n+                let old_len = vec.len();\n+                vec.set_len(old_len + drop_len + self.tail_len);\n+                vec.truncate(old_len + self.tail_len);\n+            }\n+\n+            return;\n+        }\n+\n+        // ensure elements are moved back into their appropriate places, even when drop_in_place panics\n+        let _guard = DropGuard(self);\n+\n+        if drop_len == 0 {\n+            return;\n         }\n \n-        // Drop a `DropGuard` to move back the non-drained tail of `self`.\n-        DropGuard(self);\n+        unsafe {\n+            // drop_ptr comes from a slice::Iter which only gives us a &[T] but for drop_in_place\n+            // a pointer with mutable provenance is necessary. Therefore we must reconstruct\n+            // it from the original vec but also avoid creating a &mut to the front since that could\n+            // invalidate raw pointers to it which some unsafe code might rely on.\n+            let vec_ptr = vec.as_mut().as_mut_ptr();\n+            let drop_offset = drop_ptr.offset_from(vec_ptr) as usize;\n+            let to_drop = ptr::slice_from_raw_parts_mut(vec_ptr.add(drop_offset), drop_len);\n+            ptr::drop_in_place(to_drop);\n+        }\n     }\n }\n "}]}