{"sha": "f8493d0660d5ad92a0c244cd0fed0d72b9630ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NDkzZDA2NjBkNWFkOTJhMGMyNDRjZDBmZWQwZDcyYjk2MzBlYmI=", "commit": {"author": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-30T14:35:04Z"}, "committer": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-30T14:35:04Z"}, "message": "Change max size to isize", "tree": {"sha": "d4b16e0a39e0a1dc0231984ff2aada3602ca6d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b16e0a39e0a1dc0231984ff2aada3602ca6d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb", "html_url": "https://github.com/rust-lang/rust/commit/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb/comments", "author": null, "committer": null, "parents": [{"sha": "4f06cedd0d83e0f6418ab681f6174c2b32e7aca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f06cedd0d83e0f6418ab681f6174c2b32e7aca0", "html_url": "https://github.com/rust-lang/rust/commit/4f06cedd0d83e0f6418ab681f6174c2b32e7aca0"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "0a73679a7e6c23a3b768ce4d27b02fd4640cdf0a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8493d0660d5ad92a0c244cd0fed0d72b9630ebb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f8493d0660d5ad92a0c244cd0fed0d72b9630ebb", "patch": "@@ -65,10 +65,14 @@ use core::ops;\n use core::ptr;\n use core::ptr::Unique;\n use core::slice;\n+use core::isize;\n use core::usize;\n \n use borrow::{Cow, IntoCow};\n \n+// FIXME- fix places which assume the max vector allowed has memory usize::MAX.\n+static MAX_MEMORY_SIZE: usize = isize::MAX as usize;\n+\n /// A growable list type, written `Vec<T>` but pronounced 'vector.'\n ///\n /// # Examples\n@@ -305,13 +309,15 @@ impl<T> Vec<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         if self.cap - self.len < additional {\n-            let err_msg = \"Vec::reserve: `usize` overflow\";\n+            let err_msg = \"Vec::reserve: `isize` overflow\";\n \n             let new_min_cap = self.len.checked_add(additional).expect(err_msg);\n-            match new_min_cap.checked_next_power_of_two() {\n-                None => self.grow_capacity(usize::MAX),\n-                Some(x) => self.grow_capacity(x),\n-            }\n+            if new_min_cap > MAX_MEMORY_SIZE { panic!(err_msg) }\n+            self.grow_capacity(match new_min_cap.checked_next_power_of_two() {\n+                Some(x) if x > MAX_MEMORY_SIZE => MAX_MEMORY_SIZE,\n+                None => MAX_MEMORY_SIZE,\n+                Some(x) => x,\n+            });\n         }\n     }\n \n@@ -642,10 +648,10 @@ impl<T> Vec<T> {\n         #[inline(never)]\n         fn resize<T>(vec: &mut Vec<T>) {\n             let old_size = vec.cap * mem::size_of::<T>();\n-            if old_size == usize::MAX { panic!(\"capacity overflow\") }\n+            if old_size >= MAX_MEMORY_SIZE { panic!(\"capacity overflow\") }\n             let mut size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n-            if old_size > size {\n-                size = usize::MAX;\n+            if old_size > size || size > MAX_MEMORY_SIZE {\n+                size = MAX_MEMORY_SIZE;\n             }\n             unsafe {\n                 let ptr = alloc_or_realloc(*vec.ptr, old_size, size);"}]}