{"sha": "c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "node_id": "C_kwDOAAsO6NoAKGM1YTY4Y2YwYTY1ZmU5NDAyMmY1YzVmZDBmYzQ3Y2NmY2RhODE5Mjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-10-13T20:53:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-10-14T14:03:20Z"}, "message": "add dedicated error variant for writing the discriminant of an uninhabited enum variant", "tree": {"sha": "f79ca26886d35ab23ac77af8864c9037f4595147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f79ca26886d35ab23ac77af8864c9037f4595147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "html_url": "https://github.com/rust-lang/rust/commit/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb16a2a892c2a29b1da3085e29f39efa3486e1c", "html_url": "https://github.com/rust-lang/rust/commit/eeb16a2a892c2a29b1da3085e29f39efa3486e1c"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b6682b13ed2168e4556dc602007da80cdb3b6294", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "patch": "@@ -618,6 +618,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Read discriminant, return the runtime value as well as the variant index.\n+    /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!\n     pub fn read_discriminant(\n         &self,\n         op: &OpTy<'tcx, M::PointerTag>,"}, {"sha": "d425b84bdaf26d508773a623b5b70f9d58663e42", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "patch": "@@ -988,10 +988,23 @@ where\n         variant_index: VariantIdx,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n+        // This must be an enum or generator.\n+        match dest.layout.ty.kind() {\n+            ty::Adt(adt, _) => assert!(adt.is_enum()),\n+            ty::Generator(..) => {}\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"write_discriminant called on non-variant-type (neither enum nor generator)\"\n+            ),\n+        }\n         // Layout computation excludes uninhabited variants from consideration\n         // therefore there's no way to represent those variants in the given layout.\n+        // Essentially, uninhabited variants do not have a tag that corresponds to their\n+        // discriminant, so we cannot do anything here.\n+        // When evaluating we will always error before even getting here, but ConstProp 'executes'\n+        // dead code, so we cannot ICE here.\n         if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n-            throw_ub!(Unreachable);\n+            throw_ub!(UninhabitedEnumVariantWritten)\n         }\n \n         match dest.layout.variants {"}, {"sha": "9472a287e5a41907c5f434729376484048582a1e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "patch": "@@ -287,6 +287,8 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n         target_size: u64,\n         data_size: u64,\n     },\n+    /// A discriminant of an uninhabited enum variant is written.\n+    UninhabitedEnumVariantWritten,\n }\n \n impl fmt::Display for UndefinedBehaviorInfo<'_> {\n@@ -391,6 +393,9 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 \"scalar size mismatch: expected {} bytes but got {} bytes instead\",\n                 target_size, data_size\n             ),\n+            UninhabitedEnumVariantWritten => {\n+                write!(f, \"writing discriminant of an uninhabited enum\")\n+            }\n         }\n     }\n }"}]}