{"sha": "e61cb44f2f55a79562d1c714b42620c81c962d5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MWNiNDRmMmY1NWE3OTU2MmQxYzcxNGI0MjYyMGM4MWM5NjJkNWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T08:42:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "parse_generic_bounds_common: dedent", "tree": {"sha": "6e37ea3955bc3793ce4e9cb85680a92b01543247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e37ea3955bc3793ce4e9cb85680a92b01543247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e61cb44f2f55a79562d1c714b42620c81c962d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e61cb44f2f55a79562d1c714b42620c81c962d5d", "html_url": "https://github.com/rust-lang/rust/commit/e61cb44f2f55a79562d1c714b42620c81c962d5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e61cb44f2f55a79562d1c714b42620c81c962d5d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11252ae266ded70e47ede20e68a41f611d2280b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11252ae266ded70e47ede20e68a41f611d2280b", "html_url": "https://github.com/rust-lang/rust/commit/a11252ae266ded70e47ede20e68a41f611d2280b"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "b58c16c78e66a8faac558c578b7d3218c1cc72c2", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e61cb44f2f55a79562d1c714b42620c81c962d5d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e61cb44f2f55a79562d1c714b42620c81c962d5d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=e61cb44f2f55a79562d1c714b42620c81c962d5d", "patch": "@@ -376,42 +376,42 @@ impl<'a> Parser<'a> {\n                 || self.check_keyword(kw::For)\n                 || self.check(&token::OpenDelim(token::Paren));\n \n-            if is_bound_start {\n-                let lo = self.token.span;\n-                let has_parens = self.eat(&token::OpenDelim(token::Paren));\n-                let inner_lo = self.token.span;\n-                let is_negative = self.eat(&token::Not);\n-                let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n-                if self.token.is_lifetime() {\n-                    self.error_opt_out_lifetime(question);\n-                    bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n-                    if has_parens {\n-                        self.recover_paren_lifetime(lo, inner_lo)?;\n+            if !is_bound_start {\n+                break;\n+            }\n+\n+            let lo = self.token.span;\n+            let has_parens = self.eat(&token::OpenDelim(token::Paren));\n+            let inner_lo = self.token.span;\n+            let is_negative = self.eat(&token::Not);\n+            let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n+            if self.token.is_lifetime() {\n+                self.error_opt_out_lifetime(question);\n+                bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n+                if has_parens {\n+                    self.recover_paren_lifetime(lo, inner_lo)?;\n+                }\n+            } else {\n+                let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+                let path = self.parse_path(PathStyle::Type)?;\n+                if has_parens {\n+                    self.expect(&token::CloseDelim(token::Paren))?;\n+                }\n+                let poly_span = lo.to(self.prev_span);\n+                if is_negative {\n+                    was_negative = true;\n+                    if let Some(sp) = last_plus_span.or(colon_span) {\n+                        negative_bounds.push(sp.to(poly_span));\n                     }\n                 } else {\n-                    let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-                    let path = self.parse_path(PathStyle::Type)?;\n-                    if has_parens {\n-                        self.expect(&token::CloseDelim(token::Paren))?;\n-                    }\n-                    let poly_span = lo.to(self.prev_span);\n-                    if is_negative {\n-                        was_negative = true;\n-                        if let Some(sp) = last_plus_span.or(colon_span) {\n-                            negative_bounds.push(sp.to(poly_span));\n-                        }\n+                    let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n+                    let modifier = if question.is_some() {\n+                        TraitBoundModifier::Maybe\n                     } else {\n-                        let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n-                        let modifier = if question.is_some() {\n-                            TraitBoundModifier::Maybe\n-                        } else {\n-                            TraitBoundModifier::None\n-                        };\n-                        bounds.push(GenericBound::Trait(poly_trait, modifier));\n-                    }\n+                        TraitBoundModifier::None\n+                    };\n+                    bounds.push(GenericBound::Trait(poly_trait, modifier));\n                 }\n-            } else {\n-                break\n             }\n \n             if !allow_plus || !self.eat_plus() {"}]}