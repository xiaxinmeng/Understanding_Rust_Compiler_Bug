{"sha": "2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNWVhZTNhYzc4YTYzMTk2YzExOWM4Y2E1ZjhmMGJkOTkyMjc5NzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T15:34:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T15:34:58Z"}, "message": "provide mutable borrows when hooking memory write access", "tree": {"sha": "e89eb4606564c128ae95a53bea63dd2805709569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89eb4606564c128ae95a53bea63dd2805709569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "html_url": "https://github.com/rust-lang/rust/commit/2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3545dae6a35eb675c3cf6e312ef9a5724d721020", "url": "https://api.github.com/repos/rust-lang/rust/commits/3545dae6a35eb675c3cf6e312ef9a5724d721020", "html_url": "https://github.com/rust-lang/rust/commit/3545dae6a35eb675c3cf6e312ef9a5724d721020"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "7aeadfa408a90547a27eb2481a43e6d2c1fa39de", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "patch": "@@ -24,13 +24,6 @@ use super::{\n     EvalContext, PlaceTy, OpTy, Pointer, MemPlace, MemoryKind,\n };\n \n-/// Classifying memory accesses\n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n-pub enum MemoryAccess {\n-    Read,\n-    Write,\n-}\n-\n /// Whether this kind of memory is allowed to leak\n pub trait MayLeak: Copy {\n     fn may_leak(self) -> bool;\n@@ -181,17 +174,22 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n         dest: PlaceTy<'tcx, Self::PointerTag>,\n     ) -> EvalResult<'tcx>;\n \n-    /// Hook for performing extra checks on a memory access.\n-    ///\n-    /// Takes read-only access to the allocation so we can keep all the memory read\n-    /// operations take `&self`.  Use a `RefCell` in `AllocExtra` if you\n-    /// need to mutate.\n+    /// Hook for performing extra checks on a memory read access.\n     #[inline]\n-    fn memory_accessed(\n+    fn memory_read(\n         _alloc: &Allocation<Self::PointerTag, Self::AllocExtra>,\n         _ptr: Pointer<Self::PointerTag>,\n         _size: Size,\n-        _access: MemoryAccess,\n+    ) -> EvalResult<'tcx> {\n+        Ok(())\n+    }\n+\n+    /// Hook for performing extra checks on a memory write access.\n+    #[inline]\n+    fn memory_written(\n+        _alloc: &mut Allocation<Self::PointerTag, Self::AllocExtra>,\n+        _ptr: Pointer<Self::PointerTag>,\n+        _size: Size,\n     ) -> EvalResult<'tcx> {\n         Ok(())\n     }"}, {"sha": "91f3813e2b1fdbacf0455a5bc93c0dff1fd1141a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "patch": "@@ -30,7 +30,7 @@ use syntax::ast::Mutability;\n use super::{\n     Pointer, AllocId, Allocation, ConstValue, GlobalId,\n     EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n-    Machine, MemoryAccess, AllocMap, MayLeak, ScalarMaybeUndef, ErrorHandled,\n+    Machine, AllocMap, MayLeak, ScalarMaybeUndef, ErrorHandled,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -644,7 +644,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n \n         let alloc = self.get(ptr.alloc_id)?;\n-        M::memory_accessed(alloc, ptr, size, MemoryAccess::Read)?;\n+        M::memory_read(alloc, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());\n@@ -690,7 +690,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.clear_relocations(ptr, size)?;\n \n         let alloc = self.get_mut(ptr.alloc_id)?;\n-        M::memory_accessed(alloc, ptr, size, MemoryAccess::Write)?;\n+        M::memory_written(alloc, ptr, size)?;\n \n         assert_eq!(ptr.offset.bytes() as usize as u64, ptr.offset.bytes());\n         assert_eq!(size.bytes() as usize as u64, size.bytes());"}, {"sha": "5620ea4cee25411ab3689386a172c9b52007f1c5", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a5eae3ac78a63196c119c8ca5f8f0bd99227971/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=2a5eae3ac78a63196c119c8ca5f8f0bd99227971", "patch": "@@ -34,7 +34,7 @@ pub use self::place::{Place, PlaceTy, MemPlace, MPlaceTy};\n \n pub use self::memory::{Memory, MemoryKind};\n \n-pub use self::machine::{Machine, AllocMap, MemoryAccess, MayLeak};\n+pub use self::machine::{Machine, AllocMap, MayLeak};\n \n pub use self::operand::{ScalarMaybeUndef, Value, ValTy, Operand, OpTy};\n "}]}