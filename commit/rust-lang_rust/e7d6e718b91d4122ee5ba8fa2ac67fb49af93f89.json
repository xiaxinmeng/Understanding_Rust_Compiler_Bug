{"sha": "e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDZlNzE4YjkxZDQxMjJlZTViYThmYTJhYzY3ZmI0OWFmOTNmODk=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-02T21:21:12Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-14T21:37:29Z"}, "message": "reorganize shims by platform", "tree": {"sha": "8e00767e44ad2b35fe71a3364e9c2423a37f7da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e00767e44ad2b35fe71a3364e9c2423a37f7da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXkcTGgAKCRAnUl7150IK\nUIADAPwMM//S9UJuMJrWYjvMp7am23NfqyPWDLfdBs1Se/IPBwEAwRzP/I5FuRAb\nuUjn/AHkkGkjDnorT7EulJOao5LCugA=\n=2jim\n-----END PGP SIGNATURE-----", "payload": "tree 8e00767e44ad2b35fe71a3364e9c2423a37f7da9\nparent 0a803c97523b99799e5f4c05bdf5f18764698c11\nauthor Christian Poveda <git@christianpoveda.xyz> 1580678472 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1581716249 -0500\n\nreorganize shims by platform\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "html_url": "https://github.com/rust-lang/rust/commit/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a803c97523b99799e5f4c05bdf5f18764698c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a803c97523b99799e5f4c05bdf5f18764698c11", "html_url": "https://github.com/rust-lang/rust/commit/0a803c97523b99799e5f4c05bdf5f18764698c11"}], "stats": {"total": 520, "additions": 328, "deletions": 192}, "files": [{"sha": "d3a8ac1b065f5ddb330fb3a6a05e81c5b6d4c84f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 34, "deletions": 192, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "patch": "@@ -1,3 +1,6 @@\n+mod windows;\n+mod posix;\n+\n use std::{convert::TryInto, iter};\n \n use rustc_hir::def_id::DefId;\n@@ -167,6 +170,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         // Next: functions that return.\n+        match link_name {\n+            \"__rust_maybe_catch_panic\" => {\n+                this.handle_catch_panic(args, dest, ret)?;\n+                return Ok(None);\n+            }\n+\n+            _ => this.emulate_foreign_item_by_name(link_name, args, dest)?,\n+        };\n+\n+        this.dump_place(*dest);\n+        this.go_to_block(ret);\n+\n+        Ok(None)\n+    }\n+\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+\n         match link_name {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -339,11 +366,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            \"__rust_maybe_catch_panic\" => {\n-                this.handle_catch_panic(args, dest, ret)?;\n-                return Ok(None);\n-            }\n-\n             \"memcmp\" => {\n                 let left = this.read_scalar(args[0])?.not_undef()?;\n                 let right = this.read_scalar(args[1])?.not_undef()?;\n@@ -399,143 +421,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            | \"__errno_location\"\n-            | \"__error\"\n-            => {\n-                let errno_place = this.machine.last_error.unwrap();\n-                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n-            }\n-\n-            \"getenv\" => {\n-                let result = this.getenv(args[0])?;\n-                this.write_scalar(result, dest)?;\n-            }\n-\n-            \"unsetenv\" => {\n-                let result = this.unsetenv(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"setenv\" => {\n-                let result = this.setenv(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"getcwd\" => {\n-                let result = this.getcwd(args[0], args[1])?;\n-                this.write_scalar(result, dest)?;\n-            }\n-\n-            \"chdir\" => {\n-                let result = this.chdir(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"open\"\n-            | \"open64\"\n-            => {\n-                let result = this.open(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"fcntl\" => {\n-                let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"close\"\n-            | \"close$NOCANCEL\"\n-            => {\n-                let result = this.close(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"read\" => {\n-                let result = this.read(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"write\" => {\n-                let fd = this.read_scalar(args[0])?.to_i32()?;\n-                let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n-                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n-                let result = if fd == 1 || fd == 2 {\n-                    // stdout/stderr\n-                    use std::io::{self, Write};\n-\n-                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(n))?;\n-                    // We need to flush to make sure this actually appears on the screen\n-                    let res = if fd == 1 {\n-                        // Stdout is buffered, flush to make sure it appears on the screen.\n-                        // This is the write() syscall of the interpreted program, we want it\n-                        // to correspond to a write() syscall on the host -- there is no good\n-                        // in adding extra buffering here.\n-                        let res = io::stdout().write(buf_cont);\n-                        io::stdout().flush().unwrap();\n-                        res\n-                    } else {\n-                        // No need to flush, stderr is not buffered.\n-                        io::stderr().write(buf_cont)\n-                    };\n-                    match res {\n-                        Ok(n) => n as i64,\n-                        Err(_) => -1,\n-                    }\n-                } else {\n-                    this.write(args[0], args[1], args[2])?\n-                };\n-                // Now, `result` is the value we return back to the program.\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            | \"lseek64\"\n-            | \"lseek\"\n-            => {\n-                let result = this.lseek64(args[0], args[1], args[2])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"unlink\" => {\n-                let result = this.unlink(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"symlink\" => {\n-                let result = this.symlink(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"stat$INODE64\" => {\n-                let result = this.stat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"lstat$INODE64\" => {\n-                let result = this.lstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"fstat$INODE64\" => {\n-                let result = this.fstat(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n \n             \"rename\" => {\n                 let result = this.rename(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n-            \"clock_gettime\" => {\n-                let result = this.clock_gettime(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n-            \"gettimeofday\" => {\n-                let result = this.gettimeofday(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n@@ -950,60 +841,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // which one it is.\n                 this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n             }\n-            \"WriteFile\" => {\n-                let handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n-                let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_u32()?;\n-                let written_place = this.deref_operand(args[3])?;\n-                // Spec says to always write `0` first.\n-                this.write_null(written_place.into())?;\n-                let written = if handle == -11 || handle == -12 {\n-                    // stdout/stderr\n-                    use std::io::{self, Write};\n-\n-                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n-                    let res = if handle == -11 {\n-                        io::stdout().write(buf_cont)\n-                    } else {\n-                        io::stderr().write(buf_cont)\n-                    };\n-                    res.ok().map(|n| n as u32)\n-                } else {\n-                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n-                    // Pretend it all went well.\n-                    Some(n)\n-                };\n-                // If there was no error, write back how much was written.\n-                if let Some(n) = written {\n-                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n-                }\n-                // Return whether this was a success.\n-                this.write_scalar(\n-                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n-                    dest,\n-                )?;\n-            }\n             \"GetConsoleMode\" => {\n                 // Everything is a pipe.\n                 this.write_null(dest)?;\n             }\n-            \"GetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n-                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n-                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n-                // Return 0 upon failure.\n-\n-                // This is not the env var you are looking for.\n-                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n-                this.write_null(dest)?;\n-            }\n-            \"SetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // Return nonzero if success, else return 0.\n-                throw_unsup_format!(\"can't set environment variable on Windows\");\n-            }\n             \"GetCommandLineW\" => {\n                 this.write_scalar(\n                     this.machine.cmd_line.expect(\"machine must be initialized\"),\n@@ -1018,13 +859,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n \n-            // We can't execute anything else.\n-            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n-        }\n+            _ => match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+                \"linux\" | \"macos\" => posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                \"windows\" => windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                target => throw_unsup_format!(\"The {} target platform is not supported\", target),\n+            }\n+        };\n \n-        this.dump_place(*dest);\n-        this.go_to_block(ret);\n-        Ok(None)\n+        Ok(())\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)"}, {"sha": "ecdec1fb165ccfc26a0805193a8f6fba6d808ee8", "filename": "src/shims/foreign_items/posix.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "patch": "@@ -0,0 +1,111 @@\n+mod linux;\n+mod macos;\n+\n+use crate::*;\n+use rustc::ty::layout::Size;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+\n+        match link_name {\n+            // Environment related shims\n+            \"getenv\" => {\n+                let result = this.getenv(args[0])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"unsetenv\" => {\n+                let result = this.unsetenv(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"setenv\" => {\n+                let result = this.setenv(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"getcwd\" => {\n+                let result = this.getcwd(args[0], args[1])?;\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"chdir\" => {\n+                let result = this.chdir(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // File related shims\n+            \"fcntl\" => {\n+                let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"read\" => {\n+                let result = this.read(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"write\" => {\n+                let fd = this.read_scalar(args[0])?.to_i32()?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n+                trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n+                let result = if fd == 1 || fd == 2 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(n))?;\n+                    // We need to flush to make sure this actually appears on the screen\n+                    let res = if fd == 1 {\n+                        // Stdout is buffered, flush to make sure it appears on the screen.\n+                        // This is the write() syscall of the interpreted program, we want it\n+                        // to correspond to a write() syscall on the host -- there is no good\n+                        // in adding extra buffering here.\n+                        let res = io::stdout().write(buf_cont);\n+                        io::stdout().flush().unwrap();\n+                        res\n+                    } else {\n+                        // No need to flush, stderr is not buffered.\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    match res {\n+                        Ok(n) => n as i64,\n+                        Err(_) => -1,\n+                    }\n+                } else {\n+                    this.write(args[0], args[1], args[2])?\n+                };\n+                // Now, `result` is the value we return back to the program.\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"unlink\" => {\n+                let result = this.unlink(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"symlink\" => {\n+                let result = this.symlink(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            _ => {\n+                match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+                    \"linux\" => linux::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                    \"macos\" => macos::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                    _ => unreachable!(),\n+                }\n+            }\n+        };\n+\n+        Ok(())\n+    }\n+}"}, {"sha": "bc61aea18c7370316c0e40a203516c5668d82332", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "patch": "@@ -0,0 +1,46 @@\n+use crate::*;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        match link_name {\n+            \"__errno_location\" => {\n+                let errno_place = this.machine.last_error.unwrap();\n+                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n+            }\n+\n+            // File related shims\n+            \"open64\" => {\n+                let result = this.open(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"close\" => {\n+                let result = this.close(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"lseek64\" => {\n+                let result = this.lseek64(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Time related shims\n+            \"clock_gettime\" => {\n+                let result = this.clock_gettime(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        };\n+\n+        Ok(())\n+    }\n+}"}, {"sha": "e0ac92868a2c70e9a44de92c2f2b3351a9bbae60", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "patch": "@@ -0,0 +1,62 @@\n+use crate::*;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        match link_name {\n+            \"__error\" => {\n+                let errno_place = this.machine.last_error.unwrap();\n+                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n+            }\n+\n+            // File related shims\n+             \"open\" => {\n+                let result = this.open(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"close$NOCANCEL\" => {\n+                let result = this.close(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"stat$INODE64\" => {\n+                let result = this.stat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"lstat$INODE64\" => {\n+                let result = this.lstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"fstat$INODE64\" => {\n+                let result = this.fstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"lseek\" => {\n+                let result = this.lseek64(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            // Time related shims\n+            \"gettimeofday\" => {\n+                let result = this.gettimeofday(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        };\n+\n+        Ok(())\n+    }\n+}\n+"}, {"sha": "23aa8ae7deb3475d7acbfba97ee154321dad6c4e", "filename": "src/shims/foreign_items/windows.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=e7d6e718b91d4122ee5ba8fa2ac67fb49af93f89", "patch": "@@ -0,0 +1,75 @@\n+use crate::*;\n+use rustc::ty::layout::Size;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: &str,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: PlaceTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        match link_name {\n+            // Environment related shims\n+            \"GetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n+                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n+                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n+                // Return 0 upon failure.\n+\n+                // This is not the env var you are looking for.\n+                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n+                this.write_null(dest)?;\n+            }\n+\n+            \"SetEnvironmentVariableW\" => {\n+                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n+                // Return nonzero if success, else return 0.\n+                throw_unsup_format!(\"can't set environment variable on Windows\");\n+            }\n+\n+            // File related shims\n+            \"WriteFile\" => {\n+                let handle = this.read_scalar(args[0])?.to_machine_isize(this)?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_u32()?;\n+                let written_place = this.deref_operand(args[3])?;\n+                // Spec says to always write `0` first.\n+                this.write_null(written_place.into())?;\n+                let written = if handle == -11 || handle == -12 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory.read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n+                    let res = if handle == -11 {\n+                        io::stdout().write(buf_cont)\n+                    } else {\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    res.ok().map(|n| n as u32)\n+                } else {\n+                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n+                    // Pretend it all went well.\n+                    Some(n)\n+                };\n+                // If there was no error, write back how much was written.\n+                if let Some(n) = written {\n+                    this.write_scalar(Scalar::from_u32(n), written_place.into())?;\n+                }\n+                // Return whether this was a success.\n+                this.write_scalar(\n+                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n+                    dest,\n+                )?;\n+            }\n+            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+        }\n+\n+        Ok(())\n+    }\n+}\n+"}]}