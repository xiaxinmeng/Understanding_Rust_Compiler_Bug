{"sha": "f7df0b56a76360419b31d8030c5c250bd54d8b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZGYwYjU2YTc2MzYwNDE5YjMxZDgwMzBjNWMyNTBiZDU0ZDhiNmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T10:31:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-30T09:33:01Z"}, "message": "Use automatic thread joining for cargo-watch", "tree": {"sha": "bf7cefe74227296e518709bb90ea5e24b3de446a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7cefe74227296e518709bb90ea5e24b3de446a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7df0b56a76360419b31d8030c5c250bd54d8b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7df0b56a76360419b31d8030c5c250bd54d8b6d", "html_url": "https://github.com/rust-lang/rust/commit/f7df0b56a76360419b31d8030c5c250bd54d8b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7df0b56a76360419b31d8030c5c250bd54d8b6d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bea5ace7e1d27a2d275549c28d334ac1fa2a63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bea5ace7e1d27a2d275549c28d334ac1fa2a63c", "html_url": "https://github.com/rust-lang/rust/commit/8bea5ace7e1d27a2d275549c28d334ac1fa2a63c"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "a3887ce99c59e9bd032ea33b68b0c959f9b6580c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7df0b56a76360419b31d8030c5c250bd54d8b6d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f7df0b56a76360419b31d8030c5c250bd54d8b6d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f7df0b56a76360419b31d8030c5c250bd54d8b6d", "patch": "@@ -893,6 +893,7 @@ dependencies = [\n  \"cargo_metadata\",\n  \"crossbeam-channel\",\n  \"insta\",\n+ \"jod-thread\",\n  \"log\",\n  \"lsp-types\",\n  \"serde_json\","}, {"sha": "300033a18375caa860daec7fee0313f5d7749dd6", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7df0b56a76360419b31d8030c5c250bd54d8b6d/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7df0b56a76360419b31d8030c5c250bd54d8b6d/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=f7df0b56a76360419b31d8030c5c250bd54d8b6d", "patch": "@@ -10,6 +10,7 @@ lsp-types = { version = \"0.73.0\", features = [\"proposed\"] }\n log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n serde_json = \"1.0.48\"\n+jod-thread = \"0.1.1\"\n \n [dev-dependencies]\n insta = \"0.15.0\""}, {"sha": "1ced7712a561f23605df58d6515ee237b95d785c", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f7df0b56a76360419b31d8030c5c250bd54d8b6d/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7df0b56a76360419b31d8030c5c250bd54d8b6d/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=f7df0b56a76360419b31d8030c5c250bd54d8b6d", "patch": "@@ -12,7 +12,6 @@ use std::{\n     io::{BufRead, BufReader},\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n-    thread::JoinHandle,\n     time::Instant,\n };\n \n@@ -37,8 +36,9 @@ pub struct CheckOptions {\n #[derive(Debug)]\n pub struct CheckWatcher {\n     pub task_recv: Receiver<CheckTask>,\n+    // XXX: drop order is significant\n     cmd_send: Option<Sender<CheckCommand>>,\n-    handle: Option<JoinHandle<()>>,\n+    handle: Option<jod_thread::JoinHandle<()>>,\n }\n \n impl CheckWatcher {\n@@ -47,7 +47,7 @@ impl CheckWatcher {\n \n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n-        let handle = std::thread::spawn(move || {\n+        let handle = jod_thread::spawn(move || {\n             let mut check = CheckWatcherThread::new(options, workspace_root);\n             check.run(&task_send, &cmd_recv);\n         });\n@@ -67,22 +67,6 @@ impl CheckWatcher {\n     }\n }\n \n-impl std::ops::Drop for CheckWatcher {\n-    fn drop(&mut self) {\n-        if let Some(handle) = self.handle.take() {\n-            // Take the sender out of the option\n-            let cmd_send = self.cmd_send.take();\n-\n-            // Dropping the sender finishes the thread loop\n-            drop(cmd_send);\n-\n-            // Join the thread, it should finish shortly. We don't really care\n-            // whether it panicked, so it is safe to ignore the result\n-            let _ = handle.join();\n-        }\n-    }\n-}\n-\n #[derive(Debug)]\n pub enum CheckTask {\n     /// Request a clearing of all cached diagnostics from the check watcher\n@@ -237,8 +221,9 @@ pub struct DiagnosticWithFixes {\n /// The correct way to dispose of the thread is to drop it, on which the\n /// sub-process will be killed, and the thread will be joined.\n struct WatchThread {\n-    handle: Option<JoinHandle<()>>,\n+    // XXX: drop order is significant\n     message_recv: Receiver<CheckEvent>,\n+    _handle: Option<jod_thread::JoinHandle<()>>,\n }\n \n enum CheckEvent {\n@@ -333,7 +318,7 @@ pub fn run_cargo(\n \n impl WatchThread {\n     fn dummy() -> WatchThread {\n-        WatchThread { handle: None, message_recv: never() }\n+        WatchThread { message_recv: never(), _handle: None }\n     }\n \n     fn new(options: &CheckOptions, workspace_root: &Path) -> WatchThread {\n@@ -352,7 +337,7 @@ impl WatchThread {\n         let (message_send, message_recv) = unbounded();\n         let workspace_root = workspace_root.to_owned();\n         let handle = if options.enable {\n-            Some(std::thread::spawn(move || {\n+            Some(jod_thread::spawn(move || {\n                 // If we trigger an error here, we will do so in the loop instead,\n                 // which will break out of the loop, and continue the shutdown\n                 let _ = message_send.send(CheckEvent::Begin);\n@@ -383,23 +368,6 @@ impl WatchThread {\n         } else {\n             None\n         };\n-        WatchThread { handle, message_recv }\n-    }\n-}\n-\n-impl std::ops::Drop for WatchThread {\n-    fn drop(&mut self) {\n-        if let Some(handle) = self.handle.take() {\n-            // Replace our reciever with dummy one, so we can drop and close the\n-            // one actually communicating with the thread\n-            let recv = std::mem::replace(&mut self.message_recv, never());\n-\n-            // Dropping the original reciever initiates thread sub-process shutdown\n-            drop(recv);\n-\n-            // Join the thread, it should finish shortly. We don't really care\n-            // whether it panicked, so it is safe to ignore the result\n-            let _ = handle.join();\n-        }\n+        WatchThread { message_recv, _handle: handle }\n     }\n }"}]}