{"sha": "db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNmM1MDk5OGM5MjljOWJhYjVlYTJmZmRkZGY1ZTBlZWYyNWQzYzg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T16:49:00Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T22:02:19Z"}, "message": "don't clone types that are copy (clippy::clone_on_copy)", "tree": {"sha": "f5c29a089c9fe2d43affb6cc3a5c18f7f50a1b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c29a089c9fe2d43affb6cc3a5c18f7f50a1b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "html_url": "https://github.com/rust-lang/rust/commit/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82fe5c16622051a71a37c9c4909dd1f4e0857584", "url": "https://api.github.com/repos/rust-lang/rust/commits/82fe5c16622051a71a37c9c4909dd1f4e0857584", "html_url": "https://github.com/rust-lang/rust/commit/82fe5c16622051a71a37c9c4909dd1f4e0857584"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0460ebe0c0d56079ba171e87672bdfc4d5c144cc", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n \n         // go through each target, finding a discriminant read, and a switch\n         let results = discr.targets_with_values.iter().map(|(value, target)| {\n-            self.find_discriminant_switch_pairing(&discr, target.clone(), value.clone())\n+            self.find_discriminant_switch_pairing(&discr, *target, *value)\n         });\n \n         // if the optimization did not apply for one of the targets, then abort"}, {"sha": "ed22d5849e2b1d4e30944cccb3f25b3cf9c80909", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "patch": "@@ -447,7 +447,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_super_trait,\n                 ));\n             }\n@@ -485,7 +485,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_bound,\n                 ));\n             }"}, {"sha": "373f23070192dcbe0e556d2b13e6d5fe3b130512", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n                         // so we create a fake capture info with no expression.\n                         let fake_capture_info =\n-                            ty::CaptureInfo { expr_id: None, capture_kind: capture_kind.clone() };\n+                            ty::CaptureInfo { expr_id: None, capture_kind: *capture_kind };\n                         determine_capture_info(fake_capture_info, capture_info).capture_kind\n                     } else {\n                         capture_info.capture_kind"}, {"sha": "aafb71629ad726e15916a43b2226c0894c634a18", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=db6c50998c929c9bab5ea2ffdddf5e0eef25d3c8", "patch": "@@ -162,7 +162,7 @@ pub fn check(build: &mut Build) {\n         build\n             .config\n             .target_config\n-            .entry(target.clone())\n+            .entry(*target)\n             .or_insert(Target::from_triple(&target.triple));\n \n         if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n@@ -176,7 +176,7 @@ pub fn check(build: &mut Build) {\n             // If this is a native target (host is also musl) and no musl-root is given,\n             // fall back to the system toolchain in /usr before giving up\n             if build.musl_root(*target).is_none() && build.config.build == *target {\n-                let target = build.config.target_config.entry(target.clone()).or_default();\n+                let target = build.config.target_config.entry(*target).or_default();\n                 target.musl_root = Some(\"/usr\".into());\n             }\n             match build.musl_libdir(*target) {"}]}