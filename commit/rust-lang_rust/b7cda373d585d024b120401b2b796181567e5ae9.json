{"sha": "b7cda373d585d024b120401b2b796181567e5ae9", "node_id": "C_kwDOAAsO6NoAKGI3Y2RhMzczZDU4NWQwMjRiMTIwNDAxYjJiNzk2MTgxNTY3ZTVhZTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T18:07:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T18:07:15Z"}, "message": "Pass Ty instead of TyAndLayout to the closure of various simd helpers\n\nThis reduces the total amount of llvm ir lines for simd related\nfunctions from 9604 to 9467.", "tree": {"sha": "f37c0fe9e80b06c332a6ed44c317c63db8cfe44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37c0fe9e80b06c332a6ed44c317c63db8cfe44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cda373d585d024b120401b2b796181567e5ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cda373d585d024b120401b2b796181567e5ae9", "html_url": "https://github.com/rust-lang/rust/commit/b7cda373d585d024b120401b2b796181567e5ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cda373d585d024b120401b2b796181567e5ae9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2633024850e9b7fa8aa9a856953312bccc3740bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2633024850e9b7fa8aa9a856953312bccc3740bc", "html_url": "https://github.com/rust-lang/rust/commit/2633024850e9b7fa8aa9a856953312bccc3740bc"}], "stats": {"total": 185, "additions": 75, "deletions": 110}, "files": [{"sha": "20f8699d12abd2f160e0508c2fa6fff6cba97f16", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=b7cda373d585d024b120401b2b796181567e5ae9", "patch": "@@ -73,17 +73,17 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n+                let res_lane = match lane_ty.kind() {\n                     ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n                 };\n-                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+                bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n             });\n         };\n         \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _res_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n                 match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n@@ -92,7 +92,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _res_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n                 match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),"}, {"sha": "1e384668fc72e093c62758ab4fa22a7bddbba3b6", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=b7cda373d585d024b120401b2b796181567e5ae9", "patch": "@@ -108,12 +108,7 @@ fn simd_for_each_lane<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     val: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n-    f: &dyn Fn(\n-        &mut FunctionCx<'_, '_, 'tcx>,\n-        TyAndLayout<'tcx>,\n-        TyAndLayout<'tcx>,\n-        Value,\n-    ) -> Value,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, Ty<'tcx>, Ty<'tcx>, Value) -> Value,\n ) {\n     let layout = val.layout();\n \n@@ -126,7 +121,7 @@ fn simd_for_each_lane<'tcx>(\n     for lane_idx in 0..lane_count {\n         let lane = val.value_lane(fx, lane_idx).load_scalar(fx);\n \n-        let res_lane = f(fx, lane_layout, ret_lane_layout, lane);\n+        let res_lane = f(fx, lane_layout.ty, ret_lane_layout.ty, lane);\n         let res_lane = CValue::by_val(res_lane, ret_lane_layout);\n \n         ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n@@ -138,13 +133,7 @@ fn simd_pair_for_each_lane<'tcx>(\n     x: CValue<'tcx>,\n     y: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n-    f: &dyn Fn(\n-        &mut FunctionCx<'_, '_, 'tcx>,\n-        TyAndLayout<'tcx>,\n-        TyAndLayout<'tcx>,\n-        Value,\n-        Value,\n-    ) -> Value,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, Ty<'tcx>, Ty<'tcx>, Value, Value) -> Value,\n ) {\n     assert_eq!(x.layout(), y.layout());\n     let layout = x.layout();\n@@ -159,7 +148,7 @@ fn simd_pair_for_each_lane<'tcx>(\n         let x_lane = x.value_lane(fx, lane_idx).load_scalar(fx);\n         let y_lane = y.value_lane(fx, lane_idx).load_scalar(fx);\n \n-        let res_lane = f(fx, lane_layout, ret_lane_layout, x_lane, y_lane);\n+        let res_lane = f(fx, lane_layout.ty, ret_lane_layout.ty, x_lane, y_lane);\n         let res_lane = CValue::by_val(res_lane, ret_lane_layout);\n \n         ret.place_lane(fx, lane_idx).write_cvalue(fx, res_lane);\n@@ -171,7 +160,7 @@ fn simd_reduce<'tcx>(\n     val: CValue<'tcx>,\n     acc: Option<Value>,\n     ret: CPlace<'tcx>,\n-    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, TyAndLayout<'tcx>, Value, Value) -> Value,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, Ty<'tcx>, Value, Value) -> Value,\n ) {\n     let (lane_count, lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n     let lane_layout = fx.layout_of(lane_ty);\n@@ -181,7 +170,7 @@ fn simd_reduce<'tcx>(\n         if let Some(acc) = acc { (acc, 0) } else { (val.value_lane(fx, 0).load_scalar(fx), 1) };\n     for lane_idx in start_lane..lane_count {\n         let lane = val.value_lane(fx, lane_idx).load_scalar(fx);\n-        res_val = f(fx, lane_layout, res_val, lane);\n+        res_val = f(fx, lane_layout.ty, res_val, lane);\n     }\n     let res = CValue::by_val(res_val, lane_layout);\n     ret.write_cvalue(fx, res);\n@@ -215,10 +204,10 @@ fn simd_reduce_bool<'tcx>(\n \n fn bool_to_zero_or_max_uint<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    layout: TyAndLayout<'tcx>,\n+    ty: Ty<'tcx>,\n     val: Value,\n ) -> Value {\n-    let ty = fx.clif_type(layout.ty).unwrap();\n+    let ty = fx.clif_type(ty).unwrap();\n \n     let int_ty = match ty {\n         types::F32 => types::I32,"}, {"sha": "106a190096dbaa3dabb536d33b9d4ef4b06140fe", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 61, "deletions": 85, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cda373d585d024b120401b2b796181567e5ae9/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=b7cda373d585d024b120401b2b796181567e5ae9", "patch": "@@ -17,76 +17,52 @@ fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span:\n \n macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) {\n     // FIXME use vector instructions when possible\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $x,\n-        $y,\n-        $ret,\n-        &|fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind() {\n-                ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n-                ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n-                ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n+    simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n+        let res_lane = match lane_ty.kind() {\n+            ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n+            ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+            ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n+            _ => unreachable!(\"{:?}\", lane_ty),\n+        };\n \n-            let ty = fx.clif_type(res_lane_layout.ty).unwrap();\n+        let ty = fx.clif_type(res_lane_ty).unwrap();\n \n-            let res_lane = fx.bcx.ins().bint(ty, res_lane);\n-            fx.bcx.ins().ineg(res_lane)\n-        },\n-    );\n+        let res_lane = fx.bcx.ins().bint(ty, res_lane);\n+        fx.bcx.ins().ineg(res_lane)\n+    });\n }\n \n macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) {\n     // FIXME use vector instructions when possible\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $x,\n-        $y,\n-        $ret,\n-        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n-            match lane_layout.ty.kind() {\n-                ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            }\n-        },\n-    );\n+    simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+        match lane_ty.kind() {\n+            ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+            ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+            _ => unreachable!(\"{:?}\", lane_ty),\n+        }\n+    });\n }\n \n macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) {\n     // FIXME use vector instructions when possible\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $x,\n-        $y,\n-        $ret,\n-        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n-            match lane_layout.ty.kind() {\n-                ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            }\n-        },\n-    );\n+    simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+        match lane_ty.kind() {\n+            ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+            ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+            ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n+            _ => unreachable!(\"{:?}\", lane_ty),\n+        }\n+    });\n }\n \n macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n     // FIXME use vector instructions when possible\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $x,\n-        $y,\n-        $ret,\n-        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n-            match lane_layout.ty.kind() {\n-                ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            }\n-        },\n-    );\n+    simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+        match lane_ty.kind() {\n+            ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n+            _ => unreachable!(\"{:?}\", lane_ty),\n+        }\n+    });\n }\n \n pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n@@ -105,13 +81,13 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_cast, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, ret_lane_layout, lane| {\n-                let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, ret_lane_ty, lane| {\n+                let ret_lane_clif_ty = fx.clif_type(ret_lane_ty).unwrap();\n \n-                let from_signed = type_sign(lane_layout.ty);\n-                let to_signed = type_sign(ret_lane_layout.ty);\n+                let from_signed = type_sign(lane_ty);\n+                let to_signed = type_sign(ret_lane_ty);\n \n-                clif_int_or_float_cast(fx, lane, from_signed, ret_lane_ty, to_signed)\n+                clif_int_or_float_cast(fx, lane, from_signed, ret_lane_clif_ty, to_signed)\n             });\n         };\n \n@@ -277,8 +253,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_neg, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, _ret_lane_layout, lane| {\n-                match lane_layout.ty.kind() {\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n+                match lane_ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n                     _ => unreachable!(),\n@@ -288,14 +264,14 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_fabs, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().fabs(lane)\n             });\n         };\n \n         simd_fsqrt, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().sqrt(lane)\n             });\n         };\n@@ -318,8 +294,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n         simd_rem, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n-                match lane_layout.ty.kind() {\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+                match lane_ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().srem(x_lane, y_lane),\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n@@ -334,7 +310,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         vec![AbiParam::new(types::F64)],\n                         &[x_lane, y_lane],\n                     )[0],\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n             });\n         };\n@@ -393,8 +369,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_round, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, _ret_lane_layout, lane| {\n-                match lane_layout.ty.kind() {\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n+                match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n                         vec![AbiParam::new(types::F32)],\n@@ -407,33 +383,33 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         vec![AbiParam::new(types::F64)],\n                         &[lane],\n                     )[0],\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n             });\n         };\n         simd_ceil, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().ceil(lane)\n             });\n         };\n         simd_floor, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().floor(lane)\n             });\n         };\n         simd_trunc, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().trunc(lane)\n             });\n         };\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_layout, a, b| {\n-                if lane_layout.ty.is_floating_point() {\n+            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n                     fx.bcx.ins().fadd(a, b)\n                 } else {\n                     fx.bcx.ins().iadd(a, b)\n@@ -443,8 +419,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_layout, a, b| {\n-                if lane_layout.ty.is_floating_point() {\n+            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n                     fx.bcx.ins().fmul(a, b)\n                 } else {\n                     fx.bcx.ins().imul(a, b)\n@@ -464,23 +440,23 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_and, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().band(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_or, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().bor(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_xor, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().bxor(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n         };\n \n         simd_reduce_min, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, &|fx, layout, a, b| {\n-                let lt = match layout.ty.kind() {\n+            simd_reduce(fx, v, None, ret, &|fx, ty, a, b| {\n+                let lt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedLessThan, a, b),\n                     ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::LessThan, a, b),\n@@ -492,8 +468,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_max, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, &|fx, layout, a, b| {\n-                let gt = match layout.ty.kind() {\n+            simd_reduce(fx, v, None, ret, &|fx, ty, a, b| {\n+                let gt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, a, b),\n                     ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::GreaterThan, a, b),"}]}