{"sha": "7197a27028c2eb791e5e511cd4f90d97c8212520", "node_id": "C_kwDOAAsO6NoAKDcxOTdhMjcwMjhjMmViNzkxZTVlNTExY2Q0ZjkwZDk3YzgyMTI1MjA", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-05-02T14:12:22Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-05-02T17:02:43Z"}, "message": "Use triomphe Arc", "tree": {"sha": "768465a474d335b89e63d7597f1a18a13abc9069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/768465a474d335b89e63d7597f1a18a13abc9069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7197a27028c2eb791e5e511cd4f90d97c8212520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7197a27028c2eb791e5e511cd4f90d97c8212520", "html_url": "https://github.com/rust-lang/rust/commit/7197a27028c2eb791e5e511cd4f90d97c8212520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7197a27028c2eb791e5e511cd4f90d97c8212520/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7168a8c6fc84bbaadb75c6fd7e345ef1103b96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7168a8c6fc84bbaadb75c6fd7e345ef1103b96e", "html_url": "https://github.com/rust-lang/rust/commit/a7168a8c6fc84bbaadb75c6fd7e345ef1103b96e"}], "stats": {"total": 600, "additions": 337, "deletions": 263}, "files": [{"sha": "f0fe95327f36cec1f09948cfd2b937a6b7826c75", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -94,6 +94,7 @@ dependencies = [\n  \"stdx\",\n  \"syntax\",\n  \"test-utils\",\n+ \"triomphe\",\n  \"tt\",\n  \"vfs\",\n ]\n@@ -498,6 +499,7 @@ dependencies = [\n  \"smallvec\",\n  \"stdx\",\n  \"syntax\",\n+ \"triomphe\",\n  \"tt\",\n ]\n \n@@ -534,6 +536,7 @@ dependencies = [\n  \"syntax\",\n  \"test-utils\",\n  \"tracing\",\n+ \"triomphe\",\n  \"tt\",\n ]\n \n@@ -558,6 +561,7 @@ dependencies = [\n  \"stdx\",\n  \"syntax\",\n  \"tracing\",\n+ \"triomphe\",\n  \"tt\",\n ]\n \n@@ -595,6 +599,7 @@ dependencies = [\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n+ \"triomphe\",\n  \"typed-arena\",\n ]\n \n@@ -656,6 +661,7 @@ dependencies = [\n  \"text-edit\",\n  \"toolchain\",\n  \"tracing\",\n+ \"triomphe\",\n  \"url\",\n ]\n \n@@ -724,6 +730,7 @@ dependencies = [\n  \"test-utils\",\n  \"text-edit\",\n  \"tracing\",\n+ \"triomphe\",\n  \"xshell\",\n ]\n \n@@ -761,6 +768,7 @@ dependencies = [\n  \"syntax\",\n  \"test-utils\",\n  \"text-edit\",\n+ \"triomphe\",\n ]\n \n [[package]]\n@@ -820,6 +828,7 @@ dependencies = [\n  \"hashbrown\",\n  \"once_cell\",\n  \"rustc-hash\",\n+ \"triomphe\",\n ]\n \n [[package]]\n@@ -1234,6 +1243,7 @@ dependencies = [\n  \"snap\",\n  \"stdx\",\n  \"tracing\",\n+ \"triomphe\",\n  \"tt\",\n ]\n \n@@ -1315,6 +1325,7 @@ dependencies = [\n  \"stdx\",\n  \"toolchain\",\n  \"tracing\",\n+ \"triomphe\",\n ]\n \n [[package]]\n@@ -1484,6 +1495,7 @@ dependencies = [\n  \"tracing-log\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n+ \"triomphe\",\n  \"tt\",\n  \"vfs\",\n  \"vfs-notify\",\n@@ -1730,6 +1742,7 @@ dependencies = [\n  \"stdx\",\n  \"test-utils\",\n  \"text-edit\",\n+ \"triomphe\",\n  \"ungrammar\",\n ]\n \n@@ -1939,6 +1952,12 @@ dependencies = [\n  \"tracing-subscriber\",\n ]\n \n+[[package]]\n+name = \"triomphe\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f1ee9bd9239c339d714d657fac840c6d2a4f9c45f4f9ec7b0975113458be78db\"\n+\n [[package]]\n name = \"tt\"\n version = \"0.0.0\""}, {"sha": "ef8d8c0eef4793bca4090303e79b0c0ea4f653b0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -81,3 +81,4 @@ smol_str = \"0.2.0\"\n # the following crates are pinned to prevent us from pulling in syn 2 until all our dependencies have moved\n serde = { version = \"=1.0.156\", features = [\"derive\"] }\n serde_json = \"1.0.94\"\n+triomphe = { version = \"0.1.8\", default-features = false, features = [\"std\"] }"}, {"sha": "6001772c86ee4325af8d9e12ef4a13a1dd7445a6", "filename": "crates/base-db/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -15,6 +15,8 @@ doctest = false\n salsa = \"0.17.0-pre.2\"\n rustc-hash = \"1.1.0\"\n \n+triomphe.workspace = true\n+\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n \n # local deps"}, {"sha": "2b33457b6d52d603dc075c6a8e9257231c817556", "filename": "crates/base-db/src/change.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Fchange.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,10 @@\n //! Defines a unit of change that can applied to the database to get the next\n //! state. Changes are transactional.\n \n-use std::{fmt, sync::Arc};\n+use std::fmt;\n \n use salsa::Durability;\n+use triomphe::Arc;\n use vfs::FileId;\n \n use crate::{CrateGraph, ProcMacros, SourceDatabaseExt, SourceRoot, SourceRootId};"}, {"sha": "e89d3ae4bb33915b0dfc110e96e54af26be88a17", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,12 +1,13 @@\n //! A set of high-level utility fixture methods to use in tests.\n-use std::{mem, str::FromStr, sync::Arc};\n+use std::{mem, str::FromStr, sync};\n \n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n use test_utils::{\n     extract_range_or_offset, Fixture, FixtureWithProjectMeta, RangeOrOffset, CURSOR_MARKER,\n     ESCAPED_CURSOR_MARKER,\n };\n+use triomphe::Arc;\n use tt::token_id::{Leaf, Subtree, TokenTree};\n use vfs::{file_set::FileSet, VfsPath};\n \n@@ -334,7 +335,7 @@ pub fn identity(_attr: TokenStream, item: TokenStream) -> TokenStream {\n             ProcMacro {\n                 name: \"identity\".into(),\n                 kind: crate::ProcMacroKind::Attr,\n-                expander: Arc::new(IdentityProcMacroExpander),\n+                expander: sync::Arc::new(IdentityProcMacroExpander),\n             },\n         ),\n         (\n@@ -348,7 +349,7 @@ pub fn derive_identity(item: TokenStream) -> TokenStream {\n             ProcMacro {\n                 name: \"DeriveIdentity\".into(),\n                 kind: crate::ProcMacroKind::CustomDerive,\n-                expander: Arc::new(IdentityProcMacroExpander),\n+                expander: sync::Arc::new(IdentityProcMacroExpander),\n             },\n         ),\n         (\n@@ -362,7 +363,7 @@ pub fn input_replace(attr: TokenStream, _item: TokenStream) -> TokenStream {\n             ProcMacro {\n                 name: \"input_replace\".into(),\n                 kind: crate::ProcMacroKind::Attr,\n-                expander: Arc::new(AttributeInputReplaceProcMacroExpander),\n+                expander: sync::Arc::new(AttributeInputReplaceProcMacroExpander),\n             },\n         ),\n         (\n@@ -376,7 +377,7 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n             ProcMacro {\n                 name: \"mirror\".into(),\n                 kind: crate::ProcMacroKind::FuncLike,\n-                expander: Arc::new(MirrorProcMacroExpander),\n+                expander: sync::Arc::new(MirrorProcMacroExpander),\n             },\n         ),\n         (\n@@ -390,7 +391,7 @@ pub fn shorten(input: TokenStream) -> TokenStream {\n             ProcMacro {\n                 name: \"shorten\".into(),\n                 kind: crate::ProcMacroKind::FuncLike,\n-                expander: Arc::new(ShortenProcMacroExpander),\n+                expander: sync::Arc::new(ShortenProcMacroExpander),\n             },\n         ),\n     ]"}, {"sha": "e8d521b42f868d0d6b3d2f15f3822d12a8facc3c", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -6,12 +6,13 @@\n //! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n-use std::{fmt, mem, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n+use std::{fmt, mem, ops, panic::RefUnwindSafe, str::FromStr, sync};\n \n use cfg::CfgOptions;\n use la_arena::{Arena, Idx};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::SmolStr;\n+use triomphe::Arc;\n use tt::token_id::Subtree;\n use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n \n@@ -263,7 +264,7 @@ pub type TargetLayoutLoadResult = Result<Arc<str>, Arc<str>>;\n pub struct ProcMacro {\n     pub name: SmolStr,\n     pub kind: ProcMacroKind,\n-    pub expander: Arc<dyn ProcMacroExpander>,\n+    pub expander: sync::Arc<dyn ProcMacroExpander>,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]"}, {"sha": "af204e44e6ee19ca4a87da21d77aecf9ae3d544a", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -6,10 +6,11 @@ mod input;\n mod change;\n pub mod fixture;\n \n-use std::{panic, sync::Arc};\n+use std::panic;\n \n use rustc_hash::FxHashSet;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n+use triomphe::Arc;\n \n pub use crate::{\n     change::Change,"}, {"sha": "83c7051646ed834cdd423b893c1bf428774d9096", "filename": "crates/hir-def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -29,6 +29,7 @@ once_cell = \"1.17.0\"\n rustc-hash = \"1.1.0\"\n smallvec.workspace = true\n tracing = \"0.1.35\"\n+triomphe.workspace = true\n \n rustc_abi = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_abi\", default-features = false }\n rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }"}, {"sha": "f93d8d5c78e85a84b223dc28970d5044db9b1427", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -5,7 +5,7 @@ pub mod builtin;\n #[cfg(test)]\n mod tests;\n \n-use std::{hash::Hash, ops, sync::Arc};\n+use std::{hash::Hash, ops};\n \n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n@@ -21,6 +21,7 @@ use syntax::{\n     ast::{self, HasAttrs, IsString},\n     AstPtr, AstToken, SmolStr, TextRange, TextSize,\n };\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "c2a27cd82ba1c4e845cc71da3208f136ee4a05d7", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -6,7 +6,7 @@ mod tests;\n pub mod scope;\n mod pretty;\n \n-use std::{ops::Index, sync::Arc};\n+use std::ops::Index;\n \n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n@@ -16,6 +16,7 @@ use la_arena::{Arena, ArenaMap};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstPtr, SyntaxNodePtr};\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "0ecad857a44ff07cc6c1a9dc90bc9736daa8ba03", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{mem, sync::Arc};\n+use std::mem;\n \n use base_db::CrateId;\n use either::Either;\n@@ -22,6 +22,7 @@ use syntax::{\n     },\n     AstNode, AstPtr, SyntaxNodePtr,\n };\n+use triomphe::Arc;\n \n use crate::{\n     body::{Body, BodyDiagnostic, BodySourceMap, ExprPtr, LabelPtr, PatPtr},"}, {"sha": "0340bd18c2aa73a986dfc2001424f04fa077ee1f", "filename": "crates/hir-def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,8 @@\n //! Name resolution for expressions.\n-use std::sync::Arc;\n-\n use hir_expand::name::Name;\n use la_arena::{Arena, Idx, IdxRange, RawIdx};\n use rustc_hash::FxHashMap;\n+use triomphe::Arc;\n \n use crate::{\n     body::Body,"}, {"sha": "de67f0b23cfc6e6440e61badb26b0ae6c5ca691f", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,14 +2,13 @@\n \n pub mod adt;\n \n-use std::sync::Arc;\n-\n use hir_expand::{\n     name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId, MacroCallKind, MacroDefKind,\n };\n use intern::Interned;\n use smallvec::SmallVec;\n use syntax::{ast, Parse};\n+use triomphe::Arc;\n \n use crate::{\n     attr::Attrs,"}, {"sha": "6db5abccc9210097e353488bb7d333479fdf682c", "filename": "crates/hir-def/src/data/adt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,7 +1,5 @@\n //! Defines hir-level representation of structs, enums and unions\n \n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use bitflags::bitflags;\n use cfg::CfgOptions;\n@@ -15,6 +13,7 @@ use intern::Interned;\n use la_arena::{Arena, ArenaMap};\n use rustc_abi::{Align, Integer, IntegerType, ReprFlags, ReprOptions};\n use syntax::ast::{self, HasName, HasVisibility};\n+use triomphe::Arc;\n \n use crate::{\n     builtin_type::{BuiltinInt, BuiltinUint},"}, {"sha": "98db5edccc69a07be504353dcd11a648b4d520e6", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,12 +1,11 @@\n //! Defines database & queries for name resolution.\n-use std::sync::Arc;\n-\n use base_db::{salsa, CrateId, SourceDatabase, Upcast};\n use either::Either;\n use hir_expand::{db::ExpandDatabase, HirFileId};\n use intern::Interned;\n use la_arena::ArenaMap;\n use syntax::{ast, AstPtr};\n+use triomphe::Arc;\n \n use crate::{\n     attr::{Attrs, AttrsWithOwner},"}, {"sha": "c79c1709630592bc66e31cfc6cd744a1e5a67a9c", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,8 +3,6 @@\n //! generic parameters. See also the `Generics` type and the `generics_of` query\n //! in rustc.\n \n-use std::sync::Arc;\n-\n use base_db::FileId;\n use either::Either;\n use hir_expand::{\n@@ -16,6 +14,7 @@ use la_arena::{Arena, ArenaMap, Idx};\n use once_cell::unsync::Lazy;\n use stdx::impl_from;\n use syntax::ast::{self, HasGenericParams, HasName, HasTypeBounds};\n+use triomphe::Arc;\n \n use crate::{\n     child_by_source::ChildBySource,"}, {"sha": "4ea807e7d585f0cbdd82e14effde7af99375df42", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,13 +1,14 @@\n //! A map of all publicly exported items in a crate.\n \n-use std::{fmt, hash::BuildHasherDefault, sync::Arc};\n+use std::{fmt, hash::BuildHasherDefault};\n \n use base_db::CrateId;\n use fst::{self, Streamer};\n use hir_expand::name::Name;\n use indexmap::{map::Entry, IndexMap};\n use itertools::Itertools;\n use rustc_hash::{FxHashSet, FxHasher};\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase, item_scope::ItemInNs, visibility::Visibility, AssocItemId, ModuleDefId,"}, {"sha": "c332cc28c3c17b8cfc1b512a4454a9bc56687ea9", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -40,7 +40,6 @@ use std::{\n     hash::{Hash, Hasher},\n     marker::PhantomData,\n     ops::Index,\n-    sync::Arc,\n };\n \n use ast::{AstNode, HasName, StructKind};\n@@ -60,6 +59,7 @@ use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n use stdx::never;\n use syntax::{ast, match_ast, SyntaxKind};\n+use triomphe::Arc;\n \n use crate::{\n     attr::Attrs,"}, {"sha": "46633667ed3e2f9a720eb3f4c8dd7c0383c59ac6", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! AST -> `ItemTree` lowering code.\n \n-use std::{collections::hash_map::Entry, sync::Arc};\n+use std::collections::hash_map::Entry;\n \n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n use syntax::ast::{self, HasModuleItem, HasTypeBounds};"}, {"sha": "253e2daeddf6881700eed13119c7429a35df0e9f", "filename": "crates/hir-def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flang_item.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,10 +2,9 @@\n //!\n //! This attribute to tell the compiler about semi built-in std library\n //! features, such as Fn family of traits.\n-use std::sync::Arc;\n-\n use rustc_hash::FxHashMap;\n use syntax::SmolStr;\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase, path::Path, AdtId, AssocItemId, AttrDefId, CrateId, EnumId, EnumVariantId,"}, {"sha": "66388552322a870506cb6084c653fa985a61560c", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -49,17 +49,15 @@ pub mod find_path;\n pub mod import_map;\n \n pub use rustc_abi as layout;\n+use triomphe::Arc;\n \n #[cfg(test)]\n mod test_db;\n #[cfg(test)]\n mod macro_expansion_tests;\n mod pretty;\n \n-use std::{\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n-};\n+use std::hash::{Hash, Hasher};\n \n use base_db::{impl_intern_key, salsa, CrateId, ProcMacroKind};\n use hir_expand::{"}, {"sha": "af623fd0e5d4dd405029b58e646f636dda926257", "filename": "crates/hir-def/src/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flower.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,8 @@\n //! Context for lowering paths.\n-use std::sync::Arc;\n-\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile};\n use once_cell::unsync::OnceCell;\n use syntax::ast;\n+use triomphe::Arc;\n \n use crate::{db::DefDatabase, path::Path};\n "}, {"sha": "c48c0c1aee599f5b97c4812d9cb1550c871917f4", "filename": "crates/hir-def/src/macro_expansion_tests/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -14,7 +14,7 @@ mod builtin_fn_macro;\n mod builtin_derive_macro;\n mod proc_macros;\n \n-use std::{iter, ops::Range, sync::Arc};\n+use std::{iter, ops::Range, sync};\n \n use ::mbe::TokenMap;\n use base_db::{fixture::WithFixture, ProcMacro, SourceDatabase};\n@@ -50,7 +50,7 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n         ProcMacro {\n             name: \"identity_when_valid\".into(),\n             kind: base_db::ProcMacroKind::Attr,\n-            expander: Arc::new(IdentityWhenValidProcMacroExpander),\n+            expander: sync::Arc::new(IdentityWhenValidProcMacroExpander),\n         },\n     )];\n     let db = TestDB::with_files_extra_proc_macros(ra_fixture, extra_proc_macros);"}, {"sha": "803342fdab50c41a39de6dab8f12efa3be1aacda", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -57,7 +57,7 @@ mod path_resolution;\n #[cfg(test)]\n mod tests;\n \n-use std::{cmp::Ord, ops::Deref, sync::Arc};\n+use std::{cmp::Ord, ops::Deref};\n \n use base_db::{CrateId, Edition, FileId};\n use hir_expand::{name::Name, InFile, MacroCallId, MacroDefId};\n@@ -67,6 +67,7 @@ use profile::Count;\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n use syntax::{ast, SmolStr};\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "3ec33f663a3d69e4f2d92daf6694c5a9c601a19a", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -26,6 +26,7 @@ use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::always;\n use syntax::{ast, SmolStr};\n+use triomphe::Arc;\n \n use crate::{\n     attr::Attrs,\n@@ -476,10 +477,7 @@ impl DefCollector<'_> {\n                         directive.module_id,\n                         MacroCallKind::Attr {\n                             ast_id: ast_id.ast_id,\n-                            attr_args: std::sync::Arc::new((\n-                                tt::Subtree::empty(),\n-                                Default::default(),\n-                            )),\n+                            attr_args: Arc::new((tt::Subtree::empty(), Default::default())),\n                             invoc_attr_index: attr.id,\n                         },\n                         attr.path().clone(),"}, {"sha": "dd7c3c36306238a21cbf024bb38a38762ac068c8", "filename": "crates/hir-def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -4,10 +4,9 @@ mod macros;\n mod mod_resolution;\n mod primitives;\n \n-use std::sync::Arc;\n-\n use base_db::{fixture::WithFixture, SourceDatabase};\n use expect_test::{expect, Expect};\n+use triomphe::Arc;\n \n use crate::{db::DefDatabase, test_db::TestDB};\n "}, {"sha": "4931c36bbca92d0eab71ac71ce91b3f30f5fbd99", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,5 @@\n-use std::sync::Arc;\n-\n use base_db::SourceDatabaseExt;\n+use triomphe::Arc;\n \n use crate::{db::DefDatabase, AdtId, ModuleDefId};\n "}, {"sha": "45ec454b9ebc840b4653eadcbe681bb4a096f64e", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,12 +1,13 @@\n //! Name resolution fa\u00e7ade.\n-use std::{fmt, hash::BuildHasherDefault, sync::Arc};\n+use std::{fmt, hash::BuildHasherDefault};\n \n use base_db::CrateId;\n use hir_expand::name::{name, Name};\n use indexmap::IndexMap;\n use intern::Interned;\n use rustc_hash::FxHashSet;\n use smallvec::{smallvec, SmallVec};\n+use triomphe::Arc;\n \n use crate::{\n     body::scope::{ExprScopes, ScopeId},"}, {"sha": "d4b403136429d9a44a3dae4d466f5be7ecd08aff", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,6 @@\n //! Database used for testing `hir_def`.\n \n-use std::{\n-    fmt, panic,\n-    sync::{Arc, Mutex},\n-};\n+use std::{fmt, panic, sync::Mutex};\n \n use base_db::{\n     salsa::{self, Durability},\n@@ -13,6 +10,7 @@ use base_db::{\n use hir_expand::{db::ExpandDatabase, InFile};\n use rustc_hash::FxHashSet;\n use syntax::{algo, ast, AstNode};\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "30f48de61f2e86bbe51292586240e551b710787c", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,10 +1,11 @@\n //! Defines hir-level representation of visibility (e.g. `pub` and `pub(crate)`).\n \n-use std::{iter, sync::Arc};\n+use std::iter;\n \n use hir_expand::{hygiene::Hygiene, InFile};\n use la_arena::ArenaMap;\n use syntax::ast;\n+use triomphe::Arc;\n \n use crate::{\n     db::DefDatabase,"}, {"sha": "40d8659f25bad5458f9225692f7840faba631484", "filename": "crates/hir-expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -22,6 +22,7 @@ hashbrown = { version = \"0.12.1\", features = [\n     \"inline-more\",\n ], default-features = false }\n smallvec.workspace = true\n+triomphe.workspace = true\n \n # local deps\n stdx.workspace = true"}, {"sha": "3ff18e982e186c1c17c18f13a2eacfbbe54e9e6f", "filename": "crates/hir-expand/src/attrs.rs", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fattrs.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,5 +1,5 @@\n //! A higher level attributes based on TokenTree, with also some shortcuts.\n-use std::{fmt, ops, sync::Arc};\n+use std::{fmt, ops};\n \n use base_db::CrateId;\n use cfg::CfgExpr;\n@@ -8,6 +8,7 @@ use intern::Interned;\n use mbe::{syntax_node_to_token_tree, DelimiterKind, Punct};\n use smallvec::{smallvec, SmallVec};\n use syntax::{ast, match_ast, AstNode, SmolStr, SyntaxNode};\n+use triomphe::Arc;\n \n use crate::{\n     db::ExpandDatabase,\n@@ -50,7 +51,9 @@ impl RawAttrs {\n                     path: Interned::new(ModPath::from(crate::name!(doc))),\n                 }),\n             })\n-            .collect::<Arc<_>>();\n+            .collect::<Vec<_>>();\n+        // FIXME: use `Arc::from_iter` when it becomes available\n+        let entries: Arc<[Attr]> = Arc::from(entries);\n \n         Self { entries: if entries.is_empty() { None } else { Some(entries) } }\n     }\n@@ -68,7 +71,7 @@ impl RawAttrs {\n             (Some(a), Some(b)) => {\n                 let last_ast_index = a.last().map_or(0, |it| it.id.ast_index() + 1) as u32;\n                 Self {\n-                    entries: Some(\n+                    entries: Some(Arc::from(\n                         a.iter()\n                             .cloned()\n                             .chain(b.iter().map(|it| {\n@@ -78,8 +81,9 @@ impl RawAttrs {\n                                         << AttrId::AST_INDEX_BITS;\n                                 it\n                             }))\n-                            .collect(),\n-                    ),\n+                            // FIXME: use `Arc::from_iter` when it becomes available\n+                            .collect::<Vec<_>>(),\n+                    )),\n                 }\n             }\n         }\n@@ -96,48 +100,51 @@ impl RawAttrs {\n         }\n \n         let crate_graph = db.crate_graph();\n-        let new_attrs = self\n-            .iter()\n-            .flat_map(|attr| -> SmallVec<[_; 1]> {\n-                let is_cfg_attr =\n-                    attr.path.as_ident().map_or(false, |name| *name == crate::name![cfg_attr]);\n-                if !is_cfg_attr {\n-                    return smallvec![attr.clone()];\n-                }\n-\n-                let subtree = match attr.token_tree_value() {\n-                    Some(it) => it,\n-                    _ => return smallvec![attr.clone()],\n-                };\n-\n-                let (cfg, parts) = match parse_cfg_attr_input(subtree) {\n-                    Some(it) => it,\n-                    None => return smallvec![attr.clone()],\n-                };\n-                let index = attr.id;\n-                let attrs =\n-                    parts.enumerate().take(1 << AttrId::CFG_ATTR_BITS).filter_map(|(idx, attr)| {\n-                        let tree = Subtree {\n-                            delimiter: tt::Delimiter::unspecified(),\n-                            token_trees: attr.to_vec(),\n-                        };\n-                        // FIXME hygiene\n-                        let hygiene = Hygiene::new_unhygienic();\n-                        Attr::from_tt(db, &tree, &hygiene, index.with_cfg_attr(idx))\n-                    });\n-\n-                let cfg_options = &crate_graph[krate].cfg_options;\n-                let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n-                let cfg = CfgExpr::parse(&cfg);\n-                if cfg_options.check(&cfg) == Some(false) {\n-                    smallvec![]\n-                } else {\n-                    cov_mark::hit!(cfg_attr_active);\n-\n-                    attrs.collect()\n-                }\n-            })\n-            .collect();\n+        let new_attrs = Arc::from(\n+            self.iter()\n+                .flat_map(|attr| -> SmallVec<[_; 1]> {\n+                    let is_cfg_attr =\n+                        attr.path.as_ident().map_or(false, |name| *name == crate::name![cfg_attr]);\n+                    if !is_cfg_attr {\n+                        return smallvec![attr.clone()];\n+                    }\n+\n+                    let subtree = match attr.token_tree_value() {\n+                        Some(it) => it,\n+                        _ => return smallvec![attr.clone()],\n+                    };\n+\n+                    let (cfg, parts) = match parse_cfg_attr_input(subtree) {\n+                        Some(it) => it,\n+                        None => return smallvec![attr.clone()],\n+                    };\n+                    let index = attr.id;\n+                    let attrs = parts.enumerate().take(1 << AttrId::CFG_ATTR_BITS).filter_map(\n+                        |(idx, attr)| {\n+                            let tree = Subtree {\n+                                delimiter: tt::Delimiter::unspecified(),\n+                                token_trees: attr.to_vec(),\n+                            };\n+                            // FIXME hygiene\n+                            let hygiene = Hygiene::new_unhygienic();\n+                            Attr::from_tt(db, &tree, &hygiene, index.with_cfg_attr(idx))\n+                        },\n+                    );\n+\n+                    let cfg_options = &crate_graph[krate].cfg_options;\n+                    let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg.to_vec() };\n+                    let cfg = CfgExpr::parse(&cfg);\n+                    if cfg_options.check(&cfg) == Some(false) {\n+                        smallvec![]\n+                    } else {\n+                        cov_mark::hit!(cfg_attr_active);\n+\n+                        attrs.collect()\n+                    }\n+                })\n+                // FIXME: use `Arc::from_iter` when it becomes available\n+                .collect::<Vec<_>>(),\n+        );\n \n         RawAttrs { entries: Some(new_attrs) }\n     }"}, {"sha": "965dfa824d8f9041a808b1826b7b8886400d2b67", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,7 +1,5 @@\n //! Defines database & queries for macro expansion.\n \n-use std::sync::Arc;\n-\n use base_db::{salsa, Edition, SourceDatabase};\n use either::Either;\n use limit::Limit;\n@@ -11,6 +9,7 @@ use syntax::{\n     ast::{self, HasAttrs, HasDocComments},\n     AstNode, GreenNode, Parse, SyntaxError, SyntaxNode, SyntaxToken, T,\n };\n+use triomphe::Arc;\n \n use crate::{\n     ast_id_map::AstIdMap, builtin_attr_macro::pseudo_derive_attr_expansion,"}, {"sha": "59a92ff0ab61253eddb5dfccedebe6483142356b", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -18,10 +18,9 @@\n //!\n //!\n //! See the full discussion : <https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Eager.20expansion.20of.20built-in.20macros>\n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use syntax::{ted, Parse, SyntaxNode};\n+use triomphe::Arc;\n \n use crate::{\n     ast::{self, AstNode},"}, {"sha": "10f8fe9cec428f108f2e4cc001a437bfb62d635f", "filename": "crates/hir-expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,8 +2,6 @@\n //!\n //! Specifically, `ast` + `Hygiene` allows you to create a `Name`. Note that, at\n //! this moment, this is horribly incomplete and handles only `$crate`.\n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use db::TokenExpander;\n use either::Either;\n@@ -12,6 +10,7 @@ use syntax::{\n     ast::{self, HasDocComments},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n+use triomphe::Arc;\n \n use crate::{\n     db::{self, ExpandDatabase},"}, {"sha": "c24887e15ff1a44de9a3d3ee92d0c1610ba98f56", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -24,8 +24,9 @@ use mbe::TokenMap;\n pub use mbe::{Origin, ValueResult};\n \n use ::tt::token_id as tt;\n+use triomphe::Arc;\n \n-use std::{fmt, hash::Hash, iter, sync::Arc};\n+use std::{fmt, hash::Hash, iter};\n \n use base_db::{\n     impl_intern_key,"}, {"sha": "51d69d103ad62829deb691f85124d23697179286", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -28,6 +28,7 @@ chalk-recursive = { version = \"0.89.0\", default-features = false }\n chalk-derive = \"0.89.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.17.0\"\n+triomphe.workspace = true\n typed-arena = \"2.0.1\"\n rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n "}, {"sha": "f5b3f176b12e5a4fb50a44c57d6d3ecae32a78bf", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,12 +3,11 @@\n //! reference to a type with the field `bar`. This is an approximation of the\n //! logic in rustc (which lives in rustc_hir_analysis/check/autoderef.rs).\n \n-use std::sync::Arc;\n-\n use chalk_ir::cast::Cast;\n use hir_def::lang_item::LangItem;\n use hir_expand::name::name;\n use limit::Limit;\n+use triomphe::Arc;\n \n use crate::{\n     db::HirDatabase, infer::unify::InferenceTable, Canonical, Goal, Interner, ProjectionTyExt,"}, {"sha": "d68703ce1d47c915f696e8e7d732fa61d648f010", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -391,7 +391,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn generator_datum(\n         &self,\n         id: chalk_ir::GeneratorId<Interner>,\n-    ) -> std::sync::Arc<chalk_solve::rust_ir::GeneratorDatum<Interner>> {\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorDatum<Interner>> {\n         let (parent, expr) = self.db.lookup_intern_generator(id.into());\n \n         // We fill substitution with unknown type, because we only need to know whether the generic\n@@ -432,7 +432,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn generator_witness_datum(\n         &self,\n         id: chalk_ir::GeneratorId<Interner>,\n-    ) -> std::sync::Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<Interner>> {\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<Interner>> {\n         // FIXME: calculate inner types\n         let inner_types =\n             rust_ir::GeneratorWitnessExistential { types: wrap_empty_binders(vec![]) };"}, {"sha": "b37d90c75895af0c9daefff6dbf1ac68ddc7c875", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,7 +1,7 @@\n //! The home of `HirDatabase`, which is the Salsa database containing all the\n //! type inference-related queries.\n \n-use std::sync::Arc;\n+use std::sync;\n \n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n@@ -11,6 +11,7 @@ use hir_def::{\n };\n use la_arena::ArenaMap;\n use smallvec::SmallVec;\n+use triomphe::Arc;\n \n use crate::{\n     chalk_db,\n@@ -154,24 +155,34 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn intern_generator(&self, id: (DefWithBodyId, ExprId)) -> InternedGeneratorId;\n \n     #[salsa::invoke(chalk_db::associated_ty_data_query)]\n-    fn associated_ty_data(&self, id: chalk_db::AssocTypeId) -> Arc<chalk_db::AssociatedTyDatum>;\n+    fn associated_ty_data(\n+        &self,\n+        id: chalk_db::AssocTypeId,\n+    ) -> sync::Arc<chalk_db::AssociatedTyDatum>;\n \n     #[salsa::invoke(chalk_db::trait_datum_query)]\n-    fn trait_datum(&self, krate: CrateId, trait_id: chalk_db::TraitId)\n-        -> Arc<chalk_db::TraitDatum>;\n+    fn trait_datum(\n+        &self,\n+        krate: CrateId,\n+        trait_id: chalk_db::TraitId,\n+    ) -> sync::Arc<chalk_db::TraitDatum>;\n \n     #[salsa::invoke(chalk_db::struct_datum_query)]\n     fn struct_datum(\n         &self,\n         krate: CrateId,\n         struct_id: chalk_db::AdtId,\n-    ) -> Arc<chalk_db::StructDatum>;\n+    ) -> sync::Arc<chalk_db::StructDatum>;\n \n     #[salsa::invoke(chalk_db::impl_datum_query)]\n-    fn impl_datum(&self, krate: CrateId, impl_id: chalk_db::ImplId) -> Arc<chalk_db::ImplDatum>;\n+    fn impl_datum(\n+        &self,\n+        krate: CrateId,\n+        impl_id: chalk_db::ImplId,\n+    ) -> sync::Arc<chalk_db::ImplDatum>;\n \n     #[salsa::invoke(chalk_db::fn_def_datum_query)]\n-    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk_db::FnDefDatum>;\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> sync::Arc<chalk_db::FnDefDatum>;\n \n     #[salsa::invoke(chalk_db::fn_def_variance_query)]\n     fn fn_def_variance(&self, fn_def_id: FnDefId) -> chalk_db::Variances;\n@@ -184,7 +195,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         &self,\n         krate: CrateId,\n         id: chalk_db::AssociatedTyValueId,\n-    ) -> Arc<chalk_db::AssociatedTyValue>;\n+    ) -> sync::Arc<chalk_db::AssociatedTyValue>;\n \n     #[salsa::invoke(crate::traits::normalize_projection_query)]\n     #[salsa::transparent]"}, {"sha": "ab34dc88d87bc6c7c0bbb815b32a72308532645d", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,7 +3,6 @@\n //! fields, etc.\n \n use std::fmt;\n-use std::sync::Arc;\n \n use either::Either;\n use hir_def::lang_item::LangItem;\n@@ -12,6 +11,7 @@ use hir_def::{ItemContainerId, Lookup};\n use hir_expand::name;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n+use triomphe::Arc;\n use typed_arena::Arena;\n \n use crate::{"}, {"sha": "0e9b7206d04ac45d8819795de8bce7cedb3e8a75", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -13,7 +13,6 @@\n //! to certain types. To record this, we use the union-find implementation from\n //! the `ena` crate, which is extracted from rustc.\n \n-use std::sync::Arc;\n use std::{convert::identity, ops::Index};\n \n use chalk_ir::{\n@@ -39,6 +38,7 @@ use hir_expand::name::{name, Name};\n use la_arena::{ArenaMap, Entry};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::{always, never};\n+use triomphe::Arc;\n \n use crate::{\n     db::HirDatabase, fold_tys, infer::coerce::CoerceMany, lower::ImplTraitLoweringMode,"}, {"sha": "e9c94449cfc71c3936a64b8c4fa21ae45bdf3fe8", "filename": "crates/hir-ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -5,14 +5,15 @@\n //! See <https://doc.rust-lang.org/nomicon/coercions.html> and\n //! `rustc_hir_analysis/check/coercion.rs`.\n \n-use std::{iter, sync::Arc};\n+use std::iter;\n \n use chalk_ir::{cast::Cast, BoundVar, Goal, Mutability, TyKind, TyVariableKind};\n use hir_def::{\n     hir::ExprId,\n     lang_item::{LangItem, LangItemTarget},\n };\n use stdx::always;\n+use triomphe::Arc;\n \n use crate::{\n     autoderef::{Autoderef, AutoderefKind},"}, {"sha": "96218e4fb094d18d3d26abb7f33faee57d2babdf", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,7 +3,6 @@\n use std::{\n     iter::{repeat, repeat_with},\n     mem,\n-    sync::Arc,\n };\n \n use chalk_ir::{\n@@ -21,6 +20,7 @@ use hir_def::{\n use hir_expand::name::{name, Name};\n use stdx::always;\n use syntax::ast::RangeOp;\n+use triomphe::Arc;\n \n use crate::{\n     autoderef::{builtin_deref, deref_by_trait, Autoderef},"}, {"sha": "b735a11adfbfefcdb97556477d37badb09426e25", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! Unification and canonicalization logic.\n \n-use std::{fmt, iter, mem, sync::Arc};\n+use std::{fmt, iter, mem};\n \n use chalk_ir::{\n     cast::Cast, fold::TypeFoldable, interner::HasInterner, zip::Zip, CanonicalVarKind, FloatTy,\n@@ -11,6 +11,7 @@ use either::Either;\n use ena::unify::UnifyKey;\n use hir_expand::name;\n use stdx::never;\n+use triomphe::Arc;\n \n use super::{InferOk, InferResult, InferenceContext, TypeError};\n use crate::{"}, {"sha": "89f7d9c4f4abc2d0b534eb520da147087258bdf9", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -7,7 +7,8 @@ use chalk_ir::{Goal, GoalData};\n use hir_def::TypeAliasId;\n use intern::{impl_internable, Interned};\n use smallvec::SmallVec;\n-use std::{fmt, sync::Arc};\n+use std::fmt;\n+use triomphe::Arc;\n \n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Interner;"}, {"sha": "f74a2253a424deb20b1b74ccefeefaf7c1acc505", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,7 +1,5 @@\n //! Compute the binary representation of a type\n \n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use chalk_ir::{AdtId, TyKind};\n use hir_def::{\n@@ -13,6 +11,7 @@ use hir_def::{\n };\n use la_arena::{Idx, RawIdx};\n use stdx::never;\n+use triomphe::Arc;\n \n use crate::{\n     consteval::try_const_usize, db::HirDatabase, infer::normalize, layout::adt::struct_variant_idx,"}, {"sha": "04b940afbe8f8fe45d8a913ee51f309e1eb39521", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,8 @@\n //! Target dependent parameters needed for layouts\n \n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use hir_def::layout::TargetDataLayout;\n+use triomphe::Arc;\n \n use crate::db::HirDatabase;\n "}, {"sha": "6e726042f6cf4f0cd836370da0f88ca66e3329e1", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -35,7 +35,7 @@ mod tests;\n #[cfg(test)]\n mod test_db;\n \n-use std::{collections::HashMap, hash::Hash, sync::Arc};\n+use std::{collections::HashMap, hash::Hash};\n \n use chalk_ir::{\n     fold::{Shift, TypeFoldable},\n@@ -50,6 +50,7 @@ use la_arena::{Arena, Idx};\n use mir::{MirEvalError, VTableMap};\n use rustc_hash::FxHashSet;\n use traits::FnTrait;\n+use triomphe::Arc;\n use utils::Generics;\n \n use crate::{\n@@ -289,16 +290,19 @@ impl CallableSig {\n     pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n         CallableSig {\n             // FIXME: what to do about lifetime params? -> return PolyFnSig\n-            params_and_return: fn_ptr\n-                .substitution\n-                .clone()\n-                .shifted_out_to(Interner, DebruijnIndex::ONE)\n-                .expect(\"unexpected lifetime vars in fn ptr\")\n-                .0\n-                .as_slice(Interner)\n-                .iter()\n-                .map(|arg| arg.assert_ty_ref(Interner).clone())\n-                .collect(),\n+            // FIXME: use `Arc::from_iter` when it becomes available\n+            params_and_return: Arc::from(\n+                fn_ptr\n+                    .substitution\n+                    .clone()\n+                    .shifted_out_to(Interner, DebruijnIndex::ONE)\n+                    .expect(\"unexpected lifetime vars in fn ptr\")\n+                    .0\n+                    .as_slice(Interner)\n+                    .iter()\n+                    .map(|arg| arg.assert_ty_ref(Interner).clone())\n+                    .collect::<Vec<_>>(),\n+            ),\n             is_varargs: fn_ptr.sig.variadic,\n             safety: fn_ptr.sig.safety,\n         }"}, {"sha": "4000ba5c14c5084c7ed3fbc8c67091a0231ae4e0", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -8,7 +8,6 @@\n use std::{\n     cell::{Cell, RefCell, RefMut},\n     iter,\n-    sync::Arc,\n };\n \n use base_db::CrateId;\n@@ -39,6 +38,7 @@ use rustc_hash::FxHashSet;\n use smallvec::SmallVec;\n use stdx::{impl_from, never};\n use syntax::ast;\n+use triomphe::Arc;\n \n use crate::{\n     all_super_traits,\n@@ -1441,7 +1441,8 @@ pub(crate) fn generic_predicates_for_param_recover(\n     _param_id: &TypeOrConstParamId,\n     _assoc_name: &Option<Name>,\n ) -> Arc<[Binders<QuantifiedWhereClause>]> {\n-    Arc::new([])\n+    // FIXME: use `Arc::from_iter` when it becomes available\n+    Arc::from(vec![])\n }\n \n pub(crate) fn trait_environment_for_body_query(\n@@ -1579,30 +1580,33 @@ pub(crate) fn generic_defaults_query(\n     let generic_params = generics(db.upcast(), def);\n     let parent_start_idx = generic_params.len_self();\n \n-    let defaults = generic_params\n-        .iter()\n-        .enumerate()\n-        .map(|(idx, (id, p))| {\n-            let p = match p {\n-                TypeOrConstParamData::TypeParamData(p) => p,\n-                TypeOrConstParamData::ConstParamData(_) => {\n-                    // FIXME: implement const generic defaults\n-                    let val = unknown_const_as_generic(\n-                        db.const_param_ty(ConstParamId::from_unchecked(id)),\n-                    );\n-                    return make_binders(db, &generic_params, val);\n-                }\n-            };\n-            let mut ty =\n-                p.default.as_ref().map_or(TyKind::Error.intern(Interner), |t| ctx.lower_ty(t));\n-\n-            // Each default can only refer to previous parameters.\n-            // Type variable default referring to parameter coming\n-            // after it is forbidden (FIXME: report diagnostic)\n-            ty = fallback_bound_vars(ty, idx, parent_start_idx);\n-            crate::make_binders(db, &generic_params, ty.cast(Interner))\n-        })\n-        .collect();\n+    let defaults = Arc::from(\n+        generic_params\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, (id, p))| {\n+                let p = match p {\n+                    TypeOrConstParamData::TypeParamData(p) => p,\n+                    TypeOrConstParamData::ConstParamData(_) => {\n+                        // FIXME: implement const generic defaults\n+                        let val = unknown_const_as_generic(\n+                            db.const_param_ty(ConstParamId::from_unchecked(id)),\n+                        );\n+                        return make_binders(db, &generic_params, val);\n+                    }\n+                };\n+                let mut ty =\n+                    p.default.as_ref().map_or(TyKind::Error.intern(Interner), |t| ctx.lower_ty(t));\n+\n+                // Each default can only refer to previous parameters.\n+                // Type variable default referring to parameter coming\n+                // after it is forbidden (FIXME: report diagnostic)\n+                ty = fallback_bound_vars(ty, idx, parent_start_idx);\n+                crate::make_binders(db, &generic_params, ty.cast(Interner))\n+            })\n+            // FIXME: use `Arc::from_iter` when it becomes available\n+            .collect::<Vec<_>>(),\n+    );\n \n     defaults\n }\n@@ -1615,18 +1619,21 @@ pub(crate) fn generic_defaults_recover(\n     let generic_params = generics(db.upcast(), *def);\n     // FIXME: this code is not covered in tests.\n     // we still need one default per parameter\n-    let defaults = generic_params\n-        .iter_id()\n-        .map(|id| {\n-            let val = match id {\n-                Either::Left(_) => {\n-                    GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner)\n-                }\n-                Either::Right(id) => unknown_const_as_generic(db.const_param_ty(id)),\n-            };\n-            crate::make_binders(db, &generic_params, val)\n-        })\n-        .collect();\n+    let defaults = Arc::from(\n+        generic_params\n+            .iter_id()\n+            .map(|id| {\n+                let val = match id {\n+                    Either::Left(_) => {\n+                        GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner)\n+                    }\n+                    Either::Right(id) => unknown_const_as_generic(db.const_param_ty(id)),\n+                };\n+                crate::make_binders(db, &generic_params, val)\n+            })\n+            // FIXME: use `Arc::from_iter` when it becomes available\n+            .collect::<Vec<_>>(),\n+    );\n \n     defaults\n }"}, {"sha": "912efc3a89605e24d8fe571e129f822d7b587205", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,7 +2,7 @@\n //! For details about how this works in rustc, see the method lookup page in the\n //! [rustc guide](https://rust-lang.github.io/rustc-guide/method-lookup.html)\n //! and the corresponding code mostly in rustc_hir_analysis/check/method/probe.rs.\n-use std::{ops::ControlFlow, sync::Arc};\n+use std::ops::ControlFlow;\n \n use base_db::{CrateId, Edition};\n use chalk_ir::{cast::Cast, Mutability, TyKind, UniverseIndex, WhereClause};\n@@ -17,6 +17,7 @@ use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n use stdx::never;\n+use triomphe::Arc;\n \n use crate::{\n     autoderef::{self, AutoderefKind},\n@@ -166,7 +167,13 @@ impl TraitImpls {\n     ) -> Arc<[Arc<Self>]> {\n         let _p = profile::span(\"trait_impls_in_deps_query\").detail(|| format!(\"{krate:?}\"));\n         let crate_graph = db.crate_graph();\n-        crate_graph.transitive_deps(krate).map(|krate| db.trait_impls_in_crate(krate)).collect()\n+        // FIXME: use `Arc::from_iter` when it becomes available\n+        Arc::from(\n+            crate_graph\n+                .transitive_deps(krate)\n+                .map(|krate| db.trait_impls_in_crate(krate))\n+                .collect::<Vec<_>>(),\n+        )\n     }\n \n     fn shrink_to_fit(&mut self) {"}, {"sha": "b2425d94c61d2857608a9d9c57e366e4d4e9ba7a", "filename": "crates/hir-ty/src/mir/borrowck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,11 +3,12 @@\n // Currently it is an ad-hoc implementation, only useful for mutability analysis. Feel free to remove all of these\n // if needed for implementing a proper borrow checker.\n \n-use std::{iter, sync::Arc};\n+use std::iter;\n \n use hir_def::DefWithBodyId;\n use la_arena::ArenaMap;\n use stdx::never;\n+use triomphe::Arc;\n \n use crate::{db::HirDatabase, ClosureId};\n "}, {"sha": "8ce16df8295875eab61be95a383e8ac0eb3e730e", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! This module provides a MIR interpreter, which is used in const eval.\n \n-use std::{borrow::Cow, collections::HashMap, fmt::Write, iter, ops::Range, sync::Arc};\n+use std::{borrow::Cow, collections::HashMap, fmt::Write, iter, ops::Range};\n \n use base_db::{CrateId, FileId};\n use chalk_ir::{\n@@ -20,6 +20,7 @@ use intern::Interned;\n use la_arena::ArenaMap;\n use rustc_hash::FxHashMap;\n use syntax::{SyntaxNodePtr, TextRange};\n+use triomphe::Arc;\n \n use crate::{\n     consteval::{intern_const_scalar, ConstEvalError},"}, {"sha": "66b1d840bdc28c5ded5bcc700ee3a1ea281380c4", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! This module generates a polymorphic MIR from a hir body\n \n-use std::{fmt::Write, iter, mem, sync::Arc};\n+use std::{fmt::Write, iter, mem};\n \n use base_db::FileId;\n use chalk_ir::{BoundVar, ConstData, DebruijnIndex, TyKind};\n@@ -20,6 +20,7 @@ use hir_expand::name::Name;\n use la_arena::ArenaMap;\n use rustc_hash::FxHashMap;\n use syntax::TextRange;\n+use triomphe::Arc;\n \n use crate::{\n     consteval::ConstEvalError,"}, {"sha": "1276a4c5e14f12bfa2178c8068058c8de49aca61", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,6 @@\n //! Database used for testing `hir`.\n \n-use std::{\n-    fmt, panic,\n-    sync::{Arc, Mutex},\n-};\n+use std::{fmt, panic, sync::Mutex};\n \n use base_db::{\n     salsa::{self, Durability},\n@@ -15,6 +12,7 @@ use rustc_hash::FxHashSet;\n use stdx::hash::NoHashHashMap;\n use syntax::TextRange;\n use test_utils::extract_annotations;\n+use triomphe::Arc;\n \n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,"}, {"sha": "a2adad316969b84a012608ebb307eaf623e9b8f6", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -10,7 +10,7 @@ mod display_source_code;\n mod incremental;\n mod diagnostics;\n \n-use std::{collections::HashMap, env, sync::Arc};\n+use std::{collections::HashMap, env};\n \n use base_db::{fixture::WithFixture, FileRange, SourceDatabaseExt};\n use expect_test::Expect;\n@@ -32,6 +32,7 @@ use syntax::{\n };\n use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};\n use tracing_tree::HierarchicalLayer;\n+use triomphe::Arc;\n \n use crate::{\n     db::HirDatabase,"}, {"sha": "bb15ca8c436a22687e20cf0bda73534173ff58d5", "filename": "crates/hir-ty/src/tests/incremental.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fincremental.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,5 @@\n-use std::sync::Arc;\n-\n use base_db::{fixture::WithFixture, SourceDatabaseExt};\n+use triomphe::Arc;\n \n use crate::{db::HirDatabase, test_db::TestDB};\n "}, {"sha": "2808fe64351f4db1fe1c8e9eb77054f5e2d1b761", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! Trait solving using Chalk.\n \n-use std::{env::var, sync::Arc};\n+use std::env::var;\n \n use chalk_ir::GoalData;\n use chalk_recursive::Cache;\n@@ -13,6 +13,7 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n use stdx::panic_context;\n+use triomphe::Arc;\n \n use crate::{\n     db::HirDatabase, infer::unify::InferenceTable, AliasEq, AliasTy, Canonical, DomainGoal, Goal,"}, {"sha": "a20aff93f19b7fb2c027c60b9efbbf488f4b17d5", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -17,6 +17,7 @@ either = \"1.7.0\"\n arrayvec = \"0.7.2\"\n itertools = \"0.10.5\"\n smallvec.workspace = true\n+triomphe.workspace = true\n once_cell = \"1.17.0\"\n \n # local deps"}, {"sha": "d9cb2a7b6da35179db9e9af868b10cf8d99d89e2", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -33,7 +33,7 @@ pub mod symbols;\n \n mod display;\n \n-use std::{iter, ops::ControlFlow, sync::Arc};\n+use std::{iter, ops::ControlFlow};\n \n use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, CrateOrigin, Edition, FileId, ProcMacroKind};\n@@ -80,6 +80,7 @@ use syntax::{\n     ast::{self, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxNode, SyntaxNodePtr, TextRange, T,\n };\n+use triomphe::Arc;\n \n use crate::db::{DefDatabase, HirDatabase};\n "}, {"sha": "19179d11ef89e816c98e02574ca2f824c37c75d0", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -5,10 +5,7 @@\n //!\n //! So, this modules should not be used during hir construction, it exists\n //! purely for \"IDE needs\".\n-use std::{\n-    iter::{self, once},\n-    sync::Arc,\n-};\n+use std::iter::{self, once};\n \n use either::Either;\n use hir_def::{\n@@ -49,6 +46,7 @@ use syntax::{\n     ast::{self, AstNode},\n     SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n+use triomphe::Arc;\n \n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,"}, {"sha": "fccd6d2b6db7a7a165e5c70d7f848a20cb294d29", "filename": "crates/ide-db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -23,6 +23,7 @@ itertools = \"0.10.5\"\n arrayvec = \"0.7.2\"\n indexmap = \"1.9.1\"\n memchr = \"2.5.0\"\n+triomphe.workspace = true\n \n # local deps\n base-db.workspace = true"}, {"sha": "8edda432ce398238a04026dd4591d72f4cb040ba", "filename": "crates/ide-db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fapply_change.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,13 +1,12 @@\n //! Applies changes to the IDE state transactionally.\n \n-use std::sync::Arc;\n-\n use base_db::{\n     salsa::{Database, Durability},\n     Change, SourceRootId,\n };\n use profile::{memory_usage, Bytes};\n use rustc_hash::FxHashSet;\n+use triomphe::Arc;\n \n use crate::{symbol_index::SymbolsDatabase, RootDatabase};\n "}, {"sha": "5263271fa6f9f3bb08a21283ee5e0c4fc9afad82", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -43,13 +43,14 @@ pub mod syntax_helpers {\n     pub use parser::LexedStr;\n }\n \n-use std::{fmt, mem::ManuallyDrop, sync::Arc};\n+use std::{fmt, mem::ManuallyDrop};\n \n use base_db::{\n     salsa::{self, Durability},\n     AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n use hir::db::{DefDatabase, ExpandDatabase, HirDatabase};\n+use triomphe::Arc;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};"}, {"sha": "f58a96d595a8a4c82c0cea53a359b0bf4f9a6f0e", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -4,7 +4,7 @@\n //! get a super-set of matches. Then, we we confirm each match using precise\n //! name resolution.\n \n-use std::{mem, sync::Arc};\n+use std::mem;\n \n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n use hir::{\n@@ -15,6 +15,7 @@ use once_cell::unsync::Lazy;\n use parser::SyntaxKind;\n use stdx::hash::NoHashHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n+use triomphe::Arc;\n \n use crate::{\n     defs::{Definition, NameClass, NameRefClass},"}, {"sha": "fa796ae13b2bb2440c80cb3c142a26381dbfda56", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -25,7 +25,6 @@ use std::{\n     fmt,\n     hash::{Hash, Hasher},\n     mem,\n-    sync::Arc,\n };\n \n use base_db::{\n@@ -40,6 +39,7 @@ use hir::{\n };\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n+use triomphe::Arc;\n \n use crate::RootDatabase;\n "}, {"sha": "b8625fc1be92ad2e05fc29686f48834f458827ad", "filename": "crates/ide-ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-ssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-ssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -15,6 +15,7 @@ doctest = false\n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.5\"\n+triomphe.workspace = true\n \n # local deps\n hir.workspace = true"}, {"sha": "424ba3d7fd5067f708622f4acb8a33d0eaeced34", "filename": "crates/ide-ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide-ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Ftests.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,8 +3,8 @@ use ide_db::{\n     base_db::{salsa::Durability, FileId, FilePosition, FileRange, SourceDatabaseExt},\n     FxHashSet,\n };\n-use std::sync::Arc;\n use test_utils::RangeOrOffset;\n+use triomphe::Arc;\n \n use crate::{MatchFinder, SsrRule};\n "}, {"sha": "c3dcb60490c69021d81aec448a3b820ebb2eb0e6", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -23,6 +23,7 @@ pulldown-cmark = { version = \"0.9.1\", default-features = false }\n url = \"2.3.1\"\n dot = \"0.1.4\"\n smallvec.workspace = true\n+triomphe.workspace = true\n \n # local deps\n cfg.workspace = true"}, {"sha": "b84d5df810776683f812fc91427f345d365461a9", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -61,7 +61,7 @@ mod view_item_tree;\n mod shuffle_crate_graph;\n mod fetch_crates;\n \n-use std::{ffi::OsStr, sync::Arc};\n+use std::ffi::OsStr;\n \n use cfg::CfgOptions;\n use fetch_crates::CrateInfo;\n@@ -73,6 +73,7 @@ use ide_db::{\n     symbol_index, FxHashMap, FxIndexSet, LineIndexDatabase,\n };\n use syntax::SourceFile;\n+use triomphe::Arc;\n \n use crate::navigation_target::{ToNav, TryToNav};\n "}, {"sha": "f85700daf1f7849618578242ec7c2360e9d56a54", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,9 +1,8 @@\n-use std::sync::Arc;\n-\n use ide_db::{\n     base_db::{salsa::Durability, CrateGraph, ProcMacros, SourceDatabase},\n     FxHashMap, RootDatabase,\n };\n+use triomphe::Arc;\n \n // Feature: Shuffle Crate Graph\n //"}, {"sha": "deaf3c9c416b48a978de428e1deaa3f84f404d1c", "filename": "crates/ide/src/ssr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fssr.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -56,15 +56,14 @@ pub(crate) fn ssr_assists(\n \n #[cfg(test)]\n mod tests {\n-    use std::sync::Arc;\n-\n     use expect_test::expect;\n     use ide_assists::{Assist, AssistResolveStrategy};\n     use ide_db::{\n         base_db::{fixture::WithFixture, salsa::Durability, FileRange},\n         symbol_index::SymbolsDatabase,\n         FxHashSet, RootDatabase,\n     };\n+    use triomphe::Arc;\n \n     use super::ssr_assists;\n "}, {"sha": "70bff41121d81f6d7e048d704b767a40000945b1", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,4 +1,4 @@\n-use std::{fmt, marker::PhantomData, sync::Arc};\n+use std::{fmt, marker::PhantomData};\n \n use hir::{\n     db::{AstIdMapQuery, AttrsQuery, ParseMacroExpansionQuery},\n@@ -23,6 +23,7 @@ use profile::{memory_usage, Bytes};\n use std::env;\n use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n+use triomphe::Arc;\n \n // Feature: Status\n //"}, {"sha": "8c84461f659f70ac029e5143e8bbae4b820c9f05", "filename": "crates/ide/src/view_crate_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_crate_graph.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,10 +1,9 @@\n-use std::sync::Arc;\n-\n use dot::{Id, LabelText};\n use ide_db::{\n     base_db::{CrateGraph, CrateId, Dependency, SourceDatabase, SourceDatabaseExt},\n     FxHashSet, RootDatabase,\n };\n+use triomphe::Arc;\n \n // Feature: View Crate Graph\n //"}, {"sha": "dcd0d788125543cc565658f3be14a6b5254a610d", "filename": "crates/intern/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fintern%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fintern%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fintern%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -18,3 +18,4 @@ dashmap = { version = \"=5.4.0\", features = [\"raw-api\"] }\n hashbrown = { version = \"0.12.1\", default-features = false }\n once_cell = \"1.17.0\"\n rustc-hash = \"1.1.0\"\n+triomphe.workspace = true"}, {"sha": "d17eddf1560a1800ed1c128c4bf92ba2d7942a22", "filename": "crates/intern/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fintern%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fintern%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fintern%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -6,13 +6,13 @@ use std::{\n     fmt::{self, Debug, Display},\n     hash::{BuildHasherDefault, Hash, Hasher},\n     ops::Deref,\n-    sync::Arc,\n };\n \n use dashmap::{DashMap, SharedValue};\n use hashbrown::HashMap;\n use once_cell::sync::OnceCell;\n use rustc_hash::FxHasher;\n+use triomphe::Arc;\n \n type InternMap<T> = DashMap<Arc<T>, (), BuildHasherDefault<FxHasher>>;\n type Guard<T> = dashmap::RwLockWriteGuard<\n@@ -83,7 +83,7 @@ impl<T: Internable + ?Sized> Drop for Interned<T> {\n     #[inline]\n     fn drop(&mut self) {\n         // When the last `Ref` is dropped, remove the object from the global map.\n-        if Arc::strong_count(&self.arc) == 2 {\n+        if Arc::count(&self.arc) == 2 {\n             // Only `self` and the global map point to the object.\n \n             self.drop_slow();\n@@ -102,7 +102,7 @@ impl<T: Internable + ?Sized> Interned<T> {\n         // FIXME: avoid double lookup\n         let (arc, _) = shard.get_key_value(&self.arc).expect(\"interned value removed prematurely\");\n \n-        if Arc::strong_count(arc) != 2 {\n+        if Arc::count(arc) != 2 {\n             // Another thread has interned another copy\n             return;\n         }"}, {"sha": "d3486e75575b25470940a6d9bf7a5f56311b16e4", "filename": "crates/proc-macro-api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproc-macro-api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproc-macro-api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -22,6 +22,7 @@ object = { version = \"0.30.2\", default-features = false, features = [\n serde.workspace = true\n serde_json = { workspace = true, features = [\"unbounded_depth\"] }\n tracing = \"0.1.37\"\n+triomphe.workspace = true\n memmap2 = \"0.5.4\"\n snap = \"1.1.0\"\n "}, {"sha": "1603458f756ee5dbe48f491d16408992af1d7255", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -12,10 +12,8 @@ mod process;\n mod version;\n \n use paths::AbsPathBuf;\n-use std::{\n-    fmt, io,\n-    sync::{Arc, Mutex},\n-};\n+use std::{fmt, io, sync::Mutex};\n+use triomphe::Arc;\n \n use serde::{Deserialize, Serialize};\n "}, {"sha": "efe61eb8f68dbb8363759750515235735656423d", "filename": "crates/project-model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproject-model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproject-model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -18,6 +18,7 @@ cargo_metadata = \"0.15.0\"\n semver = \"1.0.14\"\n serde_json.workspace = true\n serde.workspace = true\n+triomphe.workspace = true\n anyhow = \"1.0.62\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n "}, {"sha": "bfd2cab31fb89365f6c2223b83795c557236ba51", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,7 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n+use std::{collections::VecDeque, fmt, fs, process::Command, sync};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{\n@@ -14,6 +14,7 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n use semver::Version;\n use stdx::always;\n+use triomphe::Arc;\n \n use crate::{\n     build_scripts::BuildScriptOutput,\n@@ -422,7 +423,7 @@ impl ProjectWorkspace {\n         let outputs = &mut match WorkspaceBuildScripts::run_once(config, &cargo_ws, progress) {\n             Ok(it) => Ok(it.into_iter()),\n             // io::Error is not Clone?\n-            Err(e) => Err(Arc::new(e)),\n+            Err(e) => Err(sync::Arc::new(e)),\n         };\n \n         workspaces"}, {"sha": "c7c2e341276f238cb721fca37c6772b68d6a0441", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -45,6 +45,7 @@ tracing-subscriber = { version = \"0.3.16\", default-features = false, features =\n ] }\n tracing-log = \"0.1.3\"\n tracing-tree = \"0.2.1\"\n+triomphe.workspace = true\n always-assert = \"0.1.2\"\n \n # These dependencies are unused, but we pin them to a version here to restrict them for our transitive dependencies"}, {"sha": "4e8f99971674a2b4dc650d8b3fd655ccc1882b65", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,6 +1,6 @@\n //! Loads a Cargo project into a static instance of analysis, without support\n //! for incorporating changes.\n-use std::{path::Path, sync::Arc};\n+use std::path::Path;\n \n use anyhow::{anyhow, Result};\n use crossbeam_channel::{unbounded, Receiver};\n@@ -11,6 +11,7 @@ use ide_db::{\n };\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n+use triomphe::Arc;\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{load_proc_macro, ProjectFolders, SourceRootConfig};"}, {"sha": "2edb394a0b1fd0024d8ef5fdf400925d3c7156e8", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,11 +1,12 @@\n //! Book keeping for keeping diagnostics easily in sync with the client.\n pub(crate) mod to_proto;\n \n-use std::{mem, sync::Arc};\n+use std::mem;\n \n use ide::FileId;\n use ide_db::FxHashMap;\n use stdx::hash::{NoHashHashMap, NoHashHashSet};\n+use triomphe::Arc;\n \n use crate::lsp_ext;\n "}, {"sha": "0f77eeae4adb2d1ab49ca1ae17b96d6cb7002021", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -3,7 +3,7 @@\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n \n-use std::{sync::Arc, time::Instant};\n+use std::time::Instant;\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n@@ -15,6 +15,7 @@ use proc_macro_api::ProcMacroServer;\n use project_model::{CargoWorkspace, ProjectWorkspace, Target, WorkspaceBuildScripts};\n use rustc_hash::FxHashMap;\n use stdx::hash::NoHashHashMap;\n+use triomphe::Arc;\n use vfs::AnchoredPathBuf;\n \n use crate::{\n@@ -161,9 +162,11 @@ impl GlobalState {\n             source_root_config: SourceRootConfig::default(),\n \n             proc_macro_changed: false,\n-            proc_macro_clients: Arc::new([]),\n+            // FIXME: use `Arc::from_iter` when it becomes available\n+            proc_macro_clients: Arc::from(Vec::new()),\n \n-            flycheck: Arc::new([]),\n+            // FIXME: use `Arc::from_iter` when it becomes available\n+            flycheck: Arc::from(Vec::new()),\n             flycheck_sender,\n             flycheck_receiver,\n "}, {"sha": "ca9ea77f305c296c264f46d2ffb4dcbae44cdff4", "filename": "crates/rust-analyzer/src/handlers/notification.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,14 +1,15 @@\n //! This module is responsible for implementing handlers for Language Server\n //! Protocol. This module specifically handles notifications.\n \n-use std::{ops::Deref, sync::Arc};\n+use std::ops::Deref;\n \n use itertools::Itertools;\n use lsp_types::{\n     CancelParams, DidChangeConfigurationParams, DidChangeTextDocumentParams,\n     DidChangeWatchedFilesParams, DidChangeWorkspaceFoldersParams, DidCloseTextDocumentParams,\n     DidOpenTextDocumentParams, DidSaveTextDocumentParams, WorkDoneProgressCancelParams,\n };\n+use triomphe::Arc;\n use vfs::{AbsPathBuf, ChangeKind, VfsPath};\n \n use crate::{"}, {"sha": "9e9dfaaf5a37d87964b0d59809db397acb1383f2", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -5,7 +5,6 @@ use std::{\n     fs,\n     io::Write as _,\n     process::{self, Stdio},\n-    sync::Arc,\n };\n \n use anyhow::Context;\n@@ -30,6 +29,7 @@ use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n+use triomphe::Arc;\n use vfs::{AbsPath, AbsPathBuf, VfsPath};\n \n use crate::{\n@@ -48,15 +48,17 @@ use crate::{\n };\n \n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_clients = Arc::new([]);\n+    // FIXME: use `Arc::from_iter` when it becomes available\n+    state.proc_macro_clients = Arc::from(Vec::new());\n     state.proc_macro_changed = false;\n \n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string(), ());\n     Ok(())\n }\n \n pub(crate) fn handle_proc_macros_rebuild(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_clients = Arc::new([]);\n+    // FIXME: use `Arc::from_iter` when it becomes available\n+    state.proc_macro_clients = Arc::from(Vec::new());\n     state.proc_macro_changed = false;\n \n     state.fetch_build_data_queue.request_op(\"rebuild proc macros request\".to_string(), ());"}, {"sha": "bd9f471a46d117fe7140245dd5bb2433835ecd76", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -10,15 +10,14 @@\n //! in release mode in VS Code. There's however \"rust-analyzer: Copy Run Command Line\"\n //! which you can use to paste the command in terminal and add `--release` manually.\n \n-use std::sync::Arc;\n-\n use ide::{CallableSnippets, Change, CompletionConfig, FilePosition, TextSize};\n use ide_db::{\n     imports::insert_use::{ImportGranularity, InsertUseConfig},\n     SnippetCap,\n };\n use project_model::CargoConfig;\n use test_utils::project_root;\n+use triomphe::Arc;\n use vfs::{AbsPathBuf, VfsPath};\n \n use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig, ProcMacroServerChoice};"}, {"sha": "15450303ff2508881a9f70a4fee4e3b0b1a11650", "filename": "crates/rust-analyzer/src/line_index.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fline_index.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -5,9 +5,8 @@\n //! This module does line ending conversion and detection (so that we can\n //! convert back to `\\r\\n` on the way out).\n \n-use std::sync::Arc;\n-\n use ide_db::line_index::WideEncoding;\n+use triomphe::Arc;\n \n #[derive(Clone, Copy)]\n pub enum PositionEncoding {"}, {"sha": "9a73da15398302e91f09f69210e6382dd4b56812", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1,8 +1,9 @@\n //! Utilities for LSP-related boilerplate code.\n-use std::{mem, ops::Range, sync::Arc};\n+use std::{mem, ops::Range};\n \n use lsp_server::Notification;\n use lsp_types::request::Request;\n+use triomphe::Arc;\n \n use crate::{\n     from_proto,"}, {"sha": "ea8dbc54388a4cb3d91a0b98ea6c929a53fe61a4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -2,7 +2,6 @@\n //! requests/replies and notifications back to the client.\n use std::{\n     fmt,\n-    sync::Arc,\n     time::{Duration, Instant},\n };\n \n@@ -12,6 +11,7 @@ use flycheck::FlycheckHandle;\n use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n+use triomphe::Arc;\n use vfs::FileId;\n \n use crate::{"}, {"sha": "4c76392a0e7f57b9e1e10d0f14af521415710c70", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -12,7 +12,7 @@\n //! correct. Instead, we try to provide a best-effort service. Even if the\n //! project is currently loading and we don't have a full project model, we\n //! still want to respond to various  requests.\n-use std::{collections::hash_map::Entry, iter, mem, sync::Arc};\n+use std::{collections::hash_map::Entry, iter, mem, sync};\n \n use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n@@ -28,6 +28,7 @@ use itertools::Itertools;\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{PackageRoot, ProjectWorkspace, WorkspaceBuildScripts};\n use syntax::SmolStr;\n+use triomphe::Arc;\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n@@ -415,30 +416,32 @@ impl GlobalState {\n             if self.config.expand_proc_macros() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n \n-                self.proc_macro_clients = self\n-                    .workspaces\n-                    .iter()\n-                    .map(|ws| {\n-                        let path = match self.config.proc_macro_srv() {\n-                            Some(path) => path,\n-                            None => ws.find_sysroot_proc_macro_srv()?,\n-                        };\n-\n-                        tracing::info!(\"Using proc-macro server at {}\", path.display(),);\n-                        ProcMacroServer::spawn(path.clone()).map_err(|err| {\n-                            tracing::error!(\n-                                \"Failed to run proc-macro server from path {}, error: {:?}\",\n-                                path.display(),\n-                                err\n-                            );\n-                            anyhow::anyhow!(\n-                                \"Failed to run proc-macro server from path {}, error: {:?}\",\n-                                path.display(),\n-                                err\n-                            )\n+                // FIXME: use `Arc::from_iter` when it becomes available\n+                self.proc_macro_clients = Arc::from(\n+                    self.workspaces\n+                        .iter()\n+                        .map(|ws| {\n+                            let path = match self.config.proc_macro_srv() {\n+                                Some(path) => path,\n+                                None => ws.find_sysroot_proc_macro_srv()?,\n+                            };\n+\n+                            tracing::info!(\"Using proc-macro server at {}\", path.display(),);\n+                            ProcMacroServer::spawn(path.clone()).map_err(|err| {\n+                                tracing::error!(\n+                                    \"Failed to run proc-macro server from path {}, error: {:?}\",\n+                                    path.display(),\n+                                    err\n+                                );\n+                                anyhow::anyhow!(\n+                                    \"Failed to run proc-macro server from path {}, error: {:?}\",\n+                                    path.display(),\n+                                    err\n+                                )\n+                            })\n                         })\n-                    })\n-                    .collect()\n+                        .collect::<Vec<_>>(),\n+                )\n             };\n         }\n \n@@ -773,14 +776,14 @@ pub(crate) fn load_proc_macro(\n             proc_macro_api::ProcMacroKind::FuncLike => ProcMacroKind::FuncLike,\n             proc_macro_api::ProcMacroKind::Attr => ProcMacroKind::Attr,\n         };\n-        let expander: Arc<dyn ProcMacroExpander> =\n+        let expander: sync::Arc<dyn ProcMacroExpander> =\n             if dummy_replace.iter().any(|replace| &**replace == name) {\n                 match kind {\n-                    ProcMacroKind::Attr => Arc::new(IdentityExpander),\n-                    _ => Arc::new(EmptyExpander),\n+                    ProcMacroKind::Attr => sync::Arc::new(IdentityExpander),\n+                    _ => sync::Arc::new(EmptyExpander),\n                 }\n             } else {\n-                Arc::new(Expander(expander))\n+                sync::Arc::new(Expander(expander))\n             };\n         ProcMacro { name, kind, expander }\n     }"}, {"sha": "60292d2ad18c71c10022a670e9b15dcbfa1b47f5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -1441,9 +1441,8 @@ pub(crate) fn rename_error(err: RenameError) -> crate::LspError {\n \n #[cfg(test)]\n mod tests {\n-    use std::sync::Arc;\n-\n     use ide::Analysis;\n+    use triomphe::Arc;\n \n     use super::*;\n "}, {"sha": "ac5b3058b97a15271cedb64fd123759827825ce7", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -22,6 +22,7 @@ rustc-hash = \"1.1.0\"\n once_cell = \"1.17.0\"\n indexmap = \"1.9.1\"\n smol_str.workspace = true\n+triomphe.workspace = true\n \n parser.workspace = true\n profile.workspace = true"}, {"sha": "efbf87966448a83ecc8fb2f83db466ee143447d1", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7197a27028c2eb791e5e511cd4f90d97c8212520/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=7197a27028c2eb791e5e511cd4f90d97c8212520", "patch": "@@ -43,10 +43,11 @@ pub mod utils;\n pub mod ted;\n pub mod hacks;\n \n-use std::{marker::PhantomData, sync::Arc};\n+use std::marker::PhantomData;\n \n use stdx::format_to;\n use text_edit::Indel;\n+use triomphe::Arc;\n \n pub use crate::{\n     ast::{AstNode, AstToken},"}]}