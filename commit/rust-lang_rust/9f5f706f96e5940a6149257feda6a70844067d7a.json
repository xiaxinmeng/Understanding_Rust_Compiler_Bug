{"sha": "9f5f706f96e5940a6149257feda6a70844067d7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNWY3MDZmOTZlNTk0MGE2MTQ5MjU3ZmVkYTZhNzA4NDQwNjdkN2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-09T16:44:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-08T08:10:48Z"}, "message": "librustc::plugin : make PluginLoader usable for loading argument-specified plugins", "tree": {"sha": "54a91756ca8c772dd7e9cc77ecda5837f1b786a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a91756ca8c772dd7e9cc77ecda5837f1b786a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f5f706f96e5940a6149257feda6a70844067d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f706f96e5940a6149257feda6a70844067d7a", "html_url": "https://github.com/rust-lang/rust/commit/9f5f706f96e5940a6149257feda6a70844067d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f5f706f96e5940a6149257feda6a70844067d7a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efaf613497da355fa3afaeaa75eaf95b55991e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/efaf613497da355fa3afaeaa75eaf95b55991e4e", "html_url": "https://github.com/rust-lang/rust/commit/efaf613497da355fa3afaeaa75eaf95b55991e4e"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "2acefd5a8a6822ff4399aeff1715087563bc9f9b", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f5f706f96e5940a6149257feda6a70844067d7a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5f706f96e5940a6149257feda6a70844067d7a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=9f5f706f96e5940a6149257feda6a70844067d7a", "patch": "@@ -516,6 +516,7 @@ impl<'a> CrateReader<'a> {\n     }\n }\n \n+#[deriving(Copy)]\n pub enum CrateOrString<'a> {\n     Krate(&'a ast::ViewItem),\n     Str(&'a str)"}, {"sha": "a94ddf61a5512a73044f0f6e74403dfa690b9246", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f5f706f96e5940a6149257feda6a70844067d7a/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5f706f96e5940a6149257feda6a70844067d7a/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=9f5f706f96e5940a6149257feda6a70844067d7a", "patch": "@@ -160,6 +160,21 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n+        self.load_plugin(CrateOrString::Krate(vi), plugin_attr, macro_selection, reexport)\n+    }\n+\n+    fn visit_mac(&mut self, _: &ast::Mac) {\n+        // bummer... can't see plugins inside macros.\n+        // do nothing.\n+    }\n+}\n+\n+impl<'a> PluginLoader<'a> {\n+    pub fn load_plugin<'b>(&mut self,\n+                           c: CrateOrString<'b>,\n+                           plugin_attr: Option<P<ast::MetaItem>>,\n+                           macro_selection: Option<HashSet<token::InternedString>>,\n+                           reexport: HashSet<token::InternedString>) {\n         let mut macros = vec![];\n         let mut registrar = None;\n \n@@ -169,13 +184,15 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         };\n         let load_registrar = plugin_attr.is_some();\n \n-        if load_macros && !self.span_whitelist.contains(&vi.span) {\n-            self.sess.span_err(vi.span, \"an `extern crate` loading macros must be at \\\n-                                         the crate root\");\n-        }\n+        if let CrateOrString::Krate(vi) = c {\n+            if load_macros && !self.span_whitelist.contains(&vi.span) {\n+                self.sess.span_err(vi.span, \"an `extern crate` loading macros must be at \\\n+                                             the crate root\");\n+            }\n+       }\n \n         if load_macros || load_registrar {\n-            let pmd = self.reader.read_plugin_metadata(CrateOrString::Krate(vi));\n+            let pmd = self.reader.read_plugin_metadata(c);\n             if load_macros {\n                 macros = pmd.exported_macros();\n             }\n@@ -195,24 +212,17 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         }\n \n         if let Some((lib, symbol)) = registrar {\n-            let fun = self.dylink_registrar(vi, lib, symbol);\n+            let fun = self.dylink_registrar(c, lib, symbol);\n             self.plugins.registrars.push(PluginRegistrar {\n                 fun: fun,\n                 args: plugin_attr.unwrap(),\n             });\n         }\n     }\n \n-    fn visit_mac(&mut self, _: &ast::Mac) {\n-        // bummer... can't see plugins inside macros.\n-        // do nothing.\n-    }\n-}\n-\n-impl<'a> PluginLoader<'a> {\n     // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar(&mut self,\n-                        vi: &ast::ViewItem,\n+    fn dylink_registrar<'b>(&mut self,\n+                        c: CrateOrString<'b>,\n                         path: Path,\n                         symbol: String) -> PluginRegistrarFun {\n         // Make sure the path contains a / or the linker will search for it.\n@@ -223,7 +233,13 @@ impl<'a> PluginLoader<'a> {\n             // this is fatal: there are almost certainly macros we need\n             // inside this crate, so continue would spew \"macro undefined\"\n             // errors\n-            Err(err) => self.sess.span_fatal(vi.span, &err[])\n+            Err(err) => {\n+                if let CrateOrString::Krate(cr) = c {\n+                    self.sess.span_fatal(cr.span, &err[])\n+                } else {\n+                    self.sess.fatal(&err[])\n+                }\n+            }\n         };\n \n         unsafe {\n@@ -233,7 +249,13 @@ impl<'a> PluginLoader<'a> {\n                         mem::transmute::<*mut u8,PluginRegistrarFun>(registrar)\n                     }\n                     // again fatal if we can't register macros\n-                    Err(err) => self.sess.span_fatal(vi.span, &err[])\n+                    Err(err) => {\n+                        if let CrateOrString::Krate(cr) = c {\n+                            self.sess.span_fatal(cr.span, &err[])\n+                        } else {\n+                            self.sess.fatal(&err[])\n+                        }\n+                    }\n                 };\n \n             // Intentionally leak the dynamic library. We can't ever unload it"}]}