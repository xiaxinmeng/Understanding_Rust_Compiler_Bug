{"sha": "4f6f3933ec04df55a39368d591c91cf81d980237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmYzOTMzZWMwNGRmNTVhMzkzNjhkNTkxYzkxY2Y4MWQ5ODAyMzc=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-11T14:04:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:55:56Z"}, "message": "cargo format", "tree": {"sha": "ad9d77f715652be53185c9efa9ebff683ac4c5c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad9d77f715652be53185c9efa9ebff683ac4c5c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6f3933ec04df55a39368d591c91cf81d980237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f3933ec04df55a39368d591c91cf81d980237", "html_url": "https://github.com/rust-lang/rust/commit/4f6f3933ec04df55a39368d591c91cf81d980237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f3933ec04df55a39368d591c91cf81d980237/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "456e72c4e472d9ea0717c64a75bd02e94b6e90e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/456e72c4e472d9ea0717c64a75bd02e94b6e90e8", "html_url": "https://github.com/rust-lang/rust/commit/456e72c4e472d9ea0717c64a75bd02e94b6e90e8"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "f0da3d169f99b9a0c0937937de1458937ffcab70", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f3933ec04df55a39368d591c91cf81d980237/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f3933ec04df55a39368d591c91cf81d980237/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=4f6f3933ec04df55a39368d591c91cf81d980237", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::{InferenceResult, Ty, TypeCtor},\n-    Function, HasSource, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution\n+    Function, HasSource, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution,\n };\n use ra_syntax::ast;\n \n@@ -116,26 +116,25 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 PathSegment { name: name::STD, args_and_bindings: None },\n                 PathSegment { name: name::RESULT_MOD, args_and_bindings: None },\n                 PathSegment { name: name::RESULT_TYPE, args_and_bindings: None },\n-            ]\n+            ],\n         };\n \n         let resolver = self.func.resolver(db);\n-        let std_result_enum = match resolver.resolve_path_segments(db, &std_result_path).into_fully_resolved() {\n-            PerNs { types: Some(Resolution::Def(ModuleDef::Enum(e))), .. } => e,\n-            _ => return,\n-        };\n+        let std_result_enum =\n+            match resolver.resolve_path_segments(db, &std_result_path).into_fully_resolved() {\n+                PerNs { types: Some(Resolution::Def(ModuleDef::Enum(e))), .. } => e,\n+                _ => return,\n+            };\n \n         let std_result_type = std_result_enum.ty(db);\n \n         fn enum_from_type(ty: &Ty) -> Option<Enum> {\n             match ty {\n-                Ty::Apply(t) => {\n-                    match t.ctor {\n-                        TypeCtor::Adt(AdtDef::Enum(e)) => Some(e),\n-                        _ => None,\n-                    }\n-                }\n-                _ => None\n+                Ty::Apply(t) => match t.ctor {\n+                    TypeCtor::Adt(AdtDef::Enum(e)) => Some(e),\n+                    _ => None,\n+                },\n+                _ => None,\n             }\n         }\n "}, {"sha": "0b9bb5a66c55572b0eb4ed2708521f38311d7870", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f3933ec04df55a39368d591c91cf81d980237/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f3933ec04df55a39368d591c91cf81d980237/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=4f6f3933ec04df55a39368d591c91cf81d980237", "patch": "@@ -217,7 +217,8 @@ mod tests {\n     }\n \n     fn check_apply_diagnostic_fix_for_target_file(target_file: &str, fixture: &str, after: &str) {\n-        let (analysis, file_id, target_file_contents) = fixture_with_target_file(fixture, target_file);\n+        let (analysis, file_id, target_file_contents) =\n+            fixture_with_target_file(fixture, target_file);\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n@@ -267,9 +268,9 @@ mod tests {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-// it strips empty lines and leading whitespace. The important part of this test is that the final\n-// `x / y` expr is now wrapped in `Ok(..)`\n+        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+        // it strips empty lines and leading whitespace. The important part of this test is that the final\n+        // `x / y` expr is now wrapped in `Ok(..)`\n         let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n fn div(x: i32, y: i32) -> Result<i32, String> {\n     if y == 0 {\n@@ -299,9 +300,9 @@ fn div(x: i32, y: i32) -> Result<i32, String> {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-// it strips empty lines and leading whitespace. The important part of this test is that the final\n-// expr is now wrapped in `Ok(..)`\n+        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+        // it strips empty lines and leading whitespace. The important part of this test is that the final\n+        // expr is now wrapped in `Ok(..)`\n         let after = r#\"use std::result::Result::{self, Ok, Err};\n fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n@@ -336,9 +337,9 @@ fn div<T>(x: T) -> Result<T, i32> {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n-// The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n-// it strips empty lines and leading whitespace. The important part of this test is that the final\n-// `x / y` expr is now wrapped in `Ok(..)`\n+        // The formatting here is a bit odd due to how the parse_fixture function works in test_utils -\n+        // it strips empty lines and leading whitespace. The important part of this test is that the final\n+        // `x / y` expr is now wrapped in `Ok(..)`\n         let after = r#\"use std::{string::String, result::Result::{self, Ok, Err}};\n type MyResult<T> = Result<T, String>;\n fn div(x: i32, y: i32) -> MyResult<i32> {"}]}