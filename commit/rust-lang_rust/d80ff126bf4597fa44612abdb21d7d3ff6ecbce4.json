{"sha": "d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MGZmMTI2YmY0NTk3ZmE0NDYxMmFiZGIyMWQ3ZDNmZjZlY2JjZTQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T19:50:50Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-24T21:39:43Z"}, "message": "Rename get_len() to get_meta()\n\nThe functions is useful for all kinds of fat pointers, but get_len()\njust feels so wrong for trait object fat pointers. Let's use get_meta()\nbecause that's rather neutral.", "tree": {"sha": "25470f6f36d0f02fba41fa5b446b31c4d1692da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25470f6f36d0f02fba41fa5b446b31c4d1692da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "html_url": "https://github.com/rust-lang/rust/commit/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2375743037fdfcb624917ebf87d8d9a142c3e395", "url": "https://api.github.com/repos/rust-lang/rust/commits/2375743037fdfcb624917ebf87d8d9a142c3e395", "html_url": "https://github.com/rust-lang/rust/commit/2375743037fdfcb624917ebf87d8d9a142c3e395"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "bd3e077aa5570c2858569dcb85116fd3bf4ac7cd", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -886,9 +886,9 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                            &format!(\"comparison of `{}`\", rhs_t),\n                            StrEqFnLangItem);\n         let lhs_data = Load(cx, expr::get_dataptr(cx, lhs));\n-        let lhs_len = Load(cx, expr::get_len(cx, lhs));\n+        let lhs_len = Load(cx, expr::get_meta(cx, lhs));\n         let rhs_data = Load(cx, expr::get_dataptr(cx, rhs));\n-        let rhs_len = Load(cx, expr::get_len(cx, rhs));\n+        let rhs_len = Load(cx, expr::get_meta(cx, rhs));\n         callee::trans_lang_call(cx, did, &[lhs_data, lhs_len, rhs_data, rhs_len], None, debug_loc)\n     }\n \n@@ -910,14 +910,14 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n                     let rhs_str = alloc_ty(cx, ty_str_slice, \"rhs_str\");\n                     Store(cx, GEPi(cx, rhs, &[0, 0]), expr::get_dataptr(cx, rhs_str));\n-                    Store(cx, C_uint(cx.ccx(), pat_len), expr::get_len(cx, rhs_str));\n+                    Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, rhs_str));\n \n                     let lhs_str;\n                     if val_ty(lhs) == val_ty(rhs) {\n                         // Both the discriminant and the pattern are thin pointers\n                         lhs_str = alloc_ty(cx, ty_str_slice, \"lhs_str\");\n                         Store(cx, GEPi(cx, lhs, &[0, 0]), expr::get_dataptr(cx, lhs_str));\n-                        Store(cx, C_uint(cx.ccx(), pat_len), expr::get_len(cx, lhs_str));\n+                        Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, lhs_str));\n                     }\n                     else {\n                         // The discriminant is a fat pointer\n@@ -1196,9 +1196,9 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n                 let scratch = alloca_no_lifetime(bcx, llty, \"__struct_field_fat_ptr\");\n                 let data = adt::trans_field_ptr(bcx, &*repr, struct_val, 0, arg_count);\n-                let len = Load(bcx, expr::get_len(bcx, val.val));\n+                let len = Load(bcx, expr::get_meta(bcx, val.val));\n                 Store(bcx, data, expr::get_dataptr(bcx, scratch));\n-                Store(bcx, len, expr::get_len(bcx, scratch));\n+                Store(bcx, len, expr::get_meta(bcx, scratch));\n                 field_vals.push(scratch);\n             }\n             _ => {}"}, {"sha": "0f53255197ee28cbd2ed593b481ae70f422c755b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -835,7 +835,7 @@ pub fn store_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, dst: ValueRef, t\n \n     if common::type_is_fat_ptr(cx.tcx(), t) {\n         Store(cx, ExtractValue(cx, v, abi::FAT_PTR_ADDR), expr::get_dataptr(cx, dst));\n-        Store(cx, ExtractValue(cx, v, abi::FAT_PTR_EXTRA), expr::get_len(cx, dst));\n+        Store(cx, ExtractValue(cx, v, abi::FAT_PTR_EXTRA), expr::get_meta(cx, dst));\n     } else {\n         let store = Store(cx, from_arg_ty(cx, v, t), to_arg_ty_ptr(cx, dst, t));\n         unsafe {\n@@ -1389,7 +1389,7 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                         arg_scope_id, (data, extra),\n                                                         |(data, extra), bcx, dst| {\n                     Store(bcx, data, expr::get_dataptr(bcx, dst));\n-                    Store(bcx, extra, expr::get_len(bcx, dst));\n+                    Store(bcx, extra, expr::get_meta(bcx, dst));\n                     bcx\n                 }))\n             } else {\n@@ -1420,7 +1420,7 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                 let data = get_param(bcx.fcx.llfn, idx);\n                                 let extra = get_param(bcx.fcx.llfn, idx + 1);\n                                 Store(bcx, data, expr::get_dataptr(bcx, lldest));\n-                                Store(bcx, extra, expr::get_len(bcx, lldest));\n+                                Store(bcx, extra, expr::get_meta(bcx, lldest));\n                                 idx += 2;\n                             } else {\n                                 let datum = datum::Datum::new(\n@@ -1822,7 +1822,7 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n                                                  i);\n             if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n                 Store(bcx, get_param(fcx.llfn, llarg_idx), expr::get_dataptr(bcx, lldestptr));\n-                Store(bcx, get_param(fcx.llfn, llarg_idx + 1), expr::get_len(bcx, lldestptr));\n+                Store(bcx, get_param(fcx.llfn, llarg_idx + 1), expr::get_meta(bcx, lldestptr));\n                 llarg_idx += 2;\n             } else {\n                 let arg = get_param(fcx.llfn, llarg_idx);"}, {"sha": "92b9ed9c3fb937f70e4505429d713ad7602e2366", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -1128,7 +1128,7 @@ pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     if common::type_is_fat_ptr(bcx.tcx(), formal_arg_ty) {\n         llargs.push(Load(bcx, expr::get_dataptr(bcx, val)));\n-        llargs.push(Load(bcx, expr::get_len(bcx, val)));\n+        llargs.push(Load(bcx, expr::get_meta(bcx, val)));\n     } else {\n         llargs.push(val);\n     }"}, {"sha": "68f79dc386ac2da81cf2f871d5697758d1653a4e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -282,7 +282,7 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     return DatumBlock::new(bcx, datum);\n }\n \n-pub fn get_len(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n+pub fn get_meta(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n     GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_EXTRA])\n }\n \n@@ -292,7 +292,7 @@ pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n \n pub fn copy_fat_ptr(bcx: Block, src_ptr: ValueRef, dst_ptr: ValueRef) {\n     Store(bcx, Load(bcx, get_dataptr(bcx, src_ptr)), get_dataptr(bcx, dst_ptr));\n-    Store(bcx, Load(bcx, get_len(bcx, src_ptr)), get_len(bcx, dst_ptr));\n+    Store(bcx, Load(bcx, get_meta(bcx, src_ptr)), get_meta(bcx, dst_ptr));\n }\n \n /// Retrieve the information we are losing (making dynamic) in an unsizing\n@@ -454,7 +454,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // load out the original data pointer so we can repackage\n                 // it.\n                 (Load(bcx, get_dataptr(bcx, source.val)),\n-                Some(Load(bcx, get_len(bcx, source.val))))\n+                Some(Load(bcx, get_meta(bcx, source.val))))\n             } else {\n                 let val = if source.kind.is_by_ref() {\n                     load_ty(bcx, source.val, source.ty)\n@@ -473,7 +473,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let base = PointerCast(bcx, base, ptr_ty);\n \n             Store(bcx, base, get_dataptr(bcx, target.val));\n-            Store(bcx, info, get_len(bcx, target.val));\n+            Store(bcx, info, get_meta(bcx, target.val));\n         }\n \n         // This can be extended to enums and tuples in the future.\n@@ -729,8 +729,8 @@ fn trans_field<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     } else {\n         let scratch = rvalue_scratch_datum(bcx, d.ty, \"\");\n         Store(bcx, d.val, get_dataptr(bcx, scratch.val));\n-        let info = Load(bcx, get_len(bcx, base_datum.val));\n-        Store(bcx, info, get_len(bcx, scratch.val));\n+        let info = Load(bcx, get_meta(bcx, base_datum.val));\n+        Store(bcx, info, get_meta(bcx, scratch.val));\n \n         // Always generate an lvalue datum, because this pointer doesn't own\n         // the data and cleanup is scheduled elsewhere."}, {"sha": "929061b08b8b8a33c3dd5276e91d8fd46d667ac2", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -302,7 +302,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              \"__arg\");\n             if type_is_fat_ptr(ccx.tcx(), passed_arg_tys[i]) {\n                 Store(bcx, llargs_rust[i + offset], expr::get_dataptr(bcx, scratch));\n-                Store(bcx, llargs_rust[i + offset + 1], expr::get_len(bcx, scratch));\n+                Store(bcx, llargs_rust[i + offset + 1], expr::get_meta(bcx, scratch));\n                 offset += 1;\n             } else {\n                 base::store_ty(bcx, llarg_rust, scratch, passed_arg_tys[i]);"}, {"sha": "d049d51d0855edee87fba35318641fc4fd087b95", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -389,7 +389,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let (_, bcx) = if type_is_sized(bcx.tcx(), t) {\n         invoke(bcx, dtor_addr, &[v0], dtor_ty, DebugLoc::None)\n     } else {\n-        let args = [Load(bcx, expr::get_dataptr(bcx, v0)), Load(bcx, expr::get_len(bcx, v0))];\n+        let args = [Load(bcx, expr::get_dataptr(bcx, v0)), Load(bcx, expr::get_meta(bcx, v0))];\n         invoke(bcx, dtor_addr, &args, dtor_ty, DebugLoc::None)\n     };\n "}, {"sha": "a7f99be0762f8e55d97e0c3cc639a5bc5def2d4b", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -449,7 +449,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             } else {\n                 let scratch = rvalue_scratch_datum(bcx, tp_ty, \"tmp\");\n                 Store(bcx, llargs[0], expr::get_dataptr(bcx, scratch.val));\n-                Store(bcx, llargs[1], expr::get_len(bcx, scratch.val));\n+                Store(bcx, llargs[1], expr::get_meta(bcx, scratch.val));\n                 fcx.schedule_lifetime_end(cleanup::CustomScope(cleanup_scope), scratch.val);\n                 scratch.val\n             };"}, {"sha": "397c9c748359556b274f774bae390a319b4b2d1b", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80ff126bf4597fa44612abdb21d7d3ff6ecbce4/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=d80ff126bf4597fa44612abdb21d7d3ff6ecbce4", "patch": "@@ -310,7 +310,7 @@ pub fn get_base_and_len<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ty::TyArray(_, n) => get_fixed_base_and_len(bcx, llval, n),\n         ty::TySlice(_) | ty::TyStr => {\n             let base = Load(bcx, expr::get_dataptr(bcx, llval));\n-            let len = Load(bcx, expr::get_len(bcx, llval));\n+            let len = Load(bcx, expr::get_meta(bcx, llval));\n             (base, len)\n         }\n "}]}