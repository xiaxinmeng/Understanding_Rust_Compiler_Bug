{"sha": "cf4ab38f6774e3b348a04f0ccfed39b32de0d409", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNGFiMzhmNjc3NGUzYjM0OGEwNGYwY2NmZWQzOWIzMmRlMGQ0MDk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-11T06:19:23Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-11T06:19:23Z"}, "message": "Hide parse error in format_snippet()", "tree": {"sha": "7c3a11e7182a5c01d4f0dd133bbc6d054c691038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3a11e7182a5c01d4f0dd133bbc6d054c691038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf4ab38f6774e3b348a04f0ccfed39b32de0d409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4ab38f6774e3b348a04f0ccfed39b32de0d409", "html_url": "https://github.com/rust-lang/rust/commit/cf4ab38f6774e3b348a04f0ccfed39b32de0d409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf4ab38f6774e3b348a04f0ccfed39b32de0d409/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e29fe33304f3108abb36f873aeb631fad506ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e29fe33304f3108abb36f873aeb631fad506ed8", "html_url": "https://github.com/rust-lang/rust/commit/3e29fe33304f3108abb36f873aeb631fad506ed8"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "e24a6c1949cff2b3dddbe41f043afdb240f78f42", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4ab38f6774e3b348a04f0ccfed39b32de0d409/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4ab38f6774e3b348a04f0ccfed39b32de0d409/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cf4ab38f6774e3b348a04f0ccfed39b32de0d409", "patch": "@@ -540,6 +540,7 @@ pub fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     let input = Input::Text(snippet.into());\n     let mut config = config.clone();\n     config.set().write_mode(config::WriteMode::Plain);\n+    config.set().hide_parse_errors(true);\n     match format_input(input, &config, Some(&mut out)) {\n         // `format_input()` returns an empty string on parsing error.\n         Ok(..) if out.is_empty() && !snippet.is_empty() => None,"}]}