{"sha": "26afc4fb91827a174b044ab210cbb2fef1792b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YWZjNGZiOTE4MjdhMTc0YjA0NGFiMjEwY2JiMmZlZjE3OTJiNWI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-10T21:06:03Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-10T21:06:03Z"}, "message": "Allow fallible `lift_to_global` in existential type writeback", "tree": {"sha": "6a007da0f87a2c50ff8be05345aa7dd4d1051882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a007da0f87a2c50ff8be05345aa7dd4d1051882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26afc4fb91827a174b044ab210cbb2fef1792b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26afc4fb91827a174b044ab210cbb2fef1792b5b", "html_url": "https://github.com/rust-lang/rust/commit/26afc4fb91827a174b044ab210cbb2fef1792b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26afc4fb91827a174b044ab210cbb2fef1792b5b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff1bdbd77d29a28a94ff9f5bf1e1c84e5bb6259", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff1bdbd77d29a28a94ff9f5bf1e1c84e5bb6259", "html_url": "https://github.com/rust-lang/rust/commit/cff1bdbd77d29a28a94ff9f5bf1e1c84e5bb6259"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "bf978352faee93b10d07a6bac1eb112377c42220", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/26afc4fb91827a174b044ab210cbb2fef1792b5b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26afc4fb91827a174b044ab210cbb2fef1792b5b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=26afc4fb91827a174b044ab210cbb2fef1792b5b", "patch": "@@ -611,26 +611,33 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            let new = ty::ResolvedOpaqueTy {\n-                concrete_type: definition_ty,\n-                substs: self.tcx().lift_to_global(&opaque_defn.substs).unwrap(),\n-            };\n-\n-            let old = self.tables\n-                .concrete_existential_types\n-                .insert(def_id, new);\n-            if let Some(old) = old {\n-                if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n-                    span_bug!(\n-                        span,\n-                        \"visit_opaque_types tried to write \\\n-                        different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n-                        def_id,\n-                        definition_ty,\n-                        opaque_defn,\n-                        old,\n-                    );\n+            if let Some(substs) = self.tcx().lift_to_global(&opaque_defn.substs) {\n+                let new = ty::ResolvedOpaqueTy {\n+                    concrete_type: definition_ty,\n+                    substs,\n+                };\n+\n+                let old = self.tables\n+                    .concrete_existential_types\n+                    .insert(def_id, new);\n+                if let Some(old) = old {\n+                    if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n+                        span_bug!(\n+                            span,\n+                            \"visit_opaque_types tried to write \\\n+                            different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n+                            def_id,\n+                            definition_ty,\n+                            opaque_defn,\n+                            old,\n+                        );\n+                    }\n                 }\n+            } else {\n+                self.tcx().sess.delay_span_bug(\n+                    span,\n+                    \"cannot lift `opaque_defn` substs to global type context\",\n+                );\n             }\n         }\n     }"}]}