{"sha": "1df384d32d7a33a710acd3f15729b0e4d6f73832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjM4NGQzMmQ3YTMzYTcxMGFjZDNmMTU3MjliMGU0ZDZmNzM4MzI=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-01-07T21:05:32Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-01-07T21:05:32Z"}, "message": "Rename ReprExtern to ReprC, and similarily rename a few other fields and locals that mentioned \"extern repr\"", "tree": {"sha": "df3cfde720b715af146faf7c1698bfea43e48339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df3cfde720b715af146faf7c1698bfea43e48339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df384d32d7a33a710acd3f15729b0e4d6f73832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df384d32d7a33a710acd3f15729b0e4d6f73832", "html_url": "https://github.com/rust-lang/rust/commit/1df384d32d7a33a710acd3f15729b0e4d6f73832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df384d32d7a33a710acd3f15729b0e4d6f73832/comments", "author": null, "committer": null, "parents": [{"sha": "6828cf90146c7fefc4ba4f16dffe75f763f2d910", "url": "https://api.github.com/repos/rust-lang/rust/commits/6828cf90146c7fefc4ba4f16dffe75f763f2d910", "html_url": "https://github.com/rust-lang/rust/commit/6828cf90146c7fefc4ba4f16dffe75f763f2d910"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "c3324d656634d1aafd0bcb01502851a269018af5", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=1df384d32d7a33a710acd3f15729b0e4d6f73832", "patch": "@@ -50,7 +50,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n-    struct_has_extern_repr: bool,\n+    repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n@@ -149,8 +149,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_node(&mut self, node: &hir_map::Node<'tcx>) {\n-        let had_extern_repr = self.struct_has_extern_repr;\n-        self.struct_has_extern_repr = false;\n+        let had_repr_c = self.repr_has_repr_c;\n+        self.repr_has_repr_c = false;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n         self.inherited_pub_visibility = false;\n         match *node {\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                         let def_id = self.tcx.hir.local_def_id(item.id);\n                         let def = self.tcx.adt_def(def_id);\n-                        self.struct_has_extern_repr = def.repr.c();\n+                        self.repr_has_repr_c = def.repr.c();\n \n                         intravisit::walk_item(self, &item);\n                     }\n@@ -187,7 +187,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             }\n             _ => ()\n         }\n-        self.struct_has_extern_repr = had_extern_repr;\n+        self.repr_has_repr_c = had_repr_c;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n \n@@ -223,10 +223,10 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n \n     fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,\n                         _: &hir::Generics, _: ast::NodeId, _: syntax_pos::Span) {\n-        let has_extern_repr = self.struct_has_extern_repr;\n+        let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n-            has_extern_repr || inherited_pub_visibility || f.vis == hir::Public\n+            has_repr_c || inherited_pub_visibility || f.vis == hir::Public\n         });\n         self.live_symbols.extend(live_fields.map(|f| f.id));\n \n@@ -428,7 +428,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n         live_symbols: box FxHashSet(),\n-        struct_has_extern_repr: false,\n+        repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n         ignore_variant_stack: vec![],"}, {"sha": "8f87f5b1e1ac04c2ca424c451b7d43c362fa767d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1df384d32d7a33a710acd3f15729b0e4d6f73832", "patch": "@@ -1538,7 +1538,7 @@ impl ReprOptions {\n         for attr in tcx.get_attrs(did).iter() {\n             for r in attr::find_repr_attrs(tcx.sess.diagnostic(), attr) {\n                 flags.insert(match r {\n-                    attr::ReprExtern => ReprFlags::IS_C,\n+                    attr::ReprC => ReprFlags::IS_C,\n                     attr::ReprPacked => ReprFlags::IS_PACKED,\n                     attr::ReprSimd => ReprFlags::IS_SIMD,\n                     attr::ReprInt(i) => {"}, {"sha": "ad3760eed8019488cc47913b9985dc2c266e2daf", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=1df384d32d7a33a710acd3f15729b0e4d6f73832", "patch": "@@ -120,17 +120,15 @@ impl LintPass for NonCamelCaseTypes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        let extern_repr_count = it.attrs\n+        let has_repr_c = it.attrs\n             .iter()\n-            .filter(|attr| {\n+            .any(|attr| {\n                 attr::find_repr_attrs(cx.tcx.sess.diagnostic(), attr)\n                     .iter()\n-                    .any(|r| r == &attr::ReprExtern)\n-            })\n-            .count();\n-        let has_extern_repr = extern_repr_count > 0;\n+                    .any(|r| r == &attr::ReprC)\n+            });\n \n-        if has_extern_repr {\n+        if has_repr_c {\n             return;\n         }\n "}, {"sha": "4291f811f3f74ba1e63b65e91bdbf0c9aaaa608a", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=1df384d32d7a33a710acd3f15729b0e4d6f73832", "patch": "@@ -1008,8 +1008,7 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                 if let Some(mi) = item.word() {\n                     let word = &*mi.name().as_str();\n                     let hint = match word {\n-                        // Can't use \"extern\" because it's not a lexical identifier.\n-                        \"C\" => Some(ReprExtern),\n+                        \"C\" => Some(ReprC),\n                         \"packed\" => Some(ReprPacked),\n                         \"simd\" => Some(ReprSimd),\n                         _ => match int_type_of_word(word) {\n@@ -1080,7 +1079,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n #[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum ReprAttr {\n     ReprInt(IntType),\n-    ReprExtern,\n+    ReprC,\n     ReprPacked,\n     ReprSimd,\n     ReprAlign(u32),"}, {"sha": "08a7f85d14b2f5be0b2b419825780bde38612a7e", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df384d32d7a33a710acd3f15729b0e4d6f73832/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1df384d32d7a33a710acd3f15729b0e4d6f73832", "patch": "@@ -831,7 +831,7 @@ fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &\n         for r in &attr::find_repr_attrs(diagnostic, a) {\n             repr_type_name = match *r {\n                 attr::ReprPacked | attr::ReprSimd | attr::ReprAlign(_) => continue,\n-                attr::ReprExtern => \"i32\",\n+                attr::ReprC => \"i32\",\n \n                 attr::ReprInt(attr::SignedInt(ast::IntTy::Isize)) => \"isize\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I8)) => \"i8\","}]}