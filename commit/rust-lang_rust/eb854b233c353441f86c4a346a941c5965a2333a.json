{"sha": "eb854b233c353441f86c4a346a941c5965a2333a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODU0YjIzM2MzNTM0NDFmODZjNGEzNDZhOTQxYzU5NjVhMjMzM2E=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-03T03:11:56Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-13T13:20:39Z"}, "message": "new_ret_no_self added positive test cases", "tree": {"sha": "beee48cf86ef85de2504a2ae32bd0bbeb0980645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beee48cf86ef85de2504a2ae32bd0bbeb0980645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb854b233c353441f86c4a346a941c5965a2333a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb854b233c353441f86c4a346a941c5965a2333a", "html_url": "https://github.com/rust-lang/rust/commit/eb854b233c353441f86c4a346a941c5965a2333a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb854b233c353441f86c4a346a941c5965a2333a/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b12eee1120daaf8894a095904d814b52cdabc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12eee1120daaf8894a095904d814b52cdabc49", "html_url": "https://github.com/rust-lang/rust/commit/8b12eee1120daaf8894a095904d814b52cdabc49"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "d11dbf0e773c8b7fbb46d726cff28858235acdc5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb854b233c353441f86c4a346a941c5965a2333a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb854b233c353441f86c4a346a941c5965a2333a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=eb854b233c353441f86c4a346a941c5965a2333a", "patch": "@@ -878,6 +878,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let name = implitem.ident.name;\n         let parent = cx.tcx.hir.get_parent(implitem.id);\n         let item = cx.tcx.hir.expect_item(parent);\n+        let def_id = cx.tcx.hir.local_def_id(item.id);\n+        let ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Method(ref sig, id) = implitem.node;\n             if let Some(first_arg_ty) = sig.decl.inputs.get(0);\n@@ -899,8 +901,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 }\n \n                 // check conventions w.r.t. conversion method names and predicates\n-                let def_id = cx.tcx.hir.local_def_id(item.id);\n-                let ty = cx.tcx.type_of(def_id);\n                 let is_copy = is_copy(cx, ty);\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n                     if conv.check(&name.as_str()) {\n@@ -928,17 +928,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         break;\n                     }\n                 }\n-\n-                let ret_ty = return_ty(cx, implitem.id);\n-                if name == \"new\" &&\n-                   !ret_ty.walk().any(|t| same_tys(cx, t, ty)) {\n-                    span_lint(cx,\n-                              NEW_RET_NO_SELF,\n-                              implitem.span,\n-                              \"methods called `new` usually return `Self`\");\n-                }\n             }\n         }\n+\n+        let ret_ty = return_ty(cx, implitem.id);\n+        if name == \"new\" &&\n+            !ret_ty.walk().any(|t| same_tys(cx, t, ty)) {\n+            span_lint(cx,\n+                      NEW_RET_NO_SELF,\n+                      implitem.span,\n+                      \"methods called `new` usually return `Self`\");\n+        }\n     }\n }\n "}, {"sha": "67933f0026297b9ed1849adf20aec9c1f33c5ca4", "filename": "tests/ui/new_ret_no_self.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/eb854b233c353441f86c4a346a941c5965a2333a/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb854b233c353441f86c4a346a941c5965a2333a/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=eb854b233c353441f86c4a346a941c5965a2333a", "patch": "@@ -0,0 +1,63 @@\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::new_ret_no_self)]\n+#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+\n+fn main(){}\n+\n+//trait R {\n+//    type Item;\n+//}\n+//\n+//struct S;\n+//\n+//impl R for S {\n+//    type Item = Self;\n+//}\n+//\n+//impl S {\n+//    // should not trigger the lint\n+//    pub fn new() -> impl R<Item = Self> {\n+//        S\n+//    }\n+//}\n+//\n+//struct S2;\n+//\n+//impl R for S2 {\n+//    type Item = Self;\n+//}\n+//\n+//impl S2 {\n+//    // should not trigger the lint\n+//    pub fn new(_: String) -> impl R<Item = Self> {\n+//        S2\n+//    }\n+//}\n+//\n+//struct T;\n+//\n+//impl T {\n+//    // should not trigger lint\n+//    pub fn new() -> Self {\n+//        unimplemented!();\n+//    }\n+//}\n+\n+struct U;\n+\n+impl U {\n+    // should trigger lint\n+    pub fn new() -> u32 {\n+        unimplemented!();\n+    }\n+}\n+\n+struct V;\n+\n+impl V {\n+    // should trigger lint\n+    pub fn new(_: String) -> u32 {\n+        unimplemented!();\n+    }\n+}"}]}