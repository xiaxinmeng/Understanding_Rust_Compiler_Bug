{"sha": "a143517d44cac50b20cbd3a0b579addab40dd399", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDM1MTdkNDRjYWM1MGIyMGNiZDNhMGI1NzlhZGRhYjQwZGQzOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T19:21:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T19:21:22Z"}, "message": "Auto merge of #82192 - GuillaumeGomez:rollup-gi1639b, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #82145 (Fix ES5 errors (IE11))\n - #82160 (Fix typo in rustc_infer::infer::UndoLog)\n - #82161 (Add long explanation for E0545)\n - #82163 (avoid full-slicing slices)\n - #82175 (validation: fix invalid-fn-ptr error message)\n - #82184 ([Minor] Update discriminant_value docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "25802626976d16bfa4240e559e2579b6d7c3afd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25802626976d16bfa4240e559e2579b6d7c3afd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a143517d44cac50b20cbd3a0b579addab40dd399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a143517d44cac50b20cbd3a0b579addab40dd399", "html_url": "https://github.com/rust-lang/rust/commit/a143517d44cac50b20cbd3a0b579addab40dd399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a143517d44cac50b20cbd3a0b579addab40dd399/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3deed8a2f7dca16869ccd03a8e328ef627e6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3deed8a2f7dca16869ccd03a8e328ef627e6eb", "html_url": "https://github.com/rust-lang/rust/commit/9d3deed8a2f7dca16869ccd03a8e328ef627e6eb"}, {"sha": "9502e5c4dc6be1522148b574fa937635974101bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9502e5c4dc6be1522148b574fa937635974101bf", "html_url": "https://github.com/rust-lang/rust/commit/9502e5c4dc6be1522148b574fa937635974101bf"}], "stats": {"total": 189, "additions": 127, "deletions": 62}, "files": [{"sha": "097663ff1accd15f29ab90a8808a8c77cf4b5101", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -135,7 +135,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let parent_generics = match self.items.get(&parent_hir_id).unwrap().kind {\n             hir::ItemKind::Impl(hir::Impl { ref generics, .. })\n-            | hir::ItemKind::Trait(_, _, ref generics, ..) => &generics.params[..],\n+            | hir::ItemKind::Trait(_, _, ref generics, ..) => generics.params,\n             _ => &[],\n         };\n         let lt_def_names = parent_generics.iter().filter_map(|param| match param.kind {"}, {"sha": "180402c24fb7b683611035901908df1f34766962", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -1681,7 +1681,7 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.s.word(\"[\");\n         self.print_inner_attributes_inline(attrs);\n-        self.commasep_exprs(Inconsistent, &exprs[..]);\n+        self.commasep_exprs(Inconsistent, exprs);\n         self.s.word(\"]\");\n         self.end();\n     }\n@@ -1722,7 +1722,7 @@ impl<'a> State<'a> {\n         self.print_inner_attributes_inline(attrs);\n         self.commasep_cmnt(\n             Consistent,\n-            &fields[..],\n+            fields,\n             |s, field| {\n                 s.print_outer_attributes(&field.attrs);\n                 s.ibox(INDENT_UNIT);\n@@ -1757,7 +1757,7 @@ impl<'a> State<'a> {\n     fn print_expr_tup(&mut self, exprs: &[P<ast::Expr>], attrs: &[ast::Attribute]) {\n         self.popen();\n         self.print_inner_attributes_inline(attrs);\n-        self.commasep_exprs(Inconsistent, &exprs[..]);\n+        self.commasep_exprs(Inconsistent, exprs);\n         if exprs.len() == 1 {\n             self.s.word(\",\");\n         }"}, {"sha": "7e88b58c0e29d99cecfdf21100332b4469be5112", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::ArgumentNamed(s) => Named(s),\n                 };\n \n-                let ty = Placeholder(match &arg.format.ty[..] {\n+                let ty = Placeholder(match arg.format.ty {\n                     \"\" => \"Display\",\n                     \"?\" => \"Debug\",\n                     \"e\" => \"LowerExp\","}, {"sha": "0cc520e5bd1f0165d61b8a4ae8cf399b539edfea", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -312,7 +312,7 @@ pub mod printf {\n                 return Some((Substitution::Escape, &s[start + 2..]));\n             }\n \n-            Cur::new_at(&s[..], start)\n+            Cur::new_at(s, start)\n         };\n \n         // This is meant to be a translation of the following regex:\n@@ -673,7 +673,7 @@ pub mod shell {\n                 _ => { /* fall-through */ }\n             }\n \n-            Cur::new_at(&s[..], start)\n+            Cur::new_at(s, start)\n         };\n \n         let at = at.at_next_cp()?;"}, {"sha": "9ce9066980066523011d7718aecb426016cece53", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let (tup, args) = args.split_last().unwrap();\n             (args, Some(tup))\n         } else {\n-            (&args[..], None)\n+            (args, None)\n         };\n \n         'make_args: for (i, arg) in first_args.iter().enumerate() {"}, {"sha": "cccc0e05600129c5ae3e95e1df8cb317eee87a05", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -286,6 +286,7 @@ E0538: include_str!(\"./error_codes/E0538.md\"),\n E0539: include_str!(\"./error_codes/E0539.md\"),\n E0541: include_str!(\"./error_codes/E0541.md\"),\n E0542: include_str!(\"./error_codes/E0542.md\"),\n+E0545: include_str!(\"./error_codes/E0545.md\"),\n E0546: include_str!(\"./error_codes/E0546.md\"),\n E0547: include_str!(\"./error_codes/E0547.md\"),\n E0550: include_str!(\"./error_codes/E0550.md\"),\n@@ -606,7 +607,6 @@ E0781: include_str!(\"./error_codes/E0781.md\"),\n //  E0540, // multiple rustc_deprecated attributes\n     E0543, // missing 'reason'\n     E0544, // multiple stability levels\n-    E0545, // incorrect 'issue'\n //  E0548, // replaced with a generic attribute input check\n     // rustc_deprecated attribute must be paired with either stable or unstable\n     // attribute"}, {"sha": "9fb935a3ab1abbb254c7b05631ec7c75cec17a52", "filename": "compiler/rustc_error_codes/src/error_codes/E0545.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0545.md?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -0,0 +1,35 @@\n+The `issue` value is incorrect in a stability attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0545\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[unstable(feature = \"_unstable_fn\", issue = \"0\")] // invalid\n+fn _unstable_fn() {}\n+\n+#[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"0\")] // invalid\n+fn _unstable_const_fn() {}\n+```\n+\n+To fix this issue, you need to provide a correct value in the `issue` field.\n+Example:\n+\n+```\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"test\")]\n+\n+#[unstable(feature = \"_unstable_fn\", issue = \"none\")] // ok!\n+fn _unstable_fn() {}\n+\n+#[rustc_const_unstable(feature = \"_unstable_const_fn\", issue = \"1\")] // ok!\n+fn _unstable_const_fn() {}\n+```\n+\n+See the [How Rust is Made and \u201cNightly Rust\u201d][how-rust-made-nightly] appendix\n+of the Book and the [Stability attributes][stability-attributes] section of the\n+Rustc Dev Guide for more details.\n+\n+[how-rust-made-nightly]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+[stability-attributes]: https://rustc-dev-guide.rust-lang.org/stability.html"}, {"sha": "1f9133f2ccbf01a72f6411c05d657893e2581506", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -392,7 +392,7 @@ impl<'a> State<'a> {\n                     &f.decl,\n                     None,\n                     &f.generic_params,\n-                    &f.param_names[..],\n+                    f.param_names,\n                 );\n             }\n             hir::TyKind::OpaqueDef(..) => self.s.word(\"/*impl Trait*/\"),\n@@ -1200,7 +1200,7 @@ impl<'a> State<'a> {\n         self.s.word(\"{\");\n         self.commasep_cmnt(\n             Consistent,\n-            &fields[..],\n+            fields,\n             |s, field| {\n                 s.ibox(INDENT_UNIT);\n                 if !field.is_shorthand {"}, {"sha": "cb783847fd1cf463fbc28aefbf9e426874036849", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -671,7 +671,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !impl_candidates.is_empty() && e.span.contains(span) {\n                     if let Some(expr) = exprs.first() {\n                         if let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind {\n-                            if let [path_segment] = &path.segments[..] {\n+                            if let [path_segment] = path.segments {\n                                 let candidate_len = impl_candidates.len();\n                                 let suggestions = impl_candidates.iter().map(|candidate| {\n                                     format!("}, {"sha": "4be0e7948f70b82c18968d948f562fa1c91666e4", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -15,7 +15,7 @@ pub struct Snapshot<'tcx> {\n     _marker: PhantomData<&'tcx ()>,\n }\n \n-/// Records the 'undo' data fora single operation that affects some form of inference variable.\n+/// Records the \"undo\" data for a single operation that affects some form of inference variable.\n pub(crate) enum UndoLog<'tcx> {\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),"}, {"sha": "94314464e085aa4a42ca78db0ea5b3812a73ba08", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -866,7 +866,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_variances_of(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n-        record!(self.tables.variances[def_id] <- &self.tcx.variances_of(def_id)[..]);\n+        record!(self.tables.variances[def_id] <- self.tcx.variances_of(def_id));\n     }\n \n     fn encode_item_type(&mut self, def_id: DefId) {"}, {"sha": "4bc6dda0a5577d94804471fbb34d963a0b4e3809", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -854,22 +854,22 @@ impl<'hir> Map<'hir> {\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n         self.find_entry(id).map_or(&[], |entry| match entry.node {\n-            Node::Param(a) => &a.attrs[..],\n+            Node::Param(a) => a.attrs,\n             Node::Local(l) => &l.attrs[..],\n-            Node::Item(i) => &i.attrs[..],\n-            Node::ForeignItem(fi) => &fi.attrs[..],\n-            Node::TraitItem(ref ti) => &ti.attrs[..],\n-            Node::ImplItem(ref ii) => &ii.attrs[..],\n-            Node::Variant(ref v) => &v.attrs[..],\n-            Node::Field(ref f) => &f.attrs[..],\n+            Node::Item(i) => i.attrs,\n+            Node::ForeignItem(fi) => fi.attrs,\n+            Node::TraitItem(ref ti) => ti.attrs,\n+            Node::ImplItem(ref ii) => ii.attrs,\n+            Node::Variant(ref v) => v.attrs,\n+            Node::Field(ref f) => f.attrs,\n             Node::Expr(ref e) => &*e.attrs,\n             Node::Stmt(ref s) => s.kind.attrs(|id| self.item(id.id)),\n             Node::Arm(ref a) => &*a.attrs,\n-            Node::GenericParam(param) => &param.attrs[..],\n+            Node::GenericParam(param) => param.attrs,\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Node::Ctor(..) => self.attrs(self.get_parent_item(id)),\n-            Node::Crate(item) => &item.attrs[..],\n+            Node::Crate(item) => item.attrs,\n             Node::MacroDef(def) => def.attrs,\n             Node::AnonConst(..)\n             | Node::PathSegment(..)"}, {"sha": "efe047869330cf86566ae37d2261190d0763575f", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -427,7 +427,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n             fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n                 let mut cnums = vec![LOCAL_CRATE];\n-                cnums.extend_from_slice(&tcx.crates()[..]);\n+                cnums.extend_from_slice(tcx.crates());\n                 cnums.sort_unstable();\n                 // Just to be sure...\n                 cnums.dedup();"}, {"sha": "64e7a4d9ca758ea793bc0c1cdf25016744cfade4", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -586,8 +586,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.path,\n                     err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n                 );\n+                // Make sure we print a `ScalarMaybeUninit` (and not an `ImmTy`) in the error\n+                // message below.\n+                let value = value.to_scalar_or_uninit();\n                 let _fn = try_validation!(\n-                    value.to_scalar().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n+                    value.check_init().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |"}, {"sha": "6457c6cee576f556b247ec19206684af418d7fd3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -1105,7 +1105,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         if let Some(items) = self.diagnostic_metadata.current_trait_assoc_items {\n-            for assoc_item in &items[..] {\n+            for assoc_item in items {\n                 if assoc_item.ident == ident {\n                     return Some(match &assoc_item.kind {\n                         ast::AssocItemKind::Const(..) => AssocSuggestion::AssocConst,"}, {"sha": "c5dbd3ed089613d53d79660260862cb4f86ff524", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -1492,7 +1492,7 @@ impl Target {\n             } );\n             ($key_name:ident = $json_name:expr, optional) => ( {\n                 let name = $json_name;\n-                if let Some(o) = obj.find(&name[..]) {\n+                if let Some(o) = obj.find(name) {\n                     base.$key_name = o\n                         .as_string()\n                         .map(|s| s.to_string() );"}, {"sha": "b5404c3a15ce006d7fa74963d94edfd2799ad72f", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -237,7 +237,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n         if let ([], [bound]) = (&potential_assoc_types[..], &trait_bounds) {\n-            match &bound.trait_ref.path.segments[..] {\n+            match bound.trait_ref.path.segments {\n                 // FIXME: `trait_ref.path.span` can point to a full path with multiple\n                 // segments, even though `trait_ref.path.segments` is of length `1`. Work\n                 // around that bug here, even though it should be fixed elsewhere."}, {"sha": "fb737ae7f53849d1be2602f9a4cca79b7c9c45e4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -2374,7 +2374,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             crate::collect::placeholder_type_error(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()),\n-                &generics.params[..],\n+                generics.params,\n                 visitor.0,\n                 true,\n                 hir_ty,"}, {"sha": "9e6c11d9dddbb30255eead05deb29b2f2db73d79", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -897,7 +897,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return (\n                     path.res,\n                     opt_qself.as_ref().map(|qself| self.to_ty(qself)),\n-                    &path.segments[..],\n+                    path.segments,\n                 );\n             }\n             QPath::TypeRelative(ref qself, ref segment) => (self.to_ty(qself), qself, segment),"}, {"sha": "885d961810be8aebe0c1dbd5b4d603f5ef9e1c29", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     });\n                                     if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n                                         if let Some(g) = kind.generics() {\n-                                            let key = match &g.where_clause.predicates[..] {\n+                                            let key = match g.where_clause.predicates {\n                                                 [.., pred] => (pred.span().shrink_to_hi(), false),\n                                                 [] => (\n                                                     g.where_clause"}, {"sha": "0d7ca70b944ad8971d248f85a86ef9ca8399d357", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -229,14 +229,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(\n-        tcx,\n-        Some(generics.span),\n-        &generics.params[..],\n-        visitor.0,\n-        suggest,\n-        None,\n-    );\n+    placeholder_type_error(tcx, Some(generics.span), generics.params, visitor.0, suggest, None);\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -417,7 +410,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                         | hir::ItemKind::Struct(_, generics)\n                         | hir::ItemKind::Union(_, generics) => {\n                             let lt_name = get_new_lifetime_name(self.tcx, poly_trait_ref, generics);\n-                            let (lt_sp, sugg) = match &generics.params[..] {\n+                            let (lt_sp, sugg) = match generics.params {\n                                 [] => (generics.span, format!(\"<{}>\", lt_name)),\n                                 [bound, ..] => {\n                                     (bound.span.shrink_to_lo(), format!(\"{}, \", lt_name))"}, {"sha": "a9e2ef4251a16de56691ca462eb6c62d6264ca27", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -1688,8 +1688,8 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n \n-    /// Returns the value of the discriminant for the variant in 'v',\n-    /// cast to a `u64`; if `T` has no discriminant, returns `0`.\n+    /// Returns the value of the discriminant for the variant in 'v';\n+    /// if `T` has no discriminant, returns `0`.\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]"}, {"sha": "6044899c237e22b0bdd027258e2ba353a59793e8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -347,7 +347,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         };\n \n         // Done specifying what options are possible, so do the getopts parsing\n-        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+        let matches = opts.parse(args).unwrap_or_else(|e| {\n             // Invalid argument/option format\n             println!(\"\\n{}\\n\", e);\n             usage(1, &opts, false, &subcommand_help);"}, {"sha": "f3aeea4b8c9ed4a1fcbd2b0fdd2975f23ff27fc9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -975,7 +975,7 @@ where\n {\n     fn clean(&self, cx: &DocContext<'_>) -> FnDecl {\n         FnDecl {\n-            inputs: (&self.0.inputs[..], self.1).clean(cx),\n+            inputs: (self.0.inputs, self.1).clean(cx),\n             output: self.0.output.clean(cx),\n             c_variadic: self.0.c_variadic,\n             attrs: Attributes::default(),\n@@ -1939,7 +1939,7 @@ impl Clean<String> for Symbol {\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, || {\n-            (self.generic_params.clean(cx), (&*self.decl, &self.param_names[..]).clean(cx))\n+            (self.generic_params.clean(cx), (&*self.decl, self.param_names).clean(cx))\n         });\n         BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n     }"}, {"sha": "d6d3171afbffe2f254c46605b69e13655abb9218", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -2908,10 +2908,14 @@ function defocusSearchBar() {\n             [\"&#9166;\", \"Go to active search result\"],\n             [\"+\", \"Expand all sections\"],\n             [\"-\", \"Collapse all sections\"],\n-        ].map(x => \"<dt>\" +\n-            x[0].split(\" \")\n-                .map((y, index) => (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : \" \" + y + \" \")\n-                .join(\"\") + \"</dt><dd>\" + x[1] + \"</dd>\").join(\"\");\n+        ].map(function(x) {\n+            return \"<dt>\" +\n+                x[0].split(\" \")\n+                    .map(function(y, index) {\n+                        return (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : \" \" + y + \" \";\n+                    })\n+                    .join(\"\") + \"</dt><dd>\" + x[1] + \"</dd>\";\n+        }).join(\"\");\n         var div_shortcuts = document.createElement(\"div\");\n         addClass(div_shortcuts, \"shortcuts\");\n         div_shortcuts.innerHTML = \"<h2>Keyboard Shortcuts</h2><dl>\" + shortcuts + \"</dl></div>\";\n@@ -2929,7 +2933,9 @@ function defocusSearchBar() {\n             \"You can look for items with an exact name by putting double quotes around \\\n              your request: <code>\\\"string\\\"</code>\",\n             \"Look for items inside another one by searching for a path: <code>vec::Vec</code>\",\n-        ].map(x => \"<p>\" + x + \"</p>\").join(\"\");\n+        ].map(function(x) {\n+            return \"<p>\" + x + \"</p>\";\n+        }).join(\"\");\n         var div_infos = document.createElement(\"div\");\n         addClass(div_infos, \"infos\");\n         div_infos.innerHTML = \"<h2>Search Tricks</h2>\" + infos;"}, {"sha": "b8b6fcbaf3adcd11ef4a857088088f3b5ff8bc80", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -157,7 +157,7 @@ var updateSystemTheme = (function() {\n     if (!window.matchMedia) {\n         // fallback to the CSS computed value\n         return function() {\n-            let cssTheme = getComputedStyle(document.documentElement)\n+            var cssTheme = getComputedStyle(document.documentElement)\n                 .getPropertyValue('content');\n \n             switchTheme("}, {"sha": "f6075987d178df63ed9d5a0cd5f501fa8a449355", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "renamed", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -3,6 +3,12 @@\n \n use std::mem;\n \n+#[repr(C)]\n+union MaybeUninit<T: Copy> {\n+    uninit: (),\n+    init: T,\n+}\n+\n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n //~| type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -35,4 +41,9 @@ const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n+//~^ ERROR it is undefined behavior to use this value\n+const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n+//~^ ERROR it is undefined behavior to use this value\n+\n fn main() {}", "previous_filename": "src/test/ui/consts/const-eval/ub-ref.rs"}, {"sha": "7d76c5cb43fe07772730c01b57e7369e58ce0a03", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.stderr", "status": "renamed", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -1,75 +1,91 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:6:1\n+  --> $DIR/ub-ref-ptr.rs:12:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:10:1\n+  --> $DIR/ub-ref-ptr.rs:16:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:14:1\n+  --> $DIR/ub-ref-ptr.rs:20:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref-ptr.rs:23:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL box\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:23:1\n+  --> $DIR/ub-ref-ptr.rs:29:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc14, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:26:1\n+  --> $DIR/ub-ref-ptr.rs:32:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:29:1\n+  --> $DIR/ub-ref-ptr.rs:35:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:32:1\n+  --> $DIR/ub-ref-ptr.rs:38:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:35:1\n+  --> $DIR/ub-ref-ptr.rs:41:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 9 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:44:1\n+   |\n+LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref-ptr.rs:46:1\n+   |\n+LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0080`.", "previous_filename": "src/test/ui/consts/const-eval/ub-ref.stderr"}, {"sha": "4ed42101af8e67381f3d51b8653f9adcb35c9ce7", "filename": "src/test/ui/feature-gates/unstable-attribute-allow-issue-0.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Ffeature-gates%2Funstable-attribute-allow-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Ffeature-gates%2Funstable-attribute-allow-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funstable-attribute-allow-issue-0.stderr?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -16,3 +16,4 @@ LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0545`."}, {"sha": "bd7b88da1584da0a2841b769d33e8d478bb57415", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a143517d44cac50b20cbd3a0b579addab40dd399/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr?ref=a143517d44cac50b20cbd3a0b579addab40dd399", "patch": "@@ -20,5 +20,5 @@ LL | #[unstable(feature = \"a\", issue = \"no\")]\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0538, E0541.\n+Some errors have detailed explanations: E0538, E0541, E0545.\n For more information about an error, try `rustc --explain E0538`."}]}