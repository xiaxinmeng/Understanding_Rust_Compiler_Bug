{"sha": "5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzZkZjdlM2M4ZGYzNTBjMjBlYzZlM2JlNWEzYWZmZmQwYTJkNTQ=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-07-11T07:26:15Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-07-12T08:06:03Z"}, "message": "Add UI tests for diagnostics comparing types\n\nThey highlight how types are displayed in those cases, and will show\nhow the current output is altered by the next patch.", "tree": {"sha": "2a9aa5d4312e32c2aea6ca4bea1e39055be4494d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9aa5d4312e32c2aea6ca4bea1e39055be4494d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "html_url": "https://github.com/rust-lang/rust/commit/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c2539e9690fab5dbf7ac217ec696ac263cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c2539e9690fab5dbf7ac217ec696ac263cf3", "html_url": "https://github.com/rust-lang/rust/commit/c946c2539e9690fab5dbf7ac217ec696ac263cf3"}], "stats": {"total": 518, "additions": 518, "deletions": 0}, "files": [{"sha": "2592b07eda781ee78f6fbda415cc6e2d82183694", "filename": "src/test/ui/type-mismatch.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54/src%2Ftest%2Fui%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54/src%2Ftest%2Fui%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-mismatch.rs?ref=5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Qux {}\n+struct A;\n+struct B;\n+impl Qux for A {}\n+impl Qux for B {}\n+\n+struct Foo<T, U: Qux = A, V: Qux = B>(T, U, V);\n+\n+struct foo;\n+struct bar;\n+\n+fn want<T>(t: T) {}\n+\n+fn have_usize(f: usize) {\n+    want::<foo>(f); //~ ERROR mismatched types\n+    want::<bar>(f); //~ ERROR mismatched types\n+    want::<Foo<usize>>(f); //~ ERROR mismatched types\n+    want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+}\n+\n+fn have_foo(f: foo) {\n+    want::<usize>(f); //~ ERROR mismatched types\n+    want::<bar>(f); //~ ERROR mismatched types\n+    want::<Foo<usize>>(f); //~ ERROR mismatched types\n+    want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+}\n+\n+fn have_foo_foo(f: Foo<foo>) {\n+    want::<usize>(f); //~ ERROR mismatched types\n+    want::<foo>(f); //~ ERROR mismatched types\n+    want::<bar>(f); //~ ERROR mismatched types\n+    want::<Foo<usize>>(f); //~ ERROR mismatched types\n+    want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+}\n+\n+fn have_foo_foo_b(f: Foo<foo, B>) {\n+    want::<usize>(f); //~ ERROR mismatched types\n+    want::<foo>(f); //~ ERROR mismatched types\n+    want::<bar>(f); //~ ERROR mismatched types\n+    want::<Foo<usize>>(f); //~ ERROR mismatched types\n+    want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+}\n+\n+fn have_foo_foo_b_a(f: Foo<foo, B, A>) {\n+    want::<usize>(f); //~ ERROR mismatched types\n+    want::<foo>(f); //~ ERROR mismatched types\n+    want::<bar>(f); //~ ERROR mismatched types\n+    want::<Foo<usize>>(f); //~ ERROR mismatched types\n+    want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar>>(f); //~ ERROR mismatched types\n+    want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+    want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "634f3b402a128cc7441a7b1a6630bde7dadcb88d", "filename": "src/test/ui/type-mismatch.stderr", "status": "added", "additions": 432, "deletions": 0, "changes": 432, "blob_url": "https://github.com/rust-lang/rust/blob/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54/src%2Ftest%2Fui%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5336df7e3c8df350c20ec6e3be5a3afffd0a2d54/src%2Ftest%2Fui%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-mismatch.stderr?ref=5336df7e3c8df350c20ec6e3be5a3afffd0a2d54", "patch": "@@ -0,0 +1,432 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:25:17\n+   |\n+LL |     want::<foo>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `foo`, found usize\n+   |\n+   = note: expected type `foo`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:26:17\n+   |\n+LL |     want::<bar>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `bar`, found usize\n+   |\n+   = note: expected type `bar`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:27:24\n+   |\n+LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n+   |                        ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<usize>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:28:27\n+   |\n+LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+   |                           ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<usize, B>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:29:22\n+   |\n+LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<foo>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:30:25\n+   |\n+LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<foo, B>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:31:22\n+   |\n+LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<bar>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:32:25\n+   |\n+LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `Foo`, found usize\n+   |\n+   = note: expected type `Foo<bar, B>`\n+              found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:36:19\n+   |\n+LL |     want::<usize>(f); //~ ERROR mismatched types\n+   |                   ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `usize`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:37:17\n+   |\n+LL |     want::<bar>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `bar`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:38:24\n+   |\n+LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n+   |                        ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:39:27\n+   |\n+LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+   |                           ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, B>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:40:22\n+   |\n+LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<foo, A, B>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:41:25\n+   |\n+LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<foo, B, B>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:42:22\n+   |\n+LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:43:25\n+   |\n+LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `Foo`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, B>`\n+              found type `foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:47:19\n+   |\n+LL |     want::<usize>(f); //~ ERROR mismatched types\n+   |                   ^ expected usize, found struct `Foo`\n+   |\n+   = note: expected type `usize`\n+              found type `Foo<foo>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:48:17\n+   |\n+LL |     want::<foo>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `foo`, found struct `Foo`\n+   |\n+   = note: expected type `foo`\n+              found type `Foo<foo, A, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:49:17\n+   |\n+LL |     want::<bar>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `bar`, found struct `Foo`\n+   |\n+   = note: expected type `bar`\n+              found type `Foo<foo>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:50:24\n+   |\n+LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n+   |                        ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, _, _>`\n+              found type `Foo<foo, _, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:51:27\n+   |\n+LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+   |                           ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, B, _>`\n+              found type `Foo<foo, A, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:52:25\n+   |\n+LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected type `Foo<_, B, _>`\n+              found type `Foo<_, A, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:53:22\n+   |\n+LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, _, _>`\n+              found type `Foo<foo, _, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:54:25\n+   |\n+LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, B, _>`\n+              found type `Foo<foo, A, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:55:23\n+   |\n+LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+   |                       ^\n+   |                       |\n+   |                       expected &Foo<foo>, found struct `Foo`\n+   |                       help: consider borrowing here: `&f`\n+   |\n+   = note: expected type `&Foo<foo>`\n+              found type `Foo<foo>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:56:26\n+   |\n+LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                          ^ expected reference, found struct `Foo`\n+   |\n+   = note: expected type `&Foo<foo, B>`\n+              found type `Foo<foo>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:60:19\n+   |\n+LL |     want::<usize>(f); //~ ERROR mismatched types\n+   |                   ^ expected usize, found struct `Foo`\n+   |\n+   = note: expected type `usize`\n+              found type `Foo<foo, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:61:17\n+   |\n+LL |     want::<foo>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `foo`, found struct `Foo`\n+   |\n+   = note: expected type `foo`\n+              found type `Foo<foo, B, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:62:17\n+   |\n+LL |     want::<bar>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `bar`, found struct `Foo`\n+   |\n+   = note: expected type `bar`\n+              found type `Foo<foo, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:63:24\n+   |\n+LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n+   |                        ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, A, _>`\n+              found type `Foo<foo, B, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:64:27\n+   |\n+LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+   |                           ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, _, _>`\n+              found type `Foo<foo, _, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:65:22\n+   |\n+LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `A`, found struct `B`\n+   |\n+   = note: expected type `Foo<_, A, _>`\n+              found type `Foo<_, B, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:66:22\n+   |\n+LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, A, _>`\n+              found type `Foo<foo, B, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:67:25\n+   |\n+LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, _, _>`\n+              found type `Foo<foo, _, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:68:23\n+   |\n+LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+   |                       ^ expected &Foo<foo>, found struct `Foo`\n+   |\n+   = note: expected type `&Foo<foo>`\n+              found type `Foo<foo, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:69:26\n+   |\n+LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                          ^\n+   |                          |\n+   |                          expected reference, found struct `Foo`\n+   |                          help: consider borrowing here: `&f`\n+   |\n+   = note: expected type `&Foo<foo, B>`\n+              found type `Foo<foo, B>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:73:19\n+   |\n+LL |     want::<usize>(f); //~ ERROR mismatched types\n+   |                   ^ expected usize, found struct `Foo`\n+   |\n+   = note: expected type `usize`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:74:17\n+   |\n+LL |     want::<foo>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `foo`, found struct `Foo`\n+   |\n+   = note: expected type `foo`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:75:17\n+   |\n+LL |     want::<bar>(f); //~ ERROR mismatched types\n+   |                 ^ expected struct `bar`, found struct `Foo`\n+   |\n+   = note: expected type `bar`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:76:24\n+   |\n+LL |     want::<Foo<usize>>(f); //~ ERROR mismatched types\n+   |                        ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, A, B>`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:77:27\n+   |\n+LL |     want::<Foo<usize, B>>(f); //~ ERROR mismatched types\n+   |                           ^ expected usize, found struct `foo`\n+   |\n+   = note: expected type `Foo<usize, _, B>`\n+              found type `Foo<foo, _, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:78:22\n+   |\n+LL |     want::<Foo<foo>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `A`, found struct `B`\n+   |\n+   = note: expected type `Foo<_, A, B>`\n+              found type `Foo<_, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:79:25\n+   |\n+LL |     want::<Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `B`, found struct `A`\n+   |\n+   = note: expected type `Foo<_, _, B>`\n+              found type `Foo<_, _, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:80:22\n+   |\n+LL |     want::<Foo<bar>>(f); //~ ERROR mismatched types\n+   |                      ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, A, B>`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:81:25\n+   |\n+LL |     want::<Foo<bar, B>>(f); //~ ERROR mismatched types\n+   |                         ^ expected struct `bar`, found struct `foo`\n+   |\n+   = note: expected type `Foo<bar, _, B>`\n+              found type `Foo<foo, _, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:82:23\n+   |\n+LL |     want::<&Foo<foo>>(f); //~ ERROR mismatched types\n+   |                       ^ expected &Foo<foo>, found struct `Foo`\n+   |\n+   = note: expected type `&Foo<foo>`\n+              found type `Foo<foo, B, A>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:83:26\n+   |\n+LL |     want::<&Foo<foo, B>>(f); //~ ERROR mismatched types\n+   |                          ^ expected reference, found struct `Foo`\n+   |\n+   = note: expected type `&Foo<foo, B>`\n+              found type `Foo<foo, B, A>`\n+\n+error: aborting due to 47 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}