{"sha": "208ced64db20bd947a2ba5c90f37936fd3ab352b", "node_id": "C_kwDOAAsO6NoAKDIwOGNlZDY0ZGIyMGJkOTQ3YTJiYTVjOTBmMzc5MzZmZDNhYjM1MmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T07:20:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T07:20:50Z"}, "message": "Auto merge of #92059 - matthiaskrgr:rollup-bainfyh, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #87901 (Fix suggestion of additional `pub` when using `pub pub fn ...`)\n - #89090 (Lint bare traits in AstConv.)\n - #91818 (Show the unused type for `unused_results` lint)\n - #91910 (miri: lift restriction on extern types being the only field in a struct)\n - #91928 (Constify (most) `Option` methods)\n - #91975 (Move generator check earlier in inlining.)\n - #92016 (builtin_macros: allow external consumers for AsmArgs parsing)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1aa23a0e304a1935b962258e3884fe6f86d00011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa23a0e304a1935b962258e3884fe6f86d00011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/208ced64db20bd947a2ba5c90f37936fd3ab352b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/208ced64db20bd947a2ba5c90f37936fd3ab352b", "html_url": "https://github.com/rust-lang/rust/commit/208ced64db20bd947a2ba5c90f37936fd3ab352b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/208ced64db20bd947a2ba5c90f37936fd3ab352b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde825db464b08d6f572766579dfb629b837368c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde825db464b08d6f572766579dfb629b837368c", "html_url": "https://github.com/rust-lang/rust/commit/dde825db464b08d6f572766579dfb629b837368c"}, {"sha": "fd445ddf96f11aadc01fd0d60bb92b419d7ffaa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd445ddf96f11aadc01fd0d60bb92b419d7ffaa7", "html_url": "https://github.com/rust-lang/rust/commit/fd445ddf96f11aadc01fd0d60bb92b419d7ffaa7"}], "stats": {"total": 1845, "additions": 1325, "deletions": 520}, "files": [{"sha": "77738b2c5cc75dce4969cea76fa81cee12ec31e5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -46,7 +46,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n@@ -55,11 +55,9 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n-use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::lint::LintBuffer;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1184,11 +1182,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::Ty<'hir> {\n         let id = self.lower_node_id(t.id);\n         let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n-        let ty = self.ty_path(id, t.span, qpath);\n-        if let hir::TyKind::TraitObject(..) = ty.kind {\n-            self.maybe_lint_bare_trait(t.span, t.id, qself.is_none() && path.is_global());\n-        }\n-        ty\n+        self.ty_path(id, t.span, qpath)\n     }\n \n     fn ty(&mut self, span: Span, kind: hir::TyKind<'hir>) -> hir::Ty<'hir> {\n@@ -1285,9 +1279,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         lifetime_bound.unwrap_or_else(|| this.elided_dyn_bound(t.span));\n                     (bounds, lifetime_bound)\n                 });\n-                if kind != TraitObjectSyntax::Dyn {\n-                    self.maybe_lint_bare_trait(t.span, t.id, false);\n-                }\n                 hir::TyKind::TraitObject(bounds, lifetime_bound, kind)\n             }\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n@@ -2380,39 +2371,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             name: hir::LifetimeName::Implicit(missing),\n         }\n     }\n-\n-    fn maybe_lint_bare_trait(&mut self, span: Span, id: NodeId, is_global: bool) {\n-        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n-        // call site which do not have a macro backtrace. See #61963.\n-        let is_macro_callsite = self\n-            .sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map(|snippet| snippet.starts_with(\"#[\"))\n-            .unwrap_or(true);\n-        if !is_macro_callsite {\n-            if span.edition() < Edition::Edition2021 {\n-                self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                    BARE_TRAIT_OBJECTS,\n-                    id,\n-                    span,\n-                    \"trait objects without an explicit `dyn` are deprecated\",\n-                    BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-                )\n-            } else {\n-                let msg = \"trait objects must include the `dyn` keyword\";\n-                let label = \"add `dyn` keyword before this trait\";\n-                let mut err = struct_span_err!(self.sess, span, E0782, \"{}\", msg,);\n-                err.span_suggestion_verbose(\n-                    span.shrink_to_lo(),\n-                    label,\n-                    String::from(\"dyn \"),\n-                    Applicability::MachineApplicable,\n-                );\n-                err.emit();\n-            }\n-        }\n-    }\n }\n \n /// Helper struct for delayed construction of GenericArgs."}, {"sha": "768cb99510fda843c10deef13b53586db25c24ce", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -8,13 +8,14 @@ use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n use rustc_session::lint;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{InnerSpan, Span};\n use rustc_target::asm::InlineAsmArch;\n use smallvec::smallvec;\n \n-struct AsmArgs {\n+pub struct AsmArgs {\n     templates: Vec<P<ast::Expr>>,\n     operands: Vec<(ast::InlineAsmOperand, Span)>,\n     named_args: FxHashMap<Symbol, usize>,\n@@ -31,15 +32,28 @@ fn parse_args<'a>(\n     is_global_asm: bool,\n ) -> Result<AsmArgs, DiagnosticBuilder<'a>> {\n     let mut p = ecx.new_parser_from_tts(tts);\n+    let sess = &ecx.sess.parse_sess;\n+    parse_asm_args(&mut p, sess, sp, is_global_asm)\n+}\n+\n+// Primarily public for rustfmt consumption.\n+// Internal consumers should continue to leverage `expand_asm`/`expand__global_asm`\n+pub fn parse_asm_args<'a>(\n+    p: &mut Parser<'a>,\n+    sess: &'a ParseSess,\n+    sp: Span,\n+    is_global_asm: bool,\n+) -> Result<AsmArgs, DiagnosticBuilder<'a>> {\n+    let diag = &sess.span_diagnostic;\n \n     if p.token == token::Eof {\n-        return Err(ecx.struct_span_err(sp, \"requires at least a template string argument\"));\n+        return Err(diag.struct_span_err(sp, \"requires at least a template string argument\"));\n     }\n \n     // Detect use of the legacy llvm_asm! syntax (which used to be called asm!)\n     if !is_global_asm && p.look_ahead(1, |t| *t == token::Colon || *t == token::ModSep) {\n         let mut err =\n-            ecx.struct_span_err(sp, \"the legacy LLVM-style asm! syntax is no longer supported\");\n+            diag.struct_span_err(sp, \"the legacy LLVM-style asm! syntax is no longer supported\");\n         err.note(\"consider migrating to the new asm! syntax specified in RFC 2873\");\n         err.note(\"alternatively, switch to llvm_asm! to keep your code working as it is\");\n         return Err(err);\n@@ -61,7 +75,7 @@ fn parse_args<'a>(\n         if !p.eat(&token::Comma) {\n             if allow_templates {\n                 // After a template string, we always expect *only* a comma...\n-                let mut err = ecx.struct_span_err(p.token.span, \"expected token: `,`\");\n+                let mut err = diag.struct_span_err(p.token.span, \"expected token: `,`\");\n                 err.span_label(p.token.span, \"expected `,`\");\n                 p.maybe_annotate_with_ascription(&mut err, false);\n                 return Err(err);\n@@ -76,14 +90,14 @@ fn parse_args<'a>(\n \n         // Parse clobber_abi\n         if p.eat_keyword(sym::clobber_abi) {\n-            parse_clobber_abi(&mut p, &mut args)?;\n+            parse_clobber_abi(p, &mut args)?;\n             allow_templates = false;\n             continue;\n         }\n \n         // Parse options\n         if p.eat_keyword(sym::options) {\n-            parse_options(&mut p, &mut args, is_global_asm)?;\n+            parse_options(p, &mut args, is_global_asm)?;\n             allow_templates = false;\n             continue;\n         }\n@@ -103,25 +117,25 @@ fn parse_args<'a>(\n \n         let mut explicit_reg = false;\n         let op = if !is_global_asm && p.eat_keyword(kw::In) {\n-            let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n             ast::InlineAsmOperand::In { reg, expr }\n         } else if !is_global_asm && p.eat_keyword(sym::out) {\n-            let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            let reg = parse_reg(p, &mut explicit_reg)?;\n             let expr = if p.eat_keyword(kw::Underscore) { None } else { Some(p.parse_expr()?) };\n             ast::InlineAsmOperand::Out { reg, expr, late: false }\n         } else if !is_global_asm && p.eat_keyword(sym::lateout) {\n-            let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            let reg = parse_reg(p, &mut explicit_reg)?;\n             let expr = if p.eat_keyword(kw::Underscore) { None } else { Some(p.parse_expr()?) };\n             ast::InlineAsmOperand::Out { reg, expr, late: true }\n         } else if !is_global_asm && p.eat_keyword(sym::inout) {\n-            let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n@@ -133,9 +147,9 @@ fn parse_args<'a>(\n                 ast::InlineAsmOperand::InOut { reg, expr, late: false }\n             }\n         } else if !is_global_asm && p.eat_keyword(sym::inlateout) {\n-            let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            let reg = parse_reg(p, &mut explicit_reg)?;\n             if p.eat_keyword(kw::Underscore) {\n-                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                let err = diag.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n                 return Err(err);\n             }\n             let expr = p.parse_expr()?;\n@@ -154,7 +168,7 @@ fn parse_args<'a>(\n             match expr.kind {\n                 ast::ExprKind::Path(..) => {}\n                 _ => {\n-                    let err = ecx\n+                    let err = diag\n                         .struct_span_err(expr.span, \"argument to `sym` must be a path expression\");\n                     return Err(err);\n                 }\n@@ -173,7 +187,7 @@ fn parse_args<'a>(\n                     } else {\n                         \"expected operand, clobber_abi, options, or additional template string\"\n                     };\n-                    let mut err = ecx.struct_span_err(template.span, errstr);\n+                    let mut err = diag.struct_span_err(template.span, errstr);\n                     err.span_label(template.span, errstr);\n                     return Err(err);\n                 }\n@@ -193,31 +207,31 @@ fn parse_args<'a>(\n         // clobber_abi/options. We do this at the end once we have the full span\n         // of the argument available.\n         if !args.options_spans.is_empty() {\n-            ecx.struct_span_err(span, \"arguments are not allowed after options\")\n+            diag.struct_span_err(span, \"arguments are not allowed after options\")\n                 .span_labels(args.options_spans.clone(), \"previous options\")\n                 .span_label(span, \"argument\")\n                 .emit();\n         } else if let Some((_, abi_span)) = args.clobber_abis.last() {\n-            ecx.struct_span_err(span, \"arguments are not allowed after clobber_abi\")\n+            diag.struct_span_err(span, \"arguments are not allowed after clobber_abi\")\n                 .span_label(*abi_span, \"clobber_abi\")\n                 .span_label(span, \"argument\")\n                 .emit();\n         }\n         if explicit_reg {\n             if name.is_some() {\n-                ecx.struct_span_err(span, \"explicit register arguments cannot have names\").emit();\n+                diag.struct_span_err(span, \"explicit register arguments cannot have names\").emit();\n             }\n             args.reg_args.insert(slot);\n         } else if let Some(name) = name {\n             if let Some(&prev) = args.named_args.get(&name) {\n-                ecx.struct_span_err(span, &format!(\"duplicate argument named `{}`\", name))\n+                diag.struct_span_err(span, &format!(\"duplicate argument named `{}`\", name))\n                     .span_label(args.operands[prev].1, \"previously here\")\n                     .span_label(span, \"duplicate argument\")\n                     .emit();\n                 continue;\n             }\n             if !args.reg_args.is_empty() {\n-                let mut err = ecx.struct_span_err(\n+                let mut err = diag.struct_span_err(\n                     span,\n                     \"named arguments cannot follow explicit register arguments\",\n                 );\n@@ -230,7 +244,7 @@ fn parse_args<'a>(\n             args.named_args.insert(name, slot);\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n-                let mut err = ecx.struct_span_err(\n+                let mut err = diag.struct_span_err(\n                     span,\n                     \"positional arguments cannot follow named arguments \\\n                      or explicit register arguments\",\n@@ -251,21 +265,21 @@ fn parse_args<'a>(\n         && args.options.contains(ast::InlineAsmOptions::READONLY)\n     {\n         let spans = args.options_spans.clone();\n-        ecx.struct_span_err(spans, \"the `nomem` and `readonly` options are mutually exclusive\")\n+        diag.struct_span_err(spans, \"the `nomem` and `readonly` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && args.options.contains(ast::InlineAsmOptions::NORETURN)\n     {\n         let spans = args.options_spans.clone();\n-        ecx.struct_span_err(spans, \"the `pure` and `noreturn` options are mutually exclusive\")\n+        diag.struct_span_err(spans, \"the `pure` and `noreturn` options are mutually exclusive\")\n             .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE)\n         && !args.options.intersects(ast::InlineAsmOptions::NOMEM | ast::InlineAsmOptions::READONLY)\n     {\n         let spans = args.options_spans.clone();\n-        ecx.struct_span_err(\n+        diag.struct_span_err(\n             spans,\n             \"the `pure` option must be combined with either `nomem` or `readonly`\",\n         )\n@@ -296,14 +310,14 @@ fn parse_args<'a>(\n         }\n     }\n     if args.options.contains(ast::InlineAsmOptions::PURE) && !have_real_output {\n-        ecx.struct_span_err(\n+        diag.struct_span_err(\n             args.options_spans.clone(),\n             \"asm with the `pure` option must have at least one output\",\n         )\n         .emit();\n     }\n     if args.options.contains(ast::InlineAsmOptions::NORETURN) && !outputs_sp.is_empty() {\n-        let err = ecx\n+        let err = diag\n             .struct_span_err(outputs_sp, \"asm outputs are not allowed with the `noreturn` option\");\n \n         // Bail out now since this is likely to confuse MIR\n@@ -312,7 +326,7 @@ fn parse_args<'a>(\n \n     if args.clobber_abis.len() > 0 {\n         if is_global_asm {\n-            let err = ecx.struct_span_err(\n+            let err = diag.struct_span_err(\n                 args.clobber_abis.iter().map(|(_, span)| *span).collect::<Vec<Span>>(),\n                 \"`clobber_abi` cannot be used with `global_asm!`\",\n             );\n@@ -321,7 +335,7 @@ fn parse_args<'a>(\n             return Err(err);\n         }\n         if !regclass_outputs.is_empty() {\n-            ecx.struct_span_err(\n+            diag.struct_span_err(\n                 regclass_outputs.clone(),\n                 \"asm with `clobber_abi` must specify explicit registers for outputs\",\n             )"}, {"sha": "d9faa6777eae982e417ed963c5c704da986d7067", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -616,19 +616,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     match self.size_and_align_of(metadata, &field)? {\n                         Some(size_and_align) => size_and_align,\n                         None => {\n-                            // A field with extern type.  If this field is at offset 0, we behave\n-                            // like the underlying extern type.\n-                            // FIXME: Once we have made decisions for how to handle size and alignment\n-                            // of `extern type`, this should be adapted.  It is just a temporary hack\n-                            // to get some code to work that probably ought to work.\n-                            if sized_size == Size::ZERO {\n-                                return Ok(None);\n-                            } else {\n-                                span_bug!(\n-                                    self.cur_span(),\n-                                    \"Fields cannot be extern types, unless they are at offset 0\"\n-                                )\n-                            }\n+                            // A field with an extern type. We don't know the actual dynamic size\n+                            // or the alignment.\n+                            return Ok(None);\n                         }\n                     };\n "}, {"sha": "818b95b7fc4f3108923d1e74aa2f0dbe2cad132c", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -362,21 +362,15 @@ where\n             // Re-use parent metadata to determine dynamic field layout.\n             // With custom DSTS, this *will* execute user-defined code, but the same\n             // happens at run-time so that's okay.\n-            let align = match self.size_and_align_of(&base.meta, &field_layout)? {\n-                Some((_, align)) => align,\n-                None if offset == Size::ZERO => {\n-                    // An extern type at offset 0, we fall back to its static alignment.\n-                    // FIXME: Once we have made decisions for how to handle size and alignment\n-                    // of `extern type`, this should be adapted.  It is just a temporary hack\n-                    // to get some code to work that probably ought to work.\n-                    field_layout.align.abi\n+            match self.size_and_align_of(&base.meta, &field_layout)? {\n+                Some((_, align)) => (base.meta, offset.align_to(align)),\n+                None => {\n+                    // For unsized types with an extern type tail we perform no adjustments.\n+                    // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.\n+                    assert!(matches!(base.meta, MemPlaceMeta::None));\n+                    (base.meta, offset)\n                 }\n-                None => span_bug!(\n-                    self.cur_span(),\n-                    \"cannot compute offset for extern type field at non-0 offset\"\n-                ),\n-            };\n-            (base.meta, offset.align_to(align))\n+            }\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized\n             // struct."}, {"sha": "ba1b8caa3684f6218036aad0607fd1bbcc7ad4a8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -633,16 +633,6 @@ pub trait LintContext: Sized {\n                     }\n                 },\n                 BuiltinLintDiagnostics::Normal => (),\n-                BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                    let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                        Ok(s) if is_global => {\n-                            (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                        }\n-                        Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                        Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                    };\n-                    db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-                }\n                 BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n                     let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n                         Ok(ref s) => {"}, {"sha": "ed24b94e2fd3b24bcadac04dc65584deec6d8406", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -169,7 +169,9 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         }\n \n         if !(type_permits_lack_of_use || fn_warned || op_warned) {\n-            cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| lint.build(\"unused result\").emit());\n+            cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| {\n+                lint.build(&format!(\"unused result of type `{}`\", ty)).emit()\n+            });\n         }\n \n         // Returns whether an error has been emitted (and thus another does not need to be later)."}, {"sha": "e22c9c68de6e625ded762303d1e3d361ce1ac1a8", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -285,7 +285,6 @@ pub enum ExternDepSpec {\n #[derive(PartialEq, Debug)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n-    BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),"}, {"sha": "e2de9f12aaa71527080243cb1d994f79e1d07274", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -771,11 +771,24 @@ rustc_queries! {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n         cache_on_disk_if { true }\n         load_cached(tcx, id) {\n-            let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n-                .on_disk_cache().as_ref()\n-                .and_then(|c| c.try_load_query_result(*tcx, id));\n+            #[cfg(bootstrap)]\n+            {\n+                match match tcx.on_disk_cache().as_ref() {\n+                    Some(c) => c.try_load_query_result(*tcx, id),\n+                    None => None,\n+                } {\n+                    Some(x) => Some(&*tcx.arena.alloc(x)),\n+                    None => None,\n+                }\n+            }\n+            #[cfg(not(bootstrap))]\n+            {\n+                let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n+                    .on_disk_cache().as_ref()\n+                    .and_then(|c| c.try_load_query_result(*tcx, id));\n \n-            typeck_results.map(|x| &*tcx.arena.alloc(x))\n+                typeck_results.map(|x| &*tcx.arena.alloc(x))\n+            }\n         }\n     }\n "}, {"sha": "8be95b2d95a20c79897ffcde16bb4167ec5ca8cc", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -68,6 +68,12 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     if body.source.promoted.is_some() {\n         return false;\n     }\n+    // Avoid inlining into generators, since their `optimized_mir` is used for layout computation,\n+    // which can create a cycle, even when no attempt is made to inline the function in the other\n+    // direction.\n+    if body.generator.is_some() {\n+        return false;\n+    }\n \n     let mut this = Inliner {\n         tcx,\n@@ -202,14 +208,6 @@ impl<'tcx> Inliner<'tcx> {\n \n         if let Some(callee_def_id) = callee.def_id().as_local() {\n             let callee_hir_id = self.tcx.hir().local_def_id_to_hir_id(callee_def_id);\n-            // Avoid inlining into generators,\n-            // since their `optimized_mir` is used for layout computation, which can\n-            // create a cycle, even when no attempt is made to inline the function\n-            // in the other direction.\n-            if caller_body.generator.is_some() {\n-                return Err(\"local generator (query cycle avoidance)\");\n-            }\n-\n             // Avoid a cycle here by only using `instance_mir` only if we have\n             // a lower `HirId` than the callee. This ensures that the callee will\n             // not inline us. This trick only works without incremental compilation."}, {"sha": "618aa3fd002a8ba8256e1752eeed2e560445d38e", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 83, "deletions": 29, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n             (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, vis)?;\n             (ident, ItemKind::Fn(Box::new(Fn { defaultness: def(), sig, generics, body })))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1511,9 +1511,16 @@ impl<'a> Parser<'a> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n+                let inherited_vis = Visibility {\n+                    span: rustc_span::DUMMY_SP,\n+                    kind: VisibilityKind::Inherited,\n+                    tokens: None,\n+                };\n                 // We use `parse_fn` to get a span for the function\n                 let fn_parse_mode = FnParseMode { req_name: |_| true, req_body: true };\n-                if let Err(mut db) = self.parse_fn(&mut Vec::new(), fn_parse_mode, lo) {\n+                if let Err(mut db) =\n+                    self.parse_fn(&mut Vec::new(), fn_parse_mode, lo, &inherited_vis)\n+                {\n                     db.delay_as_bug();\n                 }\n                 let mut err = self.struct_span_err(\n@@ -1793,8 +1800,9 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         fn_parse_mode: FnParseMode,\n         sig_lo: Span,\n+        vis: &Visibility,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n-        let header = self.parse_fn_front_matter()?; // `const ... fn`\n+        let header = self.parse_fn_front_matter(vis)?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl =\n@@ -1903,12 +1911,15 @@ impl<'a> Parser<'a> {\n     /// Parses all the \"front matter\" (or \"qualifiers\") for a `fn` declaration,\n     /// up to and including the `fn` keyword. The formal grammar is:\n     ///\n-    /// ```\n+    /// ```text\n     /// Extern = \"extern\" StringLit? ;\n     /// FnQual = \"const\"? \"async\"? \"unsafe\"? Extern? ;\n     /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n-    pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n+    ///\n+    /// `vis` represents the visibility that was already parsed, if any. Use\n+    /// `Visibility::Inherited` when no visibility is known.\n+    pub(super) fn parse_fn_front_matter(&mut self, orig_vis: &Visibility) -> PResult<'a, FnHeader> {\n         let sp_start = self.token.span;\n         let constness = self.parse_constness();\n \n@@ -1934,51 +1945,94 @@ impl<'a> Parser<'a> {\n                 Ok(false) => unreachable!(),\n                 Err(mut err) => {\n                     // Qualifier keywords ordering check\n+                    enum WrongKw {\n+                        Duplicated(Span),\n+                        Misplaced(Span),\n+                    }\n \n-                    // This will allow the machine fix to directly place the keyword in the correct place\n-                    let current_qual_sp = if self.check_keyword(kw::Const) {\n-                        Some(async_start_sp)\n+                    // This will allow the machine fix to directly place the keyword in the correct place or to indicate\n+                    // that the keyword is already present and the second instance should be removed.\n+                    let wrong_kw = if self.check_keyword(kw::Const) {\n+                        match constness {\n+                            Const::Yes(sp) => Some(WrongKw::Duplicated(sp)),\n+                            Const::No => Some(WrongKw::Misplaced(async_start_sp)),\n+                        }\n                     } else if self.check_keyword(kw::Async) {\n-                        Some(unsafe_start_sp)\n+                        match asyncness {\n+                            Async::Yes { span, .. } => Some(WrongKw::Duplicated(span)),\n+                            Async::No => Some(WrongKw::Misplaced(unsafe_start_sp)),\n+                        }\n                     } else if self.check_keyword(kw::Unsafe) {\n-                        Some(ext_start_sp)\n+                        match unsafety {\n+                            Unsafe::Yes(sp) => Some(WrongKw::Duplicated(sp)),\n+                            Unsafe::No => Some(WrongKw::Misplaced(ext_start_sp)),\n+                        }\n                     } else {\n                         None\n                     };\n \n-                    if let Some(current_qual_sp) = current_qual_sp {\n-                        let current_qual_sp = current_qual_sp.to(self.prev_token.span);\n-                        if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n-                            let invalid_qual_sp = self.token.uninterpolated_span();\n-                            let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n+                    // The keyword is already present, suggest removal of the second instance\n+                    if let Some(WrongKw::Duplicated(original_sp)) = wrong_kw {\n+                        let original_kw = self\n+                            .span_to_snippet(original_sp)\n+                            .expect(\"Span extracted directly from keyword should always work\");\n+\n+                        err.span_suggestion(\n+                            self.token.uninterpolated_span(),\n+                            &format!(\"`{}` already used earlier, remove this one\", original_kw),\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .span_note(original_sp, &format!(\"`{}` first seen here\", original_kw));\n+                    }\n+                    // The keyword has not been seen yet, suggest correct placement in the function front matter\n+                    else if let Some(WrongKw::Misplaced(correct_pos_sp)) = wrong_kw {\n+                        let correct_pos_sp = correct_pos_sp.to(self.prev_token.span);\n+                        if let Ok(current_qual) = self.span_to_snippet(correct_pos_sp) {\n+                            let misplaced_qual_sp = self.token.uninterpolated_span();\n+                            let misplaced_qual = self.span_to_snippet(misplaced_qual_sp).unwrap();\n \n                             err.span_suggestion(\n-                                current_qual_sp.to(invalid_qual_sp),\n-                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n-                                format!(\"{} {}\", invalid_qual, current_qual),\n-                                Applicability::MachineApplicable,\n-                            ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                                    correct_pos_sp.to(misplaced_qual_sp),\n+                                    &format!(\"`{}` must come before `{}`\", misplaced_qual, current_qual),\n+                                    format!(\"{} {}\", misplaced_qual, current_qual),\n+                                    Applicability::MachineApplicable,\n+                                ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n                         }\n                     }\n-                    // Recover incorrect visibility order such as `async pub`.\n+                    // Recover incorrect visibility order such as `async pub`\n                     else if self.check_keyword(kw::Pub) {\n                         let sp = sp_start.to(self.prev_token.span);\n                         if let Ok(snippet) = self.span_to_snippet(sp) {\n-                            let vis = match self.parse_visibility(FollowedByType::No) {\n+                            let current_vis = match self.parse_visibility(FollowedByType::No) {\n                                 Ok(v) => v,\n                                 Err(mut d) => {\n                                     d.cancel();\n                                     return Err(err);\n                                 }\n                             };\n-                            let vs = pprust::vis_to_string(&vis);\n+                            let vs = pprust::vis_to_string(&current_vis);\n                             let vs = vs.trim_end();\n-                            err.span_suggestion(\n-                                sp_start.to(self.prev_token.span),\n-                                &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n-                                format!(\"{} {}\", vs, snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n+\n+                            // There was no explicit visibility\n+                            if matches!(orig_vis.kind, VisibilityKind::Inherited) {\n+                                err.span_suggestion(\n+                                    sp_start.to(self.prev_token.span),\n+                                    &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n+                                    format!(\"{} {}\", vs, snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                            // There was an explicit visibility\n+                            else {\n+                                err.span_suggestion(\n+                                    current_vis.span,\n+                                    \"there is already a visibility modifier, remove one\",\n+                                    \"\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                )\n+                                .span_note(orig_vis.span, \"explicit visibility first seen here\");\n+                            }\n                         }\n                     }\n                     return Err(err);"}, {"sha": "02a774ba1291cf4228441acb11a1d863bc3d53bd", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -474,7 +474,13 @@ impl<'a> Parser<'a> {\n         params: Vec<GenericParam>,\n         recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, TyKind> {\n-        let ast::FnHeader { ext, unsafety, constness, asyncness } = self.parse_fn_front_matter()?;\n+        let inherited_vis = rustc_ast::Visibility {\n+            span: rustc_span::DUMMY_SP,\n+            kind: rustc_ast::VisibilityKind::Inherited,\n+            tokens: None,\n+        };\n+        let ast::FnHeader { ext, unsafety, constness, asyncness } =\n+            self.parse_fn_front_matter(&inherited_vis)?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {"}, {"sha": "8db706c3709c1451767dd68a37bc67a53b9318e9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -13,6 +13,7 @@ use crate::errors::{\n };\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n+use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, ErrorReported, FatalError};\n use rustc_hir as hir;\n@@ -24,7 +25,8 @@ use rustc_hir::{GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n-use rustc_session::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n+use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n+use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2266,13 +2268,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Parses the programmer's textual representation of a type into our\n     /// internal notion of a type.\n     pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n-        self.ast_ty_to_ty_inner(ast_ty, false)\n+        self.ast_ty_to_ty_inner(ast_ty, false, false)\n+    }\n+\n+    /// Parses the programmer's textual representation of a type into our\n+    /// internal notion of a type.  This is meant to be used within a path.\n+    pub fn ast_ty_to_ty_in_path(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n+        self.ast_ty_to_ty_inner(ast_ty, false, true)\n     }\n \n     /// Turns a `hir::Ty` into a `Ty`. For diagnostics' purposes we keep track of whether trait\n     /// objects are borrowed like `&dyn Trait` to avoid emitting redundant errors.\n     #[tracing::instrument(level = \"debug\", skip(self))]\n-    fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool) -> Ty<'tcx> {\n+    fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool, in_path: bool) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n         let result_ty = match ast_ty.kind {\n@@ -2283,7 +2291,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Rptr(ref region, ref mt) => {\n                 let r = self.ast_region_to_region(region, None);\n                 debug!(?r);\n-                let t = self.ast_ty_to_ty_inner(mt.ty, true);\n+                let t = self.ast_ty_to_ty_inner(mt.ty, true, false);\n                 tcx.mk_ref(r, ty::TypeAndMut { ty: t, mutbl: mt.mutbl })\n             }\n             hir::TyKind::Never => tcx.types.never,\n@@ -2302,6 +2310,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ))\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n+                self.maybe_lint_bare_trait(ast_ty, in_path);\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n@@ -2329,7 +2338,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(?qself, ?segment);\n-                let ty = self.ast_ty_to_ty(qself);\n+                let ty = self.ast_ty_to_ty_inner(qself, false, true);\n \n                 let res = if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = qself.kind {\n                     path.res\n@@ -2586,4 +2595,62 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n         Some(r)\n     }\n+\n+    fn maybe_lint_bare_trait(&self, self_ty: &hir::Ty<'_>, in_path: bool) {\n+        let tcx = self.tcx();\n+        if let hir::TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n+            self_ty.kind\n+        {\n+            let needs_bracket = in_path\n+                && !tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_prev_source(self_ty.span)\n+                    .ok()\n+                    .map_or(false, |s| s.trim_end().ends_with('<'));\n+\n+            let is_global = poly_trait_ref.trait_ref.path.is_global();\n+            let sugg = Vec::from_iter([\n+                (\n+                    self_ty.span.shrink_to_lo(),\n+                    format!(\n+                        \"{}dyn {}\",\n+                        if needs_bracket { \"<\" } else { \"\" },\n+                        if is_global { \"(\" } else { \"\" },\n+                    ),\n+                ),\n+                (\n+                    self_ty.span.shrink_to_hi(),\n+                    format!(\n+                        \"{}{}\",\n+                        if is_global { \")\" } else { \"\" },\n+                        if needs_bracket { \">\" } else { \"\" },\n+                    ),\n+                ),\n+            ]);\n+            if self_ty.span.edition() >= Edition::Edition2021 {\n+                let msg = \"trait objects must include the `dyn` keyword\";\n+                let label = \"add `dyn` keyword before this trait\";\n+                rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg)\n+                    .multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable)\n+                    .emit();\n+            } else {\n+                let msg = \"trait objects without an explicit `dyn` are deprecated\";\n+                tcx.struct_span_lint_hir(\n+                    BARE_TRAIT_OBJECTS,\n+                    self_ty.hir_id,\n+                    self_ty.span,\n+                    |lint| {\n+                        lint.build(msg)\n+                            .multipart_suggestion_verbose(\n+                                \"use `dyn`\",\n+                                sugg,\n+                                Applicability::MachineApplicable,\n+                            )\n+                            .emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n }"}, {"sha": "67630fd4e582bd24c1084df4ed781f40f082beab", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -6,15 +6,14 @@ use crate::check::callee::{self, DeferredCallResolution};\n use crate::check::method::{self, MethodCallee, SelfSource};\n use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n-use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, GenericArg, Node, QPath, TyKind};\n+use rustc_hir::{ExprKind, GenericArg, Node, QPath};\n use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::{InferOk, InferResult};\n@@ -28,8 +27,6 @@ use rustc_middle::ty::{\n     Ty, UserType,\n };\n use rustc_session::lint;\n-use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -855,7 +852,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // to be object-safe.\n                 // We manually call `register_wf_obligation` in the success path\n                 // below.\n-                (<dyn AstConv<'_>>::ast_ty_to_ty(self, qself), qself, segment)\n+                (<dyn AstConv<'_>>::ast_ty_to_ty_in_path(self, qself), qself, segment)\n             }\n             QPath::LangItem(..) => {\n                 bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")\n@@ -901,7 +898,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n         if result.is_ok() {\n-            self.maybe_lint_bare_trait(qpath, hir_id, span);\n             self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n@@ -914,56 +910,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId, span: Span) {\n-        if let QPath::TypeRelative(self_ty, _) = qpath {\n-            if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n-                self_ty.kind\n-            {\n-                let msg = \"trait objects without an explicit `dyn` are deprecated\";\n-                let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span) {\n-                    Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n-                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                    }\n-                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                // Wrap in `<..>` if it isn't already.\n-                let sugg = match self.tcx.sess.source_map().span_to_snippet(span) {\n-                    Ok(s) if s.starts_with('<') => sugg,\n-                    _ => format!(\"<{}>\", sugg),\n-                };\n-                let sugg_label = \"use `dyn`\";\n-                if self.sess().edition() >= Edition::Edition2021 {\n-                    let mut err = rustc_errors::struct_span_err!(\n-                        self.sess(),\n-                        self_ty.span,\n-                        E0782,\n-                        \"{}\",\n-                        msg,\n-                    );\n-                    err.span_suggestion(\n-                        self_ty.span,\n-                        sugg_label,\n-                        sugg,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                } else {\n-                    self.tcx.struct_span_lint_hir(\n-                        BARE_TRAIT_OBJECTS,\n-                        hir_id,\n-                        self_ty.span,\n-                        |lint| {\n-                            let mut db = lint.build(msg);\n-                            db.span_suggestion(self_ty.span, sugg_label, sugg, app);\n-                            db.emit()\n-                        },\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n     /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n     pub(in super::super) fn get_node_fn_decl(\n         &self,"}, {"sha": "67f77f14a6e6bcb0382e7b5f68f347795226e8a9", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -123,6 +123,7 @@\n #![feature(const_num_from_num)]\n #![feature(const_ops)]\n #![feature(const_option)]\n+#![feature(const_option_ext)]\n #![feature(const_pin)]\n #![feature(const_replace)]\n #![feature(const_ptr_is_null)]"}, {"sha": "8969c6f617130225d1185b667cd8b3883249fea3", "filename": "library/core/src/option.rs", "status": "modified", "additions": 191, "deletions": 51, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -589,12 +589,13 @@ impl<T> Option<T> {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    pub fn contains<U>(&self, x: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn contains<U>(&self, x: &U) -> bool\n     where\n-        U: PartialEq<T>,\n+        U: ~const PartialEq<T>,\n     {\n         match self {\n-            Some(y) => x == y,\n+            Some(y) => x.eq(y),\n             None => false,\n         }\n     }\n@@ -660,10 +661,14 @@ impl<T> Option<T> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n-        // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n-        // which is pinned.\n-        unsafe { Pin::get_ref(self).as_ref().map(|x| Pin::new_unchecked(x)) }\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n+        match Pin::get_ref(self).as_ref() {\n+            // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n+            // which is pinned.\n+            Some(x) => unsafe { Some(Pin::new_unchecked(x)) },\n+            None => None,\n+        }\n     }\n \n     /// Converts from <code>[Pin]<[&mut] Option\\<T>></code> to <code>Option<[Pin]<[&mut] T>></code>.\n@@ -672,10 +677,16 @@ impl<T> Option<T> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n         // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`.\n         // `x` is guaranteed to be pinned because it comes from `self` which is pinned.\n-        unsafe { Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x)) }\n+        unsafe {\n+            match Pin::get_unchecked_mut(self).as_mut() {\n+                Some(x) => Some(Pin::new_unchecked(x)),\n+                None => None,\n+            }\n+        }\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n@@ -764,7 +775,11 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or(self, default: T) -> T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn unwrap_or(self, default: T) -> T\n+    where\n+        T: ~const Drop,\n+    {\n         match self {\n             Some(x) => x,\n             None => default,\n@@ -782,7 +797,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn unwrap_or_else<F>(self, f: F) -> T\n+    where\n+        F: ~const FnOnce() -> T,\n+        F: ~const Drop,\n+    {\n         match self {\n             Some(x) => x,\n             None => f(),\n@@ -812,7 +832,8 @@ impl<T> Option<T> {\n     #[inline]\n     #[track_caller]\n     #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n-    pub unsafe fn unwrap_unchecked(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const unsafe fn unwrap_unchecked(self) -> T {\n         debug_assert!(self.is_some());\n         match self {\n             Some(val) => val,\n@@ -842,7 +863,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn map<U, F>(self, f: F) -> Option<U>\n+    where\n+        F: ~const FnOnce(T) -> U,\n+        F: ~const Drop,\n+    {\n         match self {\n             Some(x) => Some(f(x)),\n             None => None,\n@@ -866,7 +892,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n-    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn inspect<F>(self, f: F) -> Self\n+    where\n+        F: ~const FnOnce(&T),\n+        F: ~const Drop,\n+    {\n         if let Some(ref x) = self {\n             f(x);\n         }\n@@ -894,7 +925,13 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn map_or<U, F>(self, default: U, f: F) -> U\n+    where\n+        F: ~const FnOnce(T) -> U,\n+        F: ~const Drop,\n+        U: ~const Drop,\n+    {\n         match self {\n             Some(t) => f(t),\n             None => default,\n@@ -917,7 +954,14 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn map_or_else<U, D: FnOnce() -> U, F: FnOnce(T) -> U>(self, default: D, f: F) -> U {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n+    where\n+        D: ~const FnOnce() -> U,\n+        D: ~const Drop,\n+        F: ~const FnOnce(T) -> U,\n+        F: ~const Drop,\n+    {\n         match self {\n             Some(t) => f(t),\n             None => default(),\n@@ -947,7 +991,11 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ok_or<E>(self, err: E) -> Result<T, E> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn ok_or<E>(self, err: E) -> Result<T, E>\n+    where\n+        E: ~const Drop,\n+    {\n         match self {\n             Some(v) => Ok(v),\n             None => Err(err),\n@@ -972,7 +1020,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ok_or_else<E, F: FnOnce() -> E>(self, err: F) -> Result<T, E> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n+    where\n+        F: ~const FnOnce() -> E,\n+        F: ~const Drop,\n+    {\n         match self {\n             Some(v) => Ok(v),\n             None => Err(err()),\n@@ -1049,7 +1102,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn and<U>(self, optb: Option<U>) -> Option<U> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn and<U>(self, optb: Option<U>) -> Option<U>\n+    where\n+        T: ~const Drop,\n+        U: ~const Drop,\n+    {\n         match self {\n             Some(_) => optb,\n             None => None,\n@@ -1074,7 +1132,12 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn and_then<U, F>(self, f: F) -> Option<U>\n+    where\n+        F: ~const FnOnce(T) -> Option<U>,\n+        F: ~const Drop,\n+    {\n         match self {\n             Some(x) => f(x),\n             None => None,\n@@ -1107,7 +1170,13 @@ impl<T> Option<T> {\n     /// [`Some(t)`]: Some\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n-    pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn filter<P>(self, predicate: P) -> Self\n+    where\n+        T: ~const Drop,\n+        P: ~const FnOnce(&T) -> bool,\n+        P: ~const Drop,\n+    {\n         if let Some(x) = self {\n             if predicate(&x) {\n                 return Some(x);\n@@ -1145,9 +1214,13 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn or(self, optb: Option<T>) -> Option<T> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn or(self, optb: Option<T>) -> Option<T>\n+    where\n+        T: ~const Drop,\n+    {\n         match self {\n-            Some(_) => self,\n+            Some(x) => Some(x),\n             None => optb,\n         }\n     }\n@@ -1167,9 +1240,14 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn or_else<F>(self, f: F) -> Option<T>\n+    where\n+        F: ~const FnOnce() -> Option<T>,\n+        F: ~const Drop,\n+    {\n         match self {\n-            Some(_) => self,\n+            Some(x) => Some(x),\n             None => f(),\n         }\n     }\n@@ -1197,7 +1275,11 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n-    pub fn xor(self, optb: Option<T>) -> Option<T> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn xor(self, optb: Option<T>) -> Option<T>\n+    where\n+        T: ~const Drop,\n+    {\n         match (self, optb) {\n             (Some(a), None) => Some(a),\n             (None, Some(b)) => Some(b),\n@@ -1231,7 +1313,11 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to set a value, consider assignment instead\"]\n     #[inline]\n     #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    pub fn insert(&mut self, value: T) -> &mut T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn insert(&mut self, value: T) -> &mut T\n+    where\n+        T: ~const Drop,\n+    {\n         *self = Some(value);\n \n         // SAFETY: the code above just filled the option\n@@ -1260,8 +1346,18 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n-        self.get_or_insert_with(|| value)\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn get_or_insert(&mut self, value: T) -> &mut T\n+    where\n+        T: ~const Drop,\n+    {\n+        if let None = *self {\n+            *self = Some(value);\n+        }\n+\n+        // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n+        // variant in the code above.\n+        unsafe { self.as_mut().unwrap_unchecked() }\n     }\n \n     /// Inserts the default value into the option if it is [`None`], then\n@@ -1285,11 +1381,17 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"option_get_or_insert_default\", issue = \"82901\")]\n-    pub fn get_or_insert_default(&mut self) -> &mut T\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn get_or_insert_default(&mut self) -> &mut T\n     where\n-        T: Default,\n+        T: ~const Default,\n     {\n-        self.get_or_insert_with(Default::default)\n+        #[rustc_allow_const_fn_unstable(const_fn_trait_bound)]\n+        const fn default<T: ~const Default>() -> T {\n+            T::default()\n+        }\n+\n+        self.get_or_insert_with(default)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`],\n@@ -1311,17 +1413,21 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n+    where\n+        F: ~const FnOnce() -> T,\n+        F: ~const Drop,\n+    {\n         if let None = *self {\n-            *self = Some(f());\n+            // the compiler isn't smart enough to know that we are not dropping a `T`\n+            // here and wants us to ensure `T` can be dropped at compile time.\n+            mem::forget(mem::replace(self, Some(f())))\n         }\n \n-        match self {\n-            Some(v) => v,\n-            // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n-            // variant in the code above.\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n+        // SAFETY: a `None` variant for `self` would have been replaced by a `Some`\n+        // variant in the code above.\n+        unsafe { self.as_mut().unwrap_unchecked() }\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n@@ -1391,7 +1497,12 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip(z), None);\n     /// ```\n     #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n-    pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)> {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\n+    where\n+        T: ~const Drop,\n+        U: ~const Drop,\n+    {\n         match (self, other) {\n             (Some(a), Some(b)) => Some((a, b)),\n             _ => None,\n@@ -1427,11 +1538,18 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip_with(None, Point::new), None);\n     /// ```\n     #[unstable(feature = \"option_zip\", issue = \"70086\")]\n-    pub fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n-        F: FnOnce(T, U) -> R,\n+        F: ~const FnOnce(T, U) -> R,\n+        F: ~const Drop,\n+        T: ~const Drop,\n+        U: ~const Drop,\n     {\n-        Some(f(self?, other?))\n+        match (self, other) {\n+            (Some(a), Some(b)) => Some(f(a, b)),\n+            _ => None,\n+        }\n     }\n }\n \n@@ -1503,8 +1621,12 @@ impl<T: Copy> Option<&mut T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n-    pub fn copied(self) -> Option<T> {\n-        self.map(|&mut t| t)\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn copied(self) -> Option<T> {\n+        match self {\n+            Some(&mut t) => Some(t),\n+            None => None,\n+        }\n     }\n }\n \n@@ -1591,7 +1713,11 @@ impl<T: Default> Option<T> {\n     /// [`FromStr`]: crate::str::FromStr\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or_default(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn unwrap_or_default(self) -> T\n+    where\n+        T: ~const Default,\n+    {\n         match self {\n             Some(x) => x,\n             None => Default::default(),\n@@ -1615,8 +1741,15 @@ impl<T: Deref> Option<T> {\n     /// assert_eq!(x.as_deref(), None);\n     /// ```\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    pub fn as_deref(&self) -> Option<&T::Target> {\n-        self.as_ref().map(|t| t.deref())\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_deref(&self) -> Option<&T::Target>\n+    where\n+        T: ~const Deref,\n+    {\n+        match self.as_ref() {\n+            Some(t) => Some(t.deref()),\n+            None => None,\n+        }\n     }\n }\n \n@@ -1636,8 +1769,15 @@ impl<T: DerefMut> Option<T> {\n     /// }), Some(\"HEY\".to_owned().as_mut_str()));\n     /// ```\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    pub fn as_deref_mut(&mut self) -> Option<&mut T::Target> {\n-        self.as_mut().map(|t| t.deref_mut())\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n+    where\n+        T: ~const DerefMut,\n+    {\n+        match self.as_mut() {\n+            Some(t) => Some(t.deref_mut()),\n+            None => None,\n+        }\n     }\n }\n "}, {"sha": "21562acf3d766cad63cc648c08f0f907ad34e4c7", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -70,8 +70,10 @@\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n+#![feature(option_result_contains)]\n #![feature(unsized_tuple_coercion)]\n #![feature(const_option)]\n+#![feature(const_option_ext)]\n #![feature(const_result)]\n #![feature(integer_atomics)]\n #![feature(int_roundings)]"}, {"sha": "da692461261fcc6cf44941729e87abe33cceb628", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 88, "deletions": 10, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -86,17 +86,49 @@ fn test_and() {\n     let x: Option<isize> = None;\n     assert_eq!(x.and(Some(2)), None);\n     assert_eq!(x.and(None::<isize>), None);\n+\n+    const FOO: Option<isize> = Some(1);\n+    const A: Option<isize> = FOO.and(Some(2));\n+    const B: Option<isize> = FOO.and(None);\n+    assert_eq!(A, Some(2));\n+    assert_eq!(B, None);\n+\n+    const BAR: Option<isize> = None;\n+    const C: Option<isize> = BAR.and(Some(2));\n+    const D: Option<isize> = BAR.and(None);\n+    assert_eq!(C, None);\n+    assert_eq!(D, None);\n }\n \n #[test]\n fn test_and_then() {\n+    const fn plus_one(x: isize) -> Option<isize> {\n+        Some(x + 1)\n+    }\n+\n+    const fn none(_: isize) -> Option<isize> {\n+        None\n+    }\n+\n     let x: Option<isize> = Some(1);\n-    assert_eq!(x.and_then(|x| Some(x + 1)), Some(2));\n-    assert_eq!(x.and_then(|_| None::<isize>), None);\n+    assert_eq!(x.and_then(plus_one), Some(2));\n+    assert_eq!(x.and_then(none), None);\n \n     let x: Option<isize> = None;\n-    assert_eq!(x.and_then(|x| Some(x + 1)), None);\n-    assert_eq!(x.and_then(|_| None::<isize>), None);\n+    assert_eq!(x.and_then(plus_one), None);\n+    assert_eq!(x.and_then(none), None);\n+\n+    const FOO: Option<isize> = Some(1);\n+    const A: Option<isize> = FOO.and_then(plus_one);\n+    const B: Option<isize> = FOO.and_then(none);\n+    assert_eq!(A, Some(2));\n+    assert_eq!(B, None);\n+\n+    const BAR: Option<isize> = None;\n+    const C: Option<isize> = BAR.and_then(plus_one);\n+    const D: Option<isize> = BAR.and_then(none);\n+    assert_eq!(C, None);\n+    assert_eq!(D, None);\n }\n \n #[test]\n@@ -108,17 +140,49 @@ fn test_or() {\n     let x: Option<isize> = None;\n     assert_eq!(x.or(Some(2)), Some(2));\n     assert_eq!(x.or(None), None);\n+\n+    const FOO: Option<isize> = Some(1);\n+    const A: Option<isize> = FOO.or(Some(2));\n+    const B: Option<isize> = FOO.or(None);\n+    assert_eq!(A, Some(1));\n+    assert_eq!(B, Some(1));\n+\n+    const BAR: Option<isize> = None;\n+    const C: Option<isize> = BAR.or(Some(2));\n+    const D: Option<isize> = BAR.or(None);\n+    assert_eq!(C, Some(2));\n+    assert_eq!(D, None);\n }\n \n #[test]\n fn test_or_else() {\n+    const fn two() -> Option<isize> {\n+        Some(2)\n+    }\n+\n+    const fn none() -> Option<isize> {\n+        None\n+    }\n+\n     let x: Option<isize> = Some(1);\n-    assert_eq!(x.or_else(|| Some(2)), Some(1));\n-    assert_eq!(x.or_else(|| None), Some(1));\n+    assert_eq!(x.or_else(two), Some(1));\n+    assert_eq!(x.or_else(none), Some(1));\n \n     let x: Option<isize> = None;\n-    assert_eq!(x.or_else(|| Some(2)), Some(2));\n-    assert_eq!(x.or_else(|| None), None);\n+    assert_eq!(x.or_else(two), Some(2));\n+    assert_eq!(x.or_else(none), None);\n+\n+    const FOO: Option<isize> = Some(1);\n+    const A: Option<isize> = FOO.or_else(two);\n+    const B: Option<isize> = FOO.or_else(none);\n+    assert_eq!(A, Some(1));\n+    assert_eq!(B, Some(1));\n+\n+    const BAR: Option<isize> = None;\n+    const C: Option<isize> = BAR.or_else(two);\n+    const D: Option<isize> = BAR.or_else(none);\n+    assert_eq!(C, Some(2));\n+    assert_eq!(D, None);\n }\n \n #[test]\n@@ -149,15 +213,29 @@ fn test_unwrap_or() {\n \n     let x: Option<isize> = None;\n     assert_eq!(x.unwrap_or(2), 2);\n+\n+    const A: isize = Some(1).unwrap_or(2);\n+    const B: isize = None.unwrap_or(2);\n+    assert_eq!(A, 1);\n+    assert_eq!(B, 2);\n }\n \n #[test]\n fn test_unwrap_or_else() {\n+    const fn two() -> isize {\n+        2\n+    }\n+\n     let x: Option<isize> = Some(1);\n-    assert_eq!(x.unwrap_or_else(|| 2), 1);\n+    assert_eq!(x.unwrap_or_else(two), 1);\n \n     let x: Option<isize> = None;\n-    assert_eq!(x.unwrap_or_else(|| 2), 2);\n+    assert_eq!(x.unwrap_or_else(two), 2);\n+\n+    const A: isize = Some(1).unwrap_or_else(two);\n+    const B: isize = None.unwrap_or_else(two);\n+    assert_eq!(A, 1);\n+    assert_eq!(B, 2);\n }\n \n #[test]"}, {"sha": "84ccf25ef750e1e5adc0c95660156618578925e5", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -20,21 +20,16 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n     let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n-    let mut _8: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-    let mut _9: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     scope 1 {\n         debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }\n-    scope 2 (inlined String::new) {      // at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n-        let mut _6: std::vec::Vec<u8>;   // in scope 2 at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n-        scope 3 (inlined Vec::<u8>::new) { // at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n-        }\n-    }\n \n     bb0: {\n-        _9 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-        switchInt(move _9) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     }\n \n     bb1: {"}, {"sha": "c40d99c9d4c3d70741e47be5c45f39724316a31d", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,6 +10,6 @@\n /// #![warn(unused)]\n /// let x = 12;\n ///\n-/// fn foo(x: &std::fmt::Display) {}\n+/// fn foo(x: &dyn std::fmt::Display) {}\n /// ```\n pub fn foo() {}"}, {"sha": "41c1f41f2cfc8d3d9e9c27af5b40f3b8616440dd", "filename": "src/test/rustdoc-ui/display-output.stdout", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -5,16 +5,6 @@ test $DIR/display-output.rs - foo (line 9) ... ok\n successes:\n \n ---- $DIR/display-output.rs - foo (line 9) stdout ----\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/display-output.rs:13:12\n-   |\n-LL | fn foo(x: &std::fmt::Display) {}\n-   |            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn std::fmt::Display`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n warning: unused variable: `x`\n   --> $DIR/display-output.rs:11:5\n    |\n@@ -31,13 +21,13 @@ LL | #![warn(unused)]\n warning: unused variable: `x`\n   --> $DIR/display-output.rs:13:8\n    |\n-LL | fn foo(x: &std::fmt::Display) {}\n+LL | fn foo(x: &dyn std::fmt::Display) {}\n    |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n warning: function is never used: `foo`\n   --> $DIR/display-output.rs:13:4\n    |\n-LL | fn foo(x: &std::fmt::Display) {}\n+LL | fn foo(x: &dyn std::fmt::Display) {}\n    |    ^^^\n    |\n note: the lint level is defined here\n@@ -47,7 +37,7 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n-warning: 4 warnings emitted\n+warning: 3 warnings emitted\n \n \n "}, {"sha": "7ffe3c1ef954ab6378d2c072698f6189be11a194", "filename": "src/test/ui/closures/closure-expected.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -11,8 +11,8 @@ LL |     let y = x.or_else(4);\n note: required by a bound in `Option::<T>::or_else`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n-   |                       ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n+LL |         F: ~const FnOnce() -> Option<T>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::or_else`\n \n error: aborting due to previous error\n "}, {"sha": "883348eb98c708a100de973996c79043f4ca19d9", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,8 +10,8 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "e12e07a28e76363b03b0c796205582a56b0bf404", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -12,8 +12,6 @@ fn b() {\n     //~^ ERROR expected trait, found constant `BAR`\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n-    //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "d9bcc523b1fc46c454caf69567598dba6e0d3671", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,7 +10,7 @@ LL |     foo::<{ BAR + 3 }>();\n    |           +         +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:19:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:17:11\n    |\n LL |     foo::<3 + 3>();\n    |           ^^^^^\n@@ -21,7 +21,7 @@ LL |     foo::<{ 3 + 3 }>();\n    |           +       +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:22:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:20:15\n    |\n LL |     foo::<BAR - 3>();\n    |               ^ expected one of `,` or `>`\n@@ -32,7 +32,7 @@ LL |     foo::<{ BAR - 3 }>();\n    |           +         +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:25:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:23:15\n    |\n LL |     foo::<BAR - BAR>();\n    |               ^ expected one of `,` or `>`\n@@ -43,7 +43,7 @@ LL |     foo::<{ BAR - BAR }>();\n    |           +           +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-suggest-missing-braces.rs:28:11\n+  --> $DIR/const-expression-suggest-missing-braces.rs:26:11\n    |\n LL |     foo::<100 - BAR>();\n    |           ^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     foo::<{ 100 - BAR }>();\n    |           +           +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:31:19\n+  --> $DIR/const-expression-suggest-missing-braces.rs:29:19\n    |\n LL |     foo::<bar<i32>()>();\n    |                   ^ expected one of `,` or `>`\n@@ -65,7 +65,7 @@ LL |     foo::<{ bar<i32>() }>();\n    |           +            +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:34:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:32:21\n    |\n LL |     foo::<bar::<i32>()>();\n    |                     ^ expected one of `,` or `>`\n@@ -76,7 +76,7 @@ LL |     foo::<{ bar::<i32>() }>();\n    |           +              +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:37:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:35:21\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -87,7 +87,7 @@ LL |     foo::<{ bar::<i32>() + BAR }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `(`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:40:21\n+  --> $DIR/const-expression-suggest-missing-braces.rs:38:21\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |                     ^ expected one of `,` or `>`\n@@ -98,7 +98,7 @@ LL |     foo::<{ bar::<i32>() - BAR }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:43:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:41:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -109,7 +109,7 @@ LL |     foo::<{ BAR - bar::<i32>() }>();\n    |           +                    +\n \n error: expected one of `,` or `>`, found `-`\n-  --> $DIR/const-expression-suggest-missing-braces.rs:46:15\n+  --> $DIR/const-expression-suggest-missing-braces.rs:44:15\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |               ^ expected one of `,` or `>`\n@@ -131,23 +131,13 @@ error[E0404]: expected trait, found constant `BAR`\n LL |     foo::<BAR + BAR>();\n    |                 ^^^ not a trait\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/const-expression-suggest-missing-braces.rs:11:11\n-   |\n-LL |     foo::<BAR + BAR>();\n-   |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11\n    |\n LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^\n \n-error: aborting due to 14 previous errors; 1 warning emitted\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0404, E0747.\n For more information about an error, try `rustc --explain E0404`."}, {"sha": "d5576ebfd029613f052d27969366a0733c52c4f6", "filename": "src/test/ui/consts/const-eval/issue-91827-extern-types.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-91827-extern-types.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -0,0 +1,58 @@\n+// run-pass\n+//\n+// Test that we can handle unsized types with an extern type tail part.\n+// Regression test for issue #91827.\n+\n+#![feature(const_ptr_offset_from)]\n+#![feature(const_slice_from_raw_parts)]\n+#![feature(extern_types)]\n+\n+use std::ptr::addr_of;\n+\n+extern \"C\" {\n+    type Opaque;\n+}\n+\n+unsafe impl Sync for Opaque {}\n+\n+#[repr(C)]\n+pub struct List<T> {\n+    len: usize,\n+    data: [T; 0],\n+    tail: Opaque,\n+}\n+\n+#[repr(C)]\n+pub struct ListImpl<T, const N: usize> {\n+    len: usize,\n+    data: [T; N],\n+}\n+\n+impl<T> List<T> {\n+    const fn as_slice(&self) -> &[T] {\n+        unsafe { std::slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+    }\n+}\n+\n+impl<T, const N: usize> ListImpl<T, N> {\n+    const fn as_list(&self) -> &List<T> {\n+        unsafe { std::mem::transmute(self) }\n+    }\n+}\n+\n+pub static A: ListImpl<u128, 3> = ListImpl {\n+    len: 3,\n+    data: [5, 6, 7],\n+};\n+pub static A_REF: &'static List<u128> = A.as_list();\n+pub static A_TAIL_OFFSET: isize = tail_offset(A.as_list());\n+\n+const fn tail_offset<T>(list: &List<T>) -> isize {\n+    unsafe { (addr_of!(list.tail) as *const u8).offset_from(list as *const List<T> as *const u8) }\n+}\n+\n+fn main() {\n+    assert_eq!(A_REF.as_slice(), &[5, 6, 7]);\n+    // Check that interpreter and code generation agree about the position of the tail field.\n+    assert_eq!(A_TAIL_OFFSET, tail_offset(A_REF));\n+}"}, {"sha": "609a5b0de6b7e2c3ca7e374f5fd338b5e290672c", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -32,6 +32,8 @@ type G = dyn 'static + (Send)::AssocTy;\n // Recovery should not apply in this context.\n type H = Fn(u8) -> (u8)::Output;\n //~^ ERROR ambiguous associated type\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n macro_rules! ty {\n     ($ty: ty) => ($ty::AssocTy);"}, {"sha": "11514a28b2ca591394f48eb58de8c0ed388bcaec", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -41,13 +41,13 @@ LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<dyn 'static + (Send)>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:46:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: try: `<ty!()>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:39:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: try: `<$ty>::AssocTy`\n@@ -99,14 +99,28 @@ error[E0223]: ambiguous associated type\n LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn Send + 'static) as Trait>::AssocTy`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bad-assoc-ty.rs:33:10\n+   |\n+LL | type H = Fn(u8) -> (u8)::Output;\n+   |          ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL | type H = <dyn Fn(u8) -> (u8)>::Output;\n+   |          ++++               +\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:33:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:39:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n@@ -117,13 +131,13 @@ LL | type J = ty!(u8);\n    = note: this error originates in the macro `ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:46:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:49:13\n+  --> $DIR/bad-assoc-ty.rs:51:13\n    |\n LL | fn foo<X: K<_, _>>(x: X) {}\n    |             ^  ^ not allowed in type signatures\n@@ -136,7 +150,7 @@ LL | fn foo<X: K<T, T>, T>(x: X) {}\n    |             ~  ~ +++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:52:34\n+  --> $DIR/bad-assoc-ty.rs:54:34\n    |\n LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n    |                                  ^ not allowed in type signatures\n@@ -147,7 +161,7 @@ LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n    |         +++                         ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:55:19\n+  --> $DIR/bad-assoc-ty.rs:57:19\n    |\n LL | fn baz<F: Fn() -> _>(_: F) {}\n    |                   ^ not allowed in type signatures\n@@ -158,7 +172,7 @@ LL | fn baz<F: Fn() -> T, T>(_: F) {}\n    |                   ~+++\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/bad-assoc-ty.rs:58:33\n+  --> $DIR/bad-assoc-ty.rs:60:33\n    |\n LL | struct L<F>(F) where F: Fn() -> _;\n    |                                 ^ not allowed in type signatures\n@@ -169,7 +183,7 @@ LL | struct L<F, T>(F) where F: Fn() -> T;\n    |           +++                      ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/bad-assoc-ty.rs:60:30\n+  --> $DIR/bad-assoc-ty.rs:62:30\n    |\n LL | struct M<F> where F: Fn() -> _ {\n    |                              ^ not allowed in type signatures\n@@ -180,7 +194,7 @@ LL | struct M<F, T> where F: Fn() -> T {\n    |           +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for enums\n-  --> $DIR/bad-assoc-ty.rs:64:28\n+  --> $DIR/bad-assoc-ty.rs:66:28\n    |\n LL | enum N<F> where F: Fn() -> _ {\n    |                            ^ not allowed in type signatures\n@@ -191,7 +205,7 @@ LL | enum N<F, T> where F: Fn() -> T {\n    |         +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for unions\n-  --> $DIR/bad-assoc-ty.rs:69:29\n+  --> $DIR/bad-assoc-ty.rs:71:29\n    |\n LL | union O<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -202,7 +216,7 @@ LL | union O<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for traits\n-  --> $DIR/bad-assoc-ty.rs:74:29\n+  --> $DIR/bad-assoc-ty.rs:76:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -213,7 +227,7 @@ LL | trait P<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/bad-assoc-ty.rs:79:38\n+  --> $DIR/bad-assoc-ty.rs:81:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n    |                                      ^ not allowed in type signatures\n@@ -223,7 +237,7 @@ help: use type parameters instead\n LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n    |             +++                         ~\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 28 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "a074b5fa5f7aa88b442c24e53fe855c20af48c17", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -6,6 +6,14 @@ fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~| WARN this is accepted in the current edition\n     //~| ERROR trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let _x: &SomeTrait = todo!();\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition"}, {"sha": "b8e4942dfefb241fce474c30e22fd582a3c86615", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,7 +2,7 @@ error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n    |\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-   |                 ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                 ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/dyn-2018-edition-lint.rs:2:8\n@@ -11,24 +11,95 @@ LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n    |\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n-   |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                                   ^^^^^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/dyn-2018-edition-lint.rs:9:14\n+  --> $DIR/dyn-2018-edition-lint.rs:17:14\n    |\n LL |     let _x: &SomeTrait = todo!();\n-   |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |              ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _x: &SomeTrait = todo!();\n+LL +     let _x: &dyn SomeTrait = todo!();\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:17\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                 ^^^^^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-2018-edition-lint.rs:4:35\n+   |\n+LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+   |                                   ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "0f05d8753eaa58cbfde26b1baab1935cc2a56381", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -4,7 +4,6 @@ fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~^ ERROR trait objects must include the `dyn` keyword\n     //~| ERROR trait objects must include the `dyn` keyword\n     let _x: &SomeTrait = todo!();\n-    //~^ ERROR trait objects must include the `dyn` keyword\n }\n \n trait SomeTrait {}"}, {"sha": "b5bc359d7166d912bcb925889a48eb67ea192bc9", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,14 +1,3 @@\n-error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/dyn-2021-edition-error.rs:6:14\n-   |\n-LL |     let _x: &SomeTrait = todo!();\n-   |              ^^^^^^^^^\n-   |\n-help: add `dyn` keyword before this trait\n-   |\n-LL |     let _x: &dyn SomeTrait = todo!();\n-   |              +++\n-\n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:17\n    |\n@@ -17,8 +6,9 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   |                 +++\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n+   | \n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:35\n@@ -28,9 +18,10 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |\n help: add `dyn` keyword before this trait\n    |\n-LL | fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   |                                   +++\n+LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n+LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n+   | \n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0782`."}, {"sha": "00069a3e7adb1c4135af4c2349d5b166c4eee915", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -15,8 +15,6 @@ impl fmt::Display for Foo {\n         <dyn fmt::Debug>::fmt(self, f)\n         //~^ ERROR trait objects without an explicit `dyn` are deprecated\n         //~| WARNING this is accepted in the current edition\n-        //~| ERROR trait objects without an explicit `dyn` are deprecated\n-        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "ee5fee4cfb8b4b8cc5d6ee4a59a1dc69b74c35a9", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -15,8 +15,6 @@ impl fmt::Display for Foo {\n         <fmt::Debug>::fmt(self, f)\n         //~^ ERROR trait objects without an explicit `dyn` are deprecated\n         //~| WARNING this is accepted in the current edition\n-        //~| ERROR trait objects without an explicit `dyn` are deprecated\n-        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "fd4030e96226b86516aaff36cce45be2c2a614fe", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,7 +2,7 @@ error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-angle-brackets.rs:15:10\n    |\n LL |         <fmt::Debug>::fmt(self, f)\n-   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n+   |          ^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/dyn-angle-brackets.rs:4:9\n@@ -11,15 +11,11 @@ LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/dyn-angle-brackets.rs:15:10\n+help: use `dyn`\n    |\n-LL |         <fmt::Debug>::fmt(self, f)\n-   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL -         <fmt::Debug>::fmt(self, f)\n+LL +         <dyn fmt::Debug>::fmt(self, f)\n+   | \n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "de0444b63e2670dbf84bdebdab259d415b285655", "filename": "src/test/ui/editions/dyn-trait-sugg-2021.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -3,10 +3,10 @@\n trait Foo<T> {}\n \n impl<T> dyn Foo<T> {\n-    fn hi(_x: T)  {}\n+    fn hi(_x: T) {}\n }\n \n fn main() {\n     Foo::hi(123);\n-    //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+    //~^ ERROR trait objects must include the `dyn` keyword\n }"}, {"sha": "8c68dec1df7e407bca61289b95a4528222a26b06", "filename": "src/test/ui/editions/dyn-trait-sugg-2021.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fdyn-trait-sugg-2021.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,8 +1,13 @@\n-error[E0782]: trait objects without an explicit `dyn` are deprecated\n+error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-trait-sugg-2021.rs:10:5\n    |\n LL |     Foo::hi(123);\n-   |     ^^^ help: use `dyn`: `<dyn Foo>`\n+   |     ^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL |     <dyn Foo>::hi(123);\n+   |     ++++    +\n \n error: aborting due to previous error\n "}, {"sha": "9db9cfc7ff0244c8bc81bc09da01b2cc6cc86c22", "filename": "src/test/ui/expr/malformed_closure/ruby_style_closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fmalformed_closure%2Fruby_style_closure.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -23,8 +23,8 @@ LL | |     });\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn and_then<U, F: FnOnce(T) -> Option<U>>(self, f: F) -> Option<U> {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n+LL |         F: ~const FnOnce(T) -> Option<U>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::and_then`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f01da8c61ed1d8d47cfd4c861b57ecbc13e08c29", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -9,7 +9,5 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR: parenthesized generic arguments cannot be used\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n-  //~| WARNING: trait objects without an explicit `dyn` are deprecated\n-  //~| WARNING: this is accepted in the current edition\n \n fn main() {}"}, {"sha": "6014a02c4d96fb40f4e29cdbe325e0e8bd66b0c9", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,16 +10,6 @@ error: parenthesized generic arguments cannot be used in associated type constra\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:7:29\n-   |\n-LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n-   |                             ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n    |\n@@ -50,6 +40,6 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "1a6a7f46b2742da92b949c6d22b7782f0faadd6b", "filename": "src/test/ui/issues/issue-28344.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -4,8 +4,12 @@ fn main() {\n     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n     //~^ ERROR must be specified\n     //~| no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n \n     let g = BitXor::bitor;\n     //~^ ERROR must be specified\n     //~| no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "b1d1c01b27a3c483c70e8679159dfb19ce7901f3", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,3 +1,17 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-28344.rs:4:17\n+   |\n+LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n+   |                 ^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let x: u8 = <dyn BitXor>::bitor(0 as u8, 0 as u8);\n+   |                 ++++       +\n+\n error[E0191]: the value of the associated type `Output` (from trait `BitXor`) must be specified\n   --> $DIR/issue-28344.rs:4:17\n    |\n@@ -13,22 +27,35 @@ LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                         function or associated item not found in `dyn BitXor<_>`\n    |                         help: there is an associated function with a similar name: `bitxor`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-28344.rs:10:13\n+   |\n+LL |     let g = BitXor::bitor;\n+   |             ^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let g = <dyn BitXor>::bitor;\n+   |             ++++       +\n+\n error[E0191]: the value of the associated type `Output` (from trait `BitXor`) must be specified\n-  --> $DIR/issue-28344.rs:8:13\n+  --> $DIR/issue-28344.rs:10:13\n    |\n LL |     let g = BitXor::bitor;\n    |             ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n error[E0599]: no function or associated item named `bitor` found for trait object `dyn BitXor<_>` in the current scope\n-  --> $DIR/issue-28344.rs:8:21\n+  --> $DIR/issue-28344.rs:10:21\n    |\n LL |     let g = BitXor::bitor;\n    |                     ^^^^^\n    |                     |\n    |                     function or associated item not found in `dyn BitXor<_>`\n    |                     help: there is an associated function with a similar name: `bitxor`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 2 warnings emitted\n \n Some errors have detailed explanations: E0191, E0599.\n For more information about an error, try `rustc --explain E0191`."}, {"sha": "d596b4a69f34a89c1c352dab236708feb6da91a4", "filename": "src/test/ui/issues/issue-47706-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706-trait.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -11,8 +11,8 @@ LL |         None::<()>.map(Self::f);\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error: aborting due to previous error\n "}, {"sha": "0b4f84a330a548f3b2b371ca18f8d5f46c49e0b2", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -12,8 +12,8 @@ LL |         self.foo.map(Foo::new)\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                      ^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n+LL |         F: ~const FnOnce(T) -> U,\n+   |            ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Option::<T>::map`\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9"}, {"sha": "c838fde5d73b6867e5a242634445b63c69aa1df0", "filename": "src/test/ui/issues/issue-58734.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -19,4 +19,6 @@ fn main() {\n     // no object safety error\n     Trait::nonexistent(());\n     //~^ ERROR no function or associated item named `nonexistent` found\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "a91a1b3778edbdd0e668276c901ea2ac60b89298", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,9 +1,23 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-58734.rs:20:5\n+   |\n+LL |     Trait::nonexistent(());\n+   |     ^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Trait>::nonexistent(());\n+   |     ++++      +\n+\n error[E0599]: no function or associated item named `nonexistent` found for trait object `dyn Trait` in the current scope\n   --> $DIR/issue-58734.rs:20:12\n    |\n LL |     Trait::nonexistent(());\n    |            ^^^^^^^^^^^ function or associated item not found in `dyn Trait`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "5b2f04ffa83093b1c3eaa773dc3e54b520cbd7f7", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -18,11 +18,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-86756.rs:5:15\n    |\n LL |     eq::<dyn, Foo>\n-   |               ^^^ help: use `dyn`: `dyn Foo`\n+   |               ^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     eq::<dyn, Foo>\n+LL +     eq::<dyn, dyn Foo>\n+   | \n \n error[E0107]: missing generics for trait `Foo`\n   --> $DIR/issue-86756.rs:5:15"}, {"sha": "0e2294715cd8bb1762c950efa68ec354e445b750", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -21,4 +21,6 @@ fn main() {\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n     //~| WARN this is accepted in the current edition\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n+    //~^ WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "4b8c2b539d55aefcf860691e462c950351c81e02", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,3 +1,17 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bare-trait-objects-path.rs:23:12\n+   |\n+LL |     let _: Dyn::Ty;\n+   |            ^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let _: <dyn Dyn>::Ty;\n+   |            ++++    +\n+\n error[E0223]: ambiguous associated type\n   --> $DIR/bare-trait-objects-path.rs:23:12\n    |\n@@ -8,30 +22,41 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:14:5\n    |\n LL |     Dyn::func();\n-   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |     ^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Dyn>::func();\n+   |     ++++    +\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:17:5\n    |\n LL |     ::Dyn::func();\n-   |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n+   |     ^^^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn (::Dyn)>::func();\n+   |     ++++++     ++\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:20:5\n    |\n LL |     Dyn::CONST;\n-   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |     ^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     <dyn Dyn>::CONST;\n+   |     ++++    +\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to previous error; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0223`."}, {"sha": "631a8cb2f08cc0fae85cb64824aef2fe2e797101", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "99d97ba52a0f23987a7a5e00a03b0f80daecfdc6", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "fdba7f4105e732fb7e5e6b4d722db6b078f68c4b", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -8,5 +8,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "90496ca7d2078439d8b5ad068837a5b0b96d81ce", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/cap-lints-allow.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/cap-lints-allow.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "7ad7462ddc55060dc0c13a520b9ec5795c87ed9d", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -8,5 +8,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "b6d36eaac44480b04a13310aab2cab520fda720d", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "ee5a18c38292bf700d4b5a4211dec5498344a0cf", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "e8fdaa72cc0f653ce286cf7a5839ddf2ae25e463", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-lint-group.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-lint-group.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "248aece6fe77c8723aa40862cef2016960a4c7b7", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -10,5 +10,9 @@ pub trait SomeTrait {}\n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n //~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n+//~| WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "2de30d0c2f43d1f7c3115d495e3ce8238361e66a", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,44 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n    |\n LL | pub fn function(_x: Box<SomeTrait>) {}\n-   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |                         ^^^^^^^^^\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub fn function(_x: Box<SomeTrait>) {}\n+LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n+   | \n \n-warning: 1 warning emitted\n+warning: 3 warnings emitted\n "}, {"sha": "e283eaa88dd136f52257f41aa4dc997afbe7d7d7", "filename": "src/test/ui/lint/unused/unused-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -31,7 +31,7 @@ fn test2() {\n }\n \n fn main() {\n-    foo::<isize>(); //~ ERROR: unused result\n+    foo::<isize>(); //~ ERROR: unused result of type `isize`\n     foo::<MustUse>(); //~ ERROR: unused `MustUse` that must be used\n     foo::<MustUseMsg>(); //~ ERROR: unused `MustUseMsg` that must be used\n     //~^ NOTE: some message"}, {"sha": "087e06341cdde2dd4a906aef27db31a3bcba8767", "filename": "src/test/ui/lint/unused/unused-result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-result.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -18,7 +18,7 @@ LL |     foo::<MustUseMsg>();\n    |\n    = note: some message\n \n-error: unused result\n+error: unused result of type `isize`\n   --> $DIR/unused-result.rs:34:5\n    |\n LL |     foo::<isize>();"}, {"sha": "be4d68f2de70714cce3a3fc8507a9223a9f4d4c6", "filename": "src/test/ui/mir/remove-zsts-query-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fmir%2Fremove-zsts-query-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fmir%2Fremove-zsts-query-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fremove-zsts-query-cycle.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,7 +2,7 @@\n //   optimized mir -> remove zsts -> layout of a generator -> optimized mir.\n //\n // edition:2018\n-// compile-flags: --crate-type=lib\n+// compile-flags: --crate-type=lib -Zinline-mir=yes\n // build-pass\n \n pub async fn listen() -> Result<(), std::io::Error> {"}, {"sha": "32aeee294728a74b59e55cc97688824f2933fa2d", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,6 +1,9 @@\n fn main() {}\n \n-extern \"C\" {\n+extern \"C\" { //~ NOTE while parsing this item list starting here\n     pub pub fn foo();\n     //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n-}\n+    //~| NOTE expected one of 9 possible tokens\n+    //~| HELP there is already a visibility modifier, remove one\n+    //~| NOTE explicit visibility first seen here\n+} //~ NOTE the item list ends here"}, {"sha": "97144ac2f642d3b7672f402a9ebda101d321a9c9", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -7,10 +7,16 @@ LL |     pub pub fn foo();\n    |         ^^^\n    |         |\n    |         expected one of 9 possible tokens\n-   |         help: visibility `pub` must come before `pub pub`: `pub pub pub`\n-LL |\n+   |         help: there is already a visibility modifier, remove one\n+...\n LL | }\n    | - the item list ends here\n+   |\n+note: explicit visibility first seen here\n+  --> $DIR/duplicate-visibility.rs:4:5\n+   |\n+LL |     pub pub fn foo();\n+   |     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e3ea61dc4ada6c9d3253382e060e64bd8e43f916", "filename": "src/test/ui/parser/issue-87694-duplicated-pub.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -0,0 +1,5 @@\n+pub const pub fn test() {}\n+//~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+//~| NOTE expected one of `async`, `extern`, `fn`, or `unsafe`\n+//~| HELP there is already a visibility modifier, remove one\n+//~| NOTE explicit visibility first seen here"}, {"sha": "8d242bc9de5850d74a7b53dddb8d0cf15af63444", "filename": "src/test/ui/parser/issue-87694-duplicated-pub.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-duplicated-pub.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -0,0 +1,17 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-87694-duplicated-pub.rs:1:11\n+   |\n+LL | pub const pub fn test() {}\n+   |           ^^^\n+   |           |\n+   |           expected one of `async`, `extern`, `fn`, or `unsafe`\n+   |           help: there is already a visibility modifier, remove one\n+   |\n+note: explicit visibility first seen here\n+  --> $DIR/issue-87694-duplicated-pub.rs:1:1\n+   |\n+LL | pub const pub fn test() {}\n+   | ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f824617cade1288e4fd107c397a6642016fb2f5", "filename": "src/test/ui/parser/issue-87694-misplaced-pub.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -0,0 +1,5 @@\n+const pub fn test() {}\n+//~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+//~| NOTE expected one of `async`, `extern`, `fn`, or `unsafe`\n+//~| HELP visibility `pub` must come before `const`\n+//~| SUGGESTION pub const"}, {"sha": "94c6a29efcb3b7c769512ab5cd07024593187911", "filename": "src/test/ui/parser/issue-87694-misplaced-pub.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87694-misplaced-pub.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-87694-misplaced-pub.rs:1:7\n+   |\n+LL | const pub fn test() {}\n+   | ------^^^\n+   | |     |\n+   | |     expected one of `async`, `extern`, `fn`, or `unsafe`\n+   | help: visibility `pub` must come before `const`: `pub const`\n+\n+error: aborting due to previous error\n+"}, {"sha": "29c12352146b54568aeac81d6a121978f2fa294a", "filename": "src/test/ui/parser/issues/issue-68890-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -3,5 +3,3 @@ fn main() {}\n type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n-//~| WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is accepted in the current edition"}, {"sha": "d9fb7beebdb69e2191ecd93ccf88baf4f80e4641", "filename": "src/test/ui/parser/issues/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-68890-2.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -4,22 +4,12 @@ error: `?` may only modify trait bounds, not lifetime bounds\n LL | type X<'a> = (?'a) +;\n    |               ^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-68890-2.rs:3:14\n-   |\n-LL | type X<'a> = (?'a) +;\n-   |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-68890-2.rs:3:14\n    |\n LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0224`."}, {"sha": "5f731f8db775b97a48879bf14425a6e1fdbbc83a", "filename": "src/test/ui/parser/issues/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -13,11 +13,7 @@ mac!('a);\n // avoid false positives\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n-    //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n-    //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }"}, {"sha": "799bc16bd6abfb61da04ca6a530dc5e98719eeed", "filename": "src/test/ui/parser/issues/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-73568-lifetime-after-mut.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -22,37 +22,18 @@ LL | mac!('a);\n    = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found trait `Send`\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:19:28\n+  --> $DIR/issue-73568-lifetime-after-mut.rs:17:28\n    |\n LL |     let z = y as &mut 'a + Send;\n    |                            ^^^^ not a value\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n-   |\n-LL | fn y<'a>(y: &mut 'a + Send) {\n-   |                  ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-73568-lifetime-after-mut.rs:19:23\n-   |\n-LL |     let z = y as &mut 'a + Send;\n-   |                       ^^ help: use `dyn`: `dyn 'a`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-73568-lifetime-after-mut.rs:14:18\n    |\n LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0178, E0224, E0423.\n For more information about an error, try `rustc --explain E0178`."}, {"sha": "df0cd54399a538a4262487191e72699984db5df3", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/const-async-const.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,11 +1,9 @@\n // edition:2018\n \n-// Test that even when `const` is already present, the proposed fix is `const const async`,\n-// like for `pub pub`.\n+// Test that even when `const` is already present, the proposed fix is to remove the second `const`\n \n const async const fn test() {}\n //~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n //~| NOTE expected one of `extern`, `fn`, or `unsafe`\n-//~| HELP `const` must come before `async`\n-//~| SUGGESTION const async\n-//~| NOTE keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+//~| HELP `const` already used earlier, remove this one\n+//~| NOTE `const` first seen here"}, {"sha": "977c6ebfef352bc6999849e679297a0c0ba89762", "filename": "src/test/ui/parser/issues/issue-87217-keyword-order/const-async-const.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-87217-keyword-order%2Fconst-async-const.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,13 +1,17 @@\n error: expected one of `extern`, `fn`, or `unsafe`, found keyword `const`\n-  --> $DIR/const-async-const.rs:6:13\n+  --> $DIR/const-async-const.rs:5:13\n    |\n LL | const async const fn test() {}\n-   |       ------^^^^^\n-   |       |     |\n-   |       |     expected one of `extern`, `fn`, or `unsafe`\n-   |       help: `const` must come before `async`: `const async`\n+   |             ^^^^^\n+   |             |\n+   |             expected one of `extern`, `fn`, or `unsafe`\n+   |             help: `const` already used earlier, remove this one\n    |\n-   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n+note: `const` first seen here\n+  --> $DIR/const-async-const.rs:5:1\n+   |\n+LL | const async const fn test() {}\n+   | ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "560195977d03a91776673da99db60d48b1f9a70b", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -11,6 +11,4 @@ fn main() {\n     m!('static);\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n-    //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is accepted in the current edition\n }"}, {"sha": "40082564bad4c52a2ee9e4d7e98abd1dc69d88f2", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -4,22 +4,12 @@ error: lifetime in trait object type must be followed by `+`\n LL |     m!('static);\n    |        ^^^^^^^\n \n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-macro-matcher.rs:11:8\n-   |\n-LL |     m!('static);\n-   |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n-   |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-macro-matcher.rs:11:8\n    |\n LL |     m!('static);\n    |        ^^^^^^^\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0224`."}, {"sha": "a852337b6fe454d30155e102101eaf484e0dc369", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -20,29 +20,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:8:16\n    |\n LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:13:16\n-   |\n-LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n+help: use `dyn`\n    |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n-\n-warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:18:16\n-   |\n-LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n-   |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL -     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+LL +     let _: Box<dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   | \n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -55,6 +42,20 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/trait-object-trait-parens.rs:13:16\n+   |\n+LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+LL +     let _: Box<dyn ?Sized + (for<'a> Trait<'a>) + (Obj)>;\n+   | \n+\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:13:47\n    |\n@@ -66,6 +67,20 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/trait-object-trait-parens.rs:18:16\n+   |\n+LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+LL +     let _: Box<dyn for<'a> Trait<'a> + (Obj) + (?Sized)>;\n+   | \n+\n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:18:36\n    |"}, {"sha": "3c9d0f72abe0c0f643e2c8c63555dd2de8873ce8", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -11,8 +11,8 @@ LL |     let _y = foo;\n note: this function takes ownership of the receiver `self`, which moves `foo`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n-   |                                      ^^^^\n+LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n+   |                            ^^^^\n help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));"}, {"sha": "a27c38452539cd408601ee8ff43d97625bc0157e", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -18,10 +18,20 @@ pub struct Qux<T>(T);\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n     //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n+    //~| ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "1eebd8d60ca90b43fe812e450e8e80a09df5aeb2", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,8 +1,8 @@\n error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/issue-61963.rs:22:14\n+  --> $DIR/issue-61963.rs:28:14\n    |\n LL |     bar: Box<Bar>,\n-   |              ^^^ help: use `dyn`: `dyn Bar`\n+   |              ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-61963.rs:3:9\n@@ -11,15 +11,95 @@ LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n    |\n LL | pub struct Foo {\n-   | ^^^ help: use `dyn`: `dyn pub`\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:28:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:28:14\n+   |\n+LL |     bar: Box<Bar>,\n+   |              ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL -     bar: Box<Bar>,\n+LL +     bar: Box<dyn Bar>,\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-61963.rs:18:1\n+   |\n+LL | pub struct Foo {\n+   | ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - pub struct Foo {\n+LL + dyn pub struct Foo {\n+   | \n \n-error: aborting due to 2 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "08f6d166d226f85f476df509fcf7e7a2b90d460b", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -2,11 +2,16 @@ warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/not-on-bare-trait.rs:7:12\n    |\n LL | fn foo(_x: Foo + Send) {\n-   |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n+   |            ^^^^^^^^^^\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - fn foo(_x: Foo + Send) {\n+LL + fn foo(_x: dyn Foo + Send) {\n+   | \n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "158b5a9855752b126a189f45b788f730da0bc09c", "filename": "src/test/ui/unspecified-self-in-trait-ref.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.rs?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -9,12 +9,22 @@ pub trait Bar<X=usize, A=Self> {\n fn main() {\n     let a = Foo::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let b = Foo::<_>::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let c = Bar::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let d = Bar::<usize, _>::lol();\n     //~^ ERROR no function or associated item named\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n     let e = Bar::<usize>::lol();\n     //~^ ERROR must be explicitly specified\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "2ba921871577304f8aa6b0b486d3bf9d411697c2", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208ced64db20bd947a2ba5c90f37936fd3ab352b/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=208ced64db20bd947a2ba5c90f37936fd3ab352b", "patch": "@@ -1,29 +1,95 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:10:13\n+   |\n+LL |     let a = Foo::lol();\n+   |             ^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let a = <dyn Foo>::lol();\n+   |             ++++    +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Foo<_>` in the current scope\n   --> $DIR/unspecified-self-in-trait-ref.rs:10:18\n    |\n LL |     let a = Foo::lol();\n    |                  ^^^ function or associated item not found in `dyn Foo<_>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:14:13\n+   |\n+LL |     let b = Foo::<_>::lol();\n+   |             ^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let b = <dyn Foo::<_>>::lol();\n+   |             ++++         +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Foo<_>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:12:23\n+  --> $DIR/unspecified-self-in-trait-ref.rs:14:23\n    |\n LL |     let b = Foo::<_>::lol();\n    |                       ^^^ function or associated item not found in `dyn Foo<_>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:18:13\n+   |\n+LL |     let c = Bar::lol();\n+   |             ^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let c = <dyn Bar>::lol();\n+   |             ++++    +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Bar<_, _>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:14:18\n+  --> $DIR/unspecified-self-in-trait-ref.rs:18:18\n    |\n LL |     let c = Bar::lol();\n    |                  ^^^ function or associated item not found in `dyn Bar<_, _>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:22:13\n+   |\n+LL |     let d = Bar::<usize, _>::lol();\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let d = <dyn Bar::<usize, _>>::lol();\n+   |             ++++                +\n+\n error[E0599]: no function or associated item named `lol` found for trait object `dyn Bar<usize, _>` in the current scope\n-  --> $DIR/unspecified-self-in-trait-ref.rs:16:30\n+  --> $DIR/unspecified-self-in-trait-ref.rs:22:30\n    |\n LL |     let d = Bar::<usize, _>::lol();\n    |                              ^^^ function or associated item not found in `dyn Bar<usize, _>`\n \n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/unspecified-self-in-trait-ref.rs:26:13\n+   |\n+LL |     let e = Bar::<usize>::lol();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL |     let e = <dyn Bar::<usize>>::lol();\n+   |             ++++             +\n+\n error[E0393]: the type parameter `A` must be explicitly specified\n-  --> $DIR/unspecified-self-in-trait-ref.rs:18:13\n+  --> $DIR/unspecified-self-in-trait-ref.rs:26:13\n    |\n LL | / pub trait Bar<X=usize, A=Self> {\n LL | |     fn foo(&self);\n@@ -35,7 +101,7 @@ LL |       let e = Bar::<usize>::lol();\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 5 warnings emitted\n \n Some errors have detailed explanations: E0393, E0599.\n For more information about an error, try `rustc --explain E0393`."}]}