{"sha": "f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "node_id": "C_kwDOAAsO6NoAKGY0Mjk3YjA2ZThkYjc1ZmNmNmIzZmVlYWU5MTczOWJhNmZmZDRkNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-16T07:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-16T07:10:21Z"}, "message": "Rollup merge of #98125 - KarlWithK:entry_add_modify_doc, r=Dylan-DPC\n\nEntry and_modify doc\n\nThis PR modifies the documentation for [HashMap](https://doc.rust-lang.org/std/collections/struct.HashMap.html#) and [BTreeMap](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#) by introducing examples for `and_modify`. `and_modify` is a function that tends to give more idiomatic rust code when dealing with these data structures -- yet it lacked examples and was hidden away. This PR adds that and addresses #98122.\n\nI've made some choices which I tried to explain in my commits. This is my first time contributing to rust, so hopefully, I made the right choices.", "tree": {"sha": "4a7f077897e818067ac1f988ccd205925b68e80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7f077897e818067ac1f988ccd205925b68e80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqtddCRBK7hj4Ov3rIwAAejMIAElWqWwnnL+GZXbu6q2PT6ml\n2xZtChF2xwYbkXaVND78HizFmeCAZ253XuUtOd+qEBmHwQolPVDfED6S6fpRfBOe\nbV2HTzahm2weAVa8t2DDiJCoZOhHKKexq28No16xe/GgsJXk9EXa22df05OVWGnn\nwB9w5kFPRZYAdBTmSt0ID0orFnx0a96v1jBt6DTpEK4GWcbzSFbehlznfjvtf/7J\nqkJ1uf3cZZOmzhiPkn0ZJeJZ1am6hhlimelYV40zGmpPSjyxDKQdsQlREWLkAPNz\n19wclYmggEzyUqU7jrYihFeyBj+uXVyqoMAuw3s8VXBEx9zAPvhmYRfunkshTfo=\n=uUm5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a7f077897e818067ac1f988ccd205925b68e80a\nparent 95be954af412e4473499a3745c84583c545f15e5\nparent 791923aacbbab0933f8ff1108a120194addccf6b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1655363421 +0200\ncommitter GitHub <noreply@github.com> 1655363421 +0200\n\nRollup merge of #98125 - KarlWithK:entry_add_modify_doc, r=Dylan-DPC\n\nEntry and_modify doc\n\nThis PR modifies the documentation for [HashMap](https://doc.rust-lang.org/std/collections/struct.HashMap.html#) and [BTreeMap](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#) by introducing examples for `and_modify`. `and_modify` is a function that tends to give more idiomatic rust code when dealing with these data structures -- yet it lacked examples and was hidden away. This PR adds that and addresses #98122.\n\nI've made some choices which I tried to explain in my commits. This is my first time contributing to rust, so hopefully, I made the right choices.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "html_url": "https://github.com/rust-lang/rust/commit/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95be954af412e4473499a3745c84583c545f15e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/95be954af412e4473499a3745c84583c545f15e5", "html_url": "https://github.com/rust-lang/rust/commit/95be954af412e4473499a3745c84583c545f15e5"}, {"sha": "791923aacbbab0933f8ff1108a120194addccf6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/791923aacbbab0933f8ff1108a120194addccf6b", "html_url": "https://github.com/rust-lang/rust/commit/791923aacbbab0933f8ff1108a120194addccf6b"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "f23980faa041739fb65805cd9157f0b2f6031ae8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "patch": "@@ -161,6 +161,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// // update a key, guarding against the key possibly not being set\n /// let stat = player_stats.entry(\"attack\").or_insert(100);\n /// *stat += random_stat_buff();\n+///\n+/// // modify an entry before an insert with in-place mutation\n+/// player_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeMap\")]\n@@ -1211,10 +1214,12 @@ impl<K, V, A: Allocator> BTreeMap<K, V, A> {\n     ///\n     /// // count the number of occurrences of letters in the vec\n     /// for x in [\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n-    ///     *count.entry(x).or_insert(0) += 1;\n+    ///     count.entry(x).and_modify(|curr| *curr += 1).or_insert(1);\n     /// }\n     ///\n     /// assert_eq!(count[\"a\"], 3);\n+    /// assert_eq!(count[\"b\"], 2);\n+    /// assert_eq!(count[\"c\"], 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<'_, K, V, A>"}, {"sha": "192a21f2ffc2d2eff53645aee1a38ad9ef55aef8", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4297b06e8db75fcf6b3feeae91739ba6ffd4d66/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=f4297b06e8db75fcf6b3feeae91739ba6ffd4d66", "patch": "@@ -164,6 +164,9 @@ use crate::sys;\n /// // update a key, guarding against the key possibly not being set\n /// let stat = player_stats.entry(\"attack\").or_insert(100);\n /// *stat += random_stat_buff();\n+///\n+/// // modify an entry before an insert with in-place mutation\n+/// player_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n /// ```\n ///\n /// The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\n@@ -829,8 +832,7 @@ where\n     /// let mut letters = HashMap::new();\n     ///\n     /// for ch in \"a short treatise on fungi\".chars() {\n-    ///     let counter = letters.entry(ch).or_insert(0);\n-    ///     *counter += 1;\n+    ///     letters.entry(ch).and_modify(|counter| *counter += 1).or_insert(1);\n     /// }\n     ///\n     /// assert_eq!(letters[&'s'], 2);"}]}