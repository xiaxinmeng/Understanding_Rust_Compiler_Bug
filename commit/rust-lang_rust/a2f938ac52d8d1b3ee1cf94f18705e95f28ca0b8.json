{"sha": "a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjkzOGFjNTJkOGQxYjNlZTFjZjk0ZjE4NzA1ZTk1ZjI4Y2EwYjg=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-19T11:05:15Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-19T11:05:15Z"}, "message": "Document that heap allocations are not guaranteed to happen, even if explicitly performed in the code", "tree": {"sha": "f4ad9440f976476ec9e1d275c3fe55ea5c7d95da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ad9440f976476ec9e1d275c3fe55ea5c7d95da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "html_url": "https://github.com/rust-lang/rust/commit/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e49a9ead550551e879af64ba91a0316da1c422", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e49a9ead550551e879af64ba91a0316da1c422", "html_url": "https://github.com/rust-lang/rust/commit/30e49a9ead550551e879af64ba91a0316da1c422"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "65406125a3dbcf33dd64fbc7f8aab8547f5faf8b", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "patch": "@@ -53,6 +53,19 @@ use crate::ptr;\n /// * `Layout` queries and calculations in general must be correct. Callers of\n ///   this trait are allowed to rely on the contracts defined on each method,\n ///   and implementors must ensure such contracts remain true.\n+///\n+/// * You may not rely on allocations actually happening, even if there are explicit\n+///   heap allocations in the source. The optimizer may detect allocation/deallocation\n+///   pairs that it can instead move to stack allocations/deallocations and thus never\n+///   invoke the allocator here.\n+///   More concretely, the following code example is unsound, irrespective of whether your\n+///   custom allocator allows counting how many allocations have happened.\n+///\n+///   ```rust,ignore\n+///   drop(Box::new(42));\n+///   let number_of_heap_allocs = /* call private allocator API */;\n+///   unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n+///   ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n pub unsafe trait GlobalAlloc {\n     /// Allocate memory as described by the given `layout`."}, {"sha": "47d5ad9ad56095c477d0e5559f3d632de289434a", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=a2f938ac52d8d1b3ee1cf94f18705e95f28ca0b8", "patch": "@@ -94,6 +94,18 @@ pub unsafe trait AllocRef {\n     /// The returned block may have a larger size than specified by `layout.size()`, and may or may\n     /// not have its contents initialized.\n     ///\n+    /// Note that you may not rely on this method actually getting called, even if there are calls\n+    /// to it in the source. The optimizer may detect allocation/deallocation pairs that it can\n+    /// instead move to stack allocations/deallocations and thus never invoke the allocator here.\n+    /// More concretely, the following code example is unsound, irrespective of whether your\n+    /// custom allocator allows counting how many allocations have happened.\n+    ///\n+    /// ```rust,ignore\n+    /// Global::dealloc(Global::alloc(some_layout));\n+    /// let number_of_heap_allocs = /* call private allocator API */;\n+    /// unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n+    /// ```\n+    ///\n     /// # Errors\n     ///\n     /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet"}]}