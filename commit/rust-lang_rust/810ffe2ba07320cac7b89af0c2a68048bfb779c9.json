{"sha": "810ffe2ba07320cac7b89af0c2a68048bfb779c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGZmZTJiYTA3MzIwY2FjN2I4OWFmMGMyYTY4MDQ4YmZiNzc5Yzk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-08-01T14:00:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-01T14:00:26Z"}, "message": "Rollup merge of #63122 - Centril:fix-63115, r=petrochenkov\n\nAccount for `maybe_whole_expr` in range patterns\n\nFixes https://github.com/rust-lang/rust/issues/63115 (fallout from https://github.com/rust-lang/rust/pull/62550).\n\nr? @petrochenkov", "tree": {"sha": "41f7ef742d5d0a7cb4bbed18d3b566c7ee497981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f7ef742d5d0a7cb4bbed18d3b566c7ee497981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810ffe2ba07320cac7b89af0c2a68048bfb779c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdQvB6CRBK7hj4Ov3rIwAAdHIIACjYbJv/X1pESMGhMRNzNuUc\na+eEHM5b1/1jsX9laU86BxYJ9/C8C9O9ezLDWW1bHhFwkfhEgDImCQwJaSHo0EQ4\nIDu33av8C5YH7L+7Z6+8rAmPxIeymwM/xIz3f/fqNMpb2CfJBD76RuwFiTmmuKO8\nwypstF0cbupyWsV1DjpVErou8iuM7PkIZq3Eyo3n/SMgYsDQiwol/JneP91tyZlc\nE77CN5hJC+313aPUfkra1+C3muE62wHHfNLgpBi/CsQY/3KmWX/9GQgvGjSLTn7E\nidl+FrYD1YznVpHG2zkLVspHpzP51v3omZp7Pbedm2GafxlRbnp2+qycL3SgZ4w=\n=ixBg\n-----END PGP SIGNATURE-----\n", "payload": "tree 41f7ef742d5d0a7cb4bbed18d3b566c7ee497981\nparent e2934bab3ea0e1cdcd15e215629ba0ea17507449\nparent 6551285ccaf1562eb73ca1013730165b4d415d8e\nauthor Pietro Albini <pietro@pietroalbini.org> 1564668026 +0200\ncommitter GitHub <noreply@github.com> 1564668026 +0200\n\nRollup merge of #63122 - Centril:fix-63115, r=petrochenkov\n\nAccount for `maybe_whole_expr` in range patterns\n\nFixes https://github.com/rust-lang/rust/issues/63115 (fallout from https://github.com/rust-lang/rust/pull/62550).\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810ffe2ba07320cac7b89af0c2a68048bfb779c9", "html_url": "https://github.com/rust-lang/rust/commit/810ffe2ba07320cac7b89af0c2a68048bfb779c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810ffe2ba07320cac7b89af0c2a68048bfb779c9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2934bab3ea0e1cdcd15e215629ba0ea17507449", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2934bab3ea0e1cdcd15e215629ba0ea17507449", "html_url": "https://github.com/rust-lang/rust/commit/e2934bab3ea0e1cdcd15e215629ba0ea17507449"}, {"sha": "6551285ccaf1562eb73ca1013730165b4d415d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6551285ccaf1562eb73ca1013730165b4d415d8e", "html_url": "https://github.com/rust-lang/rust/commit/6551285ccaf1562eb73ca1013730165b4d415d8e"}], "stats": {"total": 149, "additions": 142, "deletions": 7}, "files": [{"sha": "7096d6799e2cdf3e7fe438cc28a544a39a9d73ab", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=810ffe2ba07320cac7b89af0c2a68048bfb779c9", "patch": "@@ -143,6 +143,7 @@ macro_rules! maybe_whole_expr {\n                         $p.token.span, ExprKind::Block(block, None), ThinVec::new()\n                     ));\n                 }\n+                // N.B: `NtIdent(ident)` is normalized to `Ident` in `fn bump`.\n                 _ => {},\n             };\n         }\n@@ -2756,12 +2757,7 @@ impl<'a> Parser<'a> {\n                     // can't continue an expression after an ident\n                     token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),\n                     token::Literal(..) | token::Pound => true,\n-                    token::Interpolated(ref nt) => match **nt {\n-                        token::NtIdent(..) | token::NtExpr(..) |\n-                        token::NtBlock(..) | token::NtPath(..) => true,\n-                        _ => false,\n-                    },\n-                    _ => false\n+                    _ => t.is_whole_expr(),\n                 };\n                 let cannot_continue_expr = self.look_ahead(1, token_cannot_continue_expr);\n                 if cannot_continue_expr {\n@@ -3728,6 +3724,7 @@ impl<'a> Parser<'a> {\n         self.token.is_path_start() // e.g. `MY_CONST`;\n             || self.token == token::Dot // e.g. `.5` for recovery;\n             || self.token.can_begin_literal_or_bool() // e.g. `42`.\n+            || self.token.is_whole_expr()\n     }\n \n     // Helper function to decide whether to parse as ident binding"}, {"sha": "73adb5c947c0b64ab777780c80a0e75bb1877df8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=810ffe2ba07320cac7b89af0c2a68048bfb779c9", "patch": "@@ -476,6 +476,19 @@ impl Token {\n         false\n     }\n \n+    /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?\n+    /// That is, is this a pre-parsed expression dropped into the token stream\n+    /// (which happens while parsing the result of macro expansion)?\n+    crate fn is_whole_expr(&self) -> bool {\n+        if let Interpolated(ref nt) = self.kind {\n+            if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     crate fn is_mutability(&self) -> bool {\n         self.is_keyword(kw::Mut) ||"}, {"sha": "a7d10ca9320a6cee464fec063ba0de8454223bdc", "filename": "src/test/ui/parser/issue-63115-range-pat-interpolated.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63115-range-pat-interpolated.rs?ref=810ffe2ba07320cac7b89af0c2a68048bfb779c9", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(exclusive_range_pattern)]\n+\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    macro_rules! mac_expr {\n+        ($e:expr) => {\n+            if let 2...$e = 3 {}\n+            if let 2..=$e = 3 {}\n+            if let 2..$e = 3 {}\n+        }\n+    }\n+    mac_expr!(4);\n+}"}, {"sha": "260e108315973642bee25231146bc77780d777c7", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=810ffe2ba07320cac7b89af0c2a68048bfb779c9", "patch": "@@ -121,3 +121,31 @@ fn inclusive2_to() {\n     //~| ERROR `...` range patterns are deprecated\n     //~| ERROR mismatched types\n }\n+\n+fn with_macro_expr_var() {\n+    macro_rules! mac2 {\n+        ($e1:expr, $e2:expr) => {\n+            let $e1..$e2;\n+            let $e1...$e2;\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e1..=$e2;\n+        }\n+    }\n+\n+    mac2!(0, 1);\n+\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let ..$e; //~ ERROR `..X` range patterns are not supported\n+            let ...$e; //~ ERROR `...X` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let ..=$e; //~ ERROR `..=X` range patterns are not supported\n+            let $e..; //~ ERROR `X..` range patterns are not supported\n+            let $e...; //~ ERROR `X...` range patterns are not supported\n+            //~^ ERROR `...` range patterns are deprecated\n+            let $e..=; //~ ERROR `X..=` range patterns are not supported\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "89ec059cb8234c72b7f8ff35735d50327ccef9bb", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/810ffe2ba07320cac7b89af0c2a68048bfb779c9/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=810ffe2ba07320cac7b89af0c2a68048bfb779c9", "patch": "@@ -214,6 +214,60 @@ error: `...X` range patterns are not supported\n LL |     if let ....3 = 0 {}\n    |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n \n+error: `..X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:139:17\n+   |\n+LL |             let ..$e;\n+   |                 ^^ help: try using the minimum value for the type: `MIN..0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN...0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `..=X` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:142:17\n+   |\n+LL |             let ..=$e;\n+   |                 ^^^ help: try using the minimum value for the type: `MIN..=0`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:143:19\n+   |\n+LL |             let $e..;\n+   |                   ^^ help: try using the maximum value for the type: `0..MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X...` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: try using the maximum value for the type: `0...MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `X..=` range patterns are not supported\n+  --> $DIR/recover-range-pats.rs:146:19\n+   |\n+LL |             let $e..=;\n+   |                   ^^^ help: try using the maximum value for the type: `0..=MAX`\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:41:13\n    |\n@@ -316,6 +370,33 @@ error: `...` range patterns are deprecated\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:129:20\n+   |\n+LL |             let $e1...$e2;\n+   |                    ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac2!(0, 1);\n+   |     ------------ in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:140:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: `...` range patterns are deprecated\n+  --> $DIR/recover-range-pats.rs:144:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: use `..=` for an inclusive range\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:19:12\n    |\n@@ -532,7 +613,7 @@ LL |     if let ....3 = 0 {}\n    = note: expected type `{integer}`\n               found type `{float}`\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 85 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}]}