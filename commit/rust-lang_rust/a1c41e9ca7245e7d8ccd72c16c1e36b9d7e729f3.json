{"sha": "a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzQxZTljYTcyNDVlN2Q4Y2NkNzJjMTZjMWUzNmI5ZDdlNzI5ZjM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-09T19:53:24Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-09T19:53:24Z"}, "message": "Expand assert!(expr, args..) to include $crate for hygiene on 2021.\n\nBefore 2021, this was a breaking change, as std::panic and core::panic\nare different. In edition 2021 they will be identical, making it\npossible again to apply proper hygiene here.", "tree": {"sha": "46076464caaf2fd77b341efc65036439912d273b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46076464caaf2fd77b341efc65036439912d273b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3", "html_url": "https://github.com/rust-lang/rust/commit/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9dc9a1821d55b1641c517feac7fcd6ac76aadc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9dc9a1821d55b1641c517feac7fcd6ac76aadc", "html_url": "https://github.com/rust-lang/rust/commit/1f9dc9a1821d55b1641c517feac7fcd6ac76aadc"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "3cffc7a75eeb1dab7545c1b0f0231403ad202dc9", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=a1c41e9ca7245e7d8ccd72c16c1e36b9d7e729f3", "patch": "@@ -23,16 +23,34 @@ pub fn expand_assert<'cx>(\n         }\n     };\n \n+    let is_2021 = sp.rust_2021();\n+\n     // `core::panic` and `std::panic` are different macros, so we use call-site\n     // context to pick up whichever is currently in scope.\n     let sp = cx.with_call_site_ctxt(sp);\n \n     let panic_call = if let Some(tokens) = custom_message {\n+        let path = if is_2021 {\n+            // On edition 2021, we always call `$crate::panic!()`.\n+            Path {\n+                span: sp,\n+                segments: cx\n+                    .std_path(&[sym::panic])\n+                    .into_iter()\n+                    .map(|ident| PathSegment::from_ident(ident))\n+                    .collect(),\n+                tokens: None,\n+            }\n+        } else {\n+            // Before edition 2021, we call `panic!()` unqualified,\n+            // such that it calls either `std::panic!()` or `core::panic!()`.\n+            Path::from_ident(Ident::new(sym::panic, sp))\n+        };\n         // Pass the custom message to panic!().\n         cx.expr(\n             sp,\n             ExprKind::MacCall(MacCall {\n-                path: Path::from_ident(Ident::new(sym::panic, sp)),\n+                path,\n                 args: P(MacArgs::Delimited(\n                     DelimSpan::from_single(sp),\n                     MacDelimiter::Parenthesis,"}]}