{"sha": "c7b84909b00dcf5f762778b4aa9783770c69416d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Yjg0OTA5YjAwZGNmNWY3NjI3NzhiNGFhOTc4Mzc3MGM2OTQxNmQ=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-24T21:49:38Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-24T21:49:38Z"}, "message": "Explicitly count the number of panics\n\nMove the panic handling logic from the `unwind` module to `panicking`\nand use a panic counter to distinguish between normal state, panics\nand double panics.", "tree": {"sha": "0a437b3fff3d718e04267f2523266fcf039d1432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a437b3fff3d718e04267f2523266fcf039d1432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b84909b00dcf5f762778b4aa9783770c69416d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b84909b00dcf5f762778b4aa9783770c69416d", "html_url": "https://github.com/rust-lang/rust/commit/c7b84909b00dcf5f762778b4aa9783770c69416d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b84909b00dcf5f762778b4aa9783770c69416d/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d1b149d2831192503a7797b98f108a3b5b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d1b149d2831192503a7797b98f108a3b5b1032", "html_url": "https://github.com/rust-lang/rust/commit/44d1b149d2831192503a7797b98f108a3b5b1032"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "fc242dee99fee987ed8d59ac324885779127c4ae", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7b84909b00dcf5f762778b4aa9783770c69416d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b84909b00dcf5f762778b4aa9783770c69416d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=c7b84909b00dcf5f762778b4aa9783770c69416d", "patch": "@@ -12,11 +12,15 @@ use prelude::v1::*;\n use io::prelude::*;\n \n use any::Any;\n+use cell::Cell;\n use cell::RefCell;\n+use intrinsics;\n use sys::stdio::Stderr;\n use sys_common::backtrace;\n use sys_common::thread_info;\n-use sys_common::unwind;\n+use sys_common::util;\n+\n+thread_local! { pub static PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n@@ -61,8 +65,24 @@ fn log_panic(obj: &(Any+Send), file: &'static str, line: u32,\n }\n \n pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n+    let panics = PANIC_COUNT.with(|s| {\n+        let count = s.get() + 1;\n+        s.set(count);\n+        count\n+    });\n+\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    let log_backtrace = unwind::panicking() || backtrace::log_enabled();\n+    let log_backtrace = panics >= 2 || backtrace::log_enabled();\n     log_panic(obj, file, line, log_backtrace);\n+\n+    if panics >= 2 {\n+        // If a thread panics while it's already unwinding then we\n+        // have limited options. Currently our preference is to\n+        // just abort. In the future we may consider resuming\n+        // unwinding or otherwise exiting the thread cleanly.\n+        util::dumb_print(format_args!(\"thread panicked while panicking. \\\n+                                       aborting.\"));\n+        unsafe { intrinsics::abort() }\n+    }\n }"}, {"sha": "c06d7886a757b088594cb017c4e37b3db9b7514f", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7b84909b00dcf5f762778b4aa9783770c69416d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b84909b00dcf5f762778b4aa9783770c69416d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=c7b84909b00dcf5f762778b4aa9783770c69416d", "patch": "@@ -64,9 +64,8 @@ use prelude::v1::*;\n \n use any::Any;\n use boxed;\n-use cell::Cell;\n use cmp;\n-use panicking;\n+use panicking::{self,PANIC_COUNT};\n use fmt;\n use intrinsics;\n use mem;\n@@ -92,8 +91,6 @@ pub mod imp;\n #[path = \"gcc.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-thread_local! { static PANICKING: Cell<bool> = Cell::new(false) }\n-\n /// Invoke a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `Ok(())` if the closure did not panic, and will\n@@ -131,9 +128,9 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     // care of exposing correctly.\n     unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n                         -> Result<(), Box<Any + Send>> {\n-        PANICKING.with(|s| {\n+        PANIC_COUNT.with(|s| {\n             let prev = s.get();\n-            s.set(false);\n+            s.set(0);\n             let ep = intrinsics::try(f, data);\n             s.set(prev);\n             if ep.is_null() {\n@@ -161,7 +158,7 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n \n /// Determines whether the current thread is unwinding because of panic.\n pub fn panicking() -> bool {\n-    PANICKING.with(|s| s.get())\n+    PANIC_COUNT.with(|s| s.get() != 0)\n }\n \n // An uninlined, unmangled function upon which to slap yer breakpoints\n@@ -234,17 +231,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n     // First, invoke the default panic handler.\n     panicking::on_panic(&*msg, file, line);\n \n-    if panicking() {\n-        // If a thread panics while it's already unwinding then we\n-        // have limited options. Currently our preference is to\n-        // just abort. In the future we may consider resuming\n-        // unwinding or otherwise exiting the thread cleanly.\n-        super::util::dumb_print(format_args!(\"thread panicked while panicking. \\\n-                                              aborting.\"));\n-        unsafe { intrinsics::abort() }\n-    }\n-    PANICKING.with(|s| s.set(true));\n-\n     // Finally, perform the unwinding.\n     rust_panic(msg);\n }"}]}