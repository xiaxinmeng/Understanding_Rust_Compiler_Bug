{"sha": "8739e45bef31493053816f350a268245b4c0b787", "node_id": "C_kwDOAAsO6NoAKDg3MzllNDViZWYzMTQ5MzA1MzgxNmYzNTBhMjY4MjQ1YjRjMGI3ODc", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-13T22:23:58Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:53Z"}, "message": "Move data_race and weak_memory into a submodule", "tree": {"sha": "fa52802207b80570aabbb542d222ec09bb6afcbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa52802207b80570aabbb542d222ec09bb6afcbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8739e45bef31493053816f350a268245b4c0b787", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRFkACgkQGBtJ+fOP\nM3QViAv9FwZneS8pwHMLfwQy9tyWGj+WmHv67viDmBfrrH/QcE+vRWZBR9kMz27L\nuzDZ5LPHkRgntiWUcMTocNg4bVwat0qf9G9804MoiI/RpEPEW+BKMMPH+Luq5yuK\nm8Z40My1DdljL9V+rqwTAoi3/0DaJ+4LstBlgvlG0yPgXvDNAZEz84nvxq7Ff3Y2\n5jhvtVkCNhrtAJjCprJEVqAcYAEfgW5Ga7qtDPLbuR3By9wBewtq7aCJsJc/m/eH\nvVxLljTsOP1FxPHUCwZfh+VeXrWFQBN3bRJf58agg05smvngB1fIyQUEyKSZxCf6\nOHioExDIL/7gJuzahB2dO05olYdSSxRzDL1CI2eN3wsZ83R5LZWpBjdh6Zqk8HMH\nRy9pgDGCQ89jaYqOC/IKO92iXHQeimJzwRVSKP/6vbUNXilO1fS5pjAVm0QEh097\nAfDEPpdzTRrXB6KIZth8Bkur7ng0JxStSyGxDLhWhcwUXy5bywUeCkOqRzGIpCbR\nLURFcCPX\n=RsHF\n-----END PGP SIGNATURE-----", "payload": "tree fa52802207b80570aabbb542d222ec09bb6afcbc\nparent 13e34653461a274c5759f5c33b19285e3daa9df5\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652480638 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539353 +0100\n\nMove data_race and weak_memory into a submodule\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8739e45bef31493053816f350a268245b4c0b787", "html_url": "https://github.com/rust-lang/rust/commit/8739e45bef31493053816f350a268245b4c0b787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8739e45bef31493053816f350a268245b4c0b787/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e34653461a274c5759f5c33b19285e3daa9df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e34653461a274c5759f5c33b19285e3daa9df5", "html_url": "https://github.com/rust-lang/rust/commit/13e34653461a274c5759f5c33b19285e3daa9df5"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "6c14ce165407ffa980de48a121d224ec19a2b2fa", "filename": "src/concurrency/allocation_map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fallocation_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fallocation_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fallocation_map.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "previous_filename": "src/allocation_map.rs"}, {"sha": "c0137bf86d8bfbbc2463b672c5e8da7e96604704", "filename": "src/concurrency/data_race.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -100,10 +100,10 @@ pub enum AtomicFenceOp {\n /// of a thread, contains the happens-before clock and\n /// additional metadata to model atomic fence operations.\n #[derive(Clone, Default, Debug)]\n-pub struct ThreadClockSet {\n+pub(super) struct ThreadClockSet {\n     /// The increasing clock representing timestamps\n     /// that happen-before this thread.\n-    pub(crate) clock: VClock,\n+    pub(super) clock: VClock,\n \n     /// The set of timestamps that will happen-before this\n     /// thread once it performs an acquire fence.\n@@ -115,15 +115,15 @@ pub struct ThreadClockSet {\n \n     /// Timestamps of the last SC fence performed by each\n     /// thread, updated when this thread performs an SC fence\n-    pub(crate) fence_seqcst: VClock,\n+    pub(super) fence_seqcst: VClock,\n \n     /// Timestamps of the last SC write performed by each\n     /// thread, updated when this thread performs an SC fence\n-    pub(crate) write_seqcst: VClock,\n+    pub(super) write_seqcst: VClock,\n \n     /// Timestamps of the last SC fence performed by each\n     /// thread, updated when this thread performs an SC read\n-    pub(crate) read_seqcst: VClock,\n+    pub(super) read_seqcst: VClock,\n }\n \n impl ThreadClockSet {\n@@ -166,7 +166,7 @@ pub struct DataRace;\n /// common case where no atomic operations\n /// exists on the memory cell.\n #[derive(Clone, PartialEq, Eq, Default, Debug)]\n-pub struct AtomicMemoryCellClocks {\n+struct AtomicMemoryCellClocks {\n     /// The clock-vector of the timestamp of the last atomic\n     /// read operation performed by each thread.\n     /// This detects potential data-races between atomic read\n@@ -1547,7 +1547,7 @@ impl GlobalState {\n     /// Load the current vector clock in use and the current set of thread clocks\n     /// in use for the vector.\n     #[inline]\n-    pub fn current_thread_state(&self) -> (VectorIdx, Ref<'_, ThreadClockSet>) {\n+    pub(super) fn current_thread_state(&self) -> (VectorIdx, Ref<'_, ThreadClockSet>) {\n         let index = self.current_index();\n         let ref_vector = self.vector_clocks.borrow();\n         let clocks = Ref::map(ref_vector, |vec| &vec[index]);\n@@ -1557,7 +1557,7 @@ impl GlobalState {\n     /// Load the current vector clock in use and the current set of thread clocks\n     /// in use for the vector mutably for modification.\n     #[inline]\n-    pub fn current_thread_state_mut(&self) -> (VectorIdx, RefMut<'_, ThreadClockSet>) {\n+    pub(super) fn current_thread_state_mut(&self) -> (VectorIdx, RefMut<'_, ThreadClockSet>) {\n         let index = self.current_index();\n         let ref_vector = self.vector_clocks.borrow_mut();\n         let clocks = RefMut::map(ref_vector, |vec| &mut vec[index]);", "previous_filename": "src/data_race.rs"}, {"sha": "ad1586bbf0f9bff36b5a054c6d1a44a61df2edb1", "filename": "src/concurrency/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fmod.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -0,0 +1,3 @@\n+mod allocation_map;\n+pub mod data_race;\n+pub mod weak_memory;"}, {"sha": "5bdadc804f868ffe518db43e1e4694c1f03b6458", "filename": "src/concurrency/weak_memory.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -60,10 +60,11 @@ use std::{\n use rustc_const_eval::interpret::{AllocRange, InterpResult, ScalarMaybeUninit};\n use rustc_data_structures::fx::FxHashMap;\n \n-use crate::{\n+use crate::{Tag, VClock, VTimestamp, VectorIdx};\n+\n+use super::{\n     allocation_map::{AccessType, AllocationMap},\n     data_race::{GlobalState, ThreadClockSet},\n-    Tag, VClock, VTimestamp, VectorIdx,\n };\n \n pub type AllocExtra = StoreBufferAlloc;\n@@ -82,7 +83,7 @@ pub struct StoreBufferAlloc {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct StoreBuffer {\n+pub(super) struct StoreBuffer {\n     // Stores to this location in modification order\n     buffer: VecDeque<StoreElement>,\n }\n@@ -112,7 +113,7 @@ impl StoreBufferAlloc {\n     }\n \n     /// Gets a store buffer associated with an atomic object in this allocation\n-    pub fn get_store_buffer(&self, range: AllocRange) -> Ref<'_, StoreBuffer> {\n+    pub(super) fn get_store_buffer(&self, range: AllocRange) -> Ref<'_, StoreBuffer> {\n         let access_type = self.store_buffer.borrow().access_type(range);\n         let index = match access_type {\n             AccessType::PerfectlyOverlapping(index) => index,\n@@ -143,7 +144,7 @@ impl StoreBufferAlloc {\n     }\n \n     /// Gets a mutable store buffer associated with an atomic object in this allocation\n-    pub fn get_store_buffer_mut(&mut self, range: AllocRange) -> &mut StoreBuffer {\n+    pub(super) fn get_store_buffer_mut(&mut self, range: AllocRange) -> &mut StoreBuffer {\n         let buffer = self.store_buffer.get_mut();\n         let access_type = buffer.access_type(range);\n         let index = match access_type {\n@@ -174,15 +175,15 @@ impl Default for StoreBuffer {\n \n impl<'mir, 'tcx: 'mir> StoreBuffer {\n     /// Reads from the last store in modification order\n-    pub fn read_from_last_store(&self, global: &GlobalState) {\n+    pub(super) fn read_from_last_store(&self, global: &GlobalState) {\n         let store_elem = self.buffer.back();\n         if let Some(store_elem) = store_elem {\n             let (index, clocks) = global.current_thread_state();\n             store_elem.load_impl(index, &clocks);\n         }\n     }\n \n-    pub fn buffered_read(\n+    pub(super) fn buffered_read(\n         &self,\n         global: &GlobalState,\n         is_seqcst: bool,\n@@ -213,7 +214,7 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n         Ok(loaded)\n     }\n \n-    pub fn buffered_write(\n+    pub(super) fn buffered_write(\n         &mut self,\n         val: ScalarMaybeUninit<Tag>,\n         global: &GlobalState,", "previous_filename": "src/weak_memory.rs"}, {"sha": "982d3873d57304af303abc33606e502544b0b008", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -31,8 +31,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n \n-mod allocation_map;\n-mod data_race;\n+mod concurrency;\n mod diagnostics;\n mod eval;\n mod helpers;\n@@ -46,7 +45,6 @@ mod stacked_borrows;\n mod sync;\n mod thread;\n mod vector_clock;\n-mod weak_memory;\n \n // Establish a \"crate-wide prelude\": we often import `crate::*`.\n \n@@ -65,7 +63,7 @@ pub use crate::shims::time::EvalContextExt as _;\n pub use crate::shims::tls::{EvalContextExt as _, TlsData};\n pub use crate::shims::EvalContextExt as _;\n \n-pub use crate::data_race::{\n+pub use crate::concurrency::data_race::{\n     AtomicFenceOp, AtomicReadOp, AtomicRwOp, AtomicWriteOp,\n     EvalContextExt as DataRaceEvalContextExt,\n };"}, {"sha": "41c852747ad7e04174deb2ef9e814b520e41db34", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -28,7 +28,11 @@ use rustc_span::Symbol;\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n-use crate::{shims::unix::FileHandler, *};\n+use crate::{\n+    concurrency::{data_race, weak_memory},\n+    shims::unix::FileHandler,\n+    *,\n+};\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture"}, {"sha": "0d702fd9c8e17e5510937b76f6aa6ce53d37fe97", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8739e45bef31493053816f350a268245b4c0b787/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8739e45bef31493053816f350a268245b4c0b787/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=8739e45bef31493053816f350a268245b4c0b787", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::Mutability;\n \n+use crate::concurrency::data_race;\n use crate::sync::SynchronizationState;\n use crate::*;\n "}]}