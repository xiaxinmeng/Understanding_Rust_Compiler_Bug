{"sha": "afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYmJkMzgzY2NlZThiOTFiMWQxYmJkY2ZiMGY3YTkwNmJiYTcxZjc=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-06-13T23:22:24Z"}, "committer": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-06-13T23:22:24Z"}, "message": "Note numeric literals that can never fit in an expected type\n\nre https://github.com/rust-lang/rust/pull/72380#discussion_r438289385\n\nGiven the toy code\n\n```rust\nfn is_positive(n: usize) {\n  n > -1_isize;\n}\n```\n\nWe currently get a type mismatch error like the following:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n  |\n2 |     n > (-1_isize).try_into().unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nBut clearly, `-1` can never fit into a `usize`, so the suggestion will\nalways panic. A more useful message would tell the user that the value\ncan never fit in the expected type:\n\n```\nerror[E0308]: mismatched types\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nnote: `-1_isize` can never fit into `usize`\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^\n```\n\nWhich is what this commit implements.\n\nI only added this check for negative literals because\n\n- Currently we can only perform such a check for literals (constant\n  value propagation is outside the scope of the typechecker at this\n  point)\n- A lint error for out-of-range numeric literals is already emitted\n\nIMO it makes more sense to put this check in librustc_lint, but as far\nas I can tell the typecheck pass happens before the lint pass, so I've\nadded it here.\n\nr? @estebank", "tree": {"sha": "93bab1420d7be7d085c6c85bea5c97f261b85818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bab1420d7be7d085c6c85bea5c97f261b85818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEP1kDyr3I3sjT29nTtEP3owMMmu0FAl7lY3EACgkQtEP3owMM\nmu3kbg//S3c58jceQEtRt5LwEdksHi2fJssex+Kq+LkdEMUSFX+bj7EXFTsdpsgU\nUc+wFgagsQOQQ2he1Fe4pxI4Gg/d0b96TuzbWGuxwgkpECpzMFHJ/LXYshLAt0pO\nlJl/Jf0eYKxSDRGN6a4UfYVMv0cHfoZ+1hnt9hyWES2jnhainKhMT0NBcszU2CoW\nutafDE5FjDs9OWxz44t0z8eoU4mTHM8KqpJuISUehCUzYQuvArmtoaBZczTNFzQC\nlkLJfinuOL6Hp2PM0yaS0VACyS3udv4sg6e4vrQhKdIq8fUcVOIJBOG7K50QPFlS\nUe4r0Jd6QmnrNrFINWp/I5MteFRv/LtaNVY5rFdhygM82ugUqdOQIzbfMAhbO4C0\nNBr2o9wfwfG4AuojlGSMFmiy7Sfrc5oTqnS15cMYqIecAu8IcC9hQ8ZAEfySXbEb\n/Ic+HClSJID02wOIRCbcXOuQfrVNajZ0ZuL60+Q0GNEEfO2/pv8ZVb2lKO6r1kwC\n/DU78NB0fkrselUt2AiLqWyNZ2SwFnMkbyknU6qlhcDFpMUd+ELcgNQh9CTYvgVm\nSqf9TcHsc9LE3uhU9oJQIb3uYPG5vvd2n6IBkCg/wOb6h0of3jXL9etqR2PxM4Mu\nN968FbWsKDOcieSsa2BgiY7gaifZYjyg9vSn3RlMNHoxjDNuJDs=\n=ygBT\n-----END PGP SIGNATURE-----", "payload": "tree 93bab1420d7be7d085c6c85bea5c97f261b85818\nparent 06e47688bf15d0215edbe05b21603062f6d2eb5d\nauthor Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1592090544 -0700\ncommitter Ayaz Hafiz <ayaz.hafiz.1@gmail.com> 1592090544 -0700\n\nNote numeric literals that can never fit in an expected type\n\nre https://github.com/rust-lang/rust/pull/72380#discussion_r438289385\n\nGiven the toy code\n\n```rust\nfn is_positive(n: usize) {\n  n > -1_isize;\n}\n```\n\nWe currently get a type mismatch error like the following:\n\n```\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n  |\n2 |     n > (-1_isize).try_into().unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nBut clearly, `-1` can never fit into a `usize`, so the suggestion will\nalways panic. A more useful message would tell the user that the value\ncan never fit in the expected type:\n\n```\nerror[E0308]: mismatched types\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^ expected `usize`, found `isize`\n  |\nnote: `-1_isize` can never fit into `usize`\n --> test.rs:2:9\n  |\n2 |     n > -1_isize;\n  |         ^^^^^^^^\n```\n\nWhich is what this commit implements.\n\nI only added this check for negative literals because\n\n- Currently we can only perform such a check for literals (constant\n  value propagation is outside the scope of the typechecker at this\n  point)\n- A lint error for out-of-range numeric literals is already emitted\n\nIMO it makes more sense to put this check in librustc_lint, but as far\nas I can tell the typecheck pass happens before the lint pass, so I've\nadded it here.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "html_url": "https://github.com/rust-lang/rust/commit/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e47688bf15d0215edbe05b21603062f6d2eb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e47688bf15d0215edbe05b21603062f6d2eb5d", "html_url": "https://github.com/rust-lang/rust/commit/06e47688bf15d0215edbe05b21603062f6d2eb5d"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "7fc880b6c7c6c13de3a9dd8f0728805322600a29", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "patch": "@@ -783,6 +783,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let literal_is_ty_suffixed = |expr: &hir::Expr<'_>| {\n             if let hir::ExprKind::Lit(lit) = &expr.kind { lit.node.is_suffixed() } else { false }\n         };\n+        let is_negative_int =\n+            |expr: &hir::Expr<'_>| matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::UnNeg, ..));\n+        let is_uint = |ty: Ty<'_>| matches!(ty.kind, ty::Uint(..));\n \n         let in_const_context = self.tcx.hir().is_inside_const_context(expr.hir_id);\n \n@@ -807,7 +810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"you can convert `{}` from `{}` to `{}`, matching the type of `{}`\",\n                         lhs_src, expected_ty, checked_ty, src\n                     );\n-                    let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src,);\n+                    let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src);\n                     (lhs_expr.span, msg, suggestion)\n                 } else {\n                     let msg = format!(\"{} and panic if the converted value wouldn't fit\", msg);\n@@ -822,8 +825,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             |err: &mut DiagnosticBuilder<'_>,\n              found_to_exp_is_fallible: bool,\n              exp_to_found_is_fallible: bool| {\n+                let always_fallible = found_to_exp_is_fallible\n+                    && (exp_to_found_is_fallible || expected_ty_expr.is_none());\n                 let msg = if literal_is_ty_suffixed(expr) {\n                     &lit_msg\n+                } else if always_fallible && (is_negative_int(expr) && is_uint(expected_ty)) {\n+                    // We now know that converting either the lhs or rhs is fallible. Before we\n+                    // suggest a fallible conversion, check if the value can never fit in the\n+                    // expected type.\n+                    let msg = format!(\"`{}` can never fit into `{}`\", src, expected_ty);\n+                    err.span_note(expr.span, &msg);\n+                    return;\n                 } else if in_const_context {\n                     // Do not recommend `into` or `try_into` in const contexts.\n                     return;"}, {"sha": "8bfd833354164764f7240b0ea0ffdfddf310cafa", "filename": "src/test/ui/numeric/numeric-cast-no-fix.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.rs?ref=afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "patch": "@@ -0,0 +1,22 @@\n+#[allow(unused_must_use)]\n+fn main() {\n+    let x_usize: usize = 1;\n+    let x_u128: u128 = 2;\n+    let x_u64: u64 = 3;\n+    let x_u32: u32 = 4;\n+    let x_u16: u16 = 5;\n+    let x_u8: u8 = 6;\n+\n+    x_usize > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u128 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u64 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u32 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u16 > -1_isize;\n+    //~^ ERROR mismatched types\n+    x_u8 > -1_isize;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "51e263d636f98564448163ce92650d402c4ee87f", "filename": "src/test/ui/numeric/numeric-cast-no-fix.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-no-fix.stderr?ref=afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "patch": "@@ -0,0 +1,74 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:10:15\n+   |\n+LL |     x_usize > -1_isize;\n+   |               ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `usize`\n+  --> $DIR/numeric-cast-no-fix.rs:10:15\n+   |\n+LL |     x_usize > -1_isize;\n+   |               ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:12:14\n+   |\n+LL |     x_u128 > -1_isize;\n+   |              ^^^^^^^^ expected `u128`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `u128`\n+  --> $DIR/numeric-cast-no-fix.rs:12:14\n+   |\n+LL |     x_u128 > -1_isize;\n+   |              ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:14:13\n+   |\n+LL |     x_u64 > -1_isize;\n+   |             ^^^^^^^^ expected `u64`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `u64`\n+  --> $DIR/numeric-cast-no-fix.rs:14:13\n+   |\n+LL |     x_u64 > -1_isize;\n+   |             ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:16:13\n+   |\n+LL |     x_u32 > -1_isize;\n+   |             ^^^^^^^^ expected `u32`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `u32`\n+  --> $DIR/numeric-cast-no-fix.rs:16:13\n+   |\n+LL |     x_u32 > -1_isize;\n+   |             ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:18:13\n+   |\n+LL |     x_u16 > -1_isize;\n+   |             ^^^^^^^^ expected `u16`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `u16`\n+  --> $DIR/numeric-cast-no-fix.rs:18:13\n+   |\n+LL |     x_u16 > -1_isize;\n+   |             ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-no-fix.rs:20:12\n+   |\n+LL |     x_u8 > -1_isize;\n+   |            ^^^^^^^^ expected `u8`, found `isize`\n+   |\n+help: you can convert `x_u8` from `u8` to `isize`, matching the type of `-1_isize`\n+   |\n+LL |     isize::from(x_u8) > -1_isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a1d5b36931dacebe06fa3326f5467097de0f25f2", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=afbbd383ccee8b91b1d1bbdcfb0f7a906bba71f7", "patch": "@@ -39,12 +39,24 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+note: `-4_isize` can never fit into `usize`\n+  --> $DIR/repeat_count.rs:19:17\n+   |\n+LL |     let f = [0; -4_isize];\n+   |                 ^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:22:23\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected `usize`, found `isize`\n+   |\n+note: `-1_isize` can never fit into `usize`\n+  --> $DIR/repeat_count.rs:22:23\n+   |\n+LL |     let f = [0_usize; -1_isize];\n+   |                       ^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:25:17"}]}