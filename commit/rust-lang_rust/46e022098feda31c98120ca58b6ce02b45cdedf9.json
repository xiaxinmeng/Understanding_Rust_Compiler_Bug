{"sha": "46e022098feda31c98120ca58b6ce02b45cdedf9", "node_id": "C_kwDOAAsO6NoAKDQ2ZTAyMjA5OGZlZGEzMWM5ODEyMGNhNThiNmNlMDJiNDVjZGVkZjk", "commit": {"author": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-09T20:27:24Z"}, "committer": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-13T17:30:19Z"}, "message": "fmt", "tree": {"sha": "46f454538a452420198ce2f509ea9455a38d6bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f454538a452420198ce2f509ea9455a38d6bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e022098feda31c98120ca58b6ce02b45cdedf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e022098feda31c98120ca58b6ce02b45cdedf9", "html_url": "https://github.com/rust-lang/rust/commit/46e022098feda31c98120ca58b6ce02b45cdedf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e022098feda31c98120ca58b6ce02b45cdedf9/comments", "author": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af3d6367ecead0abf80e697176f697d97c25215", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af3d6367ecead0abf80e697176f697d97c25215", "html_url": "https://github.com/rust-lang/rust/commit/8af3d6367ecead0abf80e697176f697d97c25215"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "0a3e4103f6e61990bc36b764980e8da0e68e0fba", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -1920,4 +1920,4 @@\n             }\n         ]\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a8ec75a78aae95dc32ed022ebf864b739163cef2", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -756,14 +756,18 @@ export function addProject(ctx: CtxInit): Cmd {\n             return;\n         }\n \n-        let workspaces: JsonProject[] = await Promise.all(vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n-            return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, { cwd: folder.uri.fsPath });\n-        }));\n+        const workspaces: JsonProject[] = await Promise.all(\n+            vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+                return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, {\n+                    cwd: folder.uri.fsPath,\n+                });\n+            })\n+        );\n \n         await ctx.client.sendRequest(ra.addProject, {\n-            project: workspaces\n+            project: workspaces,\n         });\n-    }\n+    };\n }\n \n async function showReferencesImpl("}, {"sha": "1dae603714d6f65ad01e314dd6463625891eb86c", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -215,7 +215,7 @@ export class Config {\n     }\n \n     get discoverProjectCommand() {\n-        return this.get<string[] | undefined>(\"discoverProjectCommand\")\n+        return this.get<string[] | undefined>(\"discoverProjectCommand\");\n     }\n \n     get cargoRunner() {"}, {"sha": "5b019d6aeb502ccfb8bc1704992c202674eafaa4", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -4,7 +4,14 @@ import * as ra from \"./lsp_ext\";\n \n import { Config, substituteVSCodeVariables } from \"./config\";\n import { createClient } from \"./client\";\n-import { executeDiscoverProject, isRustDocument, isRustEditor, LazyOutputChannel, log, RustEditor } from \"./util\";\n+import {\n+    executeDiscoverProject,\n+    isRustDocument,\n+    isRustEditor,\n+    LazyOutputChannel,\n+    log,\n+    RustEditor,\n+} from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n@@ -17,12 +24,12 @@ import { ExecOptions } from \"child_process\";\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n-        kind: \"Workspace Folder\";\n-    }\n+          kind: \"Workspace Folder\";\n+      }\n     | {\n-        kind: \"Detached Files\";\n-        files: vscode.TextDocument[];\n-    };\n+          kind: \"Detached Files\";\n+          files: vscode.TextDocument[];\n+      };\n \n export function fetchWorkspace(): Workspace {\n     const folders = (vscode.workspace.workspaceFolders || []).filter(\n@@ -36,13 +43,17 @@ export function fetchWorkspace(): Workspace {\n         ? rustDocuments.length === 0\n             ? { kind: \"Empty\" }\n             : {\n-                kind: \"Detached Files\",\n-                files: rustDocuments,\n-            }\n+                  kind: \"Detached Files\",\n+                  files: rustDocuments,\n+              }\n         : { kind: \"Workspace Folder\" };\n }\n \n-export async function discoverWorkspace(files: readonly vscode.TextDocument[], command: string[], options: ExecOptions): Promise<JsonProject> {\n+export async function discoverWorkspace(\n+    files: readonly vscode.TextDocument[],\n+    command: string[],\n+    options: ExecOptions\n+): Promise<JsonProject> {\n     const paths = files.map((f) => f.uri.fsPath).join(\" \");\n     const joinedCommand = command.join(\" \");\n     const data = await executeDiscoverProject(`${joinedCommand} -- ${paths}`, options);\n@@ -80,7 +91,7 @@ export class Ctx {\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n-        workspace: Workspace,\n+        workspace: Workspace\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -180,16 +191,22 @@ export class Ctx {\n \n             const discoverProjectCommand = this.config.discoverProjectCommand;\n             if (discoverProjectCommand) {\n-                let workspaces: JsonProject[] = await Promise.all(vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n-                    return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, { cwd: folder.uri.fsPath });\n-                }));\n+                const workspaces: JsonProject[] = await Promise.all(\n+                    vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+                        return discoverWorkspace(\n+                            vscode.workspace.textDocuments,\n+                            discoverProjectCommand,\n+                            { cwd: folder.uri.fsPath }\n+                        );\n+                    })\n+                );\n \n                 this.discoveredWorkspaces = workspaces;\n             }\n \n-            let initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+            const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n             // this appears to be load-bearing, for better or worse.\n-            await initializationOptions.update('linkedProjects', this.discoveredWorkspaces)\n+            await initializationOptions.update(\"linkedProjects\", this.discoveredWorkspaces);\n \n             this._client = await createClient(\n                 this.traceOutputChannel,"}, {"sha": "942573c0f16c031a81c1454234f92ea9deef37bf", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -45,7 +45,7 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n export const addProject = new lc.RequestType<AddProjectParams, string, void>(\n     \"rust-analyzer/addProject\"\n-)\n+);\n \n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;"}, {"sha": "d5de00561b1235f4e8c9071a15e33d53a763a017", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -24,11 +24,11 @@ export async function activate(\n         vscode.window\n             .showWarningMessage(\n                 `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-                \"plugins enabled. These are known to conflict and cause various functions of \" +\n-                \"both plugins to not work correctly. You should disable one of them.\",\n+                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                    \"both plugins to not work correctly. You should disable one of them.\",\n                 \"Got it\"\n             )\n-            .then(() => { }, console.error);\n+            .then(() => {}, console.error);\n     }\n \n     const ctx = new Ctx(context, createCommands(), fetchWorkspace());\n@@ -146,7 +146,7 @@ function createCommands(): Record<string, CommandFactory> {\n                     health: \"stopped\",\n                 });\n             },\n-            disabled: (_) => async () => { },\n+            disabled: (_) => async () => {},\n         },\n \n         analyzerStatus: { enabled: commands.analyzerStatus },"}, {"sha": "187a1a96c10c5c39874b0be3bc6bdf74b48d2d8d", "filename": "editors/code/src/rust_project.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Frust_project.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Frust_project.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust_project.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -60,9 +60,9 @@ interface Crate {\n     /// rust-analyzer assumes that files from one\n     /// source can't refer to files in another source.\n     source?: {\n-        include_dirs: string[],\n-        exclude_dirs: string[],\n-    },\n+        include_dirs: string[];\n+        exclude_dirs: string[];\n+    };\n     /// The set of cfgs activated for a given crate, like\n     /// `[\"unix\", \"feature=\\\"foo\\\"\", \"feature=\\\"bar\\\"\"]`.\n     cfg: string[];\n@@ -73,7 +73,7 @@ interface Crate {\n     target?: string;\n     /// Environment variables, used for\n     /// the `env!` macro\n-    env: { [key: string]: string; },\n+    env: { [key: string]: string };\n \n     /// Whether the crate is a proc-macro crate.\n     is_proc_macro: boolean;\n@@ -84,8 +84,8 @@ interface Crate {\n \n interface Dep {\n     /// Index of a crate in the `crates` array.\n-    crate: number,\n+    crate: number;\n     /// Name as should appear in the (implicit)\n     /// `extern crate name` declaration.\n-    name: string,\n-}\n\\ No newline at end of file\n+    name: string;\n+}"}, {"sha": "922fbcbcf35a5037ca624c9c72f34cf59de238e0", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46e022098feda31c98120ca58b6ce02b45cdedf9/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=46e022098feda31c98120ca58b6ce02b45cdedf9", "patch": "@@ -150,7 +150,7 @@ export function memoizeAsync<Ret, TThis, Param extends string>(\n \n /** Awaitable wrapper around `child_process.exec` */\n export function execute(command: string, options: ExecOptions): Promise<string> {\n-    log.info(`running command: ${command}`)\n+    log.info(`running command: ${command}`);\n     return new Promise((resolve, reject) => {\n         exec(command, options, (err, stdout, stderr) => {\n             if (err) {\n@@ -170,7 +170,7 @@ export function execute(command: string, options: ExecOptions): Promise<string>\n }\n \n export function executeDiscoverProject(command: string, options: ExecOptions): Promise<string> {\n-    log.info(`running command: ${command}`)\n+    log.info(`running command: ${command}`);\n     return new Promise((resolve, reject) => {\n         exec(command, options, (err, stdout, _) => {\n             if (err) {"}]}