{"sha": "3981ca076c2a843d1cdc230691a0772eab76426e", "node_id": "C_kwDOAAsO6NoAKDM5ODFjYTA3NmMyYTg0M2QxY2RjMjMwNjkxYTA3NzJlYWI3NjQyNmU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-12T02:37:23Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-11-06T02:12:14Z"}, "message": "Allow simd_select_bitmask to take byte arrays", "tree": {"sha": "50bd8345e13326d41f1176dd1e6b62f4bfe3e687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50bd8345e13326d41f1176dd1e6b62f4bfe3e687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3981ca076c2a843d1cdc230691a0772eab76426e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3981ca076c2a843d1cdc230691a0772eab76426e", "html_url": "https://github.com/rust-lang/rust/commit/3981ca076c2a843d1cdc230691a0772eab76426e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3981ca076c2a843d1cdc230691a0772eab76426e/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7964942515bcfbc2de6d0d755f419ec551ab6ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7964942515bcfbc2de6d0d755f419ec551ab6ad3", "html_url": "https://github.com/rust-lang/rust/commit/7964942515bcfbc2de6d0d755f419ec551ab6ad3"}], "stats": {"total": 107, "additions": 70, "deletions": 37}, "files": [{"sha": "2aafac7a6dc87d48faa20af38fb87c7c64c4892d", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3981ca076c2a843d1cdc230691a0772eab76426e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3981ca076c2a843d1cdc230691a0772eab76426e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=3981ca076c2a843d1cdc230691a0772eab76426e", "patch": "@@ -857,28 +857,39 @@ fn generic_simd_intrinsic(\n     let arg_tys = sig.inputs();\n \n     if name == sym::simd_select_bitmask {\n-        let in_ty = arg_tys[0];\n-        let m_len = match in_ty.kind() {\n-            // Note that this `.unwrap()` crashes for isize/usize, that's sort\n-            // of intentional as there's not currently a use case for that.\n-            ty::Int(i) => i.bit_width().unwrap(),\n-            ty::Uint(i) => i.bit_width().unwrap(),\n-            _ => return_error!(\"`{}` is not an integral type\", in_ty),\n-        };\n         require_simd!(arg_tys[1], \"argument\");\n-        let (v_len, _) = arg_tys[1].simd_size_and_type(bx.tcx());\n-        require!(\n-            // Allow masks for vectors with fewer than 8 elements to be\n-            // represented with a u8 or i8.\n-            m_len == v_len || (m_len == 8 && v_len < 8),\n-            \"mismatched lengths: mask length `{}` != other vector length `{}`\",\n-            m_len,\n-            v_len\n-        );\n+        let (len, _) = arg_tys[1].simd_size_and_type(bx.tcx());\n+\n+        let expected_int_bits = (len.max(8) - 1).next_power_of_two();\n+        let expected_bytes = len / 8 + ((len % 8 > 1) as u64);\n+\n+        let mask_ty = arg_tys[0];\n+        let mask = match mask_ty.kind() {\n+            ty::Int(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n+            ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n+            ty::Array(elem, len)\n+                if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n+                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                        == Some(expected_bytes) =>\n+            {\n+                let place = PlaceRef::alloca(bx, args[0].layout);\n+                args[0].val.store(bx, place);\n+                let int_ty = bx.type_ix(expected_bytes * 8);\n+                let ptr = bx.pointercast(place.llval, bx.cx.type_ptr_to(int_ty));\n+                bx.load(int_ty, ptr, Align::ONE)\n+            }\n+            _ => return_error!(\n+                \"invalid bitmask `{}`, expected `u{}` or `[u8; {}]`\",\n+                mask_ty,\n+                expected_int_bits,\n+                expected_bytes\n+            ),\n+        };\n+\n         let i1 = bx.type_i1();\n-        let im = bx.type_ix(v_len);\n-        let i1xn = bx.type_vector(i1, v_len);\n-        let m_im = bx.trunc(args[0].immediate(), im);\n+        let im = bx.type_ix(len);\n+        let i1xn = bx.type_vector(i1, len);\n+        let m_im = bx.trunc(mask, im);\n         let m_i1s = bx.bitcast(m_im, i1xn);\n         return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n     }"}, {"sha": "248e82ea21cfce6ec8aefcbb44b0ca8c093cfc46", "filename": "src/test/ui/simd/intrinsic/generic-select.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs?ref=3981ca076c2a843d1cdc230691a0772eab76426e", "patch": "@@ -20,8 +20,7 @@ struct b8x4(pub i8, pub i8, pub i8, pub i8);\n \n #[repr(simd)]\n #[derive(Copy, Clone, PartialEq)]\n-struct b8x8(pub i8, pub i8, pub i8, pub i8,\n-            pub i8, pub i8, pub i8, pub i8);\n+struct b8x8(pub i8, pub i8, pub i8, pub i8, pub i8, pub i8, pub i8, pub i8);\n \n extern \"platform-intrinsic\" {\n     fn simd_select<T, U>(x: T, a: U, b: U) -> U;\n@@ -50,15 +49,15 @@ fn main() {\n         //~^ ERROR found non-SIMD `u32`\n \n         simd_select_bitmask(0u16, x, x);\n-        //~^ ERROR mask length `16` != other vector length `4`\n-        //\n+        //~^ ERROR invalid bitmask `u16`, expected `u8` or `[u8; 1]`\n+\n         simd_select_bitmask(0u8, 1u32, 2u32);\n         //~^ ERROR found non-SIMD `u32`\n \n         simd_select_bitmask(0.0f32, x, x);\n-        //~^ ERROR `f32` is not an integral type\n+        //~^ ERROR invalid bitmask `f32`, expected `u8` or `[u8; 1]`\n \n         simd_select_bitmask(\"x\", x, x);\n-        //~^ ERROR `&str` is not an integral type\n+        //~^ ERROR invalid bitmask `&str`, expected `u8` or `[u8; 1]`\n     }\n }"}, {"sha": "d576f1bc77473fc2216b3cfe28ffe3a84d75fc15", "filename": "src/test/ui/simd/intrinsic/generic-select.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr?ref=3981ca076c2a843d1cdc230691a0772eab76426e", "patch": "@@ -1,47 +1,47 @@\n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n-  --> $DIR/generic-select.rs:40:9\n+  --> $DIR/generic-select.rs:39:9\n    |\n LL |         simd_select(m8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `u32`, expected `i_`\n-  --> $DIR/generic-select.rs:43:9\n+  --> $DIR/generic-select.rs:42:9\n    |\n LL |         simd_select(x, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `f32`, expected `i_`\n-  --> $DIR/generic-select.rs:46:9\n+  --> $DIR/generic-select.rs:45:9\n    |\n LL |         simd_select(z, z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/generic-select.rs:49:9\n+  --> $DIR/generic-select.rs:48:9\n    |\n LL |         simd_select(m4, 0u32, 1u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `16` != other vector length `4`\n-  --> $DIR/generic-select.rs:52:9\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: invalid bitmask `u16`, expected `u8` or `[u8; 1]`\n+  --> $DIR/generic-select.rs:51:9\n    |\n LL |         simd_select_bitmask(0u16, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/generic-select.rs:55:9\n+  --> $DIR/generic-select.rs:54:9\n    |\n LL |         simd_select_bitmask(0u8, 1u32, 2u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `f32` is not an integral type\n-  --> $DIR/generic-select.rs:58:9\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: invalid bitmask `f32`, expected `u8` or `[u8; 1]`\n+  --> $DIR/generic-select.rs:57:9\n    |\n LL |         simd_select_bitmask(0.0f32, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `&str` is not an integral type\n-  --> $DIR/generic-select.rs:61:9\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: invalid bitmask `&str`, expected `u8` or `[u8; 1]`\n+  --> $DIR/generic-select.rs:60:9\n    |\n LL |         simd_select_bitmask(\"x\", x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5f6ba3bd18b3c8672133ea36d6b6750fc47cf1e2", "filename": "src/test/ui/simd/simd-bitmask.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3981ca076c2a843d1cdc230691a0772eab76426e/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs?ref=3981ca076c2a843d1cdc230691a0772eab76426e", "patch": "@@ -3,6 +3,7 @@\n \n extern \"platform-intrinsic\" {\n     fn simd_bitmask<T, U>(v: T) -> U;\n+    fn simd_select_bitmask<T, U>(m: T, a: U, b: U) -> U;\n }\n \n #[derive(Copy, Clone)]\n@@ -25,4 +26,26 @@ fn main() {\n         assert_eq!(i, 0b0101000000001100);\n         assert_eq!(a, [0b1100, 0b01010000]);\n     }\n+\n+    unsafe {\n+        let a = Simd::<i32, 8>([0, 1, 2, 3, 4, 5, 6, 7]);\n+        let b = Simd::<i32, 8>([8, 9, 10, 11, 12, 13, 14, 15]);\n+        let e = [0, 9, 2, 11, 12, 13, 14, 15];\n+\n+        let r = simd_select_bitmask(0b0101u8, a, b);\n+        assert_eq!(r.0, e);\n+\n+        let r = simd_select_bitmask([0b0101u8], a, b);\n+        assert_eq!(r.0, e);\n+\n+        let a = Simd::<i32, 16>([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n+        let b = Simd::<i32, 16>([16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);\n+        let e = [16, 17, 2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 12, 29, 14, 31];\n+\n+        let r = simd_select_bitmask(0b0101000000001100u16, a, b);\n+        assert_eq!(r.0, e);\n+\n+        let r = simd_select_bitmask([0b1100u8, 0b01010000u8], a, b);\n+        assert_eq!(r.0, e);\n+    }\n }"}]}