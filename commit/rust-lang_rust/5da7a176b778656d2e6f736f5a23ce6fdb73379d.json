{"sha": "5da7a176b778656d2e6f736f5a23ce6fdb73379d", "node_id": "C_kwDOAAsO6NoAKDVkYTdhMTc2Yjc3ODY1NmQyZTZmNzM2ZjVhMjNjZTZmZGI3MzM3OWQ", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-19T06:15:20Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Don't suggest let else in match if the else arm explicitly mentions non obvious paths", "tree": {"sha": "2ae948f417575b447a272fdd7bfa01a1e160d5d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae948f417575b447a272fdd7bfa01a1e160d5d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da7a176b778656d2e6f736f5a23ce6fdb73379d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da7a176b778656d2e6f736f5a23ce6fdb73379d", "html_url": "https://github.com/rust-lang/rust/commit/5da7a176b778656d2e6f736f5a23ce6fdb73379d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da7a176b778656d2e6f736f5a23ce6fdb73379d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a7696231ef60e77fdeb5068c729d63c0393547", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a7696231ef60e77fdeb5068c729d63c0393547", "html_url": "https://github.com/rust-lang/rust/commit/c5a7696231ef60e77fdeb5068c729d63c0393547"}], "stats": {"total": 135, "additions": 106, "deletions": 29}, "files": [{"sha": "87bac8aabdc5dbbb8851f97d8078888974448deb", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5da7a176b778656d2e6f736f5a23ce6fdb73379d/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da7a176b778656d2e6f736f5a23ce6fdb73379d/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=5da7a176b778656d2e6f736f5a23ce6fdb73379d", "patch": "@@ -1,14 +1,16 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::higher::IfLetOrMatch;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::{for_each_expr, Descend};\n use clippy_utils::{meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Expr, ExprKind, MatchSource, Pat, QPath, Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, MatchSource, Pat, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::ops::ControlFlow;\n \n@@ -108,7 +110,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     }\n                     if expr_is_simple_identity(arm.pat, arm.body) {\n                         found_identity_arm = true;\n-                    } else if expr_diverges(cx, arm.body) && pat_has_no_bindings(arm.pat) {\n+                    } else if expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat) {\n                         found_diverging_arm = true;\n                     }\n                 }\n@@ -194,10 +196,39 @@ fn from_different_macros(span_a: Span, span_b: Span) -> bool {\n     data_for_comparison(span_a) != data_for_comparison(span_b)\n }\n \n-fn pat_has_no_bindings(pat: &'_ Pat<'_>) -> bool {\n-    let mut has_no_bindings = true;\n-    pat.each_binding_or_first(&mut |_, _, _, _| has_no_bindings = false);\n-    has_no_bindings\n+fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>) -> bool {\n+    // Check whether the pattern contains any bindings, as the\n+    // binding might potentially be used in the body.\n+    // TODO: only look for *used* bindings.\n+    let mut has_bindings = false;\n+    pat.each_binding_or_first(&mut |_, _, _, _| has_bindings = true);\n+    if has_bindings {\n+        return false;\n+    }\n+\n+    // Check whether any possibly \"unknown\" patterns are included,\n+    // because users might not know which values some enum has.\n+    // Well-known enums are excepted, as we assume people know them.\n+    // We do a deep check, to be able to disallow Err(En::Foo(_))\n+    // for usage of the En::Foo variant, as we disallow En::Foo(_),\n+    // but we allow Err(_).\n+    let typeck_results = cx.typeck_results();\n+    let mut has_disallowed = false;\n+    pat.walk_always(|pat| {\n+        // Only do the check if the type is \"spelled out\" in the pattern\n+        if !matches!(\n+            pat.kind,\n+            PatKind::Struct(..) | PatKind::TupleStruct(..) | PatKind::Path(..)\n+        ) {\n+            return;\n+        };\n+        let ty = typeck_results.pat_ty(pat);\n+        // Option and Result are allowed, everything else isn't.\n+        if !(is_type_diagnostic_item(cx, ty, sym::Option) || is_type_diagnostic_item(cx, ty, sym::Result)) {\n+            has_disallowed = true;\n+        }\n+    });\n+    !has_disallowed\n }\n \n /// Checks if the passed block is a simple identity referring to bindings created by the pattern"}, {"sha": "93c86ca24fea3a079c80c8ae7bb32204b29f6be3", "filename": "tests/ui/manual_let_else_match.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5da7a176b778656d2e6f736f5a23ce6fdb73379d/tests%2Fui%2Fmanual_let_else_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da7a176b778656d2e6f736f5a23ce6fdb73379d/tests%2Fui%2Fmanual_let_else_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.rs?ref=5da7a176b778656d2e6f736f5a23ce6fdb73379d", "patch": "@@ -4,12 +4,6 @@\n // Ensure that we don't conflict with match -> if let lints\n #![warn(clippy::single_match_else, clippy::single_match)]\n \n-enum Variant {\n-    Foo,\n-    Bar(u32),\n-    Baz(u32),\n-}\n-\n fn f() -> Result<u32, u32> {\n     Ok(0)\n }\n@@ -18,7 +12,17 @@ fn g() -> Option<()> {\n     None\n }\n \n-fn h() -> Variant {\n+fn h() -> (Option<()>, Option<()>) {\n+    (None, None)\n+}\n+\n+enum Variant {\n+    Foo,\n+    Bar(u32),\n+    Baz(u32),\n+}\n+\n+fn build_enum() -> Variant {\n     Variant::Foo\n }\n \n@@ -36,9 +40,14 @@ fn fire() {\n     };\n \n     loop {\n-        // More complex pattern for the identity arm\n+        // More complex pattern for the identity arm and diverging arm\n         let v = match h() {\n-            Variant::Foo => continue,\n+            (Some(_), Some(_)) | (None, None) => continue,\n+            (Some(v), None) | (None, Some(v)) => v,\n+        };\n+        // Custom enums are supported as long as the \"else\" arm is a simple _\n+        let v = match build_enum() {\n+            _ => continue,\n             Variant::Bar(v) | Variant::Baz(v) => v,\n         };\n     }\n@@ -49,21 +58,27 @@ fn fire() {\n         Ok(v) => v,\n         Err(_) => return,\n     };\n+\n+    // Err(()) is an allowed pattern\n+    let v = match f().map_err(|_| ()) {\n+        Ok(v) => v,\n+        Err(()) => return,\n+    };\n }\n \n fn not_fire() {\n     // Multiple diverging arms\n     let v = match h() {\n-        Variant::Foo => panic!(),\n-        Variant::Bar(_v) => return,\n-        Variant::Baz(v) => v,\n+        _ => panic!(),\n+        (None, Some(_v)) => return,\n+        (Some(v), None) => v,\n     };\n \n     // Multiple identity arms\n     let v = match h() {\n-        Variant::Foo => panic!(),\n-        Variant::Bar(v) => v,\n-        Variant::Baz(v) => v,\n+        _ => panic!(),\n+        (None, Some(v)) => v,\n+        (Some(v), None) => v,\n     };\n \n     // No diverging arm at all, only identity arms.\n@@ -74,8 +89,8 @@ fn not_fire() {\n     };\n \n     // The identity arm has a guard\n-    let v = match h() {\n-        Variant::Bar(v) if g().is_none() => v,\n+    let v = match g() {\n+        Some(v) if g().is_none() => v,\n         _ => return,\n     };\n \n@@ -90,4 +105,17 @@ fn not_fire() {\n         Ok(v) => v,\n         Err(e) => panic!(\"error: {e}\"),\n     };\n+\n+    // Custom enum where the diverging arm\n+    // explicitly mentions the variant\n+    let v = match build_enum() {\n+        Variant::Foo => return,\n+        Variant::Bar(v) | Variant::Baz(v) => v,\n+    };\n+\n+    // The custom enum is surrounded by an Err()\n+    let v = match Err(build_enum()) {\n+        Ok(v) | Err(Variant::Bar(v) | Variant::Baz(v)) => v,\n+        Err(Variant::Foo) => return,\n+    };\n }"}, {"sha": "a79afc6401d90a076206965a57441af2cbcbda79", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5da7a176b778656d2e6f736f5a23ce6fdb73379d/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da7a176b778656d2e6f736f5a23ce6fdb73379d/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=5da7a176b778656d2e6f736f5a23ce6fdb73379d", "patch": "@@ -1,5 +1,5 @@\n error: this could be rewritten as `let else`\n-  --> $DIR/manual_let_else_match.rs:28:5\n+  --> $DIR/manual_let_else_match.rs:32:5\n    |\n LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n@@ -10,7 +10,7 @@ LL | |     };\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n error: this could be rewritten as `let else`\n-  --> $DIR/manual_let_else_match.rs:33:5\n+  --> $DIR/manual_let_else_match.rs:37:5\n    |\n LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n@@ -19,22 +19,40 @@ LL | |     };\n    | |______^\n \n error: this could be rewritten as `let else`\n-  --> $DIR/manual_let_else_match.rs:40:9\n+  --> $DIR/manual_let_else_match.rs:44:9\n    |\n LL | /         let v = match h() {\n-LL | |             Variant::Foo => continue,\n+LL | |             (Some(_), Some(_)) | (None, None) => continue,\n+LL | |             (Some(v), None) | (None, Some(v)) => v,\n+LL | |         };\n+   | |__________^\n+\n+error: this could be rewritten as `let else`\n+  --> $DIR/manual_let_else_match.rs:49:9\n+   |\n+LL | /         let v = match build_enum() {\n+LL | |             _ => continue,\n LL | |             Variant::Bar(v) | Variant::Baz(v) => v,\n LL | |         };\n    | |__________^\n \n error: this could be rewritten as `let else`\n-  --> $DIR/manual_let_else_match.rs:48:5\n+  --> $DIR/manual_let_else_match.rs:57:5\n    |\n LL | /     let v = match f() {\n LL | |         Ok(v) => v,\n LL | |         Err(_) => return,\n LL | |     };\n    | |______^\n \n-error: aborting due to 4 previous errors\n+error: this could be rewritten as `let else`\n+  --> $DIR/manual_let_else_match.rs:63:5\n+   |\n+LL | /     let v = match f().map_err(|_| ()) {\n+LL | |         Ok(v) => v,\n+LL | |         Err(()) => return,\n+LL | |     };\n+   | |______^\n+\n+error: aborting due to 6 previous errors\n "}]}