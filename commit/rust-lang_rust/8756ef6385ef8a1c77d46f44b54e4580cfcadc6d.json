{"sha": "8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NTZlZjYzODVlZjhhMWM3N2Q0NmY0NGI1NGU0NTgwY2ZjYWRjNmQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-16T16:30:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-16T16:30:11Z"}, "message": "Don't include DefIndex in plugin- and proc-macro registrar fn symbol.", "tree": {"sha": "44488b02932b4c5f4787ccfa5b162d6fd279fe0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44488b02932b4c5f4787ccfa5b162d6fd279fe0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "html_url": "https://github.com/rust-lang/rust/commit/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da569fa9ddf8369a9809184d43c600dc06bd4b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da569fa9ddf8369a9809184d43c600dc06bd4b4d", "html_url": "https://github.com/rust-lang/rust/commit/da569fa9ddf8369a9809184d43c600dc06bd4b4d"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "94fcfb7e2aa572ccc357df605c0b5e5bfa25f9d9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "patch": "@@ -11,7 +11,7 @@\n pub use self::code_stats::{CodeStats, DataTypeKind, FieldInfo};\n pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n \n-use hir::def_id::{CrateNum, DefIndex};\n+use hir::def_id::CrateNum;\n use ich::Fingerprint;\n \n use lint;\n@@ -558,18 +558,16 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate Svh and the function DefIndex.\n-    pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator,\n-                                            index: DefIndex)\n+    pub fn generate_plugin_registrar_symbol(&self,\n+                                            disambiguator: CrateDisambiguator)\n                                             -> String {\n-        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n-                                                   index.to_proc_macro_index())\n+        format!(\"__rustc_plugin_registrar_{}__\", disambiguator.to_fingerprint().to_hex())\n     }\n \n-    pub fn generate_derive_registrar_symbol(&self, disambiguator: CrateDisambiguator,\n-                                            index: DefIndex)\n+    pub fn generate_derive_registrar_symbol(&self,\n+                                            disambiguator: CrateDisambiguator)\n                                             -> String {\n-        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n-                                                   index.to_proc_macro_index())\n+        format!(\"__rustc_derive_registrar_{}__\", disambiguator.to_fingerprint().to_hex())\n     }\n \n     pub fn sysroot<'a>(&'a self) -> &'a Path {"}, {"sha": "246f5c9255ef414d1e450752891c42ba6c479292", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "patch": "@@ -15,7 +15,7 @@ use locator::{self, CratePaths};\n use native_libs::relevant_lib;\n use schema::CrateRoot;\n \n-use rustc::hir::def_id::{CrateNum, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX};\n use rustc::hir::svh::Svh;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::DepKind;\n@@ -532,8 +532,7 @@ impl<'a> CrateLoader<'a> {\n             Err(err) => self.sess.span_fatal(span, &err),\n         };\n \n-        let sym = self.sess.generate_derive_registrar_symbol(root.disambiguator,\n-                                                             root.macro_derive_registrar.unwrap());\n+        let sym = self.sess.generate_derive_registrar_symbol(root.disambiguator);\n         let registrar = unsafe {\n             let sym = match lib.symbol(&sym) {\n                 Ok(f) => f,\n@@ -588,7 +587,7 @@ impl<'a> CrateLoader<'a> {\n     pub fn find_plugin_registrar(&mut self,\n                                  span: Span,\n                                  name: &str)\n-                                 -> Option<(PathBuf, CrateDisambiguator, DefIndex)> {\n+                                 -> Option<(PathBuf, CrateDisambiguator)> {\n         let name = Symbol::intern(name);\n         let ekrate = self.read_extension_crate(span, name, name);\n \n@@ -603,11 +602,11 @@ impl<'a> CrateLoader<'a> {\n         }\n \n         let root = ekrate.metadata.get_root();\n-        match (ekrate.dylib.as_ref(), root.plugin_registrar_fn) {\n-            (Some(dylib), Some(reg)) => {\n-                Some((dylib.to_path_buf(), root.disambiguator, reg))\n+        match ekrate.dylib.as_ref() {\n+            Some(dylib) => {\n+                Some((dylib.to_path_buf(), root.disambiguator))\n             }\n-            (None, Some(_)) => {\n+            None => {\n                 span_err!(self.sess, span, E0457,\n                           \"plugin `{}` only found in rlib format, but must be available \\\n                            in dylib format\",\n@@ -616,7 +615,6 @@ impl<'a> CrateLoader<'a> {\n                 // empty dylib.\n                 None\n             }\n-            _ => None,\n         }\n     }\n "}, {"sha": "a46b85d93cbb82cc3024e0b533822d26997a7739", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "patch": "@@ -100,8 +100,8 @@ impl<'a> PluginLoader<'a> {\n     fn load_plugin(&mut self, span: Span, name: &str, args: Vec<ast::NestedMetaItem>) {\n         let registrar = self.reader.find_plugin_registrar(span, name);\n \n-        if let Some((lib, disambiguator, index)) = registrar {\n-            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator, index);\n+        if let Some((lib, disambiguator)) = registrar {\n+            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);\n             let fun = self.dylink_registrar(span, lib, symbol);\n             self.plugins.push(PluginRegistrar {\n                 fun,"}, {"sha": "15ff59c7df998098603d60a101b40dd164864f77", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "patch": "@@ -115,9 +115,8 @@ pub fn provide(providers: &mut Providers) {\n \n         if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n             let def_id = tcx.hir.local_def_id(id);\n-            let idx = def_id.index;\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            let registrar = tcx.sess.generate_derive_registrar_symbol(disambiguator, idx);\n+            let registrar = tcx.sess.generate_derive_registrar_symbol(disambiguator);\n             local_crate.push((registrar, Some(def_id), SymbolExportLevel::C));\n         }\n "}, {"sha": "3ceff659ea93a40e79fbcbe0f74b2dbffc5b20c2", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8756ef6385ef8a1c77d46f44b54e4580cfcadc6d/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=8756ef6385ef8a1c77d46f44b54e4580cfcadc6d", "patch": "@@ -257,14 +257,12 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     if let Some(id) = node_id {\n         if tcx.sess.plugin_registrar_fn.get() == Some(id) {\n-            let idx = def_id.index;\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_plugin_registrar_symbol(disambiguator, idx);\n+            return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n         if tcx.sess.derive_registrar_fn.get() == Some(id) {\n-            let idx = def_id.index;\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_derive_registrar_symbol(disambiguator, idx);\n+            return tcx.sess.generate_derive_registrar_symbol(disambiguator);\n         }\n     }\n "}]}