{"sha": "8845f8214201bf8945de37997394994c5f6f7ace", "node_id": "C_kwDOAAsO6NoAKDg4NDVmODIxNDIwMWJmODk0NWRlMzc5OTczOTQ5OTRjNWY2ZjdhY2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T14:58:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T14:58:07Z"}, "message": "Auto merge of #9490 - kraktus:needless_borrow, r=Jarcho\n\nfix [`needless_borrow`], [`explicit_auto_deref`] FPs on unions\n\nfix https://github.com/rust-lang/rust-clippy/issues/9383\n\nchangelog: fix [`needless_borrow`] false positive on unions\nchangelog: fix [`explicit_auto_deref`] false positive on unions\n\nLeft a couple debug derived impls on purpose I needed to debug as I don't think it's noise", "tree": {"sha": "752f5c872231e9698cf04ce7df840c7b1d8e0724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752f5c872231e9698cf04ce7df840c7b1d8e0724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8845f8214201bf8945de37997394994c5f6f7ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8845f8214201bf8945de37997394994c5f6f7ace", "html_url": "https://github.com/rust-lang/rust/commit/8845f8214201bf8945de37997394994c5f6f7ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8845f8214201bf8945de37997394994c5f6f7ace/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6932a1f7623663e50922225ea304340949c051", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6932a1f7623663e50922225ea304340949c051", "html_url": "https://github.com/rust-lang/rust/commit/0f6932a1f7623663e50922225ea304340949c051"}, {"sha": "14ba4fba11e0e38d35c63559553380d8fde4517a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ba4fba11e0e38d35c63559553380d8fde4517a", "html_url": "https://github.com/rust-lang/rust/commit/14ba4fba11e0e38d35c63559553380d8fde4517a"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "d8c57ec9ebe7bb765c152ed7426515ad2c346681", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8845f8214201bf8945de37997394994c5f6f7ace/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845f8214201bf8945de37997394994c5f6f7ace/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=8845f8214201bf8945de37997394994c5f6f7ace", "patch": "@@ -184,19 +184,22 @@ impl Dereferencing {\n     }\n }\n \n+#[derive(Debug)]\n struct StateData {\n     /// Span of the top level expression\n     span: Span,\n     hir_id: HirId,\n     position: Position,\n }\n \n+#[derive(Debug)]\n struct DerefedBorrow {\n     count: usize,\n     msg: &'static str,\n     snip_expr: Option<HirId>,\n }\n \n+#[derive(Debug)]\n enum State {\n     // Any number of deref method calls.\n     DerefMethod {\n@@ -276,10 +279,12 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             (None, kind) => {\n                 let expr_ty = typeck.expr_ty(expr);\n                 let (position, adjustments) = walk_parents(cx, expr, self.msrv);\n-\n                 match kind {\n                     RefOp::Deref => {\n-                        if let Position::FieldAccess(name) = position\n+                        if let Position::FieldAccess {\n+                            name,\n+                            of_union: false,\n+                        } = position\n                             && !ty_contains_field(typeck.expr_ty(sub_expr), name)\n                         {\n                             self.state = Some((\n@@ -451,7 +456,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             (Some((State::DerefedBorrow(state), data)), RefOp::Deref) => {\n                 let position = data.position;\n                 report(cx, expr, State::DerefedBorrow(state), data);\n-                if let Position::FieldAccess(name) = position\n+                if let Position::FieldAccess{name, ..} = position\n                     && !ty_contains_field(typeck.expr_ty(sub_expr), name)\n                 {\n                     self.state = Some((\n@@ -616,14 +621,17 @@ fn deref_method_same_type<'tcx>(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n }\n \n /// The position of an expression relative to it's parent.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n enum Position {\n     MethodReceiver,\n     /// The method is defined on a reference type. e.g. `impl Foo for &T`\n     MethodReceiverRefImpl,\n     Callee,\n     ImplArg(HirId),\n-    FieldAccess(Symbol),\n+    FieldAccess {\n+        name: Symbol,\n+        of_union: bool,\n+    }, // union fields cannot be auto borrowed\n     Postfix,\n     Deref,\n     /// Any other location which will trigger auto-deref to a specific time.\n@@ -645,7 +653,10 @@ impl Position {\n     }\n \n     fn can_auto_borrow(self) -> bool {\n-        matches!(self, Self::MethodReceiver | Self::FieldAccess(_) | Self::Callee)\n+        matches!(\n+            self,\n+            Self::MethodReceiver | Self::FieldAccess { of_union: false, .. } | Self::Callee\n+        )\n     }\n \n     fn lint_explicit_deref(self) -> bool {\n@@ -657,7 +668,7 @@ impl Position {\n             Self::MethodReceiver\n             | Self::MethodReceiverRefImpl\n             | Self::Callee\n-            | Self::FieldAccess(_)\n+            | Self::FieldAccess { .. }\n             | Self::Postfix => PREC_POSTFIX,\n             Self::ImplArg(_) | Self::Deref => PREC_PREFIX,\n             Self::DerefStable(p, _) | Self::ReborrowStable(p) | Self::Other(p) => p,\n@@ -844,7 +855,10 @@ fn walk_parents<'tcx>(\n                         }\n                     })\n                 },\n-                ExprKind::Field(child, name) if child.hir_id == e.hir_id => Some(Position::FieldAccess(name.name)),\n+                ExprKind::Field(child, name) if child.hir_id == e.hir_id => Some(Position::FieldAccess {\n+                    name: name.name,\n+                    of_union: is_union(cx.typeck_results(), child),\n+                }),\n                 ExprKind::Unary(UnOp::Deref, child) if child.hir_id == e.hir_id => Some(Position::Deref),\n                 ExprKind::Match(child, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Index(child, _)\n@@ -865,6 +879,13 @@ fn walk_parents<'tcx>(\n     (position, adjustments)\n }\n \n+fn is_union<'tcx>(typeck: &'tcx TypeckResults<'_>, path_expr: &'tcx Expr<'_>) -> bool {\n+    typeck\n+        .expr_ty_adjusted(path_expr)\n+        .ty_adt_def()\n+        .map_or(false, rustc_middle::ty::AdtDef::is_union)\n+}\n+\n fn closure_result_position<'tcx>(\n     cx: &LateContext<'tcx>,\n     closure: &'tcx Closure<'_>,"}, {"sha": "6914f9183c7ccbc39160bec61b46729bb1962fb0", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8845f8214201bf8945de37997394994c5f6f7ace/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8845f8214201bf8945de37997394994c5f6f7ace/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=8845f8214201bf8945de37997394994c5f6f7ace", "patch": "@@ -298,3 +298,32 @@ mod meets_msrv {\n         let _ = std::process::Command::new(\"ls\").args([\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n+\n+#[allow(unused)]\n+fn issue9383() {\n+    // Should not lint because unions need explicit deref when accessing field\n+    use std::mem::ManuallyDrop;\n+\n+    union Coral {\n+        crab: ManuallyDrop<Vec<i32>>,\n+    }\n+\n+    union Ocean {\n+        coral: ManuallyDrop<Coral>,\n+    }\n+\n+    let mut ocean = Ocean {\n+        coral: ManuallyDrop::new(Coral {\n+            crab: ManuallyDrop::new(vec![1, 2, 3]),\n+        }),\n+    };\n+\n+    unsafe {\n+        ManuallyDrop::drop(&mut (&mut ocean.coral).crab);\n+\n+        (*ocean.coral).crab = ManuallyDrop::new(vec![4, 5, 6]);\n+        ManuallyDrop::drop(&mut (*ocean.coral).crab);\n+\n+        ManuallyDrop::drop(&mut ocean.coral);\n+    }\n+}"}, {"sha": "e2a609fa5d275262e24f46e58dd74278a0319896", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8845f8214201bf8945de37997394994c5f6f7ace/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8845f8214201bf8945de37997394994c5f6f7ace/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=8845f8214201bf8945de37997394994c5f6f7ace", "patch": "@@ -298,3 +298,32 @@ mod meets_msrv {\n         let _ = std::process::Command::new(\"ls\").args(&[\"-a\", \"-l\"]).status().unwrap();\n     }\n }\n+\n+#[allow(unused)]\n+fn issue9383() {\n+    // Should not lint because unions need explicit deref when accessing field\n+    use std::mem::ManuallyDrop;\n+\n+    union Coral {\n+        crab: ManuallyDrop<Vec<i32>>,\n+    }\n+\n+    union Ocean {\n+        coral: ManuallyDrop<Coral>,\n+    }\n+\n+    let mut ocean = Ocean {\n+        coral: ManuallyDrop::new(Coral {\n+            crab: ManuallyDrop::new(vec![1, 2, 3]),\n+        }),\n+    };\n+\n+    unsafe {\n+        ManuallyDrop::drop(&mut (&mut ocean.coral).crab);\n+\n+        (*ocean.coral).crab = ManuallyDrop::new(vec![4, 5, 6]);\n+        ManuallyDrop::drop(&mut (*ocean.coral).crab);\n+\n+        ManuallyDrop::drop(&mut ocean.coral);\n+    }\n+}"}]}