{"sha": "4c2245d8421ff43832b005375025cd14f56c1ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjI0NWQ4NDIxZmY0MzgzMmIwMDUzNzUwMjVjZDE0ZjU2YzFjYTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-18T06:51:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-18T06:52:15Z"}, "message": "Yet more painstaking configure/make logic.", "tree": {"sha": "65c7fc360cdd49854c380d0b2f6640ff347ad96d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c7fc360cdd49854c380d0b2f6640ff347ad96d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2245d8421ff43832b005375025cd14f56c1ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2245d8421ff43832b005375025cd14f56c1ca9", "html_url": "https://github.com/rust-lang/rust/commit/4c2245d8421ff43832b005375025cd14f56c1ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2245d8421ff43832b005375025cd14f56c1ca9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eca7129e3857e3506d12de7591238f8a7d55da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eca7129e3857e3506d12de7591238f8a7d55da1", "html_url": "https://github.com/rust-lang/rust/commit/5eca7129e3857e3506d12de7591238f8a7d55da1"}], "stats": {"total": 447, "additions": 377, "deletions": 70}, "files": [{"sha": "1869476165bf1c8c7e92fe87ee2448578817eb03", "filename": "Makefile.in", "status": "modified", "additions": 290, "deletions": 41, "changes": 331, "blob_url": "https://github.com/rust-lang/rust/blob/4c2245d8421ff43832b005375025cd14f56c1ca9/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4c2245d8421ff43832b005375025cd14f56c1ca9/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4c2245d8421ff43832b005375025cd14f56c1ca9", "patch": "@@ -11,34 +11,183 @@ endif\n \n CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n \n+CFG_GCC_CFLAGS :=\n+CFG_GCC_LINK_FLAGS :=\n+CFG_BOOT_FLAGS := $(BOOT_FLAGS)\n+CFG_RUSTC_FLAGS := -nowarn\n+\n+# On Darwin, we need to run dsymutil so the debugging information ends\n+# up in the right place.  On other platforms, it automatically gets\n+# embedded into the executable, so use a no-op command.\n+CFG_DSYMUTIL := true\n+\n+ifeq ($(CFG_OSTYPE), FreeBSD)\n+  LIB := lib$(1).so\n+  CFG_GCC_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n+  ifeq ($(CFG_CPUTYPE), x86_64)\n+    CFG_GCC_CFLAGS += -m32\n+    CFG_GCC_LINK_FLAGS += -m32\n+  endif\n+  CFG_UNIXY := 1\n+endif\n+\n+ifeq ($(CFG_OSTYPE), Linux)\n+  LIB := lib$(1).so\n+  CFG_GCC_CFLAGS += -fPIC -march=i686\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n+  ifeq ($(CFG_CPUTYPE), x86_64)\n+    CFG_GCC_CFLAGS += -m32\n+    CFG_GCC_LINK_FLAGS += -m32\n+  endif\n+  CFG_UNIXY := 1\n+endif\n+\n+ifeq ($(CFG_OSTYPE), Darwin)\n+  LIB := lib$(1).dylib\n+  CFG_UNIXY := 1\n+  CFG_GCC_LINK_FLAGS += -dynamiclib -lpthread\n+  # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n+  # \"on an i386\" when the whole userspace is 64-bit and the compiler\n+  # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n+  # approaches welcome!\n+  CFG_GCC_CFLAGS += -m32\n+  CFG_GCC_LINK_FLAGS += -m32\n+  CFG_DSYMUTIL := dsymutil\n+endif\n+\n+ifneq ($(findstring MINGW,$(CFG_OSTYPE)),)\n+  CFG_WINDOWSY := 1\n+endif\n+\n+ifdef CFG_WINDOWSY\n+  CFG_INFO := $(info cfg: windows-y environment)\n+\n+  CFG_EXE_SUFFIX := .exe\n+  CFG_LIB_NAME=$(1).dll\n+  CFG_RUN_PROGRAM=$(1)\n+\n+  CFG_PATH_MUNGE := | sed -e 's/\\\\\\(.\\)/\\/\\1/g'\n+  ifdef CFG_FLEXLINK\n+    CFG_BOOT_NATIVE := 1\n+  endif\n+  CFG_GCC_CFLAGS += -march=i686\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC\n+endif\n+\n+ifdef CFG_UNIXY\n+  CFG_INFO := $(info cfg: unix-y environment)\n+\n+  CFG_EXE_SUFFIX :=\n+  CFG_RUN_PROGRAM = LD_LIBRARY_PATH=$(dir $(1)) $(CFG_VALGRIND) $(1)\n+\n+  CFG_BOOT_NATIVE := 1\n+\n+  ifdef MINGW_CROSS\n+    CFG_EXE_SUFFIX := .exe\n+    CFG_LIB_NAME=$(1).dll\n+    CFG_RUN_PROGRAM=$(1)\n+\n+    CFG_INFO := $(info cfg: mingw-cross)\n+    CFG_GCC_CROSS := i586-mingw32msvc-\n+    CFG_BOOT_FLAGS += -t win32-x86-pe\n+    ifdef CFG_VALGRIND\n+      CFG_VALGRIND += wine\n+    endif\n+    CFG_GCC_CFLAGS := -march=i686\n+    CFG_GCC_LINK_FLAGS := -shared\n+    ifeq ($(CFG_CPUTYPE), x86_64)\n+      CFG_GCC_CFLAGS += -m32\n+      CFG_GCC_LINK_FLAGS += -m32\n+    endif\n+  endif\n+  ifdef CFG_VALGRIND\n+    CFG_VALGRIND += --leak-check=full \\\n+                    --error-exitcode=1 \\\n+                    --quiet --vex-iropt-level=0 \\\n+                    --suppressions=etc/x86.supp\n+  endif\n+endif\n+\n+CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n+CFG_LLVMEXT :=$(call CFG_LIB_NAME,llvmext)\n+CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n+\n+ifdef CFG_GCC\n+  CFG_INFO := $(info cfg: using gcc)\n+  CFG_GCC_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n+  CFG_GCC_LINK_FLAGS += -g\n+  CFG_COMPILE_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -c -o $(1) $(2)\n+  CFG_LINK_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_LINK_FLAGS) -o $(1)\n+  CFG_DEPEND_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -MT \"$(1)\" -MM $(2)\n+else\n+  CFG_ERR := $(error please try on a system with gcc)\n+endif\n+\n ifdef CFG_OCAMLC_OPT\n-  $(info cfg: using ocaml native compiler)\n+  $(info cfg: have ocaml native compiler)\n   OPT=.opt\n else\n-  $(info cfg: using ocaml bytecode compiler)\n+  $(info cfg: have only ocaml bytecode compiler)\n endif\n \n-ifdef PROFILE_BOOT\n-  $(info cfg: building bootstrap compiler with profiling (forcing native))\n-  CFG_NATIVE_BOOT := 1\n+ifdef BOOT_PROFILE\n+  $(info cfg: forcing native bootstrap compiler (BOOT_PROFILE))\n+  CFG_BOOT_NATIVE := 1\n   CFG_OCAMLOPT_PROFILE_FLAGS := -p\n endif\n \n-ifdef DEBUG\n-  $(info cfg: forcing bytecode bootstrap compiler)\n-  CFG_NATIVE_BOOT :=\n+ifdef BOOT_DEBUG\n+  $(info cfg: forcing bytecode bootstrap compiler (DEBUG))\n+  CFG_BOOT_NATIVE :=\n endif\n \n-ifdef CFG_NATIVE_BOOT\n+ifdef CFG_BOOT_NATIVE\n   $(info cfg: building native bootstrap compiler)\n else\n   $(info cfg: building bytecode bootstrap compiler)\n endif\n \n ifdef NO_VALGRIND\n-    CFG_VALGRIND :=\n+  $(info cfg: disabling valgrind (NO_VALGRIND))\n+  CFG_VALGRIND :=\n+endif\n+\n+######################################################################\n+# Target-and-rule \"utility variables\"\n+######################################################################\n+\n+ifdef VERBOSE\n+  Q :=\n+  E =\n+else\n+  Q := @\n+  E = echo $(1)\n endif\n \n+R := $(CFG_RUN_PROGRAM)\n+S := $(CFG_SRC_DIR)\n+X := $(CFG_EXE_SUFFIX)\n+\n+# Look in doc and src dirs.\n+VPATH := $(S)doc $(S)src\n+\n+# Compilers we build, we now know how to run.\n+BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS)\n+STAGE0 := $(Q)stage0/rustc$(X) $(CFG_RUSTC_FLAGS)\n+STAGE1 := $(Q)stage1/rustc$(X) $(CFG_RUSTC_FLAGS)\n+STAGE2 := $(Q)stage2/rustc$(X) $(CFG_RUSTC_FLAGS)\n+\n+# \"Source\" files we generate in builddir along the way.\n+GENERATED := boot/fe/lexer.ml boot/version.ml\n+\n+# Delete the built-in rules.\n+.SUFFIXES:\n+%:: %,v\n+%:: RCS/%,v\n+%:: RCS/%\n+%:: s.%\n+%:: SCCS/s.%\n \n ######################################################################\n # Bootstrap compiler variables\n@@ -66,72 +215,172 @@ BOOT_CMXS := $(BOOT_MLS:.ml=.cmx)\n BOOT_OBJS := $(BOOT_MLS:.ml=.o)\n BOOT_CMIS := $(BOOT_MLS:.ml=.cmi)\n \n-BOOT_ML_DEP_INCS := -I boot                              \\\n-                    -I $(S)boot/fe   -I $(S)boot/me      \\\n-                    -I $(S)boot/be   -I $(S)boot/driver  \\\n-                    -I $(S)boot/util\n+BS := $(S)/src/boot/\n+\n+BOOT_ML_DEP_INCS := -I $(BS)/fe   -I $(BS)/me      \\\n+                    -I $(BS)/be   -I $(BS)/driver  \\\n+                    -I $(BS)/util -I boot\n+\n+BOOT_ML_INCS    :=  -I boot/fe   -I boot/me      \\\n+                    -I boot/be   -I boot/driver  \\\n+                    -I boot/util -I boot\n \n-BOOT_ML_INCS        := $(BOOT_ML_DEP_INCS)\n BOOT_ML_LIBS        := unix.cma  nums.cma  bigarray.cma\n BOOT_ML_NATIVE_LIBS := unix.cmxa nums.cmxa bigarray.cmxa\n BOOT_OCAMLC_FLAGS   := -g $(BOOT_ML_INCS) -w Ael -warn-error Ael\n+BOOT_OCAMLOPT_FLAGS := -g $(BOOT_ML_INCS) -w Ael -warn-error Ael\n+\n+######################################################################\n+# Runtime (C++) library variables\n+######################################################################\n \n+RUNTIME_CS := rt/sync/timer.cpp \\\n+              rt/sync/sync.cpp \\\n+              rt/sync/lock_and_signal.cpp \\\n+              rt/rust.cpp \\\n+              rt/rust_builtin.cpp \\\n+              rt/rust_run_program.cpp \\\n+              rt/rust_crate.cpp \\\n+              rt/rust_crate_cache.cpp \\\n+              rt/rust_crate_reader.cpp \\\n+              rt/rust_comm.cpp \\\n+              rt/rust_dom.cpp \\\n+              rt/rust_task.cpp \\\n+              rt/rust_task_list.cpp \\\n+              rt/rust_proxy.cpp \\\n+              rt/rust_chan.cpp \\\n+              rt/rust_port.cpp \\\n+              rt/rust_upcall.cpp \\\n+              rt/rust_log.cpp \\\n+              rt/rust_message.cpp \\\n+              rt/rust_timer.cpp \\\n+              rt/circular_buffer.cpp \\\n+              rt/isaac/randport.cpp \\\n+              rt/rust_srv.cpp \\\n+              rt/rust_kernel.cpp \\\n+              rt/memory_region.cpp \\\n+              rt/test/rust_test_harness.cpp \\\n+              rt/test/rust_test_runtime.cpp \\\n+              rt/test/rust_test_util.cpp\n+\n+RUNTIME_HDR := rt/globals.h \\\n+               rt/rust.h \\\n+               rt/rust_dwarf.h \\\n+               rt/rust_internal.h \\\n+               rt/rust_util.h \\\n+               rt/rust_chan.h \\\n+               rt/rust_port.h \\\n+               rt/rust_dom.h \\\n+               rt/rust_task.h \\\n+               rt/rust_task_list.h \\\n+               rt/rust_proxy.h \\\n+               rt/rust_log.h \\\n+               rt/rust_message.h \\\n+               rt/circular_buffer.h \\\n+               rt/util/array_list.h \\\n+               rt/util/indexed_list.h \\\n+               rt/util/synchronized_indexed_list.h \\\n+               rt/util/hash_map.h \\\n+               rt/sync/sync.h \\\n+               rt/sync/timer.h \\\n+               rt/sync/lock_free_queue.h \\\n+               rt/rust_srv.h \\\n+               rt/rust_kernel.h \\\n+               rt/memory_region.h \\\n+               rt/memory.h \\\n+               rt/test/rust_test_harness.h \\\n+               rt/test/rust_test_runtime.h \\\n+               rt/test/rust_test_util.h\n+\n+RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash\n+RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n \n ######################################################################\n-# Target-and-rule \"utility variables\"\n+# rustc LLVM-extensions (C++) library variables\n ######################################################################\n \n-ifdef VERBOSE\n-  Q :=\n-  E =\n-else\n-  Q := @\n-  E = echo $(1)\n-endif\n+LLVMEXT_CS := $(addprefix llvmext/, \\\n+                MachOObjectFile.cpp Object.cpp RustWrapper.cpp)\n \n-S := $(CFG_SRC_DIR)\n-X := $(CFG_EXE_SUFFIX)\n+LLVMEXT_HDR := llvmext/include/llvm-c/Object.h\n \n-# Look in doc and src dirs.\n-VPATH := $(CFG_SRC_DIR)/doc $(CFG_SRC_DIR)/src\n+LLVMEXT_INCS := -iquote $(CFG_LLVM_INCDIR) -iquote llvmext/include\n+LLVMEXT_OBJS := $(LLVMEXT_CS:.cpp=.o)\n+LLVMEXT_LIBS := $(CFG_LLVM_LDFLAGS) $(CFG_LLVM_LIBS)\n \n-# Delete the built-in rules.\n-.SUFFIXES:\n-%:: %,v\n-%:: RCS/%,v\n-%:: RCS/%\n-%:: s.%\n-%:: SCCS/s.%\n+######################################################################\n+# Standard library variables\n+######################################################################\n+\n+STDLIB_CRATE := lib/std.rc\n+STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/lib/,*.rc *.rs */*.rs))\n \n ######################################################################\n-# Targets and rules\n+# rustc crate variables\n ######################################################################\n \n-all: boot/rustboot$(X)\n+COMPILER_CRATE := comp/rustc.rc\n+COMPILER_INPUTS := $(wildcard $(addprefix $(S)/src/comp/, \\\n+                                rustc.rc *.rs */*.rs))\n+\n+######################################################################\n+# Single-target rules\n+######################################################################\n \n-ifdef CFG_NATIVE_BOOT\n+all: boot/rustboot$(X) rt/$(CFG_RUNTIME) llvmext/$(CFG_LLVMEXT)\n+\n+rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR)\n+\t@$(call E, link: $@)\n+\t$(Q)$(call CFG_LINK_C, $@) $(RUNTIME_OBJS)\n+\n+llvmext/$(CFG_LLVMEXT): $(LLVMEXT_OBJS) $(MKFILES) $(LLVMEXT_HDR)\n+\t@$(call E, link: $@)\n+\t$(Q)$(call CFG_LINK_C, $@ $(LLVMEXT_OBJS) \\\n+        $(CFG_LLVM_LIBS) $(CFG_LLVM_LDFLAGS))\n+\n+ifdef CFG_BOOT_NATIVE\n boot/rustboot$(X): $(BOOT_CMXS) $(MKFILES)\n-\t@$(call E, compile: $@)\n-\t$(Q)ocamlopt$(OPT) -o $@ $(BOOT_OCAMLOPT_FLAGS) $(ML_NATIVE_LIBS) \\\n+\t@$(call E, link: $@)\n+\t$(Q)ocamlopt$(OPT) -o $@ $(BOOT_OCAMLOPT_FLAGS) $(BOOT_ML_NATIVE_LIBS) \\\n         $(BOOT_CMXS)\n else\n boot/rustboot$(X): $(BOOT_CMOS) $(MKFILES)\n-\t@$(call E, compile: $@)\n+\t@$(call E, link: $@)\n \t$(Q)ocamlc$(OPT) -o $@ $(BOOT_OCAMLC_FLAGS) $(BOOT_ML_LIBS) $(BOOT_CMOS)\n endif\n \n-\n boot/version.ml: $(MKFILES)\n \t@$(call E, git: $@)\n \t$(Q)git log -1 \\\n       --pretty=format:'let version = \"prerelease (%h %ci)\";;' >$@ || exit 1\n \n+\n+######################################################################\n+# Pattern rules\n+######################################################################\n+\n+rt/%.o: rt/%.cpp $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n+\n+llvmext/%.o: llvmext/%.cpp $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)$(call CFG_COMPILE_C, $@, $(CFG_LLVM_CXXFLAGS) \\\n+\t\t$(SUPPORT_INCS)) $<\n+\n %.cmo: %.ml $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(Q)ocamlc$(OPT) -c -o $@ $(BOOT_OCAMLC_FLAGS) $<\n \n %.cmo: %.cmi $(MKFILES)\n \n+%.cmx %.o: %.ml $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(Q)ocamlopt$(OPT) -c -o $@ $(BOOT_OCAMLOPT_FLAGS) $<\n+\n+%.ml: %.mll $(MKFILES)\n+\t@$(call E, lex-gen: $@)\n+\t$(Q)ocamllex$(OPT) -q -o $@ $<\n \n \n ######################################################################"}, {"sha": "1672375e678233b79ea79bd2c895559eff1c380e", "filename": "configure", "status": "modified", "additions": 87, "deletions": 29, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/4c2245d8421ff43832b005375025cd14f56c1ca9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/4c2245d8421ff43832b005375025cd14f56c1ca9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=4c2245d8421ff43832b005375025cd14f56c1ca9", "patch": "@@ -3,41 +3,40 @@\n CFG_SRC_DIR=${0%${0##*/}}\n CFG_BUILD_DIR=$PWD\n \n-echo \"configure: recreating config.mk\"\n-echo '' >config.mk\n+msg() {\n+    echo \"configure: $1\"\n+}\n \n-echo \"configure: making directories\"\n-for i in \\\n-    doc \\\n-    boot/fe boot/me boot/be boot/driver boot/util \\\n-    rt/isaac rt/bigint rt/sync rt/test\n-do\n-    mkdir -p -v $i\n-done\n+err() {\n+    echo \"configure: error: $1\"\n+    exit 1\n+}\n+\n+make_dir() {\n+    if [ ! -d $1 ]\n+    then\n+        msg \"mkdir -p $1\"\n+        mkdir -p $1\n+    fi\n+}\n+\n+copy() {\n+    msg \"cp $1 $1\"\n+    cp $1 $2\n+}\n \n make_test_subdirs() {\n     for t in run-pass run-fail compile-fail\n     do\n-        mkdir -p -v $1/test/$t\n+        make_dir $1/test/$t\n     done\n }\n \n-make_test_subdirs boot\n-\n-for i in 0 1 2\n-do\n-    mkdir -p -v stage$i\n-    make_test_subdirs stage$i\n-done\n-\n-echo \"configure: copying Makefile\"\n-cp -v ${CFG_SRC_DIR}Makefile.in ./Makefile\n-\n putvar() {\n     local T\n     eval T=\\$$1\n-    printf \"%-20s := %s\\n\" $1 $T\n-    printf \"%-20s := %s\\n\" $1 $T >>config.mk\n+    printf \"%-20s := %s\\n\" $1 \"$T\"\n+    printf \"%-20s := %s\\n\" $1 \"$T\" >>config.mk\n }\n \n probe() {\n@@ -53,7 +52,39 @@ probe() {\n     putvar $V\n }\n \n-echo \"configure: inspecting environment\"\n+probe_need() {\n+    local V=$1\n+    local P=$2\n+    probe $1 $2\n+    eval VV=\\$$V\n+    if [ -z \"$VV\" ]\n+    then\n+        err \"required program '$P' not found\"\n+    fi\n+}\n+\n+\n+msg \"recreating config.mk\"\n+echo '' >config.mk\n+\n+msg \"making directories\"\n+for i in \\\n+    doc \\\n+    boot/fe boot/me boot/be boot/driver boot/util \\\n+    rt/isaac rt/bigint rt/sync rt/test\n+do\n+    make_dir $i\n+done\n+\n+make_test_subdirs boot\n+\n+for i in 0 1 2\n+do\n+    make_dir stage$i\n+    make_test_subdirs stage$i\n+done\n+\n+msg \"inspecting environment\"\n \n CFG_OSTYPE=$(uname -s)\n CFG_CPUTYPE=$(uname -m)\n@@ -63,13 +94,40 @@ putvar CFG_BUILD_DIR\n putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n \n-echo \"configure: looking for programs\"\n+msg \"looking for programs\"\n+probe_need CFG_GCC          gcc\n+probe_need CFG_LLVM_CONFIG  llvm-config\n+probe_need CFG_OCAMLC       ocamlc\n+probe_need CFG_PERL         perl\n+probe_need CFG_SED          sed\n+\n probe CFG_VALGRIND         valgrind\n-probe CFG_OCAMLC           ocamlc\n-probe CFG_OCAMLC_OPT       ocamlc.opt\n probe CFG_OCAMLOPT         ocamlopt\n+probe CFG_OCAMLC_OPT       ocamlc.opt\n probe CFG_OCAMLOPT_OPT     ocamlopt.opt\n probe CFG_FLEXLINK         flexlink\n-probe CFG_LLVM_CONFIG      llvm-config\n+\n+CFG_LLVM_VERSION=$(llvm-config --version)\n+case $CFG_LLVM_VERSION in\n+    (3.0svn | 3.0)\n+    msg \"found ok version of LLVM: $CFG_LLVM_VERSION\"\n+    ;;\n+    (*)\n+    err \"bad LLVM version: $CFG_LLVM_VERSION, need >=3.0svn\"\n+    ;;\n+esac\n+CFG_LLVM_INCDIR=$(llvm-config --includedir)\n+CFG_LLVM_BINDIR=$(llvm-config --bindir)\n+CFG_LLVM_CXXFLAGS=$(llvm-config --cxxflags)\n+CFG_LLVM_LDFLAGS=$(llvm-config --ldflags)\n+CFG_LLVM_LIBS=$(llvm-config --libs)\n+\n+putvar CFG_LLVM_INCDIR\n+putvar CFG_LLVM_BINDIR\n+putvar CFG_LLVM_CXXFLAGS\n+putvar CFG_LLVM_LDFLAGS\n+putvar CFG_LLVM_LIBS\n+\n+copy ${CFG_SRC_DIR}Makefile.in ./Makefile\n \n echo \"configure: complete\""}]}