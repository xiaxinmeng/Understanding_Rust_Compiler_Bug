{"sha": "114fb86ca08cfa6a99087e0f0bc264d03590dc37", "node_id": "C_kwDOAAsO6NoAKDExNGZiODZjYTA4Y2ZhNmE5OTA4N2UwZjBiYzI2NGQwMzU5MGRjMzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T19:04:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-15T19:04:13Z"}, "message": "Auto merge of #112671 - bjorn3:sync_cg_clif-2023-06-15, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nThe main highlights this time are a cranelift update, some x86 vendor intrinsic implementations and preparations for testing cg_clif in CI here.\n\nr? `@ghost`\n\n`@rustbot` label +A-codegen +A-cranelift +T-compiler", "tree": {"sha": "cc805a0e76d43a7218c72db02c2883b5d9ac641b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc805a0e76d43a7218c72db02c2883b5d9ac641b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114fb86ca08cfa6a99087e0f0bc264d03590dc37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114fb86ca08cfa6a99087e0f0bc264d03590dc37", "html_url": "https://github.com/rust-lang/rust/commit/114fb86ca08cfa6a99087e0f0bc264d03590dc37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114fb86ca08cfa6a99087e0f0bc264d03590dc37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331249a94930adb3d2a7243d946733b63324b2d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/331249a94930adb3d2a7243d946733b63324b2d6", "html_url": "https://github.com/rust-lang/rust/commit/331249a94930adb3d2a7243d946733b63324b2d6"}, {"sha": "8a120cc867a5a32b7879c62e02216a43d695e6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a120cc867a5a32b7879c62e02216a43d695e6e2", "html_url": "https://github.com/rust-lang/rust/commit/8a120cc867a5a32b7879c62e02216a43d695e6e2"}], "stats": {"total": 3124, "additions": 2526, "deletions": 598}, "files": [{"sha": "8b4efd4e394885eeebd4f1b7da1ff93760235cc6", "filename": "compiler/rustc_codegen_cranelift/.cirrus.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.cirrus.yml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,16 +1,16 @@\n task:\n   name: freebsd\n   freebsd_instance:\n-    image: freebsd-13-1-release-amd64\n+    image: freebsd-13-2-release-amd64\n   setup_rust_script:\n-    - pkg install -y curl git bash\n+    - pkg install -y git bash\n     - curl https://sh.rustup.rs -sSf --output rustup.sh\n     - sh rustup.sh --default-toolchain none -y --profile=minimal\n   target_cache:\n     folder: target\n   prepare_script:\n     - . $HOME/.cargo/env\n-    - ./y.rs prepare\n+    - ./y.sh prepare\n   test_script:\n     - . $HOME/.cargo/env\n-    - ./y.rs test\n+    - ./y.sh test"}, {"sha": "12aa69d3c795618e3295988d0eba61add8daaf11", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/abi-cafe.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -46,12 +46,12 @@ jobs:\n       run: rustup set default-host x86_64-pc-windows-gnu\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build\n-      run: ./y.rs build --sysroot none\n+      run: ./y.sh build --sysroot none\n \n     - name: Test abi-cafe\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: ./y.rs abi-cafe\n+      run: ./y.sh abi-cafe"}, {"sha": "8e6c1e8ade0152e5fe587d3b8d239b6ede4bfc17", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -19,7 +19,7 @@ jobs:\n     - name: Rustfmt\n       run: |\n         cargo fmt --check\n-        rustfmt --check build_system/mod.rs\n+        rustfmt --check build_system/main.rs\n         rustfmt --check example/*\n \n \n@@ -91,22 +91,52 @@ jobs:\n         sudo apt-get install -y gcc-s390x-linux-gnu qemu-user\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n+\n+    - name: Build\n+      run: ./y.sh build --sysroot none\n \n-    - name: Build without unstable features\n+    - name: Test\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      # This is the config rust-lang/rust uses for builds\n-      run: ./y.rs build --no-unstable-features\n+      run: ./y.sh test\n \n-    - name: Build\n-      run: ./y.rs build --sysroot none\n+    - name: Install LLVM standard library\n+      run: rustup target add ${{ matrix.env.TARGET_TRIPLE }}\n \n-    - name: Test\n+    # This is roughly config rust-lang/rust uses for testing\n+    - name: Test with LLVM sysroot\n+      # Skip native x86_64-pc-windows-gnu. It is way too slow and cross-compiled\n+      # x86_64-pc-windows-gnu covers at least part of the tests.\n+      if: matrix.os != 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n-      run: ./y.rs test\n+      run: ./y.sh test --sysroot llvm --no-unstable-features\n+\n+\n+  # This job doesn't use cg_clif in any way. It checks that all cg_clif tests work with cg_llvm too.\n+  test_llvm:\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 60\n+\n+    defaults:\n+      run:\n+        shell: bash\n \n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n+\n+    - name: Disable JIT tests\n+      run: |\n+        sed -i 's/jit./#jit./' config.txt\n+\n+    - name: Test\n+      env:\n+        TARGET_TRIPLE: x86_64-unknown-linux-gnu\n+      run: ./y.rs test --use-backend llvm\n \n   bench:\n     runs-on: ubuntu-latest\n@@ -135,13 +165,13 @@ jobs:\n       run: cargo install hyperfine || true\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build\n-      run: CI_OPT=1 ./y.rs build --sysroot none\n+      run: CI_OPT=1 ./y.sh build --sysroot none\n \n     - name: Benchmark\n-      run: CI_OPT=1 ./y.rs bench\n+      run: CI_OPT=1 ./y.sh bench\n \n \n   dist:\n@@ -194,13 +224,13 @@ jobs:\n         sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Build backend\n-      run: CI_OPT=1 ./y.rs build --sysroot none\n+      run: CI_OPT=1 ./y.sh build --sysroot none\n \n     - name: Build sysroot\n-      run: CI_OPT=1 ./y.rs build\n+      run: CI_OPT=1 ./y.sh build\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz dist"}, {"sha": "b49dc3aff7aaab8f267df0f49cfa94cef177c8c8", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -18,7 +18,7 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Test\n       run: ./scripts/test_bootstrap.sh\n@@ -38,7 +38,7 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n     - name: Prepare dependencies\n-      run: ./y.rs prepare\n+      run: ./y.sh prepare\n \n     - name: Test\n       run: ./scripts/test_rustc_tests.sh"}, {"sha": "e6ac8c8408da62f972157acdff706c1f676cc6c8", "filename": "compiler/rustc_codegen_cranelift/.gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitignore?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,4 +1,5 @@\n /target\n+/build_system/target\n **/*.rs.bk\n *.rlib\n *.o"}, {"sha": "60cb51d5663626225fcdf24013a5a6ff674c2898", "filename": "compiler/rustc_codegen_cranelift/.vscode/settings.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -6,9 +6,10 @@\n     \"rust-analyzer.imports.granularity.enforce\": true,\n     \"rust-analyzer.imports.granularity.group\": \"module\",\n     \"rust-analyzer.imports.prefix\": \"crate\",\n-    \"rust-analyzer.cargo.features\": [\"unstable-features\", \"__check_build_system_using_ra\"],\n+    \"rust-analyzer.cargo.features\": [\"unstable-features\"],\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n+        \"./build_system/Cargo.toml\",\n         {\n             \"crates\": [\n                 {"}, {"sha": "904233d4242764a681c55a49176ed9109eed2abb", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 73, "deletions": 63, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -19,6 +19,12 @@ version = \"1.0.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"216261ddc8289130e551ddcd5ce8a064710c0d064a4d2895c67151c92b5443f6\"\n \n+[[package]]\n+name = \"arbitrary\"\n+version = \"1.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2d098ff73c1ca148721f37baad5ea6a465a13f9573aba8641fbbbae8164a54e\"\n+\n [[package]]\n name = \"autocfg\"\n version = \"1.1.0\"\n@@ -37,12 +43,6 @@ version = \"3.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba\"\n \n-[[package]]\n-name = \"byteorder\"\n-version = \"1.4.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n-\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n@@ -51,23 +51,24 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1277fbfa94bc82c8ec4af2ded3e639d49ca5f7f3c7eeab2c66accd135ece4e70\"\n+checksum = \"9b6160c0a96253993b79fb7e0983534a4515ecf666120ddf8f92068114997ebc\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c6e8c31ad3b2270e9aeec38723888fe1b0ace3bea2b06b3f749ccf46661d3220\"\n+checksum = \"7b38da5f63562e42f3c929d7c76871098e5ad12c8ab44b0659ffc529f22a5b3a\"\n dependencies = [\n  \"bumpalo\",\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n  \"cranelift-codegen-shared\",\n+ \"cranelift-control\",\n  \"cranelift-entity\",\n  \"cranelift-isle\",\n  \"gimli\",\n@@ -80,30 +81,39 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c8ac5ac30d62b2d66f12651f6b606dbdfd9c2cfd0908de6b387560a277c5c9da\"\n+checksum = \"011371e213e163b55dd9e8404b3f2d9fa52cd14dc2f3dc5b83e61ffceff126db\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd82b8b376247834b59ed9bdc0ddeb50f517452827d4a11bccf5937b213748b8\"\n+checksum = \"1bf97dde7f5ad571161cdd203a2c9c88682ef669830aea3c14ea5d164ef8bb43\"\n+\n+[[package]]\n+name = \"cranelift-control\"\n+version = \"0.96.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fd9a9254aee733b0f2b68e5eaaf0337ad53cb23252a056c10a35370551be8d40\"\n+dependencies = [\n+ \"arbitrary\",\n+]\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"40099d38061b37e505e63f89bab52199037a72b931ad4868d9089ff7268660b0\"\n+checksum = \"baf39a33ee39479d1337cd9333f3c09786c5a0ca1ec509edcaf9d1346d5de0e5\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"64a25d9d0a0ae3079c463c34115ec59507b4707175454f0eee0891e83e30e82d\"\n+checksum = \"65e260b92a193a0a2dccc3938f133d9532e7dcfe8d03e36bf8b7d3518c1c1793\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -113,18 +123,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-isle\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"80de6a7d0486e4acbd5f9f87ec49912bf4c8fb6aea00087b989685460d4469ba\"\n+checksum = \"9446c8e1aadfcdacee1a49592bc2c25d1d9bf5484782c163e7f5485c92cd3c1c\"\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ca96b05988aa057eda09a817a6e31915fabd7f476b513123aff08053cd193dd\"\n+checksum = \"689a6df165d0f860c1e1a3d53c28944e2743c3e9ee4c678cf190fe60ad7a6ef5\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n+ \"cranelift-control\",\n  \"cranelift-entity\",\n  \"cranelift-module\",\n  \"cranelift-native\",\n@@ -138,19 +149,20 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e5112c0be9cc5da064e0620570d67852f11ce44f2e572a58ecf7f11df73978b8\"\n+checksum = \"0b1402d6ff1695b429536b2eaa126db560fc94c375ed0e9cfb15051fc07427f7\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n+ \"cranelift-control\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb6b03e0e03801c4b3fd8ce0758a94750c07a44e7944cc0ffbf0d3f2e7c79b00\"\n+checksum = \"eac916f3c5aff4b817e42fc2e682292b931495b3fe2603d5e3c3cf602d74e344\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -159,12 +171,13 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.95.1\"\n+version = \"0.96.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"48ed1b37d0972abe804cb5bf2b35f3a76a276ebbe148e3a726d8e31042790978\"\n+checksum = \"23860f4cd064017f2108e6bc5d25660a77cd6eea77f1ac0756870a00abb12e93\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n+ \"cranelift-control\",\n  \"cranelift-module\",\n  \"log\",\n  \"object\",\n@@ -186,15 +199,6 @@ version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n \n-[[package]]\n-name = \"fxhash\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c\"\n-dependencies = [\n- \"byteorder\",\n-]\n-\n [[package]]\n name = \"gimli\"\n version = \"0.27.2\"\n@@ -273,9 +277,9 @@ checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n \n [[package]]\n name = \"object\"\n-version = \"0.30.3\"\n+version = \"0.30.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\n+checksum = \"03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385\"\n dependencies = [\n  \"crc32fast\",\n  \"hashbrown 0.13.2\",\n@@ -291,12 +295,13 @@ checksum = \"86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860\"\n \n [[package]]\n name = \"regalloc2\"\n-version = \"0.6.1\"\n+version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"80535183cae11b149d618fbd3c37e38d7cda589d82d7769e196ca9a9042d7621\"\n+checksum = \"d4a52e724646c6c0800fc456ec43b4165d2f91fba88ceaca06d9e0b400023478\"\n dependencies = [\n- \"fxhash\",\n+ \"hashbrown 0.13.2\",\n  \"log\",\n+ \"rustc-hash\",\n  \"slice-group-by\",\n  \"smallvec\",\n ]\n@@ -313,6 +318,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"rustc-hash\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n+\n [[package]]\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n@@ -327,7 +338,6 @@ dependencies = [\n  \"indexmap\",\n  \"libloading\",\n  \"object\",\n- \"once_cell\",\n  \"smallvec\",\n  \"target-lexicon\",\n ]\n@@ -364,9 +374,9 @@ checksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n \n [[package]]\n name = \"wasmtime-jit-icache-coherence\"\n-version = \"8.0.1\"\n+version = \"9.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aecae978b13f7f67efb23bd827373ace4578f2137ec110bbf6a4a7cde4121bbd\"\n+checksum = \"7d90933b781e1cef7656baed671c7a90bdba0c1c694e04fdd4124419308f5cbb\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -397,18 +407,18 @@ checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n [[package]]\n name = \"windows-sys\"\n-version = \"0.45.0\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\n+checksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\n dependencies = [\n  \"windows-targets\",\n ]\n \n [[package]]\n name = \"windows-targets\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7\"\n+checksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\n dependencies = [\n  \"windows_aarch64_gnullvm\",\n  \"windows_aarch64_msvc\",\n@@ -421,42 +431,42 @@ dependencies = [\n \n [[package]]\n name = \"windows_aarch64_gnullvm\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n+checksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n+checksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640\"\n+checksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605\"\n+checksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n+checksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n+checksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.42.1\"\n+version = \"0.48.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n+checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\""}, {"sha": "1c1f2d8577bd6d23bea940cbe6588332358f34f9", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -3,31 +3,23 @@ name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n edition = \"2021\"\n \n-[[bin]]\n-# This is used just to teach rust-analyzer how to check the build system. required-features is used\n-# to disable it for regular builds.\n-name = \"y\"\n-path = \"./y.rs\"\n-required-features = [\"__check_build_system_using_ra\"]\n-\n [lib]\n crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.95.1\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = { version = \"0.95.1\" }\n-cranelift-module = { version = \"0.95.1\" }\n-cranelift-native = { version = \"0.95.1\" }\n-cranelift-jit = { version = \"0.95.1\", optional = true }\n-cranelift-object = { version = \"0.95.1\" }\n+cranelift-codegen = {  version = \"0.96.1\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = { version = \"0.96.1\" }\n+cranelift-module = { version = \"0.96.1\" }\n+cranelift-native = { version = \"0.96.1\" }\n+cranelift-jit = { version = \"0.96.1\", optional = true }\n+cranelift-object = { version = \"0.96.1\" }\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.27.2\", default-features = false, features = [\"write\"]}\n object = { version = \"0.30.3\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n indexmap = \"1.9.3\"\n libloading = { version = \"0.7.3\", optional = true }\n-once_cell = \"1.10.0\"\n smallvec = \"1.8.1\"\n \n [patch.crates-io]\n@@ -46,7 +38,6 @@ smallvec = \"1.8.1\"\n unstable-features = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n-__check_build_system_using_ra = []\n \n [package.metadata.rust-analyzer]\n rustc_private = true"}, {"sha": "9469feea0cbf89b87b0e330cda8aa163ad4db04e", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -10,8 +10,8 @@ If not please open an issue.\n ```bash\n $ git clone https://github.com/bjorn3/rustc_codegen_cranelift\n $ cd rustc_codegen_cranelift\n-$ ./y.rs prepare\n-$ ./y.rs build\n+$ ./y.sh prepare\n+$ ./y.sh build\n ```\n \n To run the test suite replace the last command with:\n@@ -20,17 +20,22 @@ To run the test suite replace the last command with:\n $ ./test.sh\n ```\n \n-For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.rs`.\n+For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.sh`.\n+\n+## Precompiled builds\n \n Alternatively you can download a pre built version from the [releases] page.\n+Extract the `dist` directory in the archive anywhere you want.\n+If you want to use `cargo clif build` instead of having to specify the full path to the `cargo-clif` executable, you can add the `bin` subdirectory of the extracted `dist` directory to your `PATH`.\n+(tutorial [for Windows](https://stackoverflow.com/a/44272417), and [for Linux/MacOS](https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path/26059#26059)).\n \n [releases]: https://github.com/bjorn3/rustc_codegen_cranelift/releases/tag/dev\n \n ## Usage\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.sh prepare` and `y.sh build` or `test.sh`).\n \n In the directory with your project (where you can do the usual `cargo build`), run:\n "}, {"sha": "8219e6b6ccf3bca19d613a2b7331639a30a8d7e1", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.toml", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/331249a94930adb3d2a7243d946733b63324b2d6/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/331249a94930adb3d2a7243d946733b63324b2d6/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml?ref=331249a94930adb3d2a7243d946733b63324b2d6", "patch": "@@ -1,35 +0,0 @@\n-[package]\n-name = \"sysroot\"\n-version = \"0.0.0\"\n-\n-[dependencies]\n-core = { path = \"./sysroot_src/library/core\" }\n-alloc = { path = \"./sysroot_src/library/alloc\" }\n-std = { path = \"./sysroot_src/library/std\", features = [\"panic_unwind\", \"backtrace\"] }\n-test = { path = \"./sysroot_src/library/test\" }\n-\n-compiler_builtins = { version = \"0.1.87\", default-features = false, features = [\"no-asm\"] }\n-\n-[patch.crates-io]\n-rustc-std-workspace-core = { path = \"./sysroot_src/library/rustc-std-workspace-core\" }\n-rustc-std-workspace-alloc = { path = \"./sysroot_src/library/rustc-std-workspace-alloc\" }\n-rustc-std-workspace-std = { path = \"./sysroot_src/library/rustc-std-workspace-std\" }\n-\n-[profile.dev]\n-lto = \"off\"\n-\n-[profile.release]\n-debug = true\n-incremental = true\n-lto = \"off\"\n-\n-# Mandatory for correctly compiling compiler-builtins\n-[profile.dev.package.compiler_builtins]\n-debug-assertions = false\n-overflow-checks = false\n-codegen-units = 10000\n-\n-[profile.release.package.compiler_builtins]\n-debug-assertions = false\n-overflow-checks = false\n-codegen-units = 10000"}, {"sha": "0c9ac1ac8e4bd702086402213af792ae0636d192", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/src/lib.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/331249a94930adb3d2a7243d946733b63324b2d6/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331249a94930adb3d2a7243d946733b63324b2d6/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fsrc%2Flib.rs?ref=331249a94930adb3d2a7243d946733b63324b2d6", "patch": "@@ -1 +0,0 @@\n-#![no_std]"}, {"sha": "86268e19160302bb11e519e6e26b426e43c57c95", "filename": "compiler/rustc_codegen_cranelift/build_system/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.lock?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"y\"\n+version = \"0.1.0\""}, {"sha": "f47b9bc55404170b8841d4233535740eb307615e", "filename": "compiler/rustc_codegen_cranelift/build_system/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2FCargo.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"y\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[[bin]]\n+name = \"y\"\n+path = \"main.rs\"\n+\n+[features]\n+unstable-features = [] # for rust-analyzer\n+\n+# Do not add any dependencies"}, {"sha": "29c127bf50ede3d6155b1b0b22e3b02862be28c5", "filename": "compiler/rustc_codegen_cranelift/build_system/abi_cafe.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,25 +1,29 @@\n-use std::path::Path;\n-\n use super::build_sysroot;\n use super::path::Dirs;\n use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::{CodegenBackend, SysrootKind};\n \n-static ABI_CAFE_REPO: GitRepo =\n-    GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n+static ABI_CAFE_REPO: GitRepo = GitRepo::github(\n+    \"Gankra\",\n+    \"abi-cafe\",\n+    \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\",\n+    \"588df6d66abbe105\",\n+    \"abi-cafe\",\n+);\n \n-static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe_target\");\n \n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n-    cg_clif_dylib: &Path,\n+    cg_clif_dylib: &CodegenBackend,\n+    rustup_toolchain_name: Option<&str>,\n     bootstrap_host_compiler: &Compiler,\n ) {\n     ABI_CAFE_REPO.fetch(dirs);\n-    spawn_and_wait(ABI_CAFE.fetch(\"cargo\", &bootstrap_host_compiler.rustc, dirs));\n+    ABI_CAFE_REPO.patch(dirs);\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n@@ -28,6 +32,7 @@ pub(crate) fn run(\n         sysroot_kind,\n         cg_clif_dylib,\n         bootstrap_host_compiler,\n+        rustup_toolchain_name,\n         bootstrap_host_compiler.triple.clone(),\n     );\n \n@@ -40,7 +45,14 @@ pub(crate) fn run(\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);\n     cmd.arg(\"--add-rustc-codegen-backend\");\n-    cmd.arg(format!(\"cgclif:{}\", cg_clif_dylib.display()));\n+    match cg_clif_dylib {\n+        CodegenBackend::Local(path) => {\n+            cmd.arg(format!(\"cgclif:{}\", path.display()));\n+        }\n+        CodegenBackend::Builtin(name) => {\n+            cmd.arg(format!(\"cgclif:{name}\"));\n+        }\n+    }\n     cmd.current_dir(ABI_CAFE.source_dir(dirs));\n \n     spawn_and_wait(cmd);"}, {"sha": "2bb118000344874ca9b45f90847f02da78a99cc7", "filename": "compiler/rustc_codegen_cranelift/build_system/bench.rs", "status": "modified", "additions": 37, "deletions": 45, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,26 +1,19 @@\n use std::env;\n-use std::fs;\n use std::path::Path;\n \n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::rustc_info::get_file_name;\n-use super::utils::{hyperfine_command, spawn_and_wait, CargoProject, Compiler};\n+use super::utils::{hyperfine_command, spawn_and_wait, Compiler};\n \n static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n     \"simple-raytracer\",\n     \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"ad6f59a2331a3f56\",\n     \"<none>\",\n );\n \n-// Use a separate target dir for the initial LLVM build to reduce unnecessary recompiles\n-static SIMPLE_RAYTRACER_LLVM: CargoProject =\n-    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer_llvm\");\n-\n-static SIMPLE_RAYTRACER: CargoProject =\n-    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n-\n pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     benchmark_simple_raytracer(dirs, bootstrap_host_compiler);\n }\n@@ -32,71 +25,70 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         std::process::exit(1);\n     }\n \n-    if !SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).exists() {\n-        SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-        spawn_and_wait(SIMPLE_RAYTRACER.fetch(\n-            &bootstrap_host_compiler.cargo,\n-            &bootstrap_host_compiler.rustc,\n-            dirs,\n-        ));\n-    }\n-\n-    eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n-    spawn_and_wait(build_cmd);\n-    fs::copy(\n-        SIMPLE_RAYTRACER_LLVM\n-            .target_dir(dirs)\n-            .join(&bootstrap_host_compiler.triple)\n-            .join(\"debug\")\n-            .join(get_file_name(\"main\", \"bin\")),\n-        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n-    )\n-    .unwrap();\n+    SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    SIMPLE_RAYTRACER_REPO.patch(dirs);\n \n     let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-    let cargo_clif =\n-        RelPath::DIST.to_path(dirs).join(get_file_name(\"cargo_clif\", \"bin\").replace('_', \"-\"));\n-    let manifest_path = SIMPLE_RAYTRACER.manifest_path(dirs);\n-    let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n+    let cargo_clif = RelPath::DIST\n+        .to_path(dirs)\n+        .join(get_file_name(&bootstrap_host_compiler.rustc, \"cargo_clif\", \"bin\").replace('_', \"-\"));\n+    let manifest_path = SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).join(\"Cargo.toml\");\n+    let target_dir = RelPath::BUILD.join(\"simple_raytracer\").to_path(dirs);\n \n     let clean_cmd = format!(\n         \"RUSTC=rustc cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let llvm_build_cmd = format!(\n-        \"RUSTC=rustc cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc cargo build --manifest-path {manifest_path} --target-dir {target_dir} && (rm build/raytracer_cg_llvm || true) && ln build/simple_raytracer/debug/main build/raytracer_cg_llvm\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let clif_build_cmd = format!(\n-        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir} && (rm build/raytracer_cg_clif || true) && ln build/simple_raytracer/debug/main build/raytracer_cg_clif\",\n+        cargo_clif = cargo_clif.display(),\n+        manifest_path = manifest_path.display(),\n+        target_dir = target_dir.display(),\n+    );\n+    let clif_build_opt_cmd = format!(\n+        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir} --release && (rm build/raytracer_cg_clif_opt || true) && ln build/simple_raytracer/release/main build/raytracer_cg_clif_opt\",\n         cargo_clif = cargo_clif.display(),\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n \n-    let bench_compile =\n-        hyperfine_command(1, bench_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n+    let bench_compile = hyperfine_command(\n+        1,\n+        bench_runs,\n+        Some(&clean_cmd),\n+        &[&llvm_build_cmd, &clif_build_cmd, &clif_build_opt_cmd],\n+    );\n \n     spawn_and_wait(bench_compile);\n \n     eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n-    fs::copy(\n-        target_dir.join(\"debug\").join(get_file_name(\"main\", \"bin\")),\n-        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_clif\", \"bin\")),\n-    )\n-    .unwrap();\n \n     let mut bench_run = hyperfine_command(\n         0,\n         bench_runs,\n         None,\n-        Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n-        Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n+        &[\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_llvm\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_clif\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_clif_opt\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n+        ],\n     );\n     bench_run.current_dir(RelPath::BUILD.to_path(dirs));\n     spawn_and_wait(bench_run);"}, {"sha": "6855c1a7fc5bf50d4efdbdee1d20cad620c77926", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n-use super::utils::{is_ci, is_ci_opt, CargoProject, Compiler};\n+use super::utils::{is_ci, is_ci_opt, maybe_incremental, CargoProject, Compiler};\n \n pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n@@ -14,20 +14,17 @@ pub(crate) fn build_backend(\n     use_unstable_features: bool,\n ) -> PathBuf {\n     let mut cmd = CG_CLIF.build(&bootstrap_host_compiler, dirs);\n-\n-    cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n+    maybe_incremental(&mut cmd);\n \n     let mut rustflags = env::var(\"RUSTFLAGS\").unwrap_or_default();\n \n     if is_ci() {\n         // Deny warnings on CI\n         rustflags += \" -Dwarnings\";\n \n-        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n-        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n-\n         if !is_ci_opt() {\n             cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n+            cmd.env(\"CARGO_PROFILE_RELEASE_OVERFLOW_CHECKS\", \"true\");\n         }\n     }\n \n@@ -52,5 +49,5 @@ pub(crate) fn build_backend(\n         .target_dir(dirs)\n         .join(&bootstrap_host_compiler.triple)\n         .join(channel)\n-        .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n+        .join(get_file_name(&bootstrap_host_compiler.rustc, \"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "74bba9ed5eb886aaed2045989a4d855be4229d95", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "modified", "additions": 64, "deletions": 49, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,11 +1,13 @@\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{self, Command};\n+use std::process::Command;\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version, get_toolchain_name};\n-use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::rustc_info::get_file_name;\n+use super::utils::{\n+    maybe_incremental, remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler,\n+};\n+use super::{CodegenBackend, SysrootKind};\n \n static DIST_DIR: RelPath = RelPath::DIST;\n static BIN_DIR: RelPath = RelPath::DIST.join(\"bin\");\n@@ -15,8 +17,9 @@ pub(crate) fn build_sysroot(\n     dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    cg_clif_dylib_src: &Path,\n+    cg_clif_dylib_src: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) -> Compiler {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -27,32 +30,52 @@ pub(crate) fn build_sysroot(\n \n     let is_native = bootstrap_host_compiler.triple == target_triple;\n \n-    // Copy the backend\n-    let cg_clif_dylib_path = if cfg!(windows) {\n-        // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-        // binaries.\n-        BIN_DIR\n-    } else {\n-        LIB_DIR\n-    }\n-    .to_path(dirs)\n-    .join(cg_clif_dylib_src.file_name().unwrap());\n-    try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n+    let cg_clif_dylib_path = match cg_clif_dylib_src {\n+        CodegenBackend::Local(src_path) => {\n+            // Copy the backend\n+            let cg_clif_dylib_path = if cfg!(windows) {\n+                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+                // binaries.\n+                BIN_DIR\n+            } else {\n+                LIB_DIR\n+            }\n+            .to_path(dirs)\n+            .join(src_path.file_name().unwrap());\n+            try_hard_link(src_path, &cg_clif_dylib_path);\n+            CodegenBackend::Local(cg_clif_dylib_path)\n+        }\n+        CodegenBackend::Builtin(name) => CodegenBackend::Builtin(name.clone()),\n+    };\n \n     // Build and copy rustc and cargo wrappers\n-    let wrapper_base_name = get_file_name(\"____\", \"bin\");\n-    let toolchain_name = get_toolchain_name();\n+    let wrapper_base_name = get_file_name(&bootstrap_host_compiler.rustc, \"____\", \"bin\");\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n         let wrapper_name = wrapper_base_name.replace(\"____\", wrapper);\n \n         let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         let wrapper_path = DIST_DIR.to_path(dirs).join(&wrapper_name);\n         build_cargo_wrapper_cmd\n-            .env(\"TOOLCHAIN_NAME\", toolchain_name.clone())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(&wrapper_path)\n             .arg(\"-Cstrip=debuginfo\");\n+        if let Some(rustup_toolchain_name) = &rustup_toolchain_name {\n+            build_cargo_wrapper_cmd\n+                .env(\"TOOLCHAIN_NAME\", rustup_toolchain_name)\n+                .env_remove(\"CARGO\")\n+                .env_remove(\"RUSTC\")\n+                .env_remove(\"RUSTDOC\");\n+        } else {\n+            build_cargo_wrapper_cmd\n+                .env_remove(\"TOOLCHAIN_NAME\")\n+                .env(\"CARGO\", &bootstrap_host_compiler.cargo)\n+                .env(\"RUSTC\", &bootstrap_host_compiler.rustc)\n+                .env(\"RUSTDOC\", &bootstrap_host_compiler.rustdoc);\n+        }\n+        if let CodegenBackend::Builtin(name) = cg_clif_dylib_src {\n+            build_cargo_wrapper_cmd.env(\"BUILTIN_BACKEND\", name);\n+        }\n         spawn_and_wait(build_cargo_wrapper_cmd);\n         try_hard_link(wrapper_path, BIN_DIR.to_path(dirs).join(wrapper_name));\n     }\n@@ -134,28 +157,25 @@ impl SysrootTarget {\n     }\n }\n \n-pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n-pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n-pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n-pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n+pub(crate) static STDLIB_SRC: RelPath = RelPath::BUILD.join(\"stdlib\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n-    CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n+    CargoProject::new(&STDLIB_SRC.join(\"library/sysroot\"), \"stdlib_target\");\n pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n \n #[must_use]\n fn build_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     compiler: Compiler,\n-    cg_clif_dylib_path: &Path,\n+    cg_clif_dylib_path: &CodegenBackend,\n     sysroot_kind: SysrootKind,\n ) -> SysrootTarget {\n     match sysroot_kind {\n         SysrootKind::None => build_rtstartup(dirs, &compiler)\n             .unwrap_or(SysrootTarget { triple: compiler.triple, libs: vec![] }),\n         SysrootKind::Llvm => build_llvm_sysroot_for_triple(compiler),\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(dirs, channel, compiler, &cg_clif_dylib_path)\n+            build_clif_sysroot_for_triple(dirs, channel, compiler, cg_clif_dylib_path)\n         }\n     }\n }\n@@ -199,26 +219,8 @@ fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     mut compiler: Compiler,\n-    cg_clif_dylib_path: &Path,\n+    cg_clif_dylib_path: &CodegenBackend,\n ) -> SysrootTarget {\n-    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n-        Err(e) => {\n-            eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n-            eprintln!(\"Hint: Try `./y.rs prepare` to patch the sysroot source\");\n-            process::exit(1);\n-        }\n-        Ok(source_version) => {\n-            let rustc_version = get_rustc_version(&compiler.rustc);\n-            if source_version != rustc_version {\n-                eprintln!(\"The patched sysroot source is outdated\");\n-                eprintln!(\"Source version: {}\", source_version.trim());\n-                eprintln!(\"Rustc version:  {}\", rustc_version.trim());\n-                eprintln!(\"Hint: Try `./y.rs prepare` to update the patched sysroot source\");\n-                process::exit(1);\n-            }\n-        }\n-    }\n-\n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n     if let Some(rtstartup_target_libs) = build_rtstartup(dirs, &compiler) {\n@@ -237,19 +239,28 @@ fn build_clif_sysroot_for_triple(\n \n     // Build sysroot\n     let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n-    rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n+    match cg_clif_dylib_path {\n+        CodegenBackend::Local(path) => {\n+            rustflags.push_str(&format!(\" -Zcodegen-backend={}\", path.to_str().unwrap()));\n+        }\n+        CodegenBackend::Builtin(name) => {\n+            rustflags.push_str(&format!(\" -Zcodegen-backend={name}\"));\n+        }\n+    };\n     // Necessary for MinGW to find rsbegin.o and rsend.o\n     rustflags\n-        .push_str(&format!(\" --sysroot={}\", RTSTARTUP_SYSROOT.to_path(dirs).to_str().unwrap()));\n+        .push_str(&format!(\" --sysroot {}\", RTSTARTUP_SYSROOT.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n     compiler.rustflags += &rustflags;\n     let mut build_cmd = STANDARD_LIBRARY.build(&compiler, dirs);\n+    maybe_incremental(&mut build_cmd);\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n     }\n-    build_cmd.arg(\"--locked\");\n+    build_cmd.arg(\"--features\").arg(\"compiler-builtins-no-asm backtrace panic-unwind\");\n+    build_cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG\", \"true\");\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     if compiler.triple.contains(\"apple\") {\n         build_cmd.env(\"CARGO_PROFILE_RELEASE_SPLIT_DEBUGINFO\", \"packed\");\n@@ -272,13 +283,17 @@ fn build_clif_sysroot_for_triple(\n }\n \n fn build_rtstartup(dirs: &Dirs, compiler: &Compiler) -> Option<SysrootTarget> {\n+    if !super::config::get_bool(\"keep_sysroot\") {\n+        super::prepare::prepare_stdlib(dirs, &compiler.rustc);\n+    }\n+\n     if !compiler.triple.ends_with(\"windows-gnu\") {\n         return None;\n     }\n \n     RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n \n-    let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+    let rtstartup_src = STDLIB_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n     for file in [\"rsbegin\", \"rsend\"] {"}, {"sha": "3bc78d5db94fab69075fb87dbbebd174084a4104", "filename": "compiler/rustc_codegen_cranelift/build_system/main.rs", "status": "renamed", "additions": 102, "deletions": 23, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmain.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,3 +1,7 @@\n+#![warn(rust_2018_idioms)]\n+#![warn(unused_lifetimes)]\n+#![warn(unreachable_pub)]\n+\n use std::env;\n use std::path::PathBuf;\n use std::process;\n@@ -37,13 +41,19 @@ enum Command {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub(crate) enum SysrootKind {\n+enum SysrootKind {\n     None,\n     Clif,\n     Llvm,\n }\n \n-pub(crate) fn main() {\n+#[derive(Clone, Debug)]\n+enum CodegenBackend {\n+    Local(PathBuf),\n+    Builtin(String),\n+}\n+\n+fn main() {\n     if env::var(\"RUST_BACKTRACE\").is_err() {\n         env::set_var(\"RUST_BACKTRACE\", \"1\");\n     }\n@@ -75,15 +85,24 @@ pub(crate) fn main() {\n     };\n \n     let mut out_dir = PathBuf::from(\".\");\n+    let mut download_dir = None;\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n+    let mut frozen = false;\n+    let mut skip_tests = vec![];\n+    let mut use_backend = None;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n             \"--out-dir\" => {\n                 out_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n                     arg_error!(\"--out-dir requires argument\");\n-                }))\n+                }));\n+            }\n+            \"--download-dir\" => {\n+                download_dir = Some(PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--download-dir requires argument\");\n+                })));\n             }\n             \"--debug\" => channel = \"debug\",\n             \"--sysroot\" => {\n@@ -96,30 +115,79 @@ pub(crate) fn main() {\n                 }\n             }\n             \"--no-unstable-features\" => use_unstable_features = false,\n+            \"--frozen\" => frozen = true,\n+            \"--skip-test\" => {\n+                // FIXME check that all passed in tests actually exist\n+                skip_tests.push(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--skip-test requires argument\");\n+                }));\n+            }\n+            \"--use-backend\" => {\n+                use_backend = Some(match args.next() {\n+                    Some(name) => name,\n+                    None => arg_error!(\"--use-backend requires argument\"),\n+                });\n+            }\n             flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n \n-    let bootstrap_host_compiler = Compiler::bootstrap_with_triple(\n-        std::env::var(\"HOST_TRIPLE\")\n+    let current_dir = std::env::current_dir().unwrap();\n+    out_dir = current_dir.join(out_dir);\n+\n+    if command == Command::Prepare {\n+        prepare::prepare(&path::Dirs {\n+            source_dir: current_dir.clone(),\n+            download_dir: download_dir\n+                .map(|dir| current_dir.join(dir))\n+                .unwrap_or_else(|| out_dir.join(\"download\")),\n+            build_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            dist_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            frozen,\n+        });\n+        process::exit(0);\n+    }\n+\n+    let rustup_toolchain_name = match (env::var(\"CARGO\"), env::var(\"RUSTC\"), env::var(\"RUSTDOC\")) {\n+        (Ok(_), Ok(_), Ok(_)) => None,\n+        (Err(_), Err(_), Err(_)) => Some(rustc_info::get_toolchain_name()),\n+        _ => {\n+            eprintln!(\"All of CARGO, RUSTC and RUSTDOC need to be set or none must be set\");\n+            process::exit(1);\n+        }\n+    };\n+    let bootstrap_host_compiler = {\n+        let cargo = rustc_info::get_cargo_path();\n+        let rustc = rustc_info::get_rustc_path();\n+        let rustdoc = rustc_info::get_rustdoc_path();\n+        let triple = std::env::var(\"HOST_TRIPLE\")\n             .ok()\n             .or_else(|| config::get_value(\"host\"))\n-            .unwrap_or_else(|| rustc_info::get_host_triple()),\n-    );\n+            .unwrap_or_else(|| rustc_info::get_host_triple(&rustc));\n+        Compiler {\n+            cargo,\n+            rustc,\n+            rustdoc,\n+            rustflags: String::new(),\n+            rustdocflags: String::new(),\n+            triple,\n+            runner: vec![],\n+        }\n+    };\n     let target_triple = std::env::var(\"TARGET_TRIPLE\")\n         .ok()\n         .or_else(|| config::get_value(\"target\"))\n         .unwrap_or_else(|| bootstrap_host_compiler.triple.clone());\n \n-    // FIXME allow changing the location of these dirs using cli arguments\n-    let current_dir = std::env::current_dir().unwrap();\n-    out_dir = current_dir.join(out_dir);\n     let dirs = path::Dirs {\n         source_dir: current_dir.clone(),\n-        download_dir: out_dir.join(\"download\"),\n+        download_dir: download_dir\n+            .map(|dir| current_dir.join(dir))\n+            .unwrap_or_else(|| out_dir.join(\"download\")),\n         build_dir: out_dir.join(\"build\"),\n         dist_dir: out_dir.join(\"dist\"),\n+        frozen,\n     };\n \n     path::RelPath::BUILD.ensure_exists(&dirs);\n@@ -133,20 +201,19 @@ pub(crate) fn main() {\n         std::fs::File::create(target).unwrap();\n     }\n \n-    if command == Command::Prepare {\n-        prepare::prepare(&dirs);\n-        process::exit(0);\n-    }\n-\n     env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n     env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n \n-    let cg_clif_dylib = build_backend::build_backend(\n-        &dirs,\n-        channel,\n-        &bootstrap_host_compiler,\n-        use_unstable_features,\n-    );\n+    let cg_clif_dylib = if let Some(name) = use_backend {\n+        CodegenBackend::Builtin(name)\n+    } else {\n+        CodegenBackend::Local(build_backend::build_backend(\n+            &dirs,\n+            channel,\n+            &bootstrap_host_compiler,\n+            use_unstable_features,\n+        ))\n+    };\n     match command {\n         Command::Prepare => {\n             // Handled above\n@@ -156,8 +223,11 @@ pub(crate) fn main() {\n                 &dirs,\n                 channel,\n                 sysroot_kind,\n+                use_unstable_features,\n+                &skip_tests.iter().map(|test| &**test).collect::<Vec<_>>(),\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple.clone(),\n             );\n         }\n@@ -166,7 +236,14 @@ pub(crate) fn main() {\n                 eprintln!(\"Abi-cafe doesn't support cross-compilation\");\n                 process::exit(1);\n             }\n-            abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &bootstrap_host_compiler);\n+            abi_cafe::run(\n+                channel,\n+                sysroot_kind,\n+                &dirs,\n+                &cg_clif_dylib,\n+                rustup_toolchain_name.as_deref(),\n+                &bootstrap_host_compiler,\n+            );\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n@@ -175,6 +252,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n         }\n@@ -185,6 +263,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n             bench::benchmark(&dirs, &bootstrap_host_compiler);", "previous_filename": "compiler/rustc_codegen_cranelift/build_system/mod.rs"}, {"sha": "4f86c0fd29d6a39204c4a325758954b01936e3e0", "filename": "compiler/rustc_codegen_cranelift/build_system/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fpath.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -9,6 +9,7 @@ pub(crate) struct Dirs {\n     pub(crate) download_dir: PathBuf,\n     pub(crate) build_dir: PathBuf,\n     pub(crate) dist_dir: PathBuf,\n+    pub(crate) frozen: bool,\n }\n \n #[doc(hidden)]"}, {"sha": "e31e39a483fe302c9de85485625bec0e38b0f8fc", "filename": "compiler/rustc_codegen_cranelift/build_system/prepare.rs", "status": "modified", "additions": 139, "deletions": 69, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -3,113 +3,168 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n+use super::build_sysroot::STDLIB_SRC;\n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_default_sysroot, get_rustc_version};\n-use super::tests::LIBCORE_TESTS_SRC;\n-use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n+use super::rustc_info::get_default_sysroot;\n+use super::utils::{\n+    copy_dir_recursively, git_command, remove_dir_if_exists, retry_spawn_and_wait, spawn_and_wait,\n+};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n-    RelPath::DOWNLOAD.ensure_fresh(dirs);\n-\n-    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", \"rustc\", dirs));\n-\n-    prepare_stdlib(dirs);\n-    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", \"rustc\", dirs));\n-\n-    prepare_coretests(dirs);\n-    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", \"rustc\", dirs));\n-\n+    RelPath::DOWNLOAD.ensure_exists(dirs);\n     super::tests::RAND_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::REGEX_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", \"rustc\", dirs));\n }\n \n-fn prepare_stdlib(dirs: &Dirs) {\n-    let sysroot_src_orig = get_default_sysroot(Path::new(\"rustc\")).join(\"lib/rustlib/src/rust\");\n+pub(crate) fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n+    let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n-    eprintln!(\"[COPY] stdlib src\");\n-\n-    // FIXME ensure builds error out or update the copy if any of the files copied here change\n-    BUILD_SYSROOT.ensure_fresh(dirs);\n-    copy_dir_recursively(&ORIG_BUILD_SYSROOT.to_path(dirs), &BUILD_SYSROOT.to_path(dirs));\n-\n-    fs::create_dir_all(SYSROOT_SRC.to_path(dirs).join(\"library\")).unwrap();\n-    copy_dir_recursively(\n-        &sysroot_src_orig.join(\"library\"),\n-        &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n-    );\n-\n-    let rustc_version = get_rustc_version(Path::new(\"rustc\"));\n-    fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n-\n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&SYSROOT_SRC.to_path(dirs));\n-\n-    apply_patches(dirs, \"stdlib\", &SYSROOT_SRC.to_path(dirs));\n-}\n-\n-fn prepare_coretests(dirs: &Dirs) {\n-    let sysroot_src_orig = get_default_sysroot(Path::new(\"rustc\")).join(\"lib/rustlib/src/rust\");\n-    assert!(sysroot_src_orig.exists());\n-\n-    eprintln!(\"[COPY] coretests src\");\n-\n-    fs::create_dir_all(LIBCORE_TESTS_SRC.to_path(dirs)).unwrap();\n-    copy_dir_recursively(\n-        &sysroot_src_orig.join(\"library/core/tests\"),\n-        &LIBCORE_TESTS_SRC.to_path(dirs),\n-    );\n-\n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&LIBCORE_TESTS_SRC.to_path(dirs));\n-\n-    apply_patches(dirs, \"coretests\", &LIBCORE_TESTS_SRC.to_path(dirs));\n+    apply_patches(dirs, \"stdlib\", &sysroot_src_orig, &STDLIB_SRC.to_path(dirs));\n+\n+    std::fs::write(\n+        STDLIB_SRC.to_path(dirs).join(\"Cargo.toml\"),\n+        r#\"\n+[workspace]\n+members = [\"./library/sysroot\"]\n+\n+[patch.crates-io]\n+rustc-std-workspace-core = { path = \"./library/rustc-std-workspace-core\" }\n+rustc-std-workspace-alloc = { path = \"./library/rustc-std-workspace-alloc\" }\n+rustc-std-workspace-std = { path = \"./library/rustc-std-workspace-std\" }\n+\n+# Mandatory for correctly compiling compiler-builtins\n+[profile.dev.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\n+[profile.release.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\"#,\n+    )\n+    .unwrap();\n+\n+    let source_lockfile = RelPath::PATCHES.to_path(dirs).join(\"stdlib-lock.toml\");\n+    let target_lockfile = STDLIB_SRC.to_path(dirs).join(\"Cargo.lock\");\n+    fs::copy(source_lockfile, target_lockfile).unwrap();\n }\n \n pub(crate) struct GitRepo {\n     url: GitRepoUrl,\n     rev: &'static str,\n+    content_hash: &'static str,\n     patch_name: &'static str,\n }\n \n enum GitRepoUrl {\n     Github { user: &'static str, repo: &'static str },\n }\n \n+// Note: This uses a hasher which is not cryptographically secure. This is fine as the hash is meant\n+// to protect against accidental modification and outdated downloads, not against manipulation.\n+fn hash_file(file: &std::path::Path) -> u64 {\n+    let contents = std::fs::read(file).unwrap();\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&contents, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n+fn hash_dir(dir: &std::path::Path) -> u64 {\n+    let mut sub_hashes = std::collections::BTreeMap::new();\n+    for entry in std::fs::read_dir(dir).unwrap() {\n+        let entry = entry.unwrap();\n+        if entry.file_type().unwrap().is_dir() {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_dir(&entry.path()));\n+        } else {\n+            sub_hashes\n+                .insert(entry.file_name().to_str().unwrap().to_owned(), hash_file(&entry.path()));\n+        }\n+    }\n+    #[allow(deprecated)]\n+    let mut hasher = std::hash::SipHasher::new();\n+    std::hash::Hash::hash(&sub_hashes, &mut hasher);\n+    std::hash::Hasher::finish(&hasher)\n+}\n+\n impl GitRepo {\n     pub(crate) const fn github(\n         user: &'static str,\n         repo: &'static str,\n         rev: &'static str,\n+        content_hash: &'static str,\n         patch_name: &'static str,\n     ) -> GitRepo {\n-        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n+        GitRepo { url: GitRepoUrl::Github { user, repo }, rev, content_hash, patch_name }\n+    }\n+\n+    fn download_dir(&self, dirs: &Dirs) -> PathBuf {\n+        match self.url {\n+            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo).to_path(dirs),\n+        }\n     }\n \n     pub(crate) const fn source_dir(&self) -> RelPath {\n         match self.url {\n-            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo),\n+            GitRepoUrl::Github { user: _, repo } => RelPath::BUILD.join(repo),\n         }\n     }\n \n     pub(crate) fn fetch(&self, dirs: &Dirs) {\n+        let download_dir = self.download_dir(dirs);\n+\n+        if download_dir.exists() {\n+            let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+            if actual_hash == self.content_hash {\n+                println!(\"[FRESH] {}\", download_dir.display());\n+                return;\n+            } else {\n+                println!(\n+                    \"Mismatched content hash for {download_dir}: {actual_hash} != {content_hash}. Downloading again.\",\n+                    download_dir = download_dir.display(),\n+                    content_hash = self.content_hash,\n+                );\n+            }\n+        }\n+\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n-                clone_repo_shallow_github(\n-                    dirs,\n-                    &self.source_dir().to_path(dirs),\n-                    user,\n-                    repo,\n-                    self.rev,\n-                );\n+                clone_repo_shallow_github(dirs, &download_dir, user, repo, self.rev);\n             }\n         }\n-        apply_patches(dirs, self.patch_name, &self.source_dir().to_path(dirs));\n+\n+        let source_lockfile =\n+            RelPath::PATCHES.to_path(dirs).join(format!(\"{}-lock.toml\", self.patch_name));\n+        let target_lockfile = download_dir.join(\"Cargo.lock\");\n+        if source_lockfile.exists() {\n+            fs::copy(source_lockfile, target_lockfile).unwrap();\n+        } else {\n+            assert!(target_lockfile.exists());\n+        }\n+\n+        let actual_hash = format!(\"{:016x}\", hash_dir(&download_dir));\n+        if actual_hash != self.content_hash {\n+            println!(\n+                \"Download of {download_dir} failed with mismatched content hash: {actual_hash} != {content_hash}\",\n+                download_dir = download_dir.display(),\n+                content_hash = self.content_hash,\n+            );\n+            std::process::exit(1);\n+        }\n+    }\n+\n+    pub(crate) fn patch(&self, dirs: &Dirs) {\n+        apply_patches(\n+            dirs,\n+            self.patch_name,\n+            &self.download_dir(dirs),\n+            &self.source_dir().to_path(dirs),\n+        );\n     }\n }\n \n@@ -126,6 +181,8 @@ fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     let mut checkout_cmd = git_command(download_dir, \"checkout\");\n     checkout_cmd.arg(\"-q\").arg(rev);\n     spawn_and_wait(checkout_cmd);\n+\n+    std::fs::remove_dir_all(download_dir.join(\".git\")).unwrap();\n }\n \n fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo: &str, rev: &str) {\n@@ -173,8 +230,6 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n     // Rename unpacked dir to the expected name\n     std::fs::rename(archive_dir, &download_dir).unwrap();\n \n-    init_git_repo(&download_dir);\n-\n     // Cleanup\n     std::fs::remove_file(archive_file).unwrap();\n }\n@@ -213,7 +268,22 @@ fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n     patches\n }\n \n-fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n+pub(crate) fn apply_patches(dirs: &Dirs, crate_name: &str, source_dir: &Path, target_dir: &Path) {\n+    // FIXME avoid copy and patch if src, patches and target are unchanged\n+\n+    eprintln!(\"[COPY] {crate_name} source\");\n+\n+    remove_dir_if_exists(target_dir);\n+    fs::create_dir_all(target_dir).unwrap();\n+    if crate_name == \"stdlib\" {\n+        fs::create_dir(target_dir.join(\"library\")).unwrap();\n+        copy_dir_recursively(&source_dir.join(\"library\"), &target_dir.join(\"library\"));\n+    } else {\n+        copy_dir_recursively(source_dir, target_dir);\n+    }\n+\n+    init_git_repo(target_dir);\n+\n     if crate_name == \"<none>\" {\n         return;\n     }"}, {"sha": "5b71504e90a4f122b22f212341930edee500cfd7", "filename": "compiler/rustc_codegen_cranelift/build_system/rustc_info.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,15 +1,9 @@\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-pub(crate) fn get_rustc_version(rustc: &Path) -> String {\n+pub(crate) fn get_host_triple(rustc: &Path) -> String {\n     let version_info =\n-        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n-    String::from_utf8(version_info).unwrap()\n-}\n-\n-pub(crate) fn get_host_triple() -> String {\n-    let version_info =\n-        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n+        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n     String::from_utf8(version_info)\n         .unwrap()\n         .lines()\n@@ -34,6 +28,9 @@ pub(crate) fn get_toolchain_name() -> String {\n }\n \n pub(crate) fn get_cargo_path() -> PathBuf {\n+    if let Ok(cargo) = std::env::var(\"CARGO\") {\n+        return PathBuf::from(cargo);\n+    }\n     let cargo_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"cargo\"])\n@@ -44,6 +41,9 @@ pub(crate) fn get_cargo_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustc_path() -> PathBuf {\n+    if let Ok(rustc) = std::env::var(\"RUSTC\") {\n+        return PathBuf::from(rustc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustc\"])\n@@ -54,6 +54,9 @@ pub(crate) fn get_rustc_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustdoc_path() -> PathBuf {\n+    if let Ok(rustdoc) = std::env::var(\"RUSTDOC\") {\n+        return PathBuf::from(rustdoc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustdoc\"])\n@@ -73,8 +76,9 @@ pub(crate) fn get_default_sysroot(rustc: &Path) -> PathBuf {\n     Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n }\n \n-pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n-    let file_name = Command::new(\"rustc\")\n+// FIXME call once for each target and pass result around in struct\n+pub(crate) fn get_file_name(rustc: &Path, crate_name: &str, crate_type: &str) -> String {\n+    let file_name = Command::new(rustc)\n         .stderr(Stdio::inherit())\n         .args(&[\n             \"--crate-name\","}, {"sha": "08d8f708c7da474e2b2bc987a1e0a6345dba8b8c", "filename": "compiler/rustc_codegen_cranelift/build_system/tests.rs", "status": "modified", "additions": 114, "deletions": 27, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,13 +1,14 @@\n use super::build_sysroot;\n use super::config;\n use super::path::{Dirs, RelPath};\n-use super::prepare::GitRepo;\n+use super::prepare::{apply_patches, GitRepo};\n+use super::rustc_info::get_default_sysroot;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n-use super::SysrootKind;\n+use super::{CodegenBackend, SysrootKind};\n use std::env;\n use std::ffi::OsStr;\n use std::fs;\n-use std::path::Path;\n+use std::path::PathBuf;\n use std::process::Command;\n \n static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n@@ -18,15 +19,15 @@ struct TestCase {\n }\n \n enum TestCaseCmd {\n-    Custom { func: &'static dyn Fn(&TestRunner) },\n+    Custom { func: &'static dyn Fn(&TestRunner<'_>) },\n     BuildLib { source: &'static str, crate_types: &'static str },\n     BuildBinAndRun { source: &'static str, args: &'static [&'static str] },\n     JitBin { source: &'static str, args: &'static str },\n }\n \n impl TestCase {\n     // FIXME reduce usage of custom test case commands\n-    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner<'_>)) -> Self {\n         Self { config, cmd: TestCaseCmd::Custom { func } }\n     }\n \n@@ -95,32 +96,45 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n \n // FIXME(rust-random/rand#1293): Newer rand versions fail to test on Windows. Update once this is\n // fixed.\n-pub(crate) static RAND_REPO: GitRepo =\n-    GitRepo::github(\"rust-random\", \"rand\", \"50b9a447410860af8d6db9a208c3576886955874\", \"rand\");\n+pub(crate) static RAND_REPO: GitRepo = GitRepo::github(\n+    \"rust-random\",\n+    \"rand\",\n+    \"50b9a447410860af8d6db9a208c3576886955874\",\n+    \"446203b96054891e\",\n+    \"rand\",\n+);\n \n-pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n+pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand_target\");\n \n-pub(crate) static REGEX_REPO: GitRepo =\n-    GitRepo::github(\"rust-lang\", \"regex\", \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\", \"regex\");\n+pub(crate) static REGEX_REPO: GitRepo = GitRepo::github(\n+    \"rust-lang\",\n+    \"regex\",\n+    \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\",\n+    \"fcc4df7c5b902633\",\n+    \"regex\",\n+);\n \n-pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n+pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex_target\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n     \"portable-simd\",\n     \"ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b\",\n+    \"800548f8000e31bd\",\n     \"portable-simd\",\n );\n \n pub(crate) static PORTABLE_SIMD: CargoProject =\n-    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n+    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable-simd_target\");\n \n-pub(crate) static LIBCORE_TESTS_SRC: RelPath = RelPath::DOWNLOAD.join(\"coretests_src\");\n+static LIBCORE_TESTS_SRC: RelPath = RelPath::BUILD.join(\"coretests\");\n \n-pub(crate) static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"core_tests\");\n+static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"coretests_target\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.rust-random/rand\", &|runner| {\n+        RAND_REPO.patch(&runner.dirs);\n+\n         RAND.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -135,6 +149,17 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n+        apply_patches(\n+            &runner.dirs,\n+            \"coretests\",\n+            &runner.stdlib_source.join(\"library/core/tests\"),\n+            &LIBCORE_TESTS_SRC.to_path(&runner.dirs),\n+        );\n+\n+        let source_lockfile = RelPath::PATCHES.to_path(&runner.dirs).join(\"coretests-lock.toml\");\n+        let target_lockfile = LIBCORE_TESTS_SRC.to_path(&runner.dirs).join(\"Cargo.lock\");\n+        fs::copy(source_lockfile, target_lockfile).unwrap();\n+\n         LIBCORE_TESTS.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -149,6 +174,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n+        REGEX_REPO.patch(&runner.dirs);\n+\n         REGEX.clean(&runner.dirs);\n \n         let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n@@ -181,6 +208,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex\", &|runner| {\n+        REGEX_REPO.patch(&runner.dirs);\n+\n         REGEX.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -197,6 +226,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.portable-simd\", &|runner| {\n+        PORTABLE_SIMD_REPO.patch(&runner.dirs);\n+\n         PORTABLE_SIMD.clean(&runner.dirs);\n \n         let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n@@ -215,24 +246,35 @@ pub(crate) fn run_tests(\n     dirs: &Dirs,\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    cg_clif_dylib: &Path,\n+    use_unstable_features: bool,\n+    skip_tests: &[&str],\n+    cg_clif_dylib: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) {\n-    if config::get_bool(\"testsuite.no_sysroot\") {\n+    let stdlib_source =\n+        get_default_sysroot(&bootstrap_host_compiler.rustc).join(\"lib/rustlib/src/rust\");\n+    assert!(stdlib_source.exists());\n+\n+    if config::get_bool(\"testsuite.no_sysroot\") && !skip_tests.contains(&\"testsuite.no_sysroot\") {\n         let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n \n         let runner = TestRunner::new(\n             dirs.clone(),\n             target_compiler,\n+            use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source.clone(),\n         );\n \n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n@@ -241,23 +283,32 @@ pub(crate) fn run_tests(\n         eprintln!(\"[SKIP] no_sysroot tests\");\n     }\n \n-    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\");\n-    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n+    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.base_sysroot\");\n+    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.extended_sysroot\");\n \n     if run_base_sysroot || run_extended_sysroot {\n-        let target_compiler = build_sysroot::build_sysroot(\n+        let mut target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n+        // Rust's build system denies a couple of lints that trigger on several of the test\n+        // projects. Changing the code to fix them is not worth it, so just silence all lints.\n+        target_compiler.rustflags += \" --cap-lints=allow\";\n \n         let runner = TestRunner::new(\n             dirs.clone(),\n             target_compiler,\n+            use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source,\n         );\n \n         if run_base_sysroot {\n@@ -274,15 +325,25 @@ pub(crate) fn run_tests(\n     }\n }\n \n-struct TestRunner {\n+struct TestRunner<'a> {\n     is_native: bool,\n     jit_supported: bool,\n+    use_unstable_features: bool,\n+    skip_tests: &'a [&'a str],\n     dirs: Dirs,\n     target_compiler: Compiler,\n+    stdlib_source: PathBuf,\n }\n \n-impl TestRunner {\n-    fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n+impl<'a> TestRunner<'a> {\n+    fn new(\n+        dirs: Dirs,\n+        mut target_compiler: Compiler,\n+        use_unstable_features: bool,\n+        skip_tests: &'a [&'a str],\n+        is_native: bool,\n+        stdlib_source: PathBuf,\n+    ) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n             target_compiler.rustflags.push_str(&rustflags);\n@@ -297,11 +358,20 @@ impl TestRunner {\n             target_compiler.rustflags.push_str(\" -Clink-arg=-undefined -Clink-arg=dynamic_lookup\");\n         }\n \n-        let jit_supported = is_native\n+        let jit_supported = use_unstable_features\n+            && is_native\n             && target_compiler.triple.contains(\"x86_64\")\n             && !target_compiler.triple.contains(\"windows\");\n \n-        Self { is_native, jit_supported, dirs, target_compiler }\n+        Self {\n+            is_native,\n+            jit_supported,\n+            use_unstable_features,\n+            skip_tests,\n+            dirs,\n+            target_compiler,\n+            stdlib_source,\n+        }\n     }\n \n     fn run_testsuite(&self, tests: &[TestCase]) {\n@@ -310,7 +380,10 @@ impl TestRunner {\n             let tag = tag.to_uppercase();\n             let is_jit_test = tag == \"JIT\";\n \n-            if !config::get_bool(config) || (is_jit_test && !self.jit_supported) {\n+            if !config::get_bool(config)\n+                || (is_jit_test && !self.jit_supported)\n+                || self.skip_tests.contains(&config)\n+            {\n                 eprintln!(\"[{tag}] {testname} (skipped)\");\n                 continue;\n             } else {\n@@ -320,10 +393,24 @@ impl TestRunner {\n             match *cmd {\n                 TestCaseCmd::Custom { func } => func(self),\n                 TestCaseCmd::BuildLib { source, crate_types } => {\n-                    self.run_rustc([source, \"--crate-type\", crate_types]);\n+                    if self.use_unstable_features {\n+                        self.run_rustc([source, \"--crate-type\", crate_types]);\n+                    } else {\n+                        self.run_rustc([\n+                            source,\n+                            \"--crate-type\",\n+                            crate_types,\n+                            \"--cfg\",\n+                            \"no_unstable_features\",\n+                        ]);\n+                    }\n                 }\n                 TestCaseCmd::BuildBinAndRun { source, args } => {\n-                    self.run_rustc([source]);\n+                    if self.use_unstable_features {\n+                        self.run_rustc([source]);\n+                    } else {\n+                        self.run_rustc([source, \"--cfg\", \"no_unstable_features\"]);\n+                    }\n                     self.run_out_command(\n                         source.split('/').last().unwrap().split('.').next().unwrap(),\n                         args,"}, {"sha": "6d3b3a13d6e755a2966581b5835091a2005da307", "filename": "compiler/rustc_codegen_cranelift/build_system/usage.txt", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fusage.txt?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,11 +1,11 @@\n The build system of cg_clif.\n \n USAGE:\n-    ./y.rs prepare [--out-dir DIR]\n-    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.sh prepare [--out-dir DIR] [--download-dir DIR]\n+    ./y.sh build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen] [--skip-test TESTNAME]\n+    ./y.sh abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n \n OPTIONS:\n     --debug\n@@ -22,14 +22,28 @@ OPTIONS:\n             Specify the directory in which the download, build and dist directories are stored.\n             By default this is the working directory.\n \n+    --download-dir DIR\n+            Specify the directory in which the download directory is stored. Overrides --out-dir.\n+\n     --no-unstable-features\n             Some features are not yet ready for production usage. This option will disable these\n             features. This includes the JIT mode and inline assembly support.\n \n+    --frozen\n+            Require Cargo.lock and cache are up to date\n+\n+    --skip-test TESTNAME\n+            Skip testing the TESTNAME test. The test name format is the same as config.txt.\n+\n+    --use-backend NAME\n+            Use the existing Cranelift (or other) backend of the rustc with which we built.\n+            Warning: This is meant for use in rust's CI only!\n+\n REQUIREMENTS:\n-    * Rustup: The build system has a hard coded dependency on rustup to install the right nightly\n-      version and make sure it is used where necessary.\n-    * Git: `./y.rs prepare` uses git for applying patches and on Windows for downloading test repos.\n-    * Curl and tar (non-Windows only): Used by `./y.rs prepare` to download a single commit for\n+    * Rustup: By default rustup is used to install the right nightly version. If you don't want to\n+      use rustup, you can manually install the nightly version indicated by rust-toolchain.toml and\n+      point the CARGO, RUSTC and RUSTDOC env vars to the right executables.\n+    * Git: `./y.sh prepare` uses git for applying patches and on Windows for downloading test repos.\n+    * Curl and tar (non-Windows only): Used by `./y.sh prepare` to download a single commit for\n       repos. Git will be used to clone the whole repo when using Windows.\n-    * [Hyperfine](https://github.com/sharkdp/hyperfine/): Used for benchmarking with `./y.rs bench`.\n+    * [Hyperfine](https://github.com/sharkdp/hyperfine/): Used for benchmarking with `./y.sh bench`."}, {"sha": "41fc366e2903c103b34e0766a32975ca6810a0bf", "filename": "compiler/rustc_codegen_cranelift/build_system/utils.rs", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -5,7 +5,6 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n@@ -19,18 +18,6 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn bootstrap_with_triple(triple: String) -> Compiler {\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: get_rustc_path(),\n-            rustdoc: get_rustdoc_path(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple,\n-            runner: vec![],\n-        }\n-    }\n-\n     pub(crate) fn set_cross_linker_and_runner(&mut self) {\n         match self.triple.as_str() {\n             \"aarch64-unknown-linux-gnu\" => {\n@@ -95,7 +82,11 @@ impl CargoProject {\n             .arg(self.manifest_path(dirs))\n             .arg(\"--target-dir\")\n             .arg(self.target_dir(dirs))\n-            .arg(\"--frozen\");\n+            .arg(\"--locked\");\n+\n+        if dirs.frozen {\n+            cmd.arg(\"--frozen\");\n+        }\n \n         cmd\n     }\n@@ -120,23 +111,6 @@ impl CargoProject {\n         cmd\n     }\n \n-    #[must_use]\n-    pub(crate) fn fetch(\n-        &self,\n-        cargo: impl AsRef<Path>,\n-        rustc: impl AsRef<Path>,\n-        dirs: &Dirs,\n-    ) -> Command {\n-        let mut cmd = Command::new(cargo.as_ref());\n-\n-        cmd.env(\"RUSTC\", rustc.as_ref())\n-            .arg(\"fetch\")\n-            .arg(\"--manifest-path\")\n-            .arg(self.manifest_path(dirs));\n-\n-        cmd\n-    }\n-\n     pub(crate) fn clean(&self, dirs: &Dirs) {\n         let _ = fs::remove_dir_all(self.target_dir(dirs));\n     }\n@@ -162,8 +136,7 @@ pub(crate) fn hyperfine_command(\n     warmup: u64,\n     runs: u64,\n     prepare: Option<&str>,\n-    a: &str,\n-    b: &str,\n+    cmds: &[&str],\n ) -> Command {\n     let mut bench = Command::new(\"hyperfine\");\n \n@@ -179,7 +152,7 @@ pub(crate) fn hyperfine_command(\n         bench.arg(\"--prepare\").arg(prepare);\n     }\n \n-    bench.arg(a).arg(b);\n+    bench.args(cmds);\n \n     bench\n }\n@@ -285,3 +258,13 @@ pub(crate) fn is_ci() -> bool {\n pub(crate) fn is_ci_opt() -> bool {\n     env::var(\"CI_OPT\").is_ok()\n }\n+\n+pub(crate) fn maybe_incremental(cmd: &mut Command) {\n+    if is_ci() || std::env::var(\"CARGO_BUILD_INCREMENTAL\").map_or(false, |val| val == \"false\") {\n+        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n+    } else {\n+        // Force incr comp even in release mode unless in CI or incremental builds are explicitly disabled\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\");\n+    }\n+}"}, {"sha": "19405a53d1c65ce1423eb44c7243ea5b88d25a6b", "filename": "compiler/rustc_codegen_cranelift/clean_all.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fclean_all.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env bash\n set -e\n \n-rm -rf target/ download/ build/ dist/ y.bin y.bin.dSYM y.exe y.pdb\n+rm -rf target/ build_system/target download/ build/ dist/ y.bin y.bin.dSYM y.exe y.pdb\n \n # Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n # FIXME remove at some point in the future"}, {"sha": "c6210f958d6c12fc92838e27bd818046be38fa35", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -2,7 +2,7 @@\n \n rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n \n-Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.rs prepare` and `y.rs build` or `test.sh`).\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`y.sh prepare` and `y.sh build` or `test.sh`).\n \n ## Cargo\n "}, {"sha": "117eed5afd8ab09f9258841b7c81a1c95bfd70a3", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler)]\n+#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]\n #![no_std]\n \n extern crate alloc;\n@@ -27,6 +27,11 @@ fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n     core::intrinsics::abort();\n }\n \n+#[lang = \"eh_personality\"]\n+fn eh_personality() -> ! {\n+    loop {}\n+}\n+\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "772dd98fade2be2ccbd96a3facb9d428f9242ee6", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -502,6 +502,9 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     drop_in_place(to_drop);\n }\n \n+#[lang = \"unpin\"]\n+pub auto trait Unpin {}\n+\n #[lang = \"deref\"]\n pub trait Deref {\n     type Target: ?Sized;\n@@ -526,7 +529,7 @@ impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsiz\n impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n #[lang = \"owned_box\"]\n-pub struct Box<T: ?Sized>(Unique<T>, ());\n+pub struct Box<T: ?Sized, A = ()>(Unique<T>, A);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n@@ -541,7 +544,7 @@ impl<T> Box<T> {\n     }\n }\n \n-impl<T: ?Sized> Drop for Box<T> {\n+impl<T: ?Sized, A> Drop for Box<T, A> {\n     fn drop(&mut self) {\n         // drop is currently performed by compiler.\n     }"}, {"sha": "d97fab9eb4227befa65fb1415db373c449ff6cd6", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -322,7 +322,12 @@ fn main() {\n     #[cfg(all(not(jit), not(all(windows, target_env = \"gnu\"))))]\n     test_tls();\n \n-    #[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n+    #[cfg(all(\n+        not(jit),\n+        not(no_unstable_features),\n+        target_arch = \"x86_64\",\n+        any(target_os = \"linux\", target_os = \"macos\")\n+    ))]\n     unsafe {\n         global_asm_test();\n     }\n@@ -350,12 +355,17 @@ fn main() {\n     let _a = f.0[0];\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n+#[cfg(all(\n+    not(jit),\n+    not(no_unstable_features),\n+    target_arch = \"x86_64\",\n+    any(target_os = \"linux\", target_os = \"macos\")\n+))]\n extern \"C\" {\n     fn global_asm_test();\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n+#[cfg(all(not(jit), not(no_unstable_features), target_arch = \"x86_64\", target_os = \"linux\"))]\n global_asm! {\n     \"\n     .global global_asm_test\n@@ -365,7 +375,7 @@ global_asm! {\n     \"\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"darwin\"))]\n+#[cfg(all(not(jit), not(no_unstable_features), target_arch = \"x86_64\", target_os = \"macos\"))]\n global_asm! {\n     \"\n     .global _global_asm_test"}, {"sha": "1bf0ff64c92492226f38426dac9604713e7eb0eb", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -197,6 +197,10 @@ unsafe fn test_simd() {\n \n     test_mm_extract_epi8();\n     test_mm_insert_epi16();\n+    test_mm_shuffle_epi8();\n+\n+    test_mm256_shuffle_epi8();\n+    test_mm256_permute2x128_si256();\n \n     #[rustfmt::skip]\n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n@@ -293,6 +297,12 @@ pub unsafe fn assert_eq_m128d(a: __m128d, b: __m128d) {\n     }\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"avx\")]\n+pub unsafe fn assert_eq_m256i(a: __m256i, b: __m256i) {\n+    assert_eq!(std::mem::transmute::<_, [u64; 4]>(a), std::mem::transmute::<_, [u64; 4]>(b))\n+}\n+\n #[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_cvtsi128_si64() {\n@@ -336,6 +346,64 @@ unsafe fn test_mm_insert_epi16() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"ssse3\")]\n+unsafe fn test_mm_shuffle_epi8() {\n+    #[rustfmt::skip]\n+        let a = _mm_setr_epi8(\n+            1, 2, 3, 4, 5, 6, 7, 8,\n+            9, 10, 11, 12, 13, 14, 15, 16,\n+        );\n+    #[rustfmt::skip]\n+        let b = _mm_setr_epi8(\n+            4, 128_u8 as i8, 4, 3,\n+            24, 12, 6, 19,\n+            12, 5, 5, 10,\n+            4, 1, 8, 0,\n+        );\n+    let expected = _mm_setr_epi8(5, 0, 5, 4, 9, 13, 7, 4, 13, 6, 6, 11, 5, 2, 9, 1);\n+    let r = _mm_shuffle_epi8(a, b);\n+    assert_eq_m128i(r, expected);\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"avx2\")]\n+unsafe fn test_mm256_shuffle_epi8() {\n+    #[rustfmt::skip]\n+    let a = _mm256_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8,\n+        9, 10, 11, 12, 13, 14, 15, 16,\n+        17, 18, 19, 20, 21, 22, 23, 24,\n+        25, 26, 27, 28, 29, 30, 31, 32,\n+    );\n+    #[rustfmt::skip]\n+    let b = _mm256_setr_epi8(\n+        4, 128u8 as i8, 4, 3, 24, 12, 6, 19,\n+        12, 5, 5, 10, 4, 1, 8, 0,\n+        4, 128u8 as i8, 4, 3, 24, 12, 6, 19,\n+        12, 5, 5, 10, 4, 1, 8, 0,\n+    );\n+    #[rustfmt::skip]\n+    let expected = _mm256_setr_epi8(\n+        5, 0, 5, 4, 9, 13, 7, 4,\n+        13, 6, 6, 11, 5, 2, 9, 1,\n+        21, 0, 21, 20, 25, 29, 23, 20,\n+        29, 22, 22, 27, 21, 18, 25, 17,\n+    );\n+    let r = _mm256_shuffle_epi8(a, b);\n+    assert_eq_m256i(r, expected);\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+#[target_feature(enable = \"avx2\")]\n+unsafe fn test_mm256_permute2x128_si256() {\n+    let a = _mm256_setr_epi64x(100, 200, 500, 600);\n+    let b = _mm256_setr_epi64x(300, 400, 700, 800);\n+    let r = _mm256_permute2x128_si256::<0b00_01_00_11>(a, b);\n+    let e = _mm256_setr_epi64x(700, 800, 500, 600);\n+    assert_eq_m256i(r, e);\n+}\n+\n fn test_checked_mul() {\n     let u: Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n     assert_eq!(u, None);"}, {"sha": "af8f28a193bcde6ef875701d8d9c1c9227751679", "filename": "compiler/rustc_codegen_cranelift/patches/coretests-lock.toml", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fcoretests-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fcoretests-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fcoretests-lock.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,35 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"coretests\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rand\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\n+dependencies = [\n+ \"rand_core\",\n+]"}, {"sha": "e7db1fd2c7fb6dc7d5867973d4a80e6d69eac1ca", "filename": "compiler/rustc_codegen_cranelift/patches/portable-simd-lock.toml", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fportable-simd-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fportable-simd-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fportable-simd-lock.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,304 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n+\n+[[package]]\n+name = \"bumpalo\"\n+version = \"3.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a3e2c3daef883ecc1b5d58c15adae93470a91d425f3532ba1695849656af3fc1\"\n+\n+[[package]]\n+name = \"byteorder\"\n+version = \"1.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"console_error_panic_hook\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen\",\n+]\n+\n+[[package]]\n+name = \"core_simd\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proptest\",\n+ \"std_float\",\n+ \"test_helpers\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-test\",\n+]\n+\n+[[package]]\n+name = \"js-sys\"\n+version = \"0.3.63\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2f37a4a5928311ac501dee68b3c7613a1037d0edb30c8e5427bd832d55d1b790\"\n+dependencies = [\n+ \"wasm-bindgen\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de\"\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.17.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9670a07f94779e00908f3e686eab508878ebb390ba6e604d3a284c00e8d0487b\"\n+\n+[[package]]\n+name = \"ppv-lite86\"\n+version = \"0.2.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"proptest\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"12e6c80c1139113c28ee4670dc50cc42915228b51f56a9e407f0ec60f966646f\"\n+dependencies = [\n+ \"bitflags\",\n+ \"byteorder\",\n+ \"num-traits\",\n+ \"rand\",\n+ \"rand_chacha\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.7.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n+dependencies = [\n+ \"rand_chacha\",\n+ \"rand_core\",\n+ \"rand_hc\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\n+dependencies = [\n+ \"ppv-lite86\",\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n+\n+[[package]]\n+name = \"rand_hc\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"77d416b86801d23dde1aa643023b775c3a462efc0ed96443add11546cdf1dca8\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"scoped-tls\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n+\n+[[package]]\n+name = \"std_float\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"core_simd\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"test_helpers\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"proptest\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasm-bindgen\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5bba0e8cb82ba49ff4e229459ff22a191bbe9a1cb3a341610c9c33efc27ddf73\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-backend\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19b04bc93f9d6bdee709f6bd2118f57dd6679cf1176a1af464fca3ab0d66d8fb\"\n+dependencies = [\n+ \"bumpalo\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-futures\"\n+version = \"0.4.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2d1985d03709c53167ce907ff394f5316aa22cb4e12761295c5dc57dacb6297e\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+ \"web-sys\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14d6b024f1a526bb0234f52840389927257beb670610081360e5a03c5df9c258\"\n+dependencies = [\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro-support\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e128beba882dd1eb6200e1dc92ae6c5dbaa4311aa7bb211ca035779e5efc39f8\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-shared\"\n+version = \"0.2.86\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ed9d5b4305409d1fc9482fee2d7f9bcbf24b3972bf59817ef757e23982242a93\"\n+\n+[[package]]\n+name = \"wasm-bindgen-test\"\n+version = \"0.3.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9e636f3a428ff62b3742ebc3c70e254dfe12b8c2b469d688ea59cdd4abcf502\"\n+dependencies = [\n+ \"console_error_panic_hook\",\n+ \"js-sys\",\n+ \"scoped-tls\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-futures\",\n+ \"wasm-bindgen-test-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-test-macro\"\n+version = \"0.3.36\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f18c1fad2f7c4958e7bcce014fa212f59a65d5e3721d0f77e6c0b27ede936ba3\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+]\n+\n+[[package]]\n+name = \"web-sys\"\n+version = \"0.3.63\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bdd9ef4e984da1187bf8110c5cf5b845fbc87a23602cdf912386a76fcd3a7c2\"\n+dependencies = [\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+]"}, {"sha": "66c515731c5e32e051f753dd3127098cbaf61a35", "filename": "compiler/rustc_codegen_cranelift/patches/rand-lock.toml", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Frand-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Frand-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2Frand-lock.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,346 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"average\"\n+version = \"0.13.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"843ec791d3f24503bbf72bbd5e49a3ab4dbb4bcd0a8ef6b0c908efa73caa27b1\"\n+dependencies = [\n+ \"easy-cast\",\n+ \"float-ord\",\n+ \"num-traits\",\n+]\n+\n+[[package]]\n+name = \"bincode\"\n+version = \"1.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"crossbeam-channel\"\n+version = \"0.5.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-deque\"\n+version = \"0.8.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-epoch\"\n+version = \"0.9.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46bd5f3f85273295a9d14aedfb86f6aadbff6d8f5295c4a9edb08e819dcf5695\"\n+dependencies = [\n+ \"autocfg\",\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+ \"memoffset\",\n+ \"scopeguard\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-utils\"\n+version = \"0.8.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n+[[package]]\n+name = \"easy-cast\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bd102ee8c418348759919b83b81cdbdc933ffe29740b903df448b4bafaa348e\"\n+dependencies = [\n+ \"libm\",\n+]\n+\n+[[package]]\n+name = \"either\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\n+\n+[[package]]\n+name = \"float-ord\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ce81f49ae8a0482e4c55ea62ebbd7e5a686af544c00b9d090bba3ff9be97b3d\"\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi\",\n+]\n+\n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"itoa\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.144\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1\"\n+\n+[[package]]\n+name = \"libm\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7012b1bbb0719e1097c47611d3898568c546d597c2e74d66f6087edd5233ff4\"\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de\"\n+\n+[[package]]\n+name = \"memoffset\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\n+dependencies = [\n+ \"autocfg\",\n+ \"libm\",\n+]\n+\n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"ppv-lite86\"\n+version = \"0.2.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.9.0\"\n+dependencies = [\n+ \"bincode\",\n+ \"libc\",\n+ \"log\",\n+ \"rand_chacha\",\n+ \"rand_core\",\n+ \"rand_pcg\",\n+ \"rayon\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"ppv-lite86\",\n+ \"rand_core\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.7.0\"\n+dependencies = [\n+ \"getrandom\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rand_distr\"\n+version = \"0.5.0\"\n+dependencies = [\n+ \"average\",\n+ \"num-traits\",\n+ \"rand\",\n+ \"rand_pcg\",\n+ \"serde\",\n+ \"special\",\n+]\n+\n+[[package]]\n+name = \"rand_pcg\"\n+version = \"0.4.0\"\n+dependencies = [\n+ \"bincode\",\n+ \"rand_core\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"rayon\"\n+version = \"1.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b\"\n+dependencies = [\n+ \"either\",\n+ \"rayon-core\",\n+]\n+\n+[[package]]\n+name = \"rayon-core\"\n+version = \"1.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d\"\n+dependencies = [\n+ \"crossbeam-channel\",\n+ \"crossbeam-deque\",\n+ \"crossbeam-utils\",\n+ \"num_cpus\",\n+]\n+\n+[[package]]\n+name = \"ryu\"\n+version = \"1.0.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n+\n+[[package]]\n+name = \"scopeguard\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n+\n+[[package]]\n+name = \"serde\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2\"\n+dependencies = [\n+ \"serde_derive\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"1.0.96\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\n+dependencies = [\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"special\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24a65e074159b75dcf173a4733ab2188baac24967b5c8ec9ed87ae15fcbc7636\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\""}, {"sha": "0e4a33b90ea1fdf15a2eae1fb101455a1368d10d", "filename": "compiler/rustc_codegen_cranelift/patches/regex-lock.toml", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fregex-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fregex-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fregex-lock.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,439 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.7.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n+\n+[[package]]\n+name = \"bzip2\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n+dependencies = [\n+ \"bzip2-sys\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"bzip2-sys\"\n+version = \"0.1.11+1.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+]\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.79\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"docopt\"\n+version = \"1.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7f3f119846c823f9eafcf953a8f6ffb6ed69bf6240883261a7f13b634579a51f\"\n+dependencies = [\n+ \"lazy_static\",\n+ \"regex 1.8.3\",\n+ \"serde\",\n+ \"strsim\",\n+]\n+\n+[[package]]\n+name = \"filetime\"\n+version = \"0.2.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"windows-sys\",\n+]\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"wasi\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.144\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1\"\n+\n+[[package]]\n+name = \"libpcre-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0ff3dd28ba96d6fe6752882f2f1b25ba8e1646448e79042442347cf3a92a6666\"\n+dependencies = [\n+ \"bzip2\",\n+ \"libc\",\n+ \"pkg-config\",\n+ \"tar\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n+\n+[[package]]\n+name = \"memmap\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"onig\"\n+version = \"3.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f5eeb268a4620c74ea5768c6d2ccd492d60a47a8754666b91a46bfc35cd4d1ba\"\n+dependencies = [\n+ \"bitflags\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"onig_sys\",\n+]\n+\n+[[package]]\n+name = \"onig_sys\"\n+version = \"68.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"195ebddbb56740be48042ca117b8fb6e0d99fe392191a9362d82f5f69e510379\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+]\n+\n+[[package]]\n+name = \"pkg-config\"\n+version = \"0.3.27\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.59\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quickcheck\"\n+version = \"1.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6\"\n+dependencies = [\n+ \"rand\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+dependencies = [\n+ \"getrandom\",\n+]\n+\n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.2.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\n+dependencies = [\n+ \"bitflags\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.7.2\"\n+dependencies = [\n+ \"aho-corasick\",\n+ \"lazy_static\",\n+ \"memchr\",\n+ \"quickcheck\",\n+ \"rand\",\n+ \"regex-syntax 0.6.29\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.8.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"81ca098a9821bd52d6b24fd8b10bd081f47d39c22778cafaa75a2857a62c6390\"\n+dependencies = [\n+ \"regex-syntax 0.7.2\",\n+]\n+\n+[[package]]\n+name = \"regex-benchmark\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cc\",\n+ \"cfg-if 0.1.10\",\n+ \"docopt\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"libpcre-sys\",\n+ \"memmap\",\n+ \"onig\",\n+ \"pkg-config\",\n+ \"regex 1.7.2\",\n+ \"regex-syntax 0.6.29\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"regex-debug\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"docopt\",\n+ \"regex 1.7.2\",\n+ \"regex-syntax 0.6.29\",\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.6.29\"\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"436b050e76ed2903236f032a59761c1eb99e1b0aead2c257922771dab1fc8c78\"\n+\n+[[package]]\n+name = \"rure\"\n+version = \"0.2.2\"\n+dependencies = [\n+ \"libc\",\n+ \"regex 1.7.2\",\n+]\n+\n+[[package]]\n+name = \"serde\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2\"\n+dependencies = [\n+ \"serde_derive\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.163\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"strsim\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"tar\"\n+version = \"0.4.38\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"\n+dependencies = [\n+ \"filetime\",\n+ \"libc\",\n+ \"xattr\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\n+dependencies = [\n+ \"windows-targets\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm\",\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_gnullvm\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n+\n+[[package]]\n+name = \"xattr\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d1526bbe5aaeb5eb06885f4d987bcdfa5e23187055de9b83fe00156a821fabc\"\n+dependencies = [\n+ \"libc\",\n+]"}, {"sha": "1dde9e54d7ee0b1a128d451078d5a744cca78691", "filename": "compiler/rustc_codegen_cranelift/patches/stdlib-lock.toml", "status": "renamed", "additions": 110, "deletions": 12, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fstdlib-lock.toml", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fstdlib-lock.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2Fstdlib-lock.toml?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -30,8 +30,26 @@ version = \"0.0.0\"\n dependencies = [\n  \"compiler_builtins\",\n  \"core\",\n+ \"rand\",\n+ \"rand_xorshift\",\n ]\n \n+[[package]]\n+name = \"auxv\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e50430f9beb8effb02399fa81c76eeaa26b05e4f03b09285cad8d079c1af5a3d\"\n+dependencies = [\n+ \"byteorder\",\n+ \"gcc\",\n+]\n+\n+[[package]]\n+name = \"byteorder\"\n+version = \"1.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.79\"\n@@ -50,16 +68,31 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.91\"\n+version = \"0.1.93\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"571298a3cce7e2afbd3d61abb91a18667d5ab25993ec577a88ee8ac45f00cc3a\"\n+checksum = \"76630810d973ecea3dbf611e1b7aecfb1012751ef1ff8de3998f89014a166781\"\n dependencies = [\n+ \"cc\",\n  \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rand\",\n+ \"rand_xorshift\",\n+]\n+\n+[[package]]\n+name = \"cupid\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8bad352a84b567cc38a5854e3aa8ee903cb8519a25d0b799b739bafffd1f91a1\"\n+dependencies = [\n+ \"gcc\",\n+ \"rustc_version\",\n+]\n \n [[package]]\n name = \"dlmalloc\"\n@@ -82,6 +115,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"gcc\"\n+version = \"0.3.55\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n+\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -106,9 +145,9 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.12.3\"\n+version = \"0.13.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n+checksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n@@ -128,9 +167,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.142\"\n+version = \"0.2.146\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a987beff54b60ffa6d51982e1aa1146bc42f19bd26be28b0586f252fccf5317\"\n+checksum = \"f92be4933c13fd498862a9e02a3055f8a8d9c039ce33db97306fd5a6caa7f29b\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -159,9 +198,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.30.3\"\n+version = \"0.30.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\n+checksum = \"03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385\"\n dependencies = [\n  \"compiler_builtins\",\n  \"memchr\",\n@@ -200,6 +239,39 @@ dependencies = [\n  \"std\",\n ]\n \n+[[package]]\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"cc\",\n+ \"compiler_builtins\",\n+ \"core\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n+\n+[[package]]\n+name = \"rand_xorshift\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\n+dependencies = [\n+ \"rand_core\",\n+]\n+\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.23\"\n@@ -231,6 +303,30 @@ dependencies = [\n  \"std\",\n ]\n \n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+dependencies = [\n+ \"semver\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n+dependencies = [\n+ \"semver-parser\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\n [[package]]\n name = \"std\"\n version = \"0.0.0\"\n@@ -249,6 +345,9 @@ dependencies = [\n  \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n+ \"profiler_builtins\",\n+ \"rand\",\n+ \"rand_xorshift\",\n  \"rustc-demangle\",\n  \"std_detect\",\n  \"unwind\",\n@@ -259,8 +358,10 @@ dependencies = [\n name = \"std_detect\"\n version = \"0.1.5\"\n dependencies = [\n+ \"auxv\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n+ \"cupid\",\n  \"libc\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n@@ -270,9 +371,7 @@ dependencies = [\n name = \"sysroot\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc\",\n- \"compiler_builtins\",\n- \"core\",\n+ \"proc_macro\",\n  \"std\",\n  \"test\",\n ]\n@@ -285,7 +384,6 @@ dependencies = [\n  \"getopts\",\n  \"panic_abort\",\n  \"panic_unwind\",\n- \"proc_macro\",\n  \"std\",\n ]\n ", "previous_filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock"}, {"sha": "fa3a10b9adc6f62ef4d5ed133eb9402a27f52fbd", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-04-29\"\n-components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]\n+channel = \"nightly-2023-06-15\"\n+components = [\"rust-src\", \"rustc-dev\", \"llvm-tools\"]"}, {"sha": "99b97be24e69b23f957ef001d439ebbea830d889", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo-clif.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -12,24 +12,33 @@ fn main() {\n \n     let mut rustflags = String::new();\n     rustflags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n-    rustflags.push_str(\n-        sysroot\n-            .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n-            .join(\n-                env::consts::DLL_PREFIX.to_string()\n-                    + \"rustc_codegen_cranelift\"\n-                    + env::consts::DLL_SUFFIX,\n-            )\n-            .to_str()\n-            .unwrap(),\n-    );\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        rustflags.push_str(name);\n+    } else {\n+        rustflags.push_str(\n+            sysroot\n+                .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n+                .join(\n+                    env::consts::DLL_PREFIX.to_string()\n+                        + \"rustc_codegen_cranelift\"\n+                        + env::consts::DLL_SUFFIX,\n+                )\n+                .to_str()\n+                .unwrap(),\n+        );\n+    }\n     rustflags.push_str(\" --sysroot \");\n     rustflags.push_str(sysroot.to_str().unwrap());\n     env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);\n     env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let cargo = if let Some(cargo) = option_env!(\"CARGO\") {\n+        cargo\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"cargo\"\n+    };\n \n     let args: Vec<_> = match env::args().nth(1).as_deref() {\n         Some(\"jit\") => {\n@@ -64,10 +73,10 @@ fn main() {\n     };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn cargo: {}\", Command::new(\"cargo\").args(args).exec());\n+    panic!(\"Failed to spawn cargo: {}\", Command::new(cargo).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"cargo\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(cargo).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "33d51bdddeaf9abb998d482a7d399915ece0e7e8", "filename": "compiler/rustc_codegen_cranelift/scripts/rustc-clif.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -19,23 +19,34 @@ fn main() {\n     let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n-    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n-    codegen_backend_arg.push(cg_clif_dylib_path);\n-    args.push(codegen_backend_arg);\n-    if !passed_args.contains(&OsString::from(\"--sysroot\")) {\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        args.push(OsString::from(format!(\"-Zcodegen-backend={name}\")))\n+    } else {\n+        let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+        codegen_backend_arg.push(cg_clif_dylib_path);\n+        args.push(codegen_backend_arg);\n+    }\n+    if !passed_args.iter().any(|arg| {\n+        arg == \"--sysroot\" || arg.to_str().map(|s| s.starts_with(\"--sysroot=\")) == Some(true)\n+    }) {\n         args.push(OsString::from(\"--sysroot\"));\n         args.push(OsString::from(sysroot.to_str().unwrap()));\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustc = if let Some(rustc) = option_env!(\"RUSTC\") {\n+        rustc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustc: {}\", Command::new(\"rustc\").args(args).exec());\n+    panic!(\"Failed to spawn rustc: {}\", Command::new(rustc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "10582cc7bb32070bf3d7bc065147255cbeff3736", "filename": "compiler/rustc_codegen_cranelift/scripts/rustdoc-clif.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -19,23 +19,34 @@ fn main() {\n     let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n-    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n-    codegen_backend_arg.push(cg_clif_dylib_path);\n-    args.push(codegen_backend_arg);\n-    if !passed_args.contains(&OsString::from(\"--sysroot\")) {\n+    if let Some(name) = option_env!(\"BUILTIN_BACKEND\") {\n+        args.push(OsString::from(format!(\"-Zcodegen-backend={name}\")))\n+    } else {\n+        let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+        codegen_backend_arg.push(cg_clif_dylib_path);\n+        args.push(codegen_backend_arg);\n+    }\n+    if !passed_args.iter().any(|arg| {\n+        arg == \"--sysroot\" || arg.to_str().map(|s| s.starts_with(\"--sysroot=\")) == Some(true)\n+    }) {\n         args.push(OsString::from(\"--sysroot\"));\n         args.push(OsString::from(sysroot.to_str().unwrap()));\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustdoc = if let Some(rustdoc) = option_env!(\"RUSTDOC\") {\n+        rustdoc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustdoc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustdoc: {}\", Command::new(\"rustdoc\").args(args).exec());\n+    panic!(\"Failed to spawn rustdoc: {}\", Command::new(rustdoc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustdoc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustdoc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "e62788f2e507dfe2430d7a6941a7b380a5107277", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -32,12 +32,10 @@ case $1 in\n \n         ./clean_all.sh\n \n-        ./y.rs prepare\n-\n-        (cd download/sysroot && cargo update && cargo fetch && cp Cargo.lock ../../build_sysroot/)\n+        ./y.sh prepare\n         ;;\n     \"commit\")\n-        git add rust-toolchain build_sysroot/Cargo.lock\n+        git add rust-toolchain\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n     \"push\")"}, {"sha": "15b16b42be5b97f8d0e1b9b68babf71609fb3ec1", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env bash\n set -e\n \n-./y.rs build --no-unstable-features\n+./y.sh build --no-unstable-features\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true"}, {"sha": "a7920cc54ea1f95102d54d724a950e0cbdcf06a3", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -10,12 +10,17 @@ pushd rust\n \n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n-# FIXME add needs-asm-support to all tests in tests/ui/asm\n rm -r tests/ui/{unsized-locals/,lto/,linkage*} || true\n-for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" tests/{codegen-units,ui,incremental}); do\n+for test in $(rg --files-with-matches \"lto|// needs-asm-support\" tests/{codegen-units,ui,incremental}); do\n   rm $test\n done\n \n+for test in tests/run-make/**/Makefile; do\n+  if rg \"# needs-asm-support\" $test >/dev/null; then\n+    rm -r $(dirname $test)\n+  fi\n+done\n+\n for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" tests/ui); do\n   rm $test\n done\n@@ -28,30 +33,20 @@ rm tests/ui/parser/unclosed-delimiter-in-dep.rs # submodule contains //~ERROR\n # ================\n \n # requires stack unwinding\n-# FIXME add needs-unwind to these tests\n-rm tests/incremental/change_crate_dep_kind.rs\n-rm tests/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n-rm -r tests/run-make/c-unwind-abi-catch-lib-panic\n-rm -r tests/run-make/c-unwind-abi-catch-panic\n-rm -r tests/run-make/debug-assertions\n-rm -r tests/run-make/foreign-double-unwind\n-rm -r tests/run-make/foreign-exceptions\n-rm -r tests/run-make/foreign-rust-exceptions\n-rm -r tests/run-make/libtest-json\n-rm -r tests/run-make/static-unwinding\n-\n-# requires compiling with -Cpanic=unwind\n-rm -r tests/ui/macros/rfc-2011-nicer-assert-messages/\n-rm -r tests/run-make/test-benches\n-rm tests/ui/test-attrs/test-type.rs\n-rm -r tests/run-make/const_fn_mir\n-rm -r tests/run-make/intrinsic-unreachable\n+# FIXME add needs-unwind to this test\n+rm -r tests/run-make/libtest-junit\n+\n+# extra warning about -Cpanic=abort for proc macros\n+rm tests/ui/proc-macro/crt-static.rs\n+rm tests/ui/proc-macro/proc-macro-deprecated-attr.rs\n+rm tests/ui/proc-macro/quote-debug.rs\n+rm tests/ui/proc-macro/no-missing-docs.rs\n+rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs\n+rm tests/ui/proc-macro/allowed-signatures.rs\n \n # vendor intrinsics\n rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n-rm tests/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n rm tests/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n-rm tests/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n \n # exotic linkages\n rm tests/ui/issues/issue-33992.rs # unsupported linkages\n@@ -85,6 +80,7 @@ rm -r tests/run-make/issue-64153\n rm -r tests/run-make/codegen-options-parsing\n rm -r tests/run-make/lto-*\n rm -r tests/run-make/reproducible-build-2\n+rm -r tests/run-make/issue-109934-lto-debuginfo\n \n # optimization tests\n # ==================\n@@ -120,13 +116,8 @@ rm tests/ui/lint/lint-const-item-mutation.rs # same\n rm tests/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs # same\n rm tests/ui/suggestions/derive-trait-for-method-call.rs # same\n rm tests/ui/typeck/issue-46112.rs # same\n-\n-rm tests/ui/proc-macro/crt-static.rs # extra warning about -Cpanic=abort for proc macros\n-rm tests/ui/proc-macro/proc-macro-deprecated-attr.rs # same\n-rm tests/ui/proc-macro/quote-debug.rs # same\n-rm tests/ui/proc-macro/no-missing-docs.rs # same\n-rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs # same\n-rm tests/ui/proc-macro/allowed-signatures.rs # same\n+rm tests/ui/consts/const_cmp_type_id.rs # same\n+rm tests/ui/consts/issue-73976-monomorphic.rs # same\n \n # rustdoc-clif passes extra args, suppressing the help message when no args are passed\n rm -r tests/run-make/issue-88756-default-output\n@@ -142,15 +133,15 @@ rm -r tests/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to b\n rm tests/incremental/spike-neg1.rs # errors out for some reason\n rm tests/incremental/spike-neg2.rs # same\n \n-rm tests/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n-\n-rm tests/ui/simd/simd-bitmask.rs # crash\n+rm tests/ui/simd/simd-bitmask.rs # simd_bitmask doesn't implement [u*; N] return type\n \n rm -r tests/run-make/issue-51671 # wrong filename given in case of --emit=obj\n rm -r tests/run-make/issue-30063 # same\n rm -r tests/run-make/multiple-emits # same\n rm -r tests/run-make/output-type-permutations # same\n rm -r tests/run-make/used # same\n+rm -r tests/run-make/no-alloc-shim\n+rm -r tests/run-make/emit-to-stdout\n \n # bugs in the test suite\n # ======================"}, {"sha": "e92280b26b0534c671edec99266d29cd1f514a3a", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -89,16 +89,16 @@ fn codegen_inner(\n     );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n-    let mut data_ctx = DataContext::new();\n-    data_ctx.set_align(1);\n+    let mut data = DataDescription::new();\n+    data.set_align(1);\n     let val = oom_strategy.should_panic();\n-    data_ctx.define(Box::new([val]));\n-    module.define_data(data_id, &data_ctx).unwrap();\n+    data.define(Box::new([val]));\n+    module.define_data(data_id, &data).unwrap();\n \n     let data_id =\n         module.declare_data(NO_ALLOC_SHIM_IS_UNSTABLE, Linkage::Export, false, false).unwrap();\n-    let mut data_ctx = DataContext::new();\n-    data_ctx.set_align(1);\n-    data_ctx.define(Box::new([0]));\n-    module.define_data(data_id, &data_ctx).unwrap();\n+    let mut data = DataDescription::new();\n+    data.set_align(1);\n+    data.define(Box::new([0]));\n+    module.define_data(data_id, &data).unwrap();\n }"}, {"sha": "5abb4644e1b097c1cc3d1dc80e9b114f4c41c5fa", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -156,6 +156,7 @@ pub(crate) fn compile_fn(\n             write!(clif, \" {}\", isa_flag).unwrap();\n         }\n         writeln!(clif, \"\\n\").unwrap();\n+        writeln!(clif, \"; symbol {}\", codegened_func.symbol_name).unwrap();\n         crate::PrintOnPanic(move || {\n             let mut clif = clif.clone();\n             ::cranelift_codegen::write::decorate_function("}, {"sha": "a694bb26afb95cfc7b1807cfbce7cfc73e4d9dab", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -455,12 +455,12 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n     }\n \n     pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {\n-        let mut data_ctx = DataContext::new();\n-        data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n+        let mut data = DataDescription::new();\n+        data.define(msg.as_bytes().to_vec().into_boxed_slice());\n         let msg_id = self.module.declare_anonymous_data(false, false).unwrap();\n \n         // Ignore DuplicateDefinition error, as the data will be the same\n-        let _ = self.module.define_data(msg_id, &data_ctx);\n+        let _ = self.module.define_data(msg_id, &data);\n \n         let local_msg_id = self.module.declare_data_in_func(msg_id, self.bcx.func);\n         if self.clif_comments.enabled() {"}, {"sha": "9e92d656c76efeb99fbc45ee8355acc70c81606c", "filename": "compiler/rustc_codegen_cranelift/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -82,6 +82,11 @@ impl BackendConfig {\n \n         let mut config = BackendConfig::default();\n         for opt in opts {\n+            if opt.starts_with(\"-import-instr-limit\") {\n+                // Silently ignore -import-instr-limit. It is set by rust's build system even when\n+                // testing cg_clif.\n+                continue;\n+            }\n             if let Some((name, value)) = opt.split_once('=') {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,"}, {"sha": "427340c333e5ae690dbb9a5bbfcae4d787ae5fe8", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -324,12 +324,12 @@ fn data_id_for_static(\n \n         let ref_name = format!(\"_rust_extern_with_linkage_{}\", symbol_name);\n         let ref_data_id = module.declare_data(&ref_name, Linkage::Local, false, false).unwrap();\n-        let mut data_ctx = DataContext::new();\n-        data_ctx.set_align(align);\n-        let data = module.declare_data_in_data(data_id, &mut data_ctx);\n-        data_ctx.define(std::iter::repeat(0).take(pointer_ty(tcx).bytes() as usize).collect());\n-        data_ctx.write_data_addr(0, data, 0);\n-        match module.define_data(ref_data_id, &data_ctx) {\n+        let mut data = DataDescription::new();\n+        data.set_align(align);\n+        let data_gv = module.declare_data_in_data(data_id, &mut data);\n+        data.define(std::iter::repeat(0).take(pointer_ty(tcx).bytes() as usize).collect());\n+        data.write_data_addr(0, data_gv, 0);\n+        match module.define_data(ref_data_id, &data) {\n             // Every time the static is referenced there will be another definition of this global,\n             // so duplicate definitions are expected and allowed.\n             Err(ModuleError::DuplicateDefinition(_)) => {}\n@@ -394,9 +394,9 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n             continue;\n         }\n \n-        let mut data_ctx = DataContext::new();\n+        let mut data = DataDescription::new();\n         let alloc = alloc.inner();\n-        data_ctx.set_align(alloc.align.bytes());\n+        data.set_align(alloc.align.bytes());\n \n         if let Some(section_name) = section_name {\n             let (segment_name, section_name) = if tcx.sess.target.is_like_osx {\n@@ -412,11 +412,11 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n             } else {\n                 (\"\", section_name.as_str())\n             };\n-            data_ctx.set_segment_section(segment_name, section_name);\n+            data.set_segment_section(segment_name, section_name);\n         }\n \n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n-        data_ctx.define(bytes.into_boxed_slice());\n+        data.define(bytes.into_boxed_slice());\n \n         for &(offset, alloc_id) in alloc.provenance().ptrs().iter() {\n             let addend = {\n@@ -435,8 +435,8 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     assert_eq!(addend, 0);\n                     let func_id =\n                         crate::abi::import_function(tcx, module, instance.polymorphize(tcx));\n-                    let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n-                    data_ctx.write_function_addr(offset.bytes() as u32, local_func_id);\n+                    let local_func_id = module.declare_func_in_data(func_id, &mut data);\n+                    data.write_function_addr(offset.bytes() as u32, local_func_id);\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n@@ -462,11 +462,11 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 }\n             };\n \n-            let global_value = module.declare_data_in_data(data_id, &mut data_ctx);\n-            data_ctx.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n+            let global_value = module.declare_data_in_data(data_id, &mut data);\n+            data.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n         }\n \n-        module.define_data(data_id, &data_ctx).unwrap();\n+        module.define_data(data_id, &data).unwrap();\n         cx.done.insert(data_id);\n     }\n "}, {"sha": "41e24acefbea6e0fd5ffd4fa3cde4dd9e1104bf9", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -4,7 +4,7 @@\n use std::cell::RefCell;\n use std::ffi::CString;\n use std::os::raw::{c_char, c_int};\n-use std::sync::{mpsc, Mutex};\n+use std::sync::{mpsc, Mutex, OnceLock};\n \n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n@@ -13,9 +13,6 @@ use rustc_span::Symbol;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n-// FIXME use std::sync::OnceLock once it stabilizes\n-use once_cell::sync::OnceCell;\n-\n use crate::{prelude::*, BackendConfig};\n use crate::{CodegenCx, CodegenMode};\n \n@@ -29,7 +26,7 @@ thread_local! {\n }\n \n /// The Sender owned by the rustc thread\n-static GLOBAL_MESSAGE_SENDER: OnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> = OnceCell::new();\n+static GLOBAL_MESSAGE_SENDER: OnceLock<Mutex<mpsc::Sender<UnsafeMessage>>> = OnceLock::new();\n \n /// A message that is sent from the jitted runtime to the rustc thread.\n /// Senders are responsible for upholding `Send` semantics.\n@@ -325,7 +322,7 @@ fn dep_symbol_lookup_fn(\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n                 let name = crate_info.crate_name[&cnum];\n-                let mut err = sess.struct_err(&format!(\"Can't load static lib {}\", name));\n+                let mut err = sess.struct_err(format!(\"Can't load static lib {}\", name));\n                 err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n                 err.emit();\n             }"}, {"sha": "bbd5f4be78331ab64a8d3dfddbef726cb7f2ce81", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 197, "deletions": 1, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -19,7 +19,10 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n         }\n \n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n-        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+        \"llvm.x86.sse2.pmovmskb.128\"\n+        | \"llvm.x86.avx2.pmovmskb\"\n+        | \"llvm.x86.sse.movmsk.ps\"\n+        | \"llvm.x86.sse2.movmsk.pd\" => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n@@ -101,6 +104,23 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n             });\n         }\n         \"llvm.x86.sse2.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.pslli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.sse2.psrli.w\" => {\n             let (a, imm8) = match args {\n                 [a, imm8] => (a, imm8),\n                 _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n@@ -109,6 +129,57 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n                 .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n \n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 16 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.sse2.pslli.w\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.pslli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 16 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.avx.psrli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.avx.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.avx.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.avx.pslli.d imm8 not const\");\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n                 .try_to_bits(Size::from_bytes(4))\n                 .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n@@ -117,6 +188,131 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n                 _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n         }\n+        \"llvm.x86.avx2.psrli.w\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.avx.psrli.w imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 16 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.avx2.pslli.w\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.avx.pslli.w imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 16 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        \"llvm.x86.ssse3.pshuf.b.128\" | \"llvm.x86.avx2.pshuf.b\" => {\n+            let (a, b) = match args {\n+                [a, b] => (a, b),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let b = codegen_operand(fx, b);\n+\n+            // Based on the pseudocode at https://github.com/rust-lang/stdarch/blob/1cfbca8b38fd9b4282b2f054f61c6ca69fc7ce29/crates/core_arch/src/x86/avx2.rs#L2319-L2332\n+            let zero = fx.bcx.ins().iconst(types::I8, 0);\n+            for i in 0..16 {\n+                let b_lane = b.value_lane(fx, i).load_scalar(fx);\n+                let is_zero = fx.bcx.ins().band_imm(b_lane, 0x80);\n+                let a_idx = fx.bcx.ins().band_imm(b_lane, 0xf);\n+                let a_idx = fx.bcx.ins().uextend(fx.pointer_type, a_idx);\n+                let a_lane = a.value_lane_dyn(fx, a_idx).load_scalar(fx);\n+                let res = fx.bcx.ins().select(is_zero, zero, a_lane);\n+                ret.place_lane(fx, i).to_ptr().store(fx, res, MemFlags::trusted());\n+            }\n+\n+            if intrinsic == \"llvm.x86.avx2.pshuf.b\" {\n+                for i in 16..32 {\n+                    let b_lane = b.value_lane(fx, i).load_scalar(fx);\n+                    let is_zero = fx.bcx.ins().band_imm(b_lane, 0x80);\n+                    let b_lane_masked = fx.bcx.ins().band_imm(b_lane, 0xf);\n+                    let a_idx = fx.bcx.ins().iadd_imm(b_lane_masked, 16);\n+                    let a_idx = fx.bcx.ins().uextend(fx.pointer_type, a_idx);\n+                    let a_lane = a.value_lane_dyn(fx, a_idx).load_scalar(fx);\n+                    let res = fx.bcx.ins().select(is_zero, zero, a_lane);\n+                    ret.place_lane(fx, i).to_ptr().store(fx, res, MemFlags::trusted());\n+                }\n+            }\n+        }\n+        \"llvm.x86.avx2.vperm2i128\" => {\n+            // https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=_mm256_permute2x128_si256\n+            let (a, b, imm8) = match args {\n+                [a, b, imm8] => (a, b, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let b = codegen_operand(fx, b);\n+            let imm8 = codegen_operand(fx, imm8).load_scalar(fx);\n+\n+            let a_0 = a.value_lane(fx, 0).load_scalar(fx);\n+            let a_1 = a.value_lane(fx, 1).load_scalar(fx);\n+            let a_low = fx.bcx.ins().iconcat(a_0, a_1);\n+            let a_2 = a.value_lane(fx, 2).load_scalar(fx);\n+            let a_3 = a.value_lane(fx, 3).load_scalar(fx);\n+            let a_high = fx.bcx.ins().iconcat(a_2, a_3);\n+\n+            let b_0 = b.value_lane(fx, 0).load_scalar(fx);\n+            let b_1 = b.value_lane(fx, 1).load_scalar(fx);\n+            let b_low = fx.bcx.ins().iconcat(b_0, b_1);\n+            let b_2 = b.value_lane(fx, 2).load_scalar(fx);\n+            let b_3 = b.value_lane(fx, 3).load_scalar(fx);\n+            let b_high = fx.bcx.ins().iconcat(b_2, b_3);\n+\n+            fn select4(\n+                fx: &mut FunctionCx<'_, '_, '_>,\n+                a_high: Value,\n+                a_low: Value,\n+                b_high: Value,\n+                b_low: Value,\n+                control: Value,\n+            ) -> Value {\n+                let a_or_b = fx.bcx.ins().band_imm(control, 0b0010);\n+                let high_or_low = fx.bcx.ins().band_imm(control, 0b0001);\n+                let is_zero = fx.bcx.ins().band_imm(control, 0b1000);\n+\n+                let zero = fx.bcx.ins().iconst(types::I64, 0);\n+                let zero = fx.bcx.ins().iconcat(zero, zero);\n+\n+                let res_a = fx.bcx.ins().select(high_or_low, a_high, a_low);\n+                let res_b = fx.bcx.ins().select(high_or_low, b_high, b_low);\n+                let res = fx.bcx.ins().select(a_or_b, res_b, res_a);\n+                fx.bcx.ins().select(is_zero, zero, res)\n+            }\n+\n+            let control0 = imm8;\n+            let res_low = select4(fx, a_high, a_low, b_high, b_low, control0);\n+            let (res_0, res_1) = fx.bcx.ins().isplit(res_low);\n+\n+            let control1 = fx.bcx.ins().ushr_imm(imm8, 4);\n+            let res_high = select4(fx, a_high, a_low, b_high, b_low, control1);\n+            let (res_2, res_3) = fx.bcx.ins().isplit(res_high);\n+\n+            ret.place_lane(fx, 0).to_ptr().store(fx, res_0, MemFlags::trusted());\n+            ret.place_lane(fx, 1).to_ptr().store(fx, res_1, MemFlags::trusted());\n+            ret.place_lane(fx, 2).to_ptr().store(fx, res_2, MemFlags::trusted());\n+            ret.place_lane(fx, 3).to_ptr().store(fx, res_3, MemFlags::trusted());\n+        }\n         \"llvm.x86.sse2.storeu.dq\" => {\n             intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n             let mem_addr = mem_addr.load_scalar(fx);"}, {"sha": "6741362e8b6c6ebcc112698365820d8b11cabd62", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 126, "deletions": 12, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -434,8 +434,36 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_round => {\n-            intrinsic_args!(fx, args => (a); intrinsic);\n+        sym::simd_fpow => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n+            simd_pair_for_each_lane(fx, a, b, ret, &|fx, lane_ty, _ret_lane_ty, a_lane, b_lane| {\n+                match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => fx.lib_call(\n+                        \"powf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[a_lane, b_lane],\n+                    )[0],\n+                    ty::Float(FloatTy::F64) => fx.lib_call(\n+                        \"pow\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[a_lane, b_lane],\n+                    )[0],\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                }\n+            });\n+        }\n+\n+        sym::simd_fpowi => {\n+            intrinsic_args!(fx, args => (a, exp); intrinsic);\n+            let exp = exp.load_scalar(fx);\n \n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n@@ -448,22 +476,71 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 ret,\n                 &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n-                        \"roundf\",\n+                        \"__powisf2\", // compiler-builtins\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::I32)],\n                         vec![AbiParam::new(types::F32)],\n-                        vec![AbiParam::new(types::F32)],\n-                        &[lane],\n+                        &[lane, exp],\n                     )[0],\n                     ty::Float(FloatTy::F64) => fx.lib_call(\n-                        \"round\",\n-                        vec![AbiParam::new(types::F64)],\n+                        \"__powidf2\", // compiler-builtins\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::I32)],\n                         vec![AbiParam::new(types::F64)],\n-                        &[lane],\n+                        &[lane, exp],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 },\n             );\n         }\n \n+        sym::simd_fsin\n+        | sym::simd_fcos\n+        | sym::simd_fexp\n+        | sym::simd_fexp2\n+        | sym::simd_flog\n+        | sym::simd_flog10\n+        | sym::simd_flog2\n+        | sym::simd_round => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n+                let lane_ty = match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => types::F32,\n+                    ty::Float(FloatTy::F64) => types::F64,\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                };\n+                let name = match (intrinsic, lane_ty) {\n+                    (sym::simd_fsin, types::F32) => \"sinf\",\n+                    (sym::simd_fsin, types::F64) => \"sin\",\n+                    (sym::simd_fcos, types::F32) => \"cosf\",\n+                    (sym::simd_fcos, types::F64) => \"cos\",\n+                    (sym::simd_fexp, types::F32) => \"expf\",\n+                    (sym::simd_fexp, types::F64) => \"exp\",\n+                    (sym::simd_fexp2, types::F32) => \"exp2f\",\n+                    (sym::simd_fexp2, types::F64) => \"exp2\",\n+                    (sym::simd_flog, types::F32) => \"logf\",\n+                    (sym::simd_flog, types::F64) => \"log\",\n+                    (sym::simd_flog10, types::F32) => \"log10f\",\n+                    (sym::simd_flog10, types::F64) => \"log10\",\n+                    (sym::simd_flog2, types::F32) => \"log2f\",\n+                    (sym::simd_flog2, types::F64) => \"log2\",\n+                    (sym::simd_round, types::F32) => \"roundf\",\n+                    (sym::simd_round, types::F64) => \"round\",\n+                    _ => unreachable!(\"{:?}\", intrinsic),\n+                };\n+                fx.lib_call(\n+                    name,\n+                    vec![AbiParam::new(lane_ty)],\n+                    vec![AbiParam::new(lane_ty)],\n+                    &[lane],\n+                )[0]\n+            });\n+        }\n+\n         sym::simd_fabs | sym::simd_fsqrt | sym::simd_ceil | sym::simd_floor | sym::simd_trunc => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n@@ -488,7 +565,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_add_ordered | sym::simd_reduce_add_unordered => {\n+        sym::simd_reduce_add_ordered => {\n             intrinsic_args!(fx, args => (v, acc); intrinsic);\n             let acc = acc.load_scalar(fx);\n \n@@ -507,7 +584,25 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_mul_ordered | sym::simd_reduce_mul_unordered => {\n+        sym::simd_reduce_add_unordered => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            // FIXME there must be no acc param for integer vectors\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n+            simd_reduce(fx, v, None, ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n+                    fx.bcx.ins().fadd(a, b)\n+                } else {\n+                    fx.bcx.ins().iadd(a, b)\n+                }\n+            });\n+        }\n+\n+        sym::simd_reduce_mul_ordered => {\n             intrinsic_args!(fx, args => (v, acc); intrinsic);\n             let acc = acc.load_scalar(fx);\n \n@@ -526,6 +621,24 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n+        sym::simd_reduce_mul_unordered => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            // FIXME there must be no acc param for integer vectors\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n+            simd_reduce(fx, v, None, ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n+                    fx.bcx.ins().fmul(a, b)\n+                } else {\n+                    fx.bcx.ins().imul(a, b)\n+                }\n+            });\n+        }\n+\n         sym::simd_reduce_all => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n@@ -581,7 +694,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n         }\n \n-        sym::simd_reduce_min => {\n+        sym::simd_reduce_min | sym::simd_reduce_min_nanless => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n             if !v.layout().ty.is_simd() {\n@@ -600,7 +713,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_max => {\n+        sym::simd_reduce_max | sym::simd_reduce_max_nanless => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n             if !v.layout().ty.is_simd() {\n@@ -878,6 +991,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             fx.tcx.sess.span_err(span, format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n             // Prevent verifier error\n             fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n+            return;\n         }\n     }\n     let ret_block = fx.get_block(target);"}, {"sha": "0de2dccda71f0a26821e3e49440b3af3e51db6d5", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -102,7 +102,7 @@ mod prelude {\n     pub(crate) use cranelift_codegen::isa::{self, CallConv};\n     pub(crate) use cranelift_codegen::Context;\n     pub(crate) use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n-    pub(crate) use cranelift_module::{self, DataContext, FuncId, Linkage, Module};\n+    pub(crate) use cranelift_module::{self, DataDescription, FuncId, Linkage, Module};\n \n     pub(crate) use crate::abi::*;\n     pub(crate) use crate::base::{codegen_operand, codegen_place};"}, {"sha": "2fb0c2164c3096f299b9a991031224e8c87e4664", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -30,5 +30,9 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n /// Trap code: user65535\n pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<str>) {\n     codegen_print(fx, msg.as_ref());\n+\n+    let one = fx.bcx.ins().iconst(types::I32, 1);\n+    fx.lib_call(\"exit\", vec![AbiParam::new(types::I32)], vec![], &[one]);\n+\n     fx.bcx.ins().trap(TrapCode::User(!0));\n }"}, {"sha": "133c989b6864303d50949240c3f424197ed8df8c", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -258,6 +258,27 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n+    /// Like [`CValue::value_lane`] except allowing a dynamically calculated lane index.\n+    pub(crate) fn value_lane_dyn(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        lane_idx: Value,\n+    ) -> CValue<'tcx> {\n+        let layout = self.1;\n+        assert!(layout.ty.is_simd());\n+        let (_lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+        let lane_layout = fx.layout_of(lane_ty);\n+        match self.0 {\n+            CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => unreachable!(),\n+            CValueInner::ByRef(ptr, None) => {\n+                let field_offset = fx.bcx.ins().imul_imm(lane_idx, lane_layout.size.bytes() as i64);\n+                let field_ptr = ptr.offset_value(fx, field_offset);\n+                CValue::by_ref(field_ptr, lane_layout)\n+            }\n+            CValueInner::ByRef(_, Some(_)) => unreachable!(),\n+        }\n+    }\n+\n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}, {"sha": "6357eebf026966e8083fff945e11dd6f13262b76", "filename": "compiler/rustc_codegen_cranelift/test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Ftest.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Ftest.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,2 +1,2 @@\n #!/usr/bin/env bash\n-exec ./y.rs test \"$@\"\n+exec ./y.sh test \"$@\""}, {"sha": "e806a64d943448d9b4695b37ea56f36c2b11c514", "filename": "compiler/rustc_codegen_cranelift/y.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fy.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -1,35 +1,6 @@\n #!/usr/bin/env bash\n #![deny(unsafe_code)] /*This line is ignored by bash\n # This block is ignored by rustc\n-set -e\n-echo \"[BUILD] y.rs\" 1>&2\n-rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021\n-exec ${0/.rs/.bin} $@\n+echo \"Warning: y.rs is a deprecated alias for y.sh\" 1>&2\n+exec ./y.sh \"$@\"\n */\n-\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-//! The build system for cg_clif\n-//!\n-//! # Manual compilation\n-//!\n-//! If your system doesn't support shell scripts you can manually compile and run this file using\n-//! for example:\n-//!\n-//! ```shell\n-//! $ rustc y.rs -o y.bin\n-//! $ ./y.bin\n-//! ```\n-//!\n-//! # Naming\n-//!\n-//! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n-\n-#[path = \"build_system/mod.rs\"]\n-mod build_system;\n-\n-fn main() {\n-    build_system::main();\n-}"}, {"sha": "bc925a23e2a88d866aa931d7147b57f5f7eca922", "filename": "compiler/rustc_codegen_cranelift/y.sh", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/compiler%2Frustc_codegen_cranelift%2Fy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fy.sh?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -0,0 +1,6 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+echo \"[BUILD] build system\" 1>&2\n+rustc build_system/main.rs -o y.bin -Cdebuginfo=1 --edition 2021\n+exec ./y.bin \"$@\""}, {"sha": "0bc50c64133391414a6f983d42d94bd094735def", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/114fb86ca08cfa6a99087e0f0bc264d03590dc37/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114fb86ca08cfa6a99087e0f0bc264d03590dc37/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=114fb86ca08cfa6a99087e0f0bc264d03590dc37", "patch": "@@ -79,6 +79,7 @@ const EXCEPTIONS_CRANELIFT: &[(&str, &str)] = &[\n     (\"cranelift-codegen\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-codegen-meta\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-codegen-shared\", \"Apache-2.0 WITH LLVM-exception\"),\n+    (\"cranelift-control\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-entity\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-frontend\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-isle\", \"Apache-2.0 WITH LLVM-exception\"),\n@@ -309,15 +310,16 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     // tidy-alphabetical-start\n     \"ahash\",\n     \"anyhow\",\n+    \"arbitrary\",\n     \"autocfg\",\n     \"bitflags\",\n     \"bumpalo\",\n-    \"byteorder\",\n     \"cfg-if\",\n     \"cranelift-bforest\",\n     \"cranelift-codegen\",\n     \"cranelift-codegen-meta\",\n     \"cranelift-codegen-shared\",\n+    \"cranelift-control\",\n     \"cranelift-entity\",\n     \"cranelift-frontend\",\n     \"cranelift-isle\",\n@@ -327,7 +329,6 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"cranelift-object\",\n     \"crc32fast\",\n     \"fallible-iterator\",\n-    \"fxhash\",\n     \"gimli\",\n     \"hashbrown\",\n     \"indexmap\",\n@@ -337,9 +338,9 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"mach\",\n     \"memchr\",\n     \"object\",\n-    \"once_cell\",\n     \"regalloc2\",\n     \"region\",\n+    \"rustc-hash\",\n     \"slice-group-by\",\n     \"smallvec\",\n     \"stable_deref_trait\",\n@@ -350,6 +351,14 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-x86_64-pc-windows-gnu\",\n     \"windows-sys\",\n+    \"windows-targets\",\n+    \"windows_aarch64_gnullvm\",\n+    \"windows_aarch64_msvc\",\n+    \"windows_i686_gnu\",\n+    \"windows_i686_msvc\",\n+    \"windows_x86_64_gnu\",\n+    \"windows_x86_64_gnullvm\",\n+    \"windows_x86_64_msvc\",\n     // tidy-alphabetical-end\n ];\n "}]}