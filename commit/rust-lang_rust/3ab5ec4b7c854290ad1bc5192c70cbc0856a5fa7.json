{"sha": "3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjVlYzRiN2M4NTQyOTBhZDFiYzUxOTJjNzBjYmMwODU2YTVmYTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-24T05:21:32Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-24T05:35:15Z"}, "message": "iterator: implement `collect` with FromIterator\n\nThis makes it take advantage of the size hint for pre-allocation.", "tree": {"sha": "bd554d39b65fb6deda79a06a17ad258b189c91b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd554d39b65fb6deda79a06a17ad258b189c91b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "html_url": "https://github.com/rust-lang/rust/commit/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8779be39e1a6e064d75cc32ad3610fad9a4fa9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8779be39e1a6e064d75cc32ad3610fad9a4fa9a6", "html_url": "https://github.com/rust-lang/rust/commit/8779be39e1a6e064d75cc32ad3610fad9a4fa9a6"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "d96191f296d77e9e088df36898b5d381ddf8bdaf", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "patch": "@@ -20,7 +20,7 @@ implementing the `Iterator` trait.\n #[allow(default_methods)]; // solid enough for the use case here\n \n use cmp;\n-use iter::{FromIter, Times};\n+use iter::Times;\n use num::{Zero, One};\n use option::{Option, Some, None};\n use ops::{Add, Mul};\n@@ -240,7 +240,7 @@ pub trait IteratorUtil<A> {\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n \n     /// Loops through the entire iterator, collecting all of the elements into\n-    /// a container implementing `FromIter`.\n+    /// a container implementing `FromIterator`.\n     ///\n     /// # Example\n     ///\n@@ -249,7 +249,7 @@ pub trait IteratorUtil<A> {\n     /// let b: ~[int] = a.iter().transform(|&x| x).collect();\n     /// assert!(a == b);\n     /// ~~~\n-    fn collect<B: FromIter<A>>(&mut self) -> B;\n+    fn collect<B: FromIterator<A, Self>>(&mut self) -> B;\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n     /// iterator.\n@@ -411,8 +411,8 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline]\n-    fn collect<B: FromIter<A>>(&mut self) -> B {\n-        FromIter::from_iter::<A, B>(|f| self.advance(f))\n+    fn collect<B: FromIterator<A, T>>(&mut self) -> B {\n+        FromIterator::from_iterator(self)\n     }\n \n     /// Return the `n`th item yielded by an iterator."}, {"sha": "dd3c23d1084ecfa6c92c7c75e81848bfc4e007c1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3ab5ec4b7c854290ad1bc5192c70cbc0856a5fa7", "patch": "@@ -2500,6 +2500,17 @@ impl<T> FromIter<T> for ~[T]{\n     }\n }\n \n+#[cfg(stage0)]\n+impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n+    pub fn from_iterator(iterator: &mut T) -> ~[A] {\n+        let mut xs = ~[];\n+        for iterator.advance |x| {\n+            xs.push(x);\n+        }\n+        xs\n+    }\n+}\n+\n #[cfg(not(stage0))]\n impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {"}]}