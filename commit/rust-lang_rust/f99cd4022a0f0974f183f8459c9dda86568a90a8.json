{"sha": "f99cd4022a0f0974f183f8459c9dda86568a90a8", "node_id": "C_kwDOAAsO6NoAKGY5OWNkNDAyMmEwZjA5NzRmMTgzZjg0NTljOWRkYTg2NTY4YTkwYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T01:26:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T01:26:20Z"}, "message": "Rollup merge of #90538 - camelid:doc-recur-ty, r=estebank\n\nDocument how recursion is handled for `ty::Ty`\n\nBased on this forum discussion:\nhttps://internals.rust-lang.org/t/recursive-type-representation-in-rustc/15235/4\n\ncc `@estebank`", "tree": {"sha": "35b3f6982099b77ed6e1af39ec8bacc5372f0c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b3f6982099b77ed6e1af39ec8bacc5372f0c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99cd4022a0f0974f183f8459c9dda86568a90a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqsO8CRBK7hj4Ov3rIwAAnYcIAI6xa0ni1ZqL3Z++Nt7gRPjF\nVknIBCVnja6EtQgyjGX5MgwikCT7wfb4roVSUurmf3aTSEQQGCaIibCqter26b6s\nJlBpZIq6n3vcKxuQHqtcYjYZKolYhZHarYCYJCVIBynqSRSZ546EkJdryw1zq8U+\npZHQ+zRs/zmXXMnm1VPRp/4m+q43FwD52ZlcxNLShhsS7bHTWAh2yusCJNK9UASj\nrt+zzSaZTwpM0mCsPz5RVTTzcHYDJGzh6jLQj0/AayR3M0Df0HzJZfDGpwu11Nlz\nDLw8p2bLRAW+Ih+9UhbgzgJ/4d3w88tsTkthCYY8YG/j3Sd/7IU6nkBP9P/BRDw=\n=+kar\n-----END PGP SIGNATURE-----\n", "payload": "tree 35b3f6982099b77ed6e1af39ec8bacc5372f0c5a\nparent 532d2b14c05f9bc20b2d27cbb5f4550d28343a36\nparent 9931782a38ad717961c9dd9d92934b3504526d84\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638581180 +0100\ncommitter GitHub <noreply@github.com> 1638581180 +0100\n\nRollup merge of #90538 - camelid:doc-recur-ty, r=estebank\n\nDocument how recursion is handled for `ty::Ty`\n\nBased on this forum discussion:\nhttps://internals.rust-lang.org/t/recursive-type-representation-in-rustc/15235/4\n\ncc `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99cd4022a0f0974f183f8459c9dda86568a90a8", "html_url": "https://github.com/rust-lang/rust/commit/f99cd4022a0f0974f183f8459c9dda86568a90a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99cd4022a0f0974f183f8459c9dda86568a90a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "html_url": "https://github.com/rust-lang/rust/commit/532d2b14c05f9bc20b2d27cbb5f4550d28343a36"}, {"sha": "9931782a38ad717961c9dd9d92934b3504526d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/9931782a38ad717961c9dd9d92934b3504526d84", "html_url": "https://github.com/rust-lang/rust/commit/9931782a38ad717961c9dd9d92934b3504526d84"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "771ce2eb884afbf7e91f0647de6eb67bf8de2435", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f99cd4022a0f0974f183f8459c9dda86568a90a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99cd4022a0f0974f183f8459c9dda86568a90a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=f99cd4022a0f0974f183f8459c9dda86568a90a8", "patch": "@@ -64,6 +64,30 @@ bitflags! {\n /// Moreover, Rust only allows recursive data types through indirection.\n ///\n /// [adt]: https://en.wikipedia.org/wiki/Algebraic_data_type\n+///\n+/// # Recursive types\n+///\n+/// It may seem impossible to represent recursive types using [`Ty`],\n+/// since [`TyKind::Adt`] includes [`AdtDef`], which includes its fields,\n+/// creating a cycle. However, `AdtDef` does not actually include the *types*\n+/// of its fields; it includes just their [`DefId`]s.\n+///\n+/// [`TyKind::Adt`]: ty::TyKind::Adt\n+///\n+/// For example, the following type:\n+///\n+/// ```\n+/// struct S { x: Box<S> }\n+/// ```\n+///\n+/// is essentially represented with [`Ty`] as the following pseudocode:\n+///\n+/// ```\n+/// struct S { x }\n+/// ```\n+///\n+/// where `x` here represents the `DefId` of `S.x`. Then, the `DefId`\n+/// can be used with [`TyCtxt::type_of()`] to get the type of the field.\n pub struct AdtDef {\n     /// The `DefId` of the struct, enum or union item.\n     pub did: DefId,"}, {"sha": "7e1804673df2ce479bcf04075448db20dbcd9081", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99cd4022a0f0974f183f8459c9dda86568a90a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99cd4022a0f0974f183f8459c9dda86568a90a8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f99cd4022a0f0974f183f8459c9dda86568a90a8", "patch": "@@ -1711,7 +1711,7 @@ impl ReprOptions {\n \n impl<'tcx> FieldDef {\n     /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n-    /// typically obtained via the second field of `TyKind::AdtDef`.\n+    /// typically obtained via the second field of [`TyKind::Adt`].\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }"}]}