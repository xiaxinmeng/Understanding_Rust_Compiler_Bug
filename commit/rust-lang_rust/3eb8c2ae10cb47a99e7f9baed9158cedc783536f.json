{"sha": "3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "node_id": "C_kwDOAAsO6NoAKDNlYjhjMmFlMTBjYjQ3YTk5ZTdmOWJhZWQ5MTU4Y2VkYzc4MzUzNmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-16T19:53:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T19:53:22Z"}, "message": "Rollup merge of #112474 - ldm0:ldm_enum_debuginfo_128_support, r=compiler-errors\n\nSupport 128-bit enum variant in debuginfo codegen\n\nfixes #111600", "tree": {"sha": "ca4984b8f691c47709e025629df27390f340e4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4984b8f691c47709e025629df27390f340e4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjL2yCRBK7hj4Ov3rIwAAu6UIAC0C1WU3unJq657+liigLn8W\njiPS6/Z4TE2tixmuZvbp+8MpJXu6jX3fyAVh4foGa9t6s54Xnh7pxHleshEM8iBL\ntReQdsON0PX8sI/H9CvOsYKqh+Xf+/TXLAimWr/15/h/mniIsycs1/It3d/Co546\naegwsd0Ja/hSM2lfyI87v8kKxKLWrdbIfkDR85IPpE7nRXjow5z6sHVwUzXWALDf\ndJCloqGqypb8r+PEWQuw5V9If/sgEPSvKuvA6lxswPbAtejDuUVKT0OZm5tH2svP\nf5BCHcEAMtl9Rh7EQv526R6ERAJmz2LS67OEUCTed+ziMpjUC/fuTOCrGjN2yQI=\n=YeDT\n-----END PGP SIGNATURE-----\n", "payload": "tree ca4984b8f691c47709e025629df27390f340e4a8\nparent 4d5e7cdc03555676f2c309cc4a3daff880ba41b1\nparent ea19243d15de0d15bdeee6f82c27366477d7a043\nauthor Michael Goulet <michael@errs.io> 1686945202 -0700\ncommitter GitHub <noreply@github.com> 1686945202 -0700\n\nRollup merge of #112474 - ldm0:ldm_enum_debuginfo_128_support, r=compiler-errors\n\nSupport 128-bit enum variant in debuginfo codegen\n\nfixes #111600\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "html_url": "https://github.com/rust-lang/rust/commit/3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5e7cdc03555676f2c309cc4a3daff880ba41b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5e7cdc03555676f2c309cc4a3daff880ba41b1", "html_url": "https://github.com/rust-lang/rust/commit/4d5e7cdc03555676f2c309cc4a3daff880ba41b1"}, {"sha": "ea19243d15de0d15bdeee6f82c27366477d7a043", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea19243d15de0d15bdeee6f82c27366477d7a043", "html_url": "https://github.com/rust-lang/rust/commit/ea19243d15de0d15bdeee6f82c27366477d7a043"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "b62f4676f70b6c13a1265f50898a47a8f1c53b6c", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -108,6 +108,10 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.const_uint(self.type_u64(), i)\n     }\n \n+    fn const_u128(&self, i: u128) -> RValue<'gcc> {\n+        self.const_uint_big(self.type_u128(), i)\n+    }\n+\n     fn const_usize(&self, i: u64) -> RValue<'gcc> {\n         let bit_size = self.data_layout().pointer_size.bits();\n         if bit_size < 64 {\n@@ -254,7 +258,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // SIMD builtins require a constant value.\n         self.bitcast_if_needed(value, typ)\n     }\n-    \n+\n     fn const_ptr_byte_offset(&self, base_addr: Self::Value, offset: abi::Size) -> Self::Value {\n         self.context.new_array_access(None, base_addr, self.const_usize(offset.bytes())).get_address(None)\n     }"}, {"sha": "a2db59bd6c47be7a09f63f7ab66a2976558f6419", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -168,6 +168,10 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i64(), i)\n     }\n \n+    fn const_u128(&self, i: u128) -> &'ll Value {\n+        self.const_uint_big(self.type_i128(), i)\n+    }\n+\n     fn const_usize(&self, i: u64) -> &'ll Value {\n         let bit_size = self.data_layout().pointer_size.bits();\n         if bit_size < 64 {"}, {"sha": "1a8618e0c55770bdeaa4b17b9530cc72e5d27a8a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -429,7 +429,7 @@ pub fn type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll D\n         return existing_di_node;\n     }\n \n-    debug!(\"type_di_node: {:?}\", t);\n+    debug!(\"type_di_node: {:?} kind: {:?}\", t, t.kind());\n \n     let DINodeCreationResult { di_node, already_stored_in_typemap } = match *t.kind() {\n         ty::Never | ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) => {"}, {"sha": "666b9762f5a76e900a0a5b6f7d30ad6c5c011c3d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -412,13 +412,7 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n             enum_type_and_layout.size.bits(),\n             enum_type_and_layout.align.abi.bits() as u32,\n             Size::ZERO.bits(),\n-            discr_value.opt_single_val().map(|value| {\n-                // NOTE(eddyb) do *NOT* remove this assert, until\n-                // we pass the full 128-bit value to LLVM, otherwise\n-                // truncation will be silent and remain undetected.\n-                assert_eq!(value as u64 as u128, value);\n-                cx.const_u64(value as u64)\n-            }),\n+            discr_value.opt_single_val().map(|value| cx.const_u128(value)),\n             DIFlags::FlagZero,\n             variant_member_info.variant_struct_type_di_node,\n         )"}, {"sha": "d6e9bfce1a4fc86cb6bb93f1a5239f9840ef4893", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -15,6 +15,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_i32(&self, i: i32) -> Self::Value;\n     fn const_u32(&self, i: u32) -> Self::Value;\n     fn const_u64(&self, i: u64) -> Self::Value;\n+    fn const_u128(&self, i: u128) -> Self::Value;\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;"}, {"sha": "4b607d5057450943c86c1887603b5dc1db24257f", "filename": "tests/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/tests%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/tests%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenum-debug-niche-2.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -7,8 +7,8 @@\n // compile-flags: -g -C no-prepopulate-passes\n \n // CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_variant_part,{{.*}}size: 32,{{.*}}\n-// CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Placeholder\",{{.*}}extraData: i64 4294967295{{[,)].*}}\n-// CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n+// CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Placeholder\",{{.*}}extraData: i128 4294967295{{[,)].*}}\n+// CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i128 0{{[,)].*}}\n \n #![feature(never_type)]\n "}, {"sha": "f50d360ac9f338406c40411fd0980399da083137", "filename": "tests/codegen/enum-u128.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/tests%2Fcodegen%2Fenum-u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb8c2ae10cb47a99e7f9baed9158cedc783536f/tests%2Fcodegen%2Fenum-u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenum-u128.rs?ref=3eb8c2ae10cb47a99e7f9baed9158cedc783536f", "patch": "@@ -0,0 +1,27 @@\n+// This tests that debug info for \"c-like\" 128bit enums is properly emitted.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n+\n+//\n+// ignore-msvc\n+\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+// CHECK-LABEL: @main\n+// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"Foo\",{{.*}}flags: DIFlagEnumClass,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Lo\",{{.*}}value: 0,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Hi\",{{.*}}value: 18446744073709551616,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Bar\",{{.*}}value: 18446745000000000123,{{.*}}\n+\n+#![allow(incomplete_features)]\n+#![feature(repr128)]\n+\n+#[repr(u128)]\n+pub enum Foo {\n+    Lo,\n+    Hi = 1 << 64,\n+    Bar = 18_446_745_000_000_000_123,\n+}\n+\n+pub fn main() {\n+    let foo = Foo::Bar;\n+}"}]}