{"sha": "e4068f67153807f4c2554600bc60d2b3699ce682", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MDY4ZjY3MTUzODA3ZjRjMjU1NDYwMGJjNjBkMmIzNjk5Y2U2ODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-06T21:28:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-06T21:29:03Z"}, "message": "Mac doesn't seem to support rpath $ORIGIN", "tree": {"sha": "3c0c58b202575b37fc41f482cc5bacabcd44d386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0c58b202575b37fc41f482cc5bacabcd44d386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4068f67153807f4c2554600bc60d2b3699ce682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4068f67153807f4c2554600bc60d2b3699ce682", "html_url": "https://github.com/rust-lang/rust/commit/e4068f67153807f4c2554600bc60d2b3699ce682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4068f67153807f4c2554600bc60d2b3699ce682/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06087e67e166512a623f584bfb52a17dfb974b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/06087e67e166512a623f584bfb52a17dfb974b51", "html_url": "https://github.com/rust-lang/rust/commit/06087e67e166512a623f584bfb52a17dfb974b51"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "3dc7c46ba6d84c9669c04ec3867936e73a038f5c", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e4068f67153807f4c2554600bc60d2b3699ce682/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4068f67153807f4c2554600bc60d2b3699ce682/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=e4068f67153807f4c2554600bc60d2b3699ce682", "patch": "@@ -14,8 +14,10 @@ import util::filesearch;\n export get_rpath_flags, test;\n \n fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n+    let os = sess.get_targ_cfg().os;\n+\n     // No rpath on windows\n-    if sess.get_targ_cfg().os == session::os_win32 {\n+    if os == session::os_win32 {\n         ret [];\n     }\n \n@@ -30,7 +32,7 @@ fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n     let libs = libs + [get_sysroot_absolute_rt_lib(sess)];\n \n     let target_triple = sess.get_opts().target_triple;\n-    let rpaths = get_rpaths(cwd, sysroot, output, libs, target_triple);\n+    let rpaths = get_rpaths(os, cwd, sysroot, output, libs, target_triple);\n     rpaths_to_flags(rpaths)\n }\n \n@@ -47,7 +49,7 @@ fn rpaths_to_flags(rpaths: [str]) -> [str] {\n     vec::map({ |rpath| #fmt(\"-Wl,-rpath,%s\",rpath)}, rpaths)\n }\n \n-fn get_rpaths(cwd: fs::path, sysroot: fs::path,\n+fn get_rpaths(os: session::os, cwd: fs::path, sysroot: fs::path,\n               output: fs::path, libs: [fs::path],\n               target_triple: str) -> [str] {\n     log #fmt(\"cwd: %s\", cwd);\n@@ -62,7 +64,7 @@ fn get_rpaths(cwd: fs::path, sysroot: fs::path,\n     // Use relative paths to the libraries. Binaries can be moved\n     // as long as they maintain the relative relationship to the\n     // crates they depend on.\n-    let rel_rpaths = get_rpaths_relative_to_output(cwd, output, libs);\n+    let rel_rpaths = get_rpaths_relative_to_output(os, cwd, output, libs);\n \n     // Make backup absolute paths to the libraries. Binaries can\n     // be moved as long as the crates they link against don't move.\n@@ -89,16 +91,24 @@ fn get_rpaths(cwd: fs::path, sysroot: fs::path,\n     ret rpaths;\n }\n \n-fn get_rpaths_relative_to_output(cwd: fs::path,\n+fn get_rpaths_relative_to_output(os: session::os,\n+                                 cwd: fs::path,\n                                  output: fs::path,\n                                  libs: [fs::path]) -> [str] {\n-    vec::map(bind get_rpath_relative_to_output(cwd, output, _), libs)\n+    vec::map(bind get_rpath_relative_to_output(os, cwd, output, _), libs)\n }\n \n-fn get_rpath_relative_to_output(cwd: fs::path,\n+fn get_rpath_relative_to_output(os: session::os,\n+                                cwd: fs::path,\n                                 output: fs::path,\n                                 lib: fs::path) -> str {\n-    \"$ORIGIN\" + fs::path_sep() + get_relative_to(\n+    // Mac doesn't appear to support $ORIGIN\n+    let prefix = alt os {\n+        session::os_linux. { \"$ORIGIN\" + fs::path_sep() }\n+        session::os_macos. { \"\" }\n+    };\n+\n+    prefix + get_relative_to(\n         get_absolute(cwd, output),\n         get_absolute(cwd, lib))\n }\n@@ -293,12 +303,21 @@ mod test {\n     }\n \n     #[test]\n+    #[cfg(target_os = \"linux\")]\n     fn test_rpath_relative() {\n-        let res = get_rpath_relative_to_output(\n+        let res = get_rpath_relative_to_output(session::os_linux,\n             \"/usr\", \"bin/rustc\", \"lib/libstd.so\");\n         assert res == \"$ORIGIN/../lib\";\n     }\n \n+    #[test]\n+    #[cfg(target_os = \"macos\")]\n+    fn test_rpath_relative() {\n+        let res = get_rpath_relative_to_output(session::os_macos,\n+            \"/usr\", \"bin/rustc\", \"lib/libstd.so\");\n+        assert res == \"../lib\";\n+    }\n+\n     #[test]\n     fn test_get_absolute_rpath() {\n         let res = get_absolute_rpath(\"/usr\", \"lib/libstd.so\");"}]}