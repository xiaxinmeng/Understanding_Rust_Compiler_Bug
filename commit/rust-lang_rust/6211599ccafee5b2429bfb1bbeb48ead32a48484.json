{"sha": "6211599ccafee5b2429bfb1bbeb48ead32a48484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTE1OTljY2FmZWU1YjI0MjliZmIxYmJlYjQ4ZWFkMzJhNDg0ODQ=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:00:31Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:15:54Z"}, "message": "Extend invalid_atomic_ordering to detect misuse of compare_exchange{,_weak}", "tree": {"sha": "620e257a41946ee46564e7c67a019af59d1f86e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/620e257a41946ee46564e7c67a019af59d1f86e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6211599ccafee5b2429bfb1bbeb48ead32a48484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6211599ccafee5b2429bfb1bbeb48ead32a48484", "html_url": "https://github.com/rust-lang/rust/commit/6211599ccafee5b2429bfb1bbeb48ead32a48484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6211599ccafee5b2429bfb1bbeb48ead32a48484/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6", "html_url": "https://github.com/rust-lang/rust/commit/8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6"}], "stats": {"total": 425, "additions": 423, "deletions": 2}, "files": [{"sha": "748f45f47c2ad13c9f7ee167e678027ecfdcac45", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6211599ccafee5b2429bfb1bbeb48ead32a48484/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6211599ccafee5b2429bfb1bbeb48ead32a48484/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=6211599ccafee5b2429bfb1bbeb48ead32a48484", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of invalid atomic\n-    /// ordering in atomic loads/stores and memory fences.\n+    /// ordering in atomic loads/stores/exchanges and memory fences\n     ///\n     /// **Why is this bad?** Using an invalid atomic ordering\n     /// will cause a panic at run-time.\n@@ -29,10 +29,13 @@ declare_clippy_lint! {\n     ///\n     /// atomic::fence(Ordering::Relaxed);\n     /// atomic::compiler_fence(Ordering::Relaxed);\n+    ///\n+    /// let _ = x.compare_exchange(false, false, Ordering::Relaxed, Ordering::SeqCst);\n+    /// let _ = x.compare_exchange_weak(false, true, Ordering::SeqCst, Ordering::Release);\n     /// ```\n     pub INVALID_ATOMIC_ORDERING,\n     correctness,\n-    \"usage of invalid atomic ordering in atomic loads/stores and memory fences\"\n+    \"usage of invalid atomic ordering in atomic loads/stores/exchanges ane memory fences\"\n }\n \n declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n@@ -127,9 +130,84 @@ fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n+    if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n+        cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n+    } else {\n+        None\n+    }\n+}\n+fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind;\n+        let method = method_path.ident.name.as_str();\n+        if type_is_atomic(cx, &args[0]);\n+        if method == \"compare_exchange\" || method == \"compare_exchange_weak\";\n+        let failure_order_arg = &args[4];\n+        if let Some(fail_ordering_def_id) = opt_ordering_defid(cx, failure_order_arg);\n+        then {\n+            // Helper type holding on to some checking and error reporting data. Has\n+            // - (success ordering name,\n+            // - list of failure orderings forbidden by the success order,\n+            // - suggestion message)\n+            type OrdLintInfo = (&'static str, &'static [&'static str], &'static str);\n+            let relaxed: OrdLintInfo = (\"Relaxed\", &[\"SeqCst\", \"Acquire\"], \"ordering mode `Relaxed`\");\n+            let acquire: OrdLintInfo = (\"Acquire\", &[\"SeqCst\"], \"ordering modes `Acquire` or `Relaxed`\");\n+            let seq_cst: OrdLintInfo = (\"SeqCst\", &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n+            let release = (\"Release\", relaxed.1, relaxed.2);\n+            let acqrel = (\"AcqRel\", acquire.1, acquire.2);\n+            let search = [relaxed, acquire, seq_cst, release, acqrel];\n+\n+            let success_lint_info = opt_ordering_defid(cx, &args[3])\n+                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n+                    search\n+                        .iter()\n+                        .find(|(ordering, ..)| {\n+                            match_def_path(cx, success_ord_def_id,\n+                                &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering])\n+                        })\n+                        .copied()\n+                });\n+\n+            if match_ordering_def_path(cx, fail_ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n+                // If we don't know the success order is, use what we'd suggest\n+                // if it were maximally permissive.\n+                let suggested = success_lint_info.unwrap_or(seq_cst).2;\n+                span_lint_and_help(\n+                    cx,\n+                    INVALID_ATOMIC_ORDERING,\n+                    failure_order_arg.span,\n+                    &format!(\n+                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n+                        method,\n+                    ),\n+                    None,\n+                    &format!(\"consider using {} instead\", suggested),\n+                );\n+            } else if let Some((success_ord_name, bad_ords_given_success, suggested)) = success_lint_info {\n+                if match_ordering_def_path(cx, fail_ordering_def_id, bad_ords_given_success) {\n+                    span_lint_and_help(\n+                        cx,\n+                        INVALID_ATOMIC_ORDERING,\n+                        failure_order_arg.span,\n+                        &format!(\n+                            \"{}'s failure ordering may not stronger than the success ordering of `{}`\",\n+                            method,\n+                            success_ord_name,\n+                        ),\n+                        None,\n+                        &format!(\"consider using {} instead\", suggested),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for AtomicOrdering {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         check_atomic_load_store(cx, expr);\n         check_memory_fence(cx, expr);\n+        check_atomic_compare_exchange(cx, expr);\n     }\n }"}, {"sha": "2f60a98f037b4a676ee971d7856a7d8ce3fe64fc", "filename": "tests/ui/atomic_ordering_exchange.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6211599ccafee5b2429bfb1bbeb48ead32a48484/tests%2Fui%2Fatomic_ordering_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6211599ccafee5b2429bfb1bbeb48ead32a48484/tests%2Fui%2Fatomic_ordering_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.rs?ref=6211599ccafee5b2429bfb1bbeb48ead32a48484", "patch": "@@ -0,0 +1,84 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn main() {\n+    // `compare_exchange` (not weak) testing\n+    let x = AtomicUsize::new(0);\n+\n+    // Allowed ordering combos\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::SeqCst);\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+\n+    // compare_exchange_weak tests\n+\n+    // Allowed ordering combos\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::SeqCst);\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::Release);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::Release);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::Release);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::Release);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::Release);\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::SeqCst);\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+    let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+}"}, {"sha": "26ec15be518c526408740868cb71e3d199e39e67", "filename": "tests/ui/atomic_ordering_exchange.stderr", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/6211599ccafee5b2429bfb1bbeb48ead32a48484/tests%2Fui%2Fatomic_ordering_exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6211599ccafee5b2429bfb1bbeb48ead32a48484/tests%2Fui%2Fatomic_ordering_exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.stderr?ref=6211599ccafee5b2429bfb1bbeb48ead32a48484", "patch": "@@ -0,0 +1,259 @@\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:21:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:22:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:23:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:24:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:25:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:28:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:29:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:30:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:31:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n+   |                                                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:32:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n+   |                                                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:35:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:36:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:39:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:40:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_exchange.rs:43:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:44:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:60:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:61:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:62:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::AcqRel);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:63:61\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:64:61\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:67:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::Release);\n+   |                                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:68:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::Release);\n+   |                                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:69:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::Release);\n+   |                                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:70:61\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::Release);\n+   |                                                             ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:71:61\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::SeqCst, Ordering::Release);\n+   |                                                             ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:74:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::Acquire);\n+   |                                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:75:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Release, Ordering::SeqCst);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:78:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:79:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+   |                                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_exchange.rs:82:62\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+   |                                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:83:61\n+   |\n+LL |     let _ = x.compare_exchange_weak(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+   |                                                             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: aborting due to 32 previous errors\n+"}]}