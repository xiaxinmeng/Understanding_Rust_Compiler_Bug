{"sha": "af43950143b1672efd9fd5681d3fb52d0108f716", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDM5NTAxNDNiMTY3MmVmZDlmZDU2ODFkM2ZiNTJkMDEwOGY3MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T12:47:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T12:47:16Z"}, "message": "Auto merge of #3740 - flip1995:const_assert_macro, r=oli-obk\n\nMacro check for assertion_on_constants lint\n\nThe `assertion_on_constants` lint currently has following output for this code [Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6f2c9df6fc50baf847212d3b5136ee97):\n```rust\nmacro_rules! assert_const {\n    ($len:expr) => {\n        assert!($len > 0);\n    }\n}\n\nfn main() {\n    assert_const!(3);\n    assert_const!(-1);\n}\n```\n```\nwarning: assert!(const: true) will be optimized out by the compiler\n --> src/main.rs:3:9\n  |\n3 |         assert!($len > 0);\n  |         ^^^^^^^^^^^^^^^^^^\n...\n8 |     assert_const!(3);\n  |     ---------------- in this macro invocation\n  |\n  = note: #[warn(clippy::assertions_on_constants)] on by default\n  = help: remove it\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n\nwarning: assert!(const: false) should probably be replaced\n --> src/main.rs:3:9\n  |\n3 |         assert!($len > 0);\n  |         ^^^^^^^^^^^^^^^^^^\n...\n9 |     assert_const!(-1);\n  |     ----------------- in this macro invocation\n  |\n  = help: use panic!() or unreachable!()\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n```\n\nThis is contradictory. This lint should not trigger if the `assert!` is in a macro itself.", "tree": {"sha": "6d646f5fdb3e6d92bcab9d547329a0efc0afc095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d646f5fdb3e6d92bcab9d547329a0efc0afc095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af43950143b1672efd9fd5681d3fb52d0108f716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af43950143b1672efd9fd5681d3fb52d0108f716", "html_url": "https://github.com/rust-lang/rust/commit/af43950143b1672efd9fd5681d3fb52d0108f716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af43950143b1672efd9fd5681d3fb52d0108f716/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83edb647f22a6aa508565453eca79e032f3779dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/83edb647f22a6aa508565453eca79e032f3779dc", "html_url": "https://github.com/rust-lang/rust/commit/83edb647f22a6aa508565453eca79e032f3779dc"}, {"sha": "cb2d987ed4d4074e67ec307cbf5bfe289e876a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2d987ed4d4074e67ec307cbf5bfe289e876a3b", "html_url": "https://github.com/rust-lang/rust/commit/cb2d987ed4d4074e67ec307cbf5bfe289e876a3b"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "92ee9d1bc666fab49e65a6fcec7e97305bbd4f4d", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af43950143b1672efd9fd5681d3fb52d0108f716/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af43950143b1672efd9fd5681d3fb52d0108f716/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=af43950143b1672efd9fd5681d3fb52d0108f716", "patch": "@@ -3,7 +3,7 @@ use crate::rustc::hir::{Expr, ExprKind};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::syntax::ast::LitKind;\n-use crate::utils::{is_direct_expn_of, span_help_and_lint};\n+use crate::utils::{in_macro, is_direct_expn_of, span_help_and_lint};\n use if_chain::if_chain;\n \n /// **What it does:** Check to call assert!(true/false)\n@@ -43,7 +43,9 @@ impl LintPass for AssertionsOnConstants {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if_chain! {\n-            if is_direct_expn_of(e.span, \"assert\").is_some();\n+            if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n+            if !in_macro(assert_span)\n+                || is_direct_expn_of(assert_span, \"debug_assert\").map_or(false, |span| !in_macro(span));\n             if let ExprKind::Unary(_, ref lit) = e.node;\n             then {\n                 if let ExprKind::Lit(ref inner) = lit.node {"}, {"sha": "0d2953c7ed8143ccdf1afef0a2057153923d3561", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af43950143b1672efd9fd5681d3fb52d0108f716/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af43950143b1672efd9fd5681d3fb52d0108f716/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=af43950143b1672efd9fd5681d3fb52d0108f716", "patch": "@@ -1,3 +1,10 @@\n+macro_rules! assert_const {\n+    ($len:expr) => {\n+        assert!($len > 0);\n+        debug_assert!($len < 0);\n+    };\n+}\n+\n fn main() {\n     assert!(true);\n     assert!(false);\n@@ -9,4 +16,8 @@ fn main() {\n \n     const C: bool = false;\n     assert!(C);\n+\n+    debug_assert!(true);\n+    assert_const!(3);\n+    assert_const!(-1);\n }"}, {"sha": "adfa326abacbc30a45b5c1568ff00dc4e6e4046e", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af43950143b1672efd9fd5681d3fb52d0108f716/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af43950143b1672efd9fd5681d3fb52d0108f716/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=af43950143b1672efd9fd5681d3fb52d0108f716", "patch": "@@ -1,5 +1,5 @@\n error: assert!(true) will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:2:5\n+  --> $DIR/assertions_on_constants.rs:9:5\n    |\n LL |     assert!(true);\n    |     ^^^^^^^^^^^^^^\n@@ -8,44 +8,53 @@ LL |     assert!(true);\n    = help: remove it\n \n error: assert!(false) should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:3:5\n+  --> $DIR/assertions_on_constants.rs:10:5\n    |\n LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: use panic!() or unreachable!()\n \n error: assert!(true) will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:4:5\n+  --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n \n error: assert!(false) should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:5:5\n+  --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use panic!() or unreachable!()\n \n error: assert!(const: true) will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:8:5\n+  --> $DIR/assertions_on_constants.rs:15:5\n    |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n \n error: assert!(const: false) should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:11:5\n+  --> $DIR/assertions_on_constants.rs:18:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use panic!() or unreachable!()\n \n-error: aborting due to 6 previous errors\n+error: assert!(true) will be optimized out by the compiler\n+  --> $DIR/assertions_on_constants.rs:20:5\n+   |\n+LL |     debug_assert!(true);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove it\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 7 previous errors\n "}]}