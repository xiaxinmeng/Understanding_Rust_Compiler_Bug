{"sha": "e511b3280f9640c47bfc0e37494bc11806bdba9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTFiMzI4MGY5NjQwYzQ3YmZjMGUzNzQ5NGJjMTE4MDZiZGJhOWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-18T12:23:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-18T12:23:44Z"}, "message": "Make xtask dist more reliable", "tree": {"sha": "1f6fbf906ec4404ab8bb0e4011d54c781ba26a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6fbf906ec4404ab8bb0e4011d54c781ba26a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e511b3280f9640c47bfc0e37494bc11806bdba9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e511b3280f9640c47bfc0e37494bc11806bdba9f", "html_url": "https://github.com/rust-lang/rust/commit/e511b3280f9640c47bfc0e37494bc11806bdba9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e511b3280f9640c47bfc0e37494bc11806bdba9f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3543d1953daeb240c214ececd273f1040b0516", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3543d1953daeb240c214ececd273f1040b0516", "html_url": "https://github.com/rust-lang/rust/commit/2a3543d1953daeb240c214ececd273f1040b0516"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "e3dddd9b1e8a8e898cca546628aaff264e8f6cb5", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e511b3280f9640c47bfc0e37494bc11806bdba9f/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e511b3280f9640c47bfc0e37494bc11806bdba9f/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=e511b3280f9640c47bfc0e37494bc11806bdba9f", "patch": "@@ -23,27 +23,26 @@ fn dist_client(nightly: bool) -> Result<()> {\n     let _d = pushd(\"./editors/code\");\n \n     let package_json_path = PathBuf::from(\"./package.json\");\n-    let original_package_json = fs2::read_to_string(&package_json_path)?;\n-    let _restore =\n-        Restore { path: package_json_path.clone(), contents: original_package_json.clone() };\n+    let mut patch = Patch::new(package_json_path.clone())?;\n \n     let date = run!(\"date --utc +%Y%m%d\")?;\n     let version_suffix = if nightly { \"-nightly\" } else { \"\" };\n \n-    let mut package_json = original_package_json.replace(\n+    patch.replace(\n         r#\"\"version\": \"0.2.20200309-nightly\"\"#,\n         &format!(r#\"\"version\": \"0.1.{}{}\"\"#, date, version_suffix),\n     );\n \n     if nightly {\n-        package_json = package_json.replace(\n+        patch.replace(\n             r#\"\"displayName\": \"rust-analyzer\"\"#,\n-            r#\"\"displayName\": \"rust-analyzer nightly\"\"#,\n+            r#\"\"displayName\": \"rust-analyzer (nightly)\"\"#,\n         );\n-    } else {\n-        package_json = package_json.replace(r#\"\"enableProposedApi\": true,\"#, r#\"\"#);\n     }\n-    fs2::write(package_json_path, package_json)?;\n+    if !nightly {\n+        patch.replace(r#\"\"enableProposedApi\": true,\"#, r#\"\"#);\n+    }\n+    patch.commit()?;\n \n     run!(\"npm ci\")?;\n     run!(\"npx vsce package -o ../../dist/rust-analyzer.vsix\")?;\n@@ -80,13 +79,31 @@ fn dist_server() -> Result<()> {\n     Ok(())\n }\n \n-struct Restore {\n+struct Patch {\n     path: PathBuf,\n+    original_contents: String,\n     contents: String,\n }\n \n-impl Drop for Restore {\n+impl Patch {\n+    fn new(path: PathBuf) -> Result<Patch> {\n+        let contents = fs2::read_to_string(&path)?;\n+        Ok(Patch { path, original_contents: contents.clone(), contents })\n+    }\n+\n+    fn replace(&mut self, from: &str, to: &str) -> &mut Patch {\n+        assert!(self.contents.contains(from));\n+        self.contents = self.contents.replace(from, to);\n+        self\n+    }\n+\n+    fn commit(&self) -> Result<()> {\n+        fs2::write(&self.path, &self.contents)\n+    }\n+}\n+\n+impl Drop for Patch {\n     fn drop(&mut self) {\n-        fs2::write(&self.path, &self.contents).unwrap();\n+        fs2::write(&self.path, &self.original_contents).unwrap();\n     }\n }"}]}