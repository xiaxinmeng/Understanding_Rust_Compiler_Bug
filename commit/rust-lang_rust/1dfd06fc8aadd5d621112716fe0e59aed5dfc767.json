{"sha": "1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZmQwNmZjOGFhZGQ1ZDYyMTExMjcxNmZlMGU1OWFlZDVkZmM3Njc=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2018-12-06T20:07:31Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2018-12-06T20:32:15Z"}, "message": "Use json comparison code from cargo for heavy tests", "tree": {"sha": "ed92a2a5c5f3666cd68b04abc653fe455f83d49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed92a2a5c5f3666cd68b04abc653fe455f83d49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "html_url": "https://github.com/rust-lang/rust/commit/1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3", "html_url": "https://github.com/rust-lang/rust/commit/8e60e751cbcfa47c7bed788dfe2ab5cebfcb78b3"}], "stats": {"total": 135, "additions": 117, "deletions": 18}, "files": [{"sha": "4f46e26fb7bf5d50c1e97d61e80f7f8b639723af", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -1075,6 +1075,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "63d53fb0185c418fa313cdd20bea8104838a9072", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -1,5 +1,7 @@\n mod support;\n \n+use serde_json::json;\n+\n use ra_lsp_server::req::{Runnables, RunnablesParams};\n \n use crate::support::project;\n@@ -21,7 +23,7 @@ fn foo() {\n             text_document: server.doc_id(\"lib.rs\"),\n             position: None,\n         },\n-        r#\"[\n+        json!([\n           {\n             \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n@@ -51,7 +53,7 @@ fn foo() {\n               }\n             }\n           }\n-        ]\"#,\n+        ]),\n     );\n }\n \n@@ -78,7 +80,7 @@ fn test_eggs() {}\n             text_document: server.doc_id(\"tests/spam.rs\"),\n             position: None,\n         },\n-        r#\"[\n+        json!([\n           {\n             \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n@@ -111,6 +113,6 @@ fn test_eggs() {}\n               }\n             }\n           }\n-        ]\"#\n+        ])\n     );\n }"}, {"sha": "4b75be3ee74c198c91b4da17955dbc9cb6e49437", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -15,9 +15,9 @@ use languageserver_types::{\n     DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url,\n };\n use serde::Serialize;\n-use serde_json::{from_str, to_string_pretty, Value};\n+use serde_json::{to_string_pretty, Value};\n use tempdir::TempDir;\n-use test_utils::parse_fixture;\n+use test_utils::{parse_fixture, find_mismatch};\n \n use ra_lsp_server::{\n     main_loop, req,\n@@ -88,23 +88,24 @@ impl Server {\n         }\n     }\n \n-    pub fn request<R>(&self, params: R::Params, expected_resp: &str)\n+    pub fn request<R>(&self, params: R::Params, expected_resp: Value)\n     where\n         R: Request,\n         R::Params: Serialize,\n     {\n         let id = self.req_id.get();\n         self.req_id.set(id + 1);\n-        let expected_resp: Value = from_str(expected_resp).unwrap();\n         let actual = self.send_request::<R>(id, params);\n-        assert_eq!(\n-            expected_resp,\n-            actual,\n-            \"Expected:\\n{}\\n\\\n-             Actual:\\n{}\\n\",\n-            to_string_pretty(&expected_resp).unwrap(),\n-            to_string_pretty(&actual).unwrap(),\n-        );\n+        match find_mismatch(&expected_resp, &actual) {\n+            Some((expected_part, actual_part)) => panic!(\n+                \"JSON mismatch\\nExpected:\\n{}\\nWas:\\n{}\\nExpected part:\\n{}\\nActual part:\\n{}\\n\",\n+                to_string_pretty(&expected_resp).unwrap(),\n+                to_string_pretty(&actual).unwrap(),\n+                to_string_pretty(expected_part).unwrap(),\n+                to_string_pretty(actual_part).unwrap(),\n+            ),\n+            None => {}\n+        }\n     }\n \n     fn send_request<R>(&self, id: u64, params: R::Params) -> Value\n@@ -139,7 +140,7 @@ impl Server {\n     pub fn wait_for_feedback_n(&self, feedback: &str, n: usize) {\n         let f = |msg: &RawMessage| match msg {\n             RawMessage::Notification(n) if n.method == \"internalFeedback\" => {\n-                return n.clone().cast::<req::InternalFeedback>().unwrap() == feedback\n+                return n.clone().cast::<req::InternalFeedback>().unwrap() == feedback;\n             }\n             _ => false,\n         };"}, {"sha": "4473c2fab9677646fc5e08464d8dd887b690db26", "filename": "crates/ra_syntax/src/grammar/items/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -159,7 +159,7 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n                 MaybeItem::Modifiers\n             } else {\n                 MaybeItem::None\n-            }\n+            };\n         }\n     };\n "}, {"sha": "8c8fcd7ae72e43595d596294118d09d59aedf434", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -8,3 +8,4 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n difference = \"2.0.0\"\n itertools = \"0.7.8\"\n text_unit = \"0.1.2\"\n+serde_json = \"1.0.24\""}, {"sha": "0a94adb740dff7b958debc20eb7d8efb98f65b04", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfd06fc8aadd5d621112716fe0e59aed5dfc767/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=1dfd06fc8aadd5d621112716fe0e59aed5dfc767", "patch": "@@ -2,6 +2,7 @@ use std::fmt;\n \n use itertools::Itertools;\n use text_unit::{TextRange, TextUnit};\n+use serde_json::Value;\n \n pub use difference::Changeset as __Changeset;\n \n@@ -145,3 +146,96 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n     flush!();\n     res\n }\n+\n+// Comparison functionality borrowed from cargo:\n+\n+/// Compare a line with an expected pattern.\n+/// - Use `[..]` as a wildcard to match 0 or more characters on the same line\n+///   (similar to `.*` in a regex).\n+pub fn lines_match(expected: &str, actual: &str) -> bool {\n+    // Let's not deal with / vs \\ (windows...)\n+    // First replace backslash-escaped backslashes with forward slashes\n+    // which can occur in, for example, JSON output\n+    let expected = expected.replace(\"\\\\\\\\\", \"/\").replace(\"\\\\\", \"/\");\n+    let mut actual: &str = &actual.replace(\"\\\\\\\\\", \"/\").replace(\"\\\\\", \"/\");\n+    for (i, part) in expected.split(\"[..]\").enumerate() {\n+        match actual.find(part) {\n+            Some(j) => {\n+                if i == 0 && j != 0 {\n+                    return false;\n+                }\n+                actual = &actual[j + part.len()..];\n+            }\n+            None => return false,\n+        }\n+    }\n+    actual.is_empty() || expected.ends_with(\"[..]\")\n+}\n+\n+#[test]\n+fn lines_match_works() {\n+    assert!(lines_match(\"a b\", \"a b\"));\n+    assert!(lines_match(\"a[..]b\", \"a b\"));\n+    assert!(lines_match(\"a[..]\", \"a b\"));\n+    assert!(lines_match(\"[..]\", \"a b\"));\n+    assert!(lines_match(\"[..]b\", \"a b\"));\n+\n+    assert!(!lines_match(\"[..]b\", \"c\"));\n+    assert!(!lines_match(\"b\", \"c\"));\n+    assert!(!lines_match(\"b\", \"cb\"));\n+}\n+\n+// Compares JSON object for approximate equality.\n+// You can use `[..]` wildcard in strings (useful for OS dependent things such\n+// as paths).  You can use a `\"{...}\"` string literal as a wildcard for\n+// arbitrary nested JSON (useful for parts of object emitted by other programs\n+// (e.g. rustc) rather than Cargo itself).  Arrays are sorted before comparison.\n+pub fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a Value, &'a Value)> {\n+    use serde_json::Value::*;\n+    match (expected, actual) {\n+        (&Number(ref l), &Number(ref r)) if l == r => None,\n+        (&Bool(l), &Bool(r)) if l == r => None,\n+        (&String(ref l), &String(ref r)) if lines_match(l, r) => None,\n+        (&Array(ref l), &Array(ref r)) => {\n+            if l.len() != r.len() {\n+                return Some((expected, actual));\n+            }\n+\n+            let mut l = l.iter().collect::<Vec<_>>();\n+            let mut r = r.iter().collect::<Vec<_>>();\n+\n+            l.retain(\n+                |l| match r.iter().position(|r| find_mismatch(l, r).is_none()) {\n+                    Some(i) => {\n+                        r.remove(i);\n+                        false\n+                    }\n+                    None => true,\n+                },\n+            );\n+\n+            if !l.is_empty() {\n+                assert!(!r.is_empty());\n+                Some((&l[0], &r[0]))\n+            } else {\n+                assert_eq!(r.len(), 0);\n+                None\n+            }\n+        }\n+        (&Object(ref l), &Object(ref r)) => {\n+            let same_keys = l.len() == r.len() && l.keys().all(|k| r.contains_key(k));\n+            if !same_keys {\n+                return Some((expected, actual));\n+            }\n+\n+            l.values()\n+                .zip(r.values())\n+                .filter_map(|(l, r)| find_mismatch(l, r))\n+                .nth(0)\n+        }\n+        (&Null, &Null) => None,\n+        // magic string literal \"{...}\" acts as wildcard for any sub-JSON\n+        (&String(ref l), _) if l == \"{...}\" => None,\n+        _ => Some((expected, actual)),\n+    }\n+}"}]}