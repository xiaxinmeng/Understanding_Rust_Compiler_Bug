{"sha": "944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NGYyOGZlNWJmMmI4ZTQzMTZjYzY3YmY1ZjgyNDMzM2ZjNGYxODA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-23T11:34:56Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-24T08:43:22Z"}, "message": "Use more generic public api", "tree": {"sha": "8deb8e01871b17968611832b795abcd1c3fd24e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8deb8e01871b17968611832b795abcd1c3fd24e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "html_url": "https://github.com/rust-lang/rust/commit/944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e11b33a36755b139367e1f91a52f5ec27193f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e11b33a36755b139367e1f91a52f5ec27193f6", "html_url": "https://github.com/rust-lang/rust/commit/d5e11b33a36755b139367e1f91a52f5ec27193f6"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "908319f875bdb52959212a2e63387f02f30f8557", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -884,6 +884,7 @@ version = \"0.1.0\"\n name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either\",\n  \"format-buf\",\n  \"itertools 0.9.0\",\n  \"join_to_string\",\n@@ -1045,6 +1046,7 @@ dependencies = [\n name = \"ra_ide_db\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either\",\n  \"fst\",\n  \"log\",\n  \"once_cell\","}, {"sha": "a87f4052aa48fbfea6dfb9b9f69820ab92c72e43", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -12,6 +12,7 @@ format-buf = \"1.0.0\"\n join_to_string = \"0.1.3\"\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "45558c4487b44bd1db5e42775b659290df0d60be", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -129,7 +129,7 @@ impl<'a> QualifyPaths<'a> {\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_use_path(self.source_scope.db, def.into())?;\n+                let found_path = from.find_use_path(self.source_scope.db, def)?;\n                 let mut path = path_to_ast(found_path);\n \n                 let type_args = p"}, {"sha": "443eeaaf00c7b02d920787002104381cea00407d", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -4,7 +4,7 @@ use hir::{\n     AsAssocItem, AssocItemContainer, ModPath, Module, ModuleDef, PathResolution, Semantics, Trait,\n     Type,\n };\n-use ra_ide_db::{defs::Definition, imports_locator::ImportsLocator, RootDatabase};\n+use ra_ide_db::{imports_locator::ImportsLocator, RootDatabase};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -17,6 +17,7 @@ use crate::{\n     utils::insert_use_statement,\n     AssistId,\n };\n+use either::Either;\n \n // Assist: auto_import\n //\n@@ -127,16 +128,14 @@ impl AutoImportAssets {\n         ImportsLocator::new(db)\n             .find_imports(&self.get_search_query())\n             .into_iter()\n-            .filter_map(|definition| match &self.import_candidate {\n+            .filter_map(|candidate| match &self.import_candidate {\n                 ImportCandidate::TraitAssocItem(assoc_item_type, _) => {\n-                    let located_assoc_item = match definition {\n-                        Definition::ModuleDef(ModuleDef::Function(located_function)) => {\n-                            located_function\n-                                .as_assoc_item(db)\n-                                .map(|assoc| assoc.container(db))\n-                                .and_then(Self::assoc_to_trait)\n-                        }\n-                        Definition::ModuleDef(ModuleDef::Const(located_const)) => located_const\n+                    let located_assoc_item = match candidate {\n+                        Either::Left(ModuleDef::Function(located_function)) => located_function\n+                            .as_assoc_item(db)\n+                            .map(|assoc| assoc.container(db))\n+                            .and_then(Self::assoc_to_trait),\n+                        Either::Left(ModuleDef::Const(located_const)) => located_const\n                             .as_assoc_item(db)\n                             .map(|assoc| assoc.container(db))\n                             .and_then(Self::assoc_to_trait),\n@@ -154,13 +153,12 @@ impl AutoImportAssets {\n                             None,\n                             |_, assoc| Self::assoc_to_trait(assoc.container(db)),\n                         )\n-                        .map(|located_trait| ModuleDef::from(located_trait).into())\n+                        .map(ModuleDef::from)\n+                        .map(Either::Left)\n                 }\n                 ImportCandidate::TraitMethod(function_callee, _) => {\n                     let located_assoc_item =\n-                        if let Definition::ModuleDef(ModuleDef::Function(located_function)) =\n-                            definition\n-                        {\n+                        if let Either::Left(ModuleDef::Function(located_function)) = candidate {\n                             located_function\n                                 .as_assoc_item(db)\n                                 .map(|assoc| assoc.container(db))\n@@ -182,15 +180,19 @@ impl AutoImportAssets {\n                                 Self::assoc_to_trait(function.as_assoc_item(db)?.container(db))\n                             },\n                         )\n-                        .map(|located_trait| ModuleDef::from(located_trait).into())\n+                        .map(ModuleDef::from)\n+                        .map(Either::Left)\n+                }\n+                _ => Some(candidate),\n+            })\n+            .filter_map(|candidate| match candidate {\n+                Either::Left(module_def) => {\n+                    self.module_with_name_to_import.find_use_path(db, module_def)\n+                }\n+                Either::Right(macro_def) => {\n+                    self.module_with_name_to_import.find_use_path(db, macro_def)\n                 }\n-                _ => match definition {\n-                    Definition::ModuleDef(module_def) => Some(module_def.into()),\n-                    Definition::Macro(macro_def) => Some(macro_def.into()),\n-                    _ => None,\n-                },\n             })\n-            .filter_map(|item| self.module_with_name_to_import.find_use_path(db, item))\n             .filter(|use_path| !use_path.segments.is_empty())\n             .take(20)\n             .collect::<BTreeSet<_>>()"}, {"sha": "88b4c892600361bc2058d0b1d137cd81e49ae435", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -154,8 +154,7 @@ fn resolve_tuple_of_enum_def(\n }\n \n fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n-    let path =\n-        crate::ast_transform::path_to_ast(module.find_use_path(db, ModuleDef::from(var).into())?);\n+    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {"}, {"sha": "c5cfd875f2dd1ca06b65d68cadfd2399ce1045cc", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -143,17 +143,6 @@ impl ModuleDef {\n     }\n }\n \n-impl From<ModuleDef> for ItemInNs {\n-    fn from(module_def: ModuleDef) -> Self {\n-        match module_def {\n-            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n-                ItemInNs::Values(module_def.into())\n-            }\n-            _ => ItemInNs::Types(module_def.into()),\n-        }\n-    }\n-}\n-\n pub use hir_def::{\n     attr::Attrs, item_scope::ItemInNs, visibility::Visibility, AssocItemId, AssocItemLoc,\n };\n@@ -290,9 +279,9 @@ impl Module {\n     pub fn find_use_path(\n         self,\n         db: &dyn DefDatabase,\n-        item: ItemInNs,\n+        item: impl Into<ItemInNs>,\n     ) -> Option<hir_def::path::ModPath> {\n-        hir_def::find_path::find_path(db, item, self.into())\n+        hir_def::find_path::find_path(db, item.into(), self.into())\n     }\n }\n \n@@ -764,12 +753,6 @@ impl MacroDef {\n     }\n }\n \n-impl From<MacroDef> for ItemInNs {\n-    fn from(macro_def: MacroDef) -> Self {\n-        ItemInNs::Macros(macro_def.into())\n-    }\n-}\n-\n /// Invariant: `inner.as_assoc_item(db).is_some()`\n /// We do not actively enforce this invariant.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "62fb52e7278381137271f24c59025a616599858c", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n };\n \n use crate::{\n-    Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, GenericDef, Local, ModuleDef, StructField,\n-    VariantDef,\n+    code_model::ItemInNs, Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, GenericDef, Local,\n+    MacroDef, ModuleDef, StructField, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -228,3 +228,20 @@ impl From<(DefWithBodyId, PatId)> for Local {\n         Local { parent, pat_id }\n     }\n }\n+\n+impl From<MacroDef> for ItemInNs {\n+    fn from(macro_def: MacroDef) -> Self {\n+        ItemInNs::Macros(macro_def.into())\n+    }\n+}\n+\n+impl From<ModuleDef> for ItemInNs {\n+    fn from(module_def: ModuleDef) -> Self {\n+        match module_def {\n+            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n+                ItemInNs::Values(module_def.into())\n+            }\n+            _ => ItemInNs::Types(module_def.into()),\n+        }\n+    }\n+}"}, {"sha": "c3921bd406c6712dadb806ba0958956b7a6fddc9", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -17,6 +17,7 @@ fst = { version = \"0.4\", default-features = false }\n rustc-hash = \"1.1.0\"\n superslice = \"1.0.0\"\n once_cell = \"1.3.1\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "bf0d8db6067b088ece41e0b622a62fd74ee0adb0", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f28fe5bf2b8e4316cc67bf5f824333fc4f180/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=944f28fe5bf2b8e4316cc67bf5f824333fc4f180", "patch": "@@ -1,7 +1,7 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use hir::Semantics;\n+use hir::{MacroDef, ModuleDef, Semantics};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -10,6 +10,7 @@ use crate::{\n     symbol_index::{self, FileSymbol, Query},\n     RootDatabase,\n };\n+use either::Either;\n \n pub struct ImportsLocator<'a> {\n     sema: Semantics<'a, RootDatabase>,\n@@ -20,7 +21,7 @@ impl<'a> ImportsLocator<'a> {\n         Self { sema: Semantics::new(db) }\n     }\n \n-    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<Definition> {\n+    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<Either<ModuleDef, MacroDef>> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.sema.db;\n \n@@ -42,6 +43,11 @@ impl<'a> ImportsLocator<'a> {\n             .into_iter()\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(&import_candidate))\n+            .filter_map(|name_definition_to_import| match name_definition_to_import {\n+                Definition::ModuleDef(module_def) => Some(Either::Left(module_def)),\n+                Definition::Macro(macro_def) => Some(Either::Right(macro_def)),\n+                _ => None,\n+            })\n             .collect()\n     }\n "}]}