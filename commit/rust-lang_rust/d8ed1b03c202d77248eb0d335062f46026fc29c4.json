{"sha": "d8ed1b03c202d77248eb0d335062f46026fc29c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZWQxYjAzYzIwMmQ3NzI0OGViMGQzMzUwNjJmNDYwMjZmYzI5YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-24T15:47:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-24T15:47:22Z"}, "message": "Auto merge of #73692 - Dylan-DPC:rollup-ehzsbfw, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #73638 (Remove unused crate imports in 2018 edition crates)\n - #73639 (Change heuristic for determining range literal)\n - #73646 (Add some regression tests)\n - #73652 (Add re-exports to use suggestions)\n - #73667 (Update BTreeMap::new() doc)\n - #73675 (Update books)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d5a33e2cd87696a4b55cf789a903d1af3554bf69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5a33e2cd87696a4b55cf789a903d1af3554bf69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "html_url": "https://github.com/rust-lang/rust/commit/d8ed1b03c202d77248eb0d335062f46026fc29c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b66a89735305ebac93894461559576495ab920e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b66a89735305ebac93894461559576495ab920e", "html_url": "https://github.com/rust-lang/rust/commit/0b66a89735305ebac93894461559576495ab920e"}, {"sha": "be8f381c8a76c5c7e6d2c41a092edf173b23344a", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8f381c8a76c5c7e6d2c41a092edf173b23344a", "html_url": "https://github.com/rust-lang/rust/commit/be8f381c8a76c5c7e6d2c41a092edf173b23344a"}], "stats": {"total": 299, "additions": 248, "deletions": 51}, "files": [{"sha": "4e7c00bece1544d409312ec93467beb62b5bd0cb", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1 +1 @@\n-Subproject commit 30cd9dfe71c446de63826bb4472627af45acc9db\n+Subproject commit 4e7c00bece1544d409312ec93467beb62b5bd0cb"}, {"sha": "616962ad0dd80f34d8b802da038d0aed9dd691bb", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1 +1 @@\n-Subproject commit 5555a97f04ad7974ac6fb8fb47c267c4274adf4a\n+Subproject commit 616962ad0dd80f34d8b802da038d0aed9dd691bb"}, {"sha": "04d5d5d7ba624b6f5016298451f3a63d557f3260", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1 +1 @@\n-Subproject commit 5d40ba5c2515caffa7790cda621239dc21ef5a72\n+Subproject commit 04d5d5d7ba624b6f5016298451f3a63d557f3260"}, {"sha": "6f94ccb48da6fa4ed0031290f21411cf789f7d5e", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1 +1 @@\n-Subproject commit 7aa82129aa23e7e181efbeb8da03a2a897ef6afc\n+Subproject commit 6f94ccb48da6fa4ed0031290f21411cf789f7d5e"}, {"sha": "34cacebe79636178c61c40dcb02af0d1511b3cfb", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -488,7 +488,7 @@ struct MergeIter<K, V, I: Iterator<Item = (K, V)>> {\n }\n \n impl<K: Ord, V> BTreeMap<K, V> {\n-    /// Makes a new empty BTreeMap with a reasonable choice for B.\n+    /// Makes a new empty BTreeMap.\n     ///\n     /// Does not allocate anything on its own.\n     ///"}, {"sha": "960af4bfda0533ee12d400bb1f359d51cd989b15", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,7 +1,5 @@\n use super::*;\n \n-use test;\n-\n #[bench]\n #[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {"}, {"sha": "f92e40ed6ffabf0541c03cfbb7093214a2c94412", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -2,7 +2,6 @@ use super::*;\n \n use rustc_ast::ast;\n use rustc_ast::with_default_globals;\n-use rustc_span;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n "}, {"sha": "53d831749ceb7b401a66008222d301f96dcbed7c", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -358,7 +358,6 @@ cfg_if! {\n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;\n \n-        use std;\n         use std::thread;\n         pub use rayon::{join, scope};\n "}, {"sha": "f3dfec7ca72150386063bb74dacc5dd9df1508a1", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1511,13 +1511,7 @@ pub fn is_range_literal(sm: &SourceMap, expr: &Expr<'_>) -> bool {\n     // Check whether a span corresponding to a range expression is a\n     // range literal, rather than an explicit struct or `new()` call.\n     fn is_lit(sm: &SourceMap, span: &Span) -> bool {\n-        let end_point = sm.end_point(*span);\n-\n-        if let Ok(end_string) = sm.span_to_snippet(end_point) {\n-            !(end_string.ends_with('}') || end_string.ends_with(')'))\n-        } else {\n-            false\n-        }\n+        sm.span_to_snippet(*span).map(|range_src| range_src.contains(\"..\")).unwrap_or(false)\n     };\n \n     match expr.kind {"}, {"sha": "2854683b61bab30919de6906f8f421150d5f0dc4", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -643,18 +643,18 @@ impl<'a> Resolver<'a> {\n         let not_local_module = crate_name.name != kw::Crate;\n         let mut worklist =\n             vec![(start_module, Vec::<ast::PathSegment>::new(), true, not_local_module)];\n+        let mut worklist_via_import = vec![];\n \n-        while let Some((in_module, path_segments, accessible, in_module_is_extern)) = worklist.pop()\n+        while let Some((in_module, path_segments, accessible, in_module_is_extern)) =\n+            match worklist.pop() {\n+                None => worklist_via_import.pop(),\n+                Some(x) => Some(x),\n+            }\n         {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n-                // avoid imports entirely\n-                if name_binding.is_import() && !name_binding.is_extern_crate() {\n-                    return;\n-                }\n-\n-                // avoid non-importable candidates as well\n+                // avoid non-importable candidates\n                 if !name_binding.is_importable() {\n                     return;\n                 }\n@@ -667,6 +667,17 @@ impl<'a> Resolver<'a> {\n                     return;\n                 }\n \n+                let via_import = name_binding.is_import() && !name_binding.is_extern_crate();\n+\n+                // There is an assumption elsewhere that paths of variants are in the enum's\n+                // declaration and not imported. With this assumption, the variant component is\n+                // chopped and the rest of the path is assumed to be the enum's own path. For\n+                // errors where a variant is used as the type instead of the enum, this causes\n+                // funny looking invalid suggestions, i.e `foo` instead of `foo::MyEnum`.\n+                if via_import && name_binding.is_possibly_imported_variant() {\n+                    return;\n+                }\n+\n                 // collect results based on the filter function\n                 // avoid suggesting anything from the same module in which we are resolving\n                 if ident.name == lookup_ident.name\n@@ -724,7 +735,8 @@ impl<'a> Resolver<'a> {\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {\n-                            worklist.push((module, path_segments, child_accessible, is_extern));\n+                            if via_import { &mut worklist_via_import } else { &mut worklist }\n+                                .push((module, path_segments, child_accessible, is_extern));\n                         }\n                     }\n                 }"}, {"sha": "9ddcf9e1de7d191dabb0db017b6eeef9f83ac653", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -703,6 +703,13 @@ impl<'a> NameBinding<'a> {\n             }\n     }\n \n+    fn is_possibly_imported_variant(&self) -> bool {\n+        match self.kind {\n+            NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),\n+            _ => self.is_variant(),\n+        }\n+    }\n+\n     // We sometimes need to treat variants as `pub` for backwards compatibility.\n     fn pseudo_vis(&self) -> ty::Visibility {\n         if self.is_variant() && self.res().def_id().is_local() {"}, {"sha": "b668aa2595d67bc4dc81fe18ba7ea69f26f9e20c", "filename": "src/libstd/os/illumos/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,7 +1,5 @@\n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n \n-use libc;\n-\n use crate::fs::Metadata;\n use crate::sys_common::AsInner;\n "}, {"sha": "ada8eaa1c9745e61fe2810eb3d99575008574ecc", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -2,9 +2,6 @@\n \n //! Unix-specific networking functionality\n \n-#[cfg(unix)]\n-use libc;\n-\n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n #[allow(non_camel_case_types)]"}, {"sha": "adff6c489bbc90b0cf27ff4a07230456f4bbf57e", "filename": "src/libstd/sys/vxworks/args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fargs.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -56,7 +56,6 @@ mod imp {\n     use crate::ffi::{CStr, OsString};\n     use crate::marker::PhantomData;\n     use crate::ptr;\n-    use libc;\n \n     use crate::sys_common::mutex::Mutex;\n "}, {"sha": "7cc64658ee1a9d1dd6d45fe14efbe60dea4618f7", "filename": "src/libstd/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -6,7 +6,6 @@ use crate::path::Path;\n use crate::sys;\n use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n-use libc;\n \n /// Unix-specific extensions to [`File`].\n ///"}, {"sha": "3a1ff5fd3b9c64c4edb2ac96368b647f08aba4dd", "filename": "src/libstd/sys/vxworks/rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -13,7 +13,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n mod imp {\n     use crate::io;\n     use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n-    use libc;\n \n     pub fn fill_bytes(v: &mut [u8]) {\n         static RNG_INIT: AtomicBool = AtomicBool::new(false);"}, {"sha": "c90304c2b4a6a2d90dede9cd798a4b6d4063a8aa", "filename": "src/libstd/sys/vxworks/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Frwlock.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n-use libc;\n \n pub struct RWLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,"}, {"sha": "8365c9ee9c995dbdd70c045e30fb573dac424eeb", "filename": "src/libstd/sys/vxworks/time.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,7 +1,6 @@\n use crate::cmp::Ordering;\n use crate::time::Duration;\n use ::core::hash::{Hash, Hasher};\n-use libc;\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n use crate::convert::TryInto;\n@@ -104,7 +103,6 @@ mod inner {\n     use crate::fmt;\n     use crate::sys::cvt;\n     use crate::time::Duration;\n-    use libc;\n \n     use super::Timespec;\n "}, {"sha": "57187851a14e37c57cff6a173f6f6dd4cc9c152a", "filename": "src/libstd/sys/wasi/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,7 +1,6 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n use crate::sys_common::alloc::{realloc_fallback, MIN_ALIGN};\n-use libc;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "32660fdb41876158f95f34860e837cefd8c052cc", "filename": "src/test/ui/glob-resolve1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -29,3 +29,7 @@ fn main() {\n     foo::<C>(); //~ ERROR: cannot find type `C` in this scope\n     foo::<D>(); //~ ERROR: cannot find type `D` in this scope\n }\n+\n+mod other {\n+    pub fn import() {}\n+}"}, {"sha": "3c818f3ae48ea4634db7720946b065247e97b3a5", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -42,6 +42,11 @@ error[E0425]: cannot find function `import` in this scope\n    |\n LL |     import();\n    |     ^^^^^^ not found in this scope\n+   |\n+help: consider importing this function\n+   |\n+LL | use other::import;\n+   |\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/glob-resolve1.rs:28:11"}, {"sha": "b270f88b6886e3282f927c13de8e2704b071fe8c", "filename": "src/test/ui/impl-trait/issue-69840.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(impl_trait_in_bindings)]\n+#![allow(incomplete_features)]\n+\n+struct A<'a>(&'a ());\n+\n+trait Trait<T> {}\n+\n+impl<T> Trait<T> for () {}\n+\n+pub fn foo<'a>() {\n+    let _x: impl Trait<A<'a>> = ();\n+}\n+\n+fn main() {}"}, {"sha": "ee730910ee44153be90e0c503aaa40b825cfacd0", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -16,7 +16,7 @@ help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n-LL | use namespace_mix::xm2::S;\n+LL | use xm2::S;\n    |\n \n error[E0423]: expected value, found type alias `xm1::S`\n@@ -39,7 +39,7 @@ help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n-LL | use namespace_mix::xm2::S;\n+LL | use xm2::S;\n    |\n \n error[E0423]: expected value, found struct variant `m7::V`\n@@ -61,7 +61,7 @@ help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n-LL | use namespace_mix::xm8::V;\n+LL | use xm8::V;\n    |\n \n error[E0423]: expected value, found struct variant `xm7::V`\n@@ -83,7 +83,7 @@ help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n-LL | use namespace_mix::xm8::V;\n+LL | use xm8::V;\n    |\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied"}, {"sha": "d0fe6a0f59a879f4d899e91644fad76279e85db8", "filename": "src/test/ui/never_type/issue-51506.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,41 @@\n+#![feature(never_type, specialization)]\n+#![allow(incomplete_features)]\n+\n+use std::iter::{self, Empty};\n+\n+trait Trait {\n+    type Out: Iterator<Item = u32>;\n+\n+    fn f(&self) -> Option<Self::Out>;\n+}\n+\n+impl<T> Trait for T {\n+    default type Out = !; //~ ERROR: `!` is not an iterator\n+\n+    default fn f(&self) -> Option<Self::Out> {\n+        None\n+    }\n+}\n+\n+struct X;\n+\n+impl Trait for X {\n+    type Out = Empty<u32>;\n+\n+    fn f(&self) -> Option<Self::Out> {\n+        Some(iter::empty())\n+    }\n+}\n+\n+fn f<T: Trait>(a: T) {\n+    if let Some(iter) = a.f() {\n+        println!(\"Some\");\n+        for x in iter {\n+            println!(\"x = {}\", x);\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    f(10);\n+}"}, {"sha": "73865a9b5a02c0c5b208b179a2799f4980c8af98", "filename": "src/test/ui/never_type/issue-51506.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: `!` is not an iterator\n+  --> $DIR/issue-51506.rs:13:5\n+   |\n+LL |     type Out: Iterator<Item = u32>;\n+   |     ------------------------------- required by `Trait::Out`\n+...\n+LL |     default type Out = !;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ `!` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `!`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e65dba0a0382175520a4667b5c5db7ca74b6f289", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,16 @@\n+type Range = std::ops::Range<usize>;\n+\n+fn demo(r: &Range) {\n+    println!(\"{:?}\", r);\n+}\n+\n+fn tell(x: usize) -> usize {\n+    x\n+}\n+\n+fn main() {\n+    demo(tell(1)..tell(10));\n+    //~^ ERROR mismatched types\n+    demo(1..10);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "5167b87fd27b82e7a6fc35e1c2ea74fa51065ad9", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:12:10\n+   |\n+LL |     demo(tell(1)..tell(10));\n+   |          ^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected reference, found struct `std::ops::Range`\n+   |          help: consider borrowing here: `&(tell(1)..tell(10))`\n+   |\n+   = note: expected reference `&std::ops::Range<usize>`\n+                 found struct `std::ops::Range<usize>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:14:10\n+   |\n+LL |     demo(1..10);\n+   |          ^^^^^\n+   |          |\n+   |          expected reference, found struct `std::ops::Range`\n+   |          help: consider borrowing here: `&(1..10)`\n+   |\n+   = note: expected reference `&std::ops::Range<usize>`\n+                 found struct `std::ops::Range<{integer}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d4fd7cb1257e051469f95a879c2fd1ab4e1f7547", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -4,7 +4,9 @@ error[E0405]: cannot find trait `T` in this scope\n LL | impl T for Foo { }\n    |      ^ not found in this scope\n    |\n-help: consider importing this trait\n+help: consider importing one of these items\n+   |\n+LL | use baz::T;\n    |\n LL | use foo::bar::T;\n    |"}, {"sha": "16baa6c9b623311e58b0b4b6168b412118466e8c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -132,7 +132,7 @@ LL |     let _: E = m::n::Z;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0423]: expected value, found enum `m::n::Z`\n@@ -165,7 +165,7 @@ LL |     let _: E = m::n::Z::Fn;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0412]: cannot find type `Z` in this scope\n@@ -183,7 +183,7 @@ LL |     let _: E = m::n::Z::Struct;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n@@ -212,7 +212,7 @@ LL |     let _: E = m::n::Z::Unit {};\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0603]: enum `Z` is private"}, {"sha": "c37a6273de366e7e358ffeeb74ba1c3a19ceaef1", "filename": "src/test/ui/specialization/issue-44861.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,40 @@\n+#![crate_type = \"lib\"]\n+#![feature(specialization)]\n+#![feature(unsize, coerce_unsized)]\n+#![allow(incomplete_features)]\n+\n+use std::ops::CoerceUnsized;\n+\n+pub struct SmartassPtr<A: Smartass+?Sized>(A::Data);\n+\n+pub trait Smartass {\n+    type Data;\n+    type Data2: CoerceUnsized<*const [u8]>;\n+}\n+\n+pub trait MaybeObjectSafe {}\n+\n+impl MaybeObjectSafe for () {}\n+\n+impl<T> Smartass for T {\n+    type Data = <Self as Smartass>::Data2;\n+    default type Data2 = ();\n+    //~^ ERROR: the trait bound `(): std::ops::CoerceUnsized<*const [u8]>` is not satisfied\n+}\n+\n+impl Smartass for () {\n+    type Data2 = *const [u8; 1];\n+}\n+\n+impl Smartass for dyn MaybeObjectSafe {\n+    type Data = *const [u8];\n+    type Data2 = *const [u8; 0];\n+}\n+\n+impl<U: Smartass+?Sized, T: Smartass+?Sized> CoerceUnsized<SmartassPtr<T>> for SmartassPtr<U>\n+    where <U as Smartass>::Data: std::ops::CoerceUnsized<<T as Smartass>::Data>\n+{}\n+\n+pub fn conv(s: SmartassPtr<()>) -> SmartassPtr<dyn MaybeObjectSafe> {\n+    s\n+}"}, {"sha": "b41b17e76a6ab8949cfbab598dc92bba24ec4482", "filename": "src/test/ui/specialization/issue-44861.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `(): std::ops::CoerceUnsized<*const [u8]>` is not satisfied\n+  --> $DIR/issue-44861.rs:21:5\n+   |\n+LL |     type Data2: CoerceUnsized<*const [u8]>;\n+   |     --------------------------------------- required by `Smartass::Data2`\n+...\n+LL |     default type Data2 = ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::CoerceUnsized<*const [u8]>` is not implemented for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "47323d3096f3da4b8d83b7de32b189099f48af81", "filename": "src/test/ui/specialization/issue-59435.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,17 @@\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+struct MyStruct {}\n+\n+trait MyTrait {\n+    type MyType: Default;\n+}\n+\n+impl MyTrait for i32 {\n+    default type MyType = MyStruct;\n+    //~^ ERROR: the trait bound `MyStruct: std::default::Default` is not satisfied\n+}\n+\n+fn main() {\n+    let _x: <i32 as MyTrait>::MyType = <i32 as MyTrait>::MyType::default();\n+}"}, {"sha": "fd512a539a3ee6cdb4a88bbdc67b623e1d453bfa", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `MyStruct: std::default::Default` is not satisfied\n+  --> $DIR/issue-59435.rs:11:5\n+   |\n+LL |     type MyType: Default;\n+   |     --------------------- required by `MyTrait::MyType`\n+...\n+LL |     default type MyType = MyStruct;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `MyStruct`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9eb43eb2df43fd7032fdccba9c2ad1635fe49aa2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -7,7 +7,6 @@\n #![deny(warnings)]\n \n use serde::Serialize;\n-use toml;\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "6ac7c3b9b474a9dbacfdd4cb11fef57cb95da684", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -4,7 +4,6 @@\n use crate::errors::{Error, ErrorKind};\n use crate::runtest::ProcRes;\n use serde::Deserialize;\n-use serde_json;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n "}, {"sha": "134ac66b7d15b475e0bea26932c7959aa3e0d9a9", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -9,8 +9,6 @@ extern crate test;\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, Pretty, TestPaths};\n use crate::util::logv;\n-use env_logger;\n-use getopts;\n use getopts::Options;\n use log::*;\n use std::env;"}, {"sha": "30a922057eb20f42e1e9097067c27f17603f7e78", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -25,7 +25,6 @@ mod imp {\n \n #[cfg(unix)]\n mod imp {\n-    use libc;\n     use std::io;\n     use std::io::prelude::*;\n     use std::mem;"}, {"sha": "dd0c68ecd4965121ec723ecdf0c0166399be8c92", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -13,7 +13,6 @@ use crate::header::TestProps;\n use crate::json;\n use crate::util::get_pointer_width;\n use crate::util::{logv, PathBufExt};\n-use diff;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n "}]}