{"sha": "4f3722051092bfe33ec87836e8dd4d6d155c1fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzcyMjA1MTA5MmJmZTMzZWM4NzgzNmU4ZGQ0ZDZkMTU1YzFmYzE=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-09T00:04:32Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-09T00:04:32Z"}, "message": "Implement the same optimization in windows/time", "tree": {"sha": "b68b7ef7232d5de9c1ddf04f19878ce5a7b083ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68b7ef7232d5de9c1ddf04f19878ce5a7b083ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3722051092bfe33ec87836e8dd4d6d155c1fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3722051092bfe33ec87836e8dd4d6d155c1fc1", "html_url": "https://github.com/rust-lang/rust/commit/4f3722051092bfe33ec87836e8dd4d6d155c1fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3722051092bfe33ec87836e8dd4d6d155c1fc1/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c06e9e40c39aeec955fb2359f810285c262c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c06e9e40c39aeec955fb2359f810285c262c34", "html_url": "https://github.com/rust-lang/rust/commit/59c06e9e40c39aeec955fb2359f810285c262c34"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "91e4f7654840d7025d7c8e1735bdff30f52300d0", "filename": "library/std/src/sys/windows/time.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f3722051092bfe33ec87836e8dd4d6d155c1fc1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3722051092bfe33ec87836e8dd4d6d155c1fc1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs?ref=4f3722051092bfe33ec87836e8dd4d6d155c1fc1", "patch": "@@ -165,7 +165,7 @@ fn intervals2dur(intervals: u64) -> Duration {\n \n mod perf_counter {\n     use super::NANOS_PER_SEC;\n-    use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+    use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::c;\n     use crate::sys::cvt;\n     use crate::sys_common::mul_div_u64;\n@@ -197,27 +197,25 @@ mod perf_counter {\n     }\n \n     fn frequency() -> c::LARGE_INTEGER {\n-        static mut FREQUENCY: c::LARGE_INTEGER = 0;\n-        static STATE: AtomicUsize = AtomicUsize::new(0);\n-\n+        // Either the cached result of `QueryPerformanceFrequency` or `0` for\n+        // uninitialized. Storing this as a single `AtomicU64` allows us to use\n+        // `Relaxed` operations, as we are only interested in the effects on a\n+        // single memory location.\n+        static FREQUENCY: AtomicU64 = AtomicU64::new(0);\n+\n+        let cached = FREQUENCY.load(Ordering::Relaxed);\n+        // If a previous thread has filled in this global state, use that.\n+        if cached != 0 {\n+            return cached as c::LARGE_INTEGER;\n+        }\n+        // ... otherwise learn for ourselves ...\n+        let mut frequency = 0;\n         unsafe {\n-            // If a previous thread has filled in this global state, use that.\n-            if STATE.load(SeqCst) == 2 {\n-                return FREQUENCY;\n-            }\n-\n-            // ... otherwise learn for ourselves ...\n-            let mut frequency = 0;\n             cvt(c::QueryPerformanceFrequency(&mut frequency)).unwrap();\n-\n-            // ... and attempt to be the one thread that stores it globally for\n-            // all other threads\n-            if STATE.compare_exchange(0, 1, SeqCst, SeqCst).is_ok() {\n-                FREQUENCY = frequency;\n-                STATE.store(2, SeqCst);\n-            }\n-            frequency\n         }\n+\n+        FREQUENCY.store(frequency as u64, Ordering::Relaxed);\n+        frequency\n     }\n \n     fn query() -> c::LARGE_INTEGER {"}]}