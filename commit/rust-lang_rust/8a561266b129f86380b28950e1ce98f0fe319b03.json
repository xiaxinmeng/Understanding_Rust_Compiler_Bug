{"sha": "8a561266b129f86380b28950e1ce98f0fe319b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTYxMjY2YjEyOWY4NjM4MGIyODk1MGUxY2U5OGYwZmUzMTliMDM=", "commit": {"author": {"name": "Mateusz Czapli\u0144ski", "email": "czapkofan@gmail.com", "date": "2014-09-26T17:51:33Z"}, "committer": {"name": "Mateusz Czapli\u0144ski", "email": "czapkofan@gmail.com", "date": "2014-09-26T17:51:33Z"}, "message": "tiny linguistic correction in docs: s/its'/its/\n\nSee e.g.: http://dictionary.reference.com/browse/its", "tree": {"sha": "3a7c292d3a004aed7586d444ef1c8be096da374e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7c292d3a004aed7586d444ef1c8be096da374e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a561266b129f86380b28950e1ce98f0fe319b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a561266b129f86380b28950e1ce98f0fe319b03", "html_url": "https://github.com/rust-lang/rust/commit/8a561266b129f86380b28950e1ce98f0fe319b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a561266b129f86380b28950e1ce98f0fe319b03/comments", "author": {"login": "akavel", "id": 273837, "node_id": "MDQ6VXNlcjI3MzgzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/273837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akavel", "html_url": "https://github.com/akavel", "followers_url": "https://api.github.com/users/akavel/followers", "following_url": "https://api.github.com/users/akavel/following{/other_user}", "gists_url": "https://api.github.com/users/akavel/gists{/gist_id}", "starred_url": "https://api.github.com/users/akavel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akavel/subscriptions", "organizations_url": "https://api.github.com/users/akavel/orgs", "repos_url": "https://api.github.com/users/akavel/repos", "events_url": "https://api.github.com/users/akavel/events{/privacy}", "received_events_url": "https://api.github.com/users/akavel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "akavel", "id": 273837, "node_id": "MDQ6VXNlcjI3MzgzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/273837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akavel", "html_url": "https://github.com/akavel", "followers_url": "https://api.github.com/users/akavel/followers", "following_url": "https://api.github.com/users/akavel/following{/other_user}", "gists_url": "https://api.github.com/users/akavel/gists{/gist_id}", "starred_url": "https://api.github.com/users/akavel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akavel/subscriptions", "organizations_url": "https://api.github.com/users/akavel/orgs", "repos_url": "https://api.github.com/users/akavel/repos", "events_url": "https://api.github.com/users/akavel/events{/privacy}", "received_events_url": "https://api.github.com/users/akavel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d653c17a656e8fe1572c7a695e33b188eda0597", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d653c17a656e8fe1572c7a695e33b188eda0597", "html_url": "https://github.com/rust-lang/rust/commit/5d653c17a656e8fe1572c7a695e33b188eda0597"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "c571217268ddc5dfd7b9a0d3c9eba5f3fd774b05", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a561266b129f86380b28950e1ce98f0fe319b03/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a561266b129f86380b28950e1ce98f0fe319b03/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=8a561266b129f86380b28950e1ce98f0fe319b03", "patch": "@@ -37,11 +37,11 @@\n //! In the cleanup phase, personality routines invoke cleanup code associated\n //! with their stack frames (i.e. destructors).  Once stack has been unwound down\n //! to the handler frame level, unwinding stops and the last personality routine\n-//! transfers control to its' catch block.\n+//! transfers control to its catch block.\n //!\n //! ## Frame unwind info registration\n //!\n-//! Each module has its' own frame unwind info section (usually \".eh_frame\"), and\n+//! Each module has its own frame unwind info section (usually \".eh_frame\"), and\n //! unwinder needs to know about all of them in order for unwinding to be able to\n //! cross module boundaries.\n //!"}]}