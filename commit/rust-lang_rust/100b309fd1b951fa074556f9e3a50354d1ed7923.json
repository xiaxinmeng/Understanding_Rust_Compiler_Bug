{"sha": "100b309fd1b951fa074556f9e3a50354d1ed7923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMGIzMDlmZDFiOTUxZmEwNzQ1NTZmOWUzYTUwMzU0ZDFlZDc5MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-03T00:44:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-03T00:44:38Z"}, "message": "Auto merge of #36227 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 12 pull requests\n\n- Successful merges: #35754, #35793, #36099, #36160, #36171, #36178, #36180, #36190, #36198, #36205, #36210, #36223\n- Failed merges:", "tree": {"sha": "f558d88c104cc02ae35c3c6619b82d04426e1192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f558d88c104cc02ae35c3c6619b82d04426e1192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/100b309fd1b951fa074556f9e3a50354d1ed7923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/100b309fd1b951fa074556f9e3a50354d1ed7923", "html_url": "https://github.com/rust-lang/rust/commit/100b309fd1b951fa074556f9e3a50354d1ed7923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/100b309fd1b951fa074556f9e3a50354d1ed7923/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9786ce0eac75bbe293d04dadc959bd481236a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9786ce0eac75bbe293d04dadc959bd481236a6", "html_url": "https://github.com/rust-lang/rust/commit/ef9786ce0eac75bbe293d04dadc959bd481236a6"}, {"sha": "c70149004ac57c17d0cf73b6738464fea96abbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70149004ac57c17d0cf73b6738464fea96abbab", "html_url": "https://github.com/rust-lang/rust/commit/c70149004ac57c17d0cf73b6738464fea96abbab"}], "stats": {"total": 268, "additions": 211, "deletions": 57}, "files": [{"sha": "c5d8a94f39b052df9b2a497047f55549c5c8a833", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -15,9 +15,9 @@ before_install:\n script:\n   - docker run -v `pwd`:/build rust\n     sh -c \"\n-      ./configure --llvm-root=/usr/lib/llvm-3.7 &&\n+      ./configure --enable-rustbuild --llvm-root=/usr/lib/llvm-3.7 &&\n       make tidy &&\n-      make check-notidy -j4\n+      make check -j4\n     \"\n \n # Real testing happens on http://buildbot.rust-lang.org/"}, {"sha": "bcc1faea3b5d86f9c64d4380126de858cebd62c1", "filename": "configure", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/configure", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -360,6 +360,13 @@ abs_path() {\n     (unset CDPATH && cd \"$_path\" > /dev/null && pwd)\n }\n \n+HELP=0\n+for arg; do\n+    case \"$arg\" in\n+        --help) HELP=1;;\n+    esac\n+done\n+\n msg \"looking for configure programs\"\n need_cmd cmp\n need_cmd mkdir\n@@ -566,11 +573,8 @@ esac\n \n \n OPTIONS=\"\"\n-HELP=0\n-if [ \"$1\" = \"--help\" ]\n+if [ \"$HELP\" -eq 1 ]\n then\n-    HELP=1\n-    shift\n     echo\n     echo \"Usage: $CFG_SELF [options]\"\n     echo"}, {"sha": "6130b581387515af42c59a2ca4f8d31302b1c016", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -348,6 +348,7 @@ LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X_$(1))\n LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n \n LLVM_ALL_COMPONENTS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --components)\n+LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n \n endef\n "}, {"sha": "c135aa9b8fb956cd9b186af8736ff1d83597ac72", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -649,6 +649,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) = \\\n \t--lldb-python $$(CFG_LLDB_PYTHON) \\\n         --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n         --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n+        --llvm-version=\"$$(LLVM_VERSION_$(3))\" \\\n         --android-cross-path=$(CFG_ARM_LINUX_ANDROIDEABI_NDK) \\\n         --adb-path=$(CFG_ADB) \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR) \\"}, {"sha": "2b9d717cbd48dbaa3365257cb80916b32a10c393", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -148,6 +148,9 @@ pub fn compiletest(build: &Build,\n     if let Some(ref dir) = build.lldb_python_dir {\n         cmd.arg(\"--lldb-python-dir\").arg(dir);\n     }\n+    let llvm_config = build.llvm_config(target);\n+    let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+    cmd.arg(\"--llvm-version\").arg(llvm_version);\n \n     cmd.args(&build.flags.args);\n \n@@ -158,7 +161,6 @@ pub fn compiletest(build: &Build,\n     // Only pass correct values for these flags for the `run-make` suite as it\n     // requires that a C++ compiler was configured which isn't always the case.\n     if suite == \"run-make\" {\n-        let llvm_config = build.llvm_config(target);\n         let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n         let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n         cmd.arg(\"--cc\").arg(build.cc(target))"}, {"sha": "302ac68460c69cbf3c181befa10576b0c3349cc1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -203,6 +203,10 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n         cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n     }\n     cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    let target_config = build.config.target_config.get(target);\n+    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"CFG_LLVM_ROOT\", s);\n+    }\n     if build.config.llvm_static_stdcpp {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n                   compiler_file(build.cxx(target), \"libstdc++.a\"));"}, {"sha": "cc5d9c3685aba004f1e61cd17e5a1dd49974d7e8", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -2071,6 +2071,9 @@ macro scope.\n    trait of the same name. `{Self}` will be replaced with the type that is supposed\n    to implement the trait but doesn't. To use this, the `on_unimplemented` feature gate\n    must be enabled.\n+- `must_use` - on structs and enums, will warn if a value of this type isn't used or\n+   assigned to a variable. You may also include an optional message by using\n+   `#[must_use = \"message\"]` which will be given alongside the warning.\n \n ### Conditional compilation\n "}, {"sha": "f29a49dd5fe1ac236209d833849ad88c12746e29", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -189,10 +189,19 @@ macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n-/// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`. Can only be used in\n-/// functions that return `Result` because of the early return of `Err` that\n-/// it provides.\n+/// Helper macro for reducing boilerplate code for matching `Result` together\n+/// with converting downstream errors.\n+///\n+/// `try!` matches the given `Result`. In case of the `Ok` variant, the\n+/// expression has the value of the wrapped value.\n+///\n+/// In case of the `Err` variant, it retrieves the inner error. `try!` then\n+/// performs conversion using `From`. This provides automatic conversion\n+/// between specialized errors and more general ones. The resulting\n+/// error is then immediately returned.\n+///\n+/// Because of the early return, `try!` can only be used in functions that\n+/// return `Result`.\n ///\n /// # Examples\n ///\n@@ -201,18 +210,28 @@ macro_rules! debug_assert_eq {\n /// use std::fs::File;\n /// use std::io::prelude::*;\n ///\n-/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+/// enum MyError {\n+///     FileWriteError\n+/// }\n+///\n+/// impl From<io::Error> for MyError {\n+///     fn from(e: io::Error) -> MyError {\n+///         MyError::FileWriteError\n+///     }\n+/// }\n+///\n+/// fn write_to_file_using_try() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     try!(file.write_all(b\"This is a list of my best friends.\"));\n ///     println!(\"I wrote to the file\");\n ///     Ok(())\n /// }\n /// // This is equivalent to:\n-/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+/// fn write_to_file_using_match() -> Result<(), MyError> {\n ///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n-///         Err(e) => return Err(e),\n+///         Err(e) => return Err(From::from(e)),\n ///     }\n ///     println!(\"I wrote to the file\");\n ///     Ok(())"}, {"sha": "85a52da332db53a8842a803ee14b83dd70fbf2d8", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -282,6 +282,12 @@ macro_rules! forward_ref_binop {\n ///                Point { x: 3, y: 3 });\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. For example,\n+/// [std::time::SystemTime] implements `Add<Duration>`, which permits\n+/// operations of the form `SystemTime = SystemTime + Duration`.\n+///\n+/// [std::time::SystemTime]: ../../std/time/struct.SystemTime.html\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Add<RHS=Self> {\n@@ -349,6 +355,12 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///                Point { x: 1, y: 0 });\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. For example,\n+/// [std::time::SystemTime] implements `Sub<Duration>`, which permits\n+/// operations of the form `SystemTime = SystemTime - Duration`.\n+///\n+/// [std::time::SystemTime]: ../../std/time/struct.SystemTime.html\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Sub<RHS=Self> {"}, {"sha": "67152ed04ec1def340185f8d902b0ae1cf3c5ead", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -1028,6 +1028,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             err_out_of_scope(super_scope, sub_scope, cause) => {\n+                let (value_kind, value_msg) = match err.cmt.cat {\n+                    mc::Categorization::Rvalue(_) =>\n+                        (\"temporary value\", \"temporary value created here\"),\n+                    _ =>\n+                        (\"borrowed value\", \"does not live long enough\")\n+                };\n                 match cause {\n                     euv::ClosureCapture(s) => {\n                         // The primary span starts out as the closure creation point.\n@@ -1038,13 +1044,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             Some(primary) => {\n                                 db.span = MultiSpan::from_span(s);\n                                 db.span_label(primary, &format!(\"capture occurs here\"));\n-                                db.span_label(s, &format!(\"does not live long enough\"));\n+                                db.span_label(s, &value_msg);\n                             }\n                             None => ()\n                         }\n                     }\n                     _ => {\n-                        db.span_label(error_span, &format!(\"does not live long enough\"));\n+                        db.span_label(error_span, &value_msg);\n                     }\n                 }\n \n@@ -1053,14 +1059,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {\n-                        db.span_label(s1, &\"borrowed value dropped before borrower\");\n+                        db.span_label(s1, &format!(\"{} dropped before borrower\", value_kind));\n                         db.note(\"values in a scope are dropped in the opposite order \\\n                                 they are created\");\n                     }\n                     _ => {\n                         match sub_span {\n                             Some(s) => {\n-                                db.span_label(s, &\"borrowed value must be valid until here\");\n+                                db.span_label(s, &format!(\"{} needs to live until here\",\n+                                                          value_kind));\n                             }\n                             None => {\n                                 self.tcx.note_and_explain_region(\n@@ -1072,7 +1079,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         }\n                         match super_span {\n                             Some(s) => {\n-                                db.span_label(s, &\"borrowed value only valid until here\");\n+                                db.span_label(s, &format!(\"{} only lives until here\", value_kind));\n                             }\n                             None => {\n                                 self.tcx.note_and_explain_region(\n@@ -1085,9 +1092,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                if let Some(span) = statement_scope_span(self.tcx, super_scope) {\n-                    db.span_help(span,\n-                                 \"consider using a `let` binding to increase its lifetime\");\n+                if let Some(_) = statement_scope_span(self.tcx, super_scope) {\n+                    db.note(\"consider using a `let` binding to increase its lifetime\");\n                 }\n             }\n "}, {"sha": "dcdbe2a85259bee34e30089bb8e59d10aecaa71d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -883,7 +883,11 @@ impl Destination {\n             Style::FileNameStyle | Style::LineAndColumn => {}\n             Style::LineNumber => {\n                 try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                if cfg!(windows) {\n+                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN)));\n+                } else {\n+                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                }\n             }\n             Style::ErrorCode => {\n                 try!(self.start_attr(term::Attr::Bold));\n@@ -896,6 +900,9 @@ impl Destination {\n             }\n             Style::OldSchoolNoteText | Style::HeaderMsg => {\n                 try!(self.start_attr(term::Attr::Bold));\n+                if cfg!(windows) {\n+                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_WHITE)));\n+                }\n             }\n             Style::UnderlinePrimary | Style::LabelPrimary => {\n                 try!(self.start_attr(term::Attr::Bold));\n@@ -904,7 +911,11 @@ impl Destination {\n             Style::UnderlineSecondary |\n             Style::LabelSecondary => {\n                 try!(self.start_attr(term::Attr::Bold));\n-                try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                if cfg!(windows) {\n+                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN)));\n+                } else {\n+                    try!(self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE)));\n+                }\n             }\n             Style::NoStyle => {}\n             Style::Level(l) => {"}, {"sha": "d82d7dbe70f920afcfb53f0c1bce044c2407da5f", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -732,7 +732,13 @@ impl Level {\n     pub fn color(self) -> term::color::Color {\n         match self {\n             Bug | Fatal | PhaseFatal | Error => term::color::BRIGHT_RED,\n-            Warning => term::color::YELLOW,\n+            Warning => {\n+                if cfg!(windows) {\n+                    term::color::BRIGHT_YELLOW\n+                } else {\n+                    term::color::YELLOW\n+                }\n+            },\n             Note => term::color::BRIGHT_GREEN,\n             Help => term::color::BRIGHT_CYAN,\n             Cancelled => unreachable!(),"}, {"sha": "6c9cc5f5e132ac7e32730c1174a0d1decfbf7371", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -1878,11 +1878,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             hir::DefaultReturn(..) => self.tcx().mk_nil(),\n         };\n \n+        let input_tys = self_ty.into_iter().chain(arg_tys).collect();\n+\n+        debug!(\"ty_of_method_or_bare_fn: input_tys={:?}\", input_tys);\n+        debug!(\"ty_of_method_or_bare_fn: output_ty={:?}\", output_ty);\n+\n         (self.tcx().mk_bare_fn(ty::BareFnTy {\n             unsafety: unsafety,\n             abi: abi,\n             sig: ty::Binder(ty::FnSig {\n-                inputs: self_ty.into_iter().chain(arg_tys).collect(),\n+                inputs: input_tys,\n                 output: output_ty,\n                 variadic: decl.variadic\n             }),"}, {"sha": "f8a2e82edc2a632ce445f071a129aad40cb8256d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -248,9 +248,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         } else if let Some(rest) = size.checked_sub(min_len) {\n                             (inner_ty, tcx.mk_array(inner_ty, rest))\n                         } else {\n-                            span_err!(tcx.sess, pat.span, E0528,\n-                                      \"pattern requires at least {} elements but array has {}\",\n-                                      min_len, size);\n+                            struct_span_err!(tcx.sess, pat.span, E0528,\n+                                    \"pattern requires at least {} elements but array has {}\",\n+                                    min_len, size)\n+                                .span_label(pat.span,\n+                                    &format!(\"pattern cannot match array of {} elements\", size))\n+                                .emit();\n                             (inner_ty, tcx.types.err)\n                         }\n                     }\n@@ -270,7 +273,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     _ => {}\n                                 }\n                             }\n-                            err.emit();\n+\n+                            err.span_label( pat.span,\n+                                &format!(\"pattern cannot match with input type `{}`\", expected_ty)\n+                            ).emit();\n                         }\n                         (tcx.types.err, tcx.types.err)\n                     }"}, {"sha": "8980cb9076027aa5d7cf3693f3c313d12d7649ee", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -74,6 +74,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let fn_sig = self.tcx.liberate_late_bound_regions(\n             self.tcx.region_maps.call_site_extent(expr.id, body.id), &fn_ty.sig);\n+        let fn_sig =\n+            (**self).normalize_associated_types_in(body.span, body.id, &fn_sig);\n \n         check_fn(self, hir::Unsafety::Normal, expr.id, &fn_sig, decl, expr.id, &body);\n "}, {"sha": "81ee96459fd64edbf9e7c04eaa966d217de318ff", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -438,8 +438,9 @@ pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<Inte\n             } else {\n                 struct_span_err!(diag, attr.span, E0558,\n                                  \"export_name attribute has invalid format\")\n-                                .help(\"use #[export_name=\\\"*\\\"]\")\n-                                .emit();\n+                    .span_label(attr.span,\n+                                &format!(\"did you mean #[export_name=\\\"*\\\"]?\"))\n+                    .emit();\n                 None\n             }\n         } else {"}, {"sha": "e912650f112929d5b228a37efbfdfeab875480d1", "filename": "src/test/compile-fail/E0528.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0528.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0528.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0528.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -13,7 +13,9 @@\n fn main() {\n     let r = &[1, 2];\n     match r {\n-        &[a, b, c, rest..] => { //~ ERROR E0528\n+        &[a, b, c, rest..] => {\n+        //~^ ERROR E0528\n+        //~| NOTE pattern cannot match array of 2 elements\n         }\n     }\n }"}, {"sha": "18d3e68816aad61c418eb008282db68e39740ab9", "filename": "src/test/compile-fail/E0529.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0529.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -13,7 +13,9 @@\n fn main() {\n     let r: f32 = 1.0;\n     match r {\n-        [a, b] => { //~ ERROR E0529\n+        [a, b] => {\n+        //~^ ERROR E0529\n+        //~| NOTE pattern cannot match with input type `f32`\n         }\n     }\n }"}, {"sha": "0c2ca69849166241c117ce70f169a9414b3a2975", "filename": "src/test/compile-fail/E0558.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0558.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2FE0558.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0558.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[export_name] //~ ERROR E0558\n+#[export_name]\n+//~^ ERROR E0558\n+//~| NOTE did you mean #[export_name=\"*\"]?\n+\n pub fn something() {}\n \n fn main() {}"}, {"sha": "95c74348e788bd1c7bebe746c21038d24347fdc2", "filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion-suffixes.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -25,36 +25,36 @@ fn f() {\n \n     v3.push(&'x');           // statement 6\n     //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n+    //~| NOTE temporary value created here\n+    //~| NOTE temporary value only lives until here\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     {\n \n         let mut v4 = Vec::new(); // (sub) statement 0\n \n         v4.push(&'y');\n         //~^ ERROR borrowed value does not live long enough\n-        //~| NOTE does not live long enough\n-        //~| NOTE borrowed value only valid until here\n-        //~| HELP consider using a `let` binding to increase its lifetime\n+        //~| NOTE temporary value created here\n+        //~| NOTE temporary value only lives until here\n+        //~| NOTE consider using a `let` binding to increase its lifetime\n \n     }                       // (statement 7)\n-    //~^ NOTE borrowed value must be valid until here\n+    //~^ NOTE temporary value needs to live until here\n \n     let mut v5 = Vec::new(); // statement 8\n \n     v5.push(&'z');\n     //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n+    //~| NOTE temporary value created here\n+    //~| NOTE temporary value only lives until here\n+    //~| NOTE consider using a `let` binding to increase its lifetime\n \n     v1.push(&old[0]);\n }\n //~^ NOTE borrowed value dropped before borrower\n-//~| NOTE borrowed value must be valid until here\n-//~| NOTE borrowed value must be valid until here\n+//~| NOTE temporary value needs to live until here\n+//~| NOTE temporary value needs to live until here\n \n fn main() {\n     f();"}, {"sha": "f5ea7a2108e79b207539a967dea677fdcea92b9a", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -24,8 +24,8 @@ fn broken() {\n         x += 1; //~ ERROR cannot assign\n         //~^ NOTE assignment to borrowed `x` occurs here\n     }\n-    //~^ NOTE borrowed value only valid until here\n+    //~^ NOTE borrowed value only lives until here\n }\n-//~^ NOTE borrowed value must be valid until here\n+//~^ NOTE borrowed value needs to live until here\n \n fn main() { }"}, {"sha": "53a8a403b6410167cd5611c4c69a3d7760aa9372", "filename": "src/test/run-pass/issue-36023.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Frun-pass%2Fissue-36023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Frun-pass%2Fissue-36023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36023.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// min-llvm-version 3.9\n+\n use std::ops::Deref;\n \n fn main() {"}, {"sha": "adde0ed30667491c96813607b8b4c04bab3d80b1", "filename": "src/test/run-pass/issue-36139-normalize-closure-sig.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Frun-pass%2Fissue-36139-normalize-closure-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Frun-pass%2Fissue-36139-normalize-closure-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36139-normalize-closure-sig.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Previously the closure's argument would be inferred to\n+// <S as ITrait<'a>>::Item, causing an error in MIR type\n+// checking\n+\n+trait ITrait<'a> {type Item;}\n+\n+struct S {}\n+\n+impl<'a> ITrait<'a> for S { type Item = &'a mut usize; }\n+\n+fn m<T, I, F>(_: F)\n+    where I: for<'a> ITrait<'a>,\n+          F: for<'a> FnMut(<I as ITrait<'a>>::Item) { }\n+\n+\n+fn main() {\n+    m::<usize,S,_>(|x| { *x += 1; });\n+}"}, {"sha": "eeafaab44c62007efc8ba12c1114f1d50e9d00fb", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -10,12 +10,7 @@\n \n fn f() {\n     let x = [1].iter();\n-    //~^ ERROR borrowed value does not live long enough\n-    //~| NOTE does not live long enough\n-    //~| NOTE borrowed value only valid until here\n-    //~| HELP consider using a `let` binding to increase its lifetime\n }\n-//~^ borrowed value must be valid until here\n \n fn main() {\n     f();", "previous_filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion.rs"}, {"sha": "91600340019c3c0c9c5758986173fbbb7802f1f9", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -0,0 +1,14 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/borrowck-let-suggestion.rs:12:13\n+   |\n+12 |     let x = [1].iter();\n+   |             ^^^       - temporary value only lives until here\n+   |             |\n+   |             temporary value created here\n+13 | }\n+   | - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "3fedb2884bc58c8cd3c52f469c3f19f3cdf5d224", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -5,10 +5,10 @@ error: `x` does not live long enough\n    |                                    ^\n    |                                    |\n    |                                    does not live long enough\n-   |                                    borrowed value only valid until here\n+   |                                    borrowed value only lives until here\n ...\n 23 | }\n-   | - borrowed value must be valid until here\n+   | - borrowed value needs to live until here\n \n error: aborting due to previous error\n "}, {"sha": "5d522736089ea4d2acf1340b99bf5a6cd6c23583", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -152,6 +152,9 @@ pub struct Config {\n     // Version of LLDB\n     pub lldb_version: Option<String>,\n \n+    // Version of LLVM\n+    pub llvm_version: Option<String>,\n+\n     // Path to the android tools\n     pub android_cross_path: PathBuf,\n "}, {"sha": "899a366a4bb7412b42ae3a09b1a69197c53ab410", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -44,7 +44,9 @@ impl EarlyProps {\n                 (config.mode == common::Pretty && parse_name_directive(ln, \"ignore-pretty\")) ||\n                 (config.target != config.host &&\n                  parse_name_directive(ln, \"ignore-cross-compile\")) ||\n-                ignore_gdb(config, ln) || ignore_lldb(config, ln);\n+                ignore_gdb(config, ln) ||\n+                ignore_lldb(config, ln) ||\n+                ignore_llvm(config, ln);\n \n             props.should_fail = props.should_fail || parse_name_directive(ln, \"should-fail\");\n         });\n@@ -115,6 +117,24 @@ impl EarlyProps {\n                 false\n             }\n         }\n+\n+        fn ignore_llvm(config: &Config, line: &str) -> bool {\n+            if let Some(ref actual_version) = config.llvm_version {\n+                if line.contains(\"min-llvm-version\") {\n+                    let min_version = line.trim()\n+                        .split(' ')\n+                        .last()\n+                        .expect(\"Malformed llvm version directive\");\n+                    // Ignore if actual version is smaller the minimum required\n+                    // version\n+                    &actual_version[..] < min_version\n+                } else {\n+                    false\n+                }\n+            } else {\n+                false\n+            }\n+        }\n     }\n }\n "}, {"sha": "4afeb3613319b025bb8291e5d03ce4cf622a8a7c", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100b309fd1b951fa074556f9e3a50354d1ed7923/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=100b309fd1b951fa074556f9e3a50354d1ed7923", "patch": "@@ -99,6 +99,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n           optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"VERSION STRING\"),\n           optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\"),\n+          optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\"),\n           optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n@@ -170,6 +171,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         host: opt_str2(matches.opt_str(\"host\")),\n         gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n         lldb_version: extract_lldb_version(matches.opt_str(\"lldb-version\")),\n+        llvm_version: matches.opt_str(\"llvm-version\"),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n         adb_test_dir: format!(\"{}/{}\","}]}