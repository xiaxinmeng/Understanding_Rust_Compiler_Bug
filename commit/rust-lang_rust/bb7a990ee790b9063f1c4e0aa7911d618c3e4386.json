{"sha": "bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2E5OTBlZTc5MGI5MDYzZjFjNGUwYWE3OTExZDYxOGMzZTQzODY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-04T14:54:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-05-04T14:54:25Z"}, "message": "Extract driver.rs", "tree": {"sha": "5a6009fd71d041d6d3b176bc70eab2cb9a5fe0f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6009fd71d041d6d3b176bc70eab2cb9a5fe0f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "html_url": "https://github.com/rust-lang/rust/commit/bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97747aa91a731b537251f327cd30924f4aa8d935", "url": "https://api.github.com/repos/rust-lang/rust/commits/97747aa91a731b537251f327cd30924f4aa8d935", "html_url": "https://github.com/rust-lang/rust/commit/97747aa91a731b537251f327cd30924f4aa8d935"}], "stats": {"total": 564, "additions": 290, "deletions": 274}, "files": [{"sha": "a3865b34524abe27400532a8bb5aad9231fe0153", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "patch": "@@ -2,61 +2,7 @@ use rustc::ty::adjustment::PointerCast;\n \n use crate::prelude::*;\n \n-struct PrintOnPanic<F: Fn() -> String>(F);\n-impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n-    fn drop(&mut self) {\n-        if ::std::thread::panicking() {\n-            println!(\"{}\", (self.0)());\n-        }\n-    }\n-}\n-\n-pub fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n-    mono_item: MonoItem<'tcx>,\n-    linkage: Linkage,\n-) {\n-    let tcx = cx.tcx;\n-    match mono_item {\n-        MonoItem::Fn(inst) => {\n-            let _inst_guard =\n-                PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).as_str()));\n-            debug_assert!(!inst.substs.needs_infer());\n-            let _mir_guard = PrintOnPanic(|| {\n-                match inst.def {\n-                    InstanceDef::Item(_)\n-                    | InstanceDef::DropGlue(_, _)\n-                    | InstanceDef::Virtual(_, _)\n-                        if inst.def_id().krate == LOCAL_CRATE =>\n-                    {\n-                        let mut mir = ::std::io::Cursor::new(Vec::new());\n-                        crate::rustc_mir::util::write_mir_pretty(\n-                            tcx,\n-                            Some(inst.def_id()),\n-                            &mut mir,\n-                        )\n-                        .unwrap();\n-                        String::from_utf8(mir.into_inner()).unwrap()\n-                    }\n-                    _ => {\n-                        // FIXME fix write_mir_pretty for these instances\n-                        format!(\"{:#?}\", tcx.instance_mir(inst.def))\n-                    }\n-                }\n-            });\n-\n-            trans_fn(cx, inst, linkage);\n-        }\n-        MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(&mut cx.ccx, def_id);\n-        }\n-        MonoItem::GlobalAsm(node_id) => tcx\n-            .sess\n-            .fatal(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n-    }\n-}\n-\n-fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,"}, {"sha": "6ec558705bc3a78db5aa28c3f3eb1e8f78ce67be", "filename": "src/driver.rs", "status": "added", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "patch": "@@ -0,0 +1,273 @@\n+use std::any::Any;\n+use std::ffi::CString;\n+use std::fs::File;\n+use std::os::raw::{c_char, c_int};\n+\n+use rustc::middle::cstore::EncodedMetadata;\n+use rustc::mir::mono::{Linkage as RLinkage, Visibility};\n+use rustc::session::config::{DebugInfo, OutputType};\n+use rustc_codegen_ssa::back::linker::LinkerInfo;\n+use rustc_codegen_ssa::CrateInfo;\n+use rustc_mir::monomorphize::partitioning::CodegenUnitExt;\n+\n+use cranelift_faerie::*;\n+\n+use crate::prelude::*;\n+\n+pub fn codegen_crate<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    metadata: EncodedMetadata,\n+    _need_metadata_module: bool,\n+) -> Box<dyn Any> {\n+    env_logger::init();\n+    if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n+        && std::env::var(\"SHOULD_RUN\").is_ok()\n+    {\n+        tcx.sess\n+            .err(\"Can't JIT run non executable (SHOULD_RUN env var is set)\");\n+    }\n+\n+    tcx.sess.abort_if_errors();\n+\n+    let mut log = if cfg!(debug_assertions) {\n+        Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\")).unwrap())\n+    } else {\n+        None\n+    };\n+\n+    if std::env::var(\"SHOULD_RUN\").is_ok() {\n+        let mut jit_module: Module<SimpleJITBackend> =\n+            Module::new(SimpleJITBuilder::new(cranelift_module::default_libcall_names()));\n+        assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n+\n+        let sig = Signature {\n+            params: vec![\n+                AbiParam::new(jit_module.target_config().pointer_type()),\n+                AbiParam::new(jit_module.target_config().pointer_type()),\n+            ],\n+            returns: vec![AbiParam::new(\n+                jit_module.target_config().pointer_type(), /*isize*/\n+            )],\n+            call_conv: CallConv::SystemV,\n+        };\n+        let main_func_id = jit_module\n+            .declare_function(\"main\", Linkage::Import, &sig)\n+            .unwrap();\n+\n+        codegen_cgus(tcx, &mut jit_module, &mut None, &mut log);\n+        crate::allocator::codegen(tcx.sess, &mut jit_module);\n+        jit_module.finalize_definitions();\n+\n+        tcx.sess.abort_if_errors();\n+\n+        let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+\n+        println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+\n+        let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+            unsafe { ::std::mem::transmute(finalized_main) };\n+\n+        let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_| String::new());\n+        let args = args\n+            .split(\" \")\n+            .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n+            .map(|arg| CString::new(arg).unwrap())\n+            .collect::<Vec<_>>();\n+        let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+        // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n+\n+        let ret = f(args.len() as c_int, argv.as_ptr());\n+\n+        jit_module.finish();\n+        std::process::exit(ret);\n+    } else {\n+        let new_module = |name: String| {\n+            let module: Module<FaerieBackend> = Module::new(\n+                FaerieBuilder::new(\n+                    crate::build_isa(tcx.sess),\n+                    name + \".o\",\n+                    FaerieTrapCollection::Disabled,\n+                    cranelift_module::default_libcall_names(),\n+                )\n+                .unwrap(),\n+            );\n+            assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n+            module\n+        };\n+\n+        let emit_module = |name: &str,\n+                            kind: ModuleKind,\n+                            mut module: Module<FaerieBackend>,\n+                            debug: Option<DebugContext>| {\n+            module.finalize_definitions();\n+            let mut artifact = module.finish().artifact;\n+\n+            if let Some(mut debug) = debug {\n+                debug.emit(&mut artifact);\n+            }\n+\n+            let tmp_file = tcx\n+                .output_filenames(LOCAL_CRATE)\n+                .temp_path(OutputType::Object, Some(name));\n+            let obj = artifact.emit().unwrap();\n+            std::fs::write(&tmp_file, obj).unwrap();\n+            CompiledModule {\n+                name: name.to_string(),\n+                kind,\n+                object: Some(tmp_file),\n+                bytecode: None,\n+                bytecode_compressed: None,\n+            }\n+        };\n+\n+        let mut faerie_module = new_module(\"some_file\".to_string());\n+\n+        let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n+            // macOS debuginfo doesn't work yet (see #303)\n+            && !tcx.sess.target.target.options.is_like_osx\n+        {\n+            let debug = DebugContext::new(\n+                tcx,\n+                faerie_module.target_config().pointer_type().bytes() as u8,\n+            );\n+            Some(debug)\n+        } else {\n+            None\n+        };\n+\n+        codegen_cgus(tcx, &mut faerie_module, &mut debug, &mut log);\n+\n+        tcx.sess.abort_if_errors();\n+\n+        let mut allocator_module = new_module(\"allocator_shim.o\".to_string());\n+        let created_alloc_shim = crate::allocator::codegen(tcx.sess, &mut allocator_module);\n+\n+        rustc_incremental::assert_dep_graph(tcx);\n+        rustc_incremental::save_dep_graph(tcx);\n+        rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n+\n+        Box::new(CodegenResults {\n+            crate_name: tcx.crate_name(LOCAL_CRATE),\n+            modules: vec![emit_module(\n+                \"dummy_name\",\n+                ModuleKind::Regular,\n+                faerie_module,\n+                debug,\n+            )],\n+            allocator_module: if created_alloc_shim {\n+                Some(emit_module(\n+                    \"allocator_shim\",\n+                    ModuleKind::Allocator,\n+                    allocator_module,\n+                    None,\n+                ))\n+            } else {\n+                None\n+            },\n+            metadata_module: Some(CompiledModule {\n+                name: \"dummy_metadata\".to_string(),\n+                kind: ModuleKind::Metadata,\n+                object: None,\n+                bytecode: None,\n+                bytecode_compressed: None,\n+            }),\n+            crate_hash: tcx.crate_hash(LOCAL_CRATE),\n+            metadata,\n+            windows_subsystem: None, // Windows is not yet supported\n+            linker_info: LinkerInfo::new(tcx),\n+            crate_info: CrateInfo::new(tcx),\n+        })\n+    }\n+}\n+\n+fn codegen_cgus<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend + 'static>,\n+    debug: &mut Option<DebugContext<'tcx>>,\n+    log: &mut Option<File>,\n+) {\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let mono_items = cgus\n+        .iter()\n+        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n+        .flatten()\n+        .collect::<FxHashMap<_, (_, _)>>();\n+\n+    codegen_mono_items(tcx, module, debug.as_mut(), log, mono_items);\n+\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n+}\n+\n+fn codegen_mono_items<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend + 'static>,\n+    debug_context: Option<&mut DebugContext<'tcx>>,\n+    log: &mut Option<File>,\n+    mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n+) {\n+    let mut cx = CodegenCx::new(tcx, module, debug_context);\n+    time(\"codegen mono items\", move || {\n+        for (mono_item, (linkage, visibility)) in mono_items {\n+            crate::unimpl::try_unimpl(tcx, log, || {\n+                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                trans_mono_item(&mut cx, mono_item, linkage);\n+            });\n+        }\n+\n+        cx.finalize();\n+    });\n+}\n+\n+fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n+    mono_item: MonoItem<'tcx>,\n+    linkage: Linkage,\n+) {\n+    let tcx = cx.tcx;\n+    match mono_item {\n+        MonoItem::Fn(inst) => {\n+            let _inst_guard =\n+                PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).as_str()));\n+            debug_assert!(!inst.substs.needs_infer());\n+            let _mir_guard = PrintOnPanic(|| {\n+                match inst.def {\n+                    InstanceDef::Item(_)\n+                    | InstanceDef::DropGlue(_, _)\n+                    | InstanceDef::Virtual(_, _)\n+                        if inst.def_id().krate == LOCAL_CRATE =>\n+                    {\n+                        let mut mir = ::std::io::Cursor::new(Vec::new());\n+                        crate::rustc_mir::util::write_mir_pretty(\n+                            tcx,\n+                            Some(inst.def_id()),\n+                            &mut mir,\n+                        )\n+                        .unwrap();\n+                        String::from_utf8(mir.into_inner()).unwrap()\n+                    }\n+                    _ => {\n+                        // FIXME fix write_mir_pretty for these instances\n+                        format!(\"{:#?}\", tcx.instance_mir(inst.def))\n+                    }\n+                }\n+            });\n+\n+            crate::base::trans_fn(cx, inst, linkage);\n+        }\n+        MonoItem::Static(def_id) => {\n+            crate::constant::codegen_static(&mut cx.ccx, def_id);\n+        }\n+        MonoItem::GlobalAsm(node_id) => tcx\n+            .sess\n+            .fatal(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n+    }\n+}\n+\n+fn time<R>(name: &str, f: impl FnOnce() -> R) -> R {\n+    println!(\"[{}] start\", name);\n+    let before = std::time::Instant::now();\n+    let res = f();\n+    let after = std::time::Instant::now();\n+    println!(\"[{}] end time: {:?}\", name, after - before);\n+    res\n+}"}, {"sha": "bfadb90ae73c31c0393af3aade4b30656b0016d5", "filename": "src/lib.rs", "status": "modified", "additions": 16, "deletions": 219, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7a990ee790b9063f1c4e0aa7911d618c3e4386/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bb7a990ee790b9063f1c4e0aa7911d618c3e4386", "patch": "@@ -14,24 +14,16 @@ extern crate rustc_target;\n extern crate syntax;\n \n use std::any::Any;\n-use std::ffi::CString;\n-use std::fs::File;\n-use std::os::raw::{c_char, c_int};\n use std::sync::mpsc;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n-use rustc::mir::mono::{Linkage as RLinkage, Visibility};\n-use rustc::session::config::{DebugInfo, OutputFilenames, OutputType};\n+use rustc::session::config::OutputFilenames;\n use rustc::ty::query::Providers;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_ssa::back::linker::LinkerInfo;\n-use rustc_codegen_ssa::CrateInfo;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_mir::monomorphize::partitioning::CodegenUnitExt;\n \n use cranelift::codegen::settings;\n-use cranelift_faerie::*;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -44,6 +36,7 @@ mod base;\n mod common;\n mod constant;\n mod debuginfo;\n+mod driver;\n mod intrinsics;\n mod linkage;\n mod main_shim;\n@@ -103,6 +96,15 @@ mod prelude {\n     pub use crate::trap::*;\n     pub use crate::unimpl::{unimpl, with_unimpl_span};\n     pub use crate::{Caches, CodegenCx};\n+\n+    pub struct PrintOnPanic<F: Fn() -> String>(pub F);\n+    impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n+        fn drop(&mut self) {\n+            if ::std::thread::panicking() {\n+                println!(\"{}\", (self.0)());\n+            }\n+        }\n+    }\n }\n \n pub struct Caches<'tcx> {\n@@ -194,168 +196,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         metadata: EncodedMetadata,\n-        _need_metadata_module: bool,\n+        need_metadata_module: bool,\n         _rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any> {\n-        env_logger::init();\n-        if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n-            && std::env::var(\"SHOULD_RUN\").is_ok()\n-        {\n-            tcx.sess\n-                .err(\"Can't JIT run non executable (SHOULD_RUN env var is set)\");\n-        }\n-\n-        tcx.sess.abort_if_errors();\n-\n-        let mut log = if cfg!(debug_assertions) {\n-            Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\")).unwrap())\n-        } else {\n-            None\n-        };\n-\n-        if std::env::var(\"SHOULD_RUN\").is_ok() {\n-            let mut jit_module: Module<SimpleJITBackend> =\n-                Module::new(SimpleJITBuilder::new(cranelift_module::default_libcall_names()));\n-            assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n-\n-            let sig = Signature {\n-                params: vec![\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                ],\n-                returns: vec![AbiParam::new(\n-                    jit_module.target_config().pointer_type(), /*isize*/\n-                )],\n-                call_conv: CallConv::SystemV,\n-            };\n-            let main_func_id = jit_module\n-                .declare_function(\"main\", Linkage::Import, &sig)\n-                .unwrap();\n-\n-            codegen_cgus(tcx, &mut jit_module, &mut None, &mut log);\n-            crate::allocator::codegen(tcx.sess, &mut jit_module);\n-            jit_module.finalize_definitions();\n-\n-            tcx.sess.abort_if_errors();\n-\n-            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n-            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n-\n-            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-                unsafe { ::std::mem::transmute(finalized_main) };\n-\n-            let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_| String::new());\n-            let args = args\n-                .split(\" \")\n-                .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n-                .map(|arg| CString::new(arg).unwrap())\n-                .collect::<Vec<_>>();\n-            let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n-            // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n-\n-            let ret = f(args.len() as c_int, argv.as_ptr());\n-\n-            jit_module.finish();\n-            std::process::exit(ret);\n-        } else {\n-            let new_module = |name: String| {\n-                let module: Module<FaerieBackend> = Module::new(\n-                    FaerieBuilder::new(\n-                        build_isa(tcx.sess),\n-                        name + \".o\",\n-                        FaerieTrapCollection::Disabled,\n-                        cranelift_module::default_libcall_names(),\n-                    )\n-                    .unwrap(),\n-                );\n-                assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n-                module\n-            };\n-\n-            let emit_module = |name: &str,\n-                               kind: ModuleKind,\n-                               mut module: Module<FaerieBackend>,\n-                               debug: Option<DebugContext>| {\n-                module.finalize_definitions();\n-                let mut artifact = module.finish().artifact;\n-\n-                if let Some(mut debug) = debug {\n-                    debug.emit(&mut artifact);\n-                }\n-\n-                let tmp_file = tcx\n-                    .output_filenames(LOCAL_CRATE)\n-                    .temp_path(OutputType::Object, Some(name));\n-                let obj = artifact.emit().unwrap();\n-                std::fs::write(&tmp_file, obj).unwrap();\n-                CompiledModule {\n-                    name: name.to_string(),\n-                    kind,\n-                    object: Some(tmp_file),\n-                    bytecode: None,\n-                    bytecode_compressed: None,\n-                }\n-            };\n-\n-            let mut faerie_module = new_module(\"some_file\".to_string());\n-\n-            let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None\n-                // macOS debuginfo doesn't work yet (see #303)\n-                && !tcx.sess.target.target.options.is_like_osx\n-            {\n-                let debug = DebugContext::new(\n-                    tcx,\n-                    faerie_module.target_config().pointer_type().bytes() as u8,\n-                );\n-                Some(debug)\n-            } else {\n-                None\n-            };\n-\n-            codegen_cgus(tcx, &mut faerie_module, &mut debug, &mut log);\n-\n-            tcx.sess.abort_if_errors();\n-\n-            let mut allocator_module = new_module(\"allocator_shim.o\".to_string());\n-            let created_alloc_shim = crate::allocator::codegen(tcx.sess, &mut allocator_module);\n-\n-            rustc_incremental::assert_dep_graph(tcx);\n-            rustc_incremental::save_dep_graph(tcx);\n-            rustc_incremental::finalize_session_directory(tcx.sess, tcx.crate_hash(LOCAL_CRATE));\n-\n-            return Box::new(CodegenResults {\n-                crate_name: tcx.crate_name(LOCAL_CRATE),\n-                modules: vec![emit_module(\n-                    \"dummy_name\",\n-                    ModuleKind::Regular,\n-                    faerie_module,\n-                    debug,\n-                )],\n-                allocator_module: if created_alloc_shim {\n-                    Some(emit_module(\n-                        \"allocator_shim\",\n-                        ModuleKind::Allocator,\n-                        allocator_module,\n-                        None,\n-                    ))\n-                } else {\n-                    None\n-                },\n-                metadata_module: Some(CompiledModule {\n-                    name: \"dummy_metadata\".to_string(),\n-                    kind: ModuleKind::Metadata,\n-                    object: None,\n-                    bytecode: None,\n-                    bytecode_compressed: None,\n-                }),\n-                crate_hash: tcx.crate_hash(LOCAL_CRATE),\n-                metadata,\n-                windows_subsystem: None, // Windows is not yet supported\n-                linker_info: LinkerInfo::new(tcx),\n-                crate_info: CrateInfo::new(tcx),\n-            });\n-        }\n+        driver::codegen_crate(tcx, metadata, need_metadata_module)\n     }\n \n     fn join_codegen_and_link(\n@@ -385,8 +229,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n }\n \n fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n-    use rustc::session::config::OptLevel;\n-\n     let mut flags_builder = settings::builder();\n     flags_builder.enable(\"is_pic\").unwrap();\n     flags_builder.set(\"probestack_enabled\", \"false\").unwrap(); // ___cranelift_probestack is not provided\n@@ -397,7 +239,9 @@ fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n     }).unwrap();\n \n     // FIXME enable again when https://github.com/CraneStation/cranelift/issues/664 is fixed\n-    /*match sess.opts.optimize {\n+    /*\n+    use rustc::session::config::OptLevel;\n+    match sess.opts.optimize {\n         OptLevel::No => {\n             flags_builder.set(\"opt_level\", \"fastest\").unwrap();\n         }\n@@ -416,53 +260,6 @@ fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n         .finish(flags)\n }\n \n-fn codegen_cgus<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &mut Module<impl Backend + 'static>,\n-    debug: &mut Option<DebugContext<'tcx>>,\n-    log: &mut Option<File>,\n-) {\n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n-    let mono_items = cgus\n-        .iter()\n-        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n-        .flatten()\n-        .collect::<FxHashMap<_, (_, _)>>();\n-\n-    codegen_mono_items(tcx, module, debug.as_mut(), log, mono_items);\n-\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n-}\n-\n-fn codegen_mono_items<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &mut Module<impl Backend + 'static>,\n-    debug_context: Option<&mut DebugContext<'tcx>>,\n-    log: &mut Option<File>,\n-    mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n-) {\n-    let mut cx = CodegenCx::new(tcx, module, debug_context);\n-    time(\"codegen mono items\", move || {\n-        for (mono_item, (linkage, visibility)) in mono_items {\n-            unimpl::try_unimpl(tcx, log, || {\n-                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                base::trans_mono_item(&mut cx, mono_item, linkage);\n-            });\n-        }\n-\n-        cx.finalize();\n-    });\n-}\n-\n-fn time<R>(name: &str, f: impl FnOnce() -> R) -> R {\n-    println!(\"[{}] start\", name);\n-    let before = ::std::time::Instant::now();\n-    let res = f();\n-    let after = ::std::time::Instant::now();\n-    println!(\"[{}] end time: {:?}\", name, after - before);\n-    res\n-}\n-\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {"}]}