{"sha": "85237886df31ba237acd3b7912336704026813f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MjM3ODg2ZGYzMWJhMjM3YWNkM2I3OTEyMzM2NzA0MDI2ODEzZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T00:31:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T00:31:07Z"}, "message": "Auto merge of #85874 - steffahn:fix_unsound_zip_optimization, r=yaahc\n\nRemove unsound TrustedRandomAccess implementations\n\nRemoves the implementations that depend on the user-definable trait `Copy`.\n\nFixes #85873 in the most straightforward way.\n\n<hr>\n\n_Edit:_ This PR now contains additional trait infrastructure to avoid performance regressions around in-place collect, see the discussion in this thread starting from the codegen test failure at https://github.com/rust-lang/rust/pull/85874#issuecomment-872327577.\n\nWith this PR, `TrustedRandomAccess` gains additional documentation that specifically allows for and specifies the safety conditions around subtype coercions \u2013 those coercions can happen in safe Rust code with the `Zip` API\u2019s usage of `TrustedRandomAccess`. This PR introduces a new supertrait of `TrustedRandomAccess`(currently named `TrustedRandomAccessNoCoerce`) that _doesn\u2019t allow_ such coercions, which means it can be still be useful for optimizing cases such as in-place collect where no iterator is handed out to a user (who could do coercions) after a `get_unchecked` call; the benefit of the supertrait is that it doesn\u2019t come with the additional safety conditions around supertraits either, so it can be implemented for more types than `TrustedRandomAccess`.\n\nThe `TrustedRandomAccess` implementations for `vec::IntoIter`, `vec_deque::IntoIter`, and `array::IntoIter` are removed as they don\u2019t conform with the newly documented safety conditions, this way unsoundness is removed. But this PR in turn (re-)adds a `TrustedRandomAccessNoCoerce` implementation for `vec::IntoIter` to avoid performance regressions from stable in a case of in-place collecting of `Vec`s [the above-mentioned codegen test failure]. Re-introducing the (currently nightly+beta-only) impls for `VecDeque`\u2019s and `[T; N]`\u2019s iterators is technically possible, but goes beyond the scope of this PR (i.e. it can happen in a future PR).", "tree": {"sha": "f4c3ce4df24039cb23abab32ee843c26224d2be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c3ce4df24039cb23abab32ee843c26224d2be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85237886df31ba237acd3b7912336704026813f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85237886df31ba237acd3b7912336704026813f5", "html_url": "https://github.com/rust-lang/rust/commit/85237886df31ba237acd3b7912336704026813f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85237886df31ba237acd3b7912336704026813f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4533be947b011c9bde4871ae93e6553b24cc5ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4533be947b011c9bde4871ae93e6553b24cc5ec6", "html_url": "https://github.com/rust-lang/rust/commit/4533be947b011c9bde4871ae93e6553b24cc5ec6"}, {"sha": "6d9c0a16d9398b2eb24582f60f47affc119eb0af", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c0a16d9398b2eb24582f60f47affc119eb0af", "html_url": "https://github.com/rust-lang/rust/commit/6d9c0a16d9398b2eb24582f60f47affc119eb0af"}], "stats": {"total": 465, "additions": 330, "deletions": 135}, "files": [{"sha": "edadd666edce630676924ea340bdbc847387c109", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use core::ops::Try;\n \n use super::{count, wrap_index, RingSlices};\n@@ -104,11 +104,8 @@ impl<'a, T> Iterator for Iter<'a, T> {\n \n     #[inline]\n     #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // Safety: The TrustedRandomAccess contract requires that callers only  pass an index\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n+        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n         // that is in bounds.\n         unsafe {\n             let idx = wrap_index(self.tail.wrapping_add(idx), self.ring.len());\n@@ -177,6 +174,10 @@ unsafe impl<T> TrustedLen for Iter<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<T> TrustedRandomAccess for Iter<'_, T> {\n+unsafe impl<T> TrustedRandomAccess for Iter<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccessNoCoerce for Iter<'_, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "7700b31cf5b469538f20e88cf652bc4223f2ac2d", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use core::marker::PhantomData;\n \n use super::{count, wrap_index, RingSlices};\n@@ -90,11 +90,8 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n \n     #[inline]\n     #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // Safety: The TrustedRandomAccess contract requires that callers only  pass an index\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n+        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n         // that is in bounds.\n         unsafe {\n             let idx = wrap_index(self.tail.wrapping_add(idx), self.ring.len());\n@@ -146,6 +143,10 @@ unsafe impl<T> TrustedLen for IterMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<T> TrustedRandomAccess for IterMut<'_, T> {\n+unsafe impl<T> TrustedRandomAccess for IterMut<'_, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<T> TrustedRandomAccessNoCoerce for IterMut<'_, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "0bd152f17a670e2afa3b4180b812400e1c4865ee", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -2,7 +2,9 @@ use crate::alloc::{Allocator, Global};\n use crate::raw_vec::RawVec;\n use core::fmt;\n use core::intrinsics::arith_offset;\n-use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccess};\n+use core::iter::{\n+    FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce,\n+};\n use core::marker::PhantomData;\n use core::mem::{self};\n use core::ptr::{self, NonNull};\n@@ -166,7 +168,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: the caller must guarantee that `i` is in bounds of the\n         // `Vec<T>`, so `i` cannot overflow an `isize`, and the `self.ptr.add(i)`\n@@ -219,7 +221,10 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n-unsafe impl<T, A: Allocator> TrustedRandomAccess for IntoIter<T, A>\n+//\n+// TrustedRandomAccess (without NoCoerce) must not be implemented because\n+// subtypes/supertypes of `T` might not be `Copy`\n+unsafe impl<T, A: Allocator> TrustedRandomAccessNoCoerce for IntoIter<T, A>\n where\n     T: Copy,\n {"}, {"sha": "23a2e313c0189c83ead315d18382f93ea8415b2a", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,4 +1,4 @@\n-use core::iter::{InPlaceIterable, SourceIter, TrustedRandomAccess};\n+use core::iter::{InPlaceIterable, SourceIter, TrustedRandomAccessNoCoerce};\n use core::mem::{self, ManuallyDrop};\n use core::ptr::{self};\n \n@@ -71,6 +71,18 @@ where\n         // drop any remaining values at the tail of the source\n         // but prevent drop of the allocation itself once IntoIter goes out of scope\n         // if the drop panics then we also leak any elements collected into dst_buf\n+        //\n+        // FIXME: Since `SpecInPlaceCollect::collect_in_place` above might use\n+        // `__iterator_get_unchecked` internally, this call might be operating on\n+        // a `vec::IntoIter` with incorrect internal state regarding which elements\n+        // have already been \u201cconsumed\u201d. However, the `TrustedRandomIteratorNoCoerce`\n+        // implementation of `vec::IntoIter` is only present if the `Vec` elements\n+        // don\u2019t have a destructor, so it doesn\u2019t matter if elements are \u201cdropped multiple times\u201d\n+        // in this case.\n+        // This argument technically currently lacks justification from the `# Safety` docs for\n+        // `SourceIter`/`InPlaceIterable` and/or `TrustedRandomAccess`, so it might be possible that\n+        // someone could inadvertently create new library unsoundness\n+        // involving this `.forget_allocation_drop_remaining()` call.\n         src.forget_allocation_drop_remaining();\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n@@ -101,6 +113,11 @@ fn write_in_place_with_drop<T>(\n trait SpecInPlaceCollect<T, I>: Iterator<Item = T> {\n     /// Collects an iterator (`self`) into the destination buffer (`dst`) and returns the number of items\n     /// collected. `end` is the last writable element of the allocation and used for bounds checks.\n+    ///\n+    /// This method is specialized and one of its implementations makes use of\n+    /// `Iterator::__iterator_get_unchecked` calls with a `TrustedRandomAccessNoCoerce` bound\n+    /// on `I` which means the caller of this method must take the safety conditions\n+    /// of that trait into consideration.\n     fn collect_in_place(&mut self, dst: *mut T, end: *const T) -> usize;\n }\n \n@@ -124,7 +141,7 @@ where\n \n impl<T, I> SpecInPlaceCollect<T, I> for I\n where\n-    I: Iterator<Item = T> + TrustedRandomAccess,\n+    I: Iterator<Item = T> + TrustedRandomAccessNoCoerce,\n {\n     #[inline]\n     fn collect_in_place(&mut self, dst_buf: *mut T, end: *const T) -> usize {"}, {"sha": "71a5a4ea831ffe6a12914a4eee5eebf34a33f3a4", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::ops::Try;\n \n@@ -61,7 +63,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n@@ -121,9 +123,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Cloned<I>\n+unsafe impl<I> TrustedRandomAccess for Cloned<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Cloned<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = true;\n }"}, {"sha": "3d3c8da678b8b7f17d73d96c160bb51f7fcb1374", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::ops::Try;\n \n@@ -77,7 +79,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n@@ -137,9 +139,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Copied<I>\n+unsafe impl<I> TrustedRandomAccess for Copied<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Copied<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "3478a0cd40832b008bf6e46cdc6723897843d959", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,4 +1,6 @@\n-use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n use crate::ops::Try;\n \n@@ -114,7 +116,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n@@ -207,9 +209,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n+unsafe impl<I> TrustedRandomAccess for Enumerate<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Enumerate<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "fbf752c6f2024ac54e959f0ab5815eb6d375e653", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -2,6 +2,7 @@ use crate::intrinsics;\n use crate::iter::adapters::zip::try_get_unchecked;\n use crate::iter::{\n     DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess,\n+    TrustedRandomAccessNoCoerce,\n };\n use crate::ops::Try;\n \n@@ -131,7 +132,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         match self.iter {\n             // SAFETY: the caller must uphold the contract for\n@@ -221,9 +222,13 @@ unsafe impl<I> TrustedLen for Fuse<I> where I: TrustedLen {}\n //\n // This is safe to implement as `Fuse` is just forwarding these to the wrapped iterator `I`, which\n // preserves these properties.\n-unsafe impl<I> TrustedRandomAccess for Fuse<I>\n+unsafe impl<I> TrustedRandomAccess for Fuse<I> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccessNoCoerce for Fuse<I>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n }"}, {"sha": "763e253e75a516a0a0b2d1275378994d6de99e51", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -1,5 +1,7 @@\n use crate::fmt;\n-use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n+use crate::iter::adapters::{\n+    zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n+};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n use crate::ops::Try;\n \n@@ -125,7 +127,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n@@ -187,9 +189,13 @@ where\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I, F> TrustedRandomAccess for Map<I, F>\n+unsafe impl<I, F> TrustedRandomAccess for Map<I, F> where I: TrustedRandomAccess {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I, F> TrustedRandomAccessNoCoerce for Map<I, F>\n where\n-    I: TrustedRandomAccess,\n+    I: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = true;\n }"}, {"sha": "056ccca1d01c93fb34f97c1c68367ae1f54e7bff", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -51,6 +51,9 @@ pub use self::map_while::MapWhile;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::zip::TrustedRandomAccess;\n \n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::zip::TrustedRandomAccessNoCoerce;\n+\n #[unstable(feature = \"iter_zip\", issue = \"83574\")]\n pub use self::zip::zip;\n "}, {"sha": "c7e69e922c13792d5d02178b4a23b9591ba440ad", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 151, "deletions": 76, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -91,7 +91,7 @@ where\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: `ZipImpl::__iterator_get_unchecked` has same safety\n         // requirements as `Iterator::__iterator_get_unchecked`.\n@@ -126,7 +126,66 @@ trait ZipImpl<A, B> {\n     // This has the same safety requirements as `Iterator::__iterator_get_unchecked`\n     unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n-        Self: Iterator + TrustedRandomAccess;\n+        Self: Iterator + TrustedRandomAccessNoCoerce;\n+}\n+\n+// Work around limitations of specialization, requiring `default` impls to be repeated\n+// in intermediary impls.\n+macro_rules! zip_impl_general_defaults {\n+    () => {\n+        default fn new(a: A, b: B) -> Self {\n+            Zip {\n+                a,\n+                b,\n+                index: 0, // unused\n+                len: 0,   // unused\n+                a_len: 0, // unused\n+            }\n+        }\n+\n+        #[inline]\n+        default fn next(&mut self) -> Option<(A::Item, B::Item)> {\n+            let x = self.a.next()?;\n+            let y = self.b.next()?;\n+            Some((x, y))\n+        }\n+\n+        #[inline]\n+        default fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+            self.super_nth(n)\n+        }\n+\n+        #[inline]\n+        default fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n+        where\n+            A: DoubleEndedIterator + ExactSizeIterator,\n+            B: DoubleEndedIterator + ExactSizeIterator,\n+        {\n+            // The function body below only uses `self.a/b.len()` and `self.a/b.next_back()`\n+            // and doesn\u2019t call `next_back` too often, so this implementation is safe in\n+            // the `TrustedRandomAccessNoCoerce` specialization\n+\n+            let a_sz = self.a.len();\n+            let b_sz = self.b.len();\n+            if a_sz != b_sz {\n+                // Adjust a, b to equal length\n+                if a_sz > b_sz {\n+                    for _ in 0..a_sz - b_sz {\n+                        self.a.next_back();\n+                    }\n+                } else {\n+                    for _ in 0..b_sz - a_sz {\n+                        self.b.next_back();\n+                    }\n+                }\n+            }\n+            match (self.a.next_back(), self.b.next_back()) {\n+                (Some(x), Some(y)) => Some((x, y)),\n+                (None, None) => None,\n+                _ => unreachable!(),\n+            }\n+        }\n+    };\n }\n \n // General Zip impl\n@@ -137,54 +196,8 @@ where\n     B: Iterator,\n {\n     type Item = (A::Item, B::Item);\n-    default fn new(a: A, b: B) -> Self {\n-        Zip {\n-            a,\n-            b,\n-            index: 0, // unused\n-            len: 0,   // unused\n-            a_len: 0, // unused\n-        }\n-    }\n \n-    #[inline]\n-    default fn next(&mut self) -> Option<(A::Item, B::Item)> {\n-        let x = self.a.next()?;\n-        let y = self.b.next()?;\n-        Some((x, y))\n-    }\n-\n-    #[inline]\n-    default fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        self.super_nth(n)\n-    }\n-\n-    #[inline]\n-    default fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n-    where\n-        A: DoubleEndedIterator + ExactSizeIterator,\n-        B: DoubleEndedIterator + ExactSizeIterator,\n-    {\n-        let a_sz = self.a.len();\n-        let b_sz = self.b.len();\n-        if a_sz != b_sz {\n-            // Adjust a, b to equal length\n-            if a_sz > b_sz {\n-                for _ in 0..a_sz - b_sz {\n-                    self.a.next_back();\n-                }\n-            } else {\n-                for _ in 0..b_sz - a_sz {\n-                    self.b.next_back();\n-                }\n-            }\n-        }\n-        match (self.a.next_back(), self.b.next_back()) {\n-            (Some(x), Some(y)) => Some((x, y)),\n-            (None, None) => None,\n-            _ => unreachable!(),\n-        }\n-    }\n+    zip_impl_general_defaults! {}\n \n     #[inline]\n     default fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -205,12 +218,35 @@ where\n \n     default unsafe fn get_unchecked(&mut self, _idx: usize) -> <Self as Iterator>::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         unreachable!(\"Always specialized\");\n     }\n }\n \n+#[doc(hidden)]\n+impl<A, B> ZipImpl<A, B> for Zip<A, B>\n+where\n+    A: TrustedRandomAccessNoCoerce + Iterator,\n+    B: TrustedRandomAccessNoCoerce + Iterator,\n+{\n+    zip_impl_general_defaults! {}\n+\n+    #[inline]\n+    default fn size_hint(&self) -> (usize, Option<usize>) {\n+        let size = cmp::min(self.a.size(), self.b.size());\n+        (size, Some(size))\n+    }\n+\n+    #[inline]\n+    unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {\n+        let idx = self.index + idx;\n+        // SAFETY: the caller must uphold the contract for\n+        // `Iterator::__iterator_get_unchecked`.\n+        unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }\n+    }\n+}\n+\n #[doc(hidden)]\n impl<A, B> ZipImpl<A, B> for Zip<A, B>\n where\n@@ -330,14 +366,6 @@ where\n             None\n         }\n     }\n-\n-    #[inline]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {\n-        let idx = self.index + idx;\n-        // SAFETY: the caller must uphold the contract for\n-        // `Iterator::__iterator_get_unchecked`.\n-        unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -354,6 +382,15 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n where\n     A: TrustedRandomAccess,\n     B: TrustedRandomAccess,\n+{\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<A, B> TrustedRandomAccessNoCoerce for Zip<A, B>\n+where\n+    A: TrustedRandomAccessNoCoerce,\n+    B: TrustedRandomAccessNoCoerce,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = A::MAY_HAVE_SIDE_EFFECT || B::MAY_HAVE_SIDE_EFFECT;\n }\n@@ -417,7 +454,9 @@ impl<A: Debug, B: Debug> ZipFmt<A, B> for Zip<A, B> {\n     }\n }\n \n-impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B> for Zip<A, B> {\n+impl<A: Debug + TrustedRandomAccessNoCoerce, B: Debug + TrustedRandomAccessNoCoerce> ZipFmt<A, B>\n+    for Zip<A, B>\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // It's *not safe* to call fmt on the contained iterators, since once\n         // we start iterating they're in strange, potentially unsafe, states.\n@@ -431,34 +470,70 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///\n /// The iterator's `size_hint` must be exact and cheap to call.\n ///\n-/// `size` may not be overridden.\n+/// `TrustedRandomAccessNoCoerce::size` may not be overridden.\n+///\n+/// All subtypes and all supertypes of `Self` must also implement `TrustedRandomAccess`.\n+/// In particular, this means that types with non-invariant parameters usually can not have\n+/// an impl for `TrustedRandomAccess` that depends on any trait bounds on such parameters, except\n+/// for bounds that come from the respective struct/enum definition itself, or bounds involving\n+/// traits that themselves come with a guarantee similar to this one.\n+///\n+/// If `Self: ExactSizeIterator` then `self.len()` must always produce results consistent\n+/// with `self.size()`.\n ///\n-/// `<Self as Iterator>::__iterator_get_unchecked` must be safe to call\n-/// provided the following conditions are met.\n+/// If `Self: Iterator`, then `<Self as Iterator>::__iterator_get_unchecked(&mut self, idx)`\n+/// must be safe to call provided the following conditions are met.\n ///\n /// 1. `0 <= idx` and `idx < self.size()`.\n-/// 2. If `self: !Clone`, then `get_unchecked` is never called with the same\n+/// 2. If `Self: !Clone`, then `self.__iterator_get_unchecked(idx)` is never called with the same\n ///    index on `self` more than once.\n-/// 3. After `self.get_unchecked(idx)` has been called then `next_back` will\n-///    only be called at most `self.size() - idx - 1` times.\n-/// 4. After `get_unchecked` is called, then only the following methods will be\n-///    called on `self`:\n-///     * `std::clone::Clone::clone()`\n-///     * `std::iter::Iterator::size_hint()`\n-///     * `std::iter::DoubleEndedIterator::next_back()`\n-///     * `std::iter::Iterator::__iterator_get_unchecked()`\n-///     * `std::iter::TrustedRandomAccess::size()`\n+/// 3. After `self.__iterator_get_unchecked(idx)` has been called, then `self.next_back()` will\n+///    only be called at most `self.size() - idx - 1` times. If `Self: Clone` and `self` is cloned,\n+///    then this number is calculated for `self` and its clone individually,\n+///    but `self.next_back()` calls that happened before the cloning count for both `self` and the clone.\n+/// 4. After `self.__iterator_get_unchecked(idx)` has been called, then only the following methods\n+///    will be called on `self` or on any new clones of `self`:\n+///     * `std::clone::Clone::clone`\n+///     * `std::iter::Iterator::size_hint`\n+///     * `std::iter::DoubleEndedIterator::next_back`\n+///     * `std::iter::ExactSizeIterator::len`\n+///     * `std::iter::Iterator::__iterator_get_unchecked`\n+///     * `std::iter::TrustedRandomAccessNoCoerce::size`\n+/// 5. If `T` is a subtype of `Self`, then `self` is allowed to be coerced\n+///    to `T`. If `self` is coerced to `T` after `self.__iterator_get_unchecked(idx)` has already\n+///    been called, then no methods except for the ones listed under 4. are allowed to be called\n+///    on the resulting value of type `T`, either. Multiple such coercion steps are allowed.\n+///    Regarding 2. and 3., the number of times `__iterator_get_unchecked(idx)` or `next_back()` is\n+///    called on `self` and the resulting value of type `T` (and on further coercion results with\n+///    sub-subtypes) are added together and their sums must not exceed the specified bounds.\n ///\n /// Further, given that these conditions are met, it must guarantee that:\n ///\n /// * It does not change the value returned from `size_hint`\n /// * It must be safe to call the methods listed above on `self` after calling\n-///   `get_unchecked`, assuming that the required traits are implemented.\n-/// * It must also be safe to drop `self` after calling `get_unchecked`.\n+///   `self.__iterator_get_unchecked(idx)`, assuming that the required traits are implemented.\n+/// * It must also be safe to drop `self` after calling `self.__iterator_get_unchecked(idx)`.\n+/// * If `T` is a subtype of `Self`, then it must be safe to coerce `self` to `T`.\n+//\n+// FIXME: Clarify interaction with SourceIter/InPlaceIterable. Calling `SouceIter::as_inner`\n+// after `__iterator_get_unchecked` is supposed to be allowed.\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+#[rustc_specialization_trait]\n+pub unsafe trait TrustedRandomAccess: TrustedRandomAccessNoCoerce {}\n+\n+/// Like [`TrustedRandomAccess`] but without any of the requirements / guarantees around\n+/// coercions to subtypes after `__iterator_get_unchecked` (they aren\u2019t allowed here!), and\n+/// without the requirement that subtypes / supertypes implement `TrustedRandomAccessNoCoerce`.\n+///\n+/// This trait was created in PR #85874 to fix soundness issue #85873 without performance regressions.\n+/// It is subject to change as we might want to build a more generally useful (for performance\n+/// optimizations) and more sophisticated trait or trait hierarchy that replaces or extends\n+/// [`TrustedRandomAccess`] and `TrustedRandomAccessNoCoerce`.\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n #[rustc_specialization_trait]\n-pub unsafe trait TrustedRandomAccess: Sized {\n+pub unsafe trait TrustedRandomAccessNoCoerce: Sized {\n     // Convenience method.\n     fn size(&self) -> usize\n     where\n@@ -499,7 +574,7 @@ unsafe impl<I: Iterator> SpecTrustedRandomAccess for I {\n     }\n }\n \n-unsafe impl<I: Iterator + TrustedRandomAccess> SpecTrustedRandomAccess for I {\n+unsafe impl<I: Iterator + TrustedRandomAccessNoCoerce> SpecTrustedRandomAccess for I {\n     unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`."}, {"sha": "5f664b5f4a8cda01c4a3b67669c83e0dfe775c04", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -407,6 +407,8 @@ pub use self::adapters::SourceIter;\n pub use self::adapters::StepBy;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::adapters::TrustedRandomAccess;\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::adapters::TrustedRandomAccessNoCoerce;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::adapters::{\n     Chain, Cycle, Enumerate, Filter, FilterMap, FlatMap, Fuse, Inspect, Map, Peekable, Rev, Scan,"}, {"sha": "22782a81378112397f3f02d7c5787d70fc4591fd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -3,7 +3,9 @@ use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Try};\n \n-use super::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedStep};\n+use super::{\n+    FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce, TrustedStep,\n+};\n \n // Safety: All invariants are upheld.\n macro_rules! unsafe_impl_trusted_step {\n@@ -495,7 +497,11 @@ macro_rules! unsafe_range_trusted_random_access_impl {\n     ($($t:ty)*) => ($(\n         #[doc(hidden)]\n         #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-        unsafe impl TrustedRandomAccess for ops::Range<$t> {\n+        unsafe impl TrustedRandomAccess for ops::Range<$t> {}\n+\n+        #[doc(hidden)]\n+        #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+        unsafe impl TrustedRandomAccessNoCoerce for ops::Range<$t> {\n             const MAY_HAVE_SIDE_EFFECT: bool = false;\n         }\n     )*)\n@@ -670,7 +676,7 @@ impl<A: Step> Iterator for ops::Range<A> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         // SAFETY: The TrustedRandomAccess contract requires that callers only  pass an index\n         // that is in bounds."}, {"sha": "a1a336a05740a76d08cb8d14f4e9b3d2df9f2127", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -5,7 +5,7 @@\n use crate::cmp::{self, Ordering};\n use crate::ops::{ControlFlow, Try};\n \n-use super::super::TrustedRandomAccess;\n+use super::super::TrustedRandomAccessNoCoerce;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n use super::super::{FromIterator, Intersperse, IntersperseWith, Product, Sum, Zip};\n@@ -3464,7 +3464,7 @@ pub trait Iterator {\n     #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n     unsafe fn __iterator_get_unchecked(&mut self, _idx: usize) -> Self::Item\n     where\n-        Self: TrustedRandomAccess,\n+        Self: TrustedRandomAccessNoCoerce,\n     {\n         unreachable!(\"Always specialized\");\n     }"}, {"sha": "419bf0e292ae1c429092989eed98f779acadc6ec", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -8,7 +8,7 @@ use crate::cmp;\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::intrinsics::{assume, exact_div, unchecked_sub};\n-use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use crate::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use crate::marker::{PhantomData, Send, Sized, Sync};\n use crate::mem;\n use crate::num::NonZeroUsize;\n@@ -1312,7 +1312,11 @@ impl<T> FusedIterator for Windows<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Windows<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1477,7 +1481,11 @@ impl<T> FusedIterator for Chunks<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Chunks<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1639,7 +1647,11 @@ impl<T> FusedIterator for ChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1793,7 +1805,11 @@ impl<T> FusedIterator for ChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExact<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -1944,7 +1960,11 @@ impl<T> FusedIterator for ChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExactMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2182,7 +2202,11 @@ impl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n-unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunks<'a, T, N> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2295,7 +2319,11 @@ impl<T, const N: usize> FusedIterator for ArrayChunksMut<'_, T, N> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n-unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T, N> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunksMut<'a, T, N> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2457,7 +2485,11 @@ impl<T> FusedIterator for RChunks<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunks<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2618,7 +2650,11 @@ impl<T> FusedIterator for RChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2776,7 +2812,11 @@ impl<T> FusedIterator for RChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExact<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n@@ -2931,19 +2971,31 @@ impl<T> FusedIterator for RChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExactMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for Iter<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for Iter<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Iter<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<'a, T> TrustedRandomAccessNoCoerce for IterMut<'a, T> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n "}, {"sha": "8db9edc61472f91d12ff2fb82a8d575937287470", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85237886df31ba237acd3b7912336704026813f5/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=85237886df31ba237acd3b7912336704026813f5", "patch": "@@ -2,9 +2,9 @@\n \n use crate::char;\n use crate::fmt::{self, Write};\n-use crate::iter::TrustedRandomAccess;\n use crate::iter::{Chain, FlatMap, Flatten};\n use crate::iter::{Copied, Filter, FusedIterator, Map, TrustedLen};\n+use crate::iter::{TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n use crate::ops::Try;\n use crate::option;\n use crate::slice::{self, Split as SliceSplit};\n@@ -345,7 +345,11 @@ unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl TrustedRandomAccess for Bytes<'_> {\n+unsafe impl TrustedRandomAccess for Bytes<'_> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl TrustedRandomAccessNoCoerce for Bytes<'_> {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }\n "}]}