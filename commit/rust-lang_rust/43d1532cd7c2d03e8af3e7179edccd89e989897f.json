{"sha": "43d1532cd7c2d03e8af3e7179edccd89e989897f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZDE1MzJjZDdjMmQwM2U4YWYzZTcxNzllZGNjZDg5ZTk4OTg5N2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T16:22:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T16:22:22Z"}, "message": "Rollup merge of #67363 - alexcrichton:wasm-import-modules, r=eddyb\n\nFix handling of wasm import modules and names\n\nThe WebAssembly targets of rustc have weird issues around name mangling\nand import the same name from different modules. This all largely stems\nfrom the fact that we're using literal symbol names in LLVM IR to\nrepresent what a function is called when it's imported, and we're not\nusing the wasm-specific `wasm-import-name` attribute. This in turn leads\nto two issues:\n\n* If, in the same codegen unit, the same FFI symbol is referenced twice\n  then rustc, when translating to LLVM IR, will only reference one\n  symbol from the first wasm module referenced.\n\n* There's also a bug in LLD [1] where even if two codegen units\n  reference different modules, having the same symbol names means that\n  LLD coalesces the symbols and only refers to one wasm module.\n\nPut another way, all our imported wasm symbols from the environment are\nkeyed off their LLVM IR symbol name, which has lots of collisions today.\nThis commit fixes the issue by implementing two changes:\n\n1. All wasm symbols with `#[link(wasm_import_module = \"...\")]` are\n   mangled by default in LLVM IR. This means they're all given unique names.\n\n2. Symbols then use the `wasm-import-name` attribute to ensure that the\n   WebAssembly file uses the correct import name.\n\nWhen put together this should ensure we don't trip over the LLD bug [1]\nand we also codegen IR correctly always referencing the right symbols\nwith the right import module/name pairs.\n\nCloses #50021\nCloses #56309\nCloses #63562\n\n[1]: https://bugs.llvm.org/show_bug.cgi?id=44316", "tree": {"sha": "4e6f0da977dffdce7073fdf1a681986d7b38650b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6f0da977dffdce7073fdf1a681986d7b38650b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d1532cd7c2d03e8af3e7179edccd89e989897f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/PU/CRBK7hj4Ov3rIwAAdHIIAKqIiy0EzgzKC6ERjeEdDpl5\nm0ysDIqmi5bGRGGzbzl4P7XHWct+L3iMz5L8ZB46roBg033jG6Ijr6z7emodt56Z\nptk9RdCCDwm2crE8y5OTdzDuMr9i8A79THq0/BEWgCxfnFarHfGeWlap8OqDqEF9\nv1EZX2lv1ICIqWbRNEqSVBEI7KuF3BTmjcWr6NK3TlxFDri9Ch/Q2ERLB8zGqk9e\nvb8D7rJpw4SDQrvBa/wlADHRtnCmUknBbnOkuPgU4baEtzc8QXAYtR13nnSFW377\n1ID/DCTvsjXgdZFc4VfTLY/0v/eo2gJnCZfPK8M3mUuliQC28iP1X5v3euOBiac=\n=LaoG\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e6f0da977dffdce7073fdf1a681986d7b38650b\nparent 5a8083c6652f55b5a902dc4c60070ec87a632c22\nparent aa0ef5a01ff329daa822e7443ca7d6ae2bfc8476\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576858942 +0100\ncommitter GitHub <noreply@github.com> 1576858942 +0100\n\nRollup merge of #67363 - alexcrichton:wasm-import-modules, r=eddyb\n\nFix handling of wasm import modules and names\n\nThe WebAssembly targets of rustc have weird issues around name mangling\nand import the same name from different modules. This all largely stems\nfrom the fact that we're using literal symbol names in LLVM IR to\nrepresent what a function is called when it's imported, and we're not\nusing the wasm-specific `wasm-import-name` attribute. This in turn leads\nto two issues:\n\n* If, in the same codegen unit, the same FFI symbol is referenced twice\n  then rustc, when translating to LLVM IR, will only reference one\n  symbol from the first wasm module referenced.\n\n* There's also a bug in LLD [1] where even if two codegen units\n  reference different modules, having the same symbol names means that\n  LLD coalesces the symbols and only refers to one wasm module.\n\nPut another way, all our imported wasm symbols from the environment are\nkeyed off their LLVM IR symbol name, which has lots of collisions today.\nThis commit fixes the issue by implementing two changes:\n\n1. All wasm symbols with `#[link(wasm_import_module = \"...\")]` are\n   mangled by default in LLVM IR. This means they're all given unique names.\n\n2. Symbols then use the `wasm-import-name` attribute to ensure that the\n   WebAssembly file uses the correct import name.\n\nWhen put together this should ensure we don't trip over the LLD bug [1]\nand we also codegen IR correctly always referencing the right symbols\nwith the right import module/name pairs.\n\nCloses #50021\nCloses #56309\nCloses #63562\n\n[1]: https://bugs.llvm.org/show_bug.cgi?id=44316\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d1532cd7c2d03e8af3e7179edccd89e989897f", "html_url": "https://github.com/rust-lang/rust/commit/43d1532cd7c2d03e8af3e7179edccd89e989897f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d1532cd7c2d03e8af3e7179edccd89e989897f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8083c6652f55b5a902dc4c60070ec87a632c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8083c6652f55b5a902dc4c60070ec87a632c22", "html_url": "https://github.com/rust-lang/rust/commit/5a8083c6652f55b5a902dc4c60070ec87a632c22"}, {"sha": "aa0ef5a01ff329daa822e7443ca7d6ae2bfc8476", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0ef5a01ff329daa822e7443ca7d6ae2bfc8476", "html_url": "https://github.com/rust-lang/rust/commit/aa0ef5a01ff329daa822e7443ca7d6ae2bfc8476"}], "stats": {"total": 193, "additions": 189, "deletions": 4}, "files": [{"sha": "3f2a51b45bd0645fbf56f1b9ff0d0b30a6e5f422", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -344,6 +344,17 @@ pub fn from_fn_attrs(\n                 const_cstr!(\"wasm-import-module\"),\n                 &module,\n             );\n+\n+            let name = codegen_fn_attrs.link_name.unwrap_or_else(|| {\n+                cx.tcx.item_name(instance.def_id())\n+            });\n+            let name = CString::new(&name.as_str()[..]).unwrap();\n+            llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                const_cstr!(\"wasm-import-name\"),\n+                &name,\n+            );\n         }\n     }\n }"}, {"sha": "922964ee45f6be4d4772e3a95263ceb11473938a", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -142,12 +142,32 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Symbol {\n     };\n \n     let attrs = tcx.codegen_fn_attrs(def_id);\n+\n+    // Foreign items by default use no mangling for their symbol name. There's a\n+    // few exceptions to this rule though:\n+    //\n+    // * This can be overridden with the `#[link_name]` attribute\n+    //\n+    // * On the wasm32 targets there is a bug (or feature) in LLD [1] where the\n+    //   same-named symbol when imported from different wasm modules will get\n+    //   hooked up incorectly. As a result foreign symbols, on the wasm target,\n+    //   with a wasm import module, get mangled. Additionally our codegen will\n+    //   deduplicate symbols based purely on the symbol name, but for wasm this\n+    //   isn't quite right because the same-named symbol on wasm can come from\n+    //   different modules. For these reasons if `#[link(wasm_import_module)]`\n+    //   is present we mangle everything on wasm because the demangled form will\n+    //   show up in the `wasm-import-name` custom attribute in LLVM IR.\n+    //\n+    // [1]: https://bugs.llvm.org/show_bug.cgi?id=44316\n     if is_foreign {\n-        if let Some(name) = attrs.link_name {\n-            return name;\n+        if tcx.sess.target.target.arch != \"wasm32\" ||\n+            !tcx.wasm_import_module_map(def_id.krate).contains_key(&def_id)\n+        {\n+            if let Some(name) = attrs.link_name {\n+                return name;\n+            }\n+            return tcx.item_name(def_id);\n         }\n-        // Don't mangle foreign items.\n-        return tcx.item_name(def_id);\n     }\n \n     if let Some(name) = attrs.export_name {"}, {"sha": "bb6a5d3c9d24a9182a69ce63f05d02e48ec0221b", "filename": "src/test/run-make/wasm-symbols-different-module/Makefile", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2FMakefile?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,28 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-wasm32-bare\n+\n+all:\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify-imports.js $(TMPDIR)/foo.wasm a/foo b/foo\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -C lto\n+\t$(NODE) verify-imports.js $(TMPDIR)/foo.wasm a/foo b/foo\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O\n+\t$(NODE) verify-imports.js $(TMPDIR)/foo.wasm a/foo b/foo\n+\t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O -C lto\n+\t$(NODE) verify-imports.js $(TMPDIR)/foo.wasm a/foo b/foo\n+\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify-imports.js $(TMPDIR)/bar.wasm m1/f m1/g m2/f\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown -C lto\n+\t$(NODE) verify-imports.js $(TMPDIR)/bar.wasm m1/f m1/g m2/f\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown -O\n+\t$(NODE) verify-imports.js $(TMPDIR)/bar.wasm m1/f m1/g m2/f\n+\t$(RUSTC) bar.rs --target wasm32-unknown-unknown -O -C lto\n+\t$(NODE) verify-imports.js $(TMPDIR)/bar.wasm m1/f m1/g m2/f\n+\n+\t$(RUSTC) baz.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify-imports.js $(TMPDIR)/baz.wasm sqlite/allocate sqlite/deallocate\n+\n+\t$(RUSTC) log.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify-imports.js $(TMPDIR)/log.wasm test/log"}, {"sha": "7567060d7813a91e108b8d4b3e9ee671d85aa6aa", "filename": "src/test/run-make/wasm-symbols-different-module/bar.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbar.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,33 @@\n+//! Issue #50021\n+\n+#![crate_type = \"cdylib\"]\n+\n+mod m1 {\n+    #[link(wasm_import_module = \"m1\")]\n+    extern \"C\" {\n+        pub fn f();\n+    }\n+    #[link(wasm_import_module = \"m1\")]\n+    extern \"C\" {\n+        pub fn g();\n+    }\n+}\n+\n+mod m2 {\n+    #[link(wasm_import_module = \"m2\")]\n+    extern \"C\" {\n+        pub fn f(_: i32);\n+    }\n+}\n+\n+#[no_mangle]\n+pub unsafe fn run() {\n+    m1::f();\n+    m1::g();\n+\n+    // In generated code, expected:\n+    // (import \"m2\" \"f\" (func $f (param i32)))\n+    // but got:\n+    // (import \"m1\" \"f\" (func $f (param i32)))\n+    m2::f(0);\n+}"}, {"sha": "fbb78619bb8f526b2172b2ab26e74f8e05ec66ba", "filename": "src/test/run-make/wasm-symbols-different-module/baz.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fbaz.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,22 @@\n+//! Issue #63562\n+\n+#![crate_type = \"cdylib\"]\n+\n+mod foo {\n+    #[link(wasm_import_module = \"sqlite\")]\n+    extern \"C\" {\n+        pub fn allocate(size: usize) -> i32;\n+        pub fn deallocate(ptr: i32, size: usize);\n+    }\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn allocate() {\n+    unsafe {\n+        foo::allocate(1);\n+        foo::deallocate(1, 2);\n+    }\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn deallocate() {}"}, {"sha": "a4ba7e714cc7753474efb79d1d9393100dcfca26", "filename": "src/test/run-make/wasm-symbols-different-module/foo.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Ffoo.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,23 @@\n+#![crate_type = \"cdylib\"]\n+\n+mod a {\n+    #[link(wasm_import_module = \"a\")]\n+    extern \"C\" {\n+        pub fn foo();\n+    }\n+}\n+\n+mod b {\n+    #[link(wasm_import_module = \"b\")]\n+    extern \"C\" {\n+        pub fn foo();\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn start() {\n+    unsafe {\n+        a::foo();\n+        b::foo();\n+    }\n+}"}, {"sha": "ea3e0b4b2be91c001a2dc10864936a9309910059", "filename": "src/test/run-make/wasm-symbols-different-module/log.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Flog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Flog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Flog.rs?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,16 @@\n+//! Issue #56309\n+\n+#![crate_type = \"cdylib\"]\n+\n+#[link(wasm_import_module = \"test\")]\n+extern \"C\" {\n+    fn log(message_data: u32, message_size: u32);\n+}\n+\n+#[no_mangle]\n+pub fn main() {\n+    let message = \"Hello, world!\";\n+    unsafe {\n+        log(message.as_ptr() as u32, message.len() as u32);\n+    }\n+}"}, {"sha": "7e9f90cf8bdc6c0e278c42d9e77b7c3f5ebda692", "filename": "src/test/run-make/wasm-symbols-different-module/verify-imports.js", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fverify-imports.js", "raw_url": "https://github.com/rust-lang/rust/raw/43d1532cd7c2d03e8af3e7179edccd89e989897f/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fverify-imports.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-different-module%2Fverify-imports.js?ref=43d1532cd7c2d03e8af3e7179edccd89e989897f", "patch": "@@ -0,0 +1,32 @@\n+const fs = require('fs');\n+const process = require('process');\n+const assert = require('assert');\n+const buffer = fs.readFileSync(process.argv[2]);\n+\n+let m = new WebAssembly.Module(buffer);\n+let list = WebAssembly.Module.imports(m);\n+console.log('imports', list);\n+if (list.length !== process.argv.length - 3)\n+  throw new Error(\"wrong number of imports\")\n+\n+const imports = new Map();\n+for (let i = 3; i < process.argv.length; i++) {\n+  const [module, name] = process.argv[i].split('/');\n+  if (!imports.has(module))\n+    imports.set(module, new Map());\n+  imports.get(module).set(name, true);\n+}\n+\n+for (let i of list) {\n+  if (imports.get(i.module) === undefined || imports.get(i.module).get(i.name) === undefined)\n+    throw new Error(`didn't find import of ${i.module}::${i.name}`);\n+  imports.get(i.module).delete(i.name);\n+\n+  if (imports.get(i.module).size === 0)\n+    imports.delete(i.module);\n+}\n+\n+console.log(imports);\n+if (imports.size !== 0) {\n+  throw new Error('extra imports');\n+}"}]}