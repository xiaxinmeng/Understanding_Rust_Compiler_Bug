{"sha": "4ecbd3be5204e896d1cbb0d28b157699bf89caa3", "node_id": "C_kwDOAAsO6NoAKDRlY2JkM2JlNTIwNGU4OTZkMWNiYjBkMjhiMTU3Njk5YmY4OWNhYTM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:21:33Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:21:33Z"}, "message": "fix alloc", "tree": {"sha": "23f91fee84a101f9663db7505878261e330d38c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f91fee84a101f9663db7505878261e330d38c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecbd3be5204e896d1cbb0d28b157699bf89caa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecbd3be5204e896d1cbb0d28b157699bf89caa3", "html_url": "https://github.com/rust-lang/rust/commit/4ecbd3be5204e896d1cbb0d28b157699bf89caa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecbd3be5204e896d1cbb0d28b157699bf89caa3/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63e0ddbf1d820ee62892eee7a50e381d964f1dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e0ddbf1d820ee62892eee7a50e381d964f1dec", "html_url": "https://github.com/rust-lang/rust/commit/63e0ddbf1d820ee62892eee7a50e381d964f1dec"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "ad86c19309831384c2f7bafd8ef6228742734727", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ecbd3be5204e896d1cbb0d28b157699bf89caa3/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecbd3be5204e896d1cbb0d28b157699bf89caa3/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=4ecbd3be5204e896d1cbb0d28b157699bf89caa3", "patch": "@@ -576,8 +576,7 @@ impl<T, A: Allocator> Box<T, A> {\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     #[unstable(feature = \"box_into_boxed_slice\", issue = \"71582\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n-    pub const fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n+    pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(boxed);\n         unsafe { Box::from_raw_in(raw as *mut [T; 1], alloc) }\n     }\n@@ -809,9 +808,8 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n     /// assert_eq!(*five, 5)\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const unsafe fn assume_init(self) -> Box<T, A> {\n+    pub unsafe fn assume_init(self) -> Box<T, A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(self);\n         unsafe { Box::from_raw_in(raw as *mut T, alloc) }\n     }\n@@ -844,9 +842,8 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n     /// }\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const fn write(mut boxed: Self, value: T) -> Box<T, A> {\n+    pub fn write(mut boxed: Self, value: T) -> Box<T, A> {\n         unsafe {\n             (*boxed).write(value);\n             boxed.assume_init()\n@@ -1090,9 +1087,8 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     ///\n     /// [memory layout]: self#memory-layout\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const fn into_raw_with_allocator(b: Self) -> (*mut T, A) {\n+    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {\n         let (leaked, alloc) = Box::into_unique(b);\n         (leaked.as_ptr(), alloc)\n     }\n@@ -1102,10 +1098,9 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n         issue = \"none\",\n         reason = \"use `Box::leak(b).into()` or `Unique::from(Box::leak(b))` instead\"\n     )]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub const fn into_unique(b: Self) -> (Unique<T>, A) {\n+    pub fn into_unique(b: Self) -> (Unique<T>, A) {\n         // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n         // raw pointer for the type system. Turning it directly into a raw pointer would not be\n         // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n@@ -1163,9 +1158,8 @@ impl<T: ?Sized, A: Allocator> Box<T, A> {\n     /// assert_eq!(*static_ref, [4, 2, 3]);\n     /// ```\n     #[stable(feature = \"box_leak\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]\n     #[inline]\n-    pub const fn leak<'a>(b: Self) -> &'a mut T\n+    pub fn leak<'a>(b: Self) -> &'a mut T\n     where\n         A: 'a,\n     {"}]}