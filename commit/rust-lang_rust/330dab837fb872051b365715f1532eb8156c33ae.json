{"sha": "330dab837fb872051b365715f1532eb8156c33ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMGRhYjgzN2ZiODcyMDUxYjM2NTcxNWYxNTMyZWI4MTU2YzMzYWU=", "commit": {"author": {"name": "Behnam Esfahbod", "email": "behnam@zwnj.org", "date": "2017-06-27T00:27:01Z"}, "committer": {"name": "Behnam Esfahbod", "email": "behnam@zwnj.org", "date": "2017-06-27T00:37:54Z"}, "message": "[libcore/cmp] Expand Ord/PartialOrd Derivable doc for enum types\n\nExpand Derivable docblock section for `Ord` and `PartialOrd` to cover\n`enum` types, in addition to the existing language explaining it for\n`struct` types.", "tree": {"sha": "9a769d1c568d9e18153baa595e3bd8f83fb7bbb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a769d1c568d9e18153baa595e3bd8f83fb7bbb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/330dab837fb872051b365715f1532eb8156c33ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/330dab837fb872051b365715f1532eb8156c33ae", "html_url": "https://github.com/rust-lang/rust/commit/330dab837fb872051b365715f1532eb8156c33ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/330dab837fb872051b365715f1532eb8156c33ae/comments", "author": {"login": "behnam", "id": 37169, "node_id": "MDQ6VXNlcjM3MTY5", "avatar_url": "https://avatars.githubusercontent.com/u/37169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/behnam", "html_url": "https://github.com/behnam", "followers_url": "https://api.github.com/users/behnam/followers", "following_url": "https://api.github.com/users/behnam/following{/other_user}", "gists_url": "https://api.github.com/users/behnam/gists{/gist_id}", "starred_url": "https://api.github.com/users/behnam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/behnam/subscriptions", "organizations_url": "https://api.github.com/users/behnam/orgs", "repos_url": "https://api.github.com/users/behnam/repos", "events_url": "https://api.github.com/users/behnam/events{/privacy}", "received_events_url": "https://api.github.com/users/behnam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "behnam", "id": 37169, "node_id": "MDQ6VXNlcjM3MTY5", "avatar_url": "https://avatars.githubusercontent.com/u/37169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/behnam", "html_url": "https://github.com/behnam", "followers_url": "https://api.github.com/users/behnam/followers", "following_url": "https://api.github.com/users/behnam/following{/other_user}", "gists_url": "https://api.github.com/users/behnam/gists{/gist_id}", "starred_url": "https://api.github.com/users/behnam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/behnam/subscriptions", "organizations_url": "https://api.github.com/users/behnam/orgs", "repos_url": "https://api.github.com/users/behnam/repos", "events_url": "https://api.github.com/users/behnam/events{/privacy}", "received_events_url": "https://api.github.com/users/behnam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859c3236e5ab974f24a82bbebffc72f58cf43800", "url": "https://api.github.com/repos/rust-lang/rust/commits/859c3236e5ab974f24a82bbebffc72f58cf43800", "html_url": "https://github.com/rust-lang/rust/commit/859c3236e5ab974f24a82bbebffc72f58cf43800"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "2e691ea4af26edccecd23b92d40991fa27d2d66a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/330dab837fb872051b365715f1532eb8156c33ae/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330dab837fb872051b365715f1532eb8156c33ae/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=330dab837fb872051b365715f1532eb8156c33ae", "patch": "@@ -380,8 +380,9 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `Ord`?\n ///\n@@ -513,8 +514,9 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `PartialOrd`?\n ///"}]}