{"sha": "0f625ac48dc3b834c35796496c600a96e053227e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjI1YWM0OGRjM2I4MzRjMzU3OTY0OTZjNjAwYTk2ZTA1MzIyN2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-28T22:31:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-23T21:14:50Z"}, "message": "Add `extern crate` items to extern prelude", "tree": {"sha": "89eb8d4ea7cac228ff7a3df0fcb63ec909852a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89eb8d4ea7cac228ff7a3df0fcb63ec909852a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f625ac48dc3b834c35796496c600a96e053227e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f625ac48dc3b834c35796496c600a96e053227e", "html_url": "https://github.com/rust-lang/rust/commit/0f625ac48dc3b834c35796496c600a96e053227e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f625ac48dc3b834c35796496c600a96e053227e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391"}], "stats": {"total": 260, "additions": 183, "deletions": 77}, "files": [{"sha": "3dae2aaec7ceb4b42128cfd432a6270a62c701e3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -931,7 +931,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n-    pub extern_prelude: FxHashSet<ast::Name>,\n+    pub extern_prelude: FxHashMap<ast::Name, bool /* introduced by item */>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,"}, {"sha": "7153c729d1542b439d8dcec805ca5a8cccf0a37c", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // printing the `CrateRoot` so we don't prepend a `crate::` to paths.\n                 let mut is_prelude_crate = false;\n                 if let DefPathData::CrateRoot = self.def_key(parent_did).disambiguated_data.data {\n-                    if self.extern_prelude.contains(&data.as_interned_str().as_symbol()) {\n+                    if self.extern_prelude.contains_key(&data.as_interned_str().as_symbol()) {\n                         is_prelude_crate = true;\n                     }\n                 }"}, {"sha": "0d4a49e95ecde411f2b74095176123b9ed4cc88e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -36,7 +36,7 @@ use ty::subst::{Subst, Substs};\n use ty::util::{IntTypeExt, Discr};\n use ty::walk::TypeWalker;\n use util::captures::Captures;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n+use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use session::DataTypeKind;\n \n@@ -141,7 +141,7 @@ pub struct Resolutions {\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n-    pub extern_prelude: FxHashSet<Name>,\n+    pub extern_prelude: FxHashMap<Name, bool /* introduced by item */>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]"}, {"sha": "7ad012409b53a4bdfacc93b9633e1dd0c338ab1c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -790,7 +790,9 @@ where\n                 trait_map: resolver.trait_map,\n                 maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n                 maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n-                extern_prelude: resolver.extern_prelude,\n+                extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n+                    (ident.name, entry.introduced_by_item)\n+                }).collect(),\n             },\n \n             analysis: ty::CrateAnalysis {"}, {"sha": "777a5ab79d090f7ca625a88bee119cfd9341402b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -17,7 +17,7 @@ use macros::{InvocationData, ParentScope, LegacyScope};\n use resolve_imports::ImportDirective;\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n use {Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, ToNameBinding};\n-use {ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas};\n+use {ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n@@ -28,6 +28,7 @@ use rustc::middle::cstore::CrateStore;\n use rustc_metadata::cstore::LoadedMacro;\n \n use std::cell::Cell;\n+use std::ptr;\n use rustc_data_structures::sync::Lrc;\n \n use syntax::ast::{Name, Ident};\n@@ -437,13 +438,19 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n-                if injected_crate_name().map_or(false, |name| item.ident.name == name) {\n+                if injected_crate_name().map_or(false, |name| ident.name == name) {\n                     self.injected_crate = Some(module);\n                 }\n \n                 let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n+                if ptr::eq(self.current_module, self.graph_root) {\n+                    self.extern_prelude.entry(ident.modern()).or_insert(ExternPreludeEntry {\n+                        extern_crate_item: None,\n+                        introduced_by_item: true,\n+                    }).extern_crate_item = Some(binding);\n+                }\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n                     root_id: item.id,\n                     id: item.id,\n@@ -468,7 +475,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n             ItemKind::GlobalAsm(..) => {}\n \n-            ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n+            ItemKind::Mod(..) if ident == keywords::Invalid.ident() => {} // Crate root\n \n             ItemKind::Mod(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);"}, {"sha": "6fcee4051ac37830799d3d5838109668219cee75", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n         // each time.\n         let external_crate_names: BTreeSet<Symbol> = self.resolver.extern_prelude\n-            .clone().drain().collect();\n+            .iter().map(|(ident, _)| ident.name).collect();\n \n         // Insert a new path segment that we can replace.\n         let new_path_segment = path[0].clone();\n@@ -146,19 +146,14 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // Iterate in reverse so that we start with crates at the end of the alphabet. This means\n         // that we'll always get `std` before `core`.\n         for name in external_crate_names.iter().rev() {\n-            let ident = Ident::with_empty_ctxt(*name);\n-            // Calling `maybe_process_path_extern` ensures that we're only running `resolve_path`\n-            // on a crate name that won't ICE.\n-            if let Some(_) = self.crate_loader.maybe_process_path_extern(*name, ident.span) {\n-                // Replace the first after root (a placeholder we inserted) with a crate name\n-                // and check if that is valid.\n-                path[1].name = *name;\n-                let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n-                debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n-                       name, path, result);\n-                if let PathResult::Module(..) = result {\n-                    return Some(path)\n-                }\n+            // Replace the first after root (a placeholder we inserted) with a crate name\n+            // and check if that is valid.\n+            path[1].name = *name;\n+            let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+            debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n+                    name, path, result);\n+            if let PathResult::Module(..) = result {\n+                return Some(path)\n             }\n         }\n "}, {"sha": "67dc749cb0051e3c17537dc735f33cf9f83be091", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -1340,6 +1340,12 @@ impl PrimitiveTypeTable {\n     }\n }\n \n+#[derive(Default, Clone)]\n+pub struct ExternPreludeEntry<'a> {\n+    extern_crate_item: Option<&'a NameBinding<'a>>,\n+    pub introduced_by_item: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -1352,7 +1358,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n-    pub extern_prelude: FxHashSet<Name>,\n+    pub extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1668,15 +1674,16 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n-        let mut extern_prelude: FxHashSet<Name> =\n-            session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n+        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry> =\n+            session.opts.externs.iter().map(|kv| (Ident::from_str(kv.0), Default::default()))\n+                                       .collect();\n \n         if !attr::contains_name(&krate.attrs, \"no_core\") {\n-            extern_prelude.insert(Symbol::intern(\"core\"));\n+            extern_prelude.insert(Ident::from_str(\"core\"), Default::default());\n             if !attr::contains_name(&krate.attrs, \"no_std\") {\n-                extern_prelude.insert(Symbol::intern(\"std\"));\n+                extern_prelude.insert(Ident::from_str(\"std\"), Default::default());\n                 if session.rust_2018() {\n-                    extern_prelude.insert(Symbol::intern(\"meta\"));\n+                    extern_prelude.insert(Ident::from_str(\"meta\"), Default::default());\n                 }\n             }\n         }\n@@ -1963,21 +1970,10 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n \n         if !module.no_implicit_prelude {\n-            if ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n-                let crate_id = if record_used {\n-                    self.crate_loader.process_path_extern(ident.name, ident.span)\n-                } else if let Some(crate_id) =\n-                        self.crate_loader.maybe_process_path_extern(ident.name, ident.span) {\n-                    crate_id\n-                } else {\n-                    return None;\n-                };\n-                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                self.populate_module_if_necessary(&crate_root);\n-\n-                let binding = (crate_root, ty::Visibility::Public,\n-                               ident.span, Mark::root()).to_name_binding(self.arenas);\n-                return Some(LexicalScopeBinding::Item(binding));\n+            if ns == TypeNS {\n+                if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                    return Some(LexicalScopeBinding::Item(binding));\n+                }\n             }\n             if ns == TypeNS && is_known_tool(ident.name) {\n                 let binding = (Def::ToolMod, ty::Visibility::Public,\n@@ -4018,7 +4014,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.extern_prelude.iter().cloned());\n+                            names.extend(self.extern_prelude.iter().map(|(ident, _)| ident.name));\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4459,11 +4455,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if self.session.rust_2018() {\n             let extern_prelude_names = self.extern_prelude.clone();\n-            for &name in extern_prelude_names.iter() {\n-                let ident = Ident::with_empty_ctxt(name);\n-                if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(name,\n-                                                                                    ident.span)\n-                {\n+            for (ident, _) in extern_prelude_names.into_iter() {\n+                if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(ident.name,\n+                                                                                    ident.span) {\n                     let crate_root = self.get_module(DefId {\n                         krate: crate_id,\n                         index: CRATE_DEF_INDEX,\n@@ -4825,6 +4819,28 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }\n+\n+    fn extern_prelude_get(&mut self, ident: Ident, speculative: bool)\n+                          -> Option<&'a NameBinding<'a>> {\n+        self.extern_prelude.get(&ident.modern()).cloned().and_then(|entry| {\n+            if let Some(binding) = entry.extern_crate_item {\n+                Some(binding)\n+            } else {\n+                let crate_id = if !speculative {\n+                    self.crate_loader.process_path_extern(ident.name, ident.span)\n+                } else if let Some(crate_id) =\n+                        self.crate_loader.maybe_process_path_extern(ident.name, ident.span) {\n+                    crate_id\n+                } else {\n+                    return None;\n+                };\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(&crate_root);\n+                Some((crate_root, ty::Visibility::Public, ident.span, Mark::root())\n+                    .to_name_binding(self.arenas))\n+            }\n+        })\n+    }\n }\n \n fn is_self_type(path: &[Ident], namespace: Namespace) -> bool {"}, {"sha": "2f7e300b8ff38531ef33b187131ae579950261f3", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -691,19 +691,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude && self.extern_prelude.contains(&ident.name) {\n-                        let crate_id =\n-                            self.crate_loader.process_path_extern(ident.name, ident.span);\n-                        let crate_root =\n-                            self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                        self.populate_module_if_necessary(crate_root);\n-\n-                        let binding = (crate_root, ty::Visibility::Public,\n-                                       ident.span, Mark::root()).to_name_binding(self.arenas);\n-                        Ok((binding, Flags::PRELUDE, Flags::empty()))\n-                    } else {\n-                        Err(Determinacy::Determined)\n+                    let mut result = Err(Determinacy::Determined);\n+                    if use_prelude {\n+                        if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                            result = Ok((binding, Flags::PRELUDE, Flags::empty()));\n+                        }\n                     }\n+                    result\n                 }\n                 WhereToResolve::ToolPrelude => {\n                     if use_prelude && is_known_tool(ident.name) {"}, {"sha": "a3aa50fe0276cc9522499f647924a7e8b07e95c0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n@@ -202,7 +202,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     if !(\n                         ns == TypeNS &&\n                         !ident.is_path_segment_keyword() &&\n-                        self.extern_prelude.contains(&ident.name)\n+                        self.extern_prelude.contains_key(&ident.modern())\n                     ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n@@ -220,12 +220,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     self.resolve_crate_root(ident)\n                 } else if\n                     ns == TypeNS &&\n-                    !ident.is_path_segment_keyword() &&\n-                    self.extern_prelude.contains(&ident.name)\n+                    !ident.is_path_segment_keyword()\n                 {\n-                    let crate_id =\n-                        self.crate_loader.process_path_extern(ident.name, ident.span);\n-                    self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                    if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n+                        let module = self.get_module(binding.def().def_id());\n+                        self.populate_module_if_necessary(module);\n+                        return Ok(binding);\n+                    } else {\n+                        return Err(Determined);\n+                    }\n                 } else {\n                     return Err(Determined);\n                 };\n@@ -738,10 +741,9 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n-            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n-                let crate_id =\n-                    self.crate_loader.process_path_extern(name, span);\n-                Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))\n+            let external_crate = if ns == TypeNS {\n+                self.extern_prelude_get(Ident::with_empty_ctxt(name), true)\n+                    .map(|binding| binding.def())\n             } else {\n                 None\n             };"}, {"sha": "9d785dfb58ac18a59beb095990707b0ec258713a", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -164,7 +164,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n         // If the extern crate isn't in the extern prelude,\n         // there is no way it can be written as an `use`.\n         let orig_name = extern_crate.orig_name.unwrap_or(item.name);\n-        if !tcx.extern_prelude.contains(&orig_name) {\n+        if !tcx.extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n             continue;\n         }\n "}, {"sha": "25a2a37614778e4f4c62b843659154bf79123c61", "filename": "src/test/ui-fulldeps/proc-macro/extern-prelude-extern-crate-proc-macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,7 @@\n+// compile-pass\n+// edition:2018\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream; // OK\n+\n+fn main() {}"}, {"sha": "6117e5f6f3cd76681303d344f7805e49190b4af2", "filename": "src/test/ui/imports/extern-prelude-extern-crate-cfg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-cfg.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,16 @@\n+// compile-pass\n+// compile-flags:--cfg my_feature\n+\n+#![no_std]\n+\n+#[cfg(my_feature)]\n+extern crate std;\n+\n+mod m {\n+    #[cfg(my_feature)]\n+    fn conditional() {\n+        std::vec::Vec::<u8>::new(); // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "22248af6d3a2d41037c98bf3815b7737a35a4514", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:two_macros.rs\n+\n+mod n {\n+    extern crate two_macros;\n+}\n+\n+mod m {\n+    fn check() {\n+        two_macros::m!(); //~ ERROR failed to resolve. Use of undeclared type or module `two_macros`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "464812f1f690215c7469134ae45382194e230196", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve. Use of undeclared type or module `two_macros`\n+  --> $DIR/extern-prelude-extern-crate-fail.rs:9:9\n+   |\n+LL |         two_macros::m!(); //~ ERROR failed to resolve. Use of undeclared type or module `two_macros`\n+   |         ^^^^^^^^^^ Use of undeclared type or module `two_macros`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "bb4cf6ca99c752e87e87d5911a6c4ea272e45101", "filename": "src/test/ui/imports/extern-prelude-extern-crate-pass.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-pass.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+// aux-build:two_macros.rs\n+\n+extern crate two_macros;\n+\n+mod m {\n+    fn check() {\n+        two_macros::m!(); // OK\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3eefaf1267e88e1e52fc23546564a4cf5f44c4d7", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:two_macros.rs\n+\n+macro_rules! define_vec {\n+    () => {\n+        extern crate std as Vec;\n+    }\n+}\n+\n+define_vec!();\n+\n+mod m {\n+    fn check() {\n+        Vec::panic!(); //~ ERROR `Vec` is ambiguous\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6a28d74a343c95a4ce9fe319e13663cbdc480688", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -0,0 +1,20 @@\n+error[E0659]: `Vec` is ambiguous\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:13:9\n+   |\n+LL |         Vec::panic!(); //~ ERROR `Vec` is ambiguous\n+   |         ^^^ ambiguous name\n+   |\n+note: `Vec` could refer to the name defined here\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:5:9\n+   |\n+LL |         extern crate std as Vec;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | define_vec!();\n+   | -------------- in this macro invocation\n+note: `Vec` could also refer to the name defined here\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "688b9dc2797d05032cf8415e625c0bb65b1f417e", "filename": "src/test/ui/macros/macro-path-prelude-shadowing.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f625ac48dc3b834c35796496c600a96e053227e/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-shadowing.stderr?ref=0f625ac48dc3b834c35796496c600a96e053227e", "patch": "@@ -10,10 +10,6 @@ note: `std` could refer to the name imported here\n LL |     use m2::*; // glob-import user-defined `std`\n    |         ^^^^^\n note: `std` could also refer to the name defined here\n-  --> $DIR/macro-path-prelude-shadowing.rs:39:9\n-   |\n-LL |         std::panic!(); //~ ERROR `std` is ambiguous\n-   |         ^^^\n    = note: consider adding an explicit import of `std` to disambiguate\n \n error: aborting due to previous error"}]}