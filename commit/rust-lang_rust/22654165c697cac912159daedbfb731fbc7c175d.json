{"sha": "22654165c697cac912159daedbfb731fbc7c175d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjU0MTY1YzY5N2NhYzkxMjE1OWRhZWRiZmI3MzFmYmM3YzE3NWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-24T19:10:36Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-25T18:08:30Z"}, "message": "std: Add an is_parent_of method to Path", "tree": {"sha": "c7c96e46b10829c94fe817ef2cf785b1c527d2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c96e46b10829c94fe817ef2cf785b1c527d2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22654165c697cac912159daedbfb731fbc7c175d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22654165c697cac912159daedbfb731fbc7c175d", "html_url": "https://github.com/rust-lang/rust/commit/22654165c697cac912159daedbfb731fbc7c175d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22654165c697cac912159daedbfb731fbc7c175d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5375cf87182555e7d91089b95c088793db32fa05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5375cf87182555e7d91089b95c088793db32fa05", "html_url": "https://github.com/rust-lang/rust/commit/5375cf87182555e7d91089b95c088793db32fa05"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "c33a1ad11ee0ef167e35da9a9755e2f4a6b0137f", "filename": "src/libstd/path.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/22654165c697cac912159daedbfb731fbc7c175d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22654165c697cac912159daedbfb731fbc7c175d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=22654165c697cac912159daedbfb731fbc7c175d", "patch": "@@ -233,6 +233,21 @@ pub trait GenericPath : Clone + Eq + ToStr {\n         result\n     }\n \n+\n+    /// Returns `true` iff `child` is a suffix of `parent`. See the test\n+    /// case for examples.\n+    pub fn is_parent_of(parent: &Path, child: &Path) -> bool {\n+        if !parent.is_absolute() || child.is_absolute()\n+            || parent.components.len() < child.components.len()\n+            || parent.components.is_empty() {\n+            return false;\n+        }\n+        let child_components = child.components().len();\n+        let parent_components = parent.components().len();\n+        let to_drop = parent.components.len() - child_components;\n+        parent.components.slice(to_drop, parent_components) == child.components\n+    }\n+\n     fn components<'a>(&'a self) -> &'a [~str];\n }\n \n@@ -1450,4 +1465,34 @@ mod tests {\n \n     }\n \n+\n+    #[test]\n+    fn test_is_parent_of() {\n+        assert!(is_parent_of(&PosixPath(\"/a/b/c/d/e\"), &PosixPath(\"c/d/e\")));\n+        assert!(!is_parent_of(&PosixPath(\"a/b/c/d/e\"), &PosixPath(\"c/d/e\")));\n+        assert!(!is_parent_of(&PosixPath(\"/a/b/c/d/e\"), &PosixPath(\"/c/d/e\")));\n+        assert!(!is_parent_of(&PosixPath(\"\"), &PosixPath(\"\")));\n+        assert!(!is_parent_of(&PosixPath(\"\"), &PosixPath(\"a/b/c\")));\n+        assert!(is_parent_of(&PosixPath(\"/a/b/c\"), &PosixPath(\"\")));\n+        assert!(is_parent_of(&PosixPath(\"/a/b/c\"), &PosixPath(\"a/b/c\")));\n+        assert!(!is_parent_of(&PosixPath(\"/a/b/c\"), &PosixPath(\"d/e/f\")));\n+\n+        let abcde = WindowsPath(\"C:\\\\a\\\\b\\\\c\\\\d\\\\e\");\n+        let rel_abcde = WindowsPath(\"a\\\\b\\\\c\\\\d\\\\e\");\n+        let cde   = WindowsPath(\"c\\\\d\\\\e\");\n+        let slashcde = WindowsPath(\"C:\\\\c\\\\d\\\\e\");\n+        let empty = WindowsPath(\"\");\n+        let abc = WindowsPath(\"C:\\\\a\\\\b\\\\c\");\n+        let rel_abc = WindowsPath(\"a\\\\b\\\\c\");\n+        let def = WindowsPath(\"d\\\\e\\\\f\");\n+\n+        assert!(is_parent_of(&abcde, &cde));\n+        assert!(!is_parent_of(&rel_abcde, &cde));\n+        assert!(!is_parent_of(&abcde, &slashcde));\n+        assert!(!is_parent_of(&empty, &empty));\n+        assert!(is_parent_of(&abc, &empty);\n+        assert!(is_parent_of(&abc, &rel_abc));\n+        assert!(!is_parent_of(&abc, &def));\n+    }\n+\n }"}]}