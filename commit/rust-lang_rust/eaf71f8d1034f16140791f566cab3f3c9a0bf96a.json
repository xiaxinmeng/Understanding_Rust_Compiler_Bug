{"sha": "eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjcxZjhkMTAzNGYxNjE0MDc5MWY1NjZjYWIzZjNjOWEwYmY5NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-26T03:45:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-26T03:45:32Z"}, "message": "Auto merge of #35906 - jseyfried:local_prelude, r=eddyb\n\nUse `#[prelude_import]` in `libcore` and `libstd`\n\nr? @eddyb", "tree": {"sha": "d7bdca8083a5457af6f42e4e93693fcd272c0ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7bdca8083a5457af6f42e4e93693fcd272c0ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "html_url": "https://github.com/rust-lang/rust/commit/eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07dd59eaeb7be95afd2fb3dc131108ae750c91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07dd59eaeb7be95afd2fb3dc131108ae750c91c", "html_url": "https://github.com/rust-lang/rust/commit/e07dd59eaeb7be95afd2fb3dc131108ae750c91c"}, {"sha": "a9a2979dbaddc540673cf66da52e8eb45e66b055", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a2979dbaddc540673cf66da52e8eb45e66b055", "html_url": "https://github.com/rust-lang/rust/commit/a9a2979dbaddc540673cf66da52e8eb45e66b055"}], "stats": {"total": 446, "additions": 43, "deletions": 403}, "files": [{"sha": "5ece27372e13034f2cc0400e3ce2f37e98903d20", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -151,7 +151,7 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::ops::{Drop, Deref, DerefMut};\n+use core::ops::{Deref, DerefMut};\n use core::iter::{FromIterator, FusedIterator};\n use core::mem::swap;\n use core::mem::size_of;"}, {"sha": "3ad1d08298581c81785cf6259754a24eab774033", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,14 +12,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::clone::Clone;\n-use core::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n-use core::convert::AsRef;\n-use core::default::Default;\n+use core::cmp::Ordering;\n use core::hash::{Hash, Hasher};\n-use core::marker::Sized;\n use core::ops::Deref;\n-use core::option::Option;\n \n use fmt;\n "}, {"sha": "769c5162a456057a3d22a027b277f5345bbf8c2c", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -1159,9 +1159,6 @@ unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n \n #[cfg(test)]\n mod tests {\n-    use std::clone::Clone;\n-    use std::iter::{Iterator, IntoIterator, Extend};\n-    use std::option::Option::{self, Some, None};\n     use std::__rand::{thread_rng, Rng};\n     use std::thread;\n     use std::vec::Vec;\n@@ -1319,7 +1316,6 @@ mod tests {\n \n     #[test]\n     fn test_26021() {\n-        use std::iter::ExactSizeIterator;\n         // There was a bug in split_off that failed to null out the RHS's head's prev ptr.\n         // This caused the RHS's dtor to walk up into the LHS at drop and delete all of\n         // its nodes."}, {"sha": "d331ead2c5ee685173d8ab82210a99c3f297fe03", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -14,7 +14,6 @@\n \n //! Range syntax.\n \n-use core::option::Option::{self, None, Some};\n use core::ops::{RangeFull, Range, RangeTo, RangeFrom};\n \n /// **RangeArgument** is implemented by Rust's built-in range types, produced"}, {"sha": "96624f121b2afbe5ffa81433606b4c3ba84046cc", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -2332,9 +2332,6 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::iter::Iterator;\n-    use core::option::Option::Some;\n-\n     use test;\n \n     use super::VecDeque;"}, {"sha": "4f486ad7cb8b23cbf47b5e00c329656027df1393", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -72,12 +72,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fmt;\n-use marker::Send;\n use mem::transmute;\n-use option::Option::{self, Some, None};\n use raw::TraitObject;\n use intrinsics;\n-use marker::{Reflect, Sized};\n+use marker::Reflect;\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait"}, {"sha": "9866a39619a82ecfdc3265be60e7e4e4adde7006", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -20,16 +20,11 @@\n             issue = \"27778\")]\n \n use borrow::{Borrow, BorrowMut};\n-use clone::Clone;\n-use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use convert::{AsRef, AsMut};\n-use default::Default;\n+use cmp::Ordering;\n use fmt;\n use hash::{Hash, self};\n-use iter::IntoIterator;\n-use marker::{Copy, Sized, Unsize};\n-use option::Option;\n-use slice::{Iter, IterMut, SliceExt};\n+use marker::Unsize;\n+use slice::{Iter, IterMut};\n \n /// Utility trait implemented only on arrays of fixed size\n ///"}, {"sha": "3d223465c88a03b44dc01bb913d210b50e14d575", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A trait for borrowing data.\n ///\n /// In general, there may be several ways to \"borrow\" a piece of data.  The"}, {"sha": "ec35198b68517ae5988fb6bdf864288eb02931cc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -144,17 +144,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n-use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use convert::From;\n-use default::Default;\n+use cmp::Ordering;\n use fmt::{self, Debug, Display};\n-use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n-use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n-use option::Option;\n-use option::Option::{None, Some};\n-use result::Result;\n-use result::Result::{Ok, Err};\n+use marker::{PhantomData, Unsize};\n+use ops::{Deref, DerefMut, CoerceUnsized};\n \n /// A mutable memory location that admits only `Copy` data.\n ///"}, {"sha": "4677f0b523f425c6365d78bf8b764f90826605aa", "filename": "src/libcore/char.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -15,8 +15,6 @@\n #![allow(non_snake_case)]\n #![stable(feature = \"core_char\", since = \"1.2.0\")]\n \n-use prelude::v1::*;\n-\n use char_private::is_printable;\n use iter::FusedIterator;\n use mem::transmute;"}, {"sha": "708e7cc15e7c97f97f89f9f4c326bc02bf2acd97", "filename": "src/libcore/char_private.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fchar_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fchar_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar_private.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -11,8 +11,6 @@\n // NOTE: The following code was generated by \"src/etc/char_private.py\",\n //       do not edit directly!\n \n-use slice::SliceExt;\n-\n fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n     for &s in singletons {\n         if x == s {"}, {"sha": "748bb62a1f3eb51794c40f8611ca7f4d1d1e4f29", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -44,8 +44,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A common trait for the ability to explicitly duplicate an object.\n ///\n /// Differs from `Copy` in that `Copy` is implicit and extremely inexpensive, while"}, {"sha": "907dd1508d8bee9b7c1012629b974da85473a6e5", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -34,9 +34,6 @@\n \n use self::Ordering::*;\n \n-use marker::Sized;\n-use option::Option::{self, Some};\n-\n /// Trait for equality comparisons which are [partial equivalence\n /// relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).\n ///\n@@ -571,11 +568,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n-    use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering};\n-    use cmp::Ordering::{Less, Greater, Equal};\n-    use marker::Sized;\n-    use option::Option;\n-    use option::Option::{Some, None};\n+    use cmp::Ordering::{self, Less, Greater, Equal};\n \n     macro_rules! partial_eq_impl {\n         ($($t:ty)*) => ($("}, {"sha": "8e7e2abfc1e174c6dc73267c87218f6b623eb8eb", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -40,9 +40,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-use result::Result;\n-\n /// A cheap, reference-to-reference conversion.\n ///\n /// `AsRef` is very similar to, but different than, `Borrow`. See"}, {"sha": "85e4b2a0067698b385963e3fce5c586909673056", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A trait for giving a type a useful default value.\n ///\n /// Sometimes, you want to fall back to some kind of default value, and"}, {"sha": "102e3c0bd7b95f04841117ef16b8cb3c4a4e65a4", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use fmt::{self, FlagV1};\n \n struct PadAdapter<'a, 'b: 'a> {"}, {"sha": "66ef92928eb06c590dcda324ed897e454c2935ac", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut, BorrowState};\n use marker::PhantomData;\n use mem;\n@@ -905,8 +903,6 @@ impl<'a> Formatter<'a> {\n                         prefix: &str,\n                         buf: &str)\n                         -> Result {\n-        use char::CharExt;\n-\n         let mut width = buf.len();\n \n         let mut sign = None;\n@@ -1020,7 +1016,6 @@ impl<'a> Formatter<'a> {\n                        f: F) -> Result\n         where F: FnOnce(&mut Formatter) -> Result,\n     {\n-        use char::CharExt;\n         let align = match self.align {\n             rt::v1::Alignment::Unknown => default,\n             _ => self.align"}, {"sha": "0145897d8f6909568cdba4b3e066ddf6a7242520", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -14,8 +14,6 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n-use prelude::v1::*;\n-\n use fmt;\n use num::Zero;\n use ops::{Div, Rem, Sub};"}, {"sha": "081f0c14ec30c978e44611e66c1650d45a3df8b3", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -71,8 +71,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use fmt;\n use marker;\n use mem;\n@@ -288,8 +286,6 @@ impl<H> Default for BuildHasherDefault<H> {\n //////////////////////////////////////////////////////////////////////////////\n \n mod impls {\n-    use prelude::v1::*;\n-\n     use mem;\n     use slice;\n     use super::*;"}, {"sha": "bd6cae92b050c6bdb80ffde8b5aa537aacae184b", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n //! An implementation of SipHash.\n \n-use prelude::v1::*;\n-\n use marker::PhantomData;\n use ptr;\n "}, {"sha": "8271b85b01a3b93553403fb45f6c096256a1cf79", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -46,8 +46,6 @@\n             issue = \"0\")]\n #![allow(missing_docs)]\n \n-use marker::Sized;\n-\n extern \"rust-intrinsic\" {\n \n     // NB: These intrinsics take raw pointers because they mutate aliased"}, {"sha": "ea97c87efbb410fad9c24a4aed79cf75f5eba764", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,19 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use cmp::{Ord, PartialOrd, PartialEq, Ordering};\n-use default::Default;\n-use ops::FnMut;\n-use option::Option::{self, Some, None};\n-use marker::Sized;\n+use cmp::Ordering;\n \n use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse};\n use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, Take, TakeWhile, Rev};\n use super::{Zip, Sum, Product};\n-use super::ChainState;\n-use super::{DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator};\n-use super::{IntoIterator, ZipImpl};\n+use super::{ChainState, FromIterator, ZipImpl};\n \n fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n "}, {"sha": "b1d3ab1d1febcd18cb81bd4f4a566aad692342c0", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -299,13 +299,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use cmp;\n-use default::Default;\n use fmt;\n use iter_private::TrustedRandomAccess;\n-use ops::FnMut;\n-use option::Option::{self, Some, None};\n use usize;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8408e5d88b4cbec4b37d1ddcf492a93b0d9fccc7", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use cmp::PartialOrd;\n use mem;\n use ops::{self, Add, Sub};\n-use option::Option::{self, Some, None};\n-use marker::Sized;\n use usize;\n \n-use super::{DoubleEndedIterator, ExactSizeIterator, Iterator, FusedIterator};\n+use super::FusedIterator;\n \n /// Objects that can be stepped over in both directions.\n ///"}, {"sha": "da346eaf1db96d24ee991be0bfe431e201217b52", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use default::Default;\n use fmt;\n use marker;\n-use option::Option::{self, Some, None};\n use usize;\n \n-use super::{DoubleEndedIterator, IntoIterator, Iterator, ExactSizeIterator, FusedIterator};\n+use super::FusedIterator;\n \n /// An iterator that repeats an element endlessly.\n ///"}, {"sha": "59e23c4d960567d6af82c729eada07b6becd1c14", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use option::Option::{self, Some};\n-use marker::Sized;\n-\n-use super::Iterator;\n-\n /// Conversion from an `Iterator`.\n ///\n /// By implementing `FromIterator` for a type, you define how it will be"}, {"sha": "83eeef31ab054cd074c3fa515a78f6ead1401594", "filename": "src/libcore/iter_private.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fiter_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter_private.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use iter::ExactSizeIterator;\n-\n /// An iterator whose items are random accessible efficiently\n ///\n /// # Safety"}, {"sha": "1ae4cf8e5ef5f05b37c920206786768eba05d41c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -91,6 +91,11 @@\n #![feature(unboxed_closures)]\n #![feature(question_mark)]\n #![feature(never_type)]\n+#![feature(prelude_import)]\n+\n+#[prelude_import]\n+#[allow(unused)]\n+use prelude::v1::*;\n \n #[macro_use]\n mod macros;"}, {"sha": "0a46813df7eb82774e94d5e081598a2321963e24", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -16,10 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use cmp;\n-use default::Default;\n-use option::Option;\n use hash::Hash;\n use hash::Hasher;\n \n@@ -414,8 +411,6 @@ pub struct PhantomData<T:?Sized>;\n impls! { PhantomData }\n \n mod impls {\n-    use super::{Send, Sync, Sized};\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9c61f76ac8895b9e8817447030606e8b5d1da6e3", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -15,7 +15,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n use intrinsics;\n use ptr;\n "}, {"sha": "47afaf77353ee42803a246a61d1bc98a64bb9ef1", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,7 +13,6 @@\n             reason = \"needs an RFC to flesh out the design\",\n             issue = \"27730\")]\n \n-use marker::Sized;\n use ops::{CoerceUnsized, Deref};\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct"}, {"sha": "bc503ba3e46aedc0ccb983818e970680268b5c93", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -27,8 +27,6 @@\n             issue = \"0\")]\n #![macro_use]\n \n-use prelude::v1::*;\n-\n use mem;\n use intrinsics;\n \n@@ -494,6 +492,5 @@ define_bignum!(Big32x40: type=Digit32, n=40);\n // this one is used for testing only.\n #[doc(hidden)]\n pub mod tests {\n-    use prelude::v1::*;\n     define_bignum!(Big8x3: type=u8, n=3);\n }"}, {"sha": "604bc7c10dea0aedaa886e976f1c63e392314fce", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,7 +10,6 @@\n \n //! The various algorithms from the paper.\n \n-use prelude::v1::*;\n use cmp::min;\n use cmp::Ordering::{Less, Equal, Greater};\n use num::diy_float::Fp;\n@@ -47,7 +46,6 @@ mod fpu_precision {\n #[cfg(all(target_arch=\"x86\", not(target_feature=\"sse2\")))]\n mod fpu_precision {\n     use mem::size_of;\n-    use ops::Drop;\n \n     /// A structure used to preserve the original value of the FPU control word, so that it can be\n     /// restored when the structure is dropped."}, {"sha": "cd40e399ab95e6639ebb579e0e89776db8179b96", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -92,7 +92,6 @@\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use prelude::v1::*;\n use fmt;\n use str::FromStr;\n "}, {"sha": "34b41fa9decd295703f903bb48aad4f4d4c5b0cc", "filename": "src/libcore/num/dec2flt/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,7 +12,6 @@\n \n // FIXME This module's name is a bit unfortunate, since other modules also import `core::num`.\n \n-use prelude::v1::*;\n use cmp::Ordering::{self, Less, Equal, Greater};\n \n pub use num::bignum::Big32x40 as Big;"}, {"sha": "d20986faa0fc24b1dfde7fcfc65db70ab6c82e6a", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -20,7 +20,6 @@\n //! modules rely on to not panic (or overflow) in turn.\n //! To make matters worse, all that happens in a single pass over the input.\n //! So, be careful when modifying anything, and double-check with the other modules.\n-use prelude::v1::*;\n use super::num;\n use self::ParseResult::{Valid, ShortcutToInf, ShortcutToZero, Invalid};\n "}, {"sha": "e3b58b6cc7ce94407980d2c351e71b2a982f2565", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -27,7 +27,6 @@\n //! Many functions in this module only handle normal numbers. The dec2flt routines conservatively\n //! take the universally-correct slow path (Algorithm M) for very small and very large numbers.\n //! That algorithm needs only next_float() which does handle subnormals and zeros.\n-use prelude::v1::*;\n use u32;\n use cmp::Ordering::{Less, Equal, Greater};\n use ops::{Mul, Div, Neg};"}, {"sha": "276667e44aae1a42c65a91e14d2225d805fff8db", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n //! Decodes a floating-point value into individual parts and error ranges.\n \n-use prelude::v1::*;\n-\n use {f32, f64};\n use num::FpCategory;\n use num::dec2flt::rawfp::RawFloat;"}, {"sha": "f6c03a59f81e4ed7750a3cda89fc5841e64a3505", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -130,7 +130,6 @@ functions.\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use prelude::v1::*;\n use i16;\n pub use self::decoder::{decode, DecodableFloat, FullDecoded, Decoded};\n "}, {"sha": "6aa4f297e75ba7f79fe6164867c36dd01ee860b5", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -15,8 +15,6 @@ Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].\n     quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n */\n \n-use prelude::v1::*;\n-\n use cmp::Ordering;\n \n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};"}, {"sha": "cf70a1978f5e6d53aa3de3fdf7b02fecfd459806", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -16,8 +16,6 @@ Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n     accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n */\n \n-use prelude::v1::*;\n-\n use num::diy_float::Fp;\n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n "}, {"sha": "29ee29eb3eb7f61584dbbf0f8b0a1a6708679e81", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,17 +12,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use char::CharExt;\n-use cmp::PartialOrd;\n-use convert::{From, TryFrom};\n+use convert::TryFrom;\n use fmt;\n use intrinsics;\n-use marker::{Copy, Sized};\n use mem::size_of;\n-use option::Option::{self, Some, None};\n-use result::Result::{self, Ok, Err};\n-use str::{FromStr, StrExt};\n-use slice::SliceExt;\n+use str::FromStr;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///"}, {"sha": "b9adaf0206d948048b9ed1501b2216416c99656a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -71,10 +71,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cmp::PartialOrd;\n use fmt;\n-use marker::{Sized, Unsize};\n-use result::Result::{self, Ok, Err};\n+use marker::Unsize;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n@@ -2208,9 +2206,6 @@ pub trait FnOnce<Args> {\n }\n \n mod impls {\n-    use marker::Sized;\n-    use super::{Fn, FnMut, FnOnce};\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> Fn<A> for &'a F\n         where F : Fn<A>"}, {"sha": "cf52849e019722a71797d4a300983f06f9eab291", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -139,17 +139,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use self::Option::*;\n-\n-use clone::Clone;\n-use convert::From;\n-use default::Default;\n-use iter::{Iterator, FromIterator, IntoIterator, ExactSizeIterator, DoubleEndedIterator};\n-use iter::FusedIterator;\n+use iter::{FromIterator, FusedIterator};\n use mem;\n-use ops::FnOnce;\n-use result::Result::{Ok, Err};\n-use result::Result;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of"}, {"sha": "8c8925251e5cf4ef9d4c1a75aa6f0d8966fa8d4b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -16,17 +16,14 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use intrinsics;\n use ops::{CoerceUnsized, Deref};\n use fmt;\n use hash;\n-use option::Option::{self, Some, None};\n-use marker::{Copy, PhantomData, Send, Sized, Sync, Unsize};\n+use marker::{PhantomData, Unsize};\n use mem;\n use nonzero::NonZero;\n \n-use cmp::{PartialEq, Eq, Ord, PartialOrd};\n use cmp::Ordering::{self, Less, Equal, Greater};\n \n // FIXME #19649: intrinsic docs don't render, so these have no docs :("}, {"sha": "49eb5619bc6baafa72ea7b32a6e9259656e67a24", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -236,14 +236,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use self::Result::{Ok, Err};\n-\n-use clone::Clone;\n use fmt;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSizeIterator, IntoIterator};\n-use iter::FusedIterator;\n-use ops::FnOnce;\n-use option::Option::{self, None, Some};\n+use iter::{FromIterator, FusedIterator};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///"}, {"sha": "baa41aa7af5b274298181abc13424fe93d949a35", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -33,24 +33,15 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-use clone::Clone;\n-use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n-use cmp::Ordering::{Less, Equal, Greater};\n+use cmp::Ordering::{self, Less, Equal, Greater};\n use cmp;\n-use convert::AsRef;\n-use default::Default;\n use fmt;\n use intrinsics::assume;\n use iter::*;\n-use ops::{FnMut, self};\n-use ops::RangeFull;\n-use option::Option;\n-use option::Option::{None, Some};\n-use result::Result;\n-use result::Result::{Ok, Err};\n+use ops::{self, RangeFull};\n use ptr;\n use mem;\n-use marker::{Copy, Send, Sync, self};\n+use marker;\n use iter_private::TrustedRandomAccess;\n \n #[repr(C)]"}, {"sha": "18e43c02c648fb7973fd5eb9b46722fc08e9d7dd", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -18,18 +18,10 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n-use clone::Clone;\n-use convert::AsRef;\n-use default::Default;\n use fmt;\n-use iter::ExactSizeIterator;\n-use iter::{Map, Cloned, Iterator, DoubleEndedIterator, FusedIterator};\n-use marker::Sized;\n+use iter::{Map, Cloned, FusedIterator};\n use mem;\n-use ops::{Fn, FnMut, FnOnce};\n-use option::Option::{self, None, Some};\n-use result::Result::{self, Ok, Err};\n-use slice::{self, SliceExt};\n+use slice;\n \n pub mod pattern;\n \n@@ -1338,11 +1330,9 @@ Section: Trait implementations\n */\n \n mod traits {\n-    use cmp::{Ord, Ordering, PartialEq, PartialOrd, Eq};\n-    use option::Option;\n-    use option::Option::Some;\n+    use cmp::Ordering;\n     use ops;\n-    use str::{StrExt, eq_slice};\n+    use str::eq_slice;\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Ord for str {"}, {"sha": "7dced2ba7514c2ac492167f882adcede4e7970bb", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -17,8 +17,6 @@\n             reason = \"API not fully fleshed out and ready to be stabilized\",\n             issue = \"27721\")]\n \n-use prelude::v1::*;\n-\n use cmp;\n use fmt;\n use usize;"}, {"sha": "75ddd2021a8f7fa74f9afa82b162f3820b4d6142", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -79,14 +79,8 @@\n \n use self::Ordering::*;\n \n-use marker::{Send, Sync};\n-\n use intrinsics;\n use cell::UnsafeCell;\n-\n-use result::Result::{self, Ok, Err};\n-\n-use default::Default;\n use fmt;\n \n /// A boolean type which can be safely shared between threads."}, {"sha": "c3608b60a31a7ad9d9d422681aee947e0f8add51", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,12 +10,8 @@\n \n // See src/libstd/primitive_docs.rs for documentation.\n \n-use clone::Clone;\n use cmp::*;\n use cmp::Ordering::*;\n-use default::Default;\n-use option::Option;\n-use option::Option::Some;\n \n // FIXME(#19630) Remove this work-around\n macro_rules! e {"}, {"sha": "a063b85646809f3e2c89c7b58b24bf9c0699b8c5", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use mem;\n use ops::Range;\n use iter::FusedIterator;\n@@ -454,7 +452,6 @@ static ASCII_UPPERCASE_MAP: [u8; 256] = [\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::*;\n     use char::from_u32;\n "}, {"sha": "14da36ca4834e272dce558e8fdb2f49bbe0e44ac", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -2059,8 +2059,6 @@ fn assert_covariance() {\n \n #[cfg(test)]\n mod test_map {\n-    use prelude::v1::*;\n-\n     use super::HashMap;\n     use super::Entry::{Occupied, Vacant};\n     use cell::RefCell;"}, {"sha": "ca5137e957362993a3ca3adc36bf0bab3c8fb91b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -1067,8 +1067,6 @@ fn assert_covariance() {\n \n #[cfg(test)]\n mod test_set {\n-    use prelude::v1::*;\n-\n     use super::HashSet;\n \n     #[test]"}, {"sha": "7a94c39621808865c513bf52a589a3f22ee87fd6", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -16,8 +16,6 @@\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use error::Error;\n use ffi::{OsStr, OsString};\n use fmt;\n@@ -950,7 +948,6 @@ mod arch {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::*;\n \n     use iter::repeat;"}, {"sha": "44595361fb57c504cf7460f8f85e90e11534f6a8", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -48,16 +48,15 @@\n // reconsider what crate these items belong in.\n \n use any::TypeId;\n-use boxed::Box;\n use cell;\n use char;\n use fmt::{self, Debug, Display};\n-use marker::{Send, Sync, Reflect};\n+use marker::Reflect;\n use mem::transmute;\n use num;\n use raw::TraitObject;\n use str;\n-use string::{self, String};\n+use string;\n \n /// Base functionality for all errors in Rust.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -454,7 +453,6 @@ impl Error + Send + Sync {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::Error;\n     use fmt;\n "}, {"sha": "38222c014f61b165d5eec6f1f159f477a158479a", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -9,25 +9,18 @@\n // except according to those terms.\n \n use ascii;\n-use borrow::{Cow, ToOwned, Borrow};\n-use boxed::Box;\n-use convert::{Into, From};\n-use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n+use borrow::{Cow, Borrow};\n+use cmp::Ordering;\n use error::Error;\n use fmt::{self, Write};\n use io;\n-use iter::Iterator;\n use libc;\n use mem;\n use memchr;\n use ops;\n-use option::Option::{self, Some, None};\n use os::raw::c_char;\n-use result::Result::{self, Ok, Err};\n use slice;\n use str::{self, Utf8Error};\n-use string::String;\n-use vec::Vec;\n \n /// A type representing an owned C-compatible string\n ///\n@@ -700,7 +693,6 @@ impl AsRef<CStr> for CString {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::*;\n     use os::raw::c_char;\n     use borrow::Cow::{Borrowed, Owned};"}, {"sha": "36cf4ef758d8e40d7d1d512d11ab7176f67d0216", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow::{Borrow, Cow, ToOwned};\n+use borrow::{Borrow, Cow};\n use fmt::{self, Debug};\n use mem;\n-use string::String;\n use ops;\n use cmp;\n use hash::{Hash, Hasher};\n-use vec::Vec;\n \n use sys::os_str::{Buf, Slice};\n use sys_common::{AsInner, IntoInner, FromInner};"}, {"sha": "f2374e722c1e38013f527544e630a2c6068eb424", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -23,7 +23,6 @@ use io::{self, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n use sys::fs as fs_imp;\n use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n-use vec::Vec;\n use time::SystemTime;\n \n /// A reference to an open file on the filesystem.\n@@ -1677,7 +1676,6 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use io::prelude::*;\n \n     use fs::{self, File, OpenOptions};"}, {"sha": "a26a932ad2de6c076f9d3d0720ce4135802aebf1", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,7 +10,6 @@\n \n //! Buffering wrappers for I/O traits\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use marker::Reflect;\n@@ -788,7 +787,6 @@ impl<W: Write> fmt::Debug for LineWriter<W> where W: fmt::Debug {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use io::prelude::*;\n     use io::{self, BufReader, BufWriter, LineWriter, SeekFrom};\n     use sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "1b836b745372f00ed8189a6b4e2b956b1c5e5e12", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use cmp;\n@@ -284,7 +283,6 @@ impl Write for Cursor<Box<[u8]>> {\n mod tests {\n     use io::prelude::*;\n     use io::{Cursor, SeekFrom};\n-    use vec::Vec;\n \n     #[test]\n     fn test_vec_writer() {"}, {"sha": "d90be2e08a9fc6dec04ea0f7a2ca4f03cf486924", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use boxed::Box;\n-use convert::Into;\n use error;\n use fmt;\n-use marker::{Send, Sync};\n-use option::Option::{self, Some, None};\n use result;\n use sys;\n \n@@ -522,7 +518,6 @@ fn _assert_error_is_sync_send() {\n \n #[cfg(test)]\n mod test {\n-    use prelude::v1::*;\n     use super::{Error, ErrorKind};\n     use error;\n     use fmt;"}, {"sha": "cd05e6b5de9d25262a13d6d16a943967c86bd3f5", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use boxed::Box;\n use cmp;\n use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};\n use fmt;\n use mem;\n-use string::String;\n-use vec::Vec;\n \n // =============================================================================\n // Forwarding implementations\n@@ -228,7 +225,6 @@ impl Write for Vec<u8> {\n #[cfg(test)]\n mod tests {\n     use io::prelude::*;\n-    use vec::Vec;\n     use test;\n \n     #[bench]"}, {"sha": "ce205c3b11ca5ee14542e5c208189320152d20c1", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use cell::Cell;\n use ptr;\n use sync::Arc;"}, {"sha": "1053792cd439bc4ef414f507a66973451f4ec51d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -253,15 +253,8 @@ use cmp;\n use rustc_unicode::str as core_str;\n use error as std_error;\n use fmt;\n-use iter::{Iterator};\n-use marker::Sized;\n-use ops::{Drop, FnOnce};\n-use option::Option::{self, Some, None};\n-use result::Result::{Ok, Err};\n use result;\n-use string::String;\n use str;\n-use vec::Vec;\n use memchr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1734,7 +1727,6 @@ impl<B: BufRead> Iterator for Lines<B> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use io::prelude::*;\n     use io;\n     use super::Cursor;"}, {"sha": "9a782e95f6e5f994fd2cabe77cd59512a99ef90f", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use cell::{RefCell, BorrowState};"}, {"sha": "2c6880281b5e60088b36c6497ba747056b19fab9", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -167,8 +167,6 @@ impl Write for Sink {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use io::prelude::*;\n     use io::{copy, sink, empty, repeat};\n "}, {"sha": "44d1fbfdb70b3419ba6e7dbfcdab6b7830f58773", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -252,6 +252,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(panic_unwind)]\n #![feature(placement_in_syntax)]\n+#![feature(prelude_import)]\n #![feature(question_mark)]\n #![feature(rand)]\n #![feature(raw)]\n@@ -292,6 +293,10 @@\n #![allow(unused_features)] // std may use features in a platform-specific way\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#[prelude_import]\n+#[allow(unused)]\n+use prelude::v1::*;\n+\n #[cfg(test)] extern crate test;\n \n // We want to reexport a few macros from core but libcore has already been"}, {"sha": "d0b59b42c1798a73a2ca56e75d553849ea5a9672", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use fmt;\n use hash;\n use io;\n@@ -523,7 +521,6 @@ impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use net::*;\n     use net::test::{tsa, sa6, sa4};\n "}, {"sha": "c6a7a77e68a6b369c4cfd06f33e1cb67d7a95d1a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -653,7 +653,6 @@ impl From<[u8; 16]> for Ipv6Addr {\n // Tests for this module\n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use net::*;\n     use net::Ipv6MulticastScope::*;\n     use net::test::{tsa, sa6, sa4};"}, {"sha": "2a78afa85f7f03ff9ce7cbe7b3ffa59c307ee6fd", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use io::{self, Error, ErrorKind};\n use sys_common::net as net_imp;\n "}, {"sha": "854d87c4cbead7114f36996d18db46c8bf1c4bf9", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,8 +13,6 @@\n //! This module is \"publicly exported\" through the `FromStr` implementations\n //! below.\n \n-use prelude::v1::*;\n-\n use error::Error;\n use fmt;\n use net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};"}, {"sha": "dcd3652af876b43d61881ee95f627cb8115d781d", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use fmt;\n@@ -438,8 +437,6 @@ impl fmt::Debug for TcpListener {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use io::ErrorKind;\n     use io::prelude::*;\n     use net::*;"}, {"sha": "98ac61f6461132d94f320d11ba31b7bb516803c4", "filename": "src/libstd/net/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftest.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use env;\n use net::{SocketAddr, SocketAddrV4, SocketAddrV6, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n use sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "781f026c12c7795e1b2c82fae0506c5b40d8b566", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -355,8 +355,6 @@ impl fmt::Debug for UdpSocket {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use io::ErrorKind;\n     use net::*;\n     use net::test::{next_test_ip4, next_test_ip6};"}, {"sha": "d1c2fc3d3fce9371a3584bf88f07f120834f139c", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -24,9 +24,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::Wrapping;\n \n-#[cfg(test)] use cmp::PartialEq;\n #[cfg(test)] use fmt;\n-#[cfg(test)] use marker::Copy;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n \n /// Helper function for testing numeric operations\n@@ -52,7 +50,6 @@ mod tests {\n     use u32;\n     use u64;\n     use usize;\n-    use string::ToString;\n     use ops::Mul;\n \n     #[test]\n@@ -287,7 +284,6 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use prelude::v1::*;\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {"}, {"sha": "47f594a9b0c1efe0494e15098d8848f89433a164", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,7 +13,6 @@\n #![stable(feature = \"std_panic\", since = \"1.9.0\")]\n \n use any::Any;\n-use boxed::Box;\n use cell::UnsafeCell;\n use ops::{Deref, DerefMut};\n use panicking;"}, {"sha": "0c10dcbdad6463c613cacaf6d378b5f37c132823", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -17,7 +17,6 @@\n //! * Executing a panic up to doing the actual implementation\n //! * Shims around \"try\"\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use any::Any;"}, {"sha": "67219b6fd1b9c1479466f8b099d2cdb55d9381b3", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -100,7 +100,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use ascii::*;\n-use borrow::{Borrow, ToOwned, Cow};\n+use borrow::{Borrow, Cow};\n use cmp;\n use error::Error;\n use fmt;\n@@ -110,8 +110,6 @@ use io;\n use iter::{self, FusedIterator};\n use mem;\n use ops::{self, Deref};\n-use string::String;\n-use vec::Vec;\n \n use ffi::{OsStr, OsString};\n \n@@ -2152,8 +2150,6 @@ impl Error for StripPrefixError {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use string::{ToString, String};\n-    use vec::Vec;\n \n     macro_rules! t(\n         ($path:expr, iter: $iter:expr) => ("}, {"sha": "f0c4443070074aa3318f11605b11ba8abebf8b97", "filename": "src/libstd/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,7 +12,6 @@\n \n #![stable(feature = \"process\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use ffi::OsStr;\n@@ -810,7 +809,6 @@ pub fn exit(code: i32) -> ! {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use io::prelude::*;\n \n     use io::ErrorKind;"}, {"sha": "e3de1efaa31e3051457741b68523d92c37a3ea53", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -30,7 +30,6 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n #[cfg(not(test))]\n #[lang = \"start\"]\n fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n-    use borrow::ToOwned;\n     use mem;\n     use panic;\n     use sys;"}, {"sha": "ac0f400379e3cabf3504a10b496426774e2c0659", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -113,8 +113,6 @@ impl BarrierWaitResult {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::{Arc, Barrier};\n     use sync::mpsc::{channel, TryRecvError};\n     use thread;"}, {"sha": "1f480f6d4a987e09ac6dc429e3f454579472ec11", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use sync::atomic::{AtomicUsize, Ordering};\n use sync::{mutex, MutexGuard, PoisonError};\n use sys_common::condvar as sys;\n@@ -245,8 +243,6 @@ impl Drop for Condvar {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::mpsc::channel;\n     use sync::{Condvar, Mutex, Arc};\n     use thread;"}, {"sha": "0f9ef6fabb005eb06f6f5fb307fed95c38b6a300", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,9 +13,7 @@\n use thread::{self, Thread};\n use sync::atomic::{AtomicBool, Ordering};\n use sync::Arc;\n-use marker::{Sync, Send};\n use mem;\n-use clone::Clone;\n use time::Instant;\n \n struct Inner {"}, {"sha": "3d9f81413dc734202b1e8a6df174ed35703b2d2b", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -1270,8 +1270,6 @@ impl error::Error for TryRecvError {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use env;\n     use super::*;\n     use thread;\n@@ -1946,8 +1944,6 @@ mod tests {\n \n #[cfg(test)]\n mod sync_tests {\n-    use prelude::v1::*;\n-\n     use env;\n     use thread;\n     use super::*;"}, {"sha": "d926043fbbcd074e37fae9807f07b6a34cbfcce8", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -148,8 +148,6 @@ impl<T> Drop for Queue<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::mpsc::channel;\n     use super::{Queue, Data, Empty, Inconsistent};\n     use sync::Arc;"}, {"sha": "677544d335e7a6d21df49c81402042a5a85374fc", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -369,8 +369,6 @@ impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n #[cfg(test)]\n #[allow(unused_imports)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use thread;\n     use sync::mpsc::*;\n "}, {"sha": "724d7b1be730d59953620950ffa5ca20f55b5172", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -233,8 +233,6 @@ impl<T> Drop for Queue<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::Arc;\n     use super::Queue;\n     use thread;"}, {"sha": "9985daaba8f69a2eac4772cf2c91e11517b0f077", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -36,7 +36,6 @@\n pub use self::Failure::*;\n use self::Blocker::*;\n \n-use vec::Vec;\n use core::mem;\n use core::ptr;\n "}, {"sha": "c8ae88c233106461b12dd1f161c1c4af738d1244", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use fmt;\n use marker;\n@@ -355,8 +353,6 @@ pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Fla\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::mpsc::channel;\n     use sync::{Arc, Mutex, Condvar};\n     use sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "86d2986959c999abee5e10c3761f16f4fa0253fc", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -369,8 +369,6 @@ impl OnceState {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use panic;\n     use sync::mpsc::channel;\n     use thread;"}, {"sha": "4801bcffd081c69751c652c42e316229acb79a9f", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use fmt;\n use marker;\n@@ -385,8 +383,6 @@ impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {\n mod tests {\n     #![allow(deprecated)] // rand\n \n-    use prelude::v1::*;\n-\n     use rand::{self, Rng};\n     use sync::mpsc::channel;\n     use thread;\n@@ -552,8 +548,6 @@ mod tests {\n \n     #[test]\n     fn test_rwlock_try_write() {\n-        use mem::drop;\n-\n         let lock = RwLock::new(0isize);\n         let read_guard = lock.read().unwrap();\n "}, {"sha": "fad2c277da417f8f27fa1fe9687e2d949d2929d9", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -21,8 +21,6 @@\n \n #![allow(dead_code)] // different code on OSX/linux/etc\n \n-use vec::Vec;\n-\n /// One-time global initialization.\n pub unsafe fn init(argc: isize, argv: *const *const u8) { imp::init(argc, argv) }\n \n@@ -42,8 +40,6 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"solaris\",\n           target_os = \"emscripten\"))]\n mod imp {\n-    use prelude::v1::*;\n-\n     use libc::c_char;\n     use mem;\n     use ffi::CStr;\n@@ -91,8 +87,6 @@ mod imp {\n           target_os = \"ios\",\n           target_os = \"windows\"))]\n mod imp {\n-    use vec::Vec;\n-\n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n     }\n "}, {"sha": "ce6fd4cb0754b1cc9297b4a97394b08aebc1356c", "filename": "src/libstd/sys/common/at_exit_imp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fat_exit_imp.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,10 +13,8 @@\n //! Documentation can be found on the `rt::at_exit` function.\n \n use alloc::boxed::FnBox;\n-use boxed::Box;\n use ptr;\n use sys_common::mutex::Mutex;\n-use vec::Vec;\n \n type Queue = Vec<Box<FnBox()>>;\n "}, {"sha": "c1d1792363d7073cecc8bcc70225db09ff1e7019", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -191,7 +191,6 @@ pub fn demangle(writer: &mut Write, s: &str) -> io::Result<()> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use sys_common;\n     macro_rules! t { ($a:expr, $b:expr) => ({\n         let mut m = Vec::new();"}, {"sha": "3cd70eddb858c1d0f8566855ff2fb0aca5fa478c", "filename": "src/libstd/sys/common/io.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fio.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use prelude::v1::*;\n use io;\n use io::ErrorKind;\n use io::Read;\n@@ -53,7 +52,6 @@ pub unsafe fn read_to_end_uninitialized(r: &mut Read, buf: &mut Vec<u8>) -> io::\n \n #[cfg(test)]\n pub mod test {\n-    use prelude::v1::*;\n     use path::{Path, PathBuf};\n     use env;\n     use rand::{self, Rng};\n@@ -93,7 +91,6 @@ pub mod test {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use io::prelude::*;\n     use super::*;\n     use io;"}, {"sha": "d1ca676510714d1548ae005c08fc4e10d523f90f", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(missing_docs)]\n \n-use boxed::Box;\n use sync::Once;\n use sys;\n "}, {"sha": "d1a738770d3893fb66189c036009fd62375984db", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use marker::Sync;\n use sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock."}, {"sha": "a777cfe35e56d4125a9a565584ae96ebc1fca11a", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use cmp;\n use ffi::CString;\n use fmt;\n@@ -608,8 +606,6 @@ impl fmt::Debug for UdpSocket {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use super::*;\n     use collections::HashMap;\n "}, {"sha": "cbdeaad7f6bd3acfbff16c2cb7fa25ab688f904a", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use fmt;\n use marker;\n use ops::Deref;\n@@ -160,7 +158,6 @@ impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n     use cell::RefCell;\n     use sync::Arc;"}, {"sha": "3ee160da5fa5b7876ab1a2c957b77c9cc3aa75f8", "filename": "src/libstd/sys/common/thread.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use alloc::boxed::FnBox;\n use libc;\n use sys::stack_overflow;"}, {"sha": "95d8b6cc9516d2e3e5573863d9287ed65d70e105", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -11,7 +11,6 @@\n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n use cell::RefCell;\n-use string::String;\n use thread::Thread;\n use thread::LocalKeyState;\n "}, {"sha": "25a9d5720d9338bfb14ed8dba43bd03edaf36362", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -233,7 +233,6 @@ impl Drop for Key {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use super::{Key, StaticKey};\n \n     fn assert_sync<T: Sync>() {}"}, {"sha": "8d357aa78c9e93568b91f508ea373052a523b58d", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -37,9 +37,7 @@ use mem;\n use ops;\n use slice;\n use str;\n-use string::String;\n use sys_common::AsInner;\n-use vec::Vec;\n \n const UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";\n \n@@ -807,7 +805,6 @@ impl AsciiExt for Wtf8 {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use borrow::Cow;\n     use super::*;\n "}, {"sha": "d59b4fc0b70b8032a961d9123da86e7b5c2276ac", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -14,7 +14,6 @@\n \n use ffi::{OsStr, OsString};\n use mem;\n-use prelude::v1::*;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n "}, {"sha": "3f93fce1935611f236f611d3eb5ed9652617d851", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -14,7 +14,6 @@\n \n use libc;\n \n-use prelude::v1::*;\n use ascii;\n use ffi::OsStr;\n use fmt;\n@@ -789,7 +788,6 @@ impl IntoRawFd for UnixDatagram {\n \n #[cfg(test)]\n mod test {\n-    use prelude::v1::*;\n     use thread;\n     use io;\n     use io::prelude::*;"}, {"sha": "5bd92f2eb574d7a85281000626fb72bcd1baf99c", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use io;\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n use process;"}, {"sha": "b2b1f16f20a9aed7b5542f283718aa43b6f34fe0", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n-use prelude::v1::*;\n-\n use io::{self, Read};\n use libc::{self, c_int, size_t, c_void};\n use mem;"}, {"sha": "e6fe3eb112a6093ea038044132736d8bdb5ef40e", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use os::unix::prelude::*;\n \n use ffi::{CString, CStr, OsString, OsStr};\n@@ -534,7 +533,6 @@ impl fmt::Debug for File {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         #[cfg(target_os = \"linux\")]\n         fn get_path(fd: c_int) -> Option<PathBuf> {\n-            use string::ToString;\n             let mut p = PathBuf::from(\"/proc/self/fd\");\n             p.push(&fd.to_string());\n             readlink(&p).ok()"}, {"sha": "3f77abd7f44d8f4f56be637a66781da946f300a6", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use ffi::CStr;\n use io;\n use libc::{self, c_int, size_t, sockaddr, socklen_t};"}, {"sha": "e61804efd50f6882d5f6e698e935bd8163f5b569", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(unused_imports)] // lots of cfg code here\n \n-use prelude::v1::*;\n use os::unix::prelude::*;\n \n use error::Error as StdError;"}, {"sha": "5a733c0cb87637f7a235782b0bc3a415d60c4aca", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -13,9 +13,7 @@\n \n use borrow::Cow;\n use fmt::{self, Debug};\n-use vec::Vec;\n use str;\n-use string::String;\n use mem;\n use sys_common::{AsInner, IntoInner};\n "}, {"sha": "ffe8032e46055e9f6af9e63491e26d463117a4ab", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use cmp;\n use io;\n use libc::{self, c_int};"}, {"sha": "50014f51f6cf46420fbaaa2a3e2e68db15933f3e", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use os::unix::prelude::*;\n \n use collections::hash_map::{HashMap, Entry};\n@@ -593,7 +592,6 @@ impl Process {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use prelude::v1::*;\n \n     use ffi::OsStr;\n     use mem;"}, {"sha": "972bdbc38186b06eab0373222b9b492e41e1d137", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use io;\n use libc;\n use sys::fd::FileDesc;"}, {"sha": "5db7086e42752b1387227bba79c10a30818b70aa", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use alloc::boxed::FnBox;\n use cmp;\n use ffi::CStr;\n@@ -193,8 +191,6 @@ pub mod guard {\n           target_os = \"solaris\"))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    use prelude::v1::*;\n-\n     use libc;\n     use libc::mmap;\n     use libc::{PROT_NONE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};"}, {"sha": "cd42b7d05ee384d4ec7b9b918d2c5def938b9420", "filename": "src/libstd/sys/windows/compat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -21,8 +21,6 @@\n //! manner we pay a semi-large one-time cost up front for detecting whether a\n //! function is available but afterwards it's just a load and a jump.\n \n-use prelude::v1::*;\n-\n use ffi::CString;\n use sync::atomic::{AtomicUsize, Ordering};\n use sys::c;"}, {"sha": "5227280808f5bdfa9fba3bfd056a2840b8e32b6e", "filename": "src/libstd/sys/windows/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fdynamic_lib.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use os::windows::prelude::*;\n \n use ffi::{CString, OsStr};"}, {"sha": "fe448cdd78feb9ee71ad2ff6011b06622e1ed36c", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use os::windows::prelude::*;\n \n use ffi::OsString;"}, {"sha": "97e746ee345763cc75e3723c5fbfb6f0d7a4deb5", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n-use prelude::v1::*;\n-\n use cmp;\n use io::{ErrorKind, Read};\n use io;"}, {"sha": "9741a704e8fe51e1ab5667157fe37be52b3cac07", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n #![allow(missing_docs, bad_style)]\n \n-use prelude::v1::*;\n-\n use ffi::{OsStr, OsString};\n use io::{self, ErrorKind};\n use os::windows::ffi::{OsStrExt, OsStringExt};"}, {"sha": "855603685905958de4bf5494a677bc4bc23e4497", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -29,8 +29,6 @@\n //! CriticalSection is used and we keep track of who's holding the mutex to\n //! detect recursive locks.\n \n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use mem;\n use sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "aca6994503ff8aa46495e32747fda5c7c1e8a127", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,8 +10,6 @@\n \n #![unstable(issue = \"0\", feature = \"windows_net\")]\n \n-use prelude::v1::*;\n-\n use cmp;\n use io::{self, Read};\n use libc::{c_int, c_void, c_ulong};"}, {"sha": "260fc3c4db62ef8371929b95cdcb36e1b1754930", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(bad_style)]\n \n-use prelude::v1::*;\n use os::windows::prelude::*;\n \n use error::Error as StdError;"}, {"sha": "a065c7a7fd013e3f4f1e7a2f4fd95583d6c63271", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -14,9 +14,6 @@\n use borrow::Cow;\n use fmt::{self, Debug};\n use sys_common::wtf8::{Wtf8, Wtf8Buf};\n-use string::String;\n-use result::Result;\n-use option::Option;\n use mem;\n use sys_common::{AsInner, IntoInner};\n "}, {"sha": "ed7e88e72cd5609d69fa296ab0e811bd733db231", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use os::windows::prelude::*;\n \n use ffi::OsStr;"}, {"sha": "d371714ff0e690822d7af30d78cf9948224c5ba9", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use ascii::*;\n use collections::HashMap;\n use collections;\n@@ -491,7 +489,6 @@ fn make_dirp(d: Option<&OsString>) -> io::Result<(*const u16, Vec<u16>)> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n     use ffi::{OsStr, OsString};\n     use super::make_command_line;\n "}, {"sha": "01249f05f620252134d8c53d5a4c7ea1edca267a", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -10,7 +10,6 @@\n \n #![unstable(issue = \"0\", feature = \"windows_stdio\")]\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use cmp;"}, {"sha": "5a376a867ee6448288bac2cd1c534a7bb56e77a9", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use alloc::boxed::FnBox;\n use io;\n use ffi::CStr;"}, {"sha": "5d3084094fbddd4f02b375b724303fd8734ac157", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n use ptr;\n use sys::c;\n use sys_common::mutex::Mutex;"}, {"sha": "c44dee49f14a69373eed7cbcf6952358b701f8e5", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -369,7 +369,6 @@ pub mod elf {\n     // Due to rust-lang/rust#18804, make sure this is not generic!\n     #[cfg(target_os = \"linux\")]\n     unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-        use prelude::v1::*;\n         use mem;\n         use libc;\n         use sys_common::thread_local as os;\n@@ -460,8 +459,6 @@ pub mod elf {\n \n #[doc(hidden)]\n pub mod os {\n-    use prelude::v1::*;\n-\n     use cell::{Cell, UnsafeCell};\n     use marker;\n     use ptr;\n@@ -529,8 +526,6 @@ pub mod os {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use sync::mpsc::{channel, Sender};\n     use cell::{Cell, UnsafeCell};\n     use super::LocalKeyState;\n@@ -693,8 +688,6 @@ mod tests {\n \n #[cfg(test)]\n mod dynamic_tests {\n-    use prelude::v1::*;\n-\n     use cell::RefCell;\n     use collections::HashMap;\n "}, {"sha": "f3e1710f50b0d8ec3e50b6f7dff215ce1d71df22", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf71f8d1034f16140791f566cab3f3c9a0bf96a/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=eaf71f8d1034f16140791f566cab3f3c9a0bf96a", "patch": "@@ -161,8 +161,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use any::Any;\n use cell::UnsafeCell;\n use ffi::{CStr, CString};\n@@ -732,8 +730,6 @@ fn _assert_sync_and_send() {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::*;\n-\n     use any::Any;\n     use sync::mpsc::{channel, Sender};\n     use result;\n@@ -786,8 +782,6 @@ mod tests {\n \n     #[test]\n     fn test_spawn_sched() {\n-        use clone::Clone;\n-\n         let (tx, rx) = channel();\n \n         fn f(i: i32, tx: Sender<()>) {"}]}