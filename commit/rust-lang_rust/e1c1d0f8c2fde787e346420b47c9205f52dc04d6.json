{"sha": "e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "node_id": "C_kwDOAAsO6NoAKGUxYzFkMGY4YzJmZGU3ODdlMzQ2NDIwYjQ3YzkyMDVmNTJkYzA0ZDY", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-04-21T12:58:25Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-06-14T12:50:52Z"}, "message": "Add llvm.type.checked.load intrinsic\n\nAdd the intrinsic\n\ndeclare {i8*, i1} @llvm.type.checked.load(i8* %ptr, i32 %offset, metadata %type)\n\nThis is used in the VFE optimization when lowering loading functions\nfrom vtables to LLVM IR. The `metadata` is used to map the function to\nall vtables this function could belong to. This ensures that functions\nfrom vtables that might be used somewhere won't get removed.", "tree": {"sha": "1f305405bbd1fa6bea564d2de4b39e17b88de186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f305405bbd1fa6bea564d2de4b39e17b88de186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmKohCwACgkQHKDfKvWd\naKUN5xAA2Eg3Sn3A50hxDjhCI9kTc3Wsbp60Im/VErLvhtZpeDQhavF/RbFBV1TE\nw4AwEevcxDbOciYMdxKsqZex8zz3Hv/WgvE6ga9m2pCDvwWORc9E2H93iPmMXJSB\n+W40aUOv9vJPZKMIxOJAF7ZP2iQqGyy7nOPnHXutI4SwV8NKk0HxXZ2G+r0yhvLr\nJCGa8Zzuab23Q6wc2hiCtIbClxM9+2YUezhDXmCRXfh3mbM1vTtrJma3rXCJm+UY\nxpF/EZLUA+NfHKdrBmv5jp7jXfYtAdPktVklknUOnuHIdavi3SlsIb2sl7vCx+VG\n+G+ep7qQTpl77n+X7AnAlHYK/GV8Qo2Ifih3YLhe0olV1j8mT6CZS0jErk4Vqw+a\nq0p35aHhxna/jj7IcUo0YWaq8MVrQr4+WtPP/5GdZUzqGez0ISAj5ZAJYGqs91H4\n9Oxb7mnfB+2aJ7LiCcRbS6h4iBeZjOM6B8AGHPH1XCHSJ1JrsxwEdHK68S09CHdg\n919i/xhpKkkGB7GmlB7ZLdJsmWvBuu+XFHbXRSqGCd64w81JlEDjPAlySbbRHjUB\nMUUv9GZVIAjIbiiE/R67s7D4jVHYwfB26/NzIrSc7IGPfkfqNF4mmrdh6+2AqIyi\nWs5VccWsXs0KhyYL32/Ez14SQF1ETX9ELN5iS69cC1x1D9ccyYc=\n=Av9Z\n-----END PGP SIGNATURE-----", "payload": "tree 1f305405bbd1fa6bea564d2de4b39e17b88de186\nparent d55787a155a34753c1dd8751dd2b77804aa8f442\nauthor flip1995 <philipp.krones@embecosm.com> 1650545905 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1655211052 +0200\n\nAdd llvm.type.checked.load intrinsic\n\nAdd the intrinsic\n\ndeclare {i8*, i1} @llvm.type.checked.load(i8* %ptr, i32 %offset, metadata %type)\n\nThis is used in the VFE optimization when lowering loading functions\nfrom vtables to LLVM IR. The `metadata` is used to map the function to\nall vtables this function could belong to. This ensures that functions\nfrom vtables that might be used somewhere won't get removed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "html_url": "https://github.com/rust-lang/rust/commit/e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55787a155a34753c1dd8751dd2b77804aa8f442", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55787a155a34753c1dd8751dd2b77804aa8f442", "html_url": "https://github.com/rust-lang/rust/commit/d55787a155a34753c1dd8751dd2b77804aa8f442"}], "stats": {"total": 106, "additions": 88, "deletions": 18}, "files": [{"sha": "5fbdedac0c45c1def6d1cafd7325d23361688460", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -356,6 +356,16 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.context.new_rvalue_from_int(self.int_type, 0)\n     }\n \n+    fn type_checked_load(\n+        &mut self,\n+        _llvtable: Self::Value,\n+        _vtable_byte_offset: u64,\n+        _typeid: Self::Value,\n+    ) -> Self::Value {\n+        // Unsupported.\n+        self.context.new_rvalue_from_int(self.int_type, 0)\n+    }\n+\n     fn va_start(&mut self, _va_list: RValue<'gcc>) -> RValue<'gcc> {\n         unimplemented!();\n     }"}, {"sha": "b5c31fcebe0c2eed3d8600f7599e7174f9c747c9", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -665,6 +665,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n         let t_isize = self.type_isize();\n         let t_f32 = self.type_f32();\n         let t_f64 = self.type_f64();\n+        let t_metadata = self.type_metadata();\n \n         ifn!(\"llvm.wasm.trunc.unsigned.i32.f32\", fn(t_f32) -> t_i32);\n         ifn!(\"llvm.wasm.trunc.unsigned.i32.f64\", fn(t_f64) -> t_i32);\n@@ -890,11 +891,12 @@ impl<'ll> CodegenCx<'ll, '_> {\n             ifn!(\"llvm.instrprof.increment\", fn(i8p, t_i64, t_i32, t_i32) -> void);\n         }\n \n-        ifn!(\"llvm.type.test\", fn(i8p, self.type_metadata()) -> i1);\n+        ifn!(\"llvm.type.test\", fn(i8p, t_metadata) -> i1);\n+        ifn!(\"llvm.type.checked.load\", fn(i8p, t_i32, t_metadata) -> mk_struct! {i8p, i1});\n \n         if self.sess().opts.debuginfo != DebugInfo::None {\n-            ifn!(\"llvm.dbg.declare\", fn(self.type_metadata(), self.type_metadata()) -> void);\n-            ifn!(\"llvm.dbg.value\", fn(self.type_metadata(), t_i64, self.type_metadata()) -> void);\n+            ifn!(\"llvm.dbg.declare\", fn(t_metadata, t_metadata) -> void);\n+            ifn!(\"llvm.dbg.value\", fn(t_metadata, t_i64, t_metadata) -> void);\n         }\n         None\n     }"}, {"sha": "a18f5b9dd7f9cdb8d19bb0f4f6c41958afd78bbf", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -406,6 +406,16 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n         self.call_intrinsic(\"llvm.type.test\", &[bitcast, typeid])\n     }\n \n+    fn type_checked_load(\n+        &mut self,\n+        llvtable: &'ll Value,\n+        vtable_byte_offset: u64,\n+        typeid: &'ll Value,\n+    ) -> Self::Value {\n+        let vtable_byte_offset = self.const_i32(vtable_byte_offset as i32);\n+        self.call_intrinsic(\"llvm.type.checked.load\", &[llvtable, vtable_byte_offset, typeid])\n+    }\n+\n     fn va_start(&mut self, va_list: &'ll Value) -> &'ll Value {\n         self.call_intrinsic(\"llvm.va_start\", &[va_list])\n     }"}, {"sha": "5203ebfad75dee39d994777069fc0258021db74a", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -1,6 +1,8 @@\n use crate::traits::*;\n \n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, subst::GenericArgKind, ExistentialPredicate, Ty, TyCtxt};\n+use rustc_session::config::Lto;\n+use rustc_symbol_mangling::typeid_for_trait_ref;\n use rustc_target::abi::call::FnAbi;\n \n #[derive(Copy, Clone, Debug)]\n@@ -15,20 +17,32 @@ impl<'a, 'tcx> VirtualIndex {\n         self,\n         bx: &mut Bx,\n         llvtable: Bx::Value,\n+        ty: Ty<'tcx>,\n         fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n     ) -> Bx::Value {\n         // Load the data pointer from the object.\n-        debug!(\"get_fn({:?}, {:?})\", llvtable, self);\n-\n+        debug!(\"get_fn({llvtable:?}, {ty:?}, {self:?})\");\n         let llty = bx.fn_ptr_backend_type(fn_abi);\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n-        let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n-        let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n-        let ptr = bx.load(llty, gep, ptr_align);\n-        bx.nonnull_metadata(ptr);\n-        // Vtable loads are invariant.\n-        bx.set_invariant_load(ptr);\n-        ptr\n+\n+        if bx.cx().sess().opts.debugging_opts.virtual_function_elimination\n+            && bx.cx().sess().lto() == Lto::Fat\n+        {\n+            let typeid =\n+                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), get_trait_ref(bx.tcx(), ty)));\n+            let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n+            let type_checked_load = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n+            let func = bx.extract_value(type_checked_load, 0);\n+            bx.pointercast(func, llty)\n+        } else {\n+            let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n+            let gep = bx.inbounds_gep(llty, llvtable, &[bx.const_usize(self.0)]);\n+            let ptr = bx.load(llty, gep, ptr_align);\n+            bx.nonnull_metadata(ptr);\n+            // Vtable loads are invariant.\n+            bx.set_invariant_load(ptr);\n+            ptr\n+        }\n     }\n \n     pub fn get_usize<Bx: BuilderMethods<'a, 'tcx>>(\n@@ -50,6 +64,24 @@ impl<'a, 'tcx> VirtualIndex {\n     }\n }\n \n+fn get_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n+    for arg in ty.peel_refs().walk() {\n+        if let GenericArgKind::Type(ty) = arg.unpack() {\n+            if let ty::Dynamic(trait_refs, _) = ty.kind() {\n+                return trait_refs[0].map_bound(|trait_ref| match trait_ref {\n+                    ExistentialPredicate::Trait(tr) => tr,\n+                    ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n+                    ExistentialPredicate::AutoTrait(_) => {\n+                        bug!(\"auto traits don't have functions\")\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    bug!(\"expected a `dyn Trait` ty, found {ty:?}\")\n+}\n+\n /// Creates a dynamic vtable for the given type and vtable origin.\n /// This is used only for objects.\n ///"}, {"sha": "db348f2bdd507faa3964a477087a7b3950f8e5c2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args = &args[..1];\n                 (\n                     meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_DROPINPLACE)\n-                        .get_fn(&mut bx, vtable, &fn_abi),\n+                        .get_fn(&mut bx, vtable, ty, &fn_abi),\n                     fn_abi,\n                 )\n             }\n@@ -819,17 +819,25 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     // the data pointer as the first argument\n                     match op.val {\n                         Pair(data_ptr, meta) => {\n-                            llfn = Some(\n-                                meth::VirtualIndex::from_index(idx).get_fn(&mut bx, meta, &fn_abi),\n-                            );\n+                            llfn = Some(meth::VirtualIndex::from_index(idx).get_fn(\n+                                &mut bx,\n+                                meta,\n+                                op.layout.ty,\n+                                &fn_abi,\n+                            ));\n                             llargs.push(data_ptr);\n                             continue 'make_args;\n                         }\n                         other => bug!(\"expected a Pair, got {:?}\", other),\n                     }\n                 } else if let Ref(data_ptr, Some(meta), _) = op.val {\n                     // by-value dynamic dispatch\n-                    llfn = Some(meth::VirtualIndex::from_index(idx).get_fn(&mut bx, meta, &fn_abi));\n+                    llfn = Some(meth::VirtualIndex::from_index(idx).get_fn(\n+                        &mut bx,\n+                        meta,\n+                        op.layout.ty,\n+                        &fn_abi,\n+                    ));\n                     llargs.push(data_ptr);\n                     continue;\n                 } else {"}, {"sha": "7755e67938c32e7df09879fc1f999df0dd18bc44", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c1d0f8c2fde787e346420b47c9205f52dc04d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=e1c1d0f8c2fde787e346420b47c9205f52dc04d6", "patch": "@@ -22,6 +22,14 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n     /// Trait method used to test whether a given pointer is associated with a type identifier.\n     fn type_test(&mut self, pointer: Self::Value, typeid: Self::Value) -> Self::Value;\n+    /// Trait method used to load a function while testing if it is associated with a type\n+    /// identifier.\n+    fn type_checked_load(\n+        &mut self,\n+        llvtable: Self::Value,\n+        vtable_byte_offset: u64,\n+        typeid: Self::Value,\n+    ) -> Self::Value;\n     /// Trait method used to inject `va_start` on the \"spoofed\" `VaListImpl` in\n     /// Rust defined C-variadic functions.\n     fn va_start(&mut self, val: Self::Value) -> Self::Value;"}]}