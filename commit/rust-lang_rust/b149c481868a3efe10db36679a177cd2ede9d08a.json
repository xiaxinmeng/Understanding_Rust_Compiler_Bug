{"sha": "b149c481868a3efe10db36679a177cd2ede9d08a", "node_id": "C_kwDOAAsO6NoAKGIxNDljNDgxODY4YTNlZmUxMGRiMzY2NzlhMTc3Y2QyZWRlOWQwOGE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-20T17:13:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-20T17:13:01Z"}, "message": "Rollup merge of #102021 - lcnr:tyConst-fun, r=b-naber,BoxyUwU\n\nsome post-valtree cleanup\n\nr? project-const-generics cc ```@b-naber```", "tree": {"sha": "d0cac3f6a8cdefb992b5c116c713978b4910f3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cac3f6a8cdefb992b5c116c713978b4910f3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b149c481868a3efe10db36679a177cd2ede9d08a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKfSdCRBK7hj4Ov3rIwAAcugIAGFqWKRiO0eMDRoyaX2ArRrf\nwwNz7sJZaDNRj9XGTGEgZIs0hFQxM+K3GcBsdco6PQWekhDUHKz/V2UqEn8roV85\n+nDJyMbhlWD5WsqTjtcQPHKkpH/zK1KhNPXIz92bwcsDALTKI7lyZJTOB3AumpRF\nkXWlG0WHkWBc5vS7Bb95Rp+i0N8UeAwxy/IG6XhOWddAMgrlPXtvTuMuBqyzc/4u\nNnexNwo594zSGDiHNZQIU78Ko0LjTH3chRfTu1aA8tungk3w6FYcykiV0VuQ4b1V\nV+00e94EiG7fqonrGsyq7ksrPiCeD4iDZO6UEKmtbu9dMK5DobocMIM8MR2V0ug=\n=mBuR\n-----END PGP SIGNATURE-----\n", "payload": "tree d0cac3f6a8cdefb992b5c116c713978b4910f3ed\nparent 08b369a501d5981ecbb57d5f5f1f3bb4d34f081b\nparent c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8\nauthor Michael Howell <michael@notriddle.com> 1663693981 -0700\ncommitter GitHub <noreply@github.com> 1663693981 -0700\n\nRollup merge of #102021 - lcnr:tyConst-fun, r=b-naber,BoxyUwU\n\nsome post-valtree cleanup\n\nr? project-const-generics cc ```@b-naber```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b149c481868a3efe10db36679a177cd2ede9d08a", "html_url": "https://github.com/rust-lang/rust/commit/b149c481868a3efe10db36679a177cd2ede9d08a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b149c481868a3efe10db36679a177cd2ede9d08a/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "html_url": "https://github.com/rust-lang/rust/commit/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b"}, {"sha": "c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "html_url": "https://github.com/rust-lang/rust/commit/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8"}], "stats": {"total": 180, "additions": 58, "deletions": 122}, "files": [{"sha": "1c33e7845cb0b0b813ac7fcb6cc8e45fb287f271", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -100,10 +100,10 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     val: mir::ConstantKind<'tcx>,\n-) -> InterpResult<'tcx, mir::DestructuredMirConstant<'tcx>> {\n+) -> InterpResult<'tcx, mir::DestructuredConstant<'tcx>> {\n     trace!(\"destructure_mir_constant: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.mir_const_to_op(&val, None)?;\n+    let op = ecx.const_to_op(&val, None)?;\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n@@ -129,7 +129,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n         .collect::<InterpResult<'tcx, Vec<_>>>()?;\n     let fields = tcx.arena.alloc_from_iter(fields_iter);\n \n-    Ok(mir::DestructuredMirConstant { variant, fields })\n+    Ok(mir::DestructuredConstant { variant, fields })\n }\n \n #[instrument(skip(tcx), level = \"debug\")]\n@@ -139,7 +139,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n     val: mir::ConstantKind<'tcx>,\n ) -> mir::ConstantKind<'tcx> {\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.mir_const_to_op(&val, None).unwrap();\n+    let op = ecx.const_to_op(&val, None).unwrap();\n     let mplace = ecx.deref_operand(&op).unwrap();\n     if let Some(alloc_id) = mplace.ptr.provenance {\n         assert_eq!("}, {"sha": "bdebfbb3ff51051a3a12e7be2dc75b327cbf7e3a", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -683,11 +683,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.stack_mut().push(frame);\n \n         // Make sure all the constants required by this frame evaluate successfully (post-monomorphization check).\n-        for const_ in &body.required_consts {\n-            let span = const_.span;\n-            let const_ =\n-                self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal)?;\n-            self.mir_const_to_op(&const_, None).map_err(|err| {\n+        for ct in &body.required_consts {\n+            let span = ct.span;\n+            let ct = self.subst_from_current_frame_and_normalize_erasing_regions(ct.literal)?;\n+            self.const_to_op(&ct, None).map_err(|err| {\n                 // If there was an error, set the span of the current frame to this constant.\n                 // Avoiding doing this when evaluation succeeds.\n                 self.frame_mut().loc = Err(span);"}, {"sha": "dc5305aabcf8972c7c49e97a2aaa8036ab9e97a9", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -534,7 +534,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // * During ConstProp, with `TooGeneric` or since the `required_consts` were not all\n                 //   checked yet.\n                 // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n-                self.mir_const_to_op(&val, layout)?\n+                self.const_to_op(&val, layout)?\n             }\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n@@ -549,50 +549,42 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ops.iter().map(|op| self.eval_operand(op, None)).collect()\n     }\n \n-    // Used when the miri-engine runs into a constant and for extracting information from constants\n-    // in patterns via the `const_eval` module\n-    /// The `val` and `layout` are assumed to already be in our interpreter\n-    /// \"universe\" (param_env).\n     pub fn const_to_op(\n-        &self,\n-        c: ty::Const<'tcx>,\n-        layout: Option<TyAndLayout<'tcx>>,\n-    ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        match c.kind() {\n-            ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n-                throw_inval!(AlreadyReported(reported))\n-            }\n-            ty::ConstKind::Unevaluated(uv) => {\n-                // NOTE: We evaluate to a `ValTree` here as a check to ensure\n-                // we're working with valid constants, even though we never need it.\n-                let instance = self.resolve(uv.def, uv.substs)?;\n-                let cid = GlobalId { instance, promoted: None };\n-                let _valtree = self\n-                    .tcx\n-                    .eval_to_valtree(self.param_env.and(cid))?\n-                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {:?}\", uv));\n-\n-                Ok(self.eval_to_allocation(cid)?.into())\n-            }\n-            ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n-                span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n-            }\n-            ty::ConstKind::Value(valtree) => {\n-                let ty = c.ty();\n-                let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n-                self.const_val_to_op(const_val, ty, layout)\n-            }\n-        }\n-    }\n-\n-    pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         match val {\n-            mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n+            mir::ConstantKind::Ty(ct) => {\n+                match ct.kind() {\n+                    ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n+                        throw_inval!(TooGeneric)\n+                    }\n+                    ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                        throw_inval!(AlreadyReported(reported))\n+                    }\n+                    ty::ConstKind::Unevaluated(uv) => {\n+                        // NOTE: We evaluate to a `ValTree` here as a check to ensure\n+                        // we're working with valid constants, even though we never need it.\n+                        let instance = self.resolve(uv.def, uv.substs)?;\n+                        let cid = GlobalId { instance, promoted: None };\n+                        let _valtree = self\n+                            .tcx\n+                            .eval_to_valtree(self.param_env.and(cid))?\n+                            .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"));\n+\n+                        Ok(self.eval_to_allocation(cid)?.into())\n+                    }\n+                    ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n+                        span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {ct:?}\")\n+                    }\n+                    ty::ConstKind::Value(valtree) => {\n+                        let ty = ct.ty();\n+                        let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n+                        self.const_val_to_op(const_val, ty, layout)\n+                    }\n+                }\n+            }\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n             mir::ConstantKind::Unevaluated(uv, _) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;"}, {"sha": "a8c7505329cda205edc4959e2eaff0f442ab6694", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n         constant: mir::ConstantKind<'tcx>,\n-    ) -> mir::DestructuredMirConstant<'tcx> {\n+    ) -> mir::DestructuredConstant<'tcx> {\n         self.try_destructure_mir_constant(param_env.and(constant)).unwrap()\n     }\n }"}, {"sha": "efd7357afc46c98f1b886a42e3b0b9217137ccce", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -392,16 +392,9 @@ pub enum ClosureOutlivesSubject<'tcx> {\n     Region(ty::RegionVid),\n }\n \n-/// The constituent parts of a type level constant of kind ADT or array.\n-#[derive(Copy, Clone, Debug, HashStable)]\n-pub struct DestructuredConst<'tcx> {\n-    pub variant: Option<VariantIdx>,\n-    pub fields: &'tcx [ty::Const<'tcx>],\n-}\n-\n /// The constituent parts of a mir constant of kind ADT or array.\n #[derive(Copy, Clone, Debug, HashStable)]\n-pub struct DestructuredMirConstant<'tcx> {\n+pub struct DestructuredConstant<'tcx> {\n     pub variant: Option<VariantIdx>,\n     pub fields: &'tcx [ConstantKind<'tcx>],\n }"}, {"sha": "1afea4864b8dd712f170101d2af49d4487680326", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -1007,7 +1007,9 @@ rustc_queries! {\n \n     /// Tries to destructure an `mir::ConstantKind` ADT or array into its variant index\n     /// and its field values.\n-    query try_destructure_mir_constant(key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>) -> Option<mir::DestructuredMirConstant<'tcx>> {\n+    query try_destructure_mir_constant(\n+        key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> Option<mir::DestructuredConstant<'tcx>> {\n         desc { \"destructuring mir constant\"}\n         remap_env_constness\n     }"}, {"sha": "4bc821dcfa1fb4ae566e115ba97ae04071bc1ab1", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -1,9 +1,6 @@\n use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n-use crate::ty::{\n-    self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n-    TyCtxt, TypeVisitable,\n-};\n+use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -151,46 +148,6 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n-        debug!(\"Const::from_inline_const(def_id={:?})\", def_id);\n-\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-\n-        let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac) => ac.body,\n-            _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n-                \"from_inline_const can only process anonymous constants\"\n-            ),\n-        };\n-\n-        let expr = &tcx.hir().body(body_id).value;\n-\n-        let ty = tcx.typeck(def_id).node_type(hir_id);\n-\n-        let ret = match Self::try_eval_lit_or_param(tcx, ty, expr) {\n-            Some(v) => v,\n-            None => {\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id());\n-                let parent_substs =\n-                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n-                let substs =\n-                    InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n-                        .substs;\n-                tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                        def: ty::WithOptConstParam::unknown(def_id).to_global(),\n-                        substs,\n-                        promoted: (),\n-                    }),\n-                    ty,\n-                })\n-            }\n-        };\n-        debug_assert!(!ret.has_free_regions());\n-        ret\n-    }\n-\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {"}, {"sha": "11645f840c1352732398e85a20e134a6a985b0f1", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -680,7 +680,7 @@ macro_rules! ClonePatternFoldableImpls {\n }\n \n ClonePatternFoldableImpls! { <'tcx>\n-    Span, Field, Mutability, Symbol, LocalVarId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, Symbol, LocalVarId, usize,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>"}, {"sha": "cb134a20ea03efa2a3d73e07b4a74fa1a5ba3fca", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -471,7 +471,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.ecx.mir_const_to_op(&c.literal, None).ok()\n+        self.ecx.const_to_op(&c.literal, None).ok()\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "2885f06b19cd610ba8304e936518e15b55c015c6", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -292,7 +292,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        match self.ecx.mir_const_to_op(&c.literal, None) {\n+        match self.ecx.const_to_op(&c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);"}, {"sha": "23e04ae6a53925f65504ad6d548ee831b24f8083", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -487,18 +487,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> ty::Const<'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n-            hir::ArrayLen::Body(anon_const) => self.to_const(anon_const),\n+            hir::ArrayLen::Body(anon_const) => {\n+                let const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                let span = self.tcx.hir().span(anon_const.hir_id);\n+                let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+                self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n+                self.normalize_associated_types_in(span, c)\n+            }\n         }\n     }\n \n-    pub fn to_const(&self, ast_c: &hir::AnonConst) -> ty::Const<'tcx> {\n-        let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n-        let span = self.tcx.hir().span(ast_c.hir_id);\n-        let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n-        self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n-        self.normalize_associated_types_in(span, c)\n-    }\n-\n     pub fn const_arg_to_const(\n         &self,\n         ast_c: &hir::AnonConst,"}, {"sha": "87961890f53e57b814611f5683acf4666c821c8e", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b149c481868a3efe10db36679a177cd2ede9d08a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=b149c481868a3efe10db36679a177cd2ede9d08a", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n@@ -229,12 +228,8 @@ fn emit_orphan_check_error<'tcx>(\n                 \"only traits defined in the current crate {msg}\"\n             );\n             err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n-            for (ty, is_target_ty) in &tys {\n-                let mut ty = *ty;\n-                tcx.infer_ctxt().enter(|infcx| {\n-                    // Remove the lifetimes unnecessary for this error.\n-                    ty = infcx.freshen(ty);\n-                });\n+            for &(mut ty, is_target_ty) in &tys {\n+                ty = tcx.erase_regions(ty);\n                 ty = match ty.kind() {\n                     // Remove the type arguments from the output, as they are not relevant.\n                     // You can think of this as the reverse of `resolve_vars_if_possible`.\n@@ -264,7 +259,7 @@ fn emit_orphan_check_error<'tcx>(\n                 };\n \n                 let msg = format!(\"{} is not defined in the current crate{}\", ty, postfix);\n-                if *is_target_ty {\n+                if is_target_ty {\n                     // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n                     err.span_label(self_ty_span, &msg);\n                 } else {"}]}