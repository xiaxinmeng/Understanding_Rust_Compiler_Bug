{"sha": "194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGQ0YmMxNWRkOTkzOGUxYzc3ZTdmNGFiZGZjYjUxNTM0ZGE4YjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-11T21:40:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T19:37:10Z"}, "message": "make parameter-environment a query", "tree": {"sha": "864a3f3b0fa6e6b7eac8dfb91d21ffae2f515bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/864a3f3b0fa6e6b7eac8dfb91d21ffae2f515bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "html_url": "https://github.com/rust-lang/rust/commit/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7acb6f34bb255d709fa153a49c77a570e6bbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7acb6f34bb255d709fa153a49c77a570e6bbec", "html_url": "https://github.com/rust-lang/rust/commit/1b7acb6f34bb255d709fa153a49c77a570e6bbec"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "2620a9c8f2d0ea7c5143e92025f990b13eea29dc", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "patch": "@@ -162,6 +162,7 @@ pub enum DepNode<D: Clone + Debug> {\n     // not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n \n+    ParameterEnvironment(D),\n     DescribeDef(D),\n     DefSpan(D),\n     Stability(D),\n@@ -290,6 +291,7 @@ impl<D: Clone + Debug> DepNode<D> {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n+            ParameterEnvironment(ref d) => op(d).map(ParameterEnvironment),\n             DescribeDef(ref d) => op(d).map(DescribeDef),\n             DefSpan(ref d) => op(d).map(DefSpan),\n             Stability(ref d) => op(d).map(Stability),"}, {"sha": "2c3dae8493ac6ac49b405c0d484ae2d016f7fe8d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "patch": "@@ -884,6 +884,8 @@ define_maps! { <'tcx>\n     [] specialization_graph_of: SpecializationGraph(DefId) -> Rc<specialization_graph::Graph>,\n     [] is_object_safe: ObjectSafety(DefId) -> bool,\n \n+    [] parameter_environment: ParameterEnvironment(DefId) -> ty::ParameterEnvironment<'tcx>,\n+\n     // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n     // `ty.is_copy()`, etc, since that will prune the environment where possible.\n     [] is_copy_raw: is_copy_dep_node(ty::ParameterEnvironmentAnd<'tcx, Ty<'tcx>>) -> bool,"}, {"sha": "1071fa1c0f6443e53630ae79043cf1a4a07abab7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d4bc15dd9938e1c77e7f4abdfcb51534da8b5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=194d4bc15dd9938e1c77e7f4abdfcb51534da8b5", "patch": "@@ -2344,38 +2344,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// See `ParameterEnvironment` struct def'n for details.\n-    pub fn parameter_environment(self, def_id: DefId) -> ParameterEnvironment<'gcx> {\n-        //\n-        // Compute the bounds on Self and the type parameters.\n-        //\n-\n-        let tcx = self.global_tcx();\n-        let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n-        let predicates = bounds.predicates;\n-\n-        // Finally, we have to normalize the bounds in the environment, in\n-        // case they contain any associated type projections. This process\n-        // can yield errors if the put in illegal associated types, like\n-        // `<i32 as Foo>::Bar` where `i32` does not implement `Foo`. We\n-        // report these errors right here; this doesn't actually feel\n-        // right to me, because constructing the environment feels like a\n-        // kind of a \"idempotent\" action, but I'm not sure where would be\n-        // a better place. In practice, we construct environments for\n-        // every fn once during type checking, and we'll abort if there\n-        // are any errors at that point, so after type checking you can be\n-        // sure that this will succeed without errors anyway.\n-        //\n-\n-        let unnormalized_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n-\n-        let body_id = self.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n-            self.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)\n-        });\n-        let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n-        traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n-    }\n-\n     pub fn node_scope_region(self, id: NodeId) -> Region<'tcx> {\n         self.mk_region(ty::ReScope(CodeExtent::Misc(id)))\n     }\n@@ -2535,6 +2503,35 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n         })\n }\n \n+/// See `ParameterEnvironment` struct def'n for details.\n+fn parameter_environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   def_id: DefId)\n+                                   -> ParameterEnvironment<'tcx> {\n+    // Compute the bounds on Self and the type parameters.\n+\n+    let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n+    let predicates = bounds.predicates;\n+\n+    // Finally, we have to normalize the bounds in the environment, in\n+    // case they contain any associated type projections. This process\n+    // can yield errors if the put in illegal associated types, like\n+    // `<i32 as Foo>::Bar` where `i32` does not implement `Foo`. We\n+    // report these errors right here; this doesn't actually feel\n+    // right to me, because constructing the environment feels like a\n+    // kind of a \"idempotent\" action, but I'm not sure where would be\n+    // a better place. In practice, we construct environments for\n+    // every fn once during type checking, and we'll abort if there\n+    // are any errors at that point, so after type checking you can be\n+    // sure that this will succeed without errors anyway.\n+\n+    let unnormalized_env = ty::ParameterEnvironment::new(tcx.intern_predicates(&predicates));\n+\n+    let body_id = tcx.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n+        tcx.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)\n+    });\n+    let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n+    traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n+}\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n@@ -2544,6 +2541,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n         def_span,\n+        parameter_environment,\n         trait_of_item,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         relevant_trait_impls_for: trait_def::relevant_trait_impls_provider,\n@@ -2557,6 +2555,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n         adt_dtorck_constraint,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         relevant_trait_impls_for: trait_def::relevant_trait_impls_provider,\n+        parameter_environment,\n         ..*providers\n     };\n }"}]}