{"sha": "0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkN2YyMzZiOGEyNTViN2UwYWZhMTkyMjNiZmU3MmNiYWY5Y2MyZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T18:16:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T18:16:37Z"}, "message": "Auto merge of #86627 - JohnTitor:rollup-ey29pc1, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #86330 (Change how edition based future compatibility warnings are handled)\n - #86513 (Rustdoc: Do not list impl when trait has doc(hidden))\n - #86592 (Use `#[non_exhaustive]` where appropriate)\n - #86608 (chore(rustdoc): remove unused members of RenderType)\n - #86624 (Update compiler-builtins)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0081c36ba17f9bc754420b0f3d7968eb67447763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0081c36ba17f9bc754420b0f3d7968eb67447763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "html_url": "https://github.com/rust-lang/rust/commit/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f726dbe934d7dcf8ac72e5a8863703e64bb049ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f726dbe934d7dcf8ac72e5a8863703e64bb049ae", "html_url": "https://github.com/rust-lang/rust/commit/f726dbe934d7dcf8ac72e5a8863703e64bb049ae"}, {"sha": "b238e6fcabf2222156071def30bef6d542448da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b238e6fcabf2222156071def30bef6d542448da7", "html_url": "https://github.com/rust-lang/rust/commit/b238e6fcabf2222156071def30bef6d542448da7"}], "stats": {"total": 1341, "additions": 608, "deletions": 733}, "files": [{"sha": "65ad130d5599dcf8fd5898fe481b6167bcdbc3c1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -656,9 +656,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.45\"\n+version = \"0.1.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"787187ae221adfcda34b03006f1617099e4ae26b50e5a4db282496014ab75837\"\n+checksum = \"d69484e04eab372f5f345920e3a8c7a06e7dcbb75c0944eccdc3e3160aeee3c7\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "14ffbbc35ebf03232700ed076a1918949004a2e1", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -3,7 +3,8 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n-use rustc_session::lint::FutureBreakage;\n+use rustc_session::lint::FutureIncompatibilityReason;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n declare_lint! {\n@@ -37,10 +38,7 @@ declare_lint! {\n     \"detects calling `into_iter` on arrays\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n-        edition: None,\n-        future_breakage: Some(FutureBreakage {\n-            date: None\n-        })\n+        reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n     };\n }\n "}, {"sha": "5479af1dc30994a1165e461d85d64066edc40eda", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -47,6 +47,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n+use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n@@ -874,7 +875,7 @@ declare_lint! {\n     \"detects anonymous parameters\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n \n@@ -1663,7 +1664,7 @@ declare_lint! {\n     \"`...` range patterns are deprecated\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n \n@@ -1891,7 +1892,7 @@ declare_lint! {\n     \"detects edition keywords being used as an identifier\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n "}, {"sha": "2dc04d57d1e66de4edd05e224ec152df106196a8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -209,8 +209,8 @@ impl LintStore {\n                 bug!(\"duplicate specification of lint {}\", lint.name_lower())\n             }\n \n-            if let Some(FutureIncompatibleInfo { edition, .. }) = lint.future_incompatible {\n-                if let Some(edition) = edition {\n+            if let Some(FutureIncompatibleInfo { reason, .. }) = lint.future_incompatible {\n+                if let Some(edition) = reason.edition() {\n                     self.lint_groups\n                         .entry(edition.lint_name())\n                         .or_insert(LintGroup {"}, {"sha": "4136398adb58c918730e3bdf8579035486d55b76", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,7 +6,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass, FutureBreakage};\n+use crate::{declare_lint, declare_lint_pass, FutureBreakage, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n \n declare_lint! {\n@@ -41,7 +41,6 @@ declare_lint! {\n     \"applying forbid to lint-groups\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #81670 <https://github.com/rust-lang/rust/issues/81670>\",\n-        edition: None,\n     };\n }\n \n@@ -77,7 +76,6 @@ declare_lint! {\n     \"ill-formed attribute inputs that were previously accepted and used in practice\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-        edition: None,\n     };\n     crate_level_only\n }\n@@ -114,7 +112,6 @@ declare_lint! {\n     \"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #68585 <https://github.com/rust-lang/rust/issues/68585>\",\n-        edition: None,\n     };\n }\n \n@@ -293,7 +290,6 @@ declare_lint! {\n     \"constant evaluation encountered erroneous expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n-        edition: None,\n     };\n     report_in_external_macro\n }\n@@ -900,7 +896,6 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-        edition: None,\n     };\n }\n \n@@ -980,7 +975,6 @@ declare_lint! {\n     \"detect public re-exports of private extern crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-        edition: None,\n     };\n }\n \n@@ -1010,7 +1004,6 @@ declare_lint! {\n     \"type parameter default erroneously allowed in invalid location\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-        edition: None,\n     };\n }\n \n@@ -1078,7 +1071,6 @@ declare_lint! {\n     \"detects unaligned references to fields of packed structs\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n-        edition: None,\n     };\n     report_in_external_macro\n }\n@@ -1200,7 +1192,6 @@ declare_lint! {\n     \"patterns in functions without body were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-        edition: None,\n     };\n }\n \n@@ -1244,7 +1235,6 @@ declare_lint! {\n     \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-        edition: None,\n     };\n }\n \n@@ -1286,7 +1276,6 @@ declare_lint! {\n     \"detects generic lifetime arguments in path segments with late bound lifetime parameters\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-        edition: None,\n     };\n }\n \n@@ -1322,7 +1311,6 @@ declare_lint! {\n     \"trait-object types were treated as different depending on marker-trait order\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n-        edition: None,\n     };\n }\n \n@@ -1362,7 +1350,6 @@ declare_lint! {\n     \"distinct impls distinguished only by the leak-check code\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #56105 <https://github.com/rust-lang/rust/issues/56105>\",\n-        edition: None,\n     };\n }\n \n@@ -1554,7 +1541,7 @@ declare_lint! {\n     \"raw pointer to an inference variable\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n \n@@ -1621,7 +1608,7 @@ declare_lint! {\n     \"suggest using `dyn Trait` for trait objects\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n \n@@ -1676,7 +1663,7 @@ declare_lint! {\n      instead of `crate`, `self`, or an extern crate name\",\n      @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n      };\n }\n \n@@ -1725,7 +1712,6 @@ declare_lint! {\n     \"floating-point literals cannot be used in patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-        edition: None,\n     };\n }\n \n@@ -1769,7 +1755,6 @@ declare_lint! {\n     \"detects name collision with an existing but unstable method\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n-        edition: None,\n         // Note: this item represents future incompatibility of all unstable functions in the\n         //       standard library, and thus should never be removed or changed to an error.\n     };\n@@ -1873,7 +1858,6 @@ declare_lint! {\n     \"checks the object safety of where clauses\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n-        edition: None,\n     };\n }\n \n@@ -1940,7 +1924,6 @@ declare_lint! {\n     \"detects proc macro derives using inaccessible names from parent modules\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n-        edition: None,\n     };\n }\n \n@@ -2043,7 +2026,6 @@ declare_lint! {\n      cannot be referred to by absolute paths\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n-        edition: None,\n     };\n     crate_level_only\n }\n@@ -2134,7 +2116,6 @@ declare_lint! {\n     \"constant used in pattern contains value of non-structural-match type in a field or a variant\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n-        edition: None,\n     };\n }\n \n@@ -2190,7 +2171,6 @@ declare_lint! {\n     \"pointers are not structural-match\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/70861>\",\n-        edition: None,\n     };\n }\n \n@@ -2229,7 +2209,6 @@ declare_lint! {\n     expression contains values of non-structural-match types\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #73448 <https://github.com/rust-lang/rust/issues/73448>\",\n-        edition: None,\n     };\n }\n \n@@ -2287,7 +2266,6 @@ declare_lint! {\n     \"ambiguous associated items\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n-        edition: None,\n     };\n }\n \n@@ -2318,7 +2296,6 @@ declare_lint! {\n     \"reservation of a two-phased borrow conflicts with other shared borrows\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n-        edition: None,\n     };\n }\n \n@@ -2360,7 +2337,6 @@ declare_lint! {\n     \"a feature gate that doesn't break dependent crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n-        edition: None,\n     };\n }\n \n@@ -2589,7 +2565,6 @@ declare_lint! {\n     \"a C-like enum implementing Drop is cast\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #73333 <https://github.com/rust-lang/rust/issues/73333>\",\n-        edition: None,\n     };\n }\n \n@@ -2629,7 +2604,6 @@ declare_lint! {\n     \"detects a generic constant is used in a type without a emitting a warning\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #76200 <https://github.com/rust-lang/rust/issues/76200>\",\n-        edition: None,\n     };\n }\n \n@@ -2688,7 +2662,6 @@ declare_lint! {\n     \"uninhabited static\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #74840 <https://github.com/rust-lang/rust/issues/74840>\",\n-        edition: None,\n     };\n }\n \n@@ -2758,7 +2731,6 @@ declare_lint! {\n     \"unsupported naked function definitions\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n-        edition: None,\n     };\n }\n \n@@ -2831,7 +2803,6 @@ declare_lint! {\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n-        edition: None,\n     };\n }\n \n@@ -3154,7 +3125,6 @@ declare_lint! {\n     \"detects invalid `#[doc(...)]` attributes\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82730 <https://github.com/rust-lang/rust/issues/82730>\",\n-        edition: None,\n     };\n }\n \n@@ -3201,7 +3171,6 @@ declare_lint! {\n     \"detects usage of old versions of certain proc-macro crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n-        edition: None,\n         future_breakage: Some(FutureBreakage {\n             date: None\n         })\n@@ -3242,7 +3211,7 @@ declare_lint! {\n     \"detects usage of old versions of or-patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #84869 <https://github.com/rust-lang/rust/issues/84869>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n \n@@ -3291,6 +3260,6 @@ declare_lint! {\n         prelude in future editions\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #85684 <https://github.com/rust-lang/rust/issues/85684>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }"}, {"sha": "b3d98747dcfa2cd60362ed3bae7ae6e0bd608ab3", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -142,23 +142,51 @@ pub struct Lint {\n pub struct FutureIncompatibleInfo {\n     /// e.g., a URL for an issue/PR/RFC or error code\n     pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<Edition>,\n+    /// The reason for the lint used by diagnostics to provide\n+    /// the right help message\n+    pub reason: FutureIncompatibilityReason,\n     /// Information about a future breakage, which will\n     /// be emitted in JSON messages to be displayed by Cargo\n     /// for upstream deps\n     pub future_breakage: Option<FutureBreakage>,\n }\n \n+/// The reason for future incompatibility\n+#[derive(Copy, Clone, Debug)]\n+pub enum FutureIncompatibilityReason {\n+    /// This will be an error in a future release\n+    /// for all editions\n+    FutureReleaseError,\n+    /// Previously accepted code that will become an\n+    /// error in the provided edition\n+    EditionError(Edition),\n+    /// Code that changes meaning in some way in\n+    /// the provided edition\n+    EditionSemanticsChange(Edition),\n+}\n+\n+impl FutureIncompatibilityReason {\n+    pub fn edition(self) -> Option<Edition> {\n+        match self {\n+            Self::EditionError(e) => Some(e),\n+            Self::EditionSemanticsChange(e) => Some(e),\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct FutureBreakage {\n     pub date: Option<&'static str>,\n }\n \n impl FutureIncompatibleInfo {\n     pub const fn default_fields_for_macro() -> Self {\n-        FutureIncompatibleInfo { reference: \"\", edition: None, future_breakage: None }\n+        FutureIncompatibleInfo {\n+            reference: \"\",\n+            reason: FutureIncompatibilityReason::FutureReleaseError,\n+            future_breakage: None,\n+        }\n     }\n }\n "}, {"sha": "e8929cd5c0237b91eff421c617c40c3683e5d363", "filename": "compiler/rustc_metadata/src/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -70,13 +70,12 @@ mod dl {\n         use std::sync::{Mutex, MutexGuard};\n \n         pub fn lock() -> MutexGuard<'static, Guard> {\n-            static LOCK: SyncLazy<Mutex<Guard>> = SyncLazy::new(|| Mutex::new(Guard { _priv: () }));\n+            static LOCK: SyncLazy<Mutex<Guard>> = SyncLazy::new(|| Mutex::new(Guard));\n             LOCK.lock().unwrap()\n         }\n \n-        pub struct Guard {\n-            _priv: (),\n-        }\n+        #[non_exhaustive]\n+        pub struct Guard;\n \n         impl Guard {\n             pub fn get(&mut self) -> Result<(), String> {"}, {"sha": "8180d853f6073e6195b6d4ff1a9df5e56b1c9cef", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -292,7 +292,7 @@ pub fn struct_lint_level<'s, 'd>(\n             // if this lint occurs in the expansion of a macro from an external crate,\n             // allow individual lints to opt-out from being reported.\n             let not_future_incompatible =\n-                future_incompatible.map(|f| f.edition.is_some()).unwrap_or(true);\n+                future_incompatible.map(|f| f.reason.edition().is_some()).unwrap_or(true);\n             if not_future_incompatible && !lint.report_in_external_macro {\n                 err.cancel();\n                 // Don't continue further, since we don't want to have\n@@ -373,9 +373,6 @@ pub fn struct_lint_level<'s, 'd>(\n         err.code(DiagnosticId::Lint { name, has_future_breakage });\n \n         if let Some(future_incompatible) = future_incompatible {\n-            const STANDARD_MESSAGE: &str = \"this was previously accepted by the compiler but is being phased out; \\\n-                 it will become a hard error\";\n-\n             let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n                 \"once this associated item is added to the standard library, the ambiguity may \\\n                  cause an error or change in behavior!\"\n@@ -384,10 +381,22 @@ pub fn struct_lint_level<'s, 'd>(\n                 \"this borrowing pattern was not meant to be accepted, and may become a hard error \\\n                  in the future\"\n                     .to_owned()\n-            } else if let Some(edition) = future_incompatible.edition {\n-                format!(\"{} in the {} edition!\", STANDARD_MESSAGE, edition)\n+            } else if let FutureIncompatibilityReason::EditionError(edition) =\n+                future_incompatible.reason\n+            {\n+                let current_edition = sess.edition();\n+                format!(\n+                    \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n+                    current_edition, edition\n+                )\n+            } else if let FutureIncompatibilityReason::EditionSemanticsChange(edition) =\n+                future_incompatible.reason\n+            {\n+                format!(\"this changes meaning in Rust {}\", edition)\n             } else {\n-                format!(\"{} in a future release!\", STANDARD_MESSAGE)\n+                \"this was previously accepted by the compiler but is being phased out; \\\n+                 it will become a hard error in a future release!\"\n+                    .to_owned()\n             };\n             let citation = format!(\"for more information, see {}\", future_incompatible.reference);\n             err.warn(&explanation);"}, {"sha": "ccf6e420de7a99579862433df772a8f72e138e5e", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -60,7 +60,7 @@ impl Layout {\n     #[inline]\n     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n-            return Err(LayoutError { private: () });\n+            return Err(LayoutError);\n         }\n \n         // (power-of-two implies align != 0.)\n@@ -78,7 +78,7 @@ impl Layout {\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n         if size > usize::MAX - (align - 1) {\n-            return Err(LayoutError { private: () });\n+            return Err(LayoutError);\n         }\n \n         // SAFETY: the conditions for `from_size_align_unchecked` have been\n@@ -288,7 +288,7 @@ impl Layout {\n         // > must not overflow (i.e., the rounded value must be less than\n         // > `usize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;\n+        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // SAFETY: self.align is already known to be valid and alloc_size has been\n         // padded already.\n@@ -346,8 +346,8 @@ impl Layout {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size().checked_add(pad).ok_or(LayoutError { private: () })?;\n-        let new_size = offset.checked_add(next.size()).ok_or(LayoutError { private: () })?;\n+        let offset = self.size().checked_add(pad).ok_or(LayoutError)?;\n+        let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n         Ok((layout, offset))\n@@ -368,7 +368,7 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n-        let size = self.size().checked_mul(n).ok_or(LayoutError { private: () })?;\n+        let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         Layout::from_size_align(size, self.align())\n     }\n \n@@ -381,7 +381,7 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n-        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError { private: () })?;\n+        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         Layout::from_size_align(new_size, self.align())\n     }\n \n@@ -409,10 +409,9 @@ pub type LayoutErr = LayoutError;\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n #[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n+#[non_exhaustive]\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct LayoutError {\n-    private: (),\n-}\n+pub struct LayoutError;\n \n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]"}, {"sha": "24b0797f93a50ecb84ed7eac87d32c6591004ffa", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -593,8 +593,8 @@ pub struct RefCell<T: ?Sized> {\n \n /// An error returned by [`RefCell::try_borrow`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+#[non_exhaustive]\n pub struct BorrowError {\n-    _private: (),\n     #[cfg(feature = \"debug_refcell\")]\n     location: &'static crate::panic::Location<'static>,\n }\n@@ -620,8 +620,8 @@ impl Display for BorrowError {\n \n /// An error returned by [`RefCell::try_borrow_mut`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+#[non_exhaustive]\n pub struct BorrowMutError {\n-    _private: (),\n     #[cfg(feature = \"debug_refcell\")]\n     location: &'static crate::panic::Location<'static>,\n }\n@@ -872,7 +872,6 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(Ref { value: unsafe { &*self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n@@ -958,7 +957,6 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowMutError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n@@ -1080,7 +1078,6 @@ impl<T: ?Sized> RefCell<T> {\n             Ok(unsafe { &*self.value.get() })\n         } else {\n             Err(BorrowError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]"}, {"sha": "aa735a14cbd8fff3cab848c8a9340a0ee8243f3a", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -118,10 +118,9 @@ impl fmt::Display for Utf8Error {\n ///\n /// [`from_str`]: super::FromStr::from_str\n #[derive(Debug, Clone, PartialEq, Eq)]\n+#[non_exhaustive]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ParseBoolError {\n-    pub(super) _priv: (),\n-}\n+pub struct ParseBoolError;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseBoolError {"}, {"sha": "12d79a56a527c02765f228a7de187f07865454c5", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -585,7 +585,7 @@ impl FromStr for bool {\n         match s {\n             \"true\" => Ok(true),\n             \"false\" => Ok(false),\n-            _ => Err(ParseBoolError { _priv: () }),\n+            _ => Err(ParseBoolError),\n         }\n     }\n }"}, {"sha": "7586229504c221242bfe3ab613f753790b586376", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -85,14 +85,13 @@ impl !Sync for TokenStream {}\n \n /// Error returned from `TokenStream::from_str`.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+#[non_exhaustive]\n #[derive(Debug)]\n-pub struct LexError {\n-    _inner: (),\n-}\n+pub struct LexError;\n \n impl LexError {\n     fn new() -> Self {\n-        LexError { _inner: () }\n+        LexError\n     }\n }\n "}, {"sha": "fd52de7430a203af9bf247211756b528af5da5e5", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,9 +13,8 @@ use crate::io::{\n /// This struct is generally created by calling [`empty()`]. Please see\n /// the documentation of [`empty()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Empty {\n-    _priv: (),\n-}\n+#[non_exhaustive]\n+pub struct Empty;\n \n /// Constructs a new handle to an empty reader.\n ///\n@@ -35,7 +34,7 @@ pub struct Empty {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn empty() -> Empty {\n-    Empty { _priv: () }\n+    Empty\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -172,9 +171,8 @@ impl fmt::Debug for Repeat {\n /// This struct is generally created by calling [`sink`]. Please\n /// see the documentation of [`sink()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Sink {\n-    _priv: (),\n-}\n+#[non_exhaustive]\n+pub struct Sink;\n \n /// Creates an instance of a writer which will successfully consume all data.\n ///\n@@ -195,7 +193,7 @@ pub struct Sink {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn sink() -> Sink {\n-    Sink { _priv: () }\n+    Sink\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c53290ec0c7d0c117df53b147f34b0796dc93959", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -324,10 +324,9 @@ macro_rules! __thread_local_inner {\n \n /// An error returned by [`LocalKey::try_with`](struct.LocalKey.html#method.try_with).\n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n+#[non_exhaustive]\n #[derive(Clone, Copy, Eq, PartialEq)]\n-pub struct AccessError {\n-    _private: (),\n-}\n+pub struct AccessError;\n \n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Debug for AccessError {\n@@ -396,7 +395,7 @@ impl<T: 'static> LocalKey<T> {\n         F: FnOnce(&T) -> R,\n     {\n         unsafe {\n-            let thread_local = (self.inner)().ok_or(AccessError { _private: () })?;\n+            let thread_local = (self.inner)().ok_or(AccessError)?;\n             Ok(f(thread_local))\n         }\n     }"}, {"sha": "ab6254dcf10b57d8a269222ebab992c45c857714", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -15,7 +15,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, AttributesExt, FakeDefId, GetDefId, ToSource};\n+use crate::clean::{\n+    self, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, ToSource, Type,\n+};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -420,6 +422,21 @@ crate fn build_impl(\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n+\n+    // Return if the trait itself or any types of the generic parameters are doc(hidden).\n+    let mut stack: Vec<&Type> = trait_.iter().collect();\n+    stack.push(&for_);\n+    while let Some(ty) = stack.pop() {\n+        if let Some(did) = ty.def_id() {\n+            if cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+                return;\n+            }\n+        }\n+        if let Some(generics) = ty.generics() {\n+            stack.extend(generics);\n+        }\n+    }\n+\n     if let Some(trait_did) = trait_.def_id() {\n         record_extern_trait(cx, trait_did);\n     }"}, {"sha": "c9682bd84f76babd6432fe10cdd5a4257de2df50", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -128,7 +128,6 @@ crate struct Cache {\n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`.\n struct CacheBuilder<'a, 'tcx> {\n     cache: &'a mut Cache,\n-    empty_cache: Cache,\n     tcx: TyCtxt<'tcx>,\n }\n \n@@ -173,7 +172,7 @@ impl Cache {\n             self.primitive_locations.insert(prim, def_id);\n         }\n \n-        krate = CacheBuilder { tcx, cache: self, empty_cache: Cache::default() }.fold_crate(krate);\n+        krate = CacheBuilder { tcx, cache: self }.fold_crate(krate);\n \n         for (trait_did, dids, impl_) in self.orphan_trait_impls.drain(..) {\n             if self.traits.contains_key(&trait_did) {\n@@ -302,7 +301,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             desc,\n                             parent,\n                             parent_idx: None,\n-                            search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),\n+                            search_type: get_index_search_type(&item, self.tcx),\n                             aliases: item.attrs.get_doc_aliases(),\n                         });\n                     }"}, {"sha": "e213a9a2949dda25d88a4ff40f0ba0749c2f314e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -12,7 +12,7 @@ use crate::clean::types::{\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n use crate::html::markdown::short_markdown_summary;\n-use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n+use crate::html::render::{IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n crate enum ExternalLocation {\n@@ -44,7 +44,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 desc,\n                 parent: Some(did.into()),\n                 parent_idx: None,\n-                search_type: get_index_search_type(&item, cache, tcx),\n+                search_type: get_index_search_type(&item, tcx),\n                 aliases: item.attrs.get_doc_aliases(),\n             });\n         }\n@@ -192,7 +192,6 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n \n crate fn get_index_search_type<'tcx>(\n     item: &clean::Item,\n-    cache: &Cache,\n     tcx: TyCtxt<'tcx>,\n ) -> Option<IndexItemFunctionType> {\n     let (all_types, ret_types) = match *item.kind {\n@@ -204,25 +203,22 @@ crate fn get_index_search_type<'tcx>(\n \n     let inputs = all_types\n         .iter()\n-        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty, &cache), *kind)))\n+        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty), *kind)))\n         .filter(|a| a.ty.name.is_some())\n         .collect();\n     let output = ret_types\n         .iter()\n-        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty, &cache), *kind)))\n+        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty), *kind)))\n         .filter(|a| a.ty.name.is_some())\n         .collect::<Vec<_>>();\n     let output = if output.is_empty() { None } else { Some(output) };\n \n     Some(IndexItemFunctionType { inputs, output })\n }\n \n-fn get_index_type(clean_type: &clean::Type, cache: &Cache) -> RenderType {\n+fn get_index_type(clean_type: &clean::Type) -> RenderType {\n     RenderType {\n-        ty: clean_type.def_id_full(cache),\n-        idx: None,\n         name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n-        generics: get_generics(clean_type, cache),\n     }\n }\n \n@@ -254,22 +250,6 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     }\n }\n \n-fn get_generics(clean_type: &clean::Type, cache: &Cache) -> Option<Vec<Generic>> {\n-    clean_type.generics().and_then(|types| {\n-        let r = types\n-            .iter()\n-            .filter_map(|t| {\n-                get_index_type_name(t, false).map(|name| Generic {\n-                    name: name.as_str().to_ascii_lowercase(),\n-                    defid: t.def_id_full(cache),\n-                    idx: None,\n-                })\n-            })\n-            .collect::<Vec<_>>();\n-        if r.is_empty() { None } else { Some(r) }\n-    })\n-}\n-\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return"}, {"sha": "6e73b2a5bef46c9657d7d0730d11d2c83500e7a2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -95,31 +95,7 @@ crate struct IndexItem {\n /// A type used for the search index.\n #[derive(Debug)]\n crate struct RenderType {\n-    ty: Option<DefId>,\n-    idx: Option<usize>,\n     name: Option<String>,\n-    generics: Option<Vec<Generic>>,\n-}\n-\n-/// A type used for the search index.\n-#[derive(Debug)]\n-crate struct Generic {\n-    name: String,\n-    defid: Option<DefId>,\n-    idx: Option<usize>,\n-}\n-\n-impl Serialize for Generic {\n-    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-    where\n-        S: Serializer,\n-    {\n-        if let Some(id) = self.idx {\n-            serializer.serialize_some(&id)\n-        } else {\n-            serializer.serialize_some(&self.name)\n-        }\n-    }\n }\n \n /// Full type of functions/methods in the search index."}, {"sha": "15953122280f37a7bfe0f3eda33cd9793f011dd0", "filename": "src/test/rustdoc/auxiliary/cross-crate-hidden-impl-parameter.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -0,0 +1,5 @@\n+#[doc(hidden)]\n+pub enum HiddenType {}\n+\n+#[doc(hidden)]\n+pub trait HiddenTrait {}"}, {"sha": "eb2ced2f7f413f58be498a285808de10a5c9f634", "filename": "src/test/rustdoc/cross-crate-hidden-impl-parameter.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -0,0 +1,35 @@\n+// Issue #86448: test for cross-crate `doc(hidden)`\n+#![crate_name = \"foo\"]\n+\n+// aux-build:cross-crate-hidden-impl-parameter.rs\n+extern crate cross_crate_hidden_impl_parameter;\n+\n+pub use ::cross_crate_hidden_impl_parameter::{HiddenType, HiddenTrait}; // OK, not re-exported\n+\n+pub enum MyLibType {}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CHiddenType%3E\"]' 'impl From<HiddenType> for MyLibType'\n+impl From<HiddenType> for MyLibType {\n+    fn from(it: HiddenType) -> MyLibType {\n+        match it {}\n+    }\n+}\n+\n+pub struct T<T>(T);\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CT%3CT%3CT%3CT%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<T<T<T<T<HiddenType>>>>> for MyLibType'\n+impl From<T<T<T<T<HiddenType>>>>> for MyLibType {\n+    fn from(it: T<T<T<T<HiddenType>>>>) -> MyLibType {\n+        todo!()\n+    }\n+}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-HiddenTrait\"]' 'impl HiddenTrait for MyLibType'\n+impl HiddenTrait for MyLibType {}\n+\n+// @!has foo/struct.T.html '//*[@id=\"impl-From%3CMyLibType%3E\"]' 'impl From<MyLibType> for T<T<T<T<HiddenType>>>>'\n+impl From<MyLibType> for T<T<T<T<HiddenType>>>> {\n+    fn from(it: MyLibType) -> T<T<T<T<HiddenType>>>> {\n+        match it {}\n+    }\n+}"}, {"sha": "d55393af8599ba5b53a254914e52acd6c3d5bf00", "filename": "src/test/rustdoc/same-crate-hidden-impl-parameter.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -0,0 +1,36 @@\n+// test for `doc(hidden)` with impl parameters in the same crate.\n+#![crate_name = \"foo\"]\n+\n+#[doc(hidden)]\n+pub enum HiddenType {}\n+\n+#[doc(hidden)]\n+pub trait HiddenTrait {}\n+\n+pub enum MyLibType {}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CHiddenType%3E\"]' 'impl From<HiddenType> for MyLibType'\n+impl From<HiddenType> for MyLibType {\n+    fn from(it: HiddenType) -> MyLibType {\n+        match it {}\n+    }\n+}\n+\n+pub struct T<T>(T);\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CT%3CT%3CT%3CT%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<T<T<T<T<HiddenType>>>>> for MyLibType'\n+impl From<T<T<T<T<HiddenType>>>>> for MyLibType {\n+    fn from(it: T<T<T<T<HiddenType>>>>) -> MyLibType {\n+        todo!()\n+    }\n+}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-HiddenTrait\"]' 'impl HiddenTrait for MyLibType'\n+impl HiddenTrait for MyLibType {}\n+\n+// @!has foo/struct.T.html '//*[@id=\"impl-From%3CMyLibType%3E\"]' 'impl From<MyLibType> for T<T<T<T<HiddenType>>>>'\n+impl From<MyLibType> for T<T<T<T<HiddenType>>>> {\n+    fn from(it: MyLibType) -> T<T<T<T<HiddenType>>>> {\n+        match it {}\n+    }\n+}"}, {"sha": "c09e20770846e313f26fd4e87f345cf7df7728b9", "filename": "src/test/ui/anon-params/anon-params-deprecated.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(_: i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING hard error\n+                 //~| WARNING this is accepted in the current edition\n \n     fn bar_with_default_impl(_: String, _: String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is accepted in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "6f7385da040c552282c49ed9c092a90acd941d00", "filename": "src/test/ui/anon-params/anon-params-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING hard error\n+                 //~| WARNING this is accepted in the current edition\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is accepted in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "98d52d659a9d387da6ba8720af72848bcccecb36", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -18,7 +18,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                              ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -27,7 +27,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                      ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: 3 warnings emitted"}, {"sha": "50c1639996ee54865d794eedb933ee062436a784", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -3,36 +3,36 @@\n \n mod outer_mod {\n     pub mod await { //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this was previously accepted by the compiler\n+    //~^ WARN this is accepted in the current edition\n         pub struct await; //~ ERROR `await` is a keyword in the 2018 edition\n-        //~^ WARN this was previously accepted by the compiler\n+        //~^ WARN this is accepted in the current edition\n     }\n }\n use outer_mod::await::await; //~ ERROR `await` is a keyword in the 2018 edition\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n-//~^^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is accepted in the current edition\n+//~^^^ WARN this is accepted in the current edition\n \n struct Foo { await: () }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is accepted in the current edition\n \n impl Foo { fn await() {} }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is accepted in the current edition\n \n macro_rules! await {\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is accepted in the current edition\n     () => {}\n }\n \n fn main() {\n     await!(); //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this was previously accepted by the compiler\n+    //~^ WARN this is accepted in the current edition\n \n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n-    //~^^ WARN this was previously accepted by the compiler\n-    //~^^^ WARN this was previously accepted by the compiler\n+    //~^^ WARN this is accepted in the current edition\n+    //~^^^ WARN this is accepted in the current edition\n }"}, {"sha": "50a82c08c3f85372f63346942f8fd02c7dbb82d3", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `await` is a keyword in the 2018 edition\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 10 previous errors"}, {"sha": "117495e130f925193d46da47e47d4107177226d2", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod r#await {\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         pub struct r#await;\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::r#await::r#await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match r#await { r#await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n }"}, {"sha": "b3c64895c6dd68f01f2eb5e7e2ceff20200e16f4", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod await {\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         pub struct await;\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::await::await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match await { await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n }"}, {"sha": "1c4c19ea45f72b5276d78ccdfd65995d5797a071", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 6 previous errors"}, {"sha": "ae8863c567d0fdd28a54426d3e0695dd5ac15551", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,7 +13,7 @@ fn b() {\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "b93bd6c6fa064b26b998c9ac61e0807af11830f9", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -138,7 +138,7 @@ LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0747]: type provided when a constant was expected"}, {"sha": "c815080fc4ab6f563bbdc63ec43578e91d69c568", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         pub struct r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::r#dyn::r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match r#dyn { r#dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     macro_defn::r#dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn r#dyn() -> ::outer_mod::r#dyn::r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         ::outer_mod::r#dyn::r#dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n \n \n \n     pub fn boxed() -> r#dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN was previously accepted\n+        //~| WARN this is accepted in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "6cdc70714942527174f726caa582b3912de618ac", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         pub struct dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::dyn::dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match dyn { dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     macro_defn::dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn dyn() -> ::outer_mod::dyn::dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n         ::outer_mod::dyn::dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is accepted in the current edition\n     }\n \n \n \n     pub fn boxed() -> dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN was previously accepted\n+        //~| WARN this is accepted in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "3eb5bb7b26d426b821baf6dc7dfffaa928ec6445", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         pub struct dyn;\n    |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_defn::dyn();\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_rules! dyn {\n    |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn boxed() -> dyn!(\n    |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 14 previous errors"}, {"sha": "23ca36b71e00f7ac22904f6d19420862bea29cdc", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -3,12 +3,12 @@\n \n fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     let _x: &SomeTrait = todo!();\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n }\n \n trait SomeTrait {}"}, {"sha": "30f09e22792167ea0a9151c9a4430713810fb8c0", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -27,7 +27,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let _x: &SomeTrait = todo!();\n    |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors"}, {"sha": "fcfe493c1a228b7bf877414dd97a5c4eefba8545", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let y = &x as *const _;\n     let _ = y.is_null();\n     //~^ error: type annotations needed [tyvar_behind_raw_pointer]\n-    //~^^ warning: this was previously accepted\n+    //~^^ warning: this is accepted in the current edition\n }"}, {"sha": "417daf36fca7dd3ad678c2d73d635782f342d847", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n error: aborting due to previous error"}, {"sha": "ce158043e54d505b57f9a4d8019d32d9cf4b2d66", "filename": "src/test/ui/future-incompatible-lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -2,7 +2,7 @@\n \n trait Tr {\n     fn f(u8) {} //~ ERROR anonymous parameters are deprecated\n-                //~^ WARN this was previously accepted\n+                //~^ WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "16028261eb1d1762bfe74a2ad25b00a223252c83", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(anonymous_parameters)]` implied by `#[deny(future_incompatible)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n error: aborting due to previous error"}, {"sha": "b656382bced34bddfae1cca6f1da2c60745f8234", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,6 +11,6 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n-  //~| WARNING: this was previously accepted by the compiler\n+  //~| WARNING: this is accepted in the current edition\n \n fn main() {}"}, {"sha": "34554d38520cfdacff1b2aa33a3b3f8663eb3f07", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -26,7 +26,7 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied"}, {"sha": "6662e46b1c7e26a3d2f153969448b6bc1a188f63", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = &data as *const *const ();\n     if data.is_null() {}\n     //~^ WARNING type annotations needed\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "c38f57912adff57827fef07ddfd7d5b5b809d753", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n warning: 1 warning emitted"}, {"sha": "546052817d242f359cf2796b340c89b3498be566", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,11 +13,11 @@ fn main() {\n     // which we continue to support for compatibility.\n     let _: Iter<'_, i32> = array.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     let _: Iter<'_, i32> = Box::new(array).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n     let _: Iter<'_, i32> = Rc::new(array).into_iter();"}, {"sha": "82596c6f022e032ea8a05f33656014154f643b70", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Iter<'_, i32> = array.into_iter();\n    |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -14,29 +14,8 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: 2 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n-   |\n-LL |     let _: Iter<'_, i32> = array.into_iter();\n-   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n-   |\n-LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "ede96d7cea16c4a60a6a4c07231de88720402d7f", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,42 +8,42 @@ fn main() {\n     // Expressions that should trigger the lint\n     small.iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [1, 2].iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     big.iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [0u8; 33].iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(small).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([1, 2]).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(big).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([0u8; 33]).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new(big)).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "3a0cb75ed152ddd7bad1444ebf066ae122ae1e64", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,42 +8,42 @@ fn main() {\n     // Expressions that should trigger the lint\n     small.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [1, 2].into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     big.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [0u8; 33].into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(small).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([1, 2]).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(big).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([0u8; 33]).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new(big)).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "1f33a5c659b5dba1c973fe810303b4b7d643dff0", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 148, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL |     small.into_iter();\n    |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -14,7 +14,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -23,7 +23,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     big.into_iter();\n    |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -32,7 +32,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -41,7 +41,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -50,7 +50,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -59,7 +59,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -68,7 +68,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -77,7 +77,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -86,7 +86,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -95,7 +95,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -104,144 +104,8 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: 12 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n-   |\n-LL |     small.into_iter();\n-   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n-   |\n-LL |     [1, 2].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n-   |\n-LL |     big.into_iter();\n-   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n-   |\n-LL |     [0u8; 33].into_iter();\n-   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n-   |\n-LL |     Box::new(small).into_iter();\n-   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n-   |\n-LL |     Box::new([1, 2]).into_iter();\n-   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n-   |\n-LL |     Box::new(big).into_iter();\n-   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n-   |\n-LL |     Box::new([0u8; 33]).into_iter();\n-   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n-   |\n-LL |     Box::new(Box::new(small)).into_iter();\n-   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n-   |\n-LL |     Box::new(Box::new([1, 2])).into_iter();\n-   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n-   |\n-LL |     Box::new(Box::new(big)).into_iter();\n-   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n-   |\n-LL |     Box::new(Box::new([0u8; 33])).into_iter();\n-   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:60:12\n-   |\n-LL |     [0, 1].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/into-iter-on-arrays-lint.rs:59:13\n-   |\n-LL |     #[allow(array_into_iter)]\n-   |             ^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "0a7c5a8dbd10b44b374fd8d1b67eddd049389c63", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -13,12 +13,12 @@ impl Assoc for dyn Dyn {}\n fn main() {\n     Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     ::Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     Dyn::CONST;\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n }"}, {"sha": "40fafc4b3b59b7085334612994de57150f5c2b5f", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,7 +11,7 @@ LL |     Dyn::func();\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -20,7 +20,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -29,7 +29,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 3 warnings emitted"}, {"sha": "b4c2c505aa560dae2499c2955ceeaf34b866e038", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "8ecfe3a15b8f6cf9ed34c86f5a91ff3b3666c4d2", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "83a1c078f062f5bec33de0fe76f30c9b3f5bfa6a", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "232edf4f1ef25b06902aaaf2dfd3b6aa5d1428cb", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "5e5fda973d54e7fcfd7234e61151b88d84f3e7c9", "filename": "src/test/ui/lint/force-warn/force-warn-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "82781984f0cea55a781695cdb156c1f51165a2b1", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "bee5d4ae4b1b330553f1857d936b8e14ea112639", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1..=2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &(1..=2) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n }"}, {"sha": "d98c10c26c7cfd96e22e7850bf439bbed5d011b5", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n }"}, {"sha": "efa684a24e3d393c5fcba1e45cdc0d03ec21521d", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: `...` range patterns are deprecated\n@@ -18,7 +18,7 @@ warning: `...` range patterns are deprecated\n LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 2 warnings emitted"}, {"sha": "79958ba90d409c9f8eb4af66051261dea3b5eef8", "filename": "src/test/ui/lint/issue-78660-cap-lints-future-compat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f726dbe934d7dcf8ac72e5a8863703e64bb049ae/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f726dbe934d7dcf8ac72e5a8863703e64bb049ae/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr?ref=f726dbe934d7dcf8ac72e5a8863703e64bb049ae", "patch": "@@ -1,11 +0,0 @@\n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/issue-78660-cap-lints-future-compat.rs:9:12\n-   |\n-LL |     [\"hi\"].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `-D array-into-iter` implied by `-D warnings`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "3355bb4e4ff402042bdf9a708d7d4de0db5d6161", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL | pub fn try() {}\n    |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n    = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "f5a42670fdd1c62402b243bd17eb1342ad8e452e", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,20 +9,20 @@ extern crate or_pattern;\n \n macro_rules! foo { ($x:pat_param | $y:pat) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => {\n         //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-        //~| WARN this was previously accepted\n+        //~| WARN this is accepted in the current edition\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "d6620f45f62705d371b1c9b65009a534c18aab60", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,20 +9,20 @@ extern crate or_pattern;\n \n macro_rules! foo { ($x:pat | $y:pat) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n         //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-        //~| WARN this was previously accepted\n+        //~| WARN this is accepted in the current edition\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "a48c926315403fb37a97c7d1efd9df94fd5f0600", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(or_patterns_back_compat)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -18,7 +18,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n    |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -27,7 +27,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n    |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -36,7 +36,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n    |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: aborting due to 4 previous errors"}, {"sha": "0a6e26acfc77f2d21c6740f68ae8d1af0be5f83d", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -4,4 +4,4 @@ type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n //~| WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is accepted in the current edition"}, {"sha": "dce03e1a9635cf5e66b0f937fafdbda442503de8", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,7 +11,7 @@ LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "e68ee747cfdb5bbbbe3585f6973c3c033fa40b48", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -14,10 +14,10 @@ mac!('a);\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "c10037d44e30d9f92b30431fb0dbb6b7e182efdd", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -34,7 +34,7 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -43,7 +43,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "663739f235a438340521d585fb98219411ec008a", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "caca84f695d76d67a52890939974fb867e0bad78", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,7 +11,7 @@ LL |     m!('static);\n    |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "2e5a991543ff93341909f2b9306e81498af88d37", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -41,30 +41,30 @@ fn inclusive_from_to() {\n fn inclusive2_from_to() {\n     if let 0...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let 0...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let X...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let X...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR `...` range patterns are deprecated\n     if let X... .0 = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }\n \n fn exclusive_from() {\n@@ -137,7 +137,7 @@ fn with_macro_expr_var() {\n             let $e1..$e2;\n             let $e1...$e2;\n             //~^ ERROR `...` range patterns are deprecated\n-            //~| WARN this was previously accepted by the compiler\n+            //~| WARN this is accepted in the current edition\n             let $e1..=$e2;\n         }\n     }"}, {"sha": "2d8088432a257a1890965432224e7851eb9fe537", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -204,7 +204,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -213,7 +213,7 @@ error: `...` range patterns are deprecated\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -222,7 +222,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -231,7 +231,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -240,7 +240,7 @@ error: `...` range patterns are deprecated\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -249,7 +249,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -258,7 +258,7 @@ error: `...` range patterns are deprecated\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -267,7 +267,7 @@ error: `...` range patterns are deprecated\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -279,7 +279,7 @@ LL |             let $e1...$e2;\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "438034bc38aa45d38e1d85468df92f61b62d57e1", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,15 +9,15 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "9bfc4943fe9414c3338a82c66e522f357d885456", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -23,7 +23,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -32,7 +32,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -41,7 +41,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object"}, {"sha": "8a4b8fc38e37a5c6df74149648a03d4f54ec4edb", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &(0..=9) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &(10 ..=15) => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "b294e436fa65457fa5364c405188a212976921cf", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "3330ced1ebf341aeebb65ee6b145b741de95542a", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "bede9c579766fea4541fc490d00a612b8c9c6e9e", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         // FIXME: can we add suggestions like `&(0..=9)`?\n         box 0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "90a4aa68222f64f16a58bd56e3f3d335d2eae893", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "8efcfbb7074240c12a247b7bd77811c9d2ea5cc0", "filename": "src/test/ui/rust-2018/async-ident-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,5 +7,5 @@\n \n fn main() {\n     let async = 3; //~ ERROR: is a keyword\n-    //~^ WARN previously accepted\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "5b63eab8e466dcff64911874b21627728506680d", "filename": "src/test/ui/rust-2018/async-ident-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(keyword_idents)]` implied by `#[deny(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "f4ae518c71d2727fdd2a5003c84c02b483868cc5", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn r#async() {} //~ ERROR async\n-//~^ WARN hard error in the 2018 edition\n+//~^ WARN this is accepted in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($r#async:expr, r#async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n foo!(r#async);\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait r#async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     struct MyStruct;\n     impl r#async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_static {\n     static r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_const {\n     const r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n struct Foo;\n impl Foo { fn r#async() {} }\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n \n fn main() {\n     struct r#async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     let r#async: r#async = r#async {};\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn r#async() {})\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (r#async) => (1)\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "79c73dafac7a3391f33f9a0261385fafef38eee0", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn async() {} //~ ERROR async\n-//~^ WARN hard error in the 2018 edition\n+//~^ WARN this is accepted in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($async:expr, async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n foo!(async);\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     struct MyStruct;\n     impl async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_static {\n     static async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_const {\n     const async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n struct Foo;\n impl Foo { fn async() {} }\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n \n fn main() {\n     struct async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     let async: async = async {};\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn async() {})\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (async) => (1)\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "6396e9deee228e945e6bd3723a8eeeea45a693e8", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `async` is a keyword in the 2018 edition\n LL | foo!(async);\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     trait async {}\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     impl async for MyStruct {}\n    |          ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     static async: u32 = 0;\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     const async: u32 = 0;\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `async` is a keyword in the 2018 edition\n LL | impl Foo { fn async() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     struct async {}\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |         ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                        ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     () => (pub fn async() {})\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -135,7 +135,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     (async) => (1)\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 15 previous errors"}, {"sha": "044824cbbd3677fd89f0c93bda3faac47b888785", "filename": "src/test/ui/rust-2018/dyn-keyword.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let r#dyn = (); //~ ERROR dyn\n-    //~^ WARN hard error in the 2018 edition\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "5989cfa1c799a7a192431656cc971c0633bd583d", "filename": "src/test/ui/rust-2018/dyn-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let dyn = (); //~ ERROR dyn\n-    //~^ WARN hard error in the 2018 edition\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "699242f2dcb01a0da333399ba6ee63a7e32459a0", "filename": "src/test/ui/rust-2018/dyn-keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "37847a98ac7826cb000583abd06614dafd0ae42d", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,20 +8,19 @@ mod foo {\n         type Bar;\n     }\n \n-    crate struct Baz { }\n+    crate struct Baz {}\n \n     impl Foo for Baz {\n         type Bar = ();\n     }\n }\n \n-\n fn main() {\n     let _: <foo::Baz as crate::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is accepted in the current edition\n \n     let _: <crate::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is accepted in the current edition\n }"}, {"sha": "36efa14601d184532556cc821a5501a1a7d11ae0", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -8,20 +8,19 @@ mod foo {\n         type Bar;\n     }\n \n-    crate struct Baz { }\n+    crate struct Baz {}\n \n     impl Foo for Baz {\n         type Bar = ();\n     }\n }\n \n-\n fn main() {\n     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is accepted in the current edition\n \n     let _: <::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is accepted in the current edition\n }"}, {"sha": "6f529fa9114bc76b4521bde195b6084a77d7117d", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -1,5 +1,5 @@\n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-fully-qualified-paths.rs:20:25\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:19:25\n    |\n LL |     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n    |                         ^^^^^^^^^^ help: use `crate`: `crate::foo::Foo`\n@@ -9,16 +9,16 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-fully-qualified-paths.rs:24:13\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:23:13\n    |\n LL |     let _: <::foo::Baz as foo::Foo>::Bar = ();\n    |             ^^^^^^^^^^ help: use `crate`: `crate::foo::Baz`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "03d15cea280f6bf84c342526754730bf69e08231", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use crate::foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "d898daaba59cafad7a23fd810284b4ada2e56358", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n use foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n use foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "54a4fed5cf9b8293d14f17a8aec5e52785899bbf", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{XX, baz::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -27,7 +27,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{baz::{}, baz1::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 3 previous errors"}, {"sha": "7c6e4a71a37e356fd4aaf69d00097a6ee2964fb0", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@\n \n use crate::foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this was previously accepted\n+//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use crate::foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this was previously accepted\n+        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "3925f76391ab81895802c22a72fecbdde7fe659d", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@\n \n use foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this was previously accepted\n+//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this was previously accepted\n+        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "c2f91e342f56a7f5417333add6cff71920026bed", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |         use foo::{self as x, c};\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "f91405929ee115e4cc7852f5d33501179c9f92c8", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,30 +11,29 @@ pub mod foo {\n     use edition_lint_paths;\n     use crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use crate::bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n-    use crate::{bar as something_else};\n+    //~| WARN this is accepted in the current edition\n+    use crate::bar as something_else;\n \n-    use crate::{Bar as SomethingElse, main};\n+    use crate::{main, Bar as SomethingElse};\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n \n-    use crate::{Bar as SomethingElse2, main as another_main};\n+    use crate::{main as another_main, Bar as SomethingElse2};\n \n-    pub fn test() {\n-    }\n+    pub fn test() {}\n \n-    pub trait SomeTrait { }\n+    pub trait SomeTrait {}\n }\n \n use crate::bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +45,17 @@ pub mod bar {\n mod baz {\n     use crate::*;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n }\n \n-impl crate::foo::SomeTrait for u32 { }\n+impl crate::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "52c97c7a25393e7b3061b7a056930c495af367c7", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,32 +9,31 @@ extern crate edition_lint_paths;\n \n pub mod foo {\n     use edition_lint_paths;\n-    use ::bar::Bar;\n+    use bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n-    use crate::{bar as something_else};\n+    //~| WARN this is accepted in the current edition\n+    use crate::bar as something_else;\n \n-    use {Bar as SomethingElse, main};\n+    use {main, Bar as SomethingElse};\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n \n-    use crate::{Bar as SomethingElse2, main as another_main};\n+    use crate::{main as another_main, Bar as SomethingElse2};\n \n-    pub fn test() {\n-    }\n+    pub fn test() {}\n \n-    pub trait SomeTrait { }\n+    pub trait SomeTrait {}\n }\n \n use bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +45,17 @@ pub mod bar {\n mod baz {\n     use *;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n }\n \n-impl ::foo::SomeTrait for u32 { }\n+impl ::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = ::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is accepted in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "23deeda14a4d0d7a266e66e19ea28225e129a622", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -1,15 +1,15 @@\n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n   --> $DIR/edition-lint-paths.rs:12:9\n    |\n-LL |     use ::bar::Bar;\n-   |         ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n+LL |     use bar::Bar;\n+   |         ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n note: the lint level is defined here\n   --> $DIR/edition-lint-paths.rs:5:9\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,52 +18,52 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     use bar;\n    |         ^^^ help: use `crate`: `crate::bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n   --> $DIR/edition-lint-paths.rs:23:9\n    |\n-LL |     use {Bar as SomethingElse, main};\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{Bar as SomethingElse, main}`\n+LL |     use {main, Bar as SomethingElse};\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{main, Bar as SomethingElse}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:35:5\n+  --> $DIR/edition-lint-paths.rs:34:5\n    |\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:47:9\n+  --> $DIR/edition-lint-paths.rs:46:9\n    |\n LL |     use *;\n    |         ^ help: use `crate`: `crate::*`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:52:6\n+  --> $DIR/edition-lint-paths.rs:51:6\n    |\n-LL | impl ::foo::SomeTrait for u32 { }\n+LL | impl ::foo::SomeTrait for u32 {}\n    |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:57:13\n+  --> $DIR/edition-lint-paths.rs:56:13\n    |\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 7 previous errors"}, {"sha": "ea832ef3e7d70b52387367238f5eef453ef73303", "filename": "src/test/ui/rust-2018/extern-crate-rename.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use crate::my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "b1f617dd8847844b6f74eb4509ab1b5d2b0efb20", "filename": "src/test/ui/rust-2018/extern-crate-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "4bccbc51223f3b5c9ca2fb809d433ff8e920a162", "filename": "src/test/ui/rust-2018/extern-crate-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "9b0b0dd8ee1d43f810691719bb340c9b3da11f37", "filename": "src/test/ui/rust-2018/extern-crate-submod.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use crate::m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "dfce9128c51148494f86cd73af5fc9506ee0f42b", "filename": "src/test/ui/rust-2018/extern-crate-submod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "3c75319aedaedfc320dc904d13bab8f1528ec851", "filename": "src/test/ui/rust-2018/extern-crate-submod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "985348665c9081c7fc6390d3d3d66148d32701b1", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     r#try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn r#try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "2c02b75960ec7ec9d8a40f9e5338f2dac3de1aae", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "3d93b433cf28047340224f3367b0d923272a0100", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: `try` is a keyword in the 2018 edition\n@@ -19,7 +19,7 @@ warning: `try` is a keyword in the 2018 edition\n LL | fn try() {\n    |    ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 2 warnings emitted"}, {"sha": "3308870f654c97d1192f9090d3a54e55767120dd", "filename": "src/test/ui/rust-2018/try-macro.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,8 +11,8 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     r#try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this was previously accepted\n+    //~| WARNING this is accepted in the current edition\n     Ok(44)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "69e87a1ff621cc3414f06587e215285b3504224e", "filename": "src/test/ui/rust-2018/try-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -11,8 +11,8 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this was previously accepted\n+    //~| WARNING this is accepted in the current edition\n     Ok(44)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f315b4d4a9eb9eb274f05926342f6a213c4cb4c9", "filename": "src/test/ui/rust-2018/try-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "725d5aa234eee982217c97c418a9030163c47e75", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -26,7 +26,7 @@ mod a {\n         // In this case, we can just use `TryIntoU32`\n         let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -39,7 +39,7 @@ mod b {\n         // the path `crate::m::TryIntoU32` (with which it was imported).\n         let _: u32 = crate::m::TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -52,7 +52,7 @@ mod c {\n         // the path `super::m::TryIntoU32` (with which it was imported).\n         let _: u32 = super::m::TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "6ca9a919f3cd7fca56755c1bce712ed346d927d2", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -26,7 +26,7 @@ mod a {\n         // In this case, we can just use `TryIntoU32`\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -39,7 +39,7 @@ mod b {\n         // the path `crate::m::TryIntoU32` (with which it was imported).\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -52,7 +52,7 @@ mod c {\n         // the path `super::m::TryIntoU32` (with which it was imported).\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "8889485c9172996103abc316a3513654841a2112", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n@@ -18,7 +18,7 @@ warning: trait method `try_into` will become ambiguous in Rust 2021\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `crate::m::TryIntoU32::try_into(3u8)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n@@ -27,7 +27,7 @@ warning: trait method `try_into` will become ambiguous in Rust 2021\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `super::m::TryIntoU32::try_into(3u8)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 3 warnings emitted"}, {"sha": "4bcbe6b094afdb40244b5b4befd694ec5dbe4f38", "filename": "src/test/ui/rust-2021/future-prelude-collision.fixed", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -38,12 +38,14 @@ impl TryIntoU32 for *const u16 {\n \n trait FromByteIterator {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>;\n+    where\n+        T: Iterator<Item = u8>;\n }\n \n impl FromByteIterator for Vec<u8> {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>\n+    where\n+        T: Iterator<Item = u8>,\n     {\n         iter.collect()\n     }\n@@ -53,44 +55,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test associated function call that will break in 2021 edition\n     let _ = <u32 as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test reverse turbofish too\n     let _ = <Vec<u8> as FromByteIterator>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_ as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoderef\n     let _: u32 = TryIntoU32::try_into(*(&3u8)).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoref\n     let _: u32 = TryIntoU32::try_into(&3.0).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = TryIntoU32::try_into(mut_ptr as *const _).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     type U32Alias = u32;\n     let _ = <U32Alias as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "bc23a8a92a6b5f00229ca19ab7a50e55aa696b90", "filename": "src/test/ui/rust-2021/future-prelude-collision.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -38,12 +38,14 @@ impl TryIntoU32 for *const u16 {\n \n trait FromByteIterator {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>;\n+    where\n+        T: Iterator<Item = u8>;\n }\n \n impl FromByteIterator for Vec<u8> {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>\n+    where\n+        T: Iterator<Item = u8>,\n     {\n         iter.collect()\n     }\n@@ -53,44 +55,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = 3u8.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test associated function call that will break in 2021 edition\n     let _ = u32::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test reverse turbofish too\n     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoderef\n     let _: u32 = (&3u8).try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoref\n     let _: u32 = 3.0.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = mut_ptr.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     type U32Alias = u32;\n     let _ = U32Alias::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "e167468ab19719e13158fcc6c3e129a7a4c0527e", "filename": "src/test/ui/rust-2021/future-prelude-collision.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -1,5 +1,5 @@\n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:54:18\n+  --> $DIR/future-prelude-collision.rs:56:18\n    |\n LL |     let _: u32 = 3u8.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`\n@@ -9,70 +9,70 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:59:13\n+  --> $DIR/future-prelude-collision.rs:61:13\n    |\n LL |     let _ = u32::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:64:13\n+  --> $DIR/future-prelude-collision.rs:66:13\n    |\n LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n    |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:72:18\n+  --> $DIR/future-prelude-collision.rs:74:18\n    |\n LL |     let _: u32 = <_>::try_from(3u8).unwrap();\n    |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:77:18\n+  --> $DIR/future-prelude-collision.rs:79:18\n    |\n LL |     let _: u32 = (&3u8).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(*(&3u8))`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:82:18\n+  --> $DIR/future-prelude-collision.rs:84:18\n    |\n LL |     let _: u32 = 3.0.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(&3.0)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:88:18\n+  --> $DIR/future-prelude-collision.rs:90:18\n    |\n LL |     let _: u32 = mut_ptr.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:93:13\n+  --> $DIR/future-prelude-collision.rs:95:13\n    |\n LL |     let _ = U32Alias::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 8 warnings emitted"}, {"sha": "d1a085f23a01c9ede8629dae15366309c8e74cc4", "filename": "src/test/ui/rust-2021/generic-type-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -14,5 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32> as MyTrait<_>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "5069fba396ec6b4a638bb8d628eb43133a9e454f", "filename": "src/test/ui/rust-2021/generic-type-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -14,5 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "05591c3d4487d86d00947f49408bb70e246e5eee", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 1 warning emitted"}, {"sha": "cf6287a758f9134a86b17b1ca5f715369f1fe2d8", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -40,7 +40,7 @@ mod inner {\n     pub fn test() -> u32 {\n         (&*get_dyn_trait()).try_into().unwrap()\n         //~^ WARNING trait method `try_into` will become ambiguous\n-        //~| WARNING this was previously accepted\n+        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "0349ad5b6415af05c9e106a91ac492d543646514", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -40,7 +40,7 @@ mod inner {\n     pub fn test() -> u32 {\n         get_dyn_trait().try_into().unwrap()\n         //~^ WARNING trait method `try_into` will become ambiguous\n-        //~| WARNING this was previously accepted\n+        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "9e95419715e319843eda97f4b955ec74db73c95f", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 1 warning emitted"}, {"sha": "d31ed01b1916be31cb3d3fbaedd596581472277e", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -17,11 +17,11 @@ pub struct Qux<T>(T);\n #[dom_struct]\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "6282a693855af778e1f86fb0ef67f14a37eb034f", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 2 previous errors"}, {"sha": "daf18c6702e4695066197af2257326425389af72", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n fn foo(_x: Foo + Send) {\n     //~^ ERROR the size for values of type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "e65b8989e0b1ec47f1c5e9517db88551e8af54e5", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time"}, {"sha": "8b2c318acf84e108982231e08c281889057757ba", "filename": "src/tools/clippy/tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "patch": "@@ -5,7 +5,7 @@ LL |     for<'a> Dst<A + 'a>: Sized,\n    |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n    |\n    = note: `-D bare-trait-objects` implied by `-D warnings`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -14,7 +14,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                ^ help: use `dyn`: `dyn A`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -23,7 +23,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                                                         ^ help: use `dyn`: `dyn A`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors"}]}