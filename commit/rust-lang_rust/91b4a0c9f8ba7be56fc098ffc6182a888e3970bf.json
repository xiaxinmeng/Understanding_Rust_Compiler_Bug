{"sha": "91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjRhMGM5ZjhiYTdiZTU2ZmMwOThmZmM2MTgyYTg4OGUzOTcwYmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T07:26:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T07:26:19Z"}, "message": "Add beginnings of a fuzzer to rustboot.", "tree": {"sha": "4e56c4dc3626d03026dd32c2079d9afad8140832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e56c4dc3626d03026dd32c2079d9afad8140832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "html_url": "https://github.com/rust-lang/rust/commit/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1a765c6f635c7cf9d39a46f42c93a2cbbf1982", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1a765c6f635c7cf9d39a46f42c93a2cbbf1982", "html_url": "https://github.com/rust-lang/rust/commit/cd1a765c6f635c7cf9d39a46f42c93a2cbbf1982"}], "stats": {"total": 179, "additions": 178, "deletions": 1}, "files": [{"sha": "ba5215baa30c6b269bafa1381b66ba989c5a2d2c", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "patch": "@@ -236,7 +236,7 @@ ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml \\\n             type.ml dead.ml effect.ml typestate.ml loop.ml layout.ml  \\\n             transutil.ml trans.ml dwarf.ml)\n FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml pexp.ml \\\n-            item.ml cexp.ml)\n+            item.ml cexp.ml fuzz.ml)\n DRIVER_TOP_MLS := $(addprefix boot/driver/, lib.ml $(VARIANT)/glue.ml main.ml)\n \n BOOT_MLS := $(UTIL_BOT_MLS) $(DRIVER_BOT_MLS) $(FE_MLS) $(IL_MLS) $(ME_MLS) \\"}, {"sha": "32c70be69eeebe4f68ac760ed17a6a6c54a9b6d1", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "patch": "@@ -60,6 +60,7 @@ let (sess:Session.sess) =\n     Session.sess_report_gc = false;\n     Session.sess_report_deps = false;\n     Session.sess_next_crate_id = 0;\n+    Session.sess_fuzz_item_count = 5;\n     Session.sess_timings = Hashtbl.create 0;\n     Session.sess_lib_dirs = Queue.create ();\n     Session.sess_crate_meta = Hashtbl.create 0;\n@@ -219,6 +220,15 @@ let argspecs =\n     (flag (fun _ -> sess.Session.sess_use_pexps <- true)\n        \"-pexp\"         \"use pexp portion of AST\");\n \n+    (\"-zc\", Arg.Int (fun i -> sess.Session.sess_fuzz_item_count <- i),\n+     \"count of items to generate when fuzzing\");\n+\n+    (\"-zs\", Arg.Int (fun i -> Fuzz.fuzz (Some i) sess),\n+     \"run fuzzer with given seed\");\n+\n+    (flag (fun _ -> Fuzz.fuzz None sess)\n+       \"-z\" \"run fuzzer with random seed\")\n+\n   ] @ (Glue.alt_argspecs sess)\n ;;\n "}, {"sha": "beb551bb81814f852702c460e3738b7032c0d43c", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "patch": "@@ -45,6 +45,7 @@ type sess =\n   mutable sess_report_gc: bool;\n   mutable sess_report_deps: bool;\n   mutable sess_next_crate_id: int;\n+  mutable sess_fuzz_item_count: int;\n   sess_timings: (string, float) Hashtbl.t;\n   sess_spans: (node_id,span) Hashtbl.t;\n   sess_lib_dirs: filename Queue.t;"}, {"sha": "47a708dcebd75a2a2351be81aeeb3d0d9e2dc328", "filename": "src/boot/fe/fuzz.ml", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Ffe%2Ffuzz.ml", "raw_url": "https://github.com/rust-lang/rust/raw/91b4a0c9f8ba7be56fc098ffc6182a888e3970bf/src%2Fboot%2Ffe%2Ffuzz.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ffuzz.ml?ref=91b4a0c9f8ba7be56fc098ffc6182a888e3970bf", "patch": "@@ -0,0 +1,166 @@\n+open Common;;\n+open Ast;;\n+\n+let ident_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\";;\n+let digit_chars = \"1234567890\";;\n+\n+type scope =\n+    SCOPE_crate of crate\n+  | SCOPE_mod_item of (ident * mod_item)\n+  | SCOPE_block of block\n+  | SCOPE_anon\n+;;\n+\n+type ctxt =\n+    {\n+      ctxt_scopes: scope Stack.t;\n+      ctxt_node_counter: int ref;\n+      ctxt_sess: Session.sess;\n+    }\n+\n+let generate_ident _ : ident =\n+  let char n =\n+    if n = 0\n+    then '_'\n+    else ident_chars.[Random.int (String.length ident_chars)]\n+  in\n+  let i = 3 + (Random.int 10) in\n+  let s = String.create i in\n+    for j = 0 to (i-1)\n+    do\n+      s.[j] <- char j\n+    done;\n+    s\n+;;\n+\n+let wrap (n:'a) (cx:ctxt) : 'a identified =\n+  incr cx.ctxt_node_counter;\n+  { node = n; id = Node (!(cx.ctxt_node_counter)) }\n+;;\n+\n+let generate_in (scope:scope) (fn:(ctxt -> 'a)) (cx:ctxt) : 'a =\n+  Stack.push scope cx.ctxt_scopes;\n+  let x = fn cx in\n+    ignore (Stack.pop cx.ctxt_scopes);\n+    x\n+;;\n+\n+let generate_some (fn:(ctxt -> 'a)) (cx:ctxt) : 'a array =\n+  let root_count = cx.ctxt_sess.Session.sess_fuzz_item_count in\n+  let depth = Stack.length cx.ctxt_scopes in\n+  if depth >= root_count\n+  then [| |]\n+  else\n+    Array.init (1 + (Random.int (root_count - depth)))\n+      (fun _ -> fn cx)\n+;;\n+\n+let rec generate_ty (cx:ctxt) : ty =\n+  let subty _ =\n+    generate_in SCOPE_anon\n+      generate_ty cx\n+  in\n+    match Random.int (if Random.bool() then 10 else 17) with\n+      0 -> TY_nil\n+    | 1 -> TY_bool\n+\n+    | 2 -> TY_mach TY_u8\n+    | 3 -> TY_mach TY_u32\n+\n+    | 4 -> TY_mach TY_i8\n+    | 5 -> TY_mach TY_i32\n+\n+    | 6 -> TY_int\n+    | 7 -> TY_uint\n+    | 8 -> TY_char\n+    | 9 -> TY_str\n+\n+    | 10 -> TY_tup (generate_in SCOPE_anon\n+                      (generate_some\n+                         generate_ty) cx)\n+    | 11 -> TY_vec (subty())\n+    | 12 ->\n+        let generate_elt cx =\n+          (generate_ident cx, generate_ty cx)\n+        in\n+          TY_rec (generate_in SCOPE_anon\n+                    (generate_some generate_elt) cx)\n+\n+    | 13 -> TY_chan (subty())\n+    | 14 -> TY_port (subty())\n+\n+    | 15 -> TY_task\n+\n+    | _ -> TY_box (subty())\n+;;\n+\n+\n+let rec generate_mod_item (mis:mod_items) (cx:ctxt) : unit =\n+  let ident = generate_ident () in\n+  let decl i = wrap { decl_item = i;\n+                      decl_params = [| |] } cx\n+  in\n+  let item =\n+    match Random.int 2 with\n+        0 ->\n+          let ty = generate_ty cx in\n+          let eff = PURE in\n+            decl (MOD_ITEM_type (eff, ty))\n+      | _ ->\n+          let mis' = Hashtbl.create 0 in\n+          let view = { view_imports = Hashtbl.create 0;\n+                       view_exports = Hashtbl.create 0; }\n+          in\n+          let item =\n+            decl (MOD_ITEM_mod (view, mis'))\n+          in\n+          let scope =\n+            SCOPE_mod_item (ident, item)\n+          in\n+            ignore\n+              (generate_in scope\n+                 (generate_some (generate_mod_item mis'))\n+                 cx);\n+            item\n+  in\n+    Hashtbl.add mis ident item\n+;;\n+\n+let fuzz (seed:int option) (sess:Session.sess) : unit =\n+  begin\n+    match seed with\n+        None -> Random.self_init ()\n+      | Some s -> Random.init s\n+  end;\n+  let filename =\n+    match sess.Session.sess_out with\n+        Some o -> o\n+      | None ->\n+          match seed with\n+              None -> \"fuzz.rs\"\n+            | Some seed -> \"fuzz-\" ^ (string_of_int seed) ^ \".rs\"\n+  in\n+  let out = open_out_bin filename in\n+  let ff = Format.formatter_of_out_channel out in\n+  let cx = { ctxt_scopes = Stack.create ();\n+             ctxt_node_counter = ref 0;\n+             ctxt_sess = sess }\n+  in\n+  let mis = Hashtbl.create 0 in\n+    ignore (generate_some\n+              (generate_mod_item mis) cx);\n+    fmt_mod_items ff mis;\n+    Format.pp_print_flush ff ();\n+    close_out out;\n+    exit 0\n+;;\n+\n+\n+(*\n+ * Local Variables:\n+ * fill-column: 78;\n+ * indent-tabs-mode: nil\n+ * buffer-file-coding-system: utf-8-unix\n+ * compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+ * End:\n+ *)"}]}