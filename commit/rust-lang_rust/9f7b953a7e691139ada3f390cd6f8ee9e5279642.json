{"sha": "9f7b953a7e691139ada3f390cd6f8ee9e5279642", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmN2I5NTNhN2U2OTExMzlhZGEzZjM5MGNkNmY4ZWU5ZTUyNzk2NDI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-01T23:07:28Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-02T20:52:43Z"}, "message": "Remove root_local fn in favor of base_local", "tree": {"sha": "db042ace02c5dc6d4de28b1530475250ecd1b8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db042ace02c5dc6d4de28b1530475250ecd1b8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7b953a7e691139ada3f390cd6f8ee9e5279642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7b953a7e691139ada3f390cd6f8ee9e5279642", "html_url": "https://github.com/rust-lang/rust/commit/9f7b953a7e691139ada3f390cd6f8ee9e5279642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7b953a7e691139ada3f390cd6f8ee9e5279642/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f4914ccbb6915a150a5e57a8dab12d5afc4d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f4914ccbb6915a150a5e57a8dab12d5afc4d8c", "html_url": "https://github.com/rust-lang/rust/commit/a0f4914ccbb6915a150a5e57a8dab12d5afc4d8c"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "5ced497baa1fdf9f3938e620a4d5eea93988dbd8", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7b953a7e691139ada3f390cd6f8ee9e5279642/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7b953a7e691139ada3f390cd6f8ee9e5279642/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=9f7b953a7e691139ada3f390cd6f8ee9e5279642", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n             self.insert_as_pending_if_two_phase(location, &assigned_place, kind, idx);\n \n-            if let Some(local) = borrowed_place.root_local() {\n+            if let Some(local) = borrowed_place.base_local() {\n                 self.local_map.entry(local).or_default().insert(idx);\n             }\n         }"}, {"sha": "cf9a6165d71a249159c6e28d500523f0cd5eb7ad", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f7b953a7e691139ada3f390cd6f8ee9e5279642/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7b953a7e691139ada3f390cd6f8ee9e5279642/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=9f7b953a7e691139ada3f390cd6f8ee9e5279642", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::mir::ProjectionElem;\n-use rustc::mir::{Local, Mir, Place, PlaceBase, Mutability, Static, StaticKind};\n+use rustc::mir::{Mir, Place, PlaceBase, Mutability, Static, StaticKind};\n use rustc::ty::{self, TyCtxt};\n use crate::borrow_check::borrow_set::LocalsStateAtExit;\n \n@@ -16,10 +16,6 @@ crate trait PlaceExt<'tcx> {\n         mir: &Mir<'tcx>,\n         locals_state_at_exit: &LocalsStateAtExit,\n         ) -> bool;\n-\n-    /// If this is a place like `x.f.g`, returns the local\n-    /// `x`. Returns `None` if this is based in a static.\n-    fn root_local(&self) -> Option<Local>;\n }\n \n impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n@@ -82,15 +78,4 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n             },\n         }\n     }\n-\n-    fn root_local(&self) -> Option<Local> {\n-        let mut p = self;\n-        loop {\n-            match p {\n-                Place::Projection(pi) => p = &pi.base,\n-                Place::Base(PlaceBase::Static(_)) => return None,\n-                Place::Base(PlaceBase::Local(l)) => return Some(*l),\n-            }\n-        }\n-    }\n }"}]}