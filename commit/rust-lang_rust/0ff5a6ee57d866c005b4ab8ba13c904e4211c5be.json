{"sha": "0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "node_id": "C_kwDOAAsO6NoAKDBmZjVhNmVlNTdkODY2YzAwNWI0YWI4YmExM2M5MDRlNDIxMWM1YmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-05T21:47:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-05T21:47:59Z"}, "message": "Rollup merge of #112316 - clubby789:unused-parens-space, r=compiler-errors\n\nEnsure space is inserted after keyword in `unused_delims`\n\nFixes #112276", "tree": {"sha": "09daa10d7673c3288e11829c5e222f0837cad74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09daa10d7673c3288e11829c5e222f0837cad74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkflgPCRBK7hj4Ov3rIwAAk0QIAJ4bsQIA7plgyqxHarwI+fI0\nWwTOnc7j4WBCHXjpnhi09AZRQMeqlqHBqdn17GYNtJGVIivViTerDp3rDxLAjz/+\nBDt/y35NBvilW7oLuBZOjII0hROcgfcGVX4OJBlr5m9gKufTPYEMb1U4vdZFQ862\nB8le1rUuYXNVk59mp8TKz9t7Mk5ug3a3t5SGW5UCpdeTJz5G5CSMdibS8LhesJ3q\nNnhhcWREGllua5fMctYUbmP+w0hyBuvyQEW18P6AYqL9sC/KmV+avWiyNgbqAqPP\npwEcrdwu5/U9ms+o7I7BRrAX1d5LuIXM1uZFBn9FeVLUjBvsE0IWDKt6Ylq3Ou8=\n=QHwT\n-----END PGP SIGNATURE-----\n", "payload": "tree 09daa10d7673c3288e11829c5e222f0837cad74a\nparent ff43249b0efd274322cbd53441ff15fcdb7096ba\nparent 1fa769234e8345a1bcc687d31104b458b2be81d7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686001679 +0200\ncommitter GitHub <noreply@github.com> 1686001679 +0200\n\nRollup merge of #112316 - clubby789:unused-parens-space, r=compiler-errors\n\nEnsure space is inserted after keyword in `unused_delims`\n\nFixes #112276\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "html_url": "https://github.com/rust-lang/rust/commit/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff43249b0efd274322cbd53441ff15fcdb7096ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff43249b0efd274322cbd53441ff15fcdb7096ba", "html_url": "https://github.com/rust-lang/rust/commit/ff43249b0efd274322cbd53441ff15fcdb7096ba"}, {"sha": "1fa769234e8345a1bcc687d31104b458b2be81d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa769234e8345a1bcc687d31104b458b2be81d7", "html_url": "https://github.com/rust-lang/rust/commit/1fa769234e8345a1bcc687d31104b458b2be81d7"}], "stats": {"total": 161, "additions": 131, "deletions": 30}, "files": [{"sha": "04df23c736b0dfe2ce50e94a7ab43c75381c7da7", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "patch": "@@ -556,6 +556,7 @@ trait UnusedDelimLint {\n         followed_by_block: bool,\n         left_pos: Option<BytePos>,\n         right_pos: Option<BytePos>,\n+        is_kw: bool,\n     );\n \n     fn is_expr_delims_necessary(\n@@ -624,6 +625,7 @@ trait UnusedDelimLint {\n         ctx: UnusedDelimsCtx,\n         left_pos: Option<BytePos>,\n         right_pos: Option<BytePos>,\n+        is_kw: bool,\n     ) {\n         // If `value` has `ExprKind::Err`, unused delim lint can be broken.\n         // For example, the following code caused ICE.\n@@ -667,7 +669,7 @@ trait UnusedDelimLint {\n             left_pos.is_some_and(|s| s >= value.span.lo()),\n             right_pos.is_some_and(|s| s <= value.span.hi()),\n         );\n-        self.emit_unused_delims(cx, value.span, spans, ctx.into(), keep_space);\n+        self.emit_unused_delims(cx, value.span, spans, ctx.into(), keep_space, is_kw);\n     }\n \n     fn emit_unused_delims(\n@@ -677,6 +679,7 @@ trait UnusedDelimLint {\n         spans: Option<(Span, Span)>,\n         msg: &str,\n         keep_space: (bool, bool),\n+        is_kw: bool,\n     ) {\n         let primary_span = if let Some((lo, hi)) = spans {\n             if hi.is_empty() {\n@@ -690,7 +693,7 @@ trait UnusedDelimLint {\n         let suggestion = spans.map(|(lo, hi)| {\n             let sm = cx.sess().source_map();\n             let lo_replace =\n-                    if keep_space.0 &&\n+                    if (keep_space.0 || is_kw) &&\n                         let Ok(snip) = sm.span_to_prev_source(lo) && !snip.ends_with(' ') {\n                         \" \"\n                         } else {\n@@ -720,15 +723,15 @@ trait UnusedDelimLint {\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use rustc_ast::ExprKind::*;\n-        let (value, ctx, followed_by_block, left_pos, right_pos) = match e.kind {\n+        let (value, ctx, followed_by_block, left_pos, right_pos, is_kw) = match e.kind {\n             // Do not lint `unused_braces` in `if let` expressions.\n             If(ref cond, ref block, _)\n                 if !matches!(cond.kind, Let(_, _, _))\n                     || Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX =>\n             {\n                 let left = e.span.lo() + rustc_span::BytePos(2);\n                 let right = block.span.lo();\n-                (cond, UnusedDelimsCtx::IfCond, true, Some(left), Some(right))\n+                (cond, UnusedDelimsCtx::IfCond, true, Some(left), Some(right), true)\n             }\n \n             // Do not lint `unused_braces` in `while let` expressions.\n@@ -738,27 +741,27 @@ trait UnusedDelimLint {\n             {\n                 let left = e.span.lo() + rustc_span::BytePos(5);\n                 let right = block.span.lo();\n-                (cond, UnusedDelimsCtx::WhileCond, true, Some(left), Some(right))\n+                (cond, UnusedDelimsCtx::WhileCond, true, Some(left), Some(right), true)\n             }\n \n             ForLoop(_, ref cond, ref block, ..) => {\n-                (cond, UnusedDelimsCtx::ForIterExpr, true, None, Some(block.span.lo()))\n+                (cond, UnusedDelimsCtx::ForIterExpr, true, None, Some(block.span.lo()), true)\n             }\n \n             Match(ref head, _) if Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX => {\n                 let left = e.span.lo() + rustc_span::BytePos(5);\n-                (head, UnusedDelimsCtx::MatchScrutineeExpr, true, Some(left), None)\n+                (head, UnusedDelimsCtx::MatchScrutineeExpr, true, Some(left), None, true)\n             }\n \n             Ret(Some(ref value)) => {\n                 let left = e.span.lo() + rustc_span::BytePos(3);\n-                (value, UnusedDelimsCtx::ReturnValue, false, Some(left), None)\n+                (value, UnusedDelimsCtx::ReturnValue, false, Some(left), None, true)\n             }\n \n-            Index(_, ref value) => (value, UnusedDelimsCtx::IndexExpr, false, None, None),\n+            Index(_, ref value) => (value, UnusedDelimsCtx::IndexExpr, false, None, None, false),\n \n             Assign(_, ref value, _) | AssignOp(.., ref value) => {\n-                (value, UnusedDelimsCtx::AssignedValue, false, None, None)\n+                (value, UnusedDelimsCtx::AssignedValue, false, None, None, false)\n             }\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n@@ -778,12 +781,20 @@ trait UnusedDelimLint {\n                     return;\n                 }\n                 for arg in args_to_check {\n-                    self.check_unused_delims_expr(cx, arg, ctx, false, None, None);\n+                    self.check_unused_delims_expr(cx, arg, ctx, false, None, None, false);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_delims_expr(cx, &value, ctx, followed_by_block, left_pos, right_pos);\n+        self.check_unused_delims_expr(\n+            cx,\n+            &value,\n+            ctx,\n+            followed_by_block,\n+            left_pos,\n+            right_pos,\n+            is_kw,\n+        );\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n@@ -794,7 +805,7 @@ trait UnusedDelimLint {\n                         None => UnusedDelimsCtx::AssignedValue,\n                         Some(_) => UnusedDelimsCtx::AssignedValueLetElse,\n                     };\n-                    self.check_unused_delims_expr(cx, init, ctx, false, None, None);\n+                    self.check_unused_delims_expr(cx, init, ctx, false, None, None, false);\n                 }\n             }\n             StmtKind::Expr(ref expr) => {\n@@ -805,6 +816,7 @@ trait UnusedDelimLint {\n                     false,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n             _ => {}\n@@ -824,6 +836,7 @@ trait UnusedDelimLint {\n                 false,\n                 None,\n                 None,\n+                false,\n             );\n         }\n     }\n@@ -879,6 +892,7 @@ impl UnusedDelimLint for UnusedParens {\n         followed_by_block: bool,\n         left_pos: Option<BytePos>,\n         right_pos: Option<BytePos>,\n+        is_kw: bool,\n     ) {\n         match value.kind {\n             ast::ExprKind::Paren(ref inner) => {\n@@ -893,7 +907,7 @@ impl UnusedDelimLint for UnusedParens {\n                                 _,\n                             ) if node.lazy()))\n                 {\n-                    self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos)\n+                    self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos, is_kw)\n                 }\n             }\n             ast::ExprKind::Let(_, ref expr, _) => {\n@@ -904,6 +918,7 @@ impl UnusedDelimLint for UnusedParens {\n                     followed_by_block,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n             _ => {}\n@@ -942,7 +957,7 @@ impl UnusedParens {\n                 .span\n                 .find_ancestor_inside(value.span)\n                 .map(|inner| (value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())));\n-            self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space);\n+            self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space, false);\n         }\n     }\n }\n@@ -967,6 +982,7 @@ impl EarlyLintPass for UnusedParens {\n                     true,\n                     None,\n                     None,\n+                    true,\n                 );\n                 for stmt in &block.stmts {\n                     <Self as UnusedDelimLint>::check_stmt(self, cx, stmt);\n@@ -985,6 +1001,7 @@ impl EarlyLintPass for UnusedParens {\n                         false,\n                         None,\n                         None,\n+                        true,\n                     );\n                 }\n             }\n@@ -1043,6 +1060,7 @@ impl EarlyLintPass for UnusedParens {\n                     false,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n             ast::TyKind::Paren(r) => {\n@@ -1057,7 +1075,7 @@ impl EarlyLintPass for UnusedParens {\n                             .find_ancestor_inside(ty.span)\n                             .map(|r| (ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())));\n \n-                        self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+                        self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false), false);\n                     }\n                 }\n                 self.with_self_ty_parens = false;\n@@ -1130,6 +1148,7 @@ impl UnusedDelimLint for UnusedBraces {\n         followed_by_block: bool,\n         left_pos: Option<BytePos>,\n         right_pos: Option<BytePos>,\n+        is_kw: bool,\n     ) {\n         match value.kind {\n             ast::ExprKind::Block(ref inner, None)\n@@ -1170,7 +1189,7 @@ impl UnusedDelimLint for UnusedBraces {\n                             && !value.span.from_expansion()\n                             && !inner.span.from_expansion()\n                         {\n-                            self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos)\n+                            self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos, is_kw)\n                         }\n                     }\n                 }\n@@ -1183,6 +1202,7 @@ impl UnusedDelimLint for UnusedBraces {\n                     followed_by_block,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n             _ => {}\n@@ -1207,6 +1227,7 @@ impl EarlyLintPass for UnusedBraces {\n                 false,\n                 None,\n                 None,\n+                false,\n             );\n         }\n     }\n@@ -1220,6 +1241,7 @@ impl EarlyLintPass for UnusedBraces {\n                 false,\n                 None,\n                 None,\n+                false,\n             );\n         }\n     }\n@@ -1233,6 +1255,7 @@ impl EarlyLintPass for UnusedBraces {\n                 false,\n                 None,\n                 None,\n+                false,\n             );\n         }\n     }\n@@ -1247,6 +1270,7 @@ impl EarlyLintPass for UnusedBraces {\n                     false,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n \n@@ -1258,6 +1282,7 @@ impl EarlyLintPass for UnusedBraces {\n                     false,\n                     None,\n                     None,\n+                    false,\n                 );\n             }\n "}, {"sha": "bafac05d8daa74612acaff8fa3c93e3ad9181407", "filename": "tests/ui/lint/lint-unnecessary-parens.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-unnecessary-parens.fixed?ref=0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "patch": "@@ -35,6 +35,14 @@ pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n     panic!()\n }\n \n+pub fn parens_with_keyword(e: &[()]) -> i32 {\n+    if true {} //~ ERROR unnecessary parentheses around `if`\n+    while true {} //~ ERROR unnecessary parentheses around `while`\n+    for _ in e {} //~ ERROR unnecessary parentheses around `for`\n+    match 1 { _ => ()} //~ ERROR unnecessary parentheses around `match`\n+    return 1; //~ ERROR unnecessary parentheses around `return` value\n+}\n+\n macro_rules! baz {\n     ($($foo:expr),+) => {\n         ($($foo),*)"}, {"sha": "ce537a4dc1da0ebcd476fc5e2ccbedcb9e18ddbf", "filename": "tests/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "patch": "@@ -35,6 +35,14 @@ pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n     panic!()\n }\n \n+pub fn parens_with_keyword(e: &[()]) -> i32 {\n+    if(true) {} //~ ERROR unnecessary parentheses around `if`\n+    while(true) {} //~ ERROR unnecessary parentheses around `while`\n+    for _ in(e) {} //~ ERROR unnecessary parentheses around `for`\n+    match(1) { _ => ()} //~ ERROR unnecessary parentheses around `match`\n+    return(1); //~ ERROR unnecessary parentheses around `return` value\n+}\n+\n macro_rules! baz {\n     ($($foo:expr),+) => {\n         ($($foo),*)"}, {"sha": "2ad07530f8c8dc1d908371b095ddf6e1b68bb901", "filename": "tests/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 73, "deletions": 13, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be/tests%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "patch": "@@ -63,8 +63,68 @@ LL -     (5)\n LL +     5\n    |\n \n+error: unnecessary parentheses around `if` condition\n+  --> $DIR/lint-unnecessary-parens.rs:39:7\n+   |\n+LL |     if(true) {}\n+   |       ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if(true) {}\n+LL +     if true {}\n+   |\n+\n+error: unnecessary parentheses around `while` condition\n+  --> $DIR/lint-unnecessary-parens.rs:40:10\n+   |\n+LL |     while(true) {}\n+   |          ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while(true) {}\n+LL +     while true {}\n+   |\n+\n+error: unnecessary parentheses around `for` iterator expression\n+  --> $DIR/lint-unnecessary-parens.rs:41:13\n+   |\n+LL |     for _ in(e) {}\n+   |             ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for _ in(e) {}\n+LL +     for _ in e {}\n+   |\n+\n+error: unnecessary parentheses around `match` scrutinee expression\n+  --> $DIR/lint-unnecessary-parens.rs:42:10\n+   |\n+LL |     match(1) { _ => ()}\n+   |          ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     match(1) { _ => ()}\n+LL +     match 1 { _ => ()}\n+   |\n+\n+error: unnecessary parentheses around `return` value\n+  --> $DIR/lint-unnecessary-parens.rs:43:11\n+   |\n+LL |     return(1);\n+   |           ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     return(1);\n+LL +     return 1;\n+   |\n+\n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:44:31\n+  --> $DIR/lint-unnecessary-parens.rs:52:31\n    |\n LL | pub const CONST_ITEM: usize = (10);\n    |                               ^  ^\n@@ -76,7 +136,7 @@ LL + pub const CONST_ITEM: usize = 10;\n    |\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:45:33\n+  --> $DIR/lint-unnecessary-parens.rs:53:33\n    |\n LL | pub static STATIC_ITEM: usize = (10);\n    |                                 ^  ^\n@@ -88,7 +148,7 @@ LL + pub static STATIC_ITEM: usize = 10;\n    |\n \n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:49:9\n+  --> $DIR/lint-unnecessary-parens.rs:57:9\n    |\n LL |     bar((true));\n    |         ^    ^\n@@ -100,7 +160,7 @@ LL +     bar(true);\n    |\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:51:8\n+  --> $DIR/lint-unnecessary-parens.rs:59:8\n    |\n LL |     if (true) {}\n    |        ^    ^\n@@ -112,7 +172,7 @@ LL +     if true {}\n    |\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:52:11\n+  --> $DIR/lint-unnecessary-parens.rs:60:11\n    |\n LL |     while (true) {}\n    |           ^    ^\n@@ -124,7 +184,7 @@ LL +     while true {}\n    |\n \n error: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:53:11\n+  --> $DIR/lint-unnecessary-parens.rs:61:11\n    |\n LL |     match (true) {\n    |           ^    ^\n@@ -136,7 +196,7 @@ LL +     match true {\n    |\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:56:16\n+  --> $DIR/lint-unnecessary-parens.rs:64:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^ ^\n@@ -148,7 +208,7 @@ LL +     if let 1 = 1 {}\n    |\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:57:19\n+  --> $DIR/lint-unnecessary-parens.rs:65:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^ ^\n@@ -160,7 +220,7 @@ LL +     while let 1 = 2 {}\n    |\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:73:24\n+  --> $DIR/lint-unnecessary-parens.rs:81:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^    ^\n@@ -172,7 +232,7 @@ LL +     X { y: false }.foo(true);\n    |\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:75:18\n+  --> $DIR/lint-unnecessary-parens.rs:83:18\n    |\n LL |     let mut _a = (0);\n    |                  ^ ^\n@@ -184,7 +244,7 @@ LL +     let mut _a = 0;\n    |\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:76:10\n+  --> $DIR/lint-unnecessary-parens.rs:84:10\n    |\n LL |     _a = (0);\n    |          ^ ^\n@@ -196,7 +256,7 @@ LL +     _a = 0;\n    |\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:77:11\n+  --> $DIR/lint-unnecessary-parens.rs:85:11\n    |\n LL |     _a += (1);\n    |           ^ ^\n@@ -207,5 +267,5 @@ LL -     _a += (1);\n LL +     _a += 1;\n    |\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 22 previous errors\n "}]}