{"sha": "274085cebdbbe01522818c0b1e5f1f00af97ed9d", "node_id": "C_kwDOAAsO6NoAKDI3NDA4NWNlYmRiYmUwMTUyMjgxOGMwYjFlNWYxZjAwYWY5N2VkOWQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-22T06:48:09Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-22T06:52:24Z"}, "message": "Manual adjustments", "tree": {"sha": "b9c3b46bd70f6da9a977bcca44b527e0a92dafab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c3b46bd70f6da9a977bcca44b527e0a92dafab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/274085cebdbbe01522818c0b1e5f1f00af97ed9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKyvCgACgkQ+boUO5X/\nbYKDkhAAn0vjg8MZuHjmH62hL92hu1x/Cx3w7YgZwEGPBTQz+QgPoRKhKC4qHrbN\nH32y+Tl8nyEIjv4APUFc5HcrVCApqO6ARrx5Hby5hOZ1d4J8qRgyW7ENLCUIZgv+\nXFkdoRBt6vel3p4IFIbK/46yNWnihQ9WuQixAC85eaqsHv8KeJ3PEVAXG1h+nJV/\n9wCp7Pf6w+P7o9ogV8h1UkrASW2z5dBp6mQ4a4wgtp3wtPs2AzkfPTTWTXXVxMW+\nN6e3c9tqBDwLp+foK7Z4RJUP36XLdVt36tzDxVIglq5jAR/1cBln6ds2K2jkZuV0\nQ5G21MgVvPxHUIQRdY2GM3/PrCEeG6lU6wC2u7jCiyd/UL2Xn5O5kX6RTJMyQ4H1\nC1BmGDId7BzThW8BogG6GVTNWEZ99vEjVdAV0smEhIw+/N7UiZnNrYk+zz5Haoj6\nUOKtUxhktOc+aAZZF7ckIVQXKYCXCkYBd4s1UqWQbk76eGoYSAZ+iHXlwGrSnoP+\n416r7aPsUJrDlIgoI9tKU+D3ukBNvPh5/teL/1R90MdpmM3R4fwAhxbizjN2d7Xy\n1MY3y1lp4ivn/pZZb8jIBVOFlWpk66n3PiKoawcpDUKvj90iDC0yHYoc1oJf+CHX\n1gpOg3w2Xa558V2RFjilc30xfFkaMqW4p8oznUAabw07L0XhXro=\n=RkPp\n-----END PGP SIGNATURE-----", "payload": "tree b9c3b46bd70f6da9a977bcca44b527e0a92dafab\nparent ba23d37b70253be905349aaeb0781eb6eba05333\nauthor David Tolnay <dtolnay@gmail.com> 1655880489 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655880744 -0700\n\nManual adjustments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/274085cebdbbe01522818c0b1e5f1f00af97ed9d", "html_url": "https://github.com/rust-lang/rust/commit/274085cebdbbe01522818c0b1e5f1f00af97ed9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/274085cebdbbe01522818c0b1e5f1f00af97ed9d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba23d37b70253be905349aaeb0781eb6eba05333", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba23d37b70253be905349aaeb0781eb6eba05333", "html_url": "https://github.com/rust-lang/rust/commit/ba23d37b70253be905349aaeb0781eb6eba05333"}], "stats": {"total": 319, "additions": 118, "deletions": 201}, "files": [{"sha": "730dd87cbb10f8d5a830cf34fcb0292fb6401bea", "filename": "tests/fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -6,8 +6,8 @@\n struct MuchAlign;\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let buf = [0u32; 256];\n         // `buf` is sufficiently aligned for `layout.align` on a `dyn Debug`, but not\n         // for the actual alignment required by `MuchAlign`."}, {"sha": "c42f0e27aeada17718b7c8d0d5d96681f2792707", "filename": "tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -10,8 +10,8 @@ struct Foo {\n }\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let foo = Foo { x: 42, y: 99 };\n         let p = &foo.x;\n         let i = *p; //~ERROR alignment 4 is required"}, {"sha": "7d192e5d3928b36ff0861b77226817c323a75d75", "filename": "tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -2,8 +2,8 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}, {"sha": "748a31681a780560f1456a8ca1c733f13f8c6a2a", "filename": "tests/fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -2,8 +2,8 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n         // This must fail because alignment is violated. Test specifically for loading pointers,"}, {"sha": "d01cabfa31cc85f24582a994f7a23b05129997cd", "filename": "tests/fail/unaligned_pointers/unaligned_ptr4.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -4,8 +4,9 @@\n fn main() {\n     // Make sure we notice when a u16 is loaded at offset 1 into a u8 allocation.\n     // (This would be missed if u8 allocations are *always* at odd addresses.)\n+    //\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let x = [0u8; 4];\n         let ptr = x.as_ptr().wrapping_offset(1).cast::<u16>();\n         let _val = unsafe { *ptr }; //~ERROR but alignment"}, {"sha": "dff92d56d70e87202c368f84748bdca35a3ba72d", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -3,8 +3,8 @@\n use std::ptr;\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for _ in 0..10 {\n-        // Try many times as this might work by chance.\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}, {"sha": "8252ea83c870c60df3d95d22261aba979c44ae9c", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -3,8 +3,8 @@\n // compile-flags: -Zmir-opt-level=0 -Zmiri-disable-validation\n \n fn main() {\n+    // Try many times as this might work by chance.\n     for i in 0..10 {\n-        // Try many times as this might work by chance.\n         let x = i as u8;\n         let x = &x as *const _ as *const [u32; 0];\n         // This must fail because alignment is violated. Test specifically for loading ZST."}, {"sha": "546931f6ff87560ebb8bc1ba5fd5c17c8c38ff6e", "filename": "tests/pass/intrinsics-integer.rs", "status": "modified", "additions": 104, "deletions": 188, "changes": 292, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintrinsics-integer.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -13,194 +13,110 @@ use std::intrinsics::*;\n \n pub fn main() {\n     unsafe {\n-        assert_eq!(ctpop(0u8), 0);\n-        assert_eq!(ctpop(0i8), 0);\n-        assert_eq!(ctpop(0u16), 0);\n-        assert_eq!(ctpop(0i16), 0);\n-        assert_eq!(ctpop(0u32), 0);\n-        assert_eq!(ctpop(0i32), 0);\n-        assert_eq!(ctpop(0u64), 0);\n-        assert_eq!(ctpop(0i64), 0);\n-\n-        assert_eq!(ctpop(1u8), 1);\n-        assert_eq!(ctpop(1i8), 1);\n-        assert_eq!(ctpop(1u16), 1);\n-        assert_eq!(ctpop(1i16), 1);\n-        assert_eq!(ctpop(1u32), 1);\n-        assert_eq!(ctpop(1i32), 1);\n-        assert_eq!(ctpop(1u64), 1);\n-        assert_eq!(ctpop(1i64), 1);\n-\n-        assert_eq!(ctpop(10u8), 2);\n-        assert_eq!(ctpop(10i8), 2);\n-        assert_eq!(ctpop(10u16), 2);\n-        assert_eq!(ctpop(10i16), 2);\n-        assert_eq!(ctpop(10u32), 2);\n-        assert_eq!(ctpop(10i32), 2);\n-        assert_eq!(ctpop(10u64), 2);\n-        assert_eq!(ctpop(10i64), 2);\n-\n-        assert_eq!(ctpop(100u8), 3);\n-        assert_eq!(ctpop(100i8), 3);\n-        assert_eq!(ctpop(100u16), 3);\n-        assert_eq!(ctpop(100i16), 3);\n-        assert_eq!(ctpop(100u32), 3);\n-        assert_eq!(ctpop(100i32), 3);\n-        assert_eq!(ctpop(100u64), 3);\n-        assert_eq!(ctpop(100i64), 3);\n-\n-        assert_eq!(ctpop(-1i8 as u8), 8);\n-        assert_eq!(ctpop(-1i8), 8);\n-        assert_eq!(ctpop(-1i16 as u16), 16);\n-        assert_eq!(ctpop(-1i16), 16);\n-        assert_eq!(ctpop(-1i32 as u32), 32);\n-        assert_eq!(ctpop(-1i32), 32);\n-        assert_eq!(ctpop(-1i64 as u64), 64);\n-        assert_eq!(ctpop(-1i64), 64);\n-\n-        assert_eq!(ctlz(0u8), 8);\n-        assert_eq!(ctlz(0i8), 8);\n-        assert_eq!(ctlz(0u16), 16);\n-        assert_eq!(ctlz(0i16), 16);\n-        assert_eq!(ctlz(0u32), 32);\n-        assert_eq!(ctlz(0i32), 32);\n-        assert_eq!(ctlz(0u64), 64);\n-        assert_eq!(ctlz(0i64), 64);\n-\n-        assert_eq!(ctlz(1u8), 7);\n-        assert_eq!(ctlz(1i8), 7);\n-        assert_eq!(ctlz(1u16), 15);\n-        assert_eq!(ctlz(1i16), 15);\n-        assert_eq!(ctlz(1u32), 31);\n-        assert_eq!(ctlz(1i32), 31);\n-        assert_eq!(ctlz(1u64), 63);\n-        assert_eq!(ctlz(1i64), 63);\n-\n-        assert_eq!(ctlz(10u8), 4);\n-        assert_eq!(ctlz(10i8), 4);\n-        assert_eq!(ctlz(10u16), 12);\n-        assert_eq!(ctlz(10i16), 12);\n-        assert_eq!(ctlz(10u32), 28);\n-        assert_eq!(ctlz(10i32), 28);\n-        assert_eq!(ctlz(10u64), 60);\n-        assert_eq!(ctlz(10i64), 60);\n-\n-        assert_eq!(ctlz(100u8), 1);\n-        assert_eq!(ctlz(100i8), 1);\n-        assert_eq!(ctlz(100u16), 9);\n-        assert_eq!(ctlz(100i16), 9);\n-        assert_eq!(ctlz(100u32), 25);\n-        assert_eq!(ctlz(100i32), 25);\n-        assert_eq!(ctlz(100u64), 57);\n-        assert_eq!(ctlz(100i64), 57);\n-\n-        assert_eq!(ctlz_nonzero(1u8), 7);\n-        assert_eq!(ctlz_nonzero(1i8), 7);\n-        assert_eq!(ctlz_nonzero(1u16), 15);\n-        assert_eq!(ctlz_nonzero(1i16), 15);\n-        assert_eq!(ctlz_nonzero(1u32), 31);\n-        assert_eq!(ctlz_nonzero(1i32), 31);\n-        assert_eq!(ctlz_nonzero(1u64), 63);\n-        assert_eq!(ctlz_nonzero(1i64), 63);\n-\n-        assert_eq!(ctlz_nonzero(10u8), 4);\n-        assert_eq!(ctlz_nonzero(10i8), 4);\n-        assert_eq!(ctlz_nonzero(10u16), 12);\n-        assert_eq!(ctlz_nonzero(10i16), 12);\n-        assert_eq!(ctlz_nonzero(10u32), 28);\n-        assert_eq!(ctlz_nonzero(10i32), 28);\n-        assert_eq!(ctlz_nonzero(10u64), 60);\n-        assert_eq!(ctlz_nonzero(10i64), 60);\n-\n-        assert_eq!(ctlz_nonzero(100u8), 1);\n-        assert_eq!(ctlz_nonzero(100i8), 1);\n-        assert_eq!(ctlz_nonzero(100u16), 9);\n-        assert_eq!(ctlz_nonzero(100i16), 9);\n-        assert_eq!(ctlz_nonzero(100u32), 25);\n-        assert_eq!(ctlz_nonzero(100i32), 25);\n-        assert_eq!(ctlz_nonzero(100u64), 57);\n-        assert_eq!(ctlz_nonzero(100i64), 57);\n-\n-        assert_eq!(cttz(-1i8 as u8), 0);\n-        assert_eq!(cttz(-1i8), 0);\n-        assert_eq!(cttz(-1i16 as u16), 0);\n-        assert_eq!(cttz(-1i16), 0);\n-        assert_eq!(cttz(-1i32 as u32), 0);\n-        assert_eq!(cttz(-1i32), 0);\n-        assert_eq!(cttz(-1i64 as u64), 0);\n-        assert_eq!(cttz(-1i64), 0);\n-\n-        assert_eq!(cttz(0u8), 8);\n-        assert_eq!(cttz(0i8), 8);\n-        assert_eq!(cttz(0u16), 16);\n-        assert_eq!(cttz(0i16), 16);\n-        assert_eq!(cttz(0u32), 32);\n-        assert_eq!(cttz(0i32), 32);\n-        assert_eq!(cttz(0u64), 64);\n-        assert_eq!(cttz(0i64), 64);\n-\n-        assert_eq!(cttz(1u8), 0);\n-        assert_eq!(cttz(1i8), 0);\n-        assert_eq!(cttz(1u16), 0);\n-        assert_eq!(cttz(1i16), 0);\n-        assert_eq!(cttz(1u32), 0);\n-        assert_eq!(cttz(1i32), 0);\n-        assert_eq!(cttz(1u64), 0);\n-        assert_eq!(cttz(1i64), 0);\n-\n-        assert_eq!(cttz(10u8), 1);\n-        assert_eq!(cttz(10i8), 1);\n-        assert_eq!(cttz(10u16), 1);\n-        assert_eq!(cttz(10i16), 1);\n-        assert_eq!(cttz(10u32), 1);\n-        assert_eq!(cttz(10i32), 1);\n-        assert_eq!(cttz(10u64), 1);\n-        assert_eq!(cttz(10i64), 1);\n-\n-        assert_eq!(cttz(100u8), 2);\n-        assert_eq!(cttz(100i8), 2);\n-        assert_eq!(cttz(100u16), 2);\n-        assert_eq!(cttz(100i16), 2);\n-        assert_eq!(cttz(100u32), 2);\n-        assert_eq!(cttz(100i32), 2);\n-        assert_eq!(cttz(100u64), 2);\n-        assert_eq!(cttz(100i64), 2);\n-\n-        assert_eq!(cttz_nonzero(-1i8 as u8), 0);\n-        assert_eq!(cttz_nonzero(-1i8), 0);\n-        assert_eq!(cttz_nonzero(-1i16 as u16), 0);\n-        assert_eq!(cttz_nonzero(-1i16), 0);\n-        assert_eq!(cttz_nonzero(-1i32 as u32), 0);\n-        assert_eq!(cttz_nonzero(-1i32), 0);\n-        assert_eq!(cttz_nonzero(-1i64 as u64), 0);\n-        assert_eq!(cttz_nonzero(-1i64), 0);\n-\n-        assert_eq!(cttz_nonzero(1u8), 0);\n-        assert_eq!(cttz_nonzero(1i8), 0);\n-        assert_eq!(cttz_nonzero(1u16), 0);\n-        assert_eq!(cttz_nonzero(1i16), 0);\n-        assert_eq!(cttz_nonzero(1u32), 0);\n-        assert_eq!(cttz_nonzero(1i32), 0);\n-        assert_eq!(cttz_nonzero(1u64), 0);\n-        assert_eq!(cttz_nonzero(1i64), 0);\n-\n-        assert_eq!(cttz_nonzero(10u8), 1);\n-        assert_eq!(cttz_nonzero(10i8), 1);\n-        assert_eq!(cttz_nonzero(10u16), 1);\n-        assert_eq!(cttz_nonzero(10i16), 1);\n-        assert_eq!(cttz_nonzero(10u32), 1);\n-        assert_eq!(cttz_nonzero(10i32), 1);\n-        assert_eq!(cttz_nonzero(10u64), 1);\n-        assert_eq!(cttz_nonzero(10i64), 1);\n-\n-        assert_eq!(cttz_nonzero(100u8), 2);\n-        assert_eq!(cttz_nonzero(100i8), 2);\n-        assert_eq!(cttz_nonzero(100u16), 2);\n-        assert_eq!(cttz_nonzero(100i16), 2);\n-        assert_eq!(cttz_nonzero(100u32), 2);\n-        assert_eq!(cttz_nonzero(100i32), 2);\n-        assert_eq!(cttz_nonzero(100u64), 2);\n-        assert_eq!(cttz_nonzero(100i64), 2);\n+        [assert_eq!(ctpop(0u8), 0), assert_eq!(ctpop(0i8), 0)];\n+        [assert_eq!(ctpop(0u16), 0), assert_eq!(ctpop(0i16), 0)];\n+        [assert_eq!(ctpop(0u32), 0), assert_eq!(ctpop(0i32), 0)];\n+        [assert_eq!(ctpop(0u64), 0), assert_eq!(ctpop(0i64), 0)];\n+\n+        [assert_eq!(ctpop(1u8), 1), assert_eq!(ctpop(1i8), 1)];\n+        [assert_eq!(ctpop(1u16), 1), assert_eq!(ctpop(1i16), 1)];\n+        [assert_eq!(ctpop(1u32), 1), assert_eq!(ctpop(1i32), 1)];\n+        [assert_eq!(ctpop(1u64), 1), assert_eq!(ctpop(1i64), 1)];\n+\n+        [assert_eq!(ctpop(10u8), 2), assert_eq!(ctpop(10i8), 2)];\n+        [assert_eq!(ctpop(10u16), 2), assert_eq!(ctpop(10i16), 2)];\n+        [assert_eq!(ctpop(10u32), 2), assert_eq!(ctpop(10i32), 2)];\n+        [assert_eq!(ctpop(10u64), 2), assert_eq!(ctpop(10i64), 2)];\n+\n+        [assert_eq!(ctpop(100u8), 3), assert_eq!(ctpop(100i8), 3)];\n+        [assert_eq!(ctpop(100u16), 3), assert_eq!(ctpop(100i16), 3)];\n+        [assert_eq!(ctpop(100u32), 3), assert_eq!(ctpop(100i32), 3)];\n+        [assert_eq!(ctpop(100u64), 3), assert_eq!(ctpop(100i64), 3)];\n+\n+        [assert_eq!(ctpop(-1i8 as u8), 8), assert_eq!(ctpop(-1i8), 8)];\n+        [assert_eq!(ctpop(-1i16 as u16), 16), assert_eq!(ctpop(-1i16), 16)];\n+        [assert_eq!(ctpop(-1i32 as u32), 32), assert_eq!(ctpop(-1i32), 32)];\n+        [assert_eq!(ctpop(-1i64 as u64), 64), assert_eq!(ctpop(-1i64), 64)];\n+\n+        [assert_eq!(ctlz(0u8), 8), assert_eq!(ctlz(0i8), 8)];\n+        [assert_eq!(ctlz(0u16), 16), assert_eq!(ctlz(0i16), 16)];\n+        [assert_eq!(ctlz(0u32), 32), assert_eq!(ctlz(0i32), 32)];\n+        [assert_eq!(ctlz(0u64), 64), assert_eq!(ctlz(0i64), 64)];\n+\n+        [assert_eq!(ctlz(1u8), 7), assert_eq!(ctlz(1i8), 7)];\n+        [assert_eq!(ctlz(1u16), 15), assert_eq!(ctlz(1i16), 15)];\n+        [assert_eq!(ctlz(1u32), 31), assert_eq!(ctlz(1i32), 31)];\n+        [assert_eq!(ctlz(1u64), 63), assert_eq!(ctlz(1i64), 63)];\n+\n+        [assert_eq!(ctlz(10u8), 4), assert_eq!(ctlz(10i8), 4)];\n+        [assert_eq!(ctlz(10u16), 12), assert_eq!(ctlz(10i16), 12)];\n+        [assert_eq!(ctlz(10u32), 28), assert_eq!(ctlz(10i32), 28)];\n+        [assert_eq!(ctlz(10u64), 60), assert_eq!(ctlz(10i64), 60)];\n+\n+        [assert_eq!(ctlz(100u8), 1), assert_eq!(ctlz(100i8), 1)];\n+        [assert_eq!(ctlz(100u16), 9), assert_eq!(ctlz(100i16), 9)];\n+        [assert_eq!(ctlz(100u32), 25), assert_eq!(ctlz(100i32), 25)];\n+        [assert_eq!(ctlz(100u64), 57), assert_eq!(ctlz(100i64), 57)];\n+\n+        [assert_eq!(ctlz_nonzero(1u8), 7), assert_eq!(ctlz_nonzero(1i8), 7)];\n+        [assert_eq!(ctlz_nonzero(1u16), 15), assert_eq!(ctlz_nonzero(1i16), 15)];\n+        [assert_eq!(ctlz_nonzero(1u32), 31), assert_eq!(ctlz_nonzero(1i32), 31)];\n+        [assert_eq!(ctlz_nonzero(1u64), 63), assert_eq!(ctlz_nonzero(1i64), 63)];\n+\n+        [assert_eq!(ctlz_nonzero(10u8), 4), assert_eq!(ctlz_nonzero(10i8), 4)];\n+        [assert_eq!(ctlz_nonzero(10u16), 12), assert_eq!(ctlz_nonzero(10i16), 12)];\n+        [assert_eq!(ctlz_nonzero(10u32), 28), assert_eq!(ctlz_nonzero(10i32), 28)];\n+        [assert_eq!(ctlz_nonzero(10u64), 60), assert_eq!(ctlz_nonzero(10i64), 60)];\n+\n+        [assert_eq!(ctlz_nonzero(100u8), 1), assert_eq!(ctlz_nonzero(100i8), 1)];\n+        [assert_eq!(ctlz_nonzero(100u16), 9), assert_eq!(ctlz_nonzero(100i16), 9)];\n+        [assert_eq!(ctlz_nonzero(100u32), 25), assert_eq!(ctlz_nonzero(100i32), 25)];\n+        [assert_eq!(ctlz_nonzero(100u64), 57), assert_eq!(ctlz_nonzero(100i64), 57)];\n+\n+        [assert_eq!(cttz(-1i8 as u8), 0), assert_eq!(cttz(-1i8), 0)];\n+        [assert_eq!(cttz(-1i16 as u16), 0), assert_eq!(cttz(-1i16), 0)];\n+        [assert_eq!(cttz(-1i32 as u32), 0), assert_eq!(cttz(-1i32), 0)];\n+        [assert_eq!(cttz(-1i64 as u64), 0), assert_eq!(cttz(-1i64), 0)];\n+\n+        [assert_eq!(cttz(0u8), 8), assert_eq!(cttz(0i8), 8)];\n+        [assert_eq!(cttz(0u16), 16), assert_eq!(cttz(0i16), 16)];\n+        [assert_eq!(cttz(0u32), 32), assert_eq!(cttz(0i32), 32)];\n+        [assert_eq!(cttz(0u64), 64), assert_eq!(cttz(0i64), 64)];\n+\n+        [assert_eq!(cttz(1u8), 0), assert_eq!(cttz(1i8), 0)];\n+        [assert_eq!(cttz(1u16), 0), assert_eq!(cttz(1i16), 0)];\n+        [assert_eq!(cttz(1u32), 0), assert_eq!(cttz(1i32), 0)];\n+        [assert_eq!(cttz(1u64), 0), assert_eq!(cttz(1i64), 0)];\n+\n+        [assert_eq!(cttz(10u8), 1), assert_eq!(cttz(10i8), 1)];\n+        [assert_eq!(cttz(10u16), 1), assert_eq!(cttz(10i16), 1)];\n+        [assert_eq!(cttz(10u32), 1), assert_eq!(cttz(10i32), 1)];\n+        [assert_eq!(cttz(10u64), 1), assert_eq!(cttz(10i64), 1)];\n+\n+        [assert_eq!(cttz(100u8), 2), assert_eq!(cttz(100i8), 2)];\n+        [assert_eq!(cttz(100u16), 2), assert_eq!(cttz(100i16), 2)];\n+        [assert_eq!(cttz(100u32), 2), assert_eq!(cttz(100i32), 2)];\n+        [assert_eq!(cttz(100u64), 2), assert_eq!(cttz(100i64), 2)];\n+\n+        [assert_eq!(cttz_nonzero(-1i8 as u8), 0), assert_eq!(cttz_nonzero(-1i8), 0)];\n+        [assert_eq!(cttz_nonzero(-1i16 as u16), 0), assert_eq!(cttz_nonzero(-1i16), 0)];\n+        [assert_eq!(cttz_nonzero(-1i32 as u32), 0), assert_eq!(cttz_nonzero(-1i32), 0)];\n+        [assert_eq!(cttz_nonzero(-1i64 as u64), 0), assert_eq!(cttz_nonzero(-1i64), 0)];\n+\n+        [assert_eq!(cttz_nonzero(1u8), 0), assert_eq!(cttz_nonzero(1i8), 0)];\n+        [assert_eq!(cttz_nonzero(1u16), 0), assert_eq!(cttz_nonzero(1i16), 0)];\n+        [assert_eq!(cttz_nonzero(1u32), 0), assert_eq!(cttz_nonzero(1i32), 0)];\n+        [assert_eq!(cttz_nonzero(1u64), 0), assert_eq!(cttz_nonzero(1i64), 0)];\n+\n+        [assert_eq!(cttz_nonzero(10u8), 1), assert_eq!(cttz_nonzero(10i8), 1)];\n+        [assert_eq!(cttz_nonzero(10u16), 1), assert_eq!(cttz_nonzero(10i16), 1)];\n+        [assert_eq!(cttz_nonzero(10u32), 1), assert_eq!(cttz_nonzero(10i32), 1)];\n+        [assert_eq!(cttz_nonzero(10u64), 1), assert_eq!(cttz_nonzero(10i64), 1)];\n+\n+        [assert_eq!(cttz_nonzero(100u8), 2), assert_eq!(cttz_nonzero(100i8), 2)];\n+        [assert_eq!(cttz_nonzero(100u16), 2), assert_eq!(cttz_nonzero(100i16), 2)];\n+        [assert_eq!(cttz_nonzero(100u32), 2), assert_eq!(cttz_nonzero(100i32), 2)];\n+        [assert_eq!(cttz_nonzero(100u64), 2), assert_eq!(cttz_nonzero(100i64), 2)];\n \n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op"}, {"sha": "889b6bd04f9d5b16c58e5cfe549225dc2d458ac3", "filename": "tests/pass/ptr_int_casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_casts.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -20,8 +20,8 @@ fn ptr_int_casts() {\n     *val = (1 as *const u8).wrapping_offset(-4);\n     assert_eq!(*val as usize, usize::MAX - 2);\n \n+    // ptr-int-ptr\n     {\n-        // ptr-int-ptr\n         let x = 13;\n         let mut y = &x as &_ as *const _ as usize;\n         y += 13;\n@@ -30,8 +30,8 @@ fn ptr_int_casts() {\n         assert!(eq_ref(&x, unsafe { &*y }));\n     }\n \n+    // fnptr-int-fnptr\n     {\n-        // fnptr-int-fnptr\n         let x: fn() -> i32 = f;\n         let y: *mut u8 = unsafe { mem::transmute(x as fn() -> i32) };\n         let mut y = y as usize;"}, {"sha": "3256d4c65116a94b14b21e1a7191fcaff9bcafdc", "filename": "tests/pass/sums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274085cebdbbe01522818c0b1e5f1f00af97ed9d/tests%2Fpass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fsums.rs?ref=274085cebdbbe01522818c0b1e5f1f00af97ed9d", "patch": "@@ -1,17 +1,17 @@\n #[derive(Debug, PartialEq)]\n enum Unit {\n-    Unit(()),\n-} // Force non-C-enum representation.\n+    Unit(()), // Force non-C-enum representation.\n+}\n \n fn return_unit() -> Unit {\n     Unit::Unit(())\n }\n \n #[derive(Debug, PartialEq)]\n enum MyBool {\n-    False(()),\n+    False(()), // Force non-C-enum representation.\n     True(()),\n-} // Force non-C-enum representation.\n+}\n \n fn return_true() -> MyBool {\n     MyBool::True(())"}]}