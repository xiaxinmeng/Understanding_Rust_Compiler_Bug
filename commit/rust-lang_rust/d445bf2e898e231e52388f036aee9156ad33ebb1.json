{"sha": "d445bf2e898e231e52388f036aee9156ad33ebb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDViZjJlODk4ZTIzMWU1MjM4OGYwMzZhZWU5MTU2YWQzM2ViYjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T11:29:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T20:54:53Z"}, "message": "Remove suggestion for complex map_entry cases", "tree": {"sha": "3d1254ba091c97eca4919ed5a587d02dd0ce4c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1254ba091c97eca4919ed5a587d02dd0ce4c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d445bf2e898e231e52388f036aee9156ad33ebb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d445bf2e898e231e52388f036aee9156ad33ebb1", "html_url": "https://github.com/rust-lang/rust/commit/d445bf2e898e231e52388f036aee9156ad33ebb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d445bf2e898e231e52388f036aee9156ad33ebb1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a756b9bd2dd3d5f4d7d7beb66505e42c3f1995e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a756b9bd2dd3d5f4d7d7beb66505e42c3f1995e1", "html_url": "https://github.com/rust-lang/rust/commit/a756b9bd2dd3d5f4d7d7beb66505e42c3f1995e1"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "a590a8179c22f0994561d2aa2fe89a3753f43064", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d445bf2e898e231e52388f036aee9156ad33ebb1/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d445bf2e898e231e52388f036aee9156ad33ebb1/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=d445bf2e898e231e52388f036aee9156ad33ebb1", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -145,10 +146,11 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                 span_lint_and_then(self.cx, MAP_ENTRY, self.span,\n                                    &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {\n                     if self.sole_expr {\n+                        let mut app = Applicability::MachineApplicable;\n                         let help = format!(\"{}.entry({}).or_insert({})\",\n-                                           snippet(self.cx, self.map.span, \"map\"),\n-                                           snippet(self.cx, params[1].span, \"..\"),\n-                                           snippet(self.cx, params[2].span, \"..\"));\n+                                           snippet_with_applicability(self.cx, self.map.span, \"map\", &mut app),\n+                                           snippet_with_applicability(self.cx, params[1].span, \"..\", &mut app),\n+                                           snippet_with_applicability(self.cx, params[2].span, \"..\", &mut app));\n \n                         db.span_suggestion(\n                             self.span,\n@@ -158,15 +160,13 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                         );\n                     }\n                     else {\n-                        let help = format!(\"{}.entry({})\",\n+                        let help = format!(\"consider using `{}.entry({})`\",\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion(\n+                        db.span_help(\n                             self.span,\n-                            \"consider using\",\n-                            help,\n-                            Applicability::MachineApplicable, // snippet\n+                            &help,\n                         );\n                     }\n                 });"}, {"sha": "d17456ef8524deab124e5a553ffcdee69bc360bb", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d445bf2e898e231e52388f036aee9156ad33ebb1/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d445bf2e898e231e52388f036aee9156ad33ebb1/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=d445bf2e898e231e52388f036aee9156ad33ebb1", "patch": "@@ -15,7 +15,16 @@ LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n LL | |         m.insert(k, v);\n LL | |     }\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:16:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         foo();\n+LL | |         m.insert(k, v);\n+LL | |     }\n+   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:23:5\n@@ -25,7 +34,17 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:23:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         m.insert(k, v)\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:31:5\n@@ -35,7 +54,17 @@ LL | |         None\n LL | |     } else {\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:31:5\n+   |\n+LL | /     if m.contains_key(&k) {\n+LL | |         None\n+LL | |     } else {\n+LL | |         m.insert(k, v)\n+LL | |     };\n+   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:39:5\n@@ -46,7 +75,18 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:39:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         foo();\n+LL | |         m.insert(k, v)\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:48:5\n@@ -57,7 +97,18 @@ LL | |     } else {\n LL | |         foo();\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:48:5\n+   |\n+LL | /     if m.contains_key(&k) {\n+LL | |         None\n+LL | |     } else {\n+LL | |         foo();\n+LL | |         m.insert(k, v)\n+LL | |     };\n+   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n   --> $DIR/entry.rs:57:5\n@@ -68,7 +119,18 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^\n+   |\n+help: consider using `m.entry(k)`\n+  --> $DIR/entry.rs:57:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         foo();\n+LL | |         m.insert(k, v)\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n \n error: aborting due to 7 previous errors\n "}]}