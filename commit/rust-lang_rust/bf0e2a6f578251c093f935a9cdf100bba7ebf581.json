{"sha": "bf0e2a6f578251c093f935a9cdf100bba7ebf581", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGUyYTZmNTc4MjUxYzA5M2Y5MzVhOWNkZjEwMGJiYTdlYmY1ODE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-19T03:06:03Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-19T03:17:07Z"}, "message": "doc: Update container tutorial with new names of methods and macros\n\n`deque` -> `ringbuf`, mention `extra::dlist`.\n\nfix reference to vector method `bsearch`. Also convert all output\nin example code to use `print!`/`println!`", "tree": {"sha": "57dcf9245091672cfc104da1c073fb5c9e64a039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57dcf9245091672cfc104da1c073fb5c9e64a039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0e2a6f578251c093f935a9cdf100bba7ebf581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e2a6f578251c093f935a9cdf100bba7ebf581", "html_url": "https://github.com/rust-lang/rust/commit/bf0e2a6f578251c093f935a9cdf100bba7ebf581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0e2a6f578251c093f935a9cdf100bba7ebf581/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12e0305b1cee107c6e9b04736dff733593588d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12e0305b1cee107c6e9b04736dff733593588d3", "html_url": "https://github.com/rust-lang/rust/commit/d12e0305b1cee107c6e9b04736dff733593588d3"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "fc5f4b86eb4374df0e9bf8a13e6c6d74c3037038", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bf0e2a6f578251c093f935a9cdf100bba7ebf581/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf0e2a6f578251c093f935a9cdf100bba7ebf581/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=bf0e2a6f578251c093f935a9cdf100bba7ebf581", "patch": "@@ -11,7 +11,7 @@ are the most common container in Rust, and are flexible enough to fit many use\n cases.\n \n Vectors can also be sorted and used as efficient lookup tables with the\n-`std::vec::bsearch` function, if all the elements are inserted at one time and\n+`bsearch()` method, if all the elements are inserted at one time and\n deletions are unnecessary.\n \n ## Maps and sets\n@@ -42,10 +42,15 @@ implementing the `IterBytes` trait.\n \n ## Double-ended queues\n \n-The `extra::deque` module implements a double-ended queue with `O(1)` amortized\n-inserts and removals from both ends of the container. It also has `O(1)`\n-indexing like a vector. The contained elements are not required to be copyable,\n-and the queue will be sendable if the contained type is sendable.\n+The `extra::ringbuf` module implements a double-ended queue with `O(1)`\n+amortized inserts and removals from both ends of the container. It also has\n+`O(1)` indexing like a vector. The contained elements are not required to be\n+copyable, and the queue will be sendable if the contained type is sendable.\n+Its interface `Deque` is defined in `extra::collections`.\n+\n+The `extra::dlist` module implements a double-ended linked list, also\n+implementing the `Deque` trait, with `O(1)` removals and inserts at either end,\n+and `O(1)` concatenation.\n \n ## Priority queues\n \n@@ -197,11 +202,11 @@ The function `range` (or `range_inclusive`) allows to simply iterate through a g\n \n ~~~\n for i in range(0, 5) {\n-  printf!(\"%d \", i) // prints \"0 1 2 3 4\"\n+  print!(\"{} \", i) // prints \"0 1 2 3 4\"\n }\n \n for i in std::iter::range_inclusive(0, 5) { // needs explicit import\n-  printf!(\"%d \", i) // prints \"0 1 2 3 4 5\"\n+  print!(\"{} \", i) // prints \"0 1 2 3 4 5\"\n }\n ~~~\n \n@@ -233,15 +238,15 @@ let mut it = xs.iter().zip(ys.iter());\n \n // print out the pairs of elements up to (&3, &\"baz\")\n for (x, y) in it {\n-    printfln!(\"%d %s\", *x, *y);\n+    println!(\"{} {}\", *x, *y);\n \n     if *x == 3 {\n         break;\n     }\n }\n \n // yield and print the last pair from the iterator\n-printfln!(\"last: %?\", it.next());\n+println!(\"last: {:?}\", it.next());\n \n // the iterator is now fully consumed\n assert!(it.next().is_none());\n@@ -335,13 +340,13 @@ another `DoubleEndedIterator` with `next` and `next_back` exchanged.\n ~~~\n let xs = [1, 2, 3, 4, 5, 6];\n let mut it = xs.iter();\n-printfln!(\"%?\", it.next()); // prints `Some(&1)`\n-printfln!(\"%?\", it.next()); // prints `Some(&2)`\n-printfln!(\"%?\", it.next_back()); // prints `Some(&6)`\n+println!(\"{:?}\", it.next()); // prints `Some(&1)`\n+println!(\"{:?}\", it.next()); // prints `Some(&2)`\n+println!(\"{:?}\", it.next_back()); // prints `Some(&6)`\n \n // prints `5`, `4` and `3`\n for &x in it.invert() {\n-    printfln!(\"%?\", x)\n+    println!(\"{}\", x)\n }\n ~~~\n \n@@ -356,11 +361,11 @@ let xs = [1, 2, 3, 4];\n let ys = [5, 6, 7, 8];\n let mut it = xs.iter().chain(ys.iter()).map(|&x| x * 2);\n \n-printfln!(\"%?\", it.next()); // prints `Some(2)`\n+println!(\"{:?}\", it.next()); // prints `Some(2)`\n \n // prints `16`, `14`, `12`, `10`, `8`, `6`, `4`\n for x in it.invert() {\n-    printfln!(\"%?\", x);\n+    println!(\"{}\", x);\n }\n ~~~\n \n@@ -387,17 +392,17 @@ underlying iterators are.\n let xs = [1, 2, 3, 4, 5];\n let ys = ~[7, 9, 11];\n let mut it = xs.iter().chain(ys.iter());\n-printfln!(\"%?\", it.idx(0)); // prints `Some(&1)`\n-printfln!(\"%?\", it.idx(5)); // prints `Some(&7)`\n-printfln!(\"%?\", it.idx(7)); // prints `Some(&11)`\n-printfln!(\"%?\", it.idx(8)); // prints `None`\n+println!(\"{:?}\", it.idx(0)); // prints `Some(&1)`\n+println!(\"{:?}\", it.idx(5)); // prints `Some(&7)`\n+println!(\"{:?}\", it.idx(7)); // prints `Some(&11)`\n+println!(\"{:?}\", it.idx(8)); // prints `None`\n \n // yield two elements from the beginning, and one from the end\n it.next();\n it.next();\n it.next_back();\n \n-printfln!(\"%?\", it.idx(0)); // prints `Some(&3)`\n-printfln!(\"%?\", it.idx(4)); // prints `Some(&9)`\n-printfln!(\"%?\", it.idx(6)); // prints `None`\n+println!(\"{:?}\", it.idx(0)); // prints `Some(&3)`\n+println!(\"{:?}\", it.idx(4)); // prints `Some(&9)`\n+println!(\"{:?}\", it.idx(6)); // prints `None`\n ~~~"}]}