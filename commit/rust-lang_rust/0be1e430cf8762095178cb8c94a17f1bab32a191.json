{"sha": "0be1e430cf8762095178cb8c94a17f1bab32a191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTFlNDMwY2Y4NzYyMDk1MTc4Y2I4Yzk0YTE3ZjFiYWIzMmExOTE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-18T09:53:52Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:26Z"}, "message": "Fix error codes", "tree": {"sha": "219c023d2a90a5aa5811880813b034973a16a2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219c023d2a90a5aa5811880813b034973a16a2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be1e430cf8762095178cb8c94a17f1bab32a191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be1e430cf8762095178cb8c94a17f1bab32a191", "html_url": "https://github.com/rust-lang/rust/commit/0be1e430cf8762095178cb8c94a17f1bab32a191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be1e430cf8762095178cb8c94a17f1bab32a191/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40fffc9e3fe1664240683a2e86f2d14827417ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/40fffc9e3fe1664240683a2e86f2d14827417ef5", "html_url": "https://github.com/rust-lang/rust/commit/40fffc9e3fe1664240683a2e86f2d14827417ef5"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "d34a16a924f70cb725a542a4744888f728353e8d", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=0be1e430cf8762095178cb8c94a17f1bab32a191", "patch": "@@ -101,7 +101,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 debug!(\"coherence2::orphan check: default trait impl {}\", item.repr(self.tcx));\n                 let trait_ref = ty::node_id_to_trait_ref(self.tcx, ast_trait_ref.ref_id);\n                 if trait_ref.def_id.krate != ast::LOCAL_CRATE {\n-                    span_err!(self.tcx.sess, item.span, E0316,\n+                    span_err!(self.tcx.sess, item.span, E0318,\n                               \"cannot create default implementations for traits outside the \\\n                                crate they're defined in; define a new trait instead.\");\n                 }"}, {"sha": "9accfe7749e8e9d88f9a4e74dc44cc5d79f2721c", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=0be1e430cf8762095178cb8c94a17f1bab32a191", "patch": "@@ -141,7 +141,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                             ty::ty_struct(..) | ty::ty_enum(..) => {},\n                             _ => {\n                                 let impl_def_id = ast_util::local_def(item.id);\n-                                span_err!(self.tcx.sess, self.span_of_impl(impl_def_id), E0317,\n+                                span_err!(self.tcx.sess, self.span_of_impl(impl_def_id), E0319,\n                                           \"implementations for traits providing default \\\n                                            implementations are only allowed on structs and enums\");\n "}, {"sha": "6f363faef60396d58ce14004aec6413673b0d4a7", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0be1e430cf8762095178cb8c94a17f1bab32a191", "patch": "@@ -172,8 +172,8 @@ register_diagnostics! {\n     E0248, // found value name used as a type\n     E0249, // expected constant expr for array length\n     E0250, // expected constant expr for array length\n-    E0316,  // can't create default impls for traits outside their crates\n-    E0317\n+    E0318, // can't create default impls for traits outside their crates\n+    E0319  // trait impls for defaulted traits allowed just for structs/enums\n }\n \n __build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "cb3f50c8d870239a214521f346053c493d4f4951", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be1e430cf8762095178cb8c94a17f1bab32a191/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=0be1e430cf8762095178cb8c94a17f1bab32a191", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that when a `..` impl applies, we also check that any\n+// supertrait conditions are met.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait NotImplemented { }\n+\n+trait MyTrait : NotImplemented {}\n+\n+impl MyTrait for .. {}\n+\n+fn foo<T:MyTrait>() { bar::<T>() }\n+\n+fn bar<T:NotImplemented>() { }\n+\n+fn main() {\n+    foo::<i32>(); //~ ERROR XXX\n+    bar::<i32>(); //~ ERROR XXX\n+}"}]}