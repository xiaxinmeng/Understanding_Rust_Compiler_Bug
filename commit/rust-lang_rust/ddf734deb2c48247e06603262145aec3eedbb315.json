{"sha": "ddf734deb2c48247e06603262145aec3eedbb315", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZjczNGRlYjJjNDgyNDdlMDY2MDMyNjIxNDVhZWMzZWVkYmIzMTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T09:39:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract fatal_unexpected_non_pat", "tree": {"sha": "5eab49c519bbb9b165d38310d7f176c8280b94e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eab49c519bbb9b165d38310d7f176c8280b94e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf734deb2c48247e06603262145aec3eedbb315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf734deb2c48247e06603262145aec3eedbb315", "html_url": "https://github.com/rust-lang/rust/commit/ddf734deb2c48247e06603262145aec3eedbb315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf734deb2c48247e06603262145aec3eedbb315/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f37a5df1b4873ab2a4562fca04dc6454817429", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f37a5df1b4873ab2a4562fca04dc6454817429", "html_url": "https://github.com/rust-lang/rust/commit/37f37a5df1b4873ab2a4562fca04dc6454817429"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "49090a57f62a17a6c796380735aee2c7b17f07d8", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ddf734deb2c48247e06603262145aec3eedbb315/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf734deb2c48247e06603262145aec3eedbb315/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=ddf734deb2c48247e06603262145aec3eedbb315", "patch": "@@ -210,22 +210,7 @@ impl<'a> Parser<'a> {\n                         self.parse_pat_range_starting_with_lit(begin)?\n                     }\n                     Ok(begin) => PatKind::Lit(begin),\n-                    Err(mut err) => {\n-                        self.cancel(&mut err);\n-                        let expected = expected.unwrap_or(\"pattern\");\n-                        let msg = format!(\n-                            \"expected {}, found {}\",\n-                            expected,\n-                            self.this_token_descr(),\n-                        );\n-                        let mut err = self.fatal(&msg);\n-                        err.span_label(self.token.span, format!(\"expected {}\", expected));\n-                        let sp = self.sess.source_map().start_point(self.token.span);\n-                        if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-                            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n-                        }\n-                        return Err(err);\n-                    }\n+                    Err(err) => return self.fatal_unexpected_non_pat(err, expected),\n                 }\n             }\n         };\n@@ -365,6 +350,27 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n     }\n \n+    fn fatal_unexpected_non_pat(\n+        &mut self,\n+        mut err: DiagnosticBuilder<'a>,\n+        expected: Option<&'static str>,\n+    ) -> PResult<'a, P<Pat>> {\n+        self.cancel(&mut err);\n+\n+        let expected = expected.unwrap_or(\"pattern\");\n+        let msg = format!(\"expected {}, found {}\", expected, self.this_token_descr());\n+\n+        let mut err = self.fatal(&msg);\n+        err.span_label(self.token.span, format!(\"expected {}\", expected));\n+\n+        let sp = self.sess.source_map().start_point(self.token.span);\n+        if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+        }\n+\n+        Err(err)\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}