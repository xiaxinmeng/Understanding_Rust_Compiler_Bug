{"sha": "1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNDU4MmMxZmZiNDQxZTJiNTU4NzFlMTRjMWI3NTVlODVhMmY3OGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T01:47:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T01:47:34Z"}, "message": "Rollup merge of #60973 - nnethercote:fix-file_metadata-more, r=michaelwoerister\n\nAvoid symbol interning in `file_metadata`.\n\nThis commit changes `created_files` so it uses strings directly as keys,\nrather than symbols derived from the strings. This avoids the cost of\nhaving to do the hash table lookups to produce the symbols from the\nstrings.\n\nThe commit also uses `entry` to avoid doing a repeated hash table lookup\n(`get` + `insert`).\n\nNote that PR #60467 improved this code somewhat; this is a further\nimprovement.\n\nr? @davidtwco", "tree": {"sha": "b9fb912520892ab31147e16ad014c0515e5972d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fb912520892ab31147e16ad014c0515e5972d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5Ko2CRBK7hj4Ov3rIwAAdHIIAFGlmgYQL3ETuZVheyKjuzuP\nCFF1oTAXs92XgeIbPggI6VuGG6THp3s1OBGyLE7I4IEfwwDGhHP65tYZeX6+hSn/\nLLIQyP8YbgUBBRwZT7YQZhPnu00E58yqEJ8M9IiTEJ+Qs7IrHFt4YlMSXwSbFy+4\na5wbzHl2W24/ZSNky2iGVG/MwJM8oTwH6qyGuSXbYpcP4Qmpj0iEe9pGydeVTvrX\nYmJCAHn7b0XA8OJkon0/1me//clt9VI/I9rosqjd22d7lFc0xPAo26LXr4W6fW4Y\n4fABie2S5k7Xxh6t87z8b7n+ASC7YTOWvHWFSVOCmo7Dd1Te4YO84QU8sht5DLc=\n=8q0s\n-----END PGP SIGNATURE-----\n", "payload": "tree b9fb912520892ab31147e16ad014c0515e5972d3\nparent 40a18a1df52ad3b499b002e4493590f553aae954\nparent c5d94017569713c12a7e3d260cb4cd0a02b26372\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558489654 +0200\ncommitter GitHub <noreply@github.com> 1558489654 +0200\n\nRollup merge of #60973 - nnethercote:fix-file_metadata-more, r=michaelwoerister\n\nAvoid symbol interning in `file_metadata`.\n\nThis commit changes `created_files` so it uses strings directly as keys,\nrather than symbols derived from the strings. This avoids the cost of\nhaving to do the hash table lookups to produce the symbols from the\nstrings.\n\nThe commit also uses `entry` to avoid doing a repeated hash table lookup\n(`get` + `insert`).\n\nNote that PR #60467 improved this code somewhat; this is a further\nimprovement.\n\nr? @davidtwco\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "html_url": "https://github.com/rust-lang/rust/commit/1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c4582c1ffb441e2b55871e14c1b755e85a2f78f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a18a1df52ad3b499b002e4493590f553aae954", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a18a1df52ad3b499b002e4493590f553aae954", "html_url": "https://github.com/rust-lang/rust/commit/40a18a1df52ad3b499b002e4493590f553aae954"}, {"sha": "c5d94017569713c12a7e3d260cb4cd0a02b26372", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d94017569713c12a7e3d260cb4cd0a02b26372", "html_url": "https://github.com/rust-lang/rust/commit/c5d94017569713c12a7e3d260cb4cd0a02b26372"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "b000628a3f70653e9653e519cf47b61cf71aff88", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c4582c1ffb441e2b55871e14c1b755e85a2f78f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4582c1ffb441e2b55871e14c1b755e85a2f78f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "patch": "@@ -38,14 +38,15 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_target::abi::HasDataLayout;\n \n use libc::{c_uint, c_longlong};\n+use std::collections::hash_map::Entry;\n use std::ffi::CString;\n use std::fmt::{self, Write};\n use std::hash::{Hash, Hasher};\n use std::iter;\n use std::ptr;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n-use syntax::symbol::{Interner, InternedString, Symbol};\n+use syntax::symbol::{Interner, InternedString};\n use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n@@ -787,49 +788,48 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>,\n            file_name,\n            defining_crate);\n \n-    let file_name = &file_name.to_string();\n-    let file_name_symbol = Symbol::intern(file_name);\n-    if defining_crate == LOCAL_CRATE {\n-        let directory = &cx.sess().working_dir.0.to_string_lossy();\n-        file_metadata_raw(cx, file_name, Some(file_name_symbol),\n-                          directory, Some(Symbol::intern(directory)))\n+    let file_name = Some(file_name.to_string());\n+    let directory = if defining_crate == LOCAL_CRATE {\n+        Some(cx.sess().working_dir.0.to_string_lossy().to_string())\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n-        file_metadata_raw(cx, file_name, Some(file_name_symbol), \"\", None)\n-    }\n+        None\n+    };\n+    file_metadata_raw(cx, file_name, directory)\n }\n \n pub fn unknown_file_metadata(cx: &CodegenCx<'ll, '_>) -> &'ll DIFile {\n-    file_metadata_raw(cx, \"<unknown>\", None, \"\", None)\n+    file_metadata_raw(cx, None, None)\n }\n \n fn file_metadata_raw(cx: &CodegenCx<'ll, '_>,\n-                     file_name: &str,\n-                     file_name_symbol: Option<Symbol>,\n-                     directory: &str,\n-                     directory_symbol: Option<Symbol>)\n+                     file_name: Option<String>,\n+                     directory: Option<String>)\n                      -> &'ll DIFile {\n-    let key = (file_name_symbol, directory_symbol);\n+    let key = (file_name, directory);\n+\n+    match debug_context(cx).created_files.borrow_mut().entry(key) {\n+        Entry::Occupied(o) => return o.get(),\n+        Entry::Vacant(v) => {\n+            let (file_name, directory) = v.key();\n+            debug!(\"file_metadata: file_name: {:?}, directory: {:?}\", file_name, directory);\n+\n+            let file_name = SmallCStr::new(\n+                if let Some(file_name) = file_name { &file_name } else { \"<unknown>\" });\n+            let directory = SmallCStr::new(\n+                if let Some(directory) = directory { &directory } else { \"\" });\n+\n+            let file_metadata = unsafe {\n+                llvm::LLVMRustDIBuilderCreateFile(DIB(cx),\n+                                                  file_name.as_ptr(),\n+                                                  directory.as_ptr())\n+            };\n \n-    if let Some(file_metadata) = debug_context(cx).created_files.borrow().get(&key) {\n-        return *file_metadata;\n+            v.insert(file_metadata);\n+            file_metadata\n+        }\n     }\n-\n-    debug!(\"file_metadata: file_name: {}, directory: {}\", file_name, directory);\n-\n-    let file_name = SmallCStr::new(file_name);\n-    let directory = SmallCStr::new(directory);\n-\n-    let file_metadata = unsafe {\n-        llvm::LLVMRustDIBuilderCreateFile(DIB(cx),\n-                                          file_name.as_ptr(),\n-                                          directory.as_ptr())\n-    };\n-\n-    let mut created_files = debug_context(cx).created_files.borrow_mut();\n-    created_files.insert(key, file_metadata);\n-    file_metadata\n }\n \n fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {"}, {"sha": "527290392fff45a27f73ef22404f7d37f6d22f5a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c4582c1ffb441e2b55871e14c1b755e85a2f78f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4582c1ffb441e2b55871e14c1b755e85a2f78f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=1c4582c1ffb441e2b55871e14c1b755e85a2f78f", "patch": "@@ -37,7 +37,7 @@ use std::ffi::CString;\n \n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::InternedString;\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n \n@@ -63,7 +63,7 @@ pub struct CrateDebugContext<'a, 'tcx> {\n     llcontext: &'a llvm::Context,\n     llmod: &'a llvm::Module,\n     builder: &'a mut DIBuilder<'a>,\n-    created_files: RefCell<FxHashMap<(Option<Symbol>, Option<Symbol>), &'a DIFile>>,\n+    created_files: RefCell<FxHashMap<(Option<String>, Option<String>), &'a DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), &'a DIType>>,\n \n     type_map: RefCell<TypeMap<'a, 'tcx>>,"}]}