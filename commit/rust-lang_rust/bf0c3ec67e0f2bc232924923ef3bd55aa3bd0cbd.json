{"sha": "bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGMzZWM2N2UwZjJiYzIzMjkyNDkyM2VmM2JkNTVhYTNiZDBjYmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-13T17:02:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T17:02:32Z"}, "message": "Merge #3583\n\n3583: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "97487f9714a7efffc51a7ae6172e3bda79e2303b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97487f9714a7efffc51a7ae6172e3bda79e2303b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea7yoCRBK7hj4Ov3rIwAAdHIIAFN9NZw0/T3ajoAnvEEPYFa5\n2H9xAhZdQXyBM6mmDbepy/70VzC5zWT7I2YTRu1KpMeM46m+thQkeLOwrGmvXIeA\nty6ONw98/Jy/4GmKlsAZbQp8mTAt5334f1U8PiCxzR39WunBvK1DVtkkgMz4uH+8\ntcnWqV1Nl9+jRha8CPBbnVrWrwxDWEHRTLQ9GbaQQkRbH5jKEz57/1HL/UC0DMN7\ncdNHKumh5K76vhCpWRXg0h7N+vY5lZA5EjVReUNa9JYxQkhXXKr4tmPe3ZYPlKkg\n1sR62Fnw3eOXNnuKlFE3K61OFq6CEzqeN3wv6ISYXcdHfP7IEm60wyBFrzW3La0=\n=RNAp\n-----END PGP SIGNATURE-----\n", "payload": "tree 97487f9714a7efffc51a7ae6172e3bda79e2303b\nparent 4c85e53531fc9e2e2c2f1368c01e08e10e190cd5\nparent 6eb05c4a14bf233b1a6774074b526b54420deb9d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584118952 +0000\ncommitter GitHub <noreply@github.com> 1584118952 +0000\n\nMerge #3583\n\n3583: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "html_url": "https://github.com/rust-lang/rust/commit/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5", "html_url": "https://github.com/rust-lang/rust/commit/4c85e53531fc9e2e2c2f1368c01e08e10e190cd5"}, {"sha": "6eb05c4a14bf233b1a6774074b526b54420deb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb05c4a14bf233b1a6774074b526b54420deb9d", "html_url": "https://github.com/rust-lang/rust/commit/6eb05c4a14bf233b1a6774074b526b54420deb9d"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "45558c4487b44bd1db5e42775b659290df0d60be", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "patch": "@@ -37,15 +37,14 @@ pub struct SubstituteTypeParams<'a> {\n impl<'a> SubstituteTypeParams<'a> {\n     pub fn for_trait_impl(\n         source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-        db: &'a RootDatabase,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n         impl_def: ast::ImplDef,\n     ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_def).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: FxHashMap<_, _> = generic_def\n-            .params(db)\n+            .params(source_scope.db)\n             .into_iter()\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n@@ -104,17 +103,15 @@ impl<'a> AstTransform<'a> for SubstituteTypeParams<'a> {\n pub struct QualifyPaths<'a> {\n     target_scope: &'a SemanticsScope<'a, RootDatabase>,\n     source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-    db: &'a RootDatabase,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n impl<'a> QualifyPaths<'a> {\n     pub fn new(\n         target_scope: &'a SemanticsScope<'a, RootDatabase>,\n         source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-        db: &'a RootDatabase,\n     ) -> Self {\n-        Self { target_scope, source_scope, db, previous: Box::new(NullTransformer) }\n+        Self { target_scope, source_scope, previous: Box::new(NullTransformer) }\n     }\n \n     fn get_substitution_inner(\n@@ -132,7 +129,7 @@ impl<'a> QualifyPaths<'a> {\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_use_path(self.db, def)?;\n+                let found_path = from.find_use_path(self.source_scope.db, def)?;\n                 let mut path = path_to_ast(found_path);\n \n                 let type_args = p"}, {"sha": "e5920b6f67f25c159d819fd24e1724fdec17e796", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "patch": "@@ -142,8 +142,8 @@ fn add_missing_impl_members_inner(\n         let n_existing_items = impl_item_list.impl_items().count();\n         let source_scope = sema.scope_for_def(trait_);\n         let target_scope = sema.scope(impl_item_list.syntax());\n-        let ast_transform = QualifyPaths::new(&target_scope, &source_scope, sema.db)\n-            .or(SubstituteTypeParams::for_trait_impl(&source_scope, sema.db, trait_, impl_node));\n+        let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n+            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_node));\n         let items = missing_items\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))"}, {"sha": "97cf90ae421759c00e61e3dd443abbfdda392e79", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use hir::{db::HirDatabase, Adt, HasSource, Semantics};\n+use hir::{Adt, HasSource, Semantics};\n use ra_syntax::ast::{self, edit::IndentLevel, make, AstNode, NameOwner};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -88,11 +88,7 @@ fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n     })\n }\n \n-fn build_pat(\n-    db: &impl HirDatabase,\n-    module: hir::Module,\n-    var: hir::EnumVariant,\n-) -> Option<ast::Pat> {\n+fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n     let path = crate::ast_transform::path_to_ast(module.find_use_path(db, var.into())?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though"}, {"sha": "25384860296eab991477c659ef52855c6a03ad67", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n+use hir::{Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n@@ -9,7 +9,10 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use crate::display::{const_label, macro_label, type_label, FunctionSignature};\n+use crate::{\n+    display::{const_label, macro_label, type_label, FunctionSignature},\n+    RootDatabase,\n+};\n \n impl Completions {\n     pub(crate) fn add_field(\n@@ -300,7 +303,7 @@ impl Completions {\n     }\n }\n \n-fn is_deprecated(node: impl HasAttrs, db: &impl HirDatabase) -> bool {\n+fn is_deprecated(node: impl HasAttrs, db: &RootDatabase) -> bool {\n     node.attrs(db).by_key(\"deprecated\").exists()\n }\n "}, {"sha": "cb2cd2479fe469b989eecb0ca732f3b7885bd823", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=bf0c3ec67e0f2bc232924923ef3bd55aa3bd0cbd", "patch": "@@ -213,23 +213,23 @@ fn foo() {\n         type_char(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                 <|>\n             }\n             \",\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     .\n             }\n             \",\n         );\n         type_char_noop(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     <|>\n             }\n             \",\n@@ -241,23 +241,23 @@ fn foo() {\n         type_char(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                 <|>;\n             }\n             \",\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     .;\n             }\n             \",\n         );\n         type_char_noop(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     <|>;\n             }\n             \",\n@@ -269,15 +269,15 @@ fn foo() {\n         type_char(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     .first()\n                 <|>\n             }\n             \",\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     .first()\n                     .\n             }\n@@ -286,8 +286,8 @@ fn foo() {\n         type_char_noop(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n+            fn main() {\n+                xs.foo()\n                     .first()\n                     <|>\n             }\n@@ -334,15 +334,15 @@ fn foo() {\n         type_char_noop(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+            fn main() {\n                 <|>\n             }\n             \",\n         );\n         type_char_noop(\n             '.',\n             r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+            fn main() {\n             <|>\n             }\n             \","}]}