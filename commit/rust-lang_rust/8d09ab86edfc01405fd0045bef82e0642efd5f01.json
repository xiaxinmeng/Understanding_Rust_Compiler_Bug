{"sha": "8d09ab86edfc01405fd0045bef82e0642efd5f01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDlhYjg2ZWRmYzAxNDA1ZmQwMDQ1YmVmODJlMDY0MmVmZDVmMDE=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-23T11:28:31Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-24T11:34:00Z"}, "message": "SSR: Disable matching within use declarations\n\nIt currently does the wrong thing when the use declaration contains\nbraces.", "tree": {"sha": "49f596f170803e7eadaa9007dc7e947c01be9014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f596f170803e7eadaa9007dc7e947c01be9014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d09ab86edfc01405fd0045bef82e0642efd5f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d09ab86edfc01405fd0045bef82e0642efd5f01", "html_url": "https://github.com/rust-lang/rust/commit/8d09ab86edfc01405fd0045bef82e0642efd5f01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d09ab86edfc01405fd0045bef82e0642efd5f01/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f500b0ee55443a52f078060004c911a7532a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f500b0ee55443a52f078060004c911a7532a14", "html_url": "https://github.com/rust-lang/rust/commit/63f500b0ee55443a52f078060004c911a7532a14"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "141e7d026dae96813cc7794d53c503782c6c51f6", "filename": "crates/ra_ssr/src/search.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8d09ab86edfc01405fd0045bef82e0642efd5f01/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d09ab86edfc01405fd0045bef82e0642efd5f01/crates%2Fra_ssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fsearch.rs?ref=8d09ab86edfc01405fd0045bef82e0642efd5f01", "patch": "@@ -10,7 +10,8 @@ use ra_ide_db::{\n     defs::Definition,\n     search::{Reference, SearchScope},\n };\n-use ra_syntax::{ast, AstNode, SyntaxNode};\n+use ra_syntax::{ast, AstNode, SyntaxKind, SyntaxNode};\n+use test_utils::mark;\n \n /// A cache for the results of find_usages. This is for when we have multiple patterns that have the\n /// same path. e.g. if the pattern was `foo::Bar` that can parse as a path, an expression, a type\n@@ -59,6 +60,10 @@ impl<'db> MatchFinder<'db> {\n                         .skip(first_path.depth as usize)\n                         .next()\n                     {\n+                        if !is_search_permitted_ancestors(&node_to_match) {\n+                            mark::hit!(use_declaration_with_braces);\n+                            continue;\n+                        }\n                         if let Ok(m) =\n                             matching::get_match(false, rule, &node_to_match, &None, &self.sema)\n                         {\n@@ -123,6 +128,9 @@ impl<'db> MatchFinder<'db> {\n         restrict_range: &Option<FileRange>,\n         matches_out: &mut Vec<Match>,\n     ) {\n+        if !is_search_permitted(code) {\n+            return;\n+        }\n         if let Ok(m) = matching::get_match(false, rule, &code, restrict_range, &self.sema) {\n             matches_out.push(m);\n         }\n@@ -149,6 +157,25 @@ impl<'db> MatchFinder<'db> {\n     }\n }\n \n+/// Returns whether we support matching within `node` and all of its ancestors.\n+fn is_search_permitted_ancestors(node: &SyntaxNode) -> bool {\n+    if let Some(parent) = node.parent() {\n+        if !is_search_permitted_ancestors(&parent) {\n+            return false;\n+        }\n+    }\n+    is_search_permitted(node)\n+}\n+\n+/// Returns whether we support matching within this kind of node.\n+fn is_search_permitted(node: &SyntaxNode) -> bool {\n+    // FIXME: Properly handle use declarations. At the moment, if our search pattern is `foo::bar`\n+    // and the code is `use foo::{baz, bar}`, we'll match `bar`, since it resolves to `foo::bar`.\n+    // However we'll then replace just the part we matched `bar`. We probably need to instead remove\n+    // `bar` and insert a new use declaration.\n+    node.kind() != SyntaxKind::USE_ITEM\n+}\n+\n impl UsageCache {\n     fn find(&mut self, definition: &Definition) -> Option<&[Reference]> {\n         // We expect a very small number of cache entries (generally 1), so a linear scan should be"}, {"sha": "f564c61298dc06c409cbd3f9ec54f1cad948a4a1", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8d09ab86edfc01405fd0045bef82e0642efd5f01/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d09ab86edfc01405fd0045bef82e0642efd5f01/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=8d09ab86edfc01405fd0045bef82e0642efd5f01", "patch": "@@ -804,3 +804,26 @@ fn overlapping_possible_matches() {\n         &[\"foo(foo(42))\", \"foo(foo(foo(foo(42))))\"],\n     );\n }\n+\n+#[test]\n+fn use_declaration_with_braces() {\n+    // It would be OK for a path rule to match and alter a use declaration. We shouldn't mess it up\n+    // though. In particular, we must not change `use foo::{baz, bar}` to `use foo::{baz,\n+    // foo2::bar2}`.\n+    mark::check!(use_declaration_with_braces);\n+    assert_ssr_transform(\n+        \"foo::bar ==>> foo2::bar2\",\n+        r#\"\n+        mod foo { pub fn bar() {} pub fn baz() {} }\n+        mod foo2 { pub fn bar2() {} }\n+        use foo::{baz, bar};\n+        fn main() { bar() }\n+        \"#,\n+        expect![[\"\n+        mod foo { pub fn bar() {} pub fn baz() {} }\n+        mod foo2 { pub fn bar2() {} }\n+        use foo::{baz, bar};\n+        fn main() { foo2::bar2() }\n+        \"]],\n+    )\n+}"}]}