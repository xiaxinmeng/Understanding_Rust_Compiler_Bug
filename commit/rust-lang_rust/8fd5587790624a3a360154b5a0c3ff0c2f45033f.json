{"sha": "8fd5587790624a3a360154b5a0c3ff0c2f45033f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZDU1ODc3OTA2MjRhM2EzNjAxNTRiNWEwYzNmZjBjMmY0NTAzM2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T16:34:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T16:34:51Z"}, "message": "Rollup merge of #60601 - SimonSapin:cast, r=Kimundi\n\nAdd a `cast` method to raw pointers.\n\nThis is similar to `NonNull::cast`.\n\nCompared to the `as` operator (which has a wide range of meanings depending on the input and output types), a call to this method:\n\n* Can only go from a raw pointer to a raw pointer\n* Cannot change the pointer\u2019s `const`ness\n\n\u2026 even when the pointed types are inferred based on context.", "tree": {"sha": "55ca5c45abf2b16fb1c760d935c1f4299ed0404e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ca5c45abf2b16fb1c760d935c1f4299ed0404e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fd5587790624a3a360154b5a0c3ff0c2f45033f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1FarCRBK7hj4Ov3rIwAAdHIIAEQvMJ3k6hB8bQZ5Z3cEEfzZ\nWr1ObbbfEkG6AOZaYmBEpPLfkJ7bZK4A5bGlcf1y2UJMO8rDrq28w+jF6kuKQMne\n81YLgNedvYzF1/HlVQl7Hpf9qbx713GtXrE193RU2LWlfPKzdcz8U5fMv2uF9yHc\nbZnNLwBpG1EehDuW5fzr0z/IVNMD++Kgv2DJcxRgZAGDCJsHBrnxUIFH0EdECF5A\nHYhMkGyY/yGeBVpnPXq7JDDCOJ2wioBEhaR+ca8KhtElKNxpLPX1mOu34goufUBm\n9GRdhm3imkR4OU1rGDm/8hw6mKoZbt9n6H2iz3gA2BPnrrEY/KO+GJ8ab03j624=\n=tksd\n-----END PGP SIGNATURE-----\n", "payload": "tree 55ca5c45abf2b16fb1c760d935c1f4299ed0404e\nparent ef01f29964df207f181bd5bcf236e41372a17273\nparent d5e819015f550bedb27bc287f96f3937bb831cd5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557419691 +0200\ncommitter GitHub <noreply@github.com> 1557419691 +0200\n\nRollup merge of #60601 - SimonSapin:cast, r=Kimundi\n\nAdd a `cast` method to raw pointers.\n\nThis is similar to `NonNull::cast`.\n\nCompared to the `as` operator (which has a wide range of meanings depending on the input and output types), a call to this method:\n\n* Can only go from a raw pointer to a raw pointer\n* Cannot change the pointer\u2019s `const`ness\n\n\u2026 even when the pointed types are inferred based on context.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd5587790624a3a360154b5a0c3ff0c2f45033f", "html_url": "https://github.com/rust-lang/rust/commit/8fd5587790624a3a360154b5a0c3ff0c2f45033f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fd5587790624a3a360154b5a0c3ff0c2f45033f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef01f29964df207f181bd5bcf236e41372a17273", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef01f29964df207f181bd5bcf236e41372a17273", "html_url": "https://github.com/rust-lang/rust/commit/ef01f29964df207f181bd5bcf236e41372a17273"}, {"sha": "d5e819015f550bedb27bc287f96f3937bb831cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e819015f550bedb27bc287f96f3937bb831cd5", "html_url": "https://github.com/rust-lang/rust/commit/d5e819015f550bedb27bc287f96f3937bb831cd5"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "6355bcdcab2fa895e06a89273c7d333ae9ce9960", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8fd5587790624a3a360154b5a0c3ff0c2f45033f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd5587790624a3a360154b5a0c3ff0c2f45033f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8fd5587790624a3a360154b5a0c3ff0c2f45033f", "patch": "@@ -974,6 +974,13 @@ impl<T: ?Sized> *const T {\n         (self as *const u8) == null()\n     }\n \n+    /// Cast to a pointer to a different type\n+    #[unstable(feature = \"ptr_cast\", issue = \"60602\")]\n+    #[inline]\n+    pub const fn cast<U>(self) -> *const U {\n+        self as _\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a reference to\n     /// the value wrapped in `Some`.\n     ///\n@@ -1593,6 +1600,13 @@ impl<T: ?Sized> *mut T {\n         (self as *mut u8) == null_mut()\n     }\n \n+    /// Cast to a pointer to a different type\n+    #[unstable(feature = \"ptr_cast\", issue = \"60602\")]\n+    #[inline]\n+    pub const fn cast<U>(self) -> *mut U {\n+        self as _\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a reference to\n     /// the value wrapped in `Some`.\n     ///"}]}