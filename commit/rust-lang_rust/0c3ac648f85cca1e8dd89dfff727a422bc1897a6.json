{"sha": "0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjM2FjNjQ4Zjg1Y2NhMWU4ZGQ4OWRmZmY3MjdhNDIyYmMxODk3YTY=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-04T12:44:12Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-14T13:07:21Z"}, "message": "Make `Clone` a lang item and generate builtin impls.\nFixes #28229.\nFixes #24000.", "tree": {"sha": "21de26a97b51002f5c3cd7f0f700e8ab0b4433b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21de26a97b51002f5c3cd7f0f700e8ab0b4433b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "html_url": "https://github.com/rust-lang/rust/commit/0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ff235490917e7cd351398d72557b3205474135", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ff235490917e7cd351398d72557b3205474135", "html_url": "https://github.com/rust-lang/rust/commit/b1ff235490917e7cd351398d72557b3205474135"}], "stats": {"total": 345, "additions": 313, "deletions": 32}, "files": [{"sha": "0d9f9d16d82e76180954162f98680df6f28f5d83", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -124,6 +124,7 @@ macro_rules! array_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             impl<T:Copy> Clone for [T; $N] {\n                 fn clone(&self) -> [T; $N] {\n                     *self"}, {"sha": "2dc51718b97b23e0e0a7a491dd091f340585efbb", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -88,6 +88,7 @@\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(stage0), lang = \"clone\")]\n pub trait Clone : Sized {\n     /// Returns a copy of the value.\n     ///\n@@ -131,6 +132,7 @@ pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: ::marker::PhantomData\n pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: ::marker::PhantomData<T> }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<'a, T: ?Sized> Clone for &'a T {\n     /// Returns a shallow copy of the reference.\n     #[inline]\n@@ -140,6 +142,7 @@ impl<'a, T: ?Sized> Clone for &'a T {\n macro_rules! clone_impl {\n     ($t:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(stage0)]\n         impl Clone for $t {\n             /// Returns a deep copy of the value.\n             #[inline]"}, {"sha": "63e9373e936068cc2085e6f8750abfbdcf9159ec", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -876,6 +876,7 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: ?Sized> Clone for *const T {\n     #[inline]\n     fn clone(&self) -> *const T {\n@@ -884,6 +885,7 @@ impl<T: ?Sized> Clone for *const T {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: ?Sized> Clone for *mut T {\n     #[inline]\n     fn clone(&self) -> *mut T {\n@@ -895,6 +897,7 @@ impl<T: ?Sized> Clone for *mut T {\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg(stage0)]\n         impl<Ret, $($Arg),*> Clone for $FnTy {\n             #[inline]\n             fn clone(&self) -> Self {"}, {"sha": "555843dba418ecaeebb88d3c36015865edfb46fd", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -22,6 +22,7 @@ macro_rules! tuple_impls {\n     )+) => {\n         $(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg(stage0)]\n             impl<$($T:Clone),+> Clone for ($($T,)+) {\n                 fn clone(&self) -> ($($T,)+) {\n                     ($(self.$idx.clone(),)+)"}, {"sha": "5b75ce7864f8d6fad964c52e0f434b3cc8aebf5c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -721,6 +721,10 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::In\n                 def_id.hash_stable(hcx, hasher);\n                 t.hash_stable(hcx, hasher);\n             }\n+            ty::InstanceDef::BuiltinShim(def_id, t) => {\n+                def_id.hash_stable(hcx, hasher);\n+                t.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "8cee88bd39b7ff45f5023b89e9266e48afdf343e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -274,6 +274,7 @@ language_item_table! {\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n     UnsizeTraitLangItem,             \"unsize\",                  unsize_trait;\n     CopyTraitLangItem,               \"copy\",                    copy_trait;\n+    CloneTraitLangItem,              \"clone\",                   clone_trait;\n     SyncTraitLangItem,               \"sync\",                    sync_trait;\n     FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n \n@@ -320,6 +321,9 @@ language_item_table! {\n \n     StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n \n+    CloneMethodLangItem,             \"clone_method\",            clone_method;\n+    CloneFromMethodLangItem,         \"clone_from_method\",       clone_from_method;\n+\n     // A number of panic-related lang items. The `panic` item corresponds to\n     // divide-by-zero and various panic cases with `match`. The\n     // `panic_bounds_check` item is for indexing arrays."}, {"sha": "1c6d75ace52e654af8aaf283dadafdc0fb70ebc9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -301,7 +301,7 @@ pub enum Vtable<'tcx, N> {\n     VtableObject(VtableObjectData<'tcx, N>),\n \n     /// Successful resolution for a builtin trait.\n-    VtableBuiltin(VtableBuiltinData<N>),\n+    VtableBuiltin(VtableBuiltinData<'tcx, N>),\n \n     /// Vtable automatically generated for a closure. The def ID is the ID\n     /// of the closure expression. This is a `VtableImpl` in spirit, but the\n@@ -345,7 +345,9 @@ pub struct VtableDefaultImplData<N> {\n }\n \n #[derive(Clone)]\n-pub struct VtableBuiltinData<N> {\n+pub struct VtableBuiltinData<'tcx, N> {\n+    /// `ty` can be used for generating shim for builtin implementations like `Clone::clone`.\n+    pub ty: ty::Ty<'tcx>,\n     pub nested: Vec<N>\n }\n \n@@ -769,6 +771,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             }),\n             VtableParam(n) => VtableParam(n.into_iter().map(f).collect()),\n             VtableBuiltin(i) => VtableBuiltin(VtableBuiltinData {\n+                ty: i.ty,\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n             VtableObject(o) => VtableObject(VtableObjectData {"}, {"sha": "88cca70993e9a5a71422e271296a2161793bbb4a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -1296,6 +1296,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n          } else if self.tcx().lang_items.unsize_trait() == Some(def_id) {\n              self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n          } else {\n+            if self.tcx().lang_items.clone_trait() == Some(def_id) {\n+                // Same builtin conditions as `Copy`, i.e. every type which has builtin support\n+                // for `Copy` also has builtin support for `Clone`, + tuples and arrays of `Clone`\n+                // types have builtin support for `Clone`.\n+                let clone_conditions = self.copy_conditions(obligation);\n+                self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates)?;\n+            }\n+\n              self.assemble_closure_candidates(obligation, &mut candidates)?;\n              self.assemble_fn_pointer_candidates(obligation, &mut candidates)?;\n              self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n@@ -2164,8 +2172,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         match candidate {\n             BuiltinCandidate { has_nested } => {\n-                Ok(VtableBuiltin(\n-                    self.confirm_builtin_candidate(obligation, has_nested)))\n+                let data = self.confirm_builtin_candidate(obligation, has_nested);\n+                Ok(VtableBuiltin(data))\n             }\n \n             ParamCandidate(param) => {\n@@ -2257,7 +2265,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn confirm_builtin_candidate(&mut self,\n                                  obligation: &TraitObligation<'tcx>,\n                                  has_nested: bool)\n-                                 -> VtableBuiltinData<PredicateObligation<'tcx>>\n+                                 -> VtableBuiltinData<'tcx, PredicateObligation<'tcx>>\n     {\n         debug!(\"confirm_builtin_candidate({:?}, {:?})\",\n                obligation, has_nested);\n@@ -2271,6 +2279,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 _ if Some(trait_def) == self.tcx().lang_items.copy_trait() => {\n                     self.copy_conditions(obligation)\n                 }\n+                _ if Some(trait_def) == self.tcx().lang_items.clone_trait() => {\n+                    self.copy_conditions(obligation)\n+                }\n                 _ => bug!(\"unexpected builtin trait {:?}\", trait_def)\n             };\n             let nested = match conditions {\n@@ -2291,7 +2302,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         debug!(\"confirm_builtin_candidate: obligations={:?}\",\n                obligations);\n-        VtableBuiltinData { nested: obligations }\n+\n+        let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());\n+        VtableBuiltinData { ty: self_ty, nested: obligations }\n     }\n \n     /// This handles the case where a `impl Foo for ..` impl is being used.\n@@ -2598,8 +2611,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n     fn confirm_builtin_unsize_candidate(&mut self,\n                                         obligation: &TraitObligation<'tcx>,)\n-                                        -> Result<VtableBuiltinData<PredicateObligation<'tcx>>,\n-                                                  SelectionError<'tcx>> {\n+        -> Result<VtableBuiltinData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n+    {\n         let tcx = self.tcx();\n \n         // assemble_candidates_for_unsizing should ensure there are no late bound\n@@ -2801,7 +2814,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => bug!()\n         };\n \n-        Ok(VtableBuiltinData { nested: nested })\n+        Ok(VtableBuiltinData { ty: source, nested: nested })\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "a83849898f5875b4dc4212406627bb42ec4107c5", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -86,9 +86,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"VtableBuiltin(nested={:?})\", self.nested)\n+        write!(f, \"VtableBuiltin(ty={:?}, nested={:?})\", self.ty, self.nested)\n     }\n }\n \n@@ -300,7 +300,14 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                 })\n             }\n             traits::VtableParam(n) => Some(traits::VtableParam(n)),\n-            traits::VtableBuiltin(d) => Some(traits::VtableBuiltin(d)),\n+            traits::VtableBuiltin(traits::VtableBuiltinData { ty, nested }) => {\n+                tcx.lift(&ty).map(|ty| {\n+                    traits::VtableBuiltin(traits::VtableBuiltinData {\n+                        ty,\n+                        nested,\n+                    })\n+                })\n+            }\n             traits::VtableObject(traits::VtableObjectData {\n                 upcast_trait_ref,\n                 vtable_base,\n@@ -378,9 +385,10 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultIm\n     }\n }\n \n-impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<'tcx, N> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         traits::VtableBuiltinData {\n+            ty: self.ty.fold_with(folder),\n             nested: self.nested.fold_with(folder),\n         }\n     }"}, {"sha": "e8daf7c09f4f2aa79a858274082d6e80ea0c9f3b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -24,15 +24,22 @@ pub struct Instance<'tcx> {\n pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),\n-    // <fn() as FnTrait>::call_*\n-    // def-id is FnTrait::call_*\n+\n+    /// <fn() as FnTrait>::call_*\n+    /// def-id is FnTrait::call_*\n     FnPtrShim(DefId, Ty<'tcx>),\n-    // <Trait as Trait>::fn\n+\n+    /// <Trait as Trait>::fn\n     Virtual(DefId, usize),\n-    // <[mut closure] as FnOnce>::call_once\n+\n+    /// <[mut closure] as FnOnce>::call_once\n     ClosureOnceShim { call_once: DefId },\n-    // drop_in_place::<T>; None for empty drop glue.\n+\n+    /// drop_in_place::<T>; None for empty drop glue.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n+\n+    /// Builtin method implementation, e.g. `Clone::clone`.\n+    BuiltinShim(DefId, Ty<'tcx>),\n }\n \n impl<'tcx> InstanceDef<'tcx> {\n@@ -43,9 +50,9 @@ impl<'tcx> InstanceDef<'tcx> {\n             InstanceDef::FnPtrShim(def_id, _) |\n             InstanceDef::Virtual(def_id, _) |\n             InstanceDef::Intrinsic(def_id, ) |\n-            InstanceDef::ClosureOnceShim { call_once: def_id }\n-                => def_id,\n-            InstanceDef::DropGlue(def_id, _) => def_id\n+            InstanceDef::ClosureOnceShim { call_once: def_id } |\n+            InstanceDef::DropGlue(def_id, _) |\n+            InstanceDef::BuiltinShim(def_id, _) => def_id\n         }\n     }\n \n@@ -80,6 +87,9 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n             InstanceDef::DropGlue(_, ty) => {\n                 write!(f, \" - shim({:?})\", ty)\n             }\n+            InstanceDef::BuiltinShim(_, ty) => {\n+                write!(f, \" - shim({:?})\", ty)\n+            }\n         }\n     }\n }"}, {"sha": "81a0af63942ed930dccff2a7cee8960ac660e4ee", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -2227,7 +2227,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::Virtual(..) |\n             ty::InstanceDef::ClosureOnceShim { .. } |\n-            ty::InstanceDef::DropGlue(..) => {\n+            ty::InstanceDef::DropGlue(..) |\n+            ty::InstanceDef::BuiltinShim(..) => {\n                 self.mir_shims(instance)\n             }\n         }"}, {"sha": "cb1a2f6b1077e69a83378aef80864ba0f611810a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 175, "deletions": 4, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -17,6 +17,7 @@ use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n+use rustc_const_math::{ConstInt, ConstUsize};\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n@@ -98,14 +99,26 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         ty::InstanceDef::DropGlue(def_id, ty) => {\n             build_drop_shim(tcx, def_id, ty)\n         }\n+        ty::InstanceDef::BuiltinShim(def_id, ty) => {\n+            let name = tcx.item_name(def_id).as_str();\n+            let trait_id = tcx.trait_of_item(def_id);\n+            if trait_id == tcx.lang_items.clone_trait() && name == \"clone\" {\n+                build_clone_shim(tcx, def_id, ty)\n+            } else if trait_id == tcx.lang_items.clone_trait() && name == \"clone_from\" {\n+                debug!(\"make_shim({:?}: using default trait implementation\", instance);\n+                return tcx.optimized_mir(def_id);\n+            } else {\n+                bug!(\"builtin shim {:?} not supported\", instance)\n+            }\n+        }\n         ty::InstanceDef::Intrinsic(_) => {\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n         }\n     };\n-        debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n-        no_landing_pads::no_landing_pads(tcx, &mut result);\n-        simplify::simplify_cfg(&mut result);\n-        add_call_guards::CriticalCallEdges.add_call_guards(&mut result);\n+    debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n+    no_landing_pads::no_landing_pads(tcx, &mut result);\n+    simplify::simplify_cfg(&mut result);\n+    add_call_guards::CriticalCallEdges.add_call_guards(&mut result);\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     tcx.alloc_mir(result)\n@@ -259,6 +272,164 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     }\n }\n \n+/// Build a `Clone::clone` shim for `recvr_ty`. Here, `def_id` is `Clone::clone`.\n+fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId,\n+                              recvr_ty: ty::Ty<'tcx>)\n+                              -> Mir<'tcx>\n+{\n+    let sig = tcx.fn_sig(def_id);\n+    let sig = tcx.erase_late_bound_regions(&sig);\n+    let span = tcx.def_span(def_id);\n+\n+    debug!(\"build_clone_shim(def_id={:?})\", def_id);\n+\n+    let mut local_decls = local_decls_for_sig(&sig, span);\n+    let source_info = SourceInfo { span, scope: ARGUMENT_VISIBILITY_SCOPE };\n+\n+    let mut blocks = IndexVec::new();\n+    let block = |blocks: &mut IndexVec<_, _>, statement, kind| {\n+        blocks.push(BasicBlockData {\n+            statements: vec![statement],\n+            terminator: Some(Terminator { source_info, kind }),\n+            is_cleanup: false\n+        })\n+    };\n+\n+    let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n+\n+    let call_clone = |i, ty, rcvr_field, blocks: &mut _, local_decls: &mut IndexVec<_, _>| {\n+        // `func == Clone::clone(&ty) -> ty`\n+        let substs = Substs::for_item(tcx, def_id, |_, _| tcx.types.re_erased, |_, _| ty);\n+        let func = Operand::Constant(box Constant {\n+            span: span,\n+            ty: tcx.mk_fn_def(def_id, substs),\n+            literal: Literal::Value {\n+                value: ConstVal::Function(def_id, substs),\n+            },\n+        });\n+\n+        let ref_loc = Lvalue::Local(\n+            local_decls.push(temp_decl(\n+                Mutability::Not,\n+                tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n+                    ty,\n+                    mutbl: hir::Mutability::MutImmutable,\n+                }),\n+                span\n+            ))\n+        );\n+\n+        let loc = Lvalue::Local(\n+            local_decls.push(temp_decl(\n+                Mutability::Not,\n+                ty,\n+                span\n+            ))\n+        );\n+\n+        // `let ref_loc: &ty = &rcvr_field;`\n+        let statement = Statement {\n+            source_info: source_info,\n+            kind: StatementKind::Assign(\n+                ref_loc.clone(),\n+                Rvalue::Ref(tcx.types.re_erased, BorrowKind::Shared, rcvr_field)\n+            )\n+        };\n+\n+        // `let loc = Clone::clone(ref_loc);`\n+        block(blocks, statement, TerminatorKind::Call {\n+            func,\n+            args: vec![Operand::Consume(ref_loc)],\n+            destination: Some((loc.clone(), BasicBlock::new(i + 1))),\n+            cleanup: None,\n+        });\n+\n+        loc\n+    };\n+\n+    match recvr_ty.sty {\n+        ty::TyArray(ty, len) => {\n+            let mut returns = Vec::new();\n+            for i in 0..len {\n+                let index = ConstUsize::new(i as u64, tcx.sess.target.uint_type).unwrap();\n+                let rcvr_field = rcvr.clone().index(\n+                    Operand::Constant(box Constant {\n+                        span,\n+                        ty: tcx.types.usize,\n+                        literal: Literal::Value {\n+                            value: ConstVal::Integral(ConstInt::Usize(index))\n+                        }\n+                    })\n+                );\n+\n+                // `returns[i] = Clone::clone(&rcvr[i]);`\n+                returns.push(call_clone(i, ty, rcvr_field, &mut blocks, &mut local_decls));\n+            }\n+\n+            // `return [returns[0], returns[1], ..., returns[len - 1]];`\n+            let statement = Statement {\n+                source_info: source_info,\n+                kind: StatementKind::Assign(\n+                    Lvalue::Local(RETURN_POINTER),\n+                    Rvalue::Aggregate(\n+                        box AggregateKind::Array(ty),\n+                        returns.into_iter().map(|loc| Operand::Consume(loc)).collect()\n+                    )\n+                )\n+            };\n+            block(&mut blocks, statement, TerminatorKind::Return);\n+        }\n+        ty::TyTuple(tys, _) => {\n+            let mut returns = Vec::new();\n+            for (i, ity) in tys.iter().enumerate() {\n+                let rcvr_field = rcvr.clone().field(Field::new(i), *ity);\n+\n+                // `returns[i] = Clone::clone(&rcvr.i);`\n+                returns.push(call_clone(i, *ity, rcvr_field, &mut blocks, &mut local_decls));\n+            }\n+\n+            // `return (returns[0], returns[1], ..., returns[tys.len() - 1]);`\n+            let statement = Statement {\n+                source_info: source_info,\n+                kind: StatementKind::Assign(\n+                    Lvalue::Local(RETURN_POINTER),\n+                    Rvalue::Aggregate(\n+                        box AggregateKind::Tuple,\n+                        returns.into_iter().map(|loc| Operand::Consume(loc)).collect()\n+                    )\n+                )\n+            };\n+            block(&mut blocks, statement, TerminatorKind::Return);\n+        }\n+        _ => {\n+            // `return *self;`\n+            let statement = Statement {\n+                source_info: source_info,\n+                kind: StatementKind::Assign(\n+                    Lvalue::Local(RETURN_POINTER),\n+                    Rvalue::Use(Operand::Consume(rcvr))\n+                )\n+            };\n+            block(&mut blocks, statement, TerminatorKind::Return);\n+        }\n+    };\n+\n+    let mir = Mir::new(\n+        blocks,\n+        IndexVec::from_elem_n(\n+            VisibilityScopeData { span: span, parent_scope: None }, 1\n+        ),\n+        IndexVec::new(),\n+        sig.output(),\n+        local_decls,\n+        sig.inputs().len(),\n+        vec![],\n+        span\n+    );\n+    mir\n+}\n+\n /// Build a \"call\" shim for `def_id`. The shim calls the\n /// function specified by `call_kind`, first adjusting its first\n /// argument according to `rcvr_adjustment`."}, {"sha": "4e02810b040cab696bb5e818f29fe6e5d71e9a07", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -699,7 +699,8 @@ fn visit_instance_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         }\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Item(..) |\n-        ty::InstanceDef::FnPtrShim(..) => {\n+        ty::InstanceDef::FnPtrShim(..) |\n+        ty::InstanceDef::BuiltinShim(..) => {\n             output.push(create_fn_trans_item(instance));\n         }\n     }\n@@ -716,7 +717,8 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::FnPtrShim(..) |\n         ty::InstanceDef::DropGlue(..) |\n-        ty::InstanceDef::Intrinsic(_) => return true\n+        ty::InstanceDef::Intrinsic(_) |\n+        ty::InstanceDef::BuiltinShim(..) => return true\n     };\n     match tcx.hir.get_if_local(def_id) {\n         Some(hir_map::NodeForeignItem(..)) => {"}, {"sha": "1936775df0ab3d6e61733e542ec176e026917f12", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -143,6 +143,12 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs\n             }\n         }\n+        traits::VtableBuiltin(ref data) => {\n+            Instance {\n+                def: ty::InstanceDef::BuiltinShim(def_id, data.ty),\n+                substs: rcvr_substs\n+            }\n+        }\n         _ => {\n             bug!(\"static call to invalid vtable: {:?}\", vtbl)\n         }"}, {"sha": "0149714d0b79935ba99545d4df4e873c0a60ddfa", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -361,7 +361,8 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                 InstanceDef::Virtual(..) |\n                                 InstanceDef::Intrinsic(..) |\n                                 InstanceDef::ClosureOnceShim { .. } |\n-                                InstanceDef::DropGlue(..) => {\n+                                InstanceDef::DropGlue(..) |\n+                                InstanceDef::BuiltinShim(..) => {\n                                     bug!(\"partitioning: Encountered unexpected\n                                           root translation item: {:?}\",\n                                           trans_item)\n@@ -603,7 +604,8 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 't\n                 ty::InstanceDef::ClosureOnceShim { .. } |\n                 ty::InstanceDef::Intrinsic(..) |\n                 ty::InstanceDef::DropGlue(..) |\n-                ty::InstanceDef::Virtual(..) => return None\n+                ty::InstanceDef::Virtual(..) |\n+                ty::InstanceDef::BuiltinShim(..) => return None\n             };\n \n             // If this is a method, we want to put it into the same module as"}, {"sha": "a0985102f1ccbe729ee85ef599b387b68731f7e6", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -719,6 +719,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 continue;\n             }\n \n+            self.assemble_builtin_candidates(import_id, trait_def_id, item.clone());\n+\n             self.assemble_extension_candidates_for_trait_impls(import_id, trait_def_id,\n                                                                item.clone());\n \n@@ -732,6 +734,49 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         Ok(())\n     }\n \n+    fn assemble_builtin_candidates(&mut self,\n+                                   import_id: Option<ast::NodeId>,\n+                                   trait_def_id: DefId,\n+                                   item: ty::AssociatedItem) {\n+        if Some(trait_def_id) == self.tcx.lang_items.clone_trait() {\n+            self.assemble_builtin_clone_candidates(import_id, trait_def_id, item);\n+        }\n+    }\n+\n+    fn assemble_builtin_clone_candidates(&mut self,\n+                                         import_id: Option<ast::NodeId>,\n+                                         trait_def_id: DefId,\n+                                         item: ty::AssociatedItem) {\n+        for step in Rc::clone(&self.steps).iter() {\n+            match step.self_ty.sty {\n+                ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n+                ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n+                ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n+                ty::TyRawPtr(..) | ty::TyError | ty::TyNever |\n+                ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) |\n+                ty::TyArray(..) | ty::TyTuple(..) => {\n+                    ()\n+                }\n+\n+                _ => continue,\n+            };\n+\n+            let substs = Substs::for_item(self.tcx,\n+                                          trait_def_id,\n+                                          |def, _| self.region_var_for_def(self.span, def),\n+                                          |def, substs| {\n+                if def.index == 0 {\n+                    step.self_ty\n+                } else {\n+                    self.type_var_for_def(self.span, def, substs)\n+                }\n+            });\n+\n+            let xform_self_ty = self.xform_self_ty(&item, step.self_ty, substs);\n+            self.push_inherent_candidate(xform_self_ty, item, TraitCandidate, import_id);\n+        }\n+    }\n+\n     fn assemble_extension_candidates_for_trait_impls(&mut self,\n                                                      import_id: Option<ast::NodeId>,\n                                                      trait_def_id: DefId,"}, {"sha": "a8fb11f9c62bd58b4f94c71dcaa1cf142e1b0b9a", "filename": "src/test/run-pass/issue-37725.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Ftest%2Frun-pass%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3ac648f85cca1e8dd89dfff727a422bc1897a6/src%2Ftest%2Frun-pass%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-37725.rs?ref=0c3ac648f85cca1e8dd89dfff727a422bc1897a6", "patch": "@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n-    s.clone();\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+fn foo<'a>(s: &'a mut ()) where &'a mut (): Foo {\n+    s.foo();\n }\n fn main() {}"}]}