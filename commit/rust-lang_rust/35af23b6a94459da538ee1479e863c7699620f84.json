{"sha": "35af23b6a94459da538ee1479e863c7699620f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YWYyM2I2YTk0NDU5ZGE1MzhlZTE0NzllODYzYzc2OTk2MjBmODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T10:07:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T10:07:24Z"}, "message": "Auto merge of #1833 - hyd-dev:82261, r=RalfJung\n\nFilter out items other than non-generic functions and statics in our version of `exported_symbols`\n\n[`#[no_mangle]` on a `use` item](https://docs.rs/brotli-decompressor/2.3.1/src/brotli_decompressor/ffi/mod.rs.html#3-5) can make Miri ICE when compiling a dependency (rust-lang/rust#86261):\n```rs\n#[no_mangle]\nuse std::{thread,panic, io, boxed, any, string};\n```\n\n<details>\n\n```\nerror: internal compiler error: compiler/rustc_middle/src/ty/mod.rs:1650:13: item_name: no name for DefPath { data: [DisambiguatedDefPathData { data: Misc, disambiguator: 14 }], krate: crate0 }\n\nthread 'rustc' panicked at 'Box<dyn Any>', compiler/rustc_errors/src/lib.rs:1007:9\nstack backtrace:\n   0: std::panicking::begin_panic\n   1: std::panic::panic_any\n   2: rustc_errors::HandlerInner::bug\n   3: rustc_errors::Handler::bug\n   4: rustc_middle::ty::context::tls::with_opt\n   5: rustc_middle::util::bug::opt_span_bug_fmt\n   6: rustc_middle::util::bug::bug_fmt\n   7: rustc_middle::ty::<impl rustc_middle::ty::context::TyCtxt>::item_name\n   8: rustc_symbol_mangling::symbol_name_provider\n   9: rustc_query_impl::<impl rustc_query_system::query::config::QueryAccessors<rustc_query_impl::plumbing::QueryCtxt> for rustc_query_impl::queries::symbol_name>::compute\n  10: rustc_query_system::query::plumbing::get_query_impl\n  11: <rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine>::symbol_name\n  12: rustc_middle::middle::exported_symbols::ExportedSymbol::symbol_name_for_local_instance\n  13: rustc_codegen_ssa::back::symbol_export::symbol_name_for_instance_in_crate\n  14: rustc_codegen_ssa::back::linker::exported_symbols\n  15: <core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::fold\n  16: rustc_codegen_ssa::back::linker::LinkerInfo::new\n  17: rustc_codegen_ssa::back::write::start_async_codegen\n  18: <rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend>::codegen_crate\n  19: rustc_interface::passes::QueryContext::enter\n  20: rustc_interface::queries::Queries::ongoing_codegen\n  21: rustc_interface::queries::<impl rustc_interface::interface::Compiler>::enter\n  22: rustc_span::with_source_map\n  23: rustc_interface::interface::create_compiler_and_run\n  24: rustc_span::with_session_globals\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.54.0-nightly (a50d72158 2021-06-08) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=1 --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [symbol_name] computing the symbol for `{misc#14}`\nend of query stack\n```\n</details>\n\nThis might be because in #1776, we override the `exported_symbols` query, and our version of `exported_symbols` can return a `use` item which don't have a name if the `use` item is tagged with `#[no_mangle]`, and then:\n- `rustc_codegen_ssa::back::symbol_export::symbol_name_for_instance_in_crate` is called for for every `exported_symbols`: https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler/rustc_codegen_ssa/src/back/linker.rs#L1300-L1304\n- it calls `rustc_middle::middle::exported_symbols::ExportedSymbol::symbol_name_for_local_instance`: https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L412\n- which calls `rustc_symbol_mangling::symbol_name_provider`: https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler/rustc_middle/src/middle/exported_symbols.rs#L37-L44\n- which calls `item_name`: https://github.com/rust-lang/rust/blob/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2/compiler/rustc_symbol_mangling/src/lib.rs#L216, which triggers the ICE\n\nIt might also be problematic for https://github.com/rust-lang/miri/blob/d39f0c64b8b369188a73a655716ab56683a6537b/src/shims/foreign_items.rs#L165 which also uses `item_name`, but Miri cannot compile the dependency, so that code can't be reached.\n\nTherefore, this PR makes `exported_symbols` filter out all items that are not functions or statics, so all items returned will have a name, which avoids the ICE (I have tested it in the https://github.com/jorgecarleitao/arrow2 repository).\n(This PR also includes a commit that fixes a small (unrelated) bug for `#[no_mangle]` on associated functions -- I found that because I notice `#[no_mangle]` is supported on associated functions and they should not be filtered out in `exported_symbols`.)\n\nFixes (when the submodule is bumped) rust-lang/rust#86261.", "tree": {"sha": "c2d6a71bb98e36a17d89b7d4ca90b5061558ac4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d6a71bb98e36a17d89b7d4ca90b5061558ac4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35af23b6a94459da538ee1479e863c7699620f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35af23b6a94459da538ee1479e863c7699620f84", "html_url": "https://github.com/rust-lang/rust/commit/35af23b6a94459da538ee1479e863c7699620f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35af23b6a94459da538ee1479e863c7699620f84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "486b5dfe74ced6ba93953fe91483815138bd370f", "url": "https://api.github.com/repos/rust-lang/rust/commits/486b5dfe74ced6ba93953fe91483815138bd370f", "html_url": "https://github.com/rust-lang/rust/commit/486b5dfe74ced6ba93953fe91483815138bd370f"}, {"sha": "da2ed6f768452777c467a0d1e1a77fb92d9165c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ed6f768452777c467a0d1e1a77fb92d9165c0", "html_url": "https://github.com/rust-lang/rust/commit/da2ed6f768452777c467a0d1e1a77fb92d9165c0"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "d593f24c71ab44ae804bdd1373ff82727df393c5", "filename": "src/bin/miri.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -19,7 +19,7 @@ use log::debug;\n \n use rustc_driver::Compilation;\n use rustc_errors::emitter::{ColorConfig, HumanReadableErrorType};\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::{self as hir, def_id::LOCAL_CRATE, Node};\n use rustc_interface::interface::Config;\n use rustc_middle::{\n     middle::exported_symbols::{ExportedSymbol, SymbolExportLevel},\n@@ -109,12 +109,27 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L62-L63\n                         // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L174\n                         tcx.reachable_set(()).iter().filter_map(|&local_def_id| {\n-                            tcx.codegen_fn_attrs(local_def_id)\n-                                .contains_extern_indicator()\n-                                .then_some((\n-                                    ExportedSymbol::NonGeneric(local_def_id.to_def_id()),\n-                                    SymbolExportLevel::C,\n-                                ))\n+                            // Do the same filtering that rustc does:\n+                            // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L84-L102\n+                            // Otherwise it may cause unexpected behaviours and ICEs\n+                            // (https://github.com/rust-lang/rust/issues/86261).\n+                            let is_reachable_non_generic = matches!(\n+                                tcx.hir().get(tcx.hir().local_def_id_to_hir_id(local_def_id)),\n+                                Node::Item(&hir::Item {\n+                                    kind: hir::ItemKind::Static(..) | hir::ItemKind::Fn(..),\n+                                    ..\n+                                }) | Node::ImplItem(&hir::ImplItem {\n+                                    kind: hir::ImplItemKind::Fn(..),\n+                                    ..\n+                                })\n+                                if !tcx.generics_of(local_def_id).requires_monomorphization(tcx)\n+                            );\n+                            (is_reachable_non_generic\n+                                && tcx.codegen_fn_attrs(local_def_id).contains_extern_indicator())\n+                            .then_some((\n+                                ExportedSymbol::NonGeneric(local_def_id.to_def_id()),\n+                                SymbolExportLevel::C,\n+                            ))\n                         }),\n                     )\n                 }"}, {"sha": "5b241a2fb3c12146bfa8f112c661290c3fe1d442", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -176,7 +176,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 second_crate: tcx.crate_name(cnum),\n                             });\n                         }\n-                        if tcx.def_kind(def_id) != DefKind::Fn {\n+                        if !matches!(tcx.def_kind(def_id), DefKind::Fn | DefKind::AssocFn) {\n                             throw_ub_format!(\n                                 \"attempt to call an exported symbol that is not defined as a function\"\n                             );"}, {"sha": "7f06fdf28dec5eb8beee17506a93be73ca692172", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -21,6 +21,7 @@ dependencies = [\n  \"issue_1691\",\n  \"issue_1705\",\n  \"issue_1760\",\n+ \"issue_rust_86261\",\n  \"rand\",\n  \"serde_derive\",\n ]\n@@ -102,6 +103,10 @@ dependencies = [\n name = \"issue_1760\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"issue_rust_86261\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"libc\"\n version = \"0.2.92\""}, {"sha": "39ce1757f0e4282854fb1d1046356742d0eca3ab", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -15,6 +15,7 @@ issue_1567 = { path = \"issue-1567\" }\n issue_1691 = { path = \"issue-1691\" }\n issue_1705 = { path = \"issue-1705\" }\n issue_1760 = { path = \"issue-1760\" }\n+issue_rust_86261 = { path = \"issue-rust-86261\" }\n \n [dev-dependencies]\n rand = { version = \"0.8\", features = [\"small_rng\"] }"}, {"sha": "db257dcb22c477e5e8d9092d1cfa0ecc2a9b9af6", "filename": "test-cargo-miri/exported-symbol-dep/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -2,3 +2,12 @@\n fn exported_symbol() -> i32 {\n     123456\n }\n+\n+pub struct AssocFn;\n+\n+impl AssocFn {\n+    #[no_mangle]\n+    pub fn assoc_fn_as_exported_symbol() -> i32 {\n+        -123456\n+    }\n+}"}, {"sha": "a6b65ebb5318d71886e2c9a61baf2b5c15c02e7e", "filename": "test-cargo-miri/issue-rust-86261/Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fissue-rust-86261%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fissue-rust-86261%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-rust-86261%2FCargo.toml?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -0,0 +1,5 @@\n+[package]\n+name = \"issue_rust_86261\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\""}, {"sha": "db725fdb64ed923fe27282e75dcb80405fa43fed", "filename": "test-cargo-miri/issue-rust-86261/src/lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fissue-rust-86261%2Fsrc%2Flib.rs?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -0,0 +1,23 @@\n+#![allow(unused_imports, unused_attributes, no_mangle_generic_items)]\n+\n+// Regression test for https://github.com/rust-lang/rust/issues/86261:\n+// `#[no_mangle]` on a `use` item.\n+#[no_mangle]\n+use std::{thread,panic, io, boxed, any, string};\n+\n+// `#[no_mangle]` on a struct has a similar problem.\n+#[no_mangle]\n+pub struct NoMangleStruct;\n+\n+// If `#[no_mangle]` has effect on the `struct` above, calling `NoMangleStruct` will fail with\n+// \"multiple definitions of symbol `NoMangleStruct`\" error.\n+#[export_name = \"NoMangleStruct\"]\n+fn no_mangle_struct() {}\n+\n+// `#[no_mangle]` on a generic function can also cause ICEs.\n+#[no_mangle]\n+fn no_mangle_generic<T>() {}\n+\n+// Same as `no_mangle_struct()` but for the `no_mangle_generic()` generic function.\n+#[export_name = \"no_mangle_generic\"]\n+fn no_mangle_generic2() {}"}, {"sha": "cb1512d0502092e3f59931c7d7964b246e664f2b", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35af23b6a94459da538ee1479e863c7699620f84/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=35af23b6a94459da538ee1479e863c7699620f84", "patch": "@@ -62,15 +62,22 @@ mod test {\n     fn exported_symbol() {\n         extern crate cargo_miri_test;\n         extern crate exported_symbol;\n+        extern crate issue_rust_86261;\n         // Test calling exported symbols in (transitive) dependencies.\n         // Repeat calls to make sure the `Instance` cache is not broken.\n         for _ in 0..3 {\n             extern \"Rust\" {\n                 fn exported_symbol() -> i32;\n+                fn assoc_fn_as_exported_symbol() -> i32;\n                 fn make_true() -> bool;\n+                fn NoMangleStruct();\n+                fn no_mangle_generic();\n             }\n             assert_eq!(unsafe { exported_symbol() }, 123456);\n+            assert_eq!(unsafe { assoc_fn_as_exported_symbol() }, -123456);\n             assert!(unsafe { make_true() });\n+            unsafe { NoMangleStruct() }\n+            unsafe { no_mangle_generic() }\n         }\n     }\n }"}]}