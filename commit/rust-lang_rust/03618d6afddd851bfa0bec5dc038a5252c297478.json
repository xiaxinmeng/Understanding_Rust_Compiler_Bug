{"sha": "03618d6afddd851bfa0bec5dc038a5252c297478", "node_id": "C_kwDOAAsO6NoAKDAzNjE4ZDZhZmRkZDg1MWJmYTBiZWM1ZGMwMzhhNTI1MmMyOTc0Nzg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-11T15:22:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:58:23Z"}, "message": "Always require Drop for generators.", "tree": {"sha": "61a27972b2f4b03b6bcc3be0f14ce50059570eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a27972b2f4b03b6bcc3be0f14ce50059570eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03618d6afddd851bfa0bec5dc038a5252c297478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03618d6afddd851bfa0bec5dc038a5252c297478", "html_url": "https://github.com/rust-lang/rust/commit/03618d6afddd851bfa0bec5dc038a5252c297478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03618d6afddd851bfa0bec5dc038a5252c297478/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9259da51edfb54a2dfb55a624005b7aa945cdcc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9259da51edfb54a2dfb55a624005b7aa945cdcc6", "html_url": "https://github.com/rust-lang/rust/commit/9259da51edfb54a2dfb55a624005b7aa945cdcc6"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "f519ea01a2c9daf9c3de20a222f18bba704951ee", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03618d6afddd851bfa0bec5dc038a5252c297478/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03618d6afddd851bfa0bec5dc038a5252c297478/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=03618d6afddd851bfa0bec5dc038a5252c297478", "patch": "@@ -109,6 +109,13 @@ where\n \n             for component in components {\n                 match *component.kind() {\n+                    // The information required to determine whether a generator has drop is\n+                    // computed on MIR, while this very method is used to build MIR.  To avoid\n+                    // cycles, we consider that generators always require drop.\n+                    ty::Generator(..) if tcx.sess.opts.unstable_opts.drop_tracking_mir => {\n+                        return Some(Err(AlwaysRequiresDrop));\n+                    }\n+\n                     _ if component.is_copy_modulo_regions(tcx, self.param_env) => (),\n \n                     ty::Closure(_, substs) => {"}, {"sha": "8fbad276db4416e08c6a5d5ddc9a6a01267590fd", "filename": "tests/ui/generator/borrowing.drop_tracking_mir.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03618d6afddd851bfa0bec5dc038a5252c297478/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03618d6afddd851bfa0bec5dc038a5252c297478/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr?ref=03618d6afddd851bfa0bec5dc038a5252c297478", "patch": "@@ -1,16 +1,24 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:13:33\n    |\n-LL |     let _b = {\n-   |         -- borrow later stored here\n-LL |         let a = 3;\n LL |         Pin::new(&mut || yield &a).resume(())\n-   |                       --        ^ borrowed value does not live long enough\n-   |                       |\n+   |                       ----------^\n+   |                       |         |\n+   |                       |         borrowed value does not live long enough\n    |                       value captured here by generator\n+   |                       a temporary with access to the borrow is created here ...\n LL |\n LL |     };\n-   |     - `a` dropped here while still borrowed\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |     |\n+   |     `a` dropped here while still borrowed\n+   |\n+   = note: the temporary is part of an expression at the end of a block;\n+           consider forcing this temporary to be dropped sooner, before the block's local variables are dropped\n+help: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block\n+   |\n+LL |         let x = Pin::new(&mut || yield &a).resume(()); x\n+   |         +++++++                                      +++\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:20:20"}, {"sha": "736ed1fb6080390ef9ad45ef1db71e54a5a9bf86", "filename": "tests/ui/generator/retain-resume-ref.drop_tracking_mir.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03618d6afddd851bfa0bec5dc038a5252c297478/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03618d6afddd851bfa0bec5dc038a5252c297478/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr?ref=03618d6afddd851bfa0bec5dc038a5252c297478", "patch": "@@ -4,9 +4,10 @@ error[E0499]: cannot borrow `thing` as mutable more than once at a time\n LL |     gen.as_mut().resume(&mut thing);\n    |                         ---------- first mutable borrow occurs here\n LL |     gen.as_mut().resume(&mut thing);\n-   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n-   |                  |\n-   |                  first borrow later used by call\n+   |                         ^^^^^^^^^^ second mutable borrow occurs here\n+LL |\n+LL | }\n+   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n \n error: aborting due to previous error\n "}]}