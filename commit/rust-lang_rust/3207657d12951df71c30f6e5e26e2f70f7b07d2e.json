{"sha": "3207657d12951df71c30f6e5e26e2f70f7b07d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDc2NTdkMTI5NTFkZjcxYzMwZjZlNWUyNmUyZjcwZjdiMDdkMmU=", "commit": {"author": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-03-27T20:10:44Z"}, "committer": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-03-29T04:21:55Z"}, "message": "Adding linking for Once docs #29377", "tree": {"sha": "4aa434df03f80c47d33f0357508a22ee04d9f8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa434df03f80c47d33f0357508a22ee04d9f8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3207657d12951df71c30f6e5e26e2f70f7b07d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3207657d12951df71c30f6e5e26e2f70f7b07d2e", "html_url": "https://github.com/rust-lang/rust/commit/3207657d12951df71c30f6e5e26e2f70f7b07d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3207657d12951df71c30f6e5e26e2f70f7b07d2e/comments", "author": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7846dbe0c8de17f59cdfc3d2b914d58faad7eade", "url": "https://api.github.com/repos/rust-lang/rust/commits/7846dbe0c8de17f59cdfc3d2b914d58faad7eade", "html_url": "https://github.com/rust-lang/rust/commit/7846dbe0c8de17f59cdfc3d2b914d58faad7eade"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "d9edf5d1254896c492fb5f9cc2009a77d528e76f", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3207657d12951df71c30f6e5e26e2f70f7b07d2e/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3207657d12951df71c30f6e5e26e2f70f7b07d2e/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=3207657d12951df71c30f6e5e26e2f70f7b07d2e", "patch": "@@ -72,9 +72,11 @@ use thread::{self, Thread};\n \n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n-/// functionality. This type can only be constructed with the `ONCE_INIT`\n+/// functionality. This type can only be constructed with the [`ONCE_INIT`]\n /// value.\n ///\n+/// [`ONCE_INIT`]: constant.ONCE_INIT.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -101,15 +103,28 @@ unsafe impl Sync for Once {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for Once {}\n \n-/// State yielded to the `call_once_force` method which can be used to query\n-/// whether the `Once` was previously poisoned or not.\n+/// State yielded to the [`call_once_force`] method which can be used to query\n+/// whether the [`Once`] was previously poisoned or not.\n+///\n+/// [`call_once_force`]: struct.Once.html#method.call_once_force\n+/// [`Once`]: struct.Once.html\n #[unstable(feature = \"once_poison\", issue = \"33577\")]\n #[derive(Debug)]\n pub struct OnceState {\n     poisoned: bool,\n }\n \n-/// Initialization value for static `Once` values.\n+/// Initialization value for static [`Once`] values.\n+///\n+/// [`Once`]: struct.Once.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::{Once, ONCE_INIT};\n+///\n+/// static START: Once = ONCE_INIT;\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ONCE_INIT: Once = Once::new();\n \n@@ -212,15 +227,19 @@ impl Once {\n         self.call_inner(false, &mut |_| f.take().unwrap()());\n     }\n \n-    /// Performs the same function as `call_once` except ignores poisoning.\n+    /// Performs the same function as [`call_once`] except ignores poisoning.\n+    ///\n+    /// [`call_once`]: struct.Once.html#method.call_once\n     ///\n     /// If this `Once` has been poisoned (some initialization panicked) then\n     /// this function will continue to attempt to call initialization functions\n     /// until one of them doesn't panic.\n     ///\n-    /// The closure `f` is yielded a structure which can be used to query the\n+    /// The closure `f` is yielded a [`OnceState`] structure which can be used to query the\n     /// state of this `Once` (whether initialization has previously panicked or\n     /// not).\n+    ///\n+    /// [`OnceState`]: struct.OnceState.html\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n@@ -366,10 +385,12 @@ impl Drop for Finish {\n }\n \n impl OnceState {\n-    /// Returns whether the associated `Once` has been poisoned.\n+    /// Returns whether the associated [`Once`] has been poisoned.\n     ///\n-    /// Once an initalization routine for a `Once` has panicked it will forever\n+    /// Once an initalization routine for a [`Once`] has panicked it will forever\n     /// indicate to future forced initialization routines that it is poisoned.\n+    ///\n+    /// [`Once`]: struct.Once.html\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn poisoned(&self) -> bool {\n         self.poisoned"}]}