{"sha": "870ca3140896292851c16485403238c560f561b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MGNhMzE0MDg5NjI5Mjg1MWMxNjQ4NTQwMzIzOGM1NjBmNTYxYjI=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2020-01-09T23:45:06Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2020-01-09T23:57:01Z"}, "message": "rustbuild: Cleanup book generation\n\nThe Cargo book can be generated the same way as the other books.", "tree": {"sha": "d016994341e7fa14485ad074dfac12ccb471b194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d016994341e7fa14485ad074dfac12ccb471b194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/870ca3140896292851c16485403238c560f561b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/870ca3140896292851c16485403238c560f561b2", "html_url": "https://github.com/rust-lang/rust/commit/870ca3140896292851c16485403238c560f561b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/870ca3140896292851c16485403238c560f561b2/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56446fef49d73212f63ea7aa0680d5d602f19b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/56446fef49d73212f63ea7aa0680d5d602f19b9a", "html_url": "https://github.com/rust-lang/rust/commit/56446fef49d73212f63ea7aa0680d5d602f19b9a"}], "stats": {"total": 86, "additions": 14, "deletions": 72}, "files": [{"sha": "5f03723b068ad1901c26b3b386542412c2b2534a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 14, "deletions": 72, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/870ca3140896292851c16485403238c560f561b2/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/870ca3140896292851c16485403238c560f561b2/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=870ca3140896292851c16485403238c560f561b2", "patch": "@@ -49,7 +49,7 @@ macro_rules! book {\n                 builder.ensure(RustbookSrc {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n-                    src: doc_src(builder),\n+                    src: INTERNER.intern_path(builder.src.join($path)),\n                 })\n             }\n         }\n@@ -60,6 +60,7 @@ macro_rules! book {\n // NOTE: When adding a book here, make sure to ALSO build the book by\n // adding a build step in `src/bootstrap/builder.rs`!\n book!(\n+    CargoBook, \"src/tools/cargo/src/doc\", \"cargo\";\n     EditionGuide, \"src/doc/edition-guide\", \"edition-guide\";\n     EmbeddedBook, \"src/doc/embedded-book\", \"embedded-book\";\n     Nomicon, \"src/doc/nomicon\", \"nomicon\";\n@@ -69,10 +70,6 @@ book!(\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n );\n \n-fn doc_src(builder: &Builder<'_>) -> Interned<PathBuf> {\n-    INTERNER.intern_path(builder.src.join(\"src/doc\"))\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: Interned<String>,\n@@ -96,48 +93,11 @@ impl Step for UnstableBook {\n         builder.ensure(RustbookSrc {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n-            src: builder.md_doc_out(self.target),\n+            src: INTERNER.intern_path(builder.md_doc_out(self.target).join(\"unstable-book\")),\n         })\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct CargoBook {\n-    target: Interned<String>,\n-    name: Interned<String>,\n-}\n-\n-impl Step for CargoBook {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.path(\"src/tools/cargo/src/doc/book\").default_condition(builder.config.docs)\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(CargoBook { target: run.target, name: INTERNER.intern_str(\"cargo\") });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let target = self.target;\n-        let name = self.name;\n-        let src = builder.src.join(\"src/tools/cargo/src/doc\");\n-\n-        let out = builder.doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-\n-        let out = out.join(name);\n-\n-        builder.info(&format!(\"Cargo Book ({}) - {}\", target, name));\n-\n-        let _ = fs::remove_dir_all(&out);\n-\n-        builder.run(builder.tool_cmd(Tool::Rustbook).arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n struct RustbookSrc {\n     target: Interned<String>,\n@@ -164,7 +124,6 @@ impl Step for RustbookSrc {\n         t!(fs::create_dir_all(&out));\n \n         let out = out.join(name);\n-        let src = src.join(name);\n         let index = out.join(\"index.html\");\n         let rustbook = builder.tool_exe(Tool::Rustbook);\n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n@@ -182,7 +141,6 @@ impl Step for RustbookSrc {\n pub struct TheBook {\n     compiler: Compiler,\n     target: Interned<String>,\n-    name: &'static str,\n }\n \n impl Step for TheBook {\n@@ -198,53 +156,37 @@ impl Step for TheBook {\n         run.builder.ensure(TheBook {\n             compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n             target: run.target,\n-            name: \"book\",\n         });\n     }\n \n     /// Builds the book and associated stuff.\n     ///\n     /// We need to build:\n     ///\n-    /// * Book (first edition)\n-    /// * Book (second edition)\n+    /// * Book\n+    /// * Older edition redirects\n     /// * Version info and CSS\n     /// * Index page\n     /// * Redirect pages\n     fn run(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n         let target = self.target;\n-        let name = self.name;\n \n         // build book\n         builder.ensure(RustbookSrc {\n             target,\n-            name: INTERNER.intern_string(name.to_string()),\n-            src: doc_src(builder),\n+            name: INTERNER.intern_str(\"book\"),\n+            src: INTERNER.intern_path(builder.src.join(\"src/doc/book\")),\n         });\n \n         // building older edition redirects\n-\n-        let source_name = format!(\"{}/first-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n-\n-        let source_name = format!(\"{}/second-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n-\n-        let source_name = format!(\"{}/2018-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n+        for edition in &[\"first-edition\", \"second-edition\", \"2018-edition\"] {\n+            builder.ensure(RustbookSrc {\n+                target,\n+                name: INTERNER.intern_string(format!(\"book/{}\", edition)),\n+                src: INTERNER.intern_path(builder.src.join(\"src/doc/book\").join(edition)),\n+            });\n+        }\n \n         // build the version info page and CSS\n         builder.ensure(Standalone { compiler, target });"}]}