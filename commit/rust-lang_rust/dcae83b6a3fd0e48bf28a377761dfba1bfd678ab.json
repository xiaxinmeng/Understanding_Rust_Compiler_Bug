{"sha": "dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYWU4M2I2YTNmZDBlNDhiZjI4YTM3Nzc2MWRmYmExYmZkNjc4YWI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:09Z"}, "message": "Rollup merge of #56204 - estebank:suggest-variant, r=zackmdavis\n\nSuggest correct enum variant on typo\n\nFix #37992.", "tree": {"sha": "eb6e0ca6a605b9b45bc47031078d2dd08c2d1948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6e0ca6a605b9b45bc47031078d2dd08c2d1948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sg1CRBK7hj4Ov3rIwAAdHIIAIxxp5zGDBCTTtCMmogmbUe5\nOswsMaka4RJzCOT31YUWCvuDMkZh4G4ij2eX9r15XxD0cXIs2ZY1M+Sq9Z57n4b8\n7QbTruFtAB/AZ759JS8l51ik+0S8RhrAEpKsLvZrLbbafnJT5T7DoE3HZhzvsDpo\n09ZY8y7Fo/5pMADl/6jGS2bQ6vcDkLU8UwWVND3mq5ShAr05n7jWNL7W81WSWV2K\nPyDYWWPpRQ/DUwlRPpC0DkeNzxVfJEr2qt46/vTkLAzUbUhgkhIdPUG0xSIgs519\nzEDX0lyQkjdU9vIb7MjgUWqtsnsuFqxPMCxy8eQcZD16zV5GUs/htw742IsZ6To=\n=SrJE\n-----END PGP SIGNATURE-----\n", "payload": "tree eb6e0ca6a605b9b45bc47031078d2dd08c2d1948\nparent 686257c256803128b651d148219cc5f1a4ebc185\nparent 6b338e034adfc1bffed942c084c892d34f1cd9b5\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161909 +0100\ncommitter GitHub <noreply@github.com> 1543161909 +0100\n\nRollup merge of #56204 - estebank:suggest-variant, r=zackmdavis\n\nSuggest correct enum variant on typo\n\nFix #37992.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "html_url": "https://github.com/rust-lang/rust/commit/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686257c256803128b651d148219cc5f1a4ebc185", "url": "https://api.github.com/repos/rust-lang/rust/commits/686257c256803128b651d148219cc5f1a4ebc185", "html_url": "https://github.com/rust-lang/rust/commit/686257c256803128b651d148219cc5f1a4ebc185"}, {"sha": "6b338e034adfc1bffed942c084c892d34f1cd9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b338e034adfc1bffed942c084c892d34f1cd9b5", "html_url": "https://github.com/rust-lang/rust/commit/6b338e034adfc1bffed942c084c892d34f1cd9b5"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "4fbbe58445254a76836f7a476ef0f8076852de4b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "patch": "@@ -36,8 +36,9 @@ use lint;\n \n use std::iter;\n use syntax::ast;\n-use syntax::ptr::P;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::ptr::P;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};\n \n pub trait AstConv<'gcx, 'tcx> {\n@@ -1303,6 +1304,32 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n                 }\n             }\n+            (&ty::Adt(adt_def, _substs), Def::Enum(_did)) => {\n+                let ty_str = ty.to_string();\n+                // Incorrect enum variant\n+                let mut err = tcx.sess.struct_span_err(\n+                    span,\n+                    &format!(\"no variant `{}` on enum `{}`\", &assoc_name.as_str(), ty_str),\n+                );\n+                // Check if it was a typo\n+                let input = adt_def.variants.iter().map(|variant| &variant.name);\n+                if let Some(suggested_name) = find_best_match_for_name(\n+                    input,\n+                    &assoc_name.as_str(),\n+                    None,\n+                ) {\n+                    err.span_suggestion_with_applicability(\n+                        span,\n+                        \"did you mean\",\n+                        format!(\"{}::{}\", ty_str, suggested_name.to_string()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_label(span, \"unknown variant\");\n+                }\n+                err.emit();\n+                return (tcx.types.err, Def::Err);\n+            }\n             _ => {\n                 // Don't print TyErr to the user.\n                 if !ty.references_error() {"}, {"sha": "86eb624edcac125d7203766f645eda3cffd23e9e", "filename": "src/test/ui/issues/issue-34209.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs?ref=dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "patch": "@@ -14,8 +14,8 @@ enum S {\n \n fn bug(l: S) {\n     match l {\n-        S::B{ } => { },\n-        //~^ ERROR ambiguous associated type\n+        S::B { } => { },\n+        //~^ ERROR no variant `B` on enum `S`\n     }\n }\n "}, {"sha": "d5a5647422f411804c4c259ec80e758587f1824c", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "patch": "@@ -1,9 +1,8 @@\n-error[E0223]: ambiguous associated type\n+error: no variant `B` on enum `S`\n   --> $DIR/issue-34209.rs:17:9\n    |\n-LL |         S::B{ } => { },\n-   |         ^^^^ help: use fully-qualified syntax: `<S as Trait>::B`\n+LL |         S::B { } => { },\n+   |         ^^^^ help: did you mean: `S::A`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "4a131ed837b8766b7924f07009ba7b38437f218c", "filename": "src/test/ui/suggestions/suggest-variants.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs?ref=dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "patch": "@@ -0,0 +1,15 @@\n+#[derive(Debug)]\n+enum Shape {\n+  Square { size: i32 },\n+  Circle { radius: i32 },\n+}\n+\n+struct S {\n+  x: usize,\n+}\n+\n+fn main() {\n+    println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n+    println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n+    println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n+}"}, {"sha": "08ae68ea713023510abb773f4d350f5aad3b2eaf", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "patch": "@@ -0,0 +1,20 @@\n+error: no variant `Squareee` on enum `Shape`\n+  --> $DIR/suggest-variants.rs:12:34\n+   |\n+LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n+   |                                  ^^^^^^^^^^^^^^^ help: did you mean: `Shape::Square`\n+\n+error: no variant `Circl` on enum `Shape`\n+  --> $DIR/suggest-variants.rs:13:34\n+   |\n+LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n+   |                                  ^^^^^^^^^^^^ help: did you mean: `Shape::Circle`\n+\n+error: no variant `Rombus` on enum `Shape`\n+  --> $DIR/suggest-variants.rs:14:34\n+   |\n+LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n+   |                                  ^^^^^^^^^^^^^ unknown variant\n+\n+error: aborting due to 3 previous errors\n+"}]}