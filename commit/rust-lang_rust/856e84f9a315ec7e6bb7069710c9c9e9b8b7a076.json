{"sha": "856e84f9a315ec7e6bb7069710c9c9e9b8b7a076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmU4NGY5YTMxNWVjN2U2YmI3MDY5NzEwYzljOWU5YjhiN2EwNzY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-08-14T01:49:06Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-08-18T17:54:41Z"}, "message": "Resolve `Self` within type definitions.\n\nCurrently type definitions include `struct`, `enum`, `union`, `existential type`.", "tree": {"sha": "1b65315ec6ffeb4929310f56f2aba2a36be5e12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b65315ec6ffeb4929310f56f2aba2a36be5e12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076", "html_url": "https://github.com/rust-lang/rust/commit/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db71dbae8c9cd0e6ac0558c54f2e2a6b1147d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db71dbae8c9cd0e6ac0558c54f2e2a6b1147d17", "html_url": "https://github.com/rust-lang/rust/commit/5db71dbae8c9cd0e6ac0558c54f2e2a6b1147d17"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "072240eeef4a98704fcbef7797a04255b0a598df", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856e84f9a315ec7e6bb7069710c9c9e9b8b7a076/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=856e84f9a315ec7e6bb7069710c9c9e9b8b7a076", "patch": "@@ -2192,14 +2192,22 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.check_proc_macro_attrs(&item.attrs);\n \n         match item.node {\n-            ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n-            ItemKind::Existential(_, ref generics) |\n-            ItemKind::Struct(_, ref generics) |\n-            ItemKind::Union(_, ref generics) |\n-            ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::Fn(_, _, ref generics, _) |\n+            ItemKind::Existential(_, ref generics) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n-                                         |this| visit::walk_item(this, item));\n+                                             |this| visit::walk_item(this, item));\n+            }\n+\n+            ItemKind::Enum(_, ref generics) |\n+            ItemKind::Struct(_, ref generics) |\n+            ItemKind::Union(_, ref generics) => {\n+                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                    let item_def_id = this.definitions.local_def_id(item.id);\n+                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                        visit::walk_item(this, item);\n+                    });\n+                });\n             }\n \n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n@@ -2489,13 +2497,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let item_def_id = this.definitions.local_def_id(item_id);\n                     this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n-                            // Resolve type arguments in trait path\n+                            // Resolve type arguments in the trait path.\n                             visit::walk_trait_ref(this, trait_ref);\n                         }\n                         // Resolve the self type.\n                         this.visit_ty(self_type);\n                         // Resolve the type parameters.\n                         this.visit_generics(generics);\n+                        // Resolve the items within the impl.\n                         this.with_current_self_type(self_type, |this| {\n                             for impl_item in impl_items {\n                                 this.check_proc_macro_attrs(&impl_item.attrs);\n@@ -2511,8 +2520,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                ValueNS,\n-                                                                impl_item.span,\n+                                                                  ValueNS,\n+                                                                  impl_item.span,\n                                                 |n, s| ConstNotMemberOfTrait(n, s));\n                                             this.with_constant_rib(|this|\n                                                 visit::walk_impl_item(this, impl_item)\n@@ -2522,8 +2531,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the method\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                ValueNS,\n-                                                                impl_item.span,\n+                                                                  ValueNS,\n+                                                                  impl_item.span,\n                                                 |n, s| MethodNotMemberOfTrait(n, s));\n \n                                             visit::walk_impl_item(this, impl_item);\n@@ -2532,8 +2541,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the type\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                TypeNS,\n-                                                                impl_item.span,\n+                                                                  TypeNS,\n+                                                                  impl_item.span,\n                                                 |n, s| TypeNotMemberOfTrait(n, s));\n \n                                             this.visit_ty(ty);\n@@ -2542,8 +2551,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the type\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                TypeNS,\n-                                                                impl_item.span,\n+                                                                  TypeNS,\n+                                                                  impl_item.span,\n                                                 |n, s| TypeNotMemberOfTrait(n, s));\n \n                                             for bound in bounds {"}]}