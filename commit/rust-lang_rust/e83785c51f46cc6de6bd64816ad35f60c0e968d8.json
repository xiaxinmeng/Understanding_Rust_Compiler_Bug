{"sha": "e83785c51f46cc6de6bd64816ad35f60c0e968d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Mzc4NWM1MWY0NmNjNmRlNmJkNjQ4MTZhZDM1ZjYwYzBlOTY4ZDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-23T01:39:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-23T02:02:58Z"}, "message": "save-analysis: emit a type for enum variants", "tree": {"sha": "1eda01c732d6b1445e848230f6f65df9f71ea332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eda01c732d6b1445e848230f6f65df9f71ea332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83785c51f46cc6de6bd64816ad35f60c0e968d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83785c51f46cc6de6bd64816ad35f60c0e968d8", "html_url": "https://github.com/rust-lang/rust/commit/e83785c51f46cc6de6bd64816ad35f60c0e968d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83785c51f46cc6de6bd64816ad35f60c0e968d8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc4a7cebc759b3c8295b64bd5c1fe29fdb3db8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc4a7cebc759b3c8295b64bd5c1fe29fdb3db8a", "html_url": "https://github.com/rust-lang/rust/commit/ccc4a7cebc759b3c8295b64bd5c1fe29fdb3db8a"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "b573b8702fa2e448ea30549201965ff8444c42ba", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e83785c51f46cc6de6bd64816ad35f60c0e968d8/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83785c51f46cc6de6bd64816ad35f60c0e968d8/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=e83785c51f46cc6de6bd64816ad35f60c0e968d8", "patch": "@@ -589,21 +589,21 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     item: &ast::Item,\n                     enum_definition: &ast::EnumDef,\n                     ty_params: &ast::Generics) {\n-        let qualname = self.analysis.ty_cx.map.path_to_string(item.id);\n+        let enum_name = self.analysis.ty_cx.map.path_to_string(item.id);\n         match self.span.sub_span_after_keyword(item.span, keywords::Enum) {\n             Some(sub_span) => self.fmt.enum_str(item.span,\n                                                 Some(sub_span),\n                                                 item.id,\n-                                                qualname.as_slice(),\n+                                                enum_name.as_slice(),\n                                                 self.cur_scope),\n             None => self.sess.span_bug(item.span,\n                                        format!(\"Could not find subspan for enum {}\",\n-                                               qualname).as_slice()),\n+                                               enum_name).as_slice()),\n         }\n         for variant in enum_definition.variants.iter() {\n             let name = get_ident(variant.node.name);\n             let name = name.get();\n-            let mut qualname = qualname.clone();\n+            let mut qualname = enum_name.clone();\n             qualname.push_str(\"::\");\n             qualname.push_str(name);\n             let val = self.span.snippet(variant.span);\n@@ -615,6 +615,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                                variant.node.id,\n                                                name,\n                                                qualname.as_slice(),\n+                                               enum_name.as_slice(),\n                                                val.as_slice(),\n                                                item.id);\n                     for arg in args.iter() {\n@@ -632,18 +633,19 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                         variant.node.id,\n                         ctor_id,\n                         qualname.as_slice(),\n+                        enum_name.as_slice(),\n                         val.as_slice(),\n                         item.id);\n \n                     for field in struct_def.fields.iter() {\n-                        self.process_struct_field_def(field, qualname.as_slice(), variant.node.id);\n+                        self.process_struct_field_def(field, enum_name.as_slice(), variant.node.id);\n                         self.visit_ty(&*field.node.ty);\n                     }\n                 }\n             }\n         }\n \n-        self.process_generic_params(ty_params, item.span, qualname.as_slice(), item.id);\n+        self.process_generic_params(ty_params, item.span, enum_name.as_slice(), item.id);\n     }\n \n     fn process_impl(&mut self,"}, {"sha": "1ff1a96f0d8816b2f17769ac8adcbac077c49892", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e83785c51f46cc6de6bd64816ad35f60c0e968d8/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83785c51f46cc6de6bd64816ad35f60c0e968d8/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=e83785c51f46cc6de6bd64816ad35f60c0e968d8", "patch": "@@ -107,10 +107,14 @@ impl<'a> FmtStrs<'a> {\n                          vec!(\"id\",\"name\",\"qualname\",\"value\",\"type\",\"scopeid\"),\n                          true, true),\n             Enum => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n-            Variant => (\"variant\", vec!(\"id\",\"name\",\"qualname\",\"value\",\"scopeid\"), true, true),\n+            Variant => (\"variant\",\n+                        vec!(\"id\",\"name\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n+                        true, true),\n             VariantStruct => (\"variant_struct\",\n-                              vec!(\"id\",\"ctor_id\",\"qualname\",\"value\",\"scopeid\"), true, true),\n-            Function => (\"function\", vec!(\"id\",\"qualname\",\"declid\",\"declidcrate\",\"scopeid\"),\n+                              vec!(\"id\",\"ctor_id\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n+                              true, true),\n+            Function => (\"function\",\n+                         vec!(\"id\",\"qualname\",\"declid\",\"declidcrate\",\"scopeid\"),\n                          true, true),\n             MethodDecl => (\"method_decl\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n             Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\"), true, true),\n@@ -128,7 +132,7 @@ impl<'a> FmtStrs<'a> {\n                             true, false),\n             MethodCall => (\"method_call\",\n                            vec!(\"refid\",\"refidcrate\",\"declid\",\"declidcrate\",\"scopeid\"),\n-                            true, true),\n+                           true, true),\n             Typedef => (\"typedef\", vec!(\"id\",\"qualname\",\"value\"), true, true),\n             ExternalCrate => (\"external_crate\", vec!(\"name\",\"crate\",\"file_name\"), false, false),\n             Crate => (\"crate\", vec!(\"name\"), true, false),\n@@ -140,7 +144,7 @@ impl<'a> FmtStrs<'a> {\n                         true, true),\n             StructRef => (\"struct_ref\",\n                           vec!(\"refid\",\"refidcrate\",\"qualname\",\"scopeid\"),\n-                           true, true),\n+                          true, true),\n             FnRef => (\"fn_ref\", vec!(\"refid\",\"refidcrate\",\"qualname\",\"scopeid\"), true, true)\n         }\n     }\n@@ -336,12 +340,13 @@ impl<'a> FmtStrs<'a> {\n                              id: NodeId,\n                              name: &str,\n                              qualname: &str,\n+                             typ: &str,\n                              val: &str,\n                              scope_id: NodeId) {\n         self.check_and_record(Variant,\n                               span,\n                               sub_span,\n-                              svec!(id, name, qualname, val, scope_id));\n+                              svec!(id, name, qualname, typ, val, scope_id));\n     }\n \n     pub fn struct_variant_str(&mut self,\n@@ -350,12 +355,13 @@ impl<'a> FmtStrs<'a> {\n                               id: NodeId,\n                               ctor_id: NodeId,\n                               name: &str,\n+                              typ: &str,\n                               val: &str,\n                               scope_id: NodeId) {\n         self.check_and_record(VariantStruct,\n                               span,\n                               sub_span,\n-                              svec!(id, ctor_id, name, val, scope_id));\n+                              svec!(id, ctor_id, name, typ, val, scope_id));\n     }\n \n     pub fn fn_str(&mut self,"}]}