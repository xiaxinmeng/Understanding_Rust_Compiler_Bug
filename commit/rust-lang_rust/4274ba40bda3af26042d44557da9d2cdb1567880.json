{"sha": "4274ba40bda3af26042d44557da9d2cdb1567880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNzRiYTQwYmRhM2FmMjYwNDJkNDQ1NTdkYTlkMmNkYjE1Njc4ODA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T01:51:27Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T01:51:27Z"}, "message": "Use lowercase for prelude items", "tree": {"sha": "60d2362354167a7a0b46d44cf47e9b104de091b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d2362354167a7a0b46d44cf47e9b104de091b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4274ba40bda3af26042d44557da9d2cdb1567880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4274ba40bda3af26042d44557da9d2cdb1567880", "html_url": "https://github.com/rust-lang/rust/commit/4274ba40bda3af26042d44557da9d2cdb1567880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4274ba40bda3af26042d44557da9d2cdb1567880/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6014bc289abd2573a4362915cbf026912f209d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6014bc289abd2573a4362915cbf026912f209d", "html_url": "https://github.com/rust-lang/rust/commit/4a6014bc289abd2573a4362915cbf026912f209d"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "08f3ff5f253c52904ae834a678e73cf0e0d000af", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4274ba40bda3af26042d44557da9d2cdb1567880/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4274ba40bda3af26042d44557da9d2cdb1567880/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=4274ba40bda3af26042d44557da9d2cdb1567880", "patch": "@@ -29,34 +29,34 @@\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n //! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n-//!   Marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: Various\n+//!   marker traits that indicate fundamental properties of types.\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`]: A convenience function for explicitly\n+//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`]: A way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`]: The conversion trait that defines\n+//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n+//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`]: The ubiquitous trait that defines\n+//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: The\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: Generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n //! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: Iterators of various\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n //!   kinds.\n //! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: A type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}: Heap-allocated strings.\n-//! * [`std::vec`]::[`Vec`]: A growable, heap-allocated vector.\n+//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n+//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}]}