{"sha": "8e595f561045756d33e99d4a1d418d4da504d31a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTk1ZjU2MTA0NTc1NmQzM2U5OWQ0YTFkNDE4ZDRkYTUwNGQzMWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T05:19:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T05:19:30Z"}, "message": "Make generics always have a valid span", "tree": {"sha": "f99a19b68de3edbc21dca3663dcf3bc5dbdd2131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99a19b68de3edbc21dca3663dcf3bc5dbdd2131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e595f561045756d33e99d4a1d418d4da504d31a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e595f561045756d33e99d4a1d418d4da504d31a", "html_url": "https://github.com/rust-lang/rust/commit/8e595f561045756d33e99d4a1d418d4da504d31a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e595f561045756d33e99d4a1d418d4da504d31a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7840a0b753a065a41999f1fb6028f67d33e3fdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7840a0b753a065a41999f1fb6028f67d33e3fdd5", "html_url": "https://github.com/rust-lang/rust/commit/7840a0b753a065a41999f1fb6028f67d33e3fdd5"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "cbdcf9d3918b5f8efda64d7e2605cfa47d906b29", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8e595f561045756d33e99d4a1d418d4da504d31a", "patch": "@@ -628,10 +628,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn get_generics_span(&self, id: DefId) -> Option<Span> {\n-        self.get_generics(id).map(|generics| generics.span).filter(|sp| *sp != DUMMY_SP)\n-    }\n-\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {\n         let hir_id = self.node_to_hir_id(id);"}, {"sha": "cc074b64cc01c0c3497e78e0e9af3eb26f53789c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8e595f561045756d33e99d4a1d418d4da504d31a", "patch": "@@ -385,7 +385,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n         let def_span = tcx.sess.source_map().def_span(span);\n-        let span = tcx.hir().get_generics_span(impl_m.def_id).unwrap_or(def_span);\n+        let span = tcx.hir().get_generics(impl_m.def_id).map(|g| g.span).unwrap_or(def_span);\n         let mut err = struct_span_err!(\n             tcx.sess,\n             span,\n@@ -396,7 +396,7 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         err.span_label(span, \"lifetimes do not match method in trait\");\n         if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n             let def_sp = tcx.sess.source_map().def_span(sp);\n-            let sp = tcx.hir().get_generics_span(trait_m.def_id).unwrap_or(def_sp);\n+            let sp = tcx.hir().get_generics(trait_m.def_id).map(|g| g.span).unwrap_or(def_sp);\n             err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n         }\n         err.emit();"}, {"sha": "36460e75d879e65b8b678694f8606d8833b87970", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8e595f561045756d33e99d4a1d418d4da504d31a", "patch": "@@ -5050,21 +5050,22 @@ impl<'a> Parser<'a> {\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     fn parse_generics(&mut self) -> PResult<'a, ast::Generics> {\n         let span_lo = self.span;\n-        if self.eat_lt() {\n+        let (params, span) = if self.eat_lt() {\n             let params = self.parse_generic_params()?;\n             self.expect_gt()?;\n-            Ok(ast::Generics {\n-                params,\n-                where_clause: WhereClause {\n-                    id: ast::DUMMY_NODE_ID,\n-                    predicates: Vec::new(),\n-                    span: DUMMY_SP,\n-                },\n-                span: span_lo.to(self.prev_span),\n-            })\n+            (params, span_lo.to(self.prev_span))\n         } else {\n-            Ok(ast::Generics::default())\n-        }\n+            (vec![], self.prev_span.between(self.span))\n+        };\n+        Ok(ast::Generics {\n+            params,\n+            where_clause: WhereClause {\n+                id: ast::DUMMY_NODE_ID,\n+                predicates: Vec::new(),\n+                span: DUMMY_SP,\n+            },\n+            span,\n+        })\n     }\n \n     /// Parses generic args (within a path segment) with recovery for extra leading angle brackets."}, {"sha": "4c7c0d1a0dfa514f5beea8594406e3ed5e0d70b3", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=8e595f561045756d33e99d4a1d418d4da504d31a", "patch": "@@ -36,13 +36,13 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |                        ^^\n \n error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:41:20\n    |\n LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n    |                    ---------------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                    ^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:48:5"}, {"sha": "3f1b10fab27f356f0797f7a03a55ea87dae2a6d7", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e595f561045756d33e99d4a1d418d4da504d31a/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=8e595f561045756d33e99d4a1d418d4da504d31a", "patch": "@@ -1,11 +1,11 @@\n error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:5\n+  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:11\n    |\n LL |     fn foo(&self, t: Self::T);\n    |     -------------------------- expected 0 type parameters\n ...\n LL |     fn foo(&self, t: impl Clone) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found 1 type parameter\n+   |           ^ found 1 type parameter\n \n error: aborting due to previous error\n "}]}