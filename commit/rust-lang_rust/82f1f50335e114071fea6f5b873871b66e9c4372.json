{"sha": "82f1f50335e114071fea6f5b873871b66e9c4372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjFmNTAzMzVlMTE0MDcxZmVhNmY1Yjg3Mzg3MWI2NmU5YzQzNzI=", "commit": {"author": {"name": "Stefano Buliani", "email": "stefano.buliani@gmail.com", "date": "2021-09-04T18:47:52Z"}, "committer": {"name": "Stefano Buliani", "email": "stefano.buliani@gmail.com", "date": "2021-09-04T18:47:52Z"}, "message": "Skip single use lifetime lint for generated opaque types\nAs reported in issue #77175, the opaque type generated by the desugaring process of an async function uses the lifetimes defined by the originating function. The definition ID for the lifetimes in the opaque method is different from the one in the originating async function and it could therefore be considered a single use of the lifetimne, this causes the single_use_lifetimes lint to fail compilation if explicitly denied. This fix skips the lint for lifetimes used only once in generated opaque types for an async function that are declared in the parent async function definition.", "tree": {"sha": "421e5799719f2d44800a5f7733d127616bf886f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421e5799719f2d44800a5f7733d127616bf886f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f1f50335e114071fea6f5b873871b66e9c4372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f1f50335e114071fea6f5b873871b66e9c4372", "html_url": "https://github.com/rust-lang/rust/commit/82f1f50335e114071fea6f5b873871b66e9c4372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f1f50335e114071fea6f5b873871b66e9c4372/comments", "author": {"login": "sapessi", "id": 2996317, "node_id": "MDQ6VXNlcjI5OTYzMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2996317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sapessi", "html_url": "https://github.com/sapessi", "followers_url": "https://api.github.com/users/sapessi/followers", "following_url": "https://api.github.com/users/sapessi/following{/other_user}", "gists_url": "https://api.github.com/users/sapessi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sapessi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sapessi/subscriptions", "organizations_url": "https://api.github.com/users/sapessi/orgs", "repos_url": "https://api.github.com/users/sapessi/repos", "events_url": "https://api.github.com/users/sapessi/events{/privacy}", "received_events_url": "https://api.github.com/users/sapessi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sapessi", "id": 2996317, "node_id": "MDQ6VXNlcjI5OTYzMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2996317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sapessi", "html_url": "https://github.com/sapessi", "followers_url": "https://api.github.com/users/sapessi/followers", "following_url": "https://api.github.com/users/sapessi/following{/other_user}", "gists_url": "https://api.github.com/users/sapessi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sapessi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sapessi/subscriptions", "organizations_url": "https://api.github.com/users/sapessi/orgs", "repos_url": "https://api.github.com/users/sapessi/repos", "events_url": "https://api.github.com/users/sapessi/events{/privacy}", "received_events_url": "https://api.github.com/users/sapessi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226e181b80fa0be755872b66916ef7e704601ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/226e181b80fa0be755872b66916ef7e704601ec2", "html_url": "https://github.com/rust-lang/rust/commit/226e181b80fa0be755872b66916ef7e704601ec2"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "a5dbbffeaa86beff97c88d9f73393212a521c471", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f50335e114071fea6f5b873871b66e9c4372/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f50335e114071fea6f5b873871b66e9c4372/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=82f1f50335e114071fea6f5b873871b66e9c4372", "patch": "@@ -2024,7 +2024,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // ensure that we issue lints in a repeatable order\n         def_ids.sort_by_cached_key(|&def_id| self.tcx.def_path_hash(def_id));\n \n-        for def_id in def_ids {\n+        'lifetimes: for def_id in def_ids {\n             debug!(\"check_uses_for_lifetimes_defined_by_scope: def_id = {:?}\", def_id);\n \n             let lifetimeuseset = self.lifetime_uses.remove(&def_id);\n@@ -2067,6 +2067,27 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 {\n                                     continue;\n                                 }\n+\n+                                // opaque types generated when desugaring an async function can have a single\n+                                // use lifetime even if it is explicitly denied (Issue #77175)\n+                                if let hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::OpaqueTy(ref opaque),\n+                                    ..\n+                                }) = self.tcx.hir().get(parent_hir_id)\n+                                {\n+                                    if opaque.origin != hir::OpaqueTyOrigin::AsyncFn {\n+                                        continue 'lifetimes;\n+                                    }\n+                                    // We want to do this only if the liftime identifier is already defined\n+                                    // in the async function that generated this. Otherwise it could be\n+                                    // an opaque type defined by the developer and we still want this\n+                                    // lint to fail compilation\n+                                    for p in opaque.generics.params {\n+                                        if defined_by.contains_key(&p.name) {\n+                                            continue 'lifetimes;\n+                                        }\n+                                    }\n+                                }\n                             }\n                         }\n "}]}