{"sha": "39dcd01bf5e0c69c487f18903f44074f49ef205b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZGNkMDFiZjVlMGM2OWM0ODdmMTg5MDNmNDQwNzRmNDllZjIwNWI=", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-02-20T06:17:18Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-02-20T06:17:18Z"}, "message": "Take into account target default syntax", "tree": {"sha": "9c2d9eb9a148301e2b3fabf701ae43f9dc25f10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c2d9eb9a148301e2b3fabf701ae43f9dc25f10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39dcd01bf5e0c69c487f18903f44074f49ef205b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39dcd01bf5e0c69c487f18903f44074f49ef205b", "html_url": "https://github.com/rust-lang/rust/commit/39dcd01bf5e0c69c487f18903f44074f49ef205b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39dcd01bf5e0c69c487f18903f44074f49ef205b/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c6a12d62fda3d5d070fe3915f03154ff7c80df", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c6a12d62fda3d5d070fe3915f03154ff7c80df", "html_url": "https://github.com/rust-lang/rust/commit/12c6a12d62fda3d5d070fe3915f03154ff7c80df"}], "stats": {"total": 167, "additions": 107, "deletions": 60}, "files": [{"sha": "bb529f9e5c2b49943722a90e32a3f764287a0750", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 72, "deletions": 48, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/39dcd01bf5e0c69c487f18903f44074f49ef205b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dcd01bf5e0c69c487f18903f44074f49ef205b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=39dcd01bf5e0c69c487f18903f44074f49ef205b", "patch": "@@ -12,6 +12,7 @@ use rustc_span::{\n     BytePos,\n };\n use rustc_span::{InnerSpan, Span};\n+use rustc_target::asm::InlineAsmArch;\n \n struct AsmArgs {\n     templates: Vec<P<ast::Expr>>,\n@@ -427,6 +428,65 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n \n         let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n+\n+        if let Some(snippet) = &template_snippet {\n+            let default_dialect = match ecx.sess.asm_arch {\n+                Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => ast::LlvmAsmDialect::Intel,\n+                _ => ast::LlvmAsmDialect::Att,\n+            };\n+\n+            let snippet = snippet.trim_matches('\"');\n+            match default_dialect {\n+                ast::LlvmAsmDialect::Intel => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".intel_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"intel syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n+                        let asm_end = sp.hi() - BytePos(2);\n+                        let suggestions = vec![\n+                            (span, \"\".to_string()),\n+                            (\n+                                Span::new(asm_end, asm_end, sp.ctxt()),\n+                                \", options(att_syntax)\".to_string(),\n+                            ),\n+                        ];\n+                        err.multipart_suggestion(\n+                        \"remove the assembler directive and replace it with options(att_syntax)\",\n+                        suggestions,\n+                        Applicability::MachineApplicable,\n+                    );\n+                        err.emit();\n+                    }\n+                }\n+                ast::LlvmAsmDialect::Att => {\n+                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n+                        let span = template_span.from_inner(span);\n+                        let mut err = ecx.struct_span_err(span, \"att syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"remove this assembler directive\",\n+                            \"\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    // Use of .intel_syntax is ignored\n+                }\n+            }\n+        }\n+\n         let mut parser = parse::Parser::new(\n             template_str,\n             str_style,\n@@ -468,54 +528,6 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         for piece in unverified_pieces {\n             match piece {\n                 parse::Piece::String(s) => {\n-                    if let Some(idx) = s.find(\".intel_syntax\") {\n-                        let mut end = idx + \".intel_syntax\".len();\n-                        if let Some(prefix_idx) = s.split_at(end).1.find(\"noprefix\") {\n-                            // Should be a space and it should be immediately after\n-                            if prefix_idx == 1 {\n-                                end += \" noprefix\".len();\n-                            }\n-                        }\n-\n-                        let syntax_span =\n-                            template_span.from_inner(InnerSpan::new(idx + 1, end + 1));\n-                        let mut err = ecx.struct_span_err(syntax_span, \"intel sytnax is the default syntax, and trying to use this directive may cause issues\");\n-                        err.span_suggestion(\n-                            syntax_span,\n-                            \"Remove this assembler directive\",\n-                            s.replace(&s[idx..end], \"\").to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n-\n-                    if let Some(idx) = s.find(\".att_syntax\") {\n-                        let mut end = idx + \".att_syntax\".len();\n-                        if let Some(prefix_idx) = s.split_at(end).1.find(\"noprefix\") {\n-                            // Should be a space and it should be immediately after\n-                            if prefix_idx == 1 {\n-                                end += \" noprefix\".len();\n-                            }\n-                        }\n-\n-                        let syntax_span =\n-                            template_span.from_inner(InnerSpan::new(idx + 1, end + 1));\n-                        let mut err = ecx.struct_span_err(syntax_span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n-                        let asm_end = sp.hi() - BytePos(2);\n-                        let suggestions = vec![\n-                            (syntax_span, \"\".to_string()),\n-                            (\n-                                Span::new(asm_end, asm_end, sp.ctxt()),\n-                                \", options(att_syntax)\".to_string(),\n-                            ),\n-                        ];\n-                        err.multipart_suggestion(\n-                            \"Remove the assembler directive and replace it with options(att_syntax)\",\n-                            suggestions,\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n                     template.push(ast::InlineAsmTemplatePiece::String(s.to_string()))\n                 }\n                 parse::Piece::NextArgument(arg) => {\n@@ -682,3 +694,15 @@ pub fn expand_asm<'cx>(\n         }\n     }\n }\n+\n+fn check_syntax_directive<S: AsRef<str>>(piece: S, syntax: &str) -> Option<InnerSpan> {\n+    let piece = piece.as_ref();\n+    if let Some(idx) = piece.find(syntax) {\n+        let end =\n+            idx + &piece[idx..].find(|c| matches!(c, '\\n' | ';')).unwrap_or(piece[idx..].len());\n+        // Offset by one because these represent the span with the \" removed\n+        Some(InnerSpan::new(idx + 1, end + 1))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "31e7f2cc7966274c4fe490823865934b2fabfede", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39dcd01bf5e0c69c487f18903f44074f49ef205b/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dcd01bf5e0c69c487f18903f44074f49ef205b/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=39dcd01bf5e0c69c487f18903f44074f49ef205b", "patch": "@@ -3,12 +3,21 @@\n fn main() {\n     unsafe {\n         asm!(\".intel_syntax noprefix\", \"nop\");\n-        //~^ ERROR intel sytnax is the default syntax\n+        //~^ ERROR intel syntax is the default syntax on this target\n         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-        //~^ ERROR intel sytnax is the default syntax\n+        //~^ ERROR intel syntax is the default syntax on this target\n         asm!(\".att_syntax noprefix\", \"nop\");\n         //~^ ERROR using the .att_syntax directive may cause issues\n         asm!(\".att_syntax bbb noprefix\", \"nop\");\n         //~^ ERROR using the .att_syntax directive may cause issues\n+        asm!(\".intel_syntax noprefix; nop\");\n+        //~^ ERROR intel syntax is the default syntax on this target\n+\n+        asm!(\n+            r\"\n+            .intel_syntax noprefix\n+            nop\"\n+        );\n+        //~^^^ ERROR intel syntax is the default syntax on this target\n     }\n }"}, {"sha": "241b302ad647281dd06d383dc6df07e82970c36b", "filename": "src/test/ui/asm/inline-syntax.stderr", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/39dcd01bf5e0c69c487f18903f44074f49ef205b/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39dcd01bf5e0c69c487f18903f44074f49ef205b/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr?ref=39dcd01bf5e0c69c487f18903f44074f49ef205b", "patch": "@@ -1,22 +1,22 @@\n-error: intel sytnax is the default syntax, and trying to use this directive may cause issues\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n   --> $DIR/inline-syntax.rs:5:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ help: Remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n-error: intel sytnax is the default syntax, and trying to use this directive may cause issues\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n   --> $DIR/inline-syntax.rs:7:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^ help: Remove this assembler directive: `aaa noprefix`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n   --> $DIR/inline-syntax.rs:9:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n    |\n-help: Remove the assembler directive and replace it with options(att_syntax)\n+help: remove the assembler directive and replace it with options(att_syntax)\n    |\n LL |         asm!(\"\", \"nop\", options(att_syntax));\n    |              --       ^^^^^^^^^^^^^^^^^^^^^\n@@ -25,12 +25,26 @@ error: using the .att_syntax directive may cause issues, use the att_syntax opti\n   --> $DIR/inline-syntax.rs:11:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: Remove the assembler directive and replace it with options(att_syntax)\n+help: remove the assembler directive and replace it with options(att_syntax)\n    |\n-LL |         asm!(\" bbb noprefix\", \"nop\", options(att_syntax));\n-   |              --                    ^^^^^^^^^^^^^^^^^^^^^\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:13:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix; nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+\n+error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:18:14\n+   |\n+LL |               .intel_syntax noprefix\n+   |  ______________^\n+LL | |             nop\"\n+   | |_ help: remove this assembler directive\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}