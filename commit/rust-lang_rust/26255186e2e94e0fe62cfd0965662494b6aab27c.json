{"sha": "26255186e2e94e0fe62cfd0965662494b6aab27c", "node_id": "C_kwDOAAsO6NoAKDI2MjU1MTg2ZTJlOTRlMGZlNjJjZmQwOTY1NjYyNDk0YjZhYWIyN2M", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T13:11:26Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2023-02-22T09:15:54Z"}, "message": "various: translation resources from cg backend\n\nExtend `CodegenBackend` trait with a function returning the translation\nresources from the codegen backend, which can be added to the complete\nlist of resources provided to the emitter.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "0f067abfaeeada0568afcf197354b77720efd87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f067abfaeeada0568afcf197354b77720efd87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26255186e2e94e0fe62cfd0965662494b6aab27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26255186e2e94e0fe62cfd0965662494b6aab27c", "html_url": "https://github.com/rust-lang/rust/commit/26255186e2e94e0fe62cfd0965662494b6aab27c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26255186e2e94e0fe62cfd0965662494b6aab27c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e37507f4815c789a6fcb204f209806a4c3952d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e37507f4815c789a6fcb204f209806a4c3952d", "html_url": "https://github.com/rust-lang/rust/commit/a8e37507f4815c789a6fcb204f209806a4c3952d"}], "stats": {"total": 134, "additions": 86, "deletions": 48}, "files": [{"sha": "5ba568bfd6e87a4268b55b55407a13b125458e14", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -172,6 +172,11 @@ pub struct CraneliftCodegenBackend {\n }\n \n impl CodegenBackend for CraneliftCodegenBackend {\n+    fn locale_resource(&self) -> &'static str {\n+        // FIXME(rust-lang/rust#100717) - cranelift codegen backend is not yet translated\n+        \"\"\n+    }\n+\n     fn init(&self, sess: &Session) {\n         use rustc_session::config::Lto;\n         match sess.lto() {"}, {"sha": "44538b415283c1cef48e9fb8a45c63edb9b827e5", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -103,6 +103,10 @@ pub struct GccCodegenBackend {\n }\n \n impl CodegenBackend for GccCodegenBackend {\n+    fn locale_resource(&self) -> &'static str {\n+        crate::DEFAULT_LOCALE_RESOURCE\n+    }\n+\n     fn init(&self, sess: &Session) {\n         if sess.lto() != Lto::No {\n             sess.emit_warning(LTONotSupported {});"}, {"sha": "c41e74c51a0dba2372cfc993c6d158bb0c84a9d3", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -249,6 +249,10 @@ impl LlvmCodegenBackend {\n }\n \n impl CodegenBackend for LlvmCodegenBackend {\n+    fn locale_resource(&self) -> &'static str {\n+        crate::DEFAULT_LOCALE_RESOURCE\n+    }\n+\n     fn init(&self, sess: &Session) {\n         llvm_util::init(sess); // Make sure llvm is inited\n     }"}, {"sha": "64bebe50ddbf23b17a26f5ad3af725a23f803a21", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -57,6 +57,10 @@ impl<'tcx, T> Backend<'tcx> for T where\n }\n \n pub trait CodegenBackend {\n+    /// Locale resources for diagnostic messages - a string the content of the Fluent resource.\n+    /// Called before `init` so that all other functions are able to emit translatable diagnostics.\n+    fn locale_resource(&self) -> &'static str;\n+\n     fn init(&self, _sess: &Session) {}\n     fn print(&self, _req: PrintRequest, _sess: &Session) {}\n     fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<Symbol> {"}, {"sha": "54bcb154da28ff88e913a6ec630d6f36766739d5", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -362,7 +362,7 @@ fn run_compiler(\n             }\n \n             // Make sure name resolution and macro expansion is run.\n-            queries.global_ctxt()?;\n+            queries.global_ctxt()?.enter(|tcx| tcx.resolver_for_lowering(()));\n \n             if callbacks.after_expansion(compiler, queries) == Compilation::Stop {\n                 return early_exit();\n@@ -1204,7 +1204,7 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n /// hook.\n pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(crate::DEFAULT_LOCALE_RESOURCES, false);\n+        rustc_errors::fallback_fluent_bundle(crate::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "40ed10e716597c2d88223b86bb6785e7d3d513e6", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -223,7 +223,7 @@ pub type LazyFallbackBundle = Lrc<Lazy<FluentBundle, impl FnOnce() -> FluentBund\n /// Return the default `FluentBundle` with standard \"en-US\" diagnostic messages.\n #[instrument(level = \"trace\")]\n pub fn fallback_fluent_bundle(\n-    resources: &'static [&'static str],\n+    resources: Vec<&'static str>,\n     with_directionality_markers: bool,\n ) -> LazyFallbackBundle {\n     Lrc::new(Lazy::new(move || {"}, {"sha": "671dc449eaa73072fe92229a514e9486ed3a73e6", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -42,11 +42,11 @@ impl<T: Write> Write for Shared<T> {\n \n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n-    static TEST_LOCALE_RESOURCES: &[&str] = &[crate::DEFAULT_LOCALE_RESOURCE];\n     rustc_span::create_default_session_globals_then(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n-        let fallback_bundle = crate::fallback_fluent_bundle(TEST_LOCALE_RESOURCES, false);\n+        let fallback_bundle =\n+            crate::fallback_fluent_bundle(vec![crate::DEFAULT_LOCALE_RESOURCE], false);\n \n         let output = Arc::new(Mutex::new(Vec::new()));\n         let je = JsonEmitter::new("}, {"sha": "8b37728b60fea3e86b6382aaf3cd2f6209ce824e", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -17,11 +17,11 @@ use rustc_span::{BytePos, FileName, Pos, Span};\n \n use std::path::PathBuf;\n \n-static TEST_LOCALE_RESOURCES: &[&str] =\n-    &[crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE];\n-\n fn sess() -> ParseSess {\n-    ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty())\n+    ParseSess::new(\n+        vec![crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE],\n+        FilePathMapping::empty(),\n+    )\n }\n \n /// Parses an item."}, {"sha": "14918d3c190a5c75789a282e549a964f09e35097", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -34,7 +34,10 @@ where\n \n /// Maps a string to tts, using a made-up filename.\n pub(crate) fn string_to_stream(source_str: String) -> TokenStream {\n-    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n+    let ps = ParseSess::new(\n+        vec![crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE],\n+        FilePathMapping::empty(),\n+    );\n     source_file_to_stream(\n         &ps,\n         ps.source_map().new_source_file(PathBuf::from(\"bogofile\").into(), source_str),\n@@ -45,7 +48,10 @@ pub(crate) fn string_to_stream(source_str: String) -> TokenStream {\n \n /// Parses a string, returns a crate.\n pub(crate) fn string_to_crate(source_str: String) -> ast::Crate {\n-    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n+    let ps = ParseSess::new(\n+        vec![crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE],\n+        FilePathMapping::empty(),\n+    );\n     with_error_checking_parse(source_str, &ps, |p| p.parse_crate_mod())\n }\n \n@@ -123,14 +129,14 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n-static TEST_LOCALE_RESOURCES: &[&str] =\n-    &[crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE];\n-\n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n     create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle(TEST_LOCALE_RESOURCES, false);\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+            vec![crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE],\n+            false,\n+        );\n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         source_map.new_source_file(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n "}, {"sha": "71a72036994d2fd657036187fcaf75f53fb9cf33", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -50,7 +50,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n         output_file: None,\n         temps_dir,\n     };\n-    let sess = build_session(sessopts, io, None, registry, &[], Default::default(), None, None);\n+    let sess = build_session(sessopts, io, None, registry, vec![], Default::default(), None, None);\n     (sess, cfg)\n }\n "}, {"sha": "e5d2fb2ea280757cbb8ed568062aa45fcdae96ef", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -90,6 +90,9 @@ pub fn create_session(\n         }\n     };\n \n+    let mut locale_resources = Vec::from(locale_resources);\n+    locale_resources.push(codegen_backend.locale_resource());\n+\n     let mut sess = session::build_session(\n         sopts,\n         io,"}, {"sha": "4e8c3f73e29cd51108faa4b4b30e81a30e7ddcac", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -226,10 +226,7 @@ pub struct ParseSess {\n \n impl ParseSess {\n     /// Used for testing.\n-    pub fn new(\n-        locale_resources: &'static [&'static str],\n-        file_path_mapping: FilePathMapping,\n-    ) -> Self {\n+    pub fn new(locale_resources: Vec<&'static str>, file_path_mapping: FilePathMapping) -> Self {\n         let fallback_bundle = fallback_fluent_bundle(locale_resources, false);\n         let sm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n@@ -268,7 +265,7 @@ impl ParseSess {\n     }\n \n     pub fn with_silent_emitter(fatal_note: Option<String>) -> Self {\n-        let fallback_bundle = fallback_fluent_bundle(&[], false);\n+        let fallback_bundle = fallback_fluent_bundle(Vec::new(), false);\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let fatal_handler =\n             Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, None, fallback_bundle);"}, {"sha": "446ba63ed1c86ed64dd8cd4f887e775a03945e38", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -1341,7 +1341,7 @@ pub fn build_session(\n     io: CompilerIO,\n     bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n-    fluent_resources: &'static [&'static str],\n+    fluent_resources: Vec<&'static str>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     target_override: Option<Target>,\n@@ -1630,13 +1630,11 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n-// FIXME(#100717): early errors aren't translated at the moment, so this is fine, but it will need\n-// to reference every crate that might emit an early error for translation to work.\n-static EARLY_ERROR_LOCALE_RESOURCE: &'static [&'static str] =\n-    &[rustc_errors::DEFAULT_LOCALE_RESOURCE];\n-\n fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n-    let fallback_bundle = fallback_fluent_bundle(EARLY_ERROR_LOCALE_RESOURCE, false);\n+    // FIXME(#100717): early errors aren't translated at the moment, so this is fine, but it will\n+    // need to reference every crate that might emit an early error for translation to work.\n+    let fallback_bundle =\n+        fallback_fluent_bundle(vec![rustc_errors::DEFAULT_LOCALE_RESOURCE], false);\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "ef38ca3c16c1af5a0d92eb1ed108660544a24ef1", "filename": "src/librustdoc/clean/render_macro_matchers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -63,7 +63,8 @@ fn snippet_equal_to_token(tcx: TyCtxt<'_>, matcher: &TokenTree) -> Option<String\n     let snippet = source_map.span_to_snippet(span).ok()?;\n \n     // Create a Parser.\n-    let sess = ParseSess::new(rustc_driver::DEFAULT_LOCALE_RESOURCES, FilePathMapping::empty());\n+    let sess =\n+        ParseSess::new(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), FilePathMapping::empty());\n     let file_name = source_map.span_to_filename(span);\n     let mut parser =\n         match rustc_parse::maybe_new_parser_from_source_str(&sess, file_name, snippet.clone()) {"}, {"sha": "fbfc58a436b9b3391c2d8d1d86716ec71afa389e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -115,8 +115,10 @@ pub(crate) fn new_handler(\n     diagnostic_width: Option<usize>,\n     unstable_opts: &UnstableOptions,\n ) -> rustc_errors::Handler {\n-    let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+        rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+        false,\n+    );\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "8a73d25d3f000950555b020328e69884016d4bcc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -546,8 +546,10 @@ pub(crate) fn make_test(\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let fallback_bundle =\n-                rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+            let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+                rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+                false,\n+            );\n             supports_color = EmitterWriter::stderr(\n                 ColorConfig::Auto,\n                 None,\n@@ -742,8 +744,10 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let fallback_bundle =\n-                rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+            let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+                rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+                false,\n+            );\n \n             let emitter = EmitterWriter::new(\n                 Box::new(io::sink()),"}, {"sha": "26fbb03a43e69610f5a5784efa4caddf11b6de43", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -33,8 +33,10 @@ fn check_rust_syntax(\n     code_block: RustCodeBlock,\n ) {\n     let buffer = Lrc::new(Lock::new(Buffer::default()));\n-    let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+        rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+        false,\n+    );\n     let emitter = BufferEmitter { buffer: Lrc::clone(&buffer), fallback_bundle };\n \n     let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "6fdb7de25ccc015738a33aa3abdbc52fc385a093", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -704,8 +704,10 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle =\n-                    rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+                let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+                    rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+                    false\n+                );\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,"}, {"sha": "9ac849aecf1a7779c220e27181013e12fddceecb", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -209,7 +209,10 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+        rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+        false\n+    );\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "a64963db6a7d06d873ff9fe5a1e6c836962c8e06", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -123,8 +123,10 @@ fn default_handler(\n     let emitter = if hide_parse_errors {\n         silent_emitter()\n     } else {\n-        let fallback_bundle =\n-            rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n+            rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n+            false,\n+        );\n         Box::new(EmitterWriter::stderr(\n             color_cfg,\n             Some(source_map.clone()),"}, {"sha": "8dac53c2a62344d2da11314f99dbccda475b4b82", "filename": "tests/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -27,6 +27,8 @@ use std::any::Any;\n struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n+    fn locale_resource(&self) -> &'static str { \"\" }\n+\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "ddc86c1dc31292bf520de77e4bd969ecf5bab219", "filename": "tests/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -30,10 +30,11 @@ pub fn main() {\n     assert_eq!(gravy::foo(), 10);\n }\n \n-static TEST_LOCALE_RESOURCES: &[&str] = &[rustc_parse::DEFAULT_LOCALE_RESOURCE];\n-\n fn parse() {\n-    let parse_session = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n+    let parse_session = ParseSess::new(\n+        vec![rustc_parse::DEFAULT_LOCALE_RESOURCE],\n+        FilePathMapping::empty()\n+    );\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();"}, {"sha": "e417a6a833b72bfda9b00848d98e6018aeab190f", "filename": "tests/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26255186e2e94e0fe62cfd0965662494b6aab27c/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=26255186e2e94e0fe62cfd0965662494b6aab27c", "patch": "@@ -219,10 +219,8 @@ fn main() {\n     rustc_span::create_default_session_globals_then(|| run());\n }\n \n-static TEST_LOCALE_RESOURCES: &[&str] = &[rustc_parse::DEFAULT_LOCALE_RESOURCE];\n-\n fn run() {\n-    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n+    let ps = ParseSess::new(vec![rustc_parse::DEFAULT_LOCALE_RESOURCE], FilePathMapping::empty());\n \n     iter_exprs(2, &mut |mut e| {\n         // If the pretty printer is correct, then `parse(print(e))` should be identical to `e`,"}]}