{"sha": "b205a0ced3f8b2136ac256d8a3dca9fa09e910be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDVhMGNlZDNmOGIyMTM2YWMyNTZkOGEzZGNhOWZhMDllOTEwYmU=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-30T20:08:27Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-30T20:08:27Z"}, "message": "source_binder => match_ast!", "tree": {"sha": "ce641d2c557bb5a5be4d09421e97ed7ca3447425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce641d2c557bb5a5be4d09421e97ed7ca3447425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b205a0ced3f8b2136ac256d8a3dca9fa09e910be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b205a0ced3f8b2136ac256d8a3dca9fa09e910be", "html_url": "https://github.com/rust-lang/rust/commit/b205a0ced3f8b2136ac256d8a3dca9fa09e910be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b205a0ced3f8b2136ac256d8a3dca9fa09e910be/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998088876d91b7602068f8209a61918d4a8a8fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/998088876d91b7602068f8209a61918d4a8a8fe7", "html_url": "https://github.com/rust-lang/rust/commit/998088876d91b7602068f8209a61918d4a8a8fe7"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "152bc71bd28772fb135d53dfc7e64f48d025809e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b205a0ced3f8b2136ac256d8a3dca9fa09e910be/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b205a0ced3f8b2136ac256d8a3dca9fa09e910be/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b205a0ced3f8b2136ac256d8a3dca9fa09e910be", "patch": "@@ -12,7 +12,7 @@ use hir_expand::name::AsName;\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n-    AstPtr,\n+    match_ast, AstPtr,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n@@ -37,24 +37,34 @@ fn try_get_resolver_for_node(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<Resolver> {\n-    if let Some(module) = ast::Module::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: module };\n-        Some(crate::Module::from_declaration(db, src)?.resolver(db))\n-    } else if let Some(file) = ast::SourceFile::cast(node.clone()) {\n-        let src =\n-            crate::Source { file_id: file_id.into(), ast: crate::ModuleSource::SourceFile(file) };\n-        Some(crate::Module::from_definition(db, src)?.resolver(db))\n-    } else if let Some(s) = ast::StructDef::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: s };\n-        Some(Struct::from_source(db, src)?.resolver(db))\n-    } else if let Some(e) = ast::EnumDef::cast(node.clone()) {\n-        let src = crate::Source { file_id: file_id.into(), ast: e };\n-        Some(Enum::from_source(db, src)?.resolver(db))\n-    } else if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n-        Some(def_with_body_from_child_node(db, file_id, node)?.resolver(db))\n-    } else {\n-        // FIXME add missing cases\n-        None\n+    match_ast! {\n+        match node {\n+            ast::Module(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(crate::Module::from_declaration(db, src)?.resolver(db))\n+            },\n+             ast::SourceFile(it) => {\n+                let src =\n+                    crate::Source { file_id: file_id.into(), ast: crate::ModuleSource::SourceFile(it) };\n+                Some(crate::Module::from_definition(db, src)?.resolver(db))\n+            },\n+            ast::StructDef(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(Struct::from_source(db, src)?.resolver(db))\n+            },\n+            ast::EnumDef(it) => {\n+                let src = crate::Source { file_id: file_id.into(), ast: it };\n+                Some(Enum::from_source(db, src)?.resolver(db))\n+            },\n+            _ => {\n+                if node.kind() == FN_DEF || node.kind() == CONST_DEF || node.kind() == STATIC_DEF {\n+                    Some(def_with_body_from_child_node(db, file_id, node)?.resolver(db))\n+                } else {\n+                    // FIXME add missing cases\n+                    None\n+                }\n+            },\n+        }\n     }\n }\n \n@@ -68,16 +78,14 @@ fn def_with_body_from_child_node(\n     let ctx = LocationCtx::new(db, module.id, file_id.into());\n \n     node.ancestors().find_map(|node| {\n-        if let Some(def) = ast::FnDef::cast(node.clone()) {\n-            return Some(Function { id: ctx.to_def(&def) }.into());\n-        }\n-        if let Some(def) = ast::ConstDef::cast(node.clone()) {\n-            return Some(Const { id: ctx.to_def(&def) }.into());\n-        }\n-        if let Some(def) = ast::StaticDef::cast(node) {\n-            return Some(Static { id: ctx.to_def(&def) }.into());\n+        match_ast! {\n+            match node {\n+                ast::FnDef(def)  => { Some(Function {id: ctx.to_def(&def) }.into()) },\n+                ast::ConstDef(def) => { Some(Const { id: ctx.to_def(&def) }.into()) },\n+                ast::StaticDef(def) => { Some(Static { id: ctx.to_def(&def) }.into()) },\n+                _ => { None },\n+            }\n         }\n-        None\n     })\n }\n "}]}