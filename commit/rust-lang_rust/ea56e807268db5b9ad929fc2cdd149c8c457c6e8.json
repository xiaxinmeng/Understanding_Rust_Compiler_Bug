{"sha": "ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "node_id": "C_kwDOAAsO6NoAKGVhNTZlODA3MjY4ZGI1YjlhZDkyOWZjMmNkZDE0OWM4YzQ1N2M2ZTg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-10T15:47:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T15:47:42Z"}, "message": "Rollup merge of #104235 - compiler-errors:more-ct-guar, r=oli-obk\n\nUse `const_error_with_guaranteed` more\n\nBetter to pass down an ErrorGuaranteed rather than making a new one out of thin air, for some usages. Also for the ones where we *do* need to delay a bug, that delayed bug will have a more descriptive message.", "tree": {"sha": "a67c0f2b109fa36f3146b0c893fc9ed5212d625a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a67c0f2b109fa36f3146b0c893fc9ed5212d625a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbR0eCRBK7hj4Ov3rIwAAYK0IAI9izqbMBXNKeX8V7lmXG/dm\nZlANEX6qp2oxROskNCDLBzx/ZltQtsZNIuB+GIW87YMZSJ0VIkrGZVZ+MU5vZ6W4\nwZs3B/1uBUXGjWdp7wVyo2TzjUOJPV0si/KrXQDOHvF8m5VnxIugn4InBJ71x3nr\nJi/o0EL1BsunaGR57IqKbJD3XIMvqEU9+GikypCZZnz5SpgY4Tdff0iSQRyjE4jI\n/W+kHaffW/Qlzn7H07CN/IPZkTaydoxPCtjFiDaP/DcBiTEJQ1tpzo+l3pG774my\neLYTsZSukFdyd4GbGJ307/gtugKgSAMv5XBeW2P6S2zMVDtMopjIZK6aiaO/uKg=\n=Bx0+\n-----END PGP SIGNATURE-----\n", "payload": "tree a67c0f2b109fa36f3146b0c893fc9ed5212d625a\nparent 77fde5d49a8d5244e032ee7956589fd7f28cf0eb\nparent 0f89fb1791ef75170dadad29016ba7f121b8b924\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668095262 -0500\ncommitter GitHub <noreply@github.com> 1668095262 -0500\n\nRollup merge of #104235 - compiler-errors:more-ct-guar, r=oli-obk\n\nUse `const_error_with_guaranteed` more\n\nBetter to pass down an ErrorGuaranteed rather than making a new one out of thin air, for some usages. Also for the ones where we *do* need to delay a bug, that delayed bug will have a more descriptive message.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "html_url": "https://github.com/rust-lang/rust/commit/ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77fde5d49a8d5244e032ee7956589fd7f28cf0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/77fde5d49a8d5244e032ee7956589fd7f28cf0eb", "html_url": "https://github.com/rust-lang/rust/commit/77fde5d49a8d5244e032ee7956589fd7f28cf0eb"}, {"sha": "0f89fb1791ef75170dadad29016ba7f121b8b924", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f89fb1791ef75170dadad29016ba7f121b8b924", "html_url": "https://github.com/rust-lang/rust/commit/0f89fb1791ef75170dadad29016ba7f121b8b924"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "32ec585576920948dbdd5438039f934005d315ac", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -106,6 +106,7 @@ use rustc_ast::LitKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock};\n use rustc_data_structures::tiny_list::TinyList;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -176,7 +177,7 @@ pub enum LitToConstError {\n     /// This is used for graceful error handling (`delay_span_bug`) in\n     /// type checking (`Const::from_anon_const`).\n     TypeError,\n-    Reported,\n+    Reported(ErrorGuaranteed),\n }\n \n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd)]"}, {"sha": "54f3964d28f06db97db31c92405e9b17a047b5f4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -2251,7 +2251,9 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n-                    Err(_) => Self::Ty(tcx.const_error(ty)),\n+                    Err(ErrorHandled::Reported(guar)) => {\n+                        Self::Ty(tcx.const_error_with_guaranteed(ty, guar))\n+                    }\n                 }\n             }\n         }"}, {"sha": "e2e2761501b48c5cf0e544e9befbf8100c18d940", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -2,7 +2,6 @@ use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n@@ -225,7 +224,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_typeck(tcx, param_env) {\n             match val {\n                 Ok(val) => Const::from_value(tcx, val, self.ty()),\n-                Err(ErrorGuaranteed { .. }) => tcx.const_error(self.ty()),\n+                Err(guar) => tcx.const_error_with_guaranteed(self.ty(), guar),\n             }\n         } else {\n             // Either the constant isn't evaluatable or ValTree creation failed.\n@@ -240,7 +239,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_mir(tcx, param_env) {\n             match val {\n                 Ok(const_val) => ConstantKind::from_value(const_val, self.ty()),\n-                Err(ErrorGuaranteed { .. }) => ConstantKind::Ty(tcx.const_error(self.ty())),\n+                Err(guar) => ConstantKind::Ty(tcx.const_error_with_guaranteed(self.ty(), guar)),\n             }\n         } else {\n             ConstantKind::Ty(self)"}, {"sha": "7d8a940bde5cefc78c9d5988c364f90bff270786", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, TyCtxt};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::Size;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -26,7 +27,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let literal =\n                     match lit_to_mir_constant(tcx, LitToConstInput { lit: &lit.node, ty, neg }) {\n                         Ok(c) => c,\n-                        Err(LitToConstError::Reported) => ConstantKind::Ty(tcx.const_error(ty)),\n+                        Err(LitToConstError::Reported(guar)) => {\n+                            ConstantKind::Ty(tcx.const_error_with_guaranteed(ty, guar))\n+                        }\n                         Err(LitToConstError::TypeError) => {\n                             bug!(\"encountered type error in `lit_to_mir_constant\")\n                         }\n@@ -105,7 +108,15 @@ pub(crate) fn lit_to_mir_constant<'tcx>(\n     let LitToConstInput { lit, ty, neg } = lit_input;\n     let trunc = |n| {\n         let param_ty = ty::ParamEnv::reveal_all().and(ty);\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        let width = tcx\n+            .layout_of(param_ty)\n+            .map_err(|_| {\n+                LitToConstError::Reported(tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    format!(\"couldn't compute width of literal: {:?}\", lit_input.lit),\n+                ))\n+            })?\n+            .size;\n         trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n         let result = width.truncate(n);\n         trace!(\"trunc result: {}\", result);\n@@ -136,12 +147,20 @@ pub(crate) fn lit_to_mir_constant<'tcx>(\n         (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n             trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n         }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n-            parse_float_into_constval(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n-        }\n+        (ast::LitKind::Float(n, _), ty::Float(fty)) => parse_float_into_constval(*n, *fty, neg)\n+            .ok_or_else(|| {\n+                LitToConstError::Reported(tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    format!(\"couldn't parse float literal: {:?}\", lit_input.lit),\n+                ))\n+            })?,\n         (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n         (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n-        (ast::LitKind::Err, _) => return Err(LitToConstError::Reported),\n+        (ast::LitKind::Err, _) => {\n+            return Err(LitToConstError::Reported(\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"encountered LitKind::Err during mir build\"),\n+            ));\n+        }\n         _ => return Err(LitToConstError::TypeError),\n     };\n "}, {"sha": "85e8801bda3ec929453c3473eaf01d2ce06dcbe1", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -1,6 +1,7 @@\n use rustc_ast as ast;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::ty::{self, ParamEnv, ScalarInt, TyCtxt};\n+use rustc_span::DUMMY_SP;\n \n pub(crate) fn lit_to_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -10,7 +11,15 @@ pub(crate) fn lit_to_const<'tcx>(\n \n     let trunc = |n| {\n         let param_ty = ParamEnv::reveal_all().and(ty);\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n+        let width = tcx\n+            .layout_of(param_ty)\n+            .map_err(|_| {\n+                LitToConstError::Reported(tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    format!(\"couldn't compute width of literal: {:?}\", lit_input.lit),\n+                ))\n+            })?\n+            .size;\n         trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n         let result = width.truncate(n);\n         trace!(\"trunc result: {}\", result);\n@@ -44,7 +53,11 @@ pub(crate) fn lit_to_const<'tcx>(\n         }\n         (ast::LitKind::Bool(b), ty::Bool) => ty::ValTree::from_scalar_int((*b).into()),\n         (ast::LitKind::Char(c), ty::Char) => ty::ValTree::from_scalar_int((*c).into()),\n-        (ast::LitKind::Err, _) => return Err(LitToConstError::Reported),\n+        (ast::LitKind::Err, _) => {\n+            return Err(LitToConstError::Reported(\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"encountered LitKind::Err during mir build\"),\n+            ));\n+        }\n         _ => return Err(LitToConstError::TypeError),\n     };\n "}, {"sha": "776c748c7e5fe626fc09e999597ed05baa0ee99e", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -614,7 +614,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             LitToConstInput { lit: &lit.node, ty: self.typeck_results.expr_ty(expr), neg };\n         match self.tcx.at(expr.span).lit_to_mir_constant(lit_input) {\n             Ok(constant) => self.const_to_pat(constant, expr.hir_id, lit.span, false).kind,\n-            Err(LitToConstError::Reported) => PatKind::Wild,\n+            Err(LitToConstError::Reported(_)) => PatKind::Wild,\n             Err(LitToConstError::TypeError) => bug!(\"lower_lit: had type error\"),\n         }\n     }"}, {"sha": "cb41c4f94e2e69b803caaba802a51c7fc06f2b25", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea56e807268db5b9ad929fc2cdd149c8c457c6e8/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=ea56e807268db5b9ad929fc2cdd149c8c457c6e8", "patch": "@@ -235,7 +235,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                     neg,\n                 }) {\n                     Ok(c) => c,\n-                    Err(LitToConstError::Reported) => self.tcx.const_error(node.ty),\n+                    Err(LitToConstError::Reported(guar)) => {\n+                        self.tcx.const_error_with_guaranteed(node.ty, guar)\n+                    }\n                     Err(LitToConstError::TypeError) => {\n                         bug!(\"encountered type error in lit_to_const\")\n                     }"}]}