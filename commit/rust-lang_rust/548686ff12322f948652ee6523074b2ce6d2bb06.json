{"sha": "548686ff12322f948652ee6523074b2ce6d2bb06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ODY4NmZmMTIzMjJmOTQ4NjUyZWU2NTIzMDc0YjJjZTZkMmJiMDY=", "commit": {"author": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2017-09-17T03:40:05Z"}, "committer": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2017-09-21T04:11:03Z"}, "message": "Document stable size_of primitives and pointer size guarantees", "tree": {"sha": "3cb0d0bf3a9a0ea669af284c9cbfe21765fdaf7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb0d0bf3a9a0ea669af284c9cbfe21765fdaf7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548686ff12322f948652ee6523074b2ce6d2bb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548686ff12322f948652ee6523074b2ce6d2bb06", "html_url": "https://github.com/rust-lang/rust/commit/548686ff12322f948652ee6523074b2ce6d2bb06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548686ff12322f948652ee6523074b2ce6d2bb06/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b492405b1fcfb8243481582182a0232fb5177021", "url": "https://api.github.com/repos/rust-lang/rust/commits/b492405b1fcfb8243481582182a0232fb5177021", "html_url": "https://github.com/rust-lang/rust/commit/b492405b1fcfb8243481582182a0232fb5177021"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "e98dab739cb02d0a9129eca4c423252f28de4396", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/548686ff12322f948652ee6523074b2ce6d2bb06/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548686ff12322f948652ee6523074b2ce6d2bb06/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=548686ff12322f948652ee6523074b2ce6d2bb06", "patch": "@@ -177,15 +177,59 @@ pub fn forget<T>(t: T) {\n \n /// Returns the size of a type in bytes.\n ///\n-/// More specifically, this is the offset in bytes between successive\n-/// items of the same type, including alignment padding.\n+/// More specifically, this is the offset in bytes between successive elements\n+/// in an array with that item type including alignment padding. Thus, for any\n+/// type `T` and length `n`, `[T; n]` has a size of `n * size_of::<T>()`.\n+///\n+/// In general, the size of a type is not stable across compilations, but\n+/// specific types such as primitives are.\n+///\n+/// The following table gives the size for primitives.\n+///\n+/// Type | size_of::\\<Type>()\n+/// ---- | ---------------\n+/// () | 0\n+/// u8 | 1\n+/// u16 | 2\n+/// u32 | 4\n+/// u64 | 8\n+/// i8 | 1\n+/// i16 | 2\n+/// i32 | 4\n+/// i64 | 8\n+/// f32 | 4\n+/// f64 | 8\n+/// char | 4\n+///\n+/// Furthermore, `usize` and `isize` have the same size.\n+///\n+/// The types `*const T`, `&T`, `Box<T>`, `Option<&T>`, and `Option<Box<T>>` all have\n+/// the same size. If `T` is Sized, all of those types have the same size as `usize`.\n+///\n+/// The mutability of a pointer does not change its size. As such, `&T` and `&mut T`\n+/// have the same size. Likewise for `*const T` and `*mut T`.\n ///\n /// # Examples\n ///\n /// ```\n /// use std::mem;\n ///\n+/// // Some primitives\n /// assert_eq!(4, mem::size_of::<i32>());\n+/// assert_eq!(8, mem::size_of::<f64>());\n+/// assert_eq!(0, mem::size_of::<()>());\n+///\n+/// // Some arrays\n+/// assert_eq!(8, mem::size_of::<[i32; 2]>());\n+/// assert_eq!(12, mem::size_of::<[i32; 3]>());\n+/// assert_eq!(0, mem::size_of::<[i32; 0]>());\n+///\n+///\n+/// // Pointer size equality\n+/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<*const i32>());\n+/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Box<i32>>());\n+/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Option<&i32>>());\n+/// assert_eq!(mem::size_of::<Box<i32>>(), mem::size_of::<Option<Box<i32>>>());\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1edb35d8fe74120fee2f05fc346bb23a0174ebdd", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/548686ff12322f948652ee6523074b2ce6d2bb06/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548686ff12322f948652ee6523074b2ce6d2bb06/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=548686ff12322f948652ee6523074b2ce6d2bb06", "patch": "@@ -710,6 +710,10 @@ mod prim_u128 { }\n //\n /// The pointer-sized signed integer type.\n ///\n+/// The size of this primitive is how many bytes it takes to reference any\n+/// location in memory. For example, on a 32 bit target, this is 4 bytes\n+/// and on a 64 bit target, this is 8 bytes.\n+///\n /// *[See also the `std::isize` module](isize/index.html).*\n ///\n /// However, please note that examples are shared between primitive integer\n@@ -722,6 +726,10 @@ mod prim_isize { }\n //\n /// The pointer-sized unsigned integer type.\n ///\n+/// The size of this primitive is how many bytes it takes to reference any\n+/// location in memory. For example, on a 32 bit target, this is 4 bytes\n+/// and on a 64 bit target, this is 8 bytes.\n+///\n /// *[See also the `std::usize` module](usize/index.html).*\n ///\n /// However, please note that examples are shared between primitive integer"}]}