{"sha": "4747215d778abd9f280202d07f279fdeaea519f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDcyMTVkNzc4YWJkOWYyODAyMDJkMDdmMjc5ZmRlYWVhNTE5Zjg=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T20:08:15Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-10-01T20:08:15Z"}, "message": "add `str::{SplitN, RSplitN, SplitTerminator, RSplitTerminator}::as_str` methods\n\nThis commit entroduce 4 methods smililar to `Split::as_str` all under the same\ngate \"str_split_as_str\".", "tree": {"sha": "9cd5ecb5ac53c1f3a4a296a1dc68fc127f8db7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cd5ecb5ac53c1f3a4a296a1dc68fc127f8db7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4747215d778abd9f280202d07f279fdeaea519f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4747215d778abd9f280202d07f279fdeaea519f8", "html_url": "https://github.com/rust-lang/rust/commit/4747215d778abd9f280202d07f279fdeaea519f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4747215d778abd9f280202d07f279fdeaea519f8/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e", "html_url": "https://github.com/rust-lang/rust/commit/0b923d3ca0b7f5a1a611564ee48c1e92f896d79e"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "dc2c2e0168f56428e44b97c224045429885cdbbb", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4747215d778abd9f280202d07f279fdeaea519f8/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4747215d778abd9f280202d07f279fdeaea519f8/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=4747215d778abd9f280202d07f279fdeaea519f8", "patch": "@@ -783,6 +783,48 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"A..B..\".split_terminator('.');\n+    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \".B..\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"A..B..\".rsplit_terminator('.');\n+    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"A..B\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n derive_pattern_clone! {\n     clone SplitNInternal\n     with |s| SplitNInternal { iter: s.iter.clone(), ..*s }\n@@ -839,6 +881,11 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn as_str(&self) -> &'a str {\n+        self.iter.as_str()\n+    }\n }\n \n generate_pattern_iterators! {\n@@ -859,6 +906,48 @@ generate_pattern_iterators! {\n     delegate single ended;\n }\n \n+impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".splitn(3, ' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".rsplitn(3, ' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n derive_pattern_clone! {\n     clone MatchIndicesInternal\n     with |s| MatchIndicesInternal(s.0.clone())"}]}