{"sha": "2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "node_id": "C_kwDOAAsO6NoAKDJhN2Q1NTk5NzA2ZjEyN2MxZWJlNmU1Zjk5MmY5MjQ1ZDdmMDliOGE", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-12-26T17:49:19Z"}, "committer": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2023-01-02T23:28:54Z"}, "message": "Don't trim path for `unsafe_op_in_unsafe_fn` lints", "tree": {"sha": "3408876b28cf4d6b7ef4ac4175dc315f6fc9c885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3408876b28cf4d6b7ef4ac4175dc315f6fc9c885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "html_url": "https://github.com/rust-lang/rust/commit/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731e0bf721c1ec2c7843547e86b6157b40a437d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/731e0bf721c1ec2c7843547e86b6157b40a437d1", "html_url": "https://github.com/rust-lang/rust/commit/731e0bf721c1ec2c7843547e86b6157b40a437d1"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "03a7f2d70faebb1127bcf952ce28cab88b633923", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::thir::visit::{self, Visitor};\n use rustc_hir as hir;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::thir::*;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n@@ -524,17 +525,19 @@ impl UnsafeOpKind {\n         hir_id: hir::HirId,\n         span: Span,\n     ) {\n+        // FIXME: ideally we would want to trim the def paths, but this is not\n+        // feasible with the current lint emission API (see issue #106126).\n         match self {\n-            CallToUnsafeFunction(did) if did.is_some() => tcx.emit_spanned_lint(\n+            CallToUnsafeFunction(Some(did)) => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n                 UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &with_no_trimmed_paths!(tcx.def_path_str(*did)),\n                 },\n             ),\n-            CallToUnsafeFunction(..) => tcx.emit_spanned_lint(\n+            CallToUnsafeFunction(None) => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n@@ -594,7 +597,7 @@ impl UnsafeOpKind {\n                 span,\n                 UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(*did),\n+                    function: &with_no_trimmed_paths!(tcx.def_path_str(*did)),\n                 },\n             ),\n         }\n@@ -607,24 +610,24 @@ impl UnsafeOpKind {\n         unsafe_op_in_unsafe_fn_allowed: bool,\n     ) {\n         match self {\n-            CallToUnsafeFunction(did) if did.is_some() && unsafe_op_in_unsafe_fn_allowed => {\n+            CallToUnsafeFunction(Some(did)) if unsafe_op_in_unsafe_fn_allowed => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &tcx.def_path_str(*did),\n                 });\n             }\n-            CallToUnsafeFunction(did) if did.is_some() => {\n+            CallToUnsafeFunction(Some(did)) => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafe {\n                     span,\n-                    function: &tcx.def_path_str(did.unwrap()),\n+                    function: &tcx.def_path_str(*did),\n                 });\n             }\n-            CallToUnsafeFunction(..) if unsafe_op_in_unsafe_fn_allowed => {\n+            CallToUnsafeFunction(None) if unsafe_op_in_unsafe_fn_allowed => {\n                 tcx.sess.emit_err(\n                     CallToUnsafeFunctionRequiresUnsafeNamelessUnsafeOpInUnsafeFnAllowed { span },\n                 );\n             }\n-            CallToUnsafeFunction(..) => {\n+            CallToUnsafeFunction(None) => {\n                 tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeNameless { span });\n             }\n             UseOfInlineAssembly if unsafe_op_in_unsafe_fn_allowed => {"}, {"sha": "091a3edb756ada56f2667ee3dbf0c04e8e25d34c", "filename": "src/test/ui/unsafe/auxiliary/issue-106126.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fauxiliary%2Fissue-106126.rs?ref=2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "patch": "@@ -0,0 +1,9 @@\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+        unsafe fn __unsf() {}\n+        unsafe fn __foo() {\n+            __unsf();\n+        }\n+    };\n+}"}, {"sha": "93f478ee358023ba68e1f8c08125e909144fda51", "filename": "src/test/ui/unsafe/issue-106126-good-path-bug.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7d5599706f127c1ebe6e5f992f9245d7f09b8a/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-106126-good-path-bug.rs?ref=2a7d5599706f127c1ebe6e5f992f9245d7f09b8a", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for #106126.\n+// check-pass\n+// aux-build:issue-106126.rs\n+\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+#[macro_use]\n+extern crate issue_106126;\n+\n+foo!();\n+\n+fn main() {}"}]}