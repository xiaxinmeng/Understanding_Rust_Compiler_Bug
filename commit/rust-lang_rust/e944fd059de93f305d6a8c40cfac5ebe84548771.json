{"sha": "e944fd059de93f305d6a8c40cfac5ebe84548771", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDRmZDA1OWRlOTNmMzA1ZDZhOGM0MGNmYWM1ZWJlODQ1NDg3NzE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T02:21:36Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T02:21:36Z"}, "message": "Add `item` matcher in mbe", "tree": {"sha": "9e7ff9215e3490169c63c12e03c2eb03ca59ba20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7ff9215e3490169c63c12e03c2eb03ca59ba20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e944fd059de93f305d6a8c40cfac5ebe84548771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e944fd059de93f305d6a8c40cfac5ebe84548771", "html_url": "https://github.com/rust-lang/rust/commit/e944fd059de93f305d6a8c40cfac5ebe84548771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e944fd059de93f305d6a8c40cfac5ebe84548771/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "112fd0ec7d65b5f23865410fd3e188e761d97110", "url": "https://api.github.com/repos/rust-lang/rust/commits/112fd0ec7d65b5f23865410fd3e188e761d97110", "html_url": "https://github.com/rust-lang/rust/commit/112fd0ec7d65b5f23865410fd3e188e761d97110"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "2f47e32d3b72352bb2169ce60cf2cfee08913f3c", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -597,4 +597,48 @@ SOURCE_FILE@[0; 40)\n         assert_expansion(&rules, \"foo! { 2 }\", \"fn bar () {2 ;}\");\n         assert_expansion(&rules, \"foo! { let a = 0 }\", \"fn bar () {let a = 0 ;}\");\n     }\n+\n+    #[test]\n+    fn test_single_item() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ i:item) => (\n+                $ i\n+            )\n+        }\n+\"#,\n+        );\n+        assert_expansion(&rules, \"foo! {mod c {}}\", \"mod c {}\");\n+    }\n+\n+    #[test]\n+    fn test_all_items() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            ($ ($ i:item)*) => ($ (\n+                $ i\n+            )*)\n+        }\n+\"#,\n+        );\n+        assert_expansion(&rules, r#\"\n+        foo! {\n+            extern crate a;\n+            mod b;\n+            mod c {}\n+            use d;\n+            const E: i32 = 0;\n+            static F: i32 = 0;\n+            impl G {}\n+            struct H;\n+            enum I { Foo }\n+            trait J {}\n+            fn h() {}\n+            extern {}\n+            type T = u8;\n+        }\n+\"#, r#\"extern crate a ; mod b ; mod c {} use d ; const E : i32 = 0 ; static F : i32 = 0 ; impl G {} struct H ; enum I {Foo} trait J {} fn h () {} extern {} type T = u8 ;\"#);\n+    }\n }"}, {"sha": "acba42809ed955de7fa0ba97b154aff0811ca166", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -161,6 +161,11 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                             let pat = input.eat_stmt().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(pat.into()));\n                         }\n+                        \"item\" => {\n+                            let item =\n+                                input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();\n+                            res.inner.insert(text.clone(), Binding::Simple(item.into()));\n+                        }\n                         _ => return Err(ExpandError::UnexpectedToken),\n                     }\n                 }\n@@ -278,6 +283,9 @@ mod tests {\n \n         assert_err(\"($i) => ($i)\", \"foo!{a}\", ExpandError::UnexpectedToken);\n         assert_err(\"($i:) => ($i)\", \"foo!{a}\", ExpandError::UnexpectedToken);\n+\n+        // FIXME:\n+        // Add an err test case for ($($i:ident)) => ($())\n     }\n \n     fn assert_err(macro_body: &str, invocation: &str, err: ExpandError) {"}, {"sha": "195e4c3ac655f3374cd462a1ba3a60002ab6e02b", "filename": "crates/ra_mbe/src/subtree_parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_parser.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -46,6 +46,10 @@ impl<'a> Parser<'a> {\n         self.parse(|src, sink| ra_parser::parse_stmt(src, sink, false))\n     }\n \n+    pub fn parse_item(self) -> Option<tt::TokenTree> {\n+        self.parse(ra_parser::parse_item)\n+    }\n+\n     fn parse<F>(self, f: F) -> Option<tt::TokenTree>\n     where\n         F: FnOnce(&dyn TokenSource, &mut dyn TreeSink),"}, {"sha": "484437b0ecf75018d0828cbb2af4b27f6d306290", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -104,6 +104,11 @@ impl<'a> TtCursor<'a> {\n         parser.parse_stmt()\n     }\n \n+    pub(crate) fn eat_item(&mut self) -> Option<tt::TokenTree> {\n+        let parser = Parser::new(&mut self.pos, self.subtree);\n+        parser.parse_item()\n+    }\n+\n     pub(crate) fn expect_char(&mut self, char: char) -> Result<(), ParseError> {\n         if self.at_char(char) {\n             self.bump();"}, {"sha": "f8ed1299a90f209c4035d5eef8a80ff8f57b9dab", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -69,6 +69,10 @@ pub(crate) fn stmt(p: &mut Parser, with_semi: bool) {\n     expressions::stmt(p, with_semi)\n }\n \n+pub(crate) fn item(p: &mut Parser) {\n+    items::item_or_macro(p, true, items::ItemFlavor::Mod)\n+}\n+\n pub(crate) fn reparser(\n     node: SyntaxKind,\n     first_child: Option<SyntaxKind>,"}, {"sha": "11b5b9a75c6a92c86d8a38f3f27124719db1d239", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e944fd059de93f305d6a8c40cfac5ebe84548771/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=e944fd059de93f305d6a8c40cfac5ebe84548771", "patch": "@@ -93,6 +93,11 @@ pub fn parse_stmt(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink,\n     parse_from_tokens(token_source, tree_sink, |p| grammar::stmt(p, with_semi));\n }\n \n+/// Parse given tokens into the given sink as an item\n+pub fn parse_item(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n+    parse_from_tokens(token_source, tree_sink, grammar::item);\n+}\n+\n /// A parsing function for a specific braced-block.\n pub struct Reparser(fn(&mut parser::Parser));\n "}]}