{"sha": "9384cba72e09790eaf166510bed885ff1771dbfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODRjYmE3MmUwOTc5MGVhZjE2NjUxMGJlZDg4NWZmMTc3MWRiZmU=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-03-03T08:41:44Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-03-04T22:33:30Z"}, "message": "Documentation and slight simplification of BTreeMap's internals", "tree": {"sha": "637a2f6e85030952c4f3ee2d1c23a895c03651e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637a2f6e85030952c4f3ee2d1c23a895c03651e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9384cba72e09790eaf166510bed885ff1771dbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9384cba72e09790eaf166510bed885ff1771dbfe", "html_url": "https://github.com/rust-lang/rust/commit/9384cba72e09790eaf166510bed885ff1771dbfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9384cba72e09790eaf166510bed885ff1771dbfe/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9381e8178b49636d4604e4ec0f1263960691c958", "url": "https://api.github.com/repos/rust-lang/rust/commits/9381e8178b49636d4604e4ec0f1263960691c958", "html_url": "https://github.com/rust-lang/rust/commit/9381e8178b49636d4604e4ec0f1263960691c958"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "c75c12df2d08906e53d45bfe1e3d1e7954d7eb6f", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9384cba72e09790eaf166510bed885ff1771dbfe/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9384cba72e09790eaf166510bed885ff1771dbfe/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=9384cba72e09790eaf166510bed885ff1771dbfe", "patch": "@@ -153,10 +153,15 @@ impl<K, V> InternalNode<K, V> {\n     }\n }\n \n-/// An owned pointer to a node. This basically is either `Box<LeafNode<K, V>>` or\n-/// `Box<InternalNode<K, V>>`. However, it contains no information as to which of the two types\n-/// of nodes is actually behind the box, and, partially due to this lack of information, has no\n-/// destructor.\n+/// A managed, non-null pointer to a node. This is either an owned pointer to\n+/// `LeafNode<K, V>`, an owned pointer to `InternalNode<K, V>`, or a (not owned)\n+/// pointer to `NodeHeader<(), ()` (more specifically, the pointer to EMPTY_ROOT_NODE).\n+/// All of these types have a `NodeHeader<K, V>` prefix, meaning that they have at\n+/// least the same size as `NodeHeader<K, V>` and store the same kinds of data at the same\n+/// offsets; and they have a pointer alignment at least as large as `NodeHeader<K, V>`'s.\n+/// However, `BoxedNode` contains no information as to which of the three types\n+/// of nodes it actually contains, and, partially due to this lack of information,\n+/// has no destructor.\n struct BoxedNode<K, V> {\n     ptr: Unique<LeafNode<K, V>>,\n }\n@@ -167,9 +172,7 @@ impl<K, V> BoxedNode<K, V> {\n     }\n \n     fn from_internal(node: Box<InternalNode<K, V>>) -> Self {\n-        unsafe {\n-            BoxedNode { ptr: Unique::new_unchecked(Box::into_raw(node) as *mut LeafNode<K, V>) }\n-        }\n+        BoxedNode { ptr: Box::into_unique(node).cast() }\n     }\n \n     unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n@@ -181,32 +184,33 @@ impl<K, V> BoxedNode<K, V> {\n     }\n }\n \n-/// An owned tree. Note that despite being owned, this does not have a destructor,\n-/// and must be cleaned up manually.\n+/// Either an owned tree or a shared, empty tree.  Note that this does not have a destructor,\n+/// and must be cleaned up manually if it is an owned tree.\n pub struct Root<K, V> {\n     node: BoxedNode<K, V>,\n+    /// The number of levels below the root node.\n     height: usize,\n }\n \n unsafe impl<K: Sync, V: Sync> Sync for Root<K, V> {}\n unsafe impl<K: Send, V: Send> Send for Root<K, V> {}\n \n impl<K, V> Root<K, V> {\n+    /// Whether the instance of `Root` wraps a shared, empty root node. If not,\n+    /// the entire tree is uniquely owned by the owner of the `Root` instance.\n     pub fn is_shared_root(&self) -> bool {\n         self.as_ref().is_shared_root()\n     }\n \n+    /// Returns a shared tree, wrapping a shared root node that is eternally empty.\n     pub fn shared_empty_root() -> Self {\n         Root {\n-            node: unsafe {\n-                BoxedNode::from_ptr(NonNull::new_unchecked(\n-                    &EMPTY_ROOT_NODE as *const _ as *const LeafNode<K, V> as *mut _,\n-                ))\n-            },\n+            node: unsafe { BoxedNode::from_ptr(NonNull::from(&EMPTY_ROOT_NODE).cast()) },\n             height: 0,\n         }\n     }\n \n+    /// Returns a new owned tree, with its own root node that is initially empty.\n     pub fn new_leaf() -> Self {\n         Root { node: BoxedNode::from_leaf(Box::new(unsafe { LeafNode::new() })), height: 0 }\n     }\n@@ -310,6 +314,7 @@ impl<K, V> Root<K, V> {\n ///   so '&LeafNode` or `&InternalNode` pointing to the shared root is undefined behavior.\n ///   Turning this into a `NodeHeader` reference is always safe.\n pub struct NodeRef<BorrowType, K, V, Type> {\n+    /// The number of levels below the node.\n     height: usize,\n     node: NonNull<LeafNode<K, V>>,\n     // `root` is null unless the borrow type is `Mut`"}]}