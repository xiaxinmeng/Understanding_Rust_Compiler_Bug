{"sha": "867988c1dc8b17f358a1066160cd9efc9ac1eff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Nzk4OGMxZGM4YjE3ZjM1OGExMDY2MTYwY2Q5ZWZjOWFjMWVmZjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-17T05:40:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-19T09:10:31Z"}, "message": "rustdoc: Show macros in documentation\n\nAny macro tagged with #[macro_export] will be showed in the documentation for\nthat module. This also documents all the existing macros inside of std::macros.\n\nCloses #3163\ncc #5605\nCloses #9954", "tree": {"sha": "e167bd728bc5b5bb2453bcf6277f4958f5b585b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e167bd728bc5b5bb2453bcf6277f4958f5b585b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867988c1dc8b17f358a1066160cd9efc9ac1eff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867988c1dc8b17f358a1066160cd9efc9ac1eff5", "html_url": "https://github.com/rust-lang/rust/commit/867988c1dc8b17f358a1066160cd9efc9ac1eff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867988c1dc8b17f358a1066160cd9efc9ac1eff5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0cb0ebc669ade875c05cdef7da341a220d1b522", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0cb0ebc669ade875c05cdef7da341a220d1b522", "html_url": "https://github.com/rust-lang/rust/commit/f0cb0ebc669ade875c05cdef7da341a220d1b522"}], "stats": {"total": 231, "additions": 226, "deletions": 5}, "files": [{"sha": "c0c146319cbaf88c55a852f7f19121b20712b0ea", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -181,6 +181,7 @@ pub enum ItemEnum {\n     VariantItem(Variant),\n     ForeignFunctionItem(Function),\n     ForeignStaticItem(Static),\n+    MacroItem(Macro),\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n@@ -206,7 +207,8 @@ impl Clean<Item> for doctree::Module {\n                        self.fns.clean(), self.foreigns.clean().concat_vec(),\n                        self.mods.clean(), self.typedefs.clean(),\n                        self.statics.clean(), self.traits.clean(),\n-                       self.impls.clean(), self.view_items.clean()].concat_vec()\n+                       self.impls.clean(), self.view_items.clean(),\n+                       self.macros.clean()].concat_vec()\n             })\n         }\n     }\n@@ -1263,3 +1265,23 @@ fn resolve_def(id: ast::NodeId) -> Option<ast::DefId> {\n         None => None\n     }\n }\n+\n+#[deriving(Clone, Encodable, Decodable)]\n+pub struct Macro {\n+    source: ~str,\n+}\n+\n+impl Clean<Item> for doctree::Macro {\n+    fn clean(&self) -> Item {\n+        Item {\n+            name: Some(self.name.clean()),\n+            attrs: self.attrs.clean(),\n+            source: self.where.clean(),\n+            visibility: ast::Public.clean(),\n+            id: self.id,\n+            inner: MacroItem(Macro {\n+                source: self.where.to_src(),\n+            }),\n+        }\n+    }\n+}"}, {"sha": "03186c16733a52273061767e5ca381466f994891", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -32,6 +32,7 @@ pub struct Module {\n     impls: ~[Impl],\n     foreigns: ~[ast::ForeignMod],\n     view_items: ~[ast::ViewItem],\n+    macros: ~[Macro],\n }\n \n impl Module {\n@@ -52,6 +53,7 @@ impl Module {\n             impls      : ~[],\n             view_items : ~[],\n             foreigns   : ~[],\n+            macros     : ~[],\n         }\n     }\n }\n@@ -157,6 +159,13 @@ pub struct Impl {\n     id: ast::NodeId,\n }\n \n+pub struct Macro {\n+    name: Ident,\n+    id: ast::NodeId,\n+    attrs: ~[ast::Attribute],\n+    where: Span,\n+}\n+\n pub fn struct_type_from_def(sd: &ast::StructDef) -> StructType {\n     if sd.ctor_id.is_some() {\n         // We are in a tuple-struct"}, {"sha": "5299b31ac7bc0ab4888e68df4488ac38030cf578", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -798,6 +798,7 @@ fn shortty(item: &clean::Item) -> &'static str {\n         clean::VariantItem(..)         => \"variant\",\n         clean::ForeignFunctionItem(..) => \"ffi\",\n         clean::ForeignStaticItem(..)   => \"ffs\",\n+        clean::MacroItem(..)           => \"macro\",\n     }\n }\n \n@@ -876,6 +877,7 @@ impl<'a> fmt::Show for Item<'a> {\n             clean::StructItem(ref s) => item_struct(fmt.buf, self.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt.buf, self.item, e),\n             clean::TypedefItem(ref t) => item_typedef(fmt.buf, self.item, t),\n+            clean::MacroItem(ref m) => item_macro(fmt.buf, self.item, m),\n             _ => Ok(())\n         }\n     }\n@@ -944,6 +946,8 @@ fn item_module(w: &mut Writer, cx: &Context,\n             (_, &clean::ViewItemItem(..)) => Greater,\n             (&clean::ModuleItem(..), _) => Less,\n             (_, &clean::ModuleItem(..)) => Greater,\n+            (&clean::MacroItem(..), _) => Less,\n+            (_, &clean::MacroItem(..)) => Greater,\n             (&clean::StructItem(..), _) => Less,\n             (_, &clean::StructItem(..)) => Greater,\n             (&clean::EnumItem(..), _) => Less,\n@@ -994,6 +998,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n                 clean::VariantItem(..)         => \"Variants\",\n                 clean::ForeignFunctionItem(..) => \"Foreign Functions\",\n                 clean::ForeignStaticItem(..)   => \"Foreign Statics\",\n+                clean::MacroItem(..)           => \"Macros\",\n             }));\n         }\n \n@@ -1616,3 +1621,9 @@ impl<'a> fmt::Show for Source<'a> {\n         Ok(())\n     }\n }\n+\n+fn item_macro(w: &mut Writer, it: &clean::Item,\n+              t: &clean::Macro) -> fmt::Result {\n+    if_ok!(write!(w, \"<pre class='macro'>{}</pre>\", t.source));\n+    document(w, it)\n+}"}, {"sha": "2b8f01cfac8cacd57c1ff204310e0e698193b3d0", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -150,8 +150,8 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             }\n             clean::ImplItem(..) => {}\n \n-            // tymethods have no control over privacy\n-            clean::TyMethodItem(..) => {}\n+            // tymethods/macros have no control over privacy\n+            clean::MacroItem(..) | clean::TyMethodItem(..) => {}\n         }\n \n         let fastreturn = match i.inner {"}, {"sha": "ef02d7345672154bb0951df944e363deb06db2da", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -280,7 +280,14 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ItemForeignMod(ref fm) => {\n                 om.foreigns.push(fm.clone());\n             }\n-            _ => (),\n+            ast::ItemMac(ref _m) => {\n+                om.macros.push(Macro {\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    name: item.ident,\n+                    where: item.span,\n+                })\n+            }\n         }\n     }\n }"}, {"sha": "d3ddd9ae78380dfad3298b40b75b0f40329b7a3a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -77,7 +77,7 @@\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n \n-mod macros;\n+pub mod macros;\n \n mod rtdeps;\n "}, {"sha": "49cf10c47cb5a720a7bad9b1953ea4f8a0bb058e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867988c1dc8b17f358a1066160cd9efc9ac1eff5/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=867988c1dc8b17f358a1066160cd9efc9ac1eff5", "patch": "@@ -7,8 +7,29 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+//! Standard library macros\n+//!\n+//! This modules contains a set of macros which are exported from the standard\n+//! library. Each macro is available for use when linking against the standard\n+//! library.\n+\n #[macro_escape];\n \n+/// The standard logging macro\n+///\n+/// This macro will generically log over a provided level (of type u32) with a\n+/// format!-based argument list. See documentation in `std::fmt` for details on\n+/// how to use the syntax, and documentation in `std::logging` for info about\n+/// logging macros.\n+///\n+/// # Example\n+///\n+/// ```\n+/// log!(::std::logging::DEBUG, \"this is a debug message\");\n+/// log!(::std::logging::WARN, \"this is a warning {}\", \"message\");\n+/// log!(6, \"this is a custom logging level: {level}\", level=6);\n+/// ```\n #[macro_export]\n macro_rules! log(\n     ($lvl:expr, $($arg:tt)+) => ({\n@@ -21,26 +42,73 @@ macro_rules! log(\n     })\n )\n \n+/// A convenience macro for logging at the error log level. See `std::logging`\n+/// for more information. about logging.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # let error = 3;\n+/// error!(\"the build has failed with error code: {}\", error);\n+/// ```\n #[macro_export]\n macro_rules! error(\n     ($($arg:tt)*) => (log!(1u32, $($arg)*))\n )\n \n+/// A convenience macro for logging at the warning log level. See `std::logging`\n+/// for more information. about logging.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # let code = 3;\n+/// warn!(\"you may like to know that a process exited with: {}\", code);\n+/// ```\n #[macro_export]\n macro_rules! warn(\n     ($($arg:tt)*) => (log!(2u32, $($arg)*))\n )\n \n+/// A convenience macro for logging at the info log level. See `std::logging`\n+/// for more information. about logging.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # let ret = 3;\n+/// info!(\"this function is about to return: {}\", ret);\n+/// ```\n #[macro_export]\n macro_rules! info(\n     ($($arg:tt)*) => (log!(3u32, $($arg)*))\n )\n \n+/// A convenience macro for logging at the debug log level. See `std::logging`\n+/// for more information. about logging.\n+///\n+/// # Example\n+///\n+/// ```\n+/// debug!(\"x = {x}, y = {y}\", x=10, y=20);\n+/// ```\n #[macro_export]\n macro_rules! debug(\n     ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(4u32, $($arg)*) })\n )\n \n+/// A macro to test whether a log level is enabled for the current module.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # struct Point { x: int, y: int }\n+/// # fn some_expensive_computation() -> Point { Point { x: 1, y: 2 } }\n+/// if log_enabled!(std::logging::DEBUG) {\n+///     let x = some_expensive_computation();\n+///     debug!(\"x.x = {}, x.y = {}\", x.x, x.y);\n+/// }\n+/// ```\n #[macro_export]\n macro_rules! log_enabled(\n     ($lvl:expr) => ({\n@@ -49,6 +117,24 @@ macro_rules! log_enabled(\n     })\n )\n \n+/// The entry point for failure of rust tasks.\n+///\n+/// This macro is used to inject failure into a rust task, causing the task to\n+/// unwind and fail entirely. Each task's failure can be reaped as the `~Any`\n+/// type, and the single-argument form of the `fail!` macro will be the value\n+/// which is transmitted.\n+///\n+/// The multi-argument form of this macro fails with a string and has the\n+/// `format!` sytnax for building a string.\n+///\n+/// # Example\n+///\n+/// ```should_fail\n+/// fail!();\n+/// fail!(\"this is a terrible mistake!\");\n+/// fail!(4); // fail with the value of 4 to be collected elsewhere\n+/// fail!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+/// ```\n #[macro_export]\n macro_rules! fail(\n     () => (\n@@ -70,6 +156,26 @@ macro_rules! fail(\n     });\n )\n \n+/// Ensure that a boolean expression is `true` at runtime.\n+///\n+/// This will invoke the `fail!` macro if the provided expression cannot be\n+/// evaluated to `true` at runtime.\n+///\n+/// # Example\n+///\n+/// ```\n+/// // the failure message for these assertions is the stringified value of the\n+/// // expression given.\n+/// assert!(true);\n+/// # fn some_computation() -> bool { true }\n+/// assert!(some_computation());\n+///\n+/// // assert with a custom message\n+/// # let x = true;\n+/// assert!(x, \"x wasn't true!\");\n+/// # let a = 3; let b = 27;\n+/// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n+/// ```\n #[macro_export]\n macro_rules! assert(\n     ($cond:expr) => (\n@@ -89,6 +195,18 @@ macro_rules! assert(\n     );\n )\n \n+/// Asserts that two expressions are equal to each other, testing equality in\n+/// both directions.\n+///\n+/// On failure, this macro will print the values of the expressions.\n+///\n+/// # Example\n+///\n+/// ```\n+/// let a = 3;\n+/// let b = 1 + 2;\n+/// assert_eq!(a, b);\n+/// ```\n #[macro_export]\n macro_rules! assert_eq(\n     ($given:expr , $expected:expr) => ({\n@@ -136,13 +254,36 @@ macro_rules! unimplemented(\n     () => (fail!(\"not yet implemented\"))\n )\n \n+/// Use the syntax described in `std::fmt` to create a value of type `~str`.\n+/// See `std::fmt` for more information.\n+///\n+/// # Example\n+///\n+/// ```\n+/// format!(\"test\");\n+/// format!(\"hello {}\", \"world!\");\n+/// format!(\"x = {}, y = {y}\", 10, y = 30);\n+/// ```\n #[macro_export]\n macro_rules! format(\n     ($($arg:tt)*) => (\n         format_args!(::std::fmt::format, $($arg)*)\n     )\n )\n \n+/// Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\n+/// See `std::fmt` for more information.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # #[allow(unused_must_use)];\n+/// use std::io::MemWriter;\n+///\n+/// let mut w = MemWriter::new();\n+/// write!(&mut w, \"test\");\n+/// write!(&mut w, \"formatted {}\", \"arguments\");\n+/// ```\n #[macro_export]\n macro_rules! write(\n     ($dst:expr, $($arg:tt)*) => ({\n@@ -151,6 +292,8 @@ macro_rules! write(\n     })\n )\n \n+/// Equivalent to the `write!` macro, except that a newline is appended after\n+/// the message is written.\n #[macro_export]\n macro_rules! writeln(\n     ($dst:expr, $($arg:tt)*) => ({\n@@ -159,16 +302,42 @@ macro_rules! writeln(\n     })\n )\n \n+/// Equivalent to the `println!` macro except that a newline is not printed at\n+/// the end of the message.\n #[macro_export]\n macro_rules! print(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::print_args, $($arg)*))\n )\n \n+/// Macro for printing to a task's stdout handle.\n+///\n+/// Each task can override its stdout handle via `std::io::stdio::set_stdout`.\n+/// The syntax of this macro is the same as that used for `format!`. For more\n+/// information, see `std::fmt` and `std::io::stdio`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// println!(\"hello there!\");\n+/// println!(\"format {} arguments\", \"some\");\n+/// ```\n #[macro_export]\n macro_rules! println(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::println_args, $($arg)*))\n )\n \n+/// Declare a task-local key with a specific type.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::local_data;\n+///\n+/// local_data_key!(my_integer: int)\n+///\n+/// local_data::set(my_integer, 2);\n+/// local_data::get(my_integer, |val| println!(\"{}\", val));\n+/// ```\n #[macro_export]\n macro_rules! local_data_key(\n     ($name:ident: $ty:ty) => (\n@@ -179,6 +348,9 @@ macro_rules! local_data_key(\n     );\n )\n \n+/// Helper macro for unwrapping `Result` values while returning early with an\n+/// error if the value of the expression is `Err`. For more information, see\n+/// `std::io`.\n #[macro_export]\n macro_rules! if_ok(\n     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })"}]}