{"sha": "576294237b10fff22bc462398ff7d06fffa05bd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjI5NDIzN2IxMGZmZjIyYmM0NjIzOThmZjdkMDZmZmZhMDViZDA=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-01-29T23:08:04Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-01-29T23:08:11Z"}, "message": "fix typos", "tree": {"sha": "7ea3410fbca584d9e6726b95b00b137994c0b784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea3410fbca584d9e6726b95b00b137994c0b784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576294237b10fff22bc462398ff7d06fffa05bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576294237b10fff22bc462398ff7d06fffa05bd0", "html_url": "https://github.com/rust-lang/rust/commit/576294237b10fff22bc462398ff7d06fffa05bd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576294237b10fff22bc462398ff7d06fffa05bd0/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0c0805693b08566cf118b676533be776005494", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0c0805693b08566cf118b676533be776005494", "html_url": "https://github.com/rust-lang/rust/commit/ca0c0805693b08566cf118b676533be776005494"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c55dfaba8f6b26bec457ea005cc78aa0d465d95b", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/576294237b10fff22bc462398ff7d06fffa05bd0/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576294237b10fff22bc462398ff7d06fffa05bd0/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=576294237b10fff22bc462398ff7d06fffa05bd0", "patch": "@@ -37,7 +37,7 @@ impl Delimited {\n         token::CloseDelim(self.delim)\n     }\n \n-    /// Return a `self::TokenTree` witha a `Span` corresponding to the opening delimiter.\n+    /// Return a `self::TokenTree` with a `Span` corresponding to the opening delimiter.\n     pub fn open_tt(&self, span: Span) -> TokenTree {\n         let open_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -47,7 +47,7 @@ impl Delimited {\n         TokenTree::Token(open_span, self.open_token())\n     }\n \n-    /// Return a `self::TokenTree` witha a `Span` corresponding to the closing delimiter.\n+    /// Return a `self::TokenTree` with a `Span` corresponding to the closing delimiter.\n     pub fn close_tt(&self, span: Span) -> TokenTree {\n         let close_span = if span == DUMMY_SP {\n             DUMMY_SP\n@@ -232,7 +232,7 @@ pub fn parse(\n ///\n /// # Parameters\n ///\n-/// - `tree`: the tree wish to convert.\n+/// - `tree`: the tree we wish to convert.\n /// - `trees`: an iterator over trees. We may need to read more tokens from it in order to finish\n ///   converting `tree`\n /// - `expect_matchers`: same as for `parse` (see above).\n@@ -327,7 +327,7 @@ where\n /// separator, and `*` is the Kleene operator. This function is specifically concerned with parsing\n /// the last two tokens of such a pattern: namely, the optional separator and the Kleene operator\n /// itself. Note that here we are parsing the _macro_ itself, rather than trying to match some\n-/// stream of tokens in an invokation of a macro.\n+/// stream of tokens in an invocation of a macro.\n ///\n /// This function will take some input iterator `input` corresponding to `span` and a parsing\n /// session `sess`. If the next one (or possibly two) tokens in `input` correspond to a Kleene"}]}