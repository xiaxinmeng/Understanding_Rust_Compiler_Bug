{"sha": "f1a8f53cf10c2a68342aac70c5a706a865300bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYThmNTNjZjEwYzJhNjgzNDJhYWM3MGM1YTcwNmE4NjUzMDBiYjQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:01Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:18Z"}, "message": "Fix fallout in tests from removing the use of Gc in ExpnInfo.", "tree": {"sha": "729f1cf8e97d521dfdf46fccf9cb71b235abaa61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/729f1cf8e97d521dfdf46fccf9cb71b235abaa61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a8f53cf10c2a68342aac70c5a706a865300bb4", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a8f53cf10c2a68342aac70c5a706a865300bb4", "html_url": "https://github.com/rust-lang/rust/commit/f1a8f53cf10c2a68342aac70c5a706a865300bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a8f53cf10c2a68342aac70c5a706a865300bb4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35e47f5c19e63e8e25c4004ba6a28534ad3df42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35e47f5c19e63e8e25c4004ba6a28534ad3df42", "html_url": "https://github.com/rust-lang/rust/commit/e35e47f5c19e63e8e25c4004ba6a28534ad3df42"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "a95eeb3c97dc2c4dfff6530d0a4bbf64df251d6c", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -211,7 +211,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, Token>) -> TokenAndSpan {\n     let sp = syntax::codemap::Span {\n         lo: syntax::codemap::BytePos(from_str::<u32>(start).unwrap() - offset),\n         hi: syntax::codemap::BytePos(from_str::<u32>(end).unwrap() + 1),\n-        expn_info: None\n+        expn_id: syntax::codemap::NO_EXPANSION\n     };\n \n     TokenAndSpan {"}, {"sha": "7a1064fdc0036f876910c34090f6949acd32e7f9", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -2035,7 +2035,7 @@ impl fake_ext_ctxt for parse::ParseSess {\n         codemap::Span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_info: None\n+            expn_id: codemap::NO_EXPANSION\n         }\n     }\n     fn ident_of(&self, st: &str) -> ast::Ident {"}, {"sha": "de9979d40b034446f309b463946cc74b51642151", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -1363,7 +1363,7 @@ mod test {\n                 inner: Span {\n                     lo: BytePos(11),\n                     hi: BytePos(19),\n-                    expn_info: None,\n+                    expn_id: NO_EXPANSION,\n                 },\n                 view_items: Vec::new(),\n                 items: Vec::new(),\n@@ -1373,7 +1373,7 @@ mod test {\n             span: Span {\n                 lo: BytePos(10),\n                 hi: BytePos(20),\n-                expn_info: None,\n+                expn_id: NO_EXPANSION,\n             },\n             exported_macros: Vec::new(),\n         };"}, {"sha": "9072889463cd631cde0e0e170213953ae1bcb203", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -686,7 +686,7 @@ mod test {\n     fn t7() {\n         // Test span_to_lines for a span ending at the end of filemap\n         let cm = init_code_map();\n-        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_info: None};\n+        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_id: NO_EXPANSION};\n         let file_lines = cm.span_to_lines(span);\n \n         assert_eq!(file_lines.file.name, \"blork.rs\".to_string());\n@@ -698,7 +698,7 @@ mod test {\n     fn t8() {\n         // Test span_to_snippet for a span ending at the end of filemap\n         let cm = init_code_map();\n-        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_info: None};\n+        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_id: NO_EXPANSION};\n         let snippet = cm.span_to_snippet(span);\n \n         assert_eq!(snippet, Some(\"second line\".to_string()));\n@@ -708,7 +708,7 @@ mod test {\n     fn t9() {\n         // Test span_to_str for a span ending at the end of filemap\n         let cm = init_code_map();\n-        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_info: None};\n+        let span = Span {lo: BytePos(12), hi: BytePos(23), expn_id: NO_EXPANSION};\n         let sstr =  cm.span_to_string(span);\n \n         assert_eq!(sstr, \"blork.rs:2:1: 2:12\".to_string());"}, {"sha": "68ddd17dd012b4917e15f9ae810c5e9b08d29156", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -1406,7 +1406,7 @@ fn ident_continue(c: Option<char>) -> bool {\n mod test {\n     use super::*;\n \n-    use codemap::{BytePos, CodeMap, Span};\n+    use codemap::{BytePos, CodeMap, Span, NO_EXPANSION};\n     use diagnostic;\n     use parse::token;\n     use parse::token::{str_to_ident};\n@@ -1436,7 +1436,7 @@ mod test {\n         let tok1 = string_reader.next_token();\n         let tok2 = TokenAndSpan{\n             tok:token::IDENT(id, false),\n-            sp:Span {lo:BytePos(21),hi:BytePos(23),expn_info: None}};\n+            sp:Span {lo:BytePos(21),hi:BytePos(23),expn_id: NO_EXPANSION}};\n         assert_eq!(tok1,tok2);\n         assert_eq!(string_reader.next_token().tok, token::WS);\n         // the 'main' id is already read:\n@@ -1445,7 +1445,7 @@ mod test {\n         let tok3 = string_reader.next_token();\n         let tok4 = TokenAndSpan{\n             tok:token::IDENT(str_to_ident(\"main\"), false),\n-            sp:Span {lo:BytePos(24),hi:BytePos(28),expn_info: None}};\n+            sp:Span {lo:BytePos(24),hi:BytePos(28),expn_id: NO_EXPANSION}};\n         assert_eq!(tok3,tok4);\n         // the lparen is already read:\n         assert_eq!(string_reader.last_pos.clone(), BytePos(29))"}, {"sha": "66ecdbfca02d4f774ecb99e711aa7788ced95257", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -721,7 +721,7 @@ pub fn integer_lit(s: &str, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n mod test {\n     use super::*;\n     use serialize::json;\n-    use codemap::{Span, BytePos, Spanned};\n+    use codemap::{Span, BytePos, Spanned, NO_EXPANSION};\n     use owned_slice::OwnedSlice;\n     use ast;\n     use abi;\n@@ -736,7 +736,7 @@ mod test {\n \n     // produce a codemap::span\n     fn sp(a: u32, b: u32) -> Span {\n-        Span{lo:BytePos(a),hi:BytePos(b),expn_info:None}\n+        Span {lo: BytePos(a), hi: BytePos(b), expn_id: NO_EXPANSION}\n     }\n \n     #[test] fn path_exprs_1() {"}, {"sha": "06d473baea878403c7d12375fd41129b8cb19de2", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -39,7 +39,7 @@ impl fake_ext_ctxt for fake_session {\n         codemap::span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_info: None\n+            expn_id: NO_EXPANSION\n         }\n     }\n     fn ident_of(st: &str) -> ast::ident {"}, {"sha": "f63dd91eb2bc14465beefa07878d214028736f72", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -36,7 +36,7 @@ impl fake_ext_ctxt for fake_session {\n         codemap::span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_info: None\n+            expn_id: codemap::NO_EXPANSION\n         }\n     }\n     fn ident_of(st: &str) -> ast::ident {"}, {"sha": "252d297d12d3053d44f3be816057c9d146d0e928", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a8f53cf10c2a68342aac70c5a706a865300bb4/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=f1a8f53cf10c2a68342aac70c5a706a865300bb4", "patch": "@@ -41,7 +41,7 @@ impl fake_ext_ctxt for fake_session {\n         codemap::span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_info: None\n+            expn_id: codemap::NO_EXPANSION\n         }\n     }\n     fn ident_of(st: &str) -> ast::ident {"}]}