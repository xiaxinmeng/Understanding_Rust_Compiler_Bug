{"sha": "5a193668db9030486dd351317057567efc421773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTkzNjY4ZGI5MDMwNDg2ZGQzNTEzMTcwNTc1NjdlZmM0MjE3NzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T08:14:39Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T10:25:18Z"}, "message": "Rollup merge of #48133 - matthiaskrgr:endianess_to_endianness, r=oli-obk\n\ntypo: correct endianess to endianness (this also changes function names!)", "tree": {"sha": "342454230e8a444d318812f1839f671b6acd985a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342454230e8a444d318812f1839f671b6acd985a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a193668db9030486dd351317057567efc421773", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqEDo4ACgkQ/vbIBR0O\nATxYhA//QQXd0dHx4xemWLlChHi0xcKYpSDZMKbZ9seFxMhRngXT6GikXRGut5+C\nlINtRvywpZn3lI2d7EMdTrJtFmmSI6fBZjQTuOuUvmzaE9qaCvpTQLmswVKdPkfl\ntmkcZ8+kfOgOLC12rdrAixC2/+aHj/Pt6zJFP5o5oCvDxRQNUyj3b8pvqPbu+pCA\nvEkgmsSVEyKl6XK397SP/j0hExaRpOK/liJCYlRqATygbfjzjKy4LRCTkDyXDzkY\n1aKUuQRYIP9jbMHAsLgUXYorZu91DMN0vmhk8Tcz0ak8OaxZ19m2xEErqKu5LQLs\nNqhPv0rsqxMDe5ZgOjNtvde2/GTRztu4Rgfdhzb949yB7ZL5B98/72UvsL2WGHD0\nqHgmDF0K5Q/AC+YBrN2u7ftiwlzrgoAkI3XBLopnMswcioYoLViJZ4bVWdrJdBSO\nS5KKVsLnRYJmeIKy+pt/I76Cg31YQ+vQ3K+0o9E1il/oKatfNxpX7I979gTUDrMT\nxQUQjDK6gpnnOj5RP6CcYVe+7O7NA0NRpbVvDoyOAKVhWDqT4WaJH0KXtY826bBW\nNxSiZmYFeri1hUnzFm2rmwsux0D+JbSdsP0SsUS0nD6lnXDx7A/WCAaI9bbhWGp6\nNcQhZkAkbvW++MpJj2QlRo22aR1JXhm2uvvBvCalJlT8MhoXN2c=\n=ztgV\n-----END PGP SIGNATURE-----", "payload": "tree 342454230e8a444d318812f1839f671b6acd985a\nparent 3bcaaf47a1a79db109d97df7f68ac647a78f4141\nparent 161e8ffda79d25ef7a570bf0c0d884201267c6cb\nauthor kennytm <kennytm@gmail.com> 1518596079 +0800\ncommitter kennytm <kennytm@gmail.com> 1518603918 +0800\n\nRollup merge of #48133 - matthiaskrgr:endianess_to_endianness, r=oli-obk\n\ntypo: correct endianess to endianness (this also changes function names!)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a193668db9030486dd351317057567efc421773", "html_url": "https://github.com/rust-lang/rust/commit/5a193668db9030486dd351317057567efc421773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a193668db9030486dd351317057567efc421773/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcaaf47a1a79db109d97df7f68ac647a78f4141", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcaaf47a1a79db109d97df7f68ac647a78f4141", "html_url": "https://github.com/rust-lang/rust/commit/3bcaaf47a1a79db109d97df7f68ac647a78f4141"}, {"sha": "161e8ffda79d25ef7a570bf0c0d884201267c6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/161e8ffda79d25ef7a570bf0c0d884201267c6cb", "html_url": "https://github.com/rust-lang/rust/commit/161e8ffda79d25ef7a570bf0c0d884201267c6cb"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "7cc4ba84895251ec5303a99e86882d8135a87f78", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a193668db9030486dd351317057567efc421773/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a193668db9030486dd351317057567efc421773/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5a193668db9030486dd351317057567efc421773", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         self.tcx.data_layout.pointer_size.bytes()\n     }\n \n-    pub fn endianess(&self) -> layout::Endian {\n+    pub fn endianness(&self) -> layout::Endian {\n         self.tcx.data_layout.endian\n     }\n \n@@ -722,7 +722,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n \n     pub fn read_primval(&self, ptr: MemoryPointer, ptr_align: Align, size: u64, signed: bool) -> EvalResult<'tcx, PrimVal> {\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n-        let endianess = self.endianess();\n+        let endianness = self.endianness();\n         let bytes = self.get_bytes_unchecked(ptr, size, ptr_align.min(self.int_align(size)))?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return Ok() for unaligned pointers!\n@@ -731,9 +731,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n         // Now we do the actual reading\n         let bytes = if signed {\n-            read_target_int(endianess, bytes).unwrap() as u128\n+            read_target_int(endianness, bytes).unwrap() as u128\n         } else {\n-            read_target_uint(endianess, bytes).unwrap()\n+            read_target_uint(endianness, bytes).unwrap()\n         };\n         // See if we got a pointer\n         if size != self.pointer_size() {\n@@ -756,7 +756,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     }\n \n     pub fn write_primval(&mut self, ptr: MemoryPointer, ptr_align: Align, val: PrimVal, size: u64, signed: bool) -> EvalResult<'tcx> {\n-        let endianess = self.endianess();\n+        let endianness = self.endianness();\n \n         let bytes = match val {\n             PrimVal::Ptr(val) => {\n@@ -788,9 +788,9 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             let align = self.int_align(size);\n             let dst = self.get_bytes_mut(ptr, size, ptr_align.min(align))?;\n             if signed {\n-                write_target_int(endianess, dst, bytes as i128).unwrap();\n+                write_target_int(endianness, dst, bytes as i128).unwrap();\n             } else {\n-                write_target_uint(endianess, dst, bytes).unwrap();\n+                write_target_uint(endianness, dst, bytes).unwrap();\n             }\n         }\n \n@@ -941,41 +941,41 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n-// Methods to access integers in the target endianess\n+// Methods to access integers in the target endianness\n ////////////////////////////////////////////////////////////////////////////////\n \n fn write_target_uint(\n-    endianess: layout::Endian,\n+    endianness: layout::Endian,\n     mut target: &mut [u8],\n     data: u128,\n ) -> Result<(), io::Error> {\n     let len = target.len();\n-    match endianess {\n+    match endianness {\n         layout::Endian::Little => target.write_uint128::<LittleEndian>(data, len),\n         layout::Endian::Big => target.write_uint128::<BigEndian>(data, len),\n     }\n }\n fn write_target_int(\n-    endianess: layout::Endian,\n+    endianness: layout::Endian,\n     mut target: &mut [u8],\n     data: i128,\n ) -> Result<(), io::Error> {\n     let len = target.len();\n-    match endianess {\n+    match endianness {\n         layout::Endian::Little => target.write_int128::<LittleEndian>(data, len),\n         layout::Endian::Big => target.write_int128::<BigEndian>(data, len),\n     }\n }\n \n-fn read_target_uint(endianess: layout::Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n-    match endianess {\n+fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n+    match endianness {\n         layout::Endian::Little => source.read_uint128::<LittleEndian>(source.len()),\n         layout::Endian::Big => source.read_uint128::<BigEndian>(source.len()),\n     }\n }\n \n-fn read_target_int(endianess: layout::Endian, mut source: &[u8]) -> Result<i128, io::Error> {\n-    match endianess {\n+fn read_target_int(endianness: layout::Endian, mut source: &[u8]) -> Result<i128, io::Error> {\n+    match endianness {\n         layout::Endian::Little => source.read_int128::<LittleEndian>(source.len()),\n         layout::Endian::Big => source.read_int128::<BigEndian>(source.len()),\n     }"}, {"sha": "a760922115aef330ebb44463d4412c687e1cbbc4", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a193668db9030486dd351317057567efc421773/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a193668db9030486dd351317057567efc421773/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=5a193668db9030486dd351317057567efc421773", "patch": "@@ -1023,7 +1023,7 @@ impl f32 {\n     /// This is currently identical to `transmute::<u32, f32>(v)` on all platforms.\n     /// It turns out this is incredibly portable, for two reasons:\n     ///\n-    /// * Floats and Ints have the same endianess on all supported platforms.\n+    /// * Floats and Ints have the same endianness on all supported platforms.\n     /// * IEEE-754 very precisely specifies the bit layout of floats.\n     ///\n     /// However there is one caveat: prior to the 2008 version of IEEE-754, how"}, {"sha": "6f34f176a971155b09c2d3e5ecad66cd56002ac7", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a193668db9030486dd351317057567efc421773/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a193668db9030486dd351317057567efc421773/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=5a193668db9030486dd351317057567efc421773", "patch": "@@ -978,7 +978,7 @@ impl f64 {\n     /// This is currently identical to `transmute::<u64, f64>(v)` on all platforms.\n     /// It turns out this is incredibly portable, for two reasons:\n     ///\n-    /// * Floats and Ints have the same endianess on all supported platforms.\n+    /// * Floats and Ints have the same endianness on all supported platforms.\n     /// * IEEE-754 very precisely specifies the bit layout of floats.\n     ///\n     /// However there is one caveat: prior to the 2008 version of IEEE-754, how"}]}