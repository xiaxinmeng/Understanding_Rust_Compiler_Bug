{"sha": "7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDFjYWQzZjMxMmRmNWQ3MzVmMmE4YzNmM2ViNDQ4MGVkM2E5NWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-15T07:10:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T07:10:05Z"}, "message": "Rollup merge of #71116 - marmeladema:dummy-hir-id-removal, r=eddyb\n\nEntirely remove `DUMMY_HIR_ID`\n\nSome helpers functions have been introduced to deal with (buggy) cases\nwhere either a `NodeId` or a `DefId` do not have a corresponding `HirId`.\nThose cases are tracked in issue #71104.", "tree": {"sha": "1c90717e2a9fde66e583b7411ffe5f213a927263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c90717e2a9fde66e583b7411ffe5f213a927263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelrNNCRBK7hj4Ov3rIwAAdHIIAANnFEhlc5UtUeUc36v0Z6gc\nNO2SsLwgSZ7pVleGbmoRXbq/jl0i+mSNSn+GZ3YkZtNFyhuPk49uTOG+9QyBQsBJ\nZBSIj0WNMymykM7A/lirrup24pKORRvoLQV3e0Pow83vFTz/sWVZjl8P/k3piq2c\nvNWx2njDrOuZkc/KKds+7M3VK4kXEwTnGDGWQ0cMsxRC/Ynr7g0GpJzSGhSnfkUM\ncF+5ecSoIX5WV0N5XfWfWS0dExyJnNOkSw10kkTYccA48lXCWoxrrcBdlMzN1bW+\n1Vz6hpJHT4Q3ePsmENTBTLylLhLnXkPZX8MNrUpMactbBi+gGM3Cag57Y9ePFY0=\n=NYm7\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c90717e2a9fde66e583b7411ffe5f213a927263\nparent 8da59521e1d88677fa875770e5a3e091a199265f\nparent c15e13ae167b3f72270e0b99333e71ba1bef9ffc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586934605 +0200\ncommitter GitHub <noreply@github.com> 1586934605 +0200\n\nRollup merge of #71116 - marmeladema:dummy-hir-id-removal, r=eddyb\n\nEntirely remove `DUMMY_HIR_ID`\n\nSome helpers functions have been introduced to deal with (buggy) cases\nwhere either a `NodeId` or a `DefId` do not have a corresponding `HirId`.\nThose cases are tracked in issue #71104.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "html_url": "https://github.com/rust-lang/rust/commit/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da59521e1d88677fa875770e5a3e091a199265f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da59521e1d88677fa875770e5a3e091a199265f", "html_url": "https://github.com/rust-lang/rust/commit/8da59521e1d88677fa875770e5a3e091a199265f"}, {"sha": "c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "html_url": "https://github.com/rust-lang/rust/commit/c15e13ae167b3f72270e0b99333e71ba1bef9ffc"}], "stats": {"total": 173, "additions": 79, "deletions": 94}, "files": [{"sha": "c2c7de9d21b28875f2bd5ad7532156b14348a204", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -168,7 +168,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_hir_id_owner: Vec<(LocalDefId, u32)>,\n     item_local_id_counters: NodeMap<u32>,\n-    node_id_to_hir_id: IndexVec<NodeId, hir::HirId>,\n+    node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n@@ -522,15 +522,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         self.lower_node_id(CRATE_NODE_ID);\n-        debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == hir::CRATE_HIR_ID);\n+        debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == Some(hir::CRATE_HIR_ID));\n \n         visit::walk_crate(&mut MiscCollector { lctx: &mut self, hir_id_owner: None }, c);\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);\n         let attrs = self.lower_attrs(&c.attrs);\n         let body_ids = body_ids(&self.bodies);\n-        let proc_macros = c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id]).collect();\n+        let proc_macros =\n+            c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n@@ -571,26 +572,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ast_node_id: NodeId,\n         alloc_hir_id: impl FnOnce(&mut Self) -> hir::HirId,\n     ) -> hir::HirId {\n-        if ast_node_id == DUMMY_NODE_ID {\n-            return hir::DUMMY_HIR_ID;\n-        }\n+        assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n         let min_size = ast_node_id.as_usize() + 1;\n \n         if min_size > self.node_id_to_hir_id.len() {\n-            self.node_id_to_hir_id.resize(min_size, hir::DUMMY_HIR_ID);\n+            self.node_id_to_hir_id.resize(min_size, None);\n         }\n \n-        let existing_hir_id = self.node_id_to_hir_id[ast_node_id];\n-\n-        if existing_hir_id == hir::DUMMY_HIR_ID {\n+        if let Some(existing_hir_id) = self.node_id_to_hir_id[ast_node_id] {\n+            existing_hir_id\n+        } else {\n             // Generate a new `HirId`.\n             let hir_id = alloc_hir_id(self);\n-            self.node_id_to_hir_id[ast_node_id] = hir_id;\n+            self.node_id_to_hir_id[ast_node_id] = Some(hir_id);\n \n             hir_id\n-        } else {\n-            existing_hir_id\n         }\n     }\n "}, {"sha": "1ac23677d473917f4074aa5ac874be80dc53ccbe", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -7,7 +7,6 @@\n pub use crate::def_id::DefPathHash;\n use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n-use crate::hir_id::DUMMY_HIR_ID;\n \n use rustc_ast::ast;\n use rustc_ast::crate_disambiguator::CrateDisambiguator;\n@@ -87,7 +86,7 @@ pub struct Definitions {\n     node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n     def_id_to_node_id: IndexVec<LocalDefId, ast::NodeId>,\n \n-    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n+    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, Option<hir::HirId>>,\n     /// The reverse mapping of `node_id_to_hir_id`.\n     pub(super) hir_id_to_node_id: FxHashMap<hir::HirId, ast::NodeId>,\n \n@@ -345,8 +344,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<hir::HirId> {\n         if let Some(def_id) = def_id.as_local() {\n-            let hir_id = self.local_def_id_to_hir_id(def_id);\n-            if hir_id != DUMMY_HIR_ID { Some(hir_id) } else { None }\n+            Some(self.local_def_id_to_hir_id(def_id))\n         } else {\n             None\n         }\n@@ -359,11 +357,22 @@ impl Definitions {\n \n     #[inline]\n     pub fn node_id_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n+        self.node_id_to_hir_id[node_id].unwrap()\n+    }\n+\n+    #[inline]\n+    pub fn opt_node_id_to_hir_id(&self, node_id: ast::NodeId) -> Option<hir::HirId> {\n         self.node_id_to_hir_id[node_id]\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, id: LocalDefId) -> hir::HirId {\n+        let node_id = self.def_id_to_node_id[id];\n+        self.node_id_to_hir_id[node_id].unwrap()\n+    }\n+\n+    #[inline]\n+    pub fn opt_local_def_id_to_hir_id(&self, id: LocalDefId) -> Option<hir::HirId> {\n         let node_id = self.def_id_to_node_id[id];\n         self.node_id_to_hir_id[node_id]\n     }\n@@ -470,7 +479,10 @@ impl Definitions {\n \n     /// Initializes the `ast::NodeId` to `HirId` mapping once it has been generated during\n     /// AST to HIR lowering.\n-    pub fn init_node_id_to_hir_id_mapping(&mut self, mapping: IndexVec<ast::NodeId, hir::HirId>) {\n+    pub fn init_node_id_to_hir_id_mapping(\n+        &mut self,\n+        mapping: IndexVec<ast::NodeId, Option<hir::HirId>>,\n+    ) {\n         assert!(\n             self.node_id_to_hir_id.is_empty(),\n             \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n@@ -481,7 +493,7 @@ impl Definitions {\n         self.hir_id_to_node_id = self\n             .node_id_to_hir_id\n             .iter_enumerated()\n-            .map(|(node_id, &hir_id)| (hir_id, node_id))\n+            .filter_map(|(node_id, &hir_id)| hir_id.map(|hir_id| (hir_id, node_id)))\n             .collect();\n     }\n "}, {"sha": "d782c3dd70a2c53c139020cc4f5dc0f9c1c72b6e", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -45,7 +45,4 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     local_id: ItemLocalId::from_u32(0),\n };\n \n-pub const DUMMY_HIR_ID: HirId =\n-    HirId { owner: LocalDefId { local_def_index: CRATE_DEF_INDEX }, local_id: DUMMY_ITEM_LOCAL_ID };\n-\n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "2906da437abac1c10b4ae6841ef9a6223c9c57a0", "filename": "src/librustc_middle/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -250,23 +250,16 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node),\n                 };\n \n-                let forgot_str = if hir_id == hir::DUMMY_HIR_ID {\n-                    format!(\"\\nMaybe you forgot to lower the node id {:?}?\", node_id)\n-                } else {\n-                    String::new()\n-                };\n-\n                 span_bug!(\n                     span,\n                     \"inconsistent DepNode at `{:?}` for `{}`: \\\n-                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}){}\",\n+                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n                     self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n                     self.current_dep_node_owner,\n                     self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n                     hir_id.owner,\n-                    forgot_str,\n                 )\n             }\n         }"}, {"sha": "ead8529fad8becd82c0163e1199e3913a93b8c04", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -214,11 +214,21 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.node_id_to_hir_id(node_id)\n     }\n \n+    #[inline]\n+    pub fn opt_node_id_to_hir_id(&self, node_id: NodeId) -> Option<HirId> {\n+        self.tcx.definitions.opt_node_id_to_hir_id(node_id)\n+    }\n+\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.local_def_id_to_hir_id(def_id)\n     }\n \n+    #[inline]\n+    pub fn opt_local_def_id_to_hir_id(&self, def_id: LocalDefId) -> Option<HirId> {\n+        self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n+    }\n+\n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n         let node = self.find(hir_id)?;\n "}, {"sha": "1dd14b7c4ffdaced3d5aa013a06d8a867af5a74d", "filename": "src/librustc_middle/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -215,7 +215,6 @@ fn late_report_deprecation(\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n-    def_id: DefId,\n     hir_id: HirId,\n ) {\n     if span.in_derive_expansion() {\n@@ -229,9 +228,6 @@ fn late_report_deprecation(\n         }\n         diag.emit()\n     });\n-    if hir_id == hir::DUMMY_HIR_ID {\n-        span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n-    }\n }\n \n /// Result of `TyCtxt::eval_stability`.\n@@ -296,7 +292,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if !skip {\n                     let (message, lint) =\n                         deprecation_message(&depr_entry.attr, &self.def_path_str(def_id));\n-                    late_report_deprecation(self, &message, None, lint, span, def_id, id);\n+                    late_report_deprecation(self, &message, None, lint, span, id);\n                 }\n             };\n         }\n@@ -319,15 +315,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if let Some(depr) = &stability.rustc_depr {\n                     let (message, lint) =\n                         rustc_deprecation_message(depr, &self.def_path_str(def_id));\n-                    late_report_deprecation(\n-                        self,\n-                        &message,\n-                        depr.suggestion,\n-                        lint,\n-                        span,\n-                        def_id,\n-                        id,\n-                    );\n+                    late_report_deprecation(self, &message, depr.suggestion, lint, span, id);\n                 }\n             }\n         }"}, {"sha": "a49dc105498ed29c99d575fc384365fc64a58fc4", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -1126,13 +1126,16 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n-            let hir_id = definitions.node_id_to_hir_id(k);\n-            let map = trait_map.entry(hir_id.owner).or_default();\n-            let v = v\n-                .into_iter()\n-                .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                .collect();\n-            map.insert(hir_id.local_id, StableVec::new(v));\n+            // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n+            // some `NodeId` do not seem to have a corresponding HirId.\n+            if let Some(hir_id) = definitions.opt_node_id_to_hir_id(k) {\n+                let map = trait_map.entry(hir_id.owner).or_default();\n+                let v = v\n+                    .into_iter()\n+                    .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n+                    .collect();\n+                map.insert(hir_id.local_id, StableVec::new(v));\n+            }\n         }\n \n         GlobalCtxt {"}, {"sha": "1e31b7c74b6f054f8e840770820ec4311c1441f5", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -143,16 +143,6 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     fn visit_id(&mut self, hir_id: HirId) {\n         let owner = self.owner.expect(\"no owner\");\n \n-        if hir_id == hir::DUMMY_HIR_ID {\n-            self.error(|| {\n-                format!(\n-                    \"HirIdValidator: HirId {:?} is invalid\",\n-                    self.hir_map.node_to_string(hir_id)\n-                )\n-            });\n-            return;\n-        }\n-\n         if owner != hir_id.owner {\n             self.error(|| {\n                 format!("}, {"sha": "51e1588c71c4215e01e094f5267637ab90e8b998", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -928,7 +928,12 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n         let macro_module_def_id =\n             ty::DefIdTree::parent(self.tcx, self.tcx.hir().local_def_id(md.hir_id)).unwrap();\n-        let mut module_id = match self.tcx.hir().as_local_hir_id(macro_module_def_id) {\n+        // FIXME(#71104) Should really be using just `as_local_hir_id` but\n+        // some `DefId` do not seem to have a corresponding HirId.\n+        let hir_id = macro_module_def_id\n+            .as_local()\n+            .and_then(|def_id| self.tcx.hir().opt_local_def_id_to_hir_id(def_id));\n+        let mut module_id = match hir_id {\n             Some(module_id) if self.tcx.hir().is_hir_id_module(module_id) => module_id,\n             // `module_id` doesn't correspond to a `mod`, return early (#63164, #65252).\n             _ => return,"}, {"sha": "5bfb5aa2440b731e6ec4bcee67371944266ca781", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -2704,14 +2704,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n-        if lifetime_ref.hir_id == hir::DUMMY_HIR_ID {\n-            span_bug!(\n-                lifetime_ref.span,\n-                \"lifetime reference not renumbered, \\\n-                 probably a bug in rustc_ast::fold\"\n-            );\n-        }\n-\n         debug!(\n             \"insert_lifetime: {} resolved to {:?} span={:?}\",\n             self.tcx.hir().node_to_string(lifetime_ref.hir_id),"}, {"sha": "ba2541bc6c3d905f81935caf19aceb3308f20d06", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -225,11 +225,14 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             collector.visit_pat(&arg.pat);\n \n             for (id, ident, ..) in collector.collected_idents {\n-                let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n-                let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n-                    Some(s) => s.to_string(),\n-                    None => continue,\n-                };\n+                // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n+                // some `NodeId` do not seem to have a corresponding HirId.\n+                let hir_id = self.tcx.hir().opt_node_id_to_hir_id(id);\n+                let typ =\n+                    match hir_id.and_then(|hir_id| self.save_ctxt.tables.node_type_opt(hir_id)) {\n+                        Some(s) => s.to_string(),\n+                        None => continue,\n+                    };\n                 if !self.span.filter_generated(ident.span) {\n                     let id = id_from_node_id(id, &self.save_ctxt);\n                     let span = self.span_from_span(ident.span);"}, {"sha": "3f159fe5e302967faa0416af54cd198e3b4f84db", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -865,9 +865,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &mut self,\n         expr_hir_id: hir::HirId,\n     ) -> Result<(), MethodError<'tcx>> {\n-        if expr_hir_id == hir::DUMMY_HIR_ID {\n-            return Ok(());\n-        }\n         let mut duplicates = FxHashSet::default();\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {"}, {"sha": "ca6bd21fefd39aa276b4fce028f10376722fcbca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -838,7 +838,11 @@ fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         return tcx.has_typeck_tables(outer_def_id);\n     }\n \n-    if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n+    // FIXME(#71104) Should really be using just `as_local_hir_id` but\n+    // some `LocalDefId` do not seem to have a corresponding HirId.\n+    if let Some(id) =\n+        def_id.as_local().and_then(|def_id| tcx.hir().opt_local_def_id_to_hir_id(def_id))\n+    {\n         primary_body_of(tcx, id).is_some()\n     } else {\n         false"}, {"sha": "6e50264c098b67adf771f2db5a6e31572e7bee91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -375,18 +375,16 @@ impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n \n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext<'_>) -> Lifetime {\n-        if self.hir_id != hir::DUMMY_HIR_ID {\n-            let def = cx.tcx.named_region(self.hir_id);\n-            match def {\n-                Some(rl::Region::EarlyBound(_, node_id, _))\n-                | Some(rl::Region::LateBound(_, node_id, _))\n-                | Some(rl::Region::Free(_, node_id)) => {\n-                    if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n-                        return lt;\n-                    }\n+        let def = cx.tcx.named_region(self.hir_id);\n+        match def {\n+            Some(rl::Region::EarlyBound(_, node_id, _))\n+            | Some(rl::Region::LateBound(_, node_id, _))\n+            | Some(rl::Region::Free(_, node_id)) => {\n+                if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n+                    return lt;\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n         Lifetime(self.name.ident().to_string())\n     }"}, {"sha": "316cf84152842bc56b8af8567b886584c21f6180", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "patch": "@@ -580,11 +580,7 @@ pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n \n /// Given a type Path, resolve it to a Type using the TyCtxt\n pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n-    if id == hir::DUMMY_HIR_ID {\n-        debug!(\"resolve_type({:?})\", path);\n-    } else {\n-        debug!(\"resolve_type({:?},{:?})\", path, id);\n-    }\n+    debug!(\"resolve_type({:?},{:?})\", path, id);\n \n     let is_generic = match path.res {\n         Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),"}]}