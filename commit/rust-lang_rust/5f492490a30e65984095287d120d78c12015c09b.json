{"sha": "5f492490a30e65984095287d120d78c12015c09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDkyNDkwYTMwZTY1OTg0MDk1Mjg3ZDEyMGQ3OGMxMjAxNWMwOWI=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-05T20:13:44Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-05T20:13:44Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "07c974e74f66025189c3374ae67c104c16ff4216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c974e74f66025189c3374ae67c104c16ff4216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f492490a30e65984095287d120d78c12015c09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f492490a30e65984095287d120d78c12015c09b", "html_url": "https://github.com/rust-lang/rust/commit/5f492490a30e65984095287d120d78c12015c09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f492490a30e65984095287d120d78c12015c09b/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d43f63bd41e794162a8118b422eff66b5f47eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d43f63bd41e794162a8118b422eff66b5f47eb", "html_url": "https://github.com/rust-lang/rust/commit/29d43f63bd41e794162a8118b422eff66b5f47eb"}, {"sha": "2ed5143c0ec88fe4cf0e3528bb4aca11059c2c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed5143c0ec88fe4cf0e3528bb4aca11059c2c83", "html_url": "https://github.com/rust-lang/rust/commit/2ed5143c0ec88fe4cf0e3528bb4aca11059c2c83"}], "stats": {"total": 1442, "additions": 1028, "deletions": 414}, "files": [{"sha": "617bf32f4639e776a534c337595ee1635c524ab9", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1559,6 +1559,7 @@ Released 2018-09-13\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons\n@@ -1634,6 +1635,8 @@ Released 2018-09-13\n [`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n [`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n+[`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n+[`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax\n [`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\n@@ -1644,6 +1647,7 @@ Released 2018-09-13\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n+[`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n@@ -1919,6 +1923,5 @@ Released 2018-09-13\n [`zero_divided_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n-[`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n [`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "62a8be0abf22c5a08743aa5e4092eaf612927bf6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 400 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "ef1f1a14afcace4c1c21eb7e1e3e373b02194522", "filename": "clippy_lints/src/asm_syntax.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,125 @@\n+use std::fmt;\n+\n+use crate::utils::span_lint_and_help;\n+use rustc_ast::ast::{Expr, ExprKind, InlineAsmOptions};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+enum AsmStyle {\n+    Intel,\n+    Att,\n+}\n+\n+impl fmt::Display for AsmStyle {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            AsmStyle::Intel => f.write_str(\"Intel\"),\n+            AsmStyle::Att => f.write_str(\"AT&T\"),\n+        }\n+    }\n+}\n+\n+impl std::ops::Not for AsmStyle {\n+    type Output = AsmStyle;\n+\n+    fn not(self) -> AsmStyle {\n+        match self {\n+            AsmStyle::Intel => AsmStyle::Att,\n+            AsmStyle::Att => AsmStyle::Intel,\n+        }\n+    }\n+}\n+\n+fn check_expr_asm_syntax(lint: &'static Lint, cx: &EarlyContext<'_>, expr: &Expr, check_for: AsmStyle) {\n+    if let ExprKind::InlineAsm(ref inline_asm) = expr.kind {\n+        let style = if inline_asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+            AsmStyle::Att\n+        } else {\n+            AsmStyle::Intel\n+        };\n+\n+        if style == check_for {\n+            span_lint_and_help(\n+                cx,\n+                lint,\n+                expr.span,\n+                &format!(\"{} x86 assembly syntax used\", style),\n+                None,\n+                &format!(\"use {} x86 assembly syntax\", !style),\n+            );\n+        }\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of Intel x86 assembly syntax.\n+    ///\n+    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// for AT&T x86 assembly syntax.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea {}, [{}]\", lateout(reg) _, in(reg) ptr);\n+    /// # }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea ({}), {}\", in(reg) ptr, lateout(reg) _, options(att_syntax));\n+    /// # }\n+    /// ```\n+    pub INLINE_ASM_X86_INTEL_SYNTAX,\n+    restriction,\n+    \"prefer AT&T x86 assembly syntax\"\n+}\n+\n+declare_lint_pass!(InlineAsmX86IntelSyntax => [INLINE_ASM_X86_INTEL_SYNTAX]);\n+\n+impl EarlyLintPass for InlineAsmX86IntelSyntax {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        check_expr_asm_syntax(Self::get_lints()[0], cx, expr, AsmStyle::Intel);\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of AT&T x86 assembly syntax.\n+    ///\n+    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// for Intel x86 assembly syntax.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea ({}), {}\", in(reg) ptr, lateout(reg) _, options(att_syntax));\n+    /// # }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea {}, [{}]\", lateout(reg) _, in(reg) ptr);\n+    /// # }\n+    /// ```\n+    pub INLINE_ASM_X86_ATT_SYNTAX,\n+    restriction,\n+    \"prefer Intel x86 assembly syntax\"\n+}\n+\n+declare_lint_pass!(InlineAsmX86AttSyntax => [INLINE_ASM_X86_ATT_SYNTAX]);\n+\n+impl EarlyLintPass for InlineAsmX86AttSyntax {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        check_expr_asm_syntax(Self::get_lints()[0], cx, expr, AsmStyle::Att);\n+    }\n+}"}, {"sha": "581c3242e3745c81ee8202db7a28bf7601d5f9ac", "filename": "clippy_lints/src/disallowed_method.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,73 @@\n+use crate::utils::span_lint;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    ///\n+    /// **Why is this bad?** Some methods are undesirable in certain contexts,\n+    /// and it would be beneficial to lint for them as needed.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // example code where clippy issues a warning\n+    /// foo.bad_method(); // Foo::bad_method is disallowed in the configuration\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // example code which does not raise clippy warning\n+    /// goodStruct.bad_method(); // GoodStruct::bad_method is not disallowed\n+    /// ```\n+    pub DISALLOWED_METHOD,\n+    nursery,\n+    \"use of a disallowed method call\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct DisallowedMethod {\n+    disallowed: FxHashSet<Vec<Symbol>>,\n+}\n+\n+impl DisallowedMethod {\n+    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+        Self {\n+            disallowed: disallowed\n+                .iter()\n+                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::MethodCall(_path, _, _args, _) = &expr.kind {\n+            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n+\n+            let method_call = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&method_call) {\n+                let method = method_call\n+                    .iter()\n+                    .map(|s| s.to_ident_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\"::\");\n+\n+                span_lint(\n+                    cx,\n+                    DISALLOWED_METHOD,\n+                    expr.span,\n+                    &format!(\"use of a disallowed method `{}`\", method),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "72ad8d12e6d70c88b1411134391cb0f9060e2691", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -153,6 +153,7 @@ mod utils;\n mod approx_const;\n mod arithmetic;\n mod as_conversions;\n+mod asm_syntax;\n mod assertions_on_constants;\n mod assign_ops;\n mod async_yields_async;\n@@ -176,6 +177,7 @@ mod dbg_macro;\n mod default_trait_access;\n mod dereference;\n mod derive;\n+mod disallowed_method;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -489,6 +491,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &arithmetic::FLOAT_ARITHMETIC,\n         &arithmetic::INTEGER_ARITHMETIC,\n         &as_conversions::AS_CONVERSIONS,\n+        &asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n+        &asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n@@ -529,6 +533,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &derive::UNSAFE_DERIVE_DESERIALIZE,\n+        &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n@@ -851,9 +856,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::UNIT_CMP,\n         &types::UNNECESSARY_CAST,\n         &types::VEC_BOX,\n+        &unicode::INVISIBLE_CHARACTERS,\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n-        &unicode::ZERO_WIDTH_SPACE,\n         &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n@@ -1120,11 +1125,18 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n+\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n         LintId::of(&as_conversions::AS_CONVERSIONS),\n+        LintId::of(&asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n+        LintId::of(&asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n         LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n@@ -1499,7 +1511,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n-        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n@@ -1592,6 +1604,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&neg_multiply::NEG_MULTIPLY),\n         LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n+        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n@@ -1747,8 +1761,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),\n@@ -1766,7 +1778,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n-        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n@@ -1807,6 +1819,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&disallowed_method::DISALLOWED_METHOD),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n@@ -1896,6 +1909,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\");\n     ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\");\n     ls.register_renamed(\"clippy::identity_conversion\", \"clippy::useless_conversion\");\n+    ls.register_renamed(\"clippy::zero_width_space\", \"clippy::invisible_characters\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "d7043e7bd8f713ce010fc84c48ef2f70fb48ace2", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 77, "deletions": 92, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,21 +1,22 @@\n+use crate::utils::paths;\n+use crate::utils::{get_trait_def_id, in_macro, span_lint, trait_ref_of_method};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_param_bound, walk_ty, NestedVisitorMap, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,\n+    NestedVisitorMap, Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n-    BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty,\n-    TyKind, WhereClause, WherePredicate,\n+    BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n-\n-use crate::utils::{in_macro, last_path_segment, span_lint, trait_ref_of_method};\n+use std::iter::FromIterator;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -25,8 +26,11 @@ declare_clippy_lint! {\n     /// complicated, while there is nothing out of the ordinary going on. Removing\n     /// them leads to more readable code.\n     ///\n-    /// **Known problems:** Potential false negatives: we bail out if the function\n-    /// has a `where` clause where lifetimes are mentioned.\n+    /// **Known problems:**\n+    /// - We bail out if the function has a `where` clause where lifetimes\n+    /// are mentioned due to potenial false positives.\n+    /// - Lifetime bounds such as `impl Foo + 'a` and `T: 'a` must be elided with the\n+    /// placeholder notation `'_` because the fully elided notation leaves the type bound to `'static`.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -108,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n }\n \n /// The lifetime of a &-reference.\n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, Clone)]\n enum RefLt {\n     Unnamed,\n     Static,\n@@ -127,7 +131,6 @@ fn check_fn_inner<'tcx>(\n         return;\n     }\n \n-    let mut bounds_lts = Vec::new();\n     let types = generics\n         .params\n         .iter()\n@@ -156,13 +159,12 @@ fn check_fn_inner<'tcx>(\n                         if bound.name != LifetimeName::Static && !bound.is_elided() {\n                             return;\n                         }\n-                        bounds_lts.push(bound);\n                     }\n                 }\n             }\n         }\n     }\n-    if could_use_elision(cx, decl, body, &generics.params, bounds_lts) {\n+    if could_use_elision(cx, decl, body, &generics.params) {\n         span_lint(\n             cx,\n             NEEDLESS_LIFETIMES,\n@@ -181,7 +183,6 @@ fn could_use_elision<'tcx>(\n     func: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n     named_generics: &'tcx [GenericParam<'_>],\n-    bounds_lts: Vec<&'tcx Lifetime>,\n ) -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n@@ -204,15 +205,31 @@ fn could_use_elision<'tcx>(\n     if let Return(ref ty) = func.output {\n         output_visitor.visit_ty(ty);\n     }\n+    for lt in named_generics {\n+        input_visitor.visit_generic_param(lt)\n+    }\n+\n+    if input_visitor.abort() || output_visitor.abort() {\n+        return false;\n+    }\n \n-    let input_lts = match input_visitor.into_vec() {\n-        Some(lts) => lts_from_bounds(lts, bounds_lts.into_iter()),\n-        None => return false,\n-    };\n-    let output_lts = match output_visitor.into_vec() {\n-        Some(val) => val,\n-        None => return false,\n-    };\n+    if allowed_lts\n+        .intersection(&FxHashSet::from_iter(\n+            input_visitor\n+                .nested_elision_site_lts\n+                .iter()\n+                .chain(output_visitor.nested_elision_site_lts.iter())\n+                .cloned()\n+                .filter(|v| matches!(v, RefLt::Named(_))),\n+        ))\n+        .next()\n+        .is_some()\n+    {\n+        return false;\n+    }\n+\n+    let input_lts = input_visitor.lts;\n+    let output_lts = output_visitor.lts;\n \n     if let Some(body_id) = body {\n         let mut checker = BodyLifetimeChecker {\n@@ -277,35 +294,29 @@ fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     allowed_lts\n }\n \n-fn lts_from_bounds<'a, T: Iterator<Item = &'a Lifetime>>(mut vec: Vec<RefLt>, bounds_lts: T) -> Vec<RefLt> {\n-    for lt in bounds_lts {\n-        if lt.name != LifetimeName::Static {\n-            vec.push(RefLt::Named(lt.name.ident().name));\n-        }\n-    }\n-\n-    vec\n-}\n-\n /// Number of unique lifetimes in the given vector.\n #[must_use]\n fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<FxHashSet<_>>().len()\n }\n \n+const CLOSURE_TRAIT_BOUNDS: [&[&str]; 3] = [&paths::FN, &paths::FN_MUT, &paths::FN_ONCE];\n+\n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     lts: Vec<RefLt>,\n-    abort: bool,\n+    nested_elision_site_lts: Vec<RefLt>,\n+    unelided_trait_object_lifetime: bool,\n }\n \n impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n             lts: Vec::new(),\n-            abort: false,\n+            nested_elision_site_lts: Vec::new(),\n+            unelided_trait_object_lifetime: false,\n         }\n     }\n \n@@ -325,40 +336,16 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn into_vec(self) -> Option<Vec<RefLt>> {\n-        if self.abort {\n-            None\n-        } else {\n-            Some(self.lts)\n-        }\n+    fn all_lts(&self) -> Vec<RefLt> {\n+        self.lts\n+            .iter()\n+            .chain(self.nested_elision_site_lts.iter())\n+            .cloned()\n+            .collect::<Vec<_>>()\n     }\n \n-    fn collect_anonymous_lifetimes(&mut self, qpath: &QPath<'_>, ty: &Ty<'_>) {\n-        if let Some(ref last_path_segment) = last_path_segment(qpath).args {\n-            if !last_path_segment.parenthesized\n-                && !last_path_segment\n-                    .args\n-                    .iter()\n-                    .any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n-            {\n-                let hir_id = ty.hir_id;\n-                match self.cx.qpath_res(qpath, hir_id) {\n-                    Res::Def(DefKind::TyAlias | DefKind::Struct, def_id) => {\n-                        let generics = self.cx.tcx.generics_of(def_id);\n-                        for _ in generics.params.as_slice() {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    Res::Def(DefKind::Trait, def_id) => {\n-                        let trait_def = self.cx.tcx.trait_def(def_id);\n-                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).params {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    _ => (),\n-                }\n-            }\n-        }\n+    fn abort(&self) -> bool {\n+        self.unelided_trait_object_lifetime\n     }\n }\n \n@@ -370,30 +357,37 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n+    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>, tbm: TraitBoundModifier) {\n+        let trait_ref = &poly_tref.trait_ref;\n+        if CLOSURE_TRAIT_BOUNDS\n+            .iter()\n+            .any(|trait_path| trait_ref.trait_def_id() == get_trait_def_id(self.cx, trait_path))\n+        {\n+            let mut sub_visitor = RefVisitor::new(self.cx);\n+            sub_visitor.visit_trait_ref(trait_ref);\n+            self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n+        } else {\n+            walk_poly_trait_ref(self, poly_tref, tbm);\n+        }\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n-            TyKind::Rptr(ref lt, _) if lt.is_elided() => {\n-                self.record(&None);\n-            },\n-            TyKind::Path(ref path) => {\n-                self.collect_anonymous_lifetimes(path, ty);\n-            },\n             TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                if let ItemKind::OpaqueTy(ref exist_ty) = map.expect_item(item.id).kind {\n-                    for bound in exist_ty.bounds {\n-                        if let GenericBound::Outlives(_) = *bound {\n-                            self.record(&None);\n-                        }\n-                    }\n-                } else {\n-                    unreachable!()\n-                }\n+                let item = map.expect_item(item.id);\n+                walk_item(self, item);\n                 walk_ty(self, ty);\n             },\n+            TyKind::BareFn(&BareFnTy { decl, .. }) => {\n+                let mut sub_visitor = RefVisitor::new(self.cx);\n+                sub_visitor.visit_fn_decl(decl);\n+                self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n+                return;\n+            },\n             TyKind::TraitObject(bounds, ref lt) => {\n                 if !lt.is_elided() {\n-                    self.abort = true;\n+                    self.unelided_trait_object_lifetime = true;\n                 }\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n@@ -430,16 +424,7 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereCl\n                     walk_param_bound(&mut visitor, bound);\n                 }\n                 // and check that all lifetimes are allowed\n-                match visitor.into_vec() {\n-                    None => return false,\n-                    Some(lts) => {\n-                        for lt in lts {\n-                            if !allowed_lts.contains(&lt) {\n-                                return true;\n-                            }\n-                        }\n-                    },\n-                }\n+                return visitor.all_lts().iter().any(|it| !allowed_lts.contains(it));\n             },\n             WherePredicate::EqPredicate(ref pred) => {\n                 let mut visitor = RefVisitor::new(cx);"}, {"sha": "61b63597b163344773b36195162c493abeae7ddb", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -3,7 +3,7 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_trait_method,\n     match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability,\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n@@ -1276,6 +1276,8 @@ fn check_for_loop_range<'tcx>(\n \n                 let skip = if starts_at_zero {\n                     String::new()\n+                } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, start) {\n+                    return;\n                 } else {\n                     format!(\".skip({})\", snippet(cx, start.span, \"..\"))\n                 };\n@@ -1302,6 +1304,8 @@ fn check_for_loop_range<'tcx>(\n \n                     if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty) {\n                         String::new()\n+                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr) {\n+                        return;\n                     } else {\n                         match limits {\n                             ast::RangeLimits::Closed => {\n@@ -2134,7 +2138,7 @@ enum VarState {\n     DontWarn,\n }\n \n-/// Scan a for loop for variables that are incremented exactly once.\n+/// Scan a for loop for variables that are incremented exactly once and not used after that.\n struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,          // context reference\n     states: FxHashMap<HirId, VarState>, // incremented variables\n@@ -2154,6 +2158,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         if let Some(def_id) = var_def_id(self.cx, expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n                 let state = self.states.entry(def_id).or_insert(VarState::Initial);\n+                if *state == VarState::IncrOnce {\n+                    *state = VarState::DontWarn;\n+                    return;\n+                }\n \n                 match parent.kind {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {"}, {"sha": "25245b3dbf08e1274174b992f18abf2631e7d073", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,10 +1,10 @@\n+use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use crate::utils::{fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "7687962bdd9bf1bfffe8cd772fd164421ed7a204", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n use rustc_errors::Applicability;\n@@ -69,11 +69,30 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n         if let [segment] = &path.segments[..];\n         if segment.ident.name == kw::SelfUpper;\n         then {\n+            // In case we have a named lifetime, we check if the name comes from expansion.\n+            // If it does, at this point we know the rest of the parameter was written by the user,\n+            // so let them decide what the name of the lifetime should be.\n+            // See #6089 for more details.\n+            let mut applicability = Applicability::MachineApplicable;\n             let self_param = match (binding_mode, mutbl) {\n                 (Mode::Ref(None), Mutability::Mut) => \"&mut self\".to_string(),\n-                (Mode::Ref(Some(lifetime)), Mutability::Mut) => format!(\"&{} mut self\", &lifetime.ident.name),\n+                (Mode::Ref(Some(lifetime)), Mutability::Mut) => {\n+                    if in_macro(lifetime.ident.span) {\n+                        applicability = Applicability::HasPlaceholders;\n+                        \"&'_ mut self\".to_string()\n+                    } else {\n+                        format!(\"&{} mut self\", &lifetime.ident.name)\n+                    }\n+                },\n                 (Mode::Ref(None), Mutability::Not) => \"&self\".to_string(),\n-                (Mode::Ref(Some(lifetime)), Mutability::Not) => format!(\"&{} self\", &lifetime.ident.name),\n+                (Mode::Ref(Some(lifetime)), Mutability::Not) => {\n+                    if in_macro(lifetime.ident.span) {\n+                        applicability = Applicability::HasPlaceholders;\n+                        \"&'_ self\".to_string()\n+                    } else {\n+                        format!(\"&{} self\", &lifetime.ident.name)\n+                    }\n+                },\n                 (Mode::Value, Mutability::Mut) => \"mut self\".to_string(),\n                 (Mode::Value, Mutability::Not) => \"self\".to_string(),\n             };\n@@ -85,15 +104,16 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n                 \"the type of the `self` parameter does not need to be arbitrary\",\n                 \"consider to change this parameter to\",\n                 self_param,\n-                Applicability::MachineApplicable,\n+                applicability,\n             )\n         }\n     }\n }\n \n impl EarlyLintPass for NeedlessArbitrarySelfType {\n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n-        if !p.is_self() {\n+        // Bail out if the parameter it's not a receiver or was not written by the user\n+        if !p.is_self() || in_macro(p.span) {\n             return;\n         }\n "}, {"sha": "7b662eae7753eef1571c09880064486ec15f2cd5", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,6 +1,6 @@\n //! Checks for uses of const which the type is not `Freeze` (`Cell`-free).\n //!\n-//! This lint is **deny** by default.\n+//! This lint is **warn** by default.\n \n use std::ptr;\n \n@@ -17,6 +17,8 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::utils::{in_constant, qpath_res, span_lint_and_then};\n use if_chain::if_chain;\n \n+// FIXME: this is a correctness problem but there's no suitable\n+// warn-by-default category.\n declare_clippy_lint! {\n     /// **What it does:** Checks for declaration of `const` items which is interior\n     /// mutable (e.g., contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.).\n@@ -34,6 +36,15 @@ declare_clippy_lint! {\n     /// `std::sync::ONCE_INIT` constant). In this case the use of `const` is legit,\n     /// and this lint should be suppressed.\n     ///\n+    /// When an enum has variants with interior mutability, use of its non interior mutable\n+    /// variants can generate false positives. See issue\n+    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n+    ///\n+    /// Types that have underlying or potential interior mutability trigger the lint whether\n+    /// the interior mutable field is used or not. See issues\n+    /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n+    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n+    ///\n     /// **Example:**\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -49,10 +60,12 @@ declare_clippy_lint! {\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n     /// ```\n     pub DECLARE_INTERIOR_MUTABLE_CONST,\n-    correctness,\n+    style,\n     \"declaring `const` with interior mutability\"\n }\n \n+// FIXME: this is a correctness problem but there's no suitable\n+// warn-by-default category.\n declare_clippy_lint! {\n     /// **What it does:** Checks if `const` items which is interior mutable (e.g.,\n     /// contains a `Cell`, `Mutex`, `AtomicXxxx`, etc.) has been borrowed directly.\n@@ -64,7 +77,14 @@ declare_clippy_lint! {\n     ///\n     /// The `const` value should be stored inside a `static` item.\n     ///\n-    /// **Known problems:** None\n+    /// **Known problems:** When an enum has variants with interior mutability, use of its non\n+    /// interior mutable variants can generate false positives. See issue\n+    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n+    ///\n+    /// Types that have underlying or potential interior mutability trigger the lint whether\n+    /// the interior mutable field is used or not. See issues\n+    /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n+    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -81,7 +101,7 @@ declare_clippy_lint! {\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n     /// ```\n     pub BORROW_INTERIOR_MUTABLE_CONST,\n-    correctness,\n+    style,\n     \"referencing `const` with interior mutability\"\n }\n "}, {"sha": "17d950169fd3e77f2e7855e37adb083d65d6e562", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -216,18 +216,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for Rc<T> and Arc<T> when T is a mutable buffer type such as String or Vec\n+    /// **What it does:** Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\n     ///\n-    /// **Why is this bad?** Expressions such as Rc<String> have no advantage over Rc<str>, since\n-    /// it is larger and involves an extra level of indirection, and doesn't implement Borrow<str>.\n+    /// **Why is this bad?** Expressions such as `Rc<String>` usually have no advantage over `Rc<str>`, since\n+    /// it is larger and involves an extra level of indirection, and doesn't implement `Borrow<str>`.\n     ///\n-    /// While mutating a buffer type would still be possible with Rc::get_mut(), it only\n-    /// works if there are no additional references yet, which defeats the purpose of\n+    /// While mutating a buffer type would still be possible with `Rc::get_mut()`, it only\n+    /// works if there are no additional references yet, which usually defeats the purpose of\n     /// enclosing it in a shared ownership type. Instead, additionally wrapping the inner\n-    /// type with an interior mutable container (such as RefCell or Mutex) would normally\n+    /// type with an interior mutable container (such as `RefCell` or `Mutex`) would normally\n     /// be used.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** This pattern can be desirable to avoid the overhead of a `RefCell` or `Mutex` for\n+    /// cases where mutation only happens before there are any additional references.\n     ///\n     /// **Example:**\n     /// ```rust,ignore"}, {"sha": "93d59cc7fcd178bf42c1fae30b8626206e29fa82", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -8,18 +8,18 @@ use rustc_span::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the Unicode zero-width space in the code.\n+    /// **What it does:** Checks for invisible Unicode characters in the code.\n     ///\n     /// **Why is this bad?** Having an invisible character in the code makes for all\n     /// sorts of April fools, but otherwise is very much frowned upon.\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:** You don't see it, but there may be a zero-width space\n-    /// somewhere in this text.\n-    pub ZERO_WIDTH_SPACE,\n+    /// **Example:** You don't see it, but there may be a zero-width space or soft hyphen\n+    /// some\u00adwhere in this text.\n+    pub INVISIBLE_CHARACTERS,\n     correctness,\n-    \"using a zero-width space in a string literal, which is confusing\"\n+    \"using an invisible character in a string literal, which is confusing\"\n }\n \n declare_clippy_lint! {\n@@ -63,7 +63,7 @@ declare_clippy_lint! {\n     \"using a Unicode literal not in NFC normal form (see [Unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }\n \n-declare_lint_pass!(Unicode => [ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC]);\n+declare_lint_pass!(Unicode => [INVISIBLE_CHARACTERS, NON_ASCII_LITERAL, UNICODE_NOT_NFC]);\n \n impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n@@ -91,14 +91,17 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n \n fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n     let string = snippet(cx, span, \"\");\n-    if string.contains('\\u{200B}') {\n+    if string.chars().any(|c| ['\\u{200B}', '\\u{ad}', '\\u{2060}'].contains(&c)) {\n         span_lint_and_sugg(\n             cx,\n-            ZERO_WIDTH_SPACE,\n+            INVISIBLE_CHARACTERS,\n             span,\n-            \"zero-width space detected\",\n+            \"invisible character detected\",\n             \"consider replacing the string with\",\n-            string.replace(\"\\u{200B}\", \"\\\\u{200B}\"),\n+            string\n+                .replace(\"\\u{200B}\", \"\\\\u{200B}\")\n+                .replace(\"\\u{ad}\", \"\\\\u{AD}\")\n+                .replace(\"\\u{2060}\", \"\\\\u{2060}\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "03f8c5a2c075ebee7e3194c380b25b1243a25af8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -164,6 +164,8 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n+    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n }\n \n impl Default for Conf {"}, {"sha": "dfe2aadffc04d6757454d2f262182d70aa8b6048", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -18,9 +18,9 @@ pub mod internal_lints;\n pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;\n+pub mod qualify_min_const_fn;\n pub mod sugg;\n pub mod usage;\n-pub mod qualify_min_const_fn;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;\n@@ -47,7 +47,6 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n-use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -884,19 +883,11 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    fn has_no_arguments(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-        cx.tcx.fn_sig(def_id).skip_binder().inputs().is_empty()\n-    }\n-\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n-                // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) if has_no_arguments(cx, def_id) => {\n-                    const_eval::is_const_fn(cx.tcx, def_id)\n-                },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}, {"sha": "52d3c2c1daf0961dec0f4af9f5efb565a9d6b14b", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -36,8 +36,9 @@ pub struct NumericLiteral<'a> {\n     pub integer: &'a str,\n     /// The fraction part of the number.\n     pub fraction: Option<&'a str>,\n-    /// The character used as exponent separator (b'e' or b'E') and the exponent part.\n-    pub exponent: Option<(char, &'a str)>,\n+    /// The exponent separator (b'e' or b'E') including preceding underscore if present\n+    /// and the exponent part.\n+    pub exponent: Option<(&'a str, &'a str)>,\n \n     /// The type suffix, including preceding underscore if present.\n     pub suffix: Option<&'a str>,\n@@ -100,7 +101,7 @@ impl<'a> NumericLiteral<'a> {\n         self.radix == Radix::Decimal\n     }\n \n-    pub fn split_digit_parts(digits: &str, float: bool) -> (&str, Option<&str>, Option<(char, &str)>) {\n+    pub fn split_digit_parts(digits: &str, float: bool) -> (&str, Option<&str>, Option<(&str, &str)>) {\n         let mut integer = digits;\n         let mut fraction = None;\n         let mut exponent = None;\n@@ -113,12 +114,14 @@ impl<'a> NumericLiteral<'a> {\n                         fraction = Some(&digits[i + 1..]);\n                     },\n                     'e' | 'E' => {\n-                        if integer.len() > i {\n-                            integer = &digits[..i];\n+                        let exp_start = if digits[..i].ends_with('_') { i - 1 } else { i };\n+\n+                        if integer.len() > exp_start {\n+                            integer = &digits[..exp_start];\n                         } else {\n-                            fraction = Some(&digits[integer.len() + 1..i]);\n+                            fraction = Some(&digits[integer.len() + 1..exp_start]);\n                         };\n-                        exponent = Some((c, &digits[i + 1..]));\n+                        exponent = Some((&digits[exp_start..=i], &digits[i + 1..]));\n                         break;\n                     },\n                     _ => {},\n@@ -153,7 +156,7 @@ impl<'a> NumericLiteral<'a> {\n         }\n \n         if let Some((separator, exponent)) = self.exponent {\n-            output.push(separator);\n+            output.push_str(separator);\n             Self::group_digits(&mut output, exponent, group_size, true, false);\n         }\n "}, {"sha": "277da9d3f3a275bb87e9796fa59ee62f39a8d69a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -41,6 +41,9 @@ pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FN: [&str; 3] = [\"core\", \"ops\", \"Fn\"];\n+pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n+pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];"}, {"sha": "1b4f20342729a39c77c75b742d1f3981de2059a0", "filename": "clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "modified", "additions": 75, "deletions": 118, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,9 +1,12 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::mir::*;\n+use rustc_middle::mir::{\n+    Body, CastKind, NullOp, Operand, Place, ProjectionElem, Rvalue, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n+};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n-use rustc_span::symbol::{sym};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n@@ -24,15 +27,9 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n                 | ty::PredicateAtom::ConstEquate(..)\n                 | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateAtom::ObjectSafe(_) => {\n-                    panic!(\"object safe predicate on function: {:#?}\", predicate)\n-                }\n-                ty::PredicateAtom::ClosureKind(..) => {\n-                    panic!(\"closure kind predicate on function: {:#?}\", predicate)\n-                }\n-                ty::PredicateAtom::Subtype(_) => {\n-                    panic!(\"subtype predicate on function: {:#?}\", predicate)\n-                }\n+                ty::PredicateAtom::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n+                ty::PredicateAtom::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n+                ty::PredicateAtom::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateAtom::Trait(pred, _) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n@@ -48,12 +45,12 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n                                  on const fn parameters are unstable\"\n                                     .into(),\n                             ));\n-                        }\n+                        },\n                         // other kinds of bounds are either tautologies\n                         // or cause errors in other passes\n                         _ => continue,\n                     }\n-                }\n+                },\n             }\n         }\n         match predicates.parent {\n@@ -93,24 +90,23 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n \n         match ty.kind() {\n             ty::Ref(_, _, hir::Mutability::Mut) => {\n-                    return Err((span, \"mutable references in const fn are unstable\".into()));\n-            }\n+                return Err((span, \"mutable references in const fn are unstable\".into()));\n+            },\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n-                    return Err((span, \"function pointers in const fn are unstable\".into()));\n-            }\n+                return Err((span, \"function pointers in const fn are unstable\".into()));\n+            },\n             ty::Dynamic(preds, _) => {\n                 for pred in preds.iter() {\n                     match pred.skip_binder() {\n-                        ty::ExistentialPredicate::AutoTrait(_)\n-                        | ty::ExistentialPredicate::Projection(_) => {\n+                        ty::ExistentialPredicate::AutoTrait(_) | ty::ExistentialPredicate::Projection(_) => {\n                             return Err((\n                                 span,\n                                 \"trait bounds other than `Sized` \\\n                                  on const fn parameters are unstable\"\n                                     .into(),\n                             ));\n-                        }\n+                        },\n                         ty::ExistentialPredicate::Trait(trait_ref) => {\n                             if Some(trait_ref.def_id) != tcx.lang_items().sized_trait() {\n                                 return Err((\n@@ -120,55 +116,40 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n                                         .into(),\n                                 ));\n                             }\n-                        }\n+                        },\n                     }\n                 }\n-            }\n-            _ => {}\n+            },\n+            _ => {},\n         }\n     }\n     Ok(())\n }\n \n-fn check_rvalue(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    def_id: DefId,\n-    rvalue: &Rvalue<'tcx>,\n-    span: Span,\n-) -> McfResult {\n+fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rvalue<'tcx>, span: Span) -> McfResult {\n     match rvalue {\n-        Rvalue::ThreadLocalRef(_) => {\n-            Err((span, \"cannot access thread local storage in const fn\".into()))\n-        }\n-        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(tcx, operand, span, body)\n-        }\n-        Rvalue::Len(place)\n-        | Rvalue::Discriminant(place)\n-        | Rvalue::Ref(_, _, place)\n-        | Rvalue::AddressOf(_, place) => check_place(tcx, *place, span,  body),\n+        Rvalue::ThreadLocalRef(_) => Err((span, \"cannot access thread local storage in const fn\".into())),\n+        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => check_operand(tcx, operand, span, body),\n+        Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n+            check_place(tcx, *place, span, body)\n+        },\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc_middle::ty::cast::CastTy;\n             let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n             let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n             match (cast_in, cast_out) {\n                 (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                     Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n-                }\n+                },\n                 _ => check_operand(tcx, operand, span, body),\n             }\n-        }\n-        Rvalue::Cast(\n-            CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n-            operand,\n-            _,\n-        ) => check_operand(tcx, operand, span, body),\n+        },\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n+            check_operand(tcx, operand, span, body)\n+        },\n         Rvalue::Cast(\n             CastKind::Pointer(\n-                PointerCast::UnsafeFnPointer\n-                | PointerCast::ClosureFnPointer(_)\n-                | PointerCast::ReifyFnPointer,\n+                PointerCast::UnsafeFnPointer | PointerCast::ClosureFnPointer(_) | PointerCast::ReifyFnPointer,\n             ),\n             _,\n             _,\n@@ -178,10 +159,7 @@ fn check_rvalue(\n                 deref_ty.ty\n             } else {\n                 // We cannot allow this for now.\n-                return Err((\n-                    span,\n-                    \"unsizing casts are only allowed for references right now\".into(),\n-                ));\n+                return Err((span, \"unsizing casts are only allowed for references right now\".into()));\n             };\n             let unsized_ty = tcx.struct_tail_erasing_lifetimes(pointee_ty, tcx.param_env(def_id));\n             if let ty::Slice(_) | ty::Str = unsized_ty.kind() {\n@@ -192,7 +170,7 @@ fn check_rvalue(\n                 // We just can't allow trait objects until we have figured out trait method calls.\n                 Err((span, \"unsizing casts are not allowed in const fn\".into()))\n             }\n-        }\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -201,53 +179,44 @@ fn check_rvalue(\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n             } else {\n-                Err((span, \"only int, `bool` and `char` operations are stable in const fn\".into()))\n+                Err((\n+                    span,\n+                    \"only int, `bool` and `char` operations are stable in const fn\".into(),\n+                ))\n             }\n-        }\n+        },\n         Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n-        Rvalue::NullaryOp(NullOp::Box, _) => {\n-            Err((span, \"heap allocations are not allowed in const fn\".into()))\n-        }\n+        Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {\n                 check_operand(tcx, operand, span, body)\n             } else {\n                 Err((span, \"only int and `bool` operations are stable in const fn\".into()))\n             }\n-        }\n+        },\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n                 check_operand(tcx, operand, span, body)?;\n             }\n             Ok(())\n-        }\n+        },\n     }\n }\n \n-fn check_statement(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    def_id: DefId,\n-    statement: &Statement<'tcx>,\n-) -> McfResult {\n+fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statement: &Statement<'tcx>) -> McfResult {\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(box (place, rval)) => {\n-            check_place(tcx, *place, span,  body)?;\n+            check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        }\n-\n-        StatementKind::FakeRead(_, place) => check_place(tcx, **place, span, body),\n+        },\n \n+        StatementKind::FakeRead(_, place) |\n         // just an assignment\n-        StatementKind::SetDiscriminant { place, .. } => {\n-            check_place(tcx, **place, span,  body)\n-        }\n+        StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n-        StatementKind::LlvmInlineAsm { .. } => {\n-            Err((span, \"cannot use inline assembly in const fn\".into()))\n-        }\n+        StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n         // These are all NOPs\n         StatementKind::StorageLive(_)\n@@ -259,12 +228,7 @@ fn check_statement(\n     }\n }\n \n-fn check_operand(\n-    tcx: TyCtxt<'tcx>,\n-    operand: &Operand<'tcx>,\n-    span: Span,\n-    body: &Body<'tcx>,\n-) -> McfResult {\n+fn check_operand(tcx: TyCtxt<'tcx>, operand: &Operand<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => check_place(tcx, *place, span, body),\n         Operand::Constant(c) => match c.check_static_ptr(tcx) {\n@@ -274,41 +238,32 @@ fn check_operand(\n     }\n }\n \n-fn check_place(\n-    tcx: TyCtxt<'tcx>,\n-    place: Place<'tcx>,\n-    span: Span,\n-    body: &Body<'tcx>,\n-) -> McfResult {\n+fn check_place(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     let mut cursor = place.projection.as_ref();\n-    while let &[ref proj_base @ .., elem] = cursor {\n+    while let [ref proj_base @ .., elem] = *cursor {\n         cursor = proj_base;\n         match elem {\n             ProjectionElem::Field(..) => {\n                 let base_ty = Place::ty_from(place.local, &proj_base, body, tcx).ty;\n                 if let Some(def) = base_ty.ty_adt_def() {\n                     // No union field accesses in `const fn`\n                     if def.is_union() {\n-                            return Err((span, \"accessing union fields is unstable\".into()));\n+                        return Err((span, \"accessing union fields is unstable\".into()));\n                     }\n                 }\n-            }\n+            },\n             ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref\n-            | ProjectionElem::Index(_) => {}\n+            | ProjectionElem::Index(_) => {},\n         }\n     }\n \n     Ok(())\n }\n \n-fn check_terminator(\n-    tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n-    terminator: &Terminator<'tcx>,\n-) -> McfResult {\n+fn check_terminator(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, terminator: &Terminator<'tcx>) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n         TerminatorKind::FalseEdge { .. }\n@@ -318,20 +273,23 @@ fn check_terminator(\n         | TerminatorKind::Resume\n         | TerminatorKind::Unreachable => Ok(()),\n \n-        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span,  body),\n+        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n         TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span,  body)?;\n+            check_place(tcx, *place, span, body)?;\n             check_operand(tcx, value, span, body)\n-        }\n+        },\n \n-        TerminatorKind::SwitchInt { discr, switch_ty: _, values: _, targets: _ } => {\n-            check_operand(tcx, discr, span, body)\n-        }\n+        TerminatorKind::SwitchInt {\n+            discr,\n+            switch_ty: _,\n+            values: _,\n+            targets: _,\n+        } => check_operand(tcx, discr, span, body),\n \n         TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n             Err((span, \"const fn generators are unstable\".into()))\n-        }\n+        },\n \n         TerminatorKind::Call {\n             func,\n@@ -343,8 +301,7 @@ fn check_terminator(\n         } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(fn_def_id, _) = *fn_ty.kind() {\n-                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id)\n-                {\n+                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id) {\n                     return Err((\n                         span,\n                         format!(\n@@ -360,9 +317,7 @@ fn check_terminator(\n                 // within const fns. `transmute` is allowed in all other const contexts.\n                 // This won't really scale to more intrinsics or functions. Let's allow const\n                 // transmutes in const fn before we add more hacks to this.\n-                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic\n-                    && tcx.item_name(fn_def_id) == sym::transmute\n-                {\n+                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic && tcx.item_name(fn_def_id) == sym::transmute {\n                     return Err((\n                         span,\n                         \"can only call `transmute` from const items, not `const fn`\".into(),\n@@ -378,14 +333,16 @@ fn check_terminator(\n             } else {\n                 Err((span, \"can only call other const fns within const fn\".into()))\n             }\n-        }\n+        },\n \n-        TerminatorKind::Assert { cond, expected: _, msg: _, target: _, cleanup: _ } => {\n-            check_operand(tcx, cond, span, body)\n-        }\n+        TerminatorKind::Assert {\n+            cond,\n+            expected: _,\n+            msg: _,\n+            target: _,\n+            cleanup: _,\n+        } => check_operand(tcx, cond, span, body),\n \n-        TerminatorKind::InlineAsm { .. } => {\n-            Err((span, \"cannot use inline assembly in const fn\".into()))\n-        }\n+        TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n     }\n }"}, {"sha": "d9d60fffcd7ae79238566aa251c46b8ade76eaf1", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -235,8 +235,19 @@ impl EarlyLintPass for Write {\n     }\n \n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        fn is_build_script(cx: &EarlyContext<'_>) -> bool {\n+            // Cargo sets the crate name for build scripts to `build_script_build`\n+            cx.sess\n+                .opts\n+                .crate_name\n+                .as_ref()\n+                .map_or(false, |crate_name| crate_name == \"build_script_build\")\n+        }\n+\n         if mac.path == sym!(println) {\n-            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            }\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n@@ -251,7 +262,9 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(print) {\n-            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            }\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then("}, {"sha": "3507168a3a96452abe013ab42094028e10d8db6a", "filename": "clippy_workspace_tests/build.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/clippy_workspace_tests%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/clippy_workspace_tests%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fbuild.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,7 @@\n+#![deny(clippy::print_stdout)]\n+\n+fn main() {\n+    // Test for #6041\n+    println!(\"Hello\");\n+    print!(\"Hello\");\n+}"}, {"sha": "0dba5a71c502d9cb23603a2a9922348d914b1d02", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -110,7 +110,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"borrow_interior_mutable_const\",\n-        group: \"correctness\",\n+        group: \"style\",\n         desc: \"referencing `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n@@ -334,7 +334,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"declare_interior_mutable_const\",\n-        group: \"correctness\",\n+        group: \"style\",\n         desc: \"declaring `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n@@ -381,6 +381,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"derive\",\n     },\n+    Lint {\n+        name: \"disallowed_method\",\n+        group: \"nursery\",\n+        desc: \"use of a disallowed method call\",\n+        deprecation: None,\n+        module: \"disallowed_method\",\n+    },\n     Lint {\n         name: \"diverging_sub_expression\",\n         group: \"complexity\",\n@@ -885,6 +892,20 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"attrs\",\n     },\n+    Lint {\n+        name: \"inline_asm_x86_att_syntax\",\n+        group: \"restriction\",\n+        desc: \"prefer Intel x86 assembly syntax\",\n+        deprecation: None,\n+        module: \"asm_syntax\",\n+    },\n+    Lint {\n+        name: \"inline_asm_x86_intel_syntax\",\n+        group: \"restriction\",\n+        desc: \"prefer AT&T x86 assembly syntax\",\n+        deprecation: None,\n+        module: \"asm_syntax\",\n+    },\n     Lint {\n         name: \"inline_fn_without_body\",\n         group: \"correctness\",\n@@ -941,6 +962,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"invisible_characters\",\n+        group: \"correctness\",\n+        desc: \"using an invisible character in a string literal, which is confusing\",\n+        deprecation: None,\n+        module: \"unicode\",\n+    },\n     Lint {\n         name: \"items_after_statements\",\n         group: \"pedantic\",\n@@ -2782,13 +2810,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"misc\",\n     },\n-    Lint {\n-        name: \"zero_width_space\",\n-        group: \"correctness\",\n-        desc: \"using a zero-width space in a string literal, which is confusing\",\n-        deprecation: None,\n-        module: \"unicode\",\n-    },\n     Lint {\n         name: \"zst_offset\",\n         group: \"correctness\","}, {"sha": "f0d73e9b0e2a340980f9cc3e339f372325328a84", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -71,7 +71,7 @@ fn default_config() -> compiletest::Config {\n     }\n \n     config.target_rustcflags = Some(format!(\n-        \"-L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n+        \"--emit=metadata -L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n         host_lib().join(\"deps\").display(),\n         cargo::TARGET_LIB.join(\"deps\").display(),\n         third_party_crates(),"}, {"sha": "a1f515e443dc57f5ec57d94eedadc227e1baf97b", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1 @@\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]"}, {"sha": "3d3f0729abd85a82a9dcc5bf9541ba7a1fc29105", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::disallowed_method)]\n+\n+extern crate regex;\n+use regex::Regex;\n+\n+fn main() {\n+    let a = vec![1, 2, 3, 4];\n+    let re = Regex::new(r\"ab.*c\").unwrap();\n+\n+    re.is_match(\"abc\");\n+\n+    a.iter().sum::<i32>();\n+}"}, {"sha": "ed91b5a6796d8a674ce82e8f54bb6e635a26ca79", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,16 @@\n+error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n+  --> $DIR/conf_disallowed_method.rs:10:5\n+   |\n+LL |     re.is_match(\"abc\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n+error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n+  --> $DIR/conf_disallowed_method.rs:12:5\n+   |\n+LL |     a.iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "103ec27e7d7559c1c9ac20a336c466fa7767f259", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "658cae397e1494b3f5ab0595a21d501229e5d9e7", "filename": "tests/ui/asm_syntax.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,31 @@\n+#![feature(asm)]\n+// only-x86_64\n+\n+#[warn(clippy::inline_asm_x86_intel_syntax)]\n+mod warn_intel {\n+    pub(super) unsafe fn use_asm() {\n+        asm!(\"\");\n+        asm!(\"\", options());\n+        asm!(\"\", options(nostack));\n+        asm!(\"\", options(att_syntax));\n+        asm!(\"\", options(nostack, att_syntax));\n+    }\n+}\n+\n+#[warn(clippy::inline_asm_x86_att_syntax)]\n+mod warn_att {\n+    pub(super) unsafe fn use_asm() {\n+        asm!(\"\");\n+        asm!(\"\", options());\n+        asm!(\"\", options(nostack));\n+        asm!(\"\", options(att_syntax));\n+        asm!(\"\", options(nostack, att_syntax));\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        warn_att::use_asm();\n+        warn_intel::use_asm();\n+    }\n+}"}, {"sha": "27b51166eacb8321c52938fed00fddbbe14602a1", "filename": "tests/ui/asm_syntax.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fasm_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fasm_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,44 @@\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:7:9\n+   |\n+LL |         asm!(\"\");\n+   |         ^^^^^^^^^\n+   |\n+   = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n+   = help: use AT&T x86 assembly syntax\n+\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:8:9\n+   |\n+LL |         asm!(\"\", options());\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use AT&T x86 assembly syntax\n+\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:9:9\n+   |\n+LL |         asm!(\"\", options(nostack));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use AT&T x86 assembly syntax\n+\n+error: AT&T x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:21:9\n+   |\n+LL |         asm!(\"\", options(att_syntax));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n+   = help: use Intel x86 assembly syntax\n+\n+error: AT&T x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:22:9\n+   |\n+LL |         asm!(\"\", options(nostack, att_syntax));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use Intel x86 assembly syntax\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "de670cdfc31f10b8de21317752752216674bf152", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,7 +1,8 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n-#![feature(repr128, proc_macro_hygiene, proc_macro_quote)]\n+#![feature(repr128, proc_macro_hygiene, proc_macro_quote, box_patterns)]\n #![allow(clippy::useless_conversion)]\n \n extern crate proc_macro;\n@@ -11,7 +12,11 @@ extern crate syn;\n use proc_macro::TokenStream;\n use quote::{quote, quote_spanned};\n use syn::parse_macro_input;\n-use syn::{parse_quote, ItemTrait, TraitItem};\n+use syn::spanned::Spanned;\n+use syn::token::Star;\n+use syn::{\n+    parse_quote, FnArg, ImplItem, ItemImpl, ItemTrait, Lifetime, Pat, PatIdent, PatType, Signature, TraitItem, Type,\n+};\n \n #[proc_macro_attribute]\n pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n@@ -35,3 +40,56 @@ pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n     }\n     TokenStream::from(quote!(#item))\n }\n+\n+#[proc_macro_attribute]\n+pub fn rename_my_lifetimes(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    fn make_name(count: usize) -> String {\n+        format!(\"'life{}\", count)\n+    }\n+\n+    fn mut_receiver_of(sig: &mut Signature) -> Option<&mut FnArg> {\n+        let arg = sig.inputs.first_mut()?;\n+        if let FnArg::Typed(PatType { pat, .. }) = arg {\n+            if let Pat::Ident(PatIdent { ident, .. }) = &**pat {\n+                if ident == \"self\" {\n+                    return Some(arg);\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n+    let mut elided = 0;\n+    let mut item = parse_macro_input!(input as ItemImpl);\n+\n+    // Look for methods having arbitrary self type taken by &mut ref\n+    for inner in &mut item.items {\n+        if let ImplItem::Method(method) = inner {\n+            if let Some(FnArg::Typed(pat_type)) = mut_receiver_of(&mut method.sig) {\n+                if let box Type::Reference(reference) = &mut pat_type.ty {\n+                    // Target only unnamed lifetimes\n+                    let name = match &reference.lifetime {\n+                        Some(lt) if lt.ident == \"_\" => make_name(elided),\n+                        None => make_name(elided),\n+                        _ => continue,\n+                    };\n+                    elided += 1;\n+\n+                    // HACK: Syn uses `Span` from the proc_macro2 crate, and does not seem to reexport it.\n+                    // In order to avoid adding the dependency, get a default span from a non-existent token.\n+                    // A default span is needed to mark the code as coming from expansion.\n+                    let span = Star::default().span();\n+\n+                    // Replace old lifetime with the named one\n+                    let lifetime = Lifetime::new(&name, span);\n+                    reference.lifetime = Some(parse_quote!(#lifetime));\n+\n+                    // Add lifetime to the generics of the method\n+                    method.sig.generics.params.push(parse_quote!(#lifetime));\n+                }\n+            }\n+        }\n+    }\n+\n+    TokenStream::from(quote!(#item))\n+}"}, {"sha": "3df8be6c23230eb6bc8d0d49cc877efbf97ad172", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]"}, {"sha": "948deba3ea6e3cb766a37360eba6816ed5ddfd0a", "filename": "tests/ui/crashes/associated-constant-ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/1698\n \n pub trait Trait {"}, {"sha": "619d11cefc46d165531cd8f7292f3d59ec1eacc3", "filename": "tests/ui/crashes/auxiliary/proc_macro_crash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n // ^ compiletest by default builds all aux files as dylibs, but we don't want that for proc-macro\n // crates. If we don't set this, compiletest will override the `crate_type` attribute below and"}, {"sha": "98588be9cf82939cf9e924ac63ad1e305dd0b90d", "filename": "tests/ui/crashes/cc_seme.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fcc_seme.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[allow(dead_code)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/478"}, {"sha": "dca32aa3b5615e25a2b5987fa56a02ef4bbc2e3d", "filename": "tests/ui/crashes/enum-glob-import-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n #![allow(unused_imports)]\n "}, {"sha": "b0a3d11bce4635a1d0745a07912566b986a62544", "filename": "tests/ui/crashes/ice-1588.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1588.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1588"}, {"sha": "81af88962a64d67b70e232c1010151c382f91944", "filename": "tests/ui/crashes/ice-1782.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1782.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessEq` / `consts::constant`"}, {"sha": "96a8fe6c24d5610f8a16df06f98df43020e8c4a2", "filename": "tests/ui/crashes/ice-1969.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1969.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1969"}, {"sha": "45b3b1869dde614e98273f1ea6b890561eaa363f", "filename": "tests/ui/crashes/ice-2499.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2499.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, clippy::char_lit_as_u8, clippy::needless_bool)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`"}, {"sha": "3f3986b6fc69294feb25ed0aed8076648b48d500", "filename": "tests/ui/crashes/ice-2594.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2594.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`"}, {"sha": "56024abc8f58dff58cc2141a06522c6dc1a3a737", "filename": "tests/ui/crashes/ice-2727.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2727.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2727\n \n pub fn f(new: fn()) {"}, {"sha": "f1a229f3f4faf3a706ee0e721ad6c26b973b6135", "filename": "tests/ui/crashes/ice-2760.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2760.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(\n     unused_variables,\n     clippy::blacklisted_name,"}, {"sha": "d44b0fae82001b3824b2a83c8d44e74eddacb0d8", "filename": "tests/ui/crashes/ice-2774.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n use std::collections::HashSet;\n \n // See rust-lang/rust-clippy#2774."}, {"sha": "0c2d48f938fcbe516a7ab5c3b12893c36f78df02", "filename": "tests/ui/crashes/ice-2774.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,10 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/ice-2774.rs:15:1\n+   |\n+LL | pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8326e3663b054a8319c5ce2df2fe2b544e29dd09", "filename": "tests/ui/crashes/ice-2862.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2862.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2862\n \n pub trait FooMap {"}, {"sha": "6b1ceb5056933df6ee6bc782f118fcad3c1a7e72", "filename": "tests/ui/crashes/ice-2865.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-2865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2865.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[allow(dead_code)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/2865"}, {"sha": "fef4d7db84ddf0d23a5671dab0d0791b6bf90db5", "filename": "tests/ui/crashes/ice-3151.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3151.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2865\n \n #[derive(Clone)]"}, {"sha": "7d62e315da2fca1912c2c12a3651c4c8c59d1bac", "filename": "tests/ui/crashes/ice-3462.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3462.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::all)]\n #![allow(clippy::blacklisted_name)]\n #![allow(unused)]"}, {"sha": "1253ddcfaeb3bdb1c7f3daf2a4959064a81b2f89", "filename": "tests/ui/crashes/ice-3741.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3741.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,4 @@\n // aux-build:proc_macro_crash.rs\n-// run-pass\n \n #![warn(clippy::suspicious_else_formatting)]\n "}, {"sha": "cdf018cbc88d8426193b2951d64734312df50dc2", "filename": "tests/ui/crashes/ice-3747.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-3747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3747.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/3747\n \n macro_rules! a {"}, {"sha": "2a4bc83f58a55508b19f0815ce3c3af4e5fadd86", "filename": "tests/ui/crashes/ice-4727.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-4727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-4727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4727.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::use_self)]\n \n #[path = \"auxiliary/ice-4727-aux.rs\"]"}, {"sha": "08b06961760ffea769f92b9f65a71b993a73699c", "filename": "tests/ui/crashes/ice-4760.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-4760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-4760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4760.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n const COUNT: usize = 2;\n struct Thing;\n trait Dummy {}"}, {"sha": "0cbceedbd6bdb195dd421a919eef50131c20ccb6", "filename": "tests/ui/crashes/ice-700.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-700.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/700"}, {"sha": "30e4b11ec0bd450bcebc7c57465649e037f45e21", "filename": "tests/ui/crashes/ice_exacte_size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1336"}, {"sha": "2f913292995eae24e5fe19af0f13aae65a5afb9e", "filename": "tests/ui/crashes/if_same_then_else.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::comparison_chain)]\n #![deny(clippy::if_same_then_else)]\n "}, {"sha": "05696e3d7d56f65050b3ca486145e04ca7717f38", "filename": "tests/ui/crashes/issue-825.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fissue-825.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(warnings)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/825"}, {"sha": "bb238c81ebc05376a3a60ffe49442101d5202b00", "filename": "tests/ui/crashes/issues_loop_mut_cond.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code)]\n \n /// Issue: https://github.com/rust-lang/rust-clippy/issues/2596"}, {"sha": "94c939665e6168a4e168e3f6cd3be91a3d0b7273", "filename": "tests/ui/crashes/match_same_arms_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::match_same_arms)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/2427"}, {"sha": "a238e7896fc6b06357f24f358e03c01d28a4e648", "filename": "tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::mut_mut, clippy::zero_ptr, clippy::cmp_nan)]\n #![allow(dead_code)]\n "}, {"sha": "4f61c76828db8a00d57382a6f744ea49d856d781", "filename": "tests/ui/crashes/needless_borrow_fp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[deny(clippy::all)]\n #[derive(Debug)]\n pub enum Error {"}, {"sha": "676564b2445d506185bb5d9bafe68c15ab3538a9", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::needless_lifetimes)]\n #![allow(dead_code)]\n "}, {"sha": "d68bbe78802136ab5b103f95955729e34c0ffafb", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,14 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes_impl_trait.rs:15:5\n+   |\n+LL |     fn baz<'a>(&'a self) -> impl Foo + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/needless_lifetimes_impl_trait.rs:1:9\n+   |\n+LL | #![deny(clippy::needless_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7468493380c8eb3f994279c32102242fd477fc3", "filename": "tests/ui/crashes/procedural_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[macro_use]\n extern crate clippy_mini_macro_test;\n "}, {"sha": "a41bcb33b4460bf386f714057c377e50ea54ba14", "filename": "tests/ui/crashes/regressions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fregressions.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::blacklisted_name)]\n \n pub fn foo(bar: *const u8) {"}, {"sha": "8021ed4607dde798fea85e4031c9ae33a6710924", "filename": "tests/ui/crashes/returns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Freturns.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/1346\n \n #[deny(warnings)]"}, {"sha": "1ba7ac082132ff46c8087f940666cda16f4705c5", "filename": "tests/ui/crashes/single-match-else.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::single_match_else)]\n \n //! Test for https://github.com/rust-lang/rust-clippy/issues/1588"}, {"sha": "60105a8213feb4f70e6395b983532972874087f0", "filename": "tests/ui/crashes/trivial_bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![feature(trivial_bounds)]\n #![allow(unused, trivial_bounds)]\n "}, {"sha": "6d2124c12fe98addb011233f1b737aa6077c341c", "filename": "tests/ui/crashes/used_underscore_binding_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::useless_attribute)] //issue #2910\n \n #[macro_use]"}, {"sha": "81d8221bd13e01d01e15ed5b35bdbea61867c6c7", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -38,54 +38,54 @@ mod issue_1219 {\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 continue;\n             }\n             count += 1;\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             if ch == 'a' {\n                 continue;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 let _ = 123;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n     }\n }\n@@ -96,30 +96,30 @@ mod issue_3308 {\n         let mut skips = 0;\n         let erasures = vec![];\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             while erasures.contains(&(i + skips)) {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             let mut j = 0;\n             while j < 5 {\n                 skips += 1;\n                 j += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             for j in 0..5 {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n     }\n }\n@@ -145,3 +145,16 @@ mod issue_4732 {\n         let _closure = || println!(\"index: {}\", index);\n     }\n }\n+\n+mod issue_4677 {\n+    pub fn test() {\n+        let slice = &[1, 2, 3];\n+\n+        // should not trigger the lint because the count is used after incremented\n+        let mut count = 0;\n+        for _i in slice {\n+            count += 1;\n+            println!(\"{}\", count);\n+        }\n+    }\n+}"}, {"sha": "dd683e7f746a48ec16bc0acb3a0bc775f4a4ac22", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -40,4 +40,8 @@ fn main() {\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();\n+\n+    // Issue #6096\n+    // Allow separating exponent with '_'\n+    let _ = 1.025_011_10_E0;\n }"}, {"sha": "d5d27c853c28d516667619eea792856394259ac3", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -40,4 +40,8 @@ fn main() {\n     // Ignore literals in macros\n     let _ = mac1!();\n     let _ = mac2!();\n+\n+    // Issue #6096\n+    // Allow separating exponent with '_'\n+    let _ = 1.025_011_10_E0;\n }"}, {"sha": "a39d96109f17d8d03e38c4701cc4345d1e51ed30", "filename": "tests/ui/needless_arbitrary_self_type_unfixable.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,45 @@\n+// aux-build:proc_macro_attr.rs\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+\n+#[macro_use]\n+extern crate proc_macro_attr;\n+\n+mod issue_6089 {\n+    // Check that we don't lint if the `self` parameter comes from expansion\n+\n+    macro_rules! test_from_expansion {\n+        () => {\n+            trait T1 {\n+                fn test(self: &Self);\n+            }\n+\n+            struct S1 {}\n+\n+            impl T1 for S1 {\n+                fn test(self: &Self) {}\n+            }\n+        };\n+    }\n+\n+    test_from_expansion!();\n+\n+    // If only the lifetime name comes from expansion we will lint, but the suggestion will have\n+    // placeholders and will not be applied automatically, as we can't reliably know the original name.\n+    // This specific case happened with async_trait.\n+\n+    trait T2 {\n+        fn call_with_mut_self(&mut self);\n+    }\n+\n+    struct S2 {}\n+\n+    // The method's signature will be expanded to:\n+    //  fn call_with_mut_self<'life0>(self: &'life0 mut Self) {}\n+    #[rename_my_lifetimes]\n+    impl T2 for S2 {\n+        fn call_with_mut_self(self: &mut Self) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "44a0e6ddeace63bcd54bc6f7284eff4a336ec4e9", "filename": "tests/ui/needless_arbitrary_self_type_unfixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,10 @@\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type_unfixable.rs:41:31\n+   |\n+LL |         fn call_with_mut_self(self: &mut Self) {}\n+   |                               ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'_ mut self`\n+   |\n+   = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d482d466e44990df8f0fdcb19d4d4f6fbafc0bbf", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -259,4 +259,102 @@ mod issue4291 {\n     }\n }\n \n+mod issue2944 {\n+    trait Foo {}\n+    struct Bar {}\n+    struct Baz<'a> {\n+        bar: &'a Bar,\n+    }\n+\n+    impl<'a> Foo for Baz<'a> {}\n+    impl Bar {\n+        fn baz<'a>(&'a self) -> impl Foo + 'a {\n+            Baz { bar: self }\n+        }\n+    }\n+}\n+\n+mod nested_elision_sites {\n+    // issue #issue2944\n+\n+    // closure trait bounds subject to nested elision\n+    // don't lint because they refer to outer lifetimes\n+    fn trait_fn<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+        move || i\n+    }\n+    fn trait_fn_mut<'a>(i: &'a i32) -> impl FnMut() -> &'a i32 {\n+        move || i\n+    }\n+    fn trait_fn_once<'a>(i: &'a i32) -> impl FnOnce() -> &'a i32 {\n+        move || i\n+    }\n+\n+    // don't lint\n+    fn impl_trait_in_input_position<'a>(f: impl Fn() -> &'a i32) -> &'a i32 {\n+        f()\n+    }\n+    fn impl_trait_in_output_position<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+        move || i\n+    }\n+    // lint\n+    fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn generics_not_elidable<'a, T: Fn() -> &'a i32>(f: T) -> &'a i32 {\n+        f()\n+    }\n+    // lint\n+    fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn where_clause_not_elidable<'a, T>(f: T) -> &'a i32\n+    where\n+        T: Fn() -> &'a i32,\n+    {\n+        f()\n+    }\n+    // lint\n+    fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+    where\n+        T: Fn(&i32) -> &i32,\n+    {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn pointer_fn_in_input_position<'a>(f: fn(&'a i32) -> &'a i32, i: &'a i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn pointer_fn_in_output_position<'a>(_: &'a i32) -> fn(&'a i32) -> &'a i32 {\n+        |i| i\n+    }\n+    // lint\n+    fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn nested_fn_pointer_1<'a>(_: &'a i32) -> fn(fn(&'a i32) -> &'a i32) -> i32 {\n+        |f| 42\n+    }\n+    fn nested_fn_pointer_2<'a>(_: &'a i32) -> impl Fn(fn(&'a i32)) {\n+        |f| ()\n+    }\n+\n+    // lint\n+    fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n+        |f| 42\n+    }\n+    fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n+        |f| ()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "c8a2e8b81c019a22908b931687725b5f8c3b15e1", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -102,5 +102,53 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:271:9\n+   |\n+LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:300:5\n+   |\n+LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:303:5\n+   |\n+LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:312:5\n+   |\n+LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:324:5\n+   |\n+LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:339:5\n+   |\n+LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:352:5\n+   |\n+LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:355:5\n+   |\n+LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n "}, {"sha": "7633316e0f877b6a7e8a9776ab2cdd7429e6941d", "filename": "tests/ui/needless_range_loop2.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_range_loop2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fneedless_range_loop2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop2.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -82,6 +82,20 @@ fn main() {\n     for i in 1..3 {\n         println!(\"{}\", arr[i]);\n     }\n+\n+    // Fix #5945\n+    let mut vec = vec![1, 2, 3, 4];\n+    for i in 0..vec.len() - 1 {\n+        vec[i] += 1;\n+    }\n+    let mut vec = vec![1, 2, 3, 4];\n+    for i in vec.len() - 3..vec.len() {\n+        vec[i] += 1;\n+    }\n+    let mut vec = vec![1, 2, 3, 4];\n+    for i in vec.len() - 3..vec.len() - 1 {\n+        vec[i] += 1;\n+    }\n }\n \n mod issue2277 {"}, {"sha": "2045ffdb5f09d38996c36d57ffc9c56967859d96", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert_with(String::new);\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "522f31b72d01f4d94a590dd179a86c287d1c6db4", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "bc5978b538f16f69901c7d59576e840a95f95e23", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -60,23 +60,35 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:62:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:65:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:87:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:91:10\n+  --> $DIR/or_fun_call.rs:97:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "997ebef8a699226eb46fe04ba72c078534a17adf", "filename": "tests/ui/print_stdout_build_script.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fprint_stdout_build_script.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Fprint_stdout_build_script.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_stdout_build_script.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --crate-name=build_script_build\n+\n+#![warn(clippy::print_stdout)]\n+\n+fn main() {\n+    // Fix #6041\n+    //\n+    // The `print_stdout` lint shouldn't emit in `build.rs`\n+    // as these methods are used for the build script.\n+    println!(\"Hello\");\n+    print!(\"Hello\");\n+}"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "1f596c312fe395783208b6ab34ffd8fab27d8204", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,7 +1,11 @@\n-#[warn(clippy::zero_width_space)]\n+#[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n     print!(\"This\\u{200B}is\\u{200B}fine\");\n+    print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+    print!(\"This\\u{ad}is\\u{ad}fine\");\n+    print!(\"Here >\u2060< is a WJ, and \u2060another\");\n+    print!(\"This\\u{2060}is\\u{2060}fine\");\n }\n \n #[warn(clippy::unicode_not_nfc)]"}, {"sha": "3fca463c620b522659335917cf78e0a2a5baeb24", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f492490a30e65984095287d120d78c12015c09b/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=5f492490a30e65984095287d120d78c12015c09b", "patch": "@@ -1,26 +1,38 @@\n-error: zero-width space detected\n+error: invisible character detected\n   --> $DIR/unicode.rs:3:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n-   = note: `-D clippy::zero-width-space` implied by `-D warnings`\n+   = note: `-D clippy::invisible-characters` implied by `-D warnings`\n+\n+error: invisible character detected\n+  --> $DIR/unicode.rs:5:12\n+   |\n+LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n+\n+error: invisible character detected\n+  --> $DIR/unicode.rs:7:12\n+   |\n+LL |     print!(\"Here >\u2060< is a WJ, and \u2060another\");\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{2060}< is a WJ, and /u{2060}another\"`\n \n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:9:12\n+  --> $DIR/unicode.rs:13:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:15:12\n+  --> $DIR/unicode.rs:19:12\n    |\n LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29d43f63bd41e794162a8118b422eff66b5f47eb/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/29d43f63bd41e794162a8118b422eff66b5f47eb/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=29d43f63bd41e794162a8118b422eff66b5f47eb", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}