{"sha": "44308dc3489e39958b2ce6dd297b895514b6f425", "node_id": "C_kwDOAAsO6NoAKDQ0MzA4ZGMzNDg5ZTM5OTU4YjJjZTZkZDI5N2I4OTU1MTRiNmY0MjU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-24T05:49:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-24T06:07:49Z"}, "message": "Inline a hot closure in `from_lit_token`.\n\nThe change looks big because `rustfmt` rearranges things, but the only\nreal change is the inlining annotation.", "tree": {"sha": "c1d3d589cc0107bf4a8d56648658a4010ddaecd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1d3d589cc0107bf4a8d56648658a4010ddaecd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44308dc3489e39958b2ce6dd297b895514b6f425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44308dc3489e39958b2ce6dd297b895514b6f425", "html_url": "https://github.com/rust-lang/rust/commit/44308dc3489e39958b2ce6dd297b895514b6f425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44308dc3489e39958b2ce6dd297b895514b6f425/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d9ea745b358a5b9f48560600841fc6619e545d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d9ea745b358a5b9f48560600841fc6619e545d", "html_url": "https://github.com/rust-lang/rust/commit/37d9ea745b358a5b9f48560600841fc6619e545d"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "21183121e15a0df25ed56a4dc1943d28d3b1ffab", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44308dc3489e39958b2ce6dd297b895514b6f425/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44308dc3489e39958b2ce6dd297b895514b6f425/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=44308dc3489e39958b2ce6dd297b895514b6f425", "patch": "@@ -16,6 +16,7 @@\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n #![feature(slice_internals)]\n+#![feature(stmt_expr_attributes)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "224afbd553fb8eca0d5fd9efe15f4f7372bfea92", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/44308dc3489e39958b2ce6dd297b895514b6f425/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44308dc3489e39958b2ce6dd297b895514b6f425/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=44308dc3489e39958b2ce6dd297b895514b6f425", "patch": "@@ -56,25 +56,30 @@ impl LitKind {\n                 // new symbol because the string in the LitKind is different to the\n                 // string in the token.\n                 let s = symbol.as_str();\n-                let symbol =\n-                    if s.contains(&['\\\\', '\\r']) {\n-                        let mut buf = String::with_capacity(s.len());\n-                        let mut error = Ok(());\n-                        unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {\n-                            match unescaped_char {\n-                                Ok(c) => buf.push(c),\n-                                Err(err) => {\n-                                    if err.is_fatal() {\n-                                        error = Err(LitError::LexerError);\n-                                    }\n+                let symbol = if s.contains(&['\\\\', '\\r']) {\n+                    let mut buf = String::with_capacity(s.len());\n+                    let mut error = Ok(());\n+                    // Force-inlining here is aggressive but the closure is\n+                    // called on every char in the string, so it can be\n+                    // hot in programs with many long strings.\n+                    unescape_literal(\n+                        &s,\n+                        Mode::Str,\n+                        &mut #[inline(always)]\n+                        |_, unescaped_char| match unescaped_char {\n+                            Ok(c) => buf.push(c),\n+                            Err(err) => {\n+                                if err.is_fatal() {\n+                                    error = Err(LitError::LexerError);\n                                 }\n                             }\n-                        });\n-                        error?;\n-                        Symbol::intern(&buf)\n-                    } else {\n-                        symbol\n-                    };\n+                        },\n+                    );\n+                    error?;\n+                    Symbol::intern(&buf)\n+                } else {\n+                    symbol\n+                };\n                 LitKind::Str(symbol, ast::StrStyle::Cooked)\n             }\n             token::StrRaw(n) => {"}]}