{"sha": "4d80fd1b1bd037f1beaf45bf412e821605b708c1", "node_id": "C_kwDOAAsO6NoAKDRkODBmZDFiMWJkMDM3ZjFiZWFmNDViZjQxMmU4MjE2MDViNzA4YzE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-10T16:13:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T16:13:59Z"}, "message": "Merge #10513\n\n10513: minor: align code to code style r=matklad a=matklad\n\n(mutually recursive) data type definitions shall be at the start of the\nfile.\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6db5de9a11a10f9855d83832b606e50ff657d0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db5de9a11a10f9855d83832b606e50ff657d0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d80fd1b1bd037f1beaf45bf412e821605b708c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYxFHCRBK7hj4Ov3rIwAA6UEIAGASOtR2bidL+cOMAS/iiCMP\ny0iM+9P4lBRiQUeRHPcY2smebHxsGISMG76JTShfo9wHcPSrNAjwbaw9qLA9e+V/\nCK4oWiWk7S4DCrd6KxLqoX6RPp/IICWx3UTLJxC21KkcS+lavfvF7V+hhds7zXQ8\n6aIP0+yjd1CwcCBJV8PDGtdu0Oxr0MydPdaHIUNjhemxH7hNeEhB9+5FhkKWs6h0\nQVKhAJFhfxlOw+fFpiHfnnd/1oD7eClAcH0p22E3onjj5oHTFkdzTkhtlW2gx3AT\nsg2coFjQCKnvkjn5pQlZ306Ww9/Sh7qOxBAgjpU0sA/Wi53jYi+Xs/QTVkF+FWc=\n=XmLe\n-----END PGP SIGNATURE-----\n", "payload": "tree 6db5de9a11a10f9855d83832b606e50ff657d0c2\nparent 079e9fe49645fab8cb20a8cfb2da81915f018b04\nparent d28a6c36e1d5ae1d83fa03b28a4861d6ac7786ff\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633882439 +0000\ncommitter GitHub <noreply@github.com> 1633882439 +0000\n\nMerge #10513\n\n10513: minor: align code to code style r=matklad a=matklad\n\n(mutually recursive) data type definitions shall be at the start of the\nfile.\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d80fd1b1bd037f1beaf45bf412e821605b708c1", "html_url": "https://github.com/rust-lang/rust/commit/4d80fd1b1bd037f1beaf45bf412e821605b708c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d80fd1b1bd037f1beaf45bf412e821605b708c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "079e9fe49645fab8cb20a8cfb2da81915f018b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/079e9fe49645fab8cb20a8cfb2da81915f018b04", "html_url": "https://github.com/rust-lang/rust/commit/079e9fe49645fab8cb20a8cfb2da81915f018b04"}, {"sha": "d28a6c36e1d5ae1d83fa03b28a4861d6ac7786ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a6c36e1d5ae1d83fa03b28a4861d6ac7786ff", "html_url": "https://github.com/rust-lang/rust/commit/d28a6c36e1d5ae1d83fa03b28a4861d6ac7786ff"}], "stats": {"total": 145, "additions": 71, "deletions": 74}, "files": [{"sha": "f227c7a7dd8f58a89b5d5fda731a1a786a1f6275", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 71, "deletions": 74, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/4d80fd1b1bd037f1beaf45bf412e821605b708c1/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d80fd1b1bd037f1beaf45bf412e821605b708c1/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=4d80fd1b1bd037f1beaf45bf412e821605b708c1", "patch": "@@ -62,19 +62,88 @@ enum HirFileIdRepr {\n     FileId(FileId),\n     MacroFile(MacroFile),\n }\n-\n impl From<FileId> for HirFileId {\n     fn from(id: FileId) -> Self {\n         HirFileId(HirFileIdRepr::FileId(id))\n     }\n }\n-\n impl From<MacroFile> for HirFileId {\n     fn from(id: MacroFile) -> Self {\n         HirFileId(HirFileIdRepr::MacroFile(id))\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroFile {\n+    pub macro_call_id: MacroCallId,\n+}\n+\n+/// `MacroCallId` identifies a particular macro invocation, like\n+/// `println!(\"Hello, {}\", world)`.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroCallId(salsa::InternId);\n+impl_intern_key!(MacroCallId);\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroCallLoc {\n+    pub def: MacroDefId,\n+    pub(crate) krate: CrateId,\n+    eager: Option<EagerCallInfo>,\n+    pub kind: MacroCallKind,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroDefId {\n+    pub krate: CrateId,\n+    pub kind: MacroDefKind,\n+    pub local_inner: bool,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum MacroDefKind {\n+    Declarative(AstId<ast::Macro>),\n+    BuiltIn(BuiltinFnLikeExpander, AstId<ast::Macro>),\n+    // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n+    BuiltInAttr(BuiltinAttrExpander, AstId<ast::Macro>),\n+    BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n+    BuiltInEager(EagerExpander, AstId<ast::Macro>),\n+    ProcMacro(ProcMacroExpander, ProcMacroKind, AstId<ast::Fn>),\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+struct EagerCallInfo {\n+    /// NOTE: This can be *either* the expansion result, *or* the argument to the eager macro!\n+    arg_or_expansion: Arc<tt::Subtree>,\n+    included_file: Option<FileId>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum MacroCallKind {\n+    FnLike {\n+        ast_id: AstId<ast::MacroCall>,\n+        expand_to: ExpandTo,\n+    },\n+    Derive {\n+        ast_id: AstId<ast::Item>,\n+        derive_name: String,\n+        /// Syntactical index of the invoking `#[derive]` attribute.\n+        ///\n+        /// Outer attributes are counted first, then inner attributes. This does not support\n+        /// out-of-line modules, which may have attributes spread across 2 files!\n+        derive_attr_index: u32,\n+    },\n+    Attr {\n+        ast_id: AstId<ast::Item>,\n+        attr_name: String,\n+        attr_args: (tt::Subtree, mbe::TokenMap),\n+        /// Syntactical index of the invoking `#[attribute]`.\n+        ///\n+        /// Outer attributes are counted first, then inner attributes. This does not support\n+        /// out-of-line modules, which may have attributes spread across 2 files!\n+        invoc_attr_index: u32,\n+    },\n+}\n+\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n@@ -215,25 +284,6 @@ impl HirFileId {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroFile {\n-    pub macro_call_id: MacroCallId,\n-}\n-\n-/// `MacroCallId` identifies a particular macro invocation, like\n-/// `println!(\"Hello, {}\", world)`.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroCallId(salsa::InternId);\n-impl_intern_key!(MacroCallId);\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroDefId {\n-    pub krate: CrateId,\n-    pub kind: MacroDefKind,\n-\n-    pub local_inner: bool,\n-}\n-\n impl MacroDefId {\n     pub fn as_lazy_macro(\n         self,\n@@ -261,59 +311,6 @@ impl MacroDefId {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum MacroDefKind {\n-    Declarative(AstId<ast::Macro>),\n-    BuiltIn(BuiltinFnLikeExpander, AstId<ast::Macro>),\n-    // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n-    BuiltInAttr(BuiltinAttrExpander, AstId<ast::Macro>),\n-    BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n-    BuiltInEager(EagerExpander, AstId<ast::Macro>),\n-    ProcMacro(ProcMacroExpander, ProcMacroKind, AstId<ast::Fn>),\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-struct EagerCallInfo {\n-    /// NOTE: This can be *either* the expansion result, *or* the argument to the eager macro!\n-    arg_or_expansion: Arc<tt::Subtree>,\n-    included_file: Option<FileId>,\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MacroCallLoc {\n-    pub def: MacroDefId,\n-    pub(crate) krate: CrateId,\n-    eager: Option<EagerCallInfo>,\n-    pub kind: MacroCallKind,\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum MacroCallKind {\n-    FnLike {\n-        ast_id: AstId<ast::MacroCall>,\n-        expand_to: ExpandTo,\n-    },\n-    Derive {\n-        ast_id: AstId<ast::Item>,\n-        derive_name: String,\n-        /// Syntactical index of the invoking `#[derive]` attribute.\n-        ///\n-        /// Outer attributes are counted first, then inner attributes. This does not support\n-        /// out-of-line modules, which may have attributes spread across 2 files!\n-        derive_attr_index: u32,\n-    },\n-    Attr {\n-        ast_id: AstId<ast::Item>,\n-        attr_name: String,\n-        attr_args: (tt::Subtree, mbe::TokenMap),\n-        /// Syntactical index of the invoking `#[attribute]`.\n-        ///\n-        /// Outer attributes are counted first, then inner attributes. This does not support\n-        /// out-of-line modules, which may have attributes spread across 2 files!\n-        invoc_attr_index: u32,\n-    },\n-}\n-\n // FIXME: attribute indices do not account for `cfg_attr`, which means that we'll strip the whole\n // `cfg_attr` instead of just one of the attributes it expands to\n "}]}