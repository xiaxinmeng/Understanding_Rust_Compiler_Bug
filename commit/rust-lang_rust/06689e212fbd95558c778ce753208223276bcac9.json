{"sha": "06689e212fbd95558c778ce753208223276bcac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Njg5ZTIxMmZiZDk1NTU4Yzc3OGNlNzUzMjA4MjIzMjc2YmNhYzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T15:53:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T15:53:44Z"}, "message": "Rollup merge of #69812 - Marwes:refactor, r=petrochenkov\n\nRefactorings to method/probe.rs and CrateId\n\nA couple of refactorings done while looking into performance improvements in method resolution.", "tree": {"sha": "a4418e2d169ea63280e3c6cc634912d503332274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4418e2d169ea63280e3c6cc634912d503332274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06689e212fbd95558c778ce753208223276bcac9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZRUJCRBK7hj4Ov3rIwAAdHIIAHbFLkhCN0Zk6++5zOnvIWYA\nQqQ9y2lcxo3Ga6OPTB63ak+ZuuvkfqffFxY7HBIZLcPJBb+TgkN5JNZOm9uw6gCb\n4l7g5M0sivfpjWjAlmFfjhPpwDG5d74UhXMkQ4RePG0FfyUVBSp3b/bUEwy3G2a7\n0h103p66ktS9Ij2cCT60n1snb4fO9EuO01ik2vlO2esPE/QH0JEZ3X5z3aCS87Lv\naGk/jcQOat9UTpH+khdnWWc0if7qBme9m6cPH2Z7kzrs0ynYgcusLaxxNgelEHQ9\n+FkSmOYAV5+0wwKbubFccRPVQLqovRrZxcCB4buWXK5JvNedmBioWycTh2PrWfE=\n=hBKS\n-----END PGP SIGNATURE-----\n", "payload": "tree a4418e2d169ea63280e3c6cc634912d503332274\nparent b61037135cc35d0d248a392a144b2016eab33c75\nparent 6095fa146ce994c1650376257ab488156e6e745a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583682824 +0100\ncommitter GitHub <noreply@github.com> 1583682824 +0100\n\nRollup merge of #69812 - Marwes:refactor, r=petrochenkov\n\nRefactorings to method/probe.rs and CrateId\n\nA couple of refactorings done while looking into performance improvements in method resolution.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06689e212fbd95558c778ce753208223276bcac9", "html_url": "https://github.com/rust-lang/rust/commit/06689e212fbd95558c778ce753208223276bcac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06689e212fbd95558c778ce753208223276bcac9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b61037135cc35d0d248a392a144b2016eab33c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/b61037135cc35d0d248a392a144b2016eab33c75", "html_url": "https://github.com/rust-lang/rust/commit/b61037135cc35d0d248a392a144b2016eab33c75"}, {"sha": "6095fa146ce994c1650376257ab488156e6e745a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6095fa146ce994c1650376257ab488156e6e745a", "html_url": "https://github.com/rust-lang/rust/commit/6095fa146ce994c1650376257ab488156e6e745a"}], "stats": {"total": 128, "additions": 47, "deletions": 81}, "files": [{"sha": "542a1ac4536c1804bc546b7625d54e9c464f7c40", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06689e212fbd95558c778ce753208223276bcac9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06689e212fbd95558c778ce753208223276bcac9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=06689e212fbd95558c778ce753208223276bcac9", "patch": "@@ -459,12 +459,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ProbeScope::TraitsInScope,\n         )?;\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n-        for import_id in pick.import_ids {\n-            let import_def_id = tcx.hir().local_def_id(import_id);\n-            debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n-            Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n-                .unwrap()\n-                .insert(import_def_id);\n+        {\n+            let mut tables = self.tables.borrow_mut();\n+            let used_trait_imports = Lrc::get_mut(&mut tables.used_trait_imports).unwrap();\n+            for import_id in pick.import_ids {\n+                let import_def_id = tcx.hir().local_def_id(import_id);\n+                debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n+                used_trait_imports.insert(import_def_id);\n+            }\n         }\n \n         let def_kind = pick.item.def_kind();"}, {"sha": "d35761a6a21f5cbc2896dee46ddf85cff0778015", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 39, "deletions": 75, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/06689e212fbd95558c778ce753208223276bcac9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06689e212fbd95558c778ce753208223276bcac9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=06689e212fbd95558c778ce753208223276bcac9", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn assemble_inherent_candidates(&mut self) {\n-        let steps = self.steps.clone();\n+        let steps = Lrc::clone(&self.steps);\n         for step in steps.iter() {\n             self.assemble_probe(&step.self_ty);\n         }\n@@ -635,87 +635,51 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::Slice(_) => {\n-                let lang_def_id = lang_items.slice_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_u8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_alloc_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_u8_alloc_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Not }) => {\n-                let lang_def_id = lang_items.const_ptr_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Mut }) => {\n-                let lang_def_id = lang_items.mut_ptr_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I8) => {\n-                let lang_def_id = lang_items.i8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I16) => {\n-                let lang_def_id = lang_items.i16_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I32) => {\n-                let lang_def_id = lang_items.i32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I64) => {\n-                let lang_def_id = lang_items.i64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I128) => {\n-                let lang_def_id = lang_items.i128_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::Isize) => {\n-                let lang_def_id = lang_items.isize_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U8) => {\n-                let lang_def_id = lang_items.u8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U16) => {\n-                let lang_def_id = lang_items.u16_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U32) => {\n-                let lang_def_id = lang_items.u32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U64) => {\n-                let lang_def_id = lang_items.u64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                for &lang_def_id in &[\n+                    lang_items.slice_impl(),\n+                    lang_items.slice_u8_impl(),\n+                    lang_items.slice_alloc_impl(),\n+                    lang_items.slice_u8_alloc_impl(),\n+                ] {\n+                    self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                }\n             }\n-            ty::Uint(ast::UintTy::U128) => {\n-                let lang_def_id = lang_items.u128_impl();\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n+                let lang_def_id = match mutbl {\n+                    hir::Mutability::Not => lang_items.const_ptr_impl(),\n+                    hir::Mutability::Mut => lang_items.mut_ptr_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Uint(ast::UintTy::Usize) => {\n-                let lang_def_id = lang_items.usize_impl();\n+            ty::Int(i) => {\n+                let lang_def_id = match i {\n+                    ast::IntTy::I8 => lang_items.i8_impl(),\n+                    ast::IntTy::I16 => lang_items.i16_impl(),\n+                    ast::IntTy::I32 => lang_items.i32_impl(),\n+                    ast::IntTy::I64 => lang_items.i64_impl(),\n+                    ast::IntTy::I128 => lang_items.i128_impl(),\n+                    ast::IntTy::Isize => lang_items.isize_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Float(ast::FloatTy::F32) => {\n-                let lang_def_id = lang_items.f32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.f32_runtime_impl();\n+            ty::Uint(i) => {\n+                let lang_def_id = match i {\n+                    ast::UintTy::U8 => lang_items.u8_impl(),\n+                    ast::UintTy::U16 => lang_items.u16_impl(),\n+                    ast::UintTy::U32 => lang_items.u32_impl(),\n+                    ast::UintTy::U64 => lang_items.u64_impl(),\n+                    ast::UintTy::U128 => lang_items.u128_impl(),\n+                    ast::UintTy::Usize => lang_items.usize_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Float(ast::FloatTy::F64) => {\n-                let lang_def_id = lang_items.f64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.f64_runtime_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            ty::Float(f) => {\n+                let (lang_def_id1, lang_def_id2) = match f {\n+                    ast::FloatTy::F32 => (lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+                    ast::FloatTy::F64 => (lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+                };\n+                self.assemble_inherent_impl_for_primitive(lang_def_id1);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id2);\n             }\n             _ => {}\n         }"}]}