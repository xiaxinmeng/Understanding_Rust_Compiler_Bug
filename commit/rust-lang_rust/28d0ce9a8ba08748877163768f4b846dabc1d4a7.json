{"sha": "28d0ce9a8ba08748877163768f4b846dabc1d4a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZDBjZTlhOGJhMDg3NDg4NzcxNjM3NjhmNGI4NDZkYWJjMWQ0YTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T17:31:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T17:33:14Z"}, "message": "fix up handling of &x where x is an arg or &self (for now at least).", "tree": {"sha": "4eecfbd5e9a7f3c506ffee73ca51e27489fe007c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eecfbd5e9a7f3c506ffee73ca51e27489fe007c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d0ce9a8ba08748877163768f4b846dabc1d4a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d0ce9a8ba08748877163768f4b846dabc1d4a7", "html_url": "https://github.com/rust-lang/rust/commit/28d0ce9a8ba08748877163768f4b846dabc1d4a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d0ce9a8ba08748877163768f4b846dabc1d4a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a85d765be7f580615cdc6d1891eda17420e6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a85d765be7f580615cdc6d1891eda17420e6a3", "html_url": "https://github.com/rust-lang/rust/commit/83a85d765be7f580615cdc6d1891eda17420e6a3"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "96f94823283247ca9f352d340b31148fd2ee0861", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28d0ce9a8ba08748877163768f4b846dabc1d4a7/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/28d0ce9a8ba08748877163768f4b846dabc1d4a7/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=28d0ce9a8ba08748877163768f4b846dabc1d4a7", "patch": "@@ -198,7 +198,7 @@ STDLIB_INPUTS := $(wildcard $(addprefix $(S)src/libstd/,          \\\n COMPILER_CRATE := $(S)src/rustc/rustc.rc\n COMPILER_INPUTS := $(filter-out $(S)src/rustc/driver/rustc.rs,     \\\n                        $(wildcard $(addprefix $(S)src/rustc/,      \\\n-                           rustc.rc *.rs */*.rs */*/*.rs)))\n+                           rustc.rc *.rs */*.rs */*/*.rs */*/*/*.rs)))\n \n LIBRUSTSYNTAX_CRATE := $(S)src/librustsyntax/rustsyntax.rc\n LIBRUSTSYNTAX_INPUTS := $(wildcard $(addprefix $(S)src/librustsyntax/, \\"}, {"sha": "dfa3744a8fe46d4eb51309b70bbd340c8fcdad5e", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=28d0ce9a8ba08748877163768f4b846dabc1d4a7", "patch": "@@ -1,4 +1,5 @@\n import middle::typeck::infer::{ty_and_region_var_methods};\n+import syntax::print::pprust::{expr_to_str};\n \n // Helper functions related to manipulating region types.\n \n@@ -113,6 +114,20 @@ fn replace_bound_regions(\n  * stack position and so the resulting region will be the enclosing block.\n  */\n fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n+    #debug[\"region_of(expr=%s)\", expr_to_str(expr)];\n+    ret alt expr.node {\n+      ast::expr_path(path) {\n+        def(fcx, expr, lookup_def(fcx, path.span, expr.id))}\n+      ast::expr_field(base, _, _) {\n+        deref(fcx, base)}\n+      ast::expr_index(base, _) {\n+        deref(fcx, base)}\n+      ast::expr_unary(ast::deref, base) {\n+        deref(fcx, base)}\n+      _ {\n+        borrow(fcx, expr)}\n+    };\n+\n     fn borrow(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n         ty::encl_region(fcx.ccx.tcx, expr.id)\n     }\n@@ -127,24 +142,38 @@ fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n         }\n     }\n \n-    alt expr.node {\n-      ast::expr_path(path) {\n-        let defn = lookup_def(fcx, path.span, expr.id);\n-        alt defn {\n+    fn def(fcx: @fn_ctxt, expr: @ast::expr, d: ast::def) -> ty::region {\n+        alt d {\n+          ast::def_arg(local_id, _) |\n           ast::def_local(local_id, _) |\n-          ast::def_upvar(local_id, _, _) {\n+          ast::def_binding(local_id) {\n+            #debug[\"region_of.def/arg/local/binding(id=%d)\", local_id];\n             let local_scope = fcx.ccx.tcx.region_map.get(local_id);\n             ty::re_scope(local_scope)\n           }\n-          _ {\n+          ast::def_upvar(_, inner, _) {\n+            #debug[\"region_of.def/upvar\"];\n+            def(fcx, expr, *inner)\n+          }\n+          ast::def_self(*) {\n+            alt fcx.in_scope_regions.find(ty::br_self) {\n+              some(r) {r}\n+              none {\n+                // eventually, this should never happen... self should\n+                // always be an &self.T rptr\n+                borrow(fcx, expr)\n+              }\n+            }\n+          }\n+          ast::def_fn(_, _) | ast::def_mod(_) |\n+          ast::def_native_mod(_) | ast::def_const(_) |\n+          ast::def_use(_) | ast::def_variant(_, _) |\n+          ast::def_ty(_) | ast::def_prim_ty(_) |\n+          ast::def_ty_param(_, _) | ast::def_class(_) |\n+          ast::def_region(_) {\n             ty::re_static\n           }\n         }\n-      }\n-      ast::expr_field(base, _, _) { deref(fcx, base) }\n-      ast::expr_index(base, _) { deref(fcx, base) }\n-      ast::expr_unary(ast::deref, base) { deref(fcx, base) }\n-      _ { borrow(fcx, expr) }\n     }\n }\n "}, {"sha": "4c14937de68de21b12a5d3f0a6b6477649323a0a", "filename": "src/test/compile-fail/regions-addr-of-arg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-arg.rs?ref=28d0ce9a8ba08748877163768f4b846dabc1d4a7", "patch": "@@ -0,0 +1,10 @@\n+fn foo(a: int) {\n+    let _p: &static.int = &a; //! ERROR mismatched types\n+}\n+\n+fn bar(a: int) {\n+    let _q: &blk.int = &a;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "b9943bc18e074957facd1cbbe42a574f52d29c00", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=28d0ce9a8ba08748877163768f4b846dabc1d4a7", "patch": "@@ -0,0 +1,23 @@\n+class dog {\n+    let mut cats_chased: uint;\n+\n+    new() {\n+        self.cats_chased = 0u;\n+    }\n+\n+    fn chase_cat() {\n+        let p: &static.mut uint = &mut self.cats_chased; //! ERROR mismatched types\n+        *p += 1u;\n+    }\n+\n+    fn chase_cat_2() {\n+        let p: &blk.mut uint = &mut self.cats_chased;\n+        *p += 1u;\n+    }\n+}\n+\n+fn main() {\n+    let d = dog();\n+    d.chase_cat();\n+    #debug[\"cats_chased: %u\", d.cats_chased];\n+}\n\\ No newline at end of file"}, {"sha": "b0cd97d24d343c8698ed19b0a1c148206d95394e", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0ce9a8ba08748877163768f4b846dabc1d4a7/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=28d0ce9a8ba08748877163768f4b846dabc1d4a7", "patch": "@@ -0,0 +1,17 @@\n+class dog {\n+    let mut food: uint;\n+\n+    new() {\n+        self.food = 0u;\n+    }\n+\n+    fn chase_cat() {\n+        uint::range(0u, 10u) { |i|\n+            let p: &static.mut uint = &mut self.food; //! ERROR mismatched types\n+            *p = 3u;\n+        }\n+    }\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}