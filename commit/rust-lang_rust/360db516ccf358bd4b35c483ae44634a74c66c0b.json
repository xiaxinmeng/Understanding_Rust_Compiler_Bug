{"sha": "360db516ccf358bd4b35c483ae44634a74c66c0b", "node_id": "C_kwDOAAsO6NoAKDM2MGRiNTE2Y2NmMzU4YmQ0YjM1YzQ4M2FlNDQ2MzRhNzRjNjZjMGI", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-20T00:51:17Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-23T23:56:22Z"}, "message": "Create stable metric to measure long computation in Const Eval\n\nThis patch adds a `MirPass` that tracks the number of back-edges and\nfunction calls in the CFG, adds a new MIR instruction to increment a\ncounter every time they are encountered during Const Eval, and emit a\nwarning if a configured limit is breached.", "tree": {"sha": "b93ee5a07bbfa3db492ba3baaa26f645b4252121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93ee5a07bbfa3db492ba3baaa26f645b4252121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360db516ccf358bd4b35c483ae44634a74c66c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360db516ccf358bd4b35c483ae44634a74c66c0b", "html_url": "https://github.com/rust-lang/rust/commit/360db516ccf358bd4b35c483ae44634a74c66c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360db516ccf358bd4b35c483ae44634a74c66c0b/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "html_url": "https://github.com/rust-lang/rust/commit/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7"}], "stats": {"total": 242, "additions": 233, "deletions": 9}, "files": [{"sha": "2821677c5371f7857044cd535e24bd14bfd7ca59", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -393,6 +393,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n             | mir::StatementKind::Intrinsic(..)\n+            | mir::StatementKind::ConstEvalCounter\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "6217676d5c150f5f977ff22735f65ca1d817a86f", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -91,7 +91,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            StatementKind::Nop\n+            StatementKind::ConstEvalCounter\n+            | StatementKind::Nop\n             | StatementKind::Retag { .. }\n             | StatementKind::Deinit(..)\n             | StatementKind::SetDiscriminant { .. } => {"}, {"sha": "8f8fae2c630b50f69d1ed95933dea8ba6e39477b", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -620,7 +620,8 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::Nop\n+            StatementKind::ConstEvalCounter\n+            | StatementKind::Nop\n             | StatementKind::Retag { .. }\n             | StatementKind::Deinit(..)\n             | StatementKind::SetDiscriminant { .. } => {"}, {"sha": "06087b0c579d8c293349d82e0e847fb5a2b50da5", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -1258,6 +1258,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n             StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")"}, {"sha": "60fbceb344d88dd360120d8d2594375b74793c60", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -91,6 +91,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n+            | mir::StatementKind::ConstEvalCounter\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "041e9d413575e660877e2e2e997c10637cbeb999", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -22,6 +22,8 @@ use crate::interpret::{\n     RefTracking, StackPopCleanup,\n };\n \n+use tracing::info;\n+\n const NOTE_ON_UNDEFINED_BEHAVIOR_ERROR: &str = \"The rules on what exactly is undefined behavior aren't clear, \\\n      so this check might be overzealous. Please open an issue on the rustc \\\n      repository if you believe it should not be considered undefined behavior.\";\n@@ -33,6 +35,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     body: &'mir mir::Body<'tcx>,\n ) -> InterpResult<'tcx, MPlaceTy<'tcx>> {\n     debug!(\"eval_body_using_ecx: {:?}, {:?}\", cid, ecx.param_env);\n+    info!(\"HERE body is {:#?}\", body);\n     let tcx = *ecx.tcx;\n     assert!(\n         cid.promoted.is_some()"}, {"sha": "befc71ce6a0dd6271d1e5b5117042c6aee2a0a91", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -369,6 +369,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         }\n     }\n \n+    #[instrument(skip(ecx), ret)]\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "cc97564e8fc28219d6709b844cfaf6322bfdf0d6", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -46,6 +46,9 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n \n     /// The recursion limit (cached from `tcx.recursion_limit(())`)\n     pub recursion_limit: Limit,\n+\n+    pub const_eval_limit: u32,\n+    pub const_eval_counter: u32,\n }\n \n // The Phantomdata exists to prevent this type from being `Send`. If it were sent across a thread\n@@ -408,6 +411,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             param_env,\n             memory: Memory::new(),\n             recursion_limit: tcx.recursion_limit(),\n+            const_eval_limit: 20,\n+            const_eval_counter: 0,\n         }\n     }\n "}, {"sha": "271a3a74fe3195b5886b10664ed4ffc4cceb0caa", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -293,6 +293,17 @@ where\n     Prov: Provenance + 'static,\n     M: Machine<'mir, 'tcx, Provenance = Prov>,\n {\n+    pub fn increment_const_eval_counter(&mut self) {\n+        self.const_eval_counter = self.const_eval_counter + 1;\n+        if self.const_eval_counter == self.const_eval_limit {\n+            let mut warn = self.tcx.sess.struct_warn(format!(\n+                \"Const eval counter limit ({}) has been crossed\",\n+                self.const_eval_limit\n+            ));\n+            warn.emit();\n+        }\n+    }\n+\n     /// Take a value, which represents a (thin or wide) reference, and make it a place.\n     /// Alignment is just based on the type. This is the inverse of `MemPlace::to_ref()`.\n     ///"}, {"sha": "0f0eb5aadd71d4c88fe4a6c1760ab5bbf122ca51", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -129,6 +129,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME(#73156): Handle source code coverage in const eval\n             Coverage(..) => {}\n \n+            // FIXME(bryangarza): Update this to do some logic!!!\n+            ConstEvalCounter => {\n+                self.increment_const_eval_counter();\n+            }\n+\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}"}, {"sha": "16b504dd9d49193c2cb82f5447801e9ffe1f5adb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -693,6 +693,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "4ad699c0395e35408d6c49410189511ba8b70b67", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -766,6 +766,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Coverage(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n "}, {"sha": "dae7e84e415f07c6c60b24d2f9bd8e33aa6ff373", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -1461,6 +1461,7 @@ impl Debug for Statement<'_> {\n             }\n             Coverage(box ref coverage) => write!(fmt, \"Coverage::{:?}\", coverage.kind),\n             Intrinsic(box ref intrinsic) => write!(fmt, \"{intrinsic}\"),\n+            ConstEvalCounter => write!(fmt, \"ConstEvalCounter\"),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "c281fe00591ae1dfe09fb17047d5b79099f5e379", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -441,10 +441,14 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mir_for_ctfe_opt_const_arg(self, def: ty::WithOptConstParam<DefId>) -> &'tcx Body<'tcx> {\n-        if let Some((did, param_did)) = def.as_const_arg() {\n+        let res = if let Some((did, param_did)) = def.as_const_arg() {\n+            info!(\"calling mir_for_ctfe_of_const_arg for DedId {did:?}\");\n             self.mir_for_ctfe_of_const_arg((did, param_did))\n         } else {\n+            info!(\"calling mir_for_ctfe for DefId {:?}\", def.did);\n             self.mir_for_ctfe(def.did)\n-        }\n+        };\n+        //info!(\"RES OF CALLING MIR_FOR_CTFE_OPT_CONST_ARG: {:#?}\", res);\n+        res\n     }\n }"}, {"sha": "7efe1fde093435fa7665097811f16f58804c2f88", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -250,6 +250,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n         Intrinsic(..) => \"Intrinsic\",\n+        ConstEvalCounter => \"ConstEvalCounter\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "faf903a59490164f42733f41a91289eaf9aecf8d", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -286,7 +286,10 @@ pub enum StatementKind<'tcx> {\n     /// This is permitted for both generators and ADTs. This does not necessarily write to the\n     /// entire place; instead, it writes to the minimum set of bytes as required by the layout for\n     /// the type.\n-    SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },\n+    SetDiscriminant {\n+        place: Box<Place<'tcx>>,\n+        variant_index: VariantIdx,\n+    },\n \n     /// Deinitializes the place.\n     ///\n@@ -355,6 +358,8 @@ pub enum StatementKind<'tcx> {\n     /// This avoids adding a new block and a terminator for simple intrinsics.\n     Intrinsic(Box<NonDivergingIntrinsic<'tcx>>),\n \n+    ConstEvalCounter,\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }"}, {"sha": "3ddac5e11fbc53bea3811686fdee4076d6d7a89e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -427,6 +427,7 @@ macro_rules! make_mir_visitor {\n                             }\n                         }\n                     }\n+                    StatementKind::ConstEvalCounter => {}\n                     StatementKind::Nop => {}\n                 }\n             }"}, {"sha": "2890fa32cc915fdf540f2ee66ce73d7afc44c31b", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -271,6 +271,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => None,\n         };\n         if let Some(destination) = destination {"}, {"sha": "fcf0ce9d82118815eadbb0229be5bac3e49afe21", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -141,6 +141,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n             | StatementKind::Intrinsic(..)"}, {"sha": "0195693a7cb0e6d9bf8639e83d8e96a5b59797a3", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -331,6 +331,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "6bdbda909d7bdf02da963730db84fa2a3d2be991", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -84,7 +84,8 @@ pub trait ValueAnalysis<'tcx> {\n             StatementKind::Retag(..) => {\n                 // We don't track references.\n             }\n-            StatementKind::Nop\n+            StatementKind::ConstEvalCounter\n+            | StatementKind::Nop\n             | StatementKind::FakeRead(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..) => (),"}, {"sha": "837233953e7ad698647acdbce2bc4297a833ffb3", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -104,6 +104,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "f973c1ed28f4a639b7bd17351a76f6ace8f34499", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -802,6 +802,8 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::StorageDead(_)\n         // Coverage should not be encountered, but don't inject coverage coverage\n         | StatementKind::Coverage(_)\n+        // Ignore `ConstEvalCounter`s\n+        | StatementKind::ConstEvalCounter\n         // Ignore `Nop`s\n         | StatementKind::Nop => None,\n "}, {"sha": "dc54b983c0e2cd4298449bfe2baa95e41a669cbe", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,92 @@\n+use crate::MirPass;\n+\n+use rustc_middle::mir::{BasicBlock, Body, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::ty::TyCtxt;\n+\n+use tracing::{info, instrument};\n+\n+pub struct CtfeLimit;\n+\n+impl<'tcx> MirPass<'tcx> for CtfeLimit {\n+    #[instrument(skip(self, _tcx, body))]\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let doms = body.basic_blocks.dominators();\n+        //info!(\"Got body with {} basic blocks: {:#?}\", body.basic_blocks.len(), body.basic_blocks);\n+        //info!(\"With doms: {doms:?}\");\n+\n+        /*\n+        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n+            info!(\"bb{index}: {basic_block:#?}\")\n+        }*/\n+        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n+            info!(\n+                \"bb{index} -> successors = {:?}\",\n+                basic_block.terminator().successors().collect::<Vec<BasicBlock>>()\n+            );\n+        }\n+        for (index, basic_block) in body.basic_blocks.iter().enumerate() {\n+            info!(\"bb{index} -> unwind = {:?}\", basic_block.terminator().unwind())\n+        }\n+\n+        let mut dominators = Vec::new();\n+        for idom in 0..body.basic_blocks.len() {\n+            let mut nodes = Vec::new();\n+            for inode in 0..body.basic_blocks.len() {\n+                let dom = BasicBlock::from_usize(idom);\n+                let node = BasicBlock::from_usize(inode);\n+                if doms.is_reachable(dom)\n+                    && doms.is_reachable(node)\n+                    && doms.is_dominated_by(node, dom)\n+                {\n+                    //info!(\"{idom} dominates {inode}\");\n+                    nodes.push(true);\n+                } else {\n+                    nodes.push(false);\n+                }\n+            }\n+            dominators.push(nodes);\n+        }\n+        /*\n+        for idom in 0..body.basic_blocks.len() {\n+            print!(\"{idom} | dom | \");\n+            for inode in 0..body.basic_blocks.len() {\n+                if dominators[idom][inode] {\n+                    print!(\"{inode} | \");\n+                } else {\n+                    print!(\"  | \");\n+                }\n+            }\n+            print!(\"\\n\");\n+        }\n+        */\n+\n+        for (index, basic_block) in body.basic_blocks_mut().iter_mut().enumerate() {\n+            // info!(\"bb{index}: {basic_block:#?}\");\n+            //info!(\"bb{index} -> successors = {:?}\", basic_block.terminator().successors().collect::<Vec<BasicBlock>>());\n+            let is_back_edge_or_fn_call = 'label: {\n+                match basic_block.terminator().kind {\n+                    TerminatorKind::Call { .. } => {\n+                        break 'label true;\n+                    }\n+                    _ => (),\n+                }\n+                for successor in basic_block.terminator().successors() {\n+                    let s_index = successor.as_usize();\n+                    if dominators[s_index][index] {\n+                        info!(\"{s_index} to {index} is a loop\");\n+                        break 'label true;\n+                    }\n+                }\n+                false\n+            };\n+            if is_back_edge_or_fn_call {\n+                basic_block.statements.push(Statement {\n+                    source_info: basic_block.terminator().source_info,\n+                    kind: StatementKind::ConstEvalCounter,\n+                });\n+                info!(\"New basic block statements vector: {:?}\", basic_block.statements);\n+            }\n+        }\n+        info!(\"With doms: {doms:?}\");\n+    }\n+}"}, {"sha": "9dbfb089dc665428340c5fc4272e4f494a3def45", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -53,6 +53,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::Coverage(_)\n                 | StatementKind::Intrinsic(_)\n+                | StatementKind::ConstEvalCounter\n                 | StatementKind::Nop => (),\n \n                 StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "20ffb0ab3340444c185b7e835de6cff6bcada14e", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -577,6 +577,7 @@ impl WriteInfo {\n                 self.add_place(**place);\n             }\n             StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageLive(_)"}, {"sha": "0df732aa22bad7b23724909ed58311f081e96d86", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -1583,6 +1583,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "e5c8127bea140d142dc463bc321ca307a13c7241", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -55,6 +55,7 @@ mod const_goto;\n mod const_prop;\n mod const_prop_lint;\n mod coverage;\n+mod ctfe_limit;\n mod dataflow_const_prop;\n mod dead_store_elimination;\n mod deaggregator;\n@@ -349,11 +350,14 @@ fn mir_promoted(\n /// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n fn mir_for_ctfe(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     let did = def_id.expect_local();\n-    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+    let body = if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n         tcx.mir_for_ctfe_of_const_arg(def)\n     } else {\n         tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n-    }\n+    };\n+    //info!(\"MIR_FOR_CTFE (DefId = {def_id:?}) body res: {:#?}\", body);\n+    info!(\"MIR_FOR_CTFE (DefId = {def_id:?})\");\n+    body\n }\n \n /// Same as `mir_for_ctfe`, but used to get the MIR of a const generic parameter.\n@@ -447,6 +451,7 @@ fn mir_drops_elaborated_and_const_checked(\n \n     run_analysis_to_runtime_passes(tcx, &mut body);\n \n+    //info!(\"MIR after runtime passes: {:#?}\", body);\n     tcx.alloc_steal_mir(body)\n }\n \n@@ -517,6 +522,7 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // CTFE support for aggregates.\n         &deaggregator::Deaggregator,\n         &Lint(const_prop_lint::ConstProp),\n+        &ctfe_limit::CtfeLimit,\n     ];\n     pm::run_passes_no_validate(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::Initial)));\n }\n@@ -617,6 +623,7 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n     let mut body = remap_mir_for_const_eval_select(tcx, body, hir::Constness::NotConst);\n     debug!(\"body: {:#?}\", body);\n     run_optimization_passes(tcx, &mut body);\n+    //info!(\"body after OPTIMIZATION: {:#?}\", body);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n "}, {"sha": "e3a03aa08af4bdf87db93f780da21ff176657674", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -35,6 +35,7 @@ impl RemoveNoopLandingPads {\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::AscribeUserType(..)\n                 | StatementKind::Coverage(..)\n+                | StatementKind::ConstEvalCounter\n                 | StatementKind::Nop => {\n                     // These are all noops in a landing pad\n                 }"}, {"sha": "a24d2d34d791b96e53a654610d52ef95f5ce035e", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -250,6 +250,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }\n@@ -318,6 +319,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n \n             // If the discriminant is set, it is always set"}, {"sha": "7b6fa2baf2f950db187ab6b0d2934277282a9165", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -517,7 +517,7 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n                 self.super_statement(statement, location);\n             }\n \n-            StatementKind::Nop => {}\n+            StatementKind::ConstEvalCounter | StatementKind::Nop => {}\n \n             StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}\n "}, {"sha": "71f29ce8731f02069eb5ffad55824086f2d51a2d", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+#![feature(const_for)]\n+\n+const fn labelled_loop() -> u32 {\n+    let mut n = 0;\n+    'outer: loop {\n+        'inner: loop {\n+            n = n + 1;\n+            if n > 5 && n <= 10 {\n+                n = n + 1;\n+                continue 'inner\n+            }\n+            if n > 30 {\n+                break 'outer\n+            }\n+        }\n+    }\n+    n\n+}\n+\n+const X: u32 = labelled_loop();\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "183bed3b75b253e4980d49d9bb69cecc4123dc01", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,4 @@\n+warning: Const eval counter limit (20) has been crossed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "00b4fc258593a1274cb16caae43f89d8dd705a3b", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-recursion.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+const fn recurse(n: u32) -> u32 {\n+    if n == 0 {\n+        n\n+    } else {\n+        recurse(n - 1)\n+    }\n+}\n+\n+const X: u32 = recurse(30);\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "183bed3b75b253e4980d49d9bb69cecc4123dc01", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-recursion.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,4 @@\n+warning: Const eval counter limit (20) has been crossed\n+\n+warning: 1 warning emitted\n+"}, {"sha": "74dc74734b45e46ba6be4d6e025d1f08f2d70baf", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-simple-loop.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+const fn simple_loop(n: u32) -> u32 {\n+    let mut index = 0;\n+    let mut res = 0;\n+    while index < n {\n+        res = res + index;\n+        index = index + 1;\n+    }\n+    res\n+}\n+\n+const X: u32 = simple_loop(30);\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "183bed3b75b253e4980d49d9bb69cecc4123dc01", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-simple-loop.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/360db516ccf358bd4b35c483ae44634a74c66c0b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr?ref=360db516ccf358bd4b35c483ae44634a74c66c0b", "patch": "@@ -0,0 +1,4 @@\n+warning: Const eval counter limit (20) has been crossed\n+\n+warning: 1 warning emitted\n+"}]}