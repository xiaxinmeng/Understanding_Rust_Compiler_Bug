{"sha": "6fba412499e854d6c4cd8e6b22073d5684d549ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYmE0MTI0OTllODU0ZDZjNGNkOGU2YjIyMDczZDU2ODRkNTQ5ZWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-06T18:55:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-06T18:55:21Z"}, "message": "Further tweak spans in ast validation errors", "tree": {"sha": "62533504bc15b5bd93f420a4d963c607dbf00b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62533504bc15b5bd93f420a4d963c607dbf00b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fba412499e854d6c4cd8e6b22073d5684d549ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fba412499e854d6c4cd8e6b22073d5684d549ee", "html_url": "https://github.com/rust-lang/rust/commit/6fba412499e854d6c4cd8e6b22073d5684d549ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fba412499e854d6c4cd8e6b22073d5684d549ee/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "713a291441d2c71e74141ddc9387166bd6755d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/713a291441d2c71e74141ddc9387166bd6755d9b", "html_url": "https://github.com/rust-lang/rust/commit/713a291441d2c71e74141ddc9387166bd6755d9b"}], "stats": {"total": 139, "additions": 91, "deletions": 48}, "files": [{"sha": "eff58ad4d9aab2fffdd553b47de95e8517a69265", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, struct_span_err, Applicability};\n+use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n@@ -887,30 +887,63 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     if !generics.params.is_empty() {\n-                        struct_span_err!(\n+                        let spans: Vec<_> = generics.params.iter().map(|i| i.ident.span).collect();\n+                        let last = spans.iter().last().map(|s| *s);\n+                        let len = spans.len();\n+                        let mut err = struct_span_err!(\n                             self.session,\n-                            item.span,\n+                            spans,\n                             E0567,\n                             \"auto traits cannot have generic parameters\"\n-                        )\n-                        .emit();\n+                        );\n+                        if let Some(span) = last {\n+                            err.span_label(\n+                                span,\n+                                &format!(\n+                                    \"cannot have {these} generic parameter{s}\",\n+                                    these = if len == 1 { \"this\" } else { \"these\" },\n+                                    s = pluralize!(len)\n+                                ),\n+                            );\n+                        }\n+                        err.span_label(\n+                            item.ident.span,\n+                            \"auto trait cannot have generic parameters\",\n+                        );\n+                        err.emit();\n                     }\n                     if !bounds.is_empty() {\n-                        struct_span_err!(\n+                        let spans: Vec<_> = bounds.iter().map(|b| b.span()).collect();\n+                        let last = spans.iter().last().map(|s| *s);\n+                        let len = spans.len();\n+                        let mut err = struct_span_err!(\n                             self.session,\n-                            item.span,\n+                            spans,\n                             E0568,\n                             \"auto traits cannot have super traits\"\n-                        )\n-                        .emit();\n+                        );\n+                        if let Some(span) = last {\n+                            err.span_label(\n+                                span,\n+                                &format!(\n+                                    \"cannot have {these} super trait{s}\",\n+                                    these = if len == 1 { \"this\" } else { \"these\" },\n+                                    s = pluralize!(len)\n+                                ),\n+                            );\n+                        }\n+                        err.span_label(item.ident.span, \"auto trait cannot have super traits\");\n+                        err.emit();\n                     }\n                     if !trait_items.is_empty() {\n+                        let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n                         struct_span_err!(\n                             self.session,\n-                            item.span,\n+                            spans,\n                             E0380,\n                             \"auto traits cannot have methods or associated items\"\n                         )\n+                        .span_label(item.ident.span, \"auto trait cannot have items\")\n                         .emit();\n                     }\n                 }\n@@ -1157,9 +1190,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }) = fk.header()\n         {\n             self.err_handler()\n-                .struct_span_err(span, \"functions cannot be both `const` and `async`\")\n+                .struct_span_err(\n+                    vec![*cspan, *aspan],\n+                    \"functions cannot be both `const` and `async`\",\n+                )\n                 .span_label(*cspan, \"`const` because of this\")\n                 .span_label(*aspan, \"`async` because of this\")\n+                .span_label(span, \"\") // Point at the fn header.\n                 .emit();\n         }\n "}, {"sha": "4e59bb507676f27e5e83a58b2f58075a4e2b37fa", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,8 +1,8 @@\n error: functions cannot be both `const` and `async`\n-  --> $DIR/no-const-async.rs:4:1\n+  --> $DIR/no-const-async.rs:4:5\n    |\n LL | pub const async fn x() {}\n-   | ^^^^-----^-----^^^^^^^^^^\n+   | ----^^^^^-^^^^^----------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this"}, {"sha": "75919a1f9913fec53b98dafb91d2e5c383298f26", "filename": "src/test/ui/auto-trait-validation.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-trait-validation.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,20 +1,26 @@\n error[E0567]: auto traits cannot have generic parameters\n-  --> $DIR/auto-trait-validation.rs:3:1\n+  --> $DIR/auto-trait-validation.rs:3:20\n    |\n LL | auto trait Generic<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ------- ^ cannot have this generic parameter\n+   |            |\n+   |            auto trait cannot have generic parameters\n \n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/auto-trait-validation.rs:5:1\n+  --> $DIR/auto-trait-validation.rs:5:20\n    |\n LL | auto trait Bound : Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^ cannot have this super trait\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/auto-trait-validation.rs:7:1\n+  --> $DIR/auto-trait-validation.rs:7:25\n    |\n LL | auto trait MyTrait { fn foo() {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -------      ^^^\n+   |            |\n+   |            auto trait cannot have items\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d20bb4bd90726f66d6cf2ce15c6221a5197e4ee2", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -3,8 +3,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    type Output;\n+    type Output; //~ ERROR E0380\n }\n \n fn call_method<T: Trait>(x: T) {}"}, {"sha": "fcd1ecfa98288ff1d43db80a2e7d50b50ce2ed15", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,11 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:5:1\n+  --> $DIR/issue-23080-2.rs:6:10\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     type Output;\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     type Output;\n+   |          ^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<() as Trait>::Output`\n    |"}, {"sha": "fa5c35316bc28d4853fe4868586a435c1fc6d395", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,8 +1,7 @@\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {\n-//~^ ERROR E0380\n-    fn method(&self) {\n+    fn method(&self) { //~ ERROR E0380\n         println!(\"Hello\");\n     }\n }"}, {"sha": "dbb9861b5784a8669a26114a3a13b7113c3c0017", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,13 +1,10 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:3:1\n+  --> $DIR/issue-23080.rs:4:8\n    |\n-LL | / unsafe auto trait Trait {\n-LL | |\n-LL | |     fn method(&self) {\n-LL | |         println!(\"Hello\");\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto trait cannot have items\n+LL |     fn method(&self) {\n+   |        ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d6b36fbb71450ed258c04fa042c687ac93b21920", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -2,7 +2,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:13:5\n    |\n LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n-   |     -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^-^^^^^------------------------------\n    |     |     |\n    |     |     `async` because of this\n    |     `const` because of this\n@@ -45,7 +45,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -88,7 +88,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -97,7 +97,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:46:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^------------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n@@ -160,7 +160,7 @@ error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n-   |         -----^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this"}, {"sha": "03d05f4c928a6716d6f6a5e458bda7d9c7519b43", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:1\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ cannot have this super trait\n+   |            |\n+   |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23"}, {"sha": "45c95b191bd592475f31797fc1825c1ff5e21703", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:1\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:20\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----   ^^^^^ cannot have this super trait\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}, {"sha": "094f5d7dd24f26800c2ac90e246622d0e8f557be", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fba412499e854d6c4cd8e6b22073d5684d549ee/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=6fba412499e854d6c4cd8e6b22073d5684d549ee", "patch": "@@ -1,8 +1,10 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:1\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:19\n    |\n LL | auto trait Magic: Copy {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            -----  ^^^^ cannot have this super trait\n+   |            |\n+   |            auto trait cannot have super traits\n \n error: aborting due to previous error\n "}]}