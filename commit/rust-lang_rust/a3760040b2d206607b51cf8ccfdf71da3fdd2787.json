{"sha": "a3760040b2d206607b51cf8ccfdf71da3fdd2787", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNzYwMDQwYjJkMjA2NjA3YjUxY2Y4Y2NmZGY3MWRhM2ZkZDI3ODc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T13:28:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T13:28:08Z"}, "message": "Disable some prinln!'s", "tree": {"sha": "4de72adceb8fe90c3497a37644689cd1d27cd95a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de72adceb8fe90c3497a37644689cd1d27cd95a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3760040b2d206607b51cf8ccfdf71da3fdd2787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3760040b2d206607b51cf8ccfdf71da3fdd2787", "html_url": "https://github.com/rust-lang/rust/commit/a3760040b2d206607b51cf8ccfdf71da3fdd2787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3760040b2d206607b51cf8ccfdf71da3fdd2787/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3f2ba49f0166f0a5ccfd1c7a3c439c79fe3686", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3f2ba49f0166f0a5ccfd1c7a3c439c79fe3686", "html_url": "https://github.com/rust-lang/rust/commit/7d3f2ba49f0166f0a5ccfd1c7a3c439c79fe3686"}], "stats": {"total": 43, "additions": 5, "deletions": 38}, "files": [{"sha": "f230e07125cf81ff5b4fa0184ced7bdb99359d87", "filename": "src/abi.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=a3760040b2d206607b51cf8ccfdf71da3fdd2787", "patch": "@@ -55,12 +55,6 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(\n         Abi::Rust => (CallConv::Fast, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n-            println!(\n-                \"rust-call sig: {:?} inputs: {:?} output: {:?}\",\n-                sig,\n-                sig.inputs(),\n-                sig.output()\n-            );\n             assert_eq!(sig.inputs().len(), 2);\n             let extra_args = match sig.inputs().last().unwrap().sty {\n                 ty::TyTuple(ref tupled_arguments) => tupled_arguments,\n@@ -439,11 +433,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             }\n             _ => bug!(\"argument to function with \\\"rust-call\\\" ABI is not a tuple\"),\n         }\n-        println!(\n-            \"{:?} {:?}\",\n-            pack_arg.layout().ty,\n-            args.iter().map(|a| a.layout().ty).collect::<Vec<_>>()\n-        );\n         args\n     } else {\n         args.into_iter()\n@@ -462,7 +451,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     let ret_layout = fx.layout_of(sig.output());\n \n     let output_pass_mode = get_pass_mode(fx.tcx, sig.abi, sig.output(), true);\n-    println!(\"{:?}\", output_pass_mode);\n     let return_ptr = match output_pass_mode {\n         PassMode::NoPass => None,\n         PassMode::ByRef => match destination {"}, {"sha": "48a59a154b6e0fd823a29e27a9272fb2c2794cae", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a3760040b2d206607b51cf8ccfdf71da3fdd2787", "patch": "@@ -771,7 +771,6 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     out_place\n         .place_field(fx, mir::Field::new(0))\n         .write_cvalue(fx, res);\n-    println!(\"abc\");\n     out_place\n         .place_field(fx, mir::Field::new(1))\n         .write_cvalue(fx, has_overflow);"}, {"sha": "c2542f8bc1beb4b97af13c170d6ef9c771e49dc8", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a3760040b2d206607b51cf8ccfdf71da3fdd2787", "patch": "@@ -23,9 +23,9 @@ impl ConstantCx {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         module: &mut Module<B>,\n     ) {\n-        println!(\"todo {:?}\", self.todo);\n+        //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n-        println!(\"done {:?}\", self.done);\n+        //println!(\"done {:?}\", self.done);\n         for data_id in self.done.drain() {\n             module.finalize_data(data_id);\n         }\n@@ -159,13 +159,13 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n     while let Some(todo_item) = pop_set(&mut cx.todo) {\n         let (data_id, alloc) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n-                println!(\"alloc_id {}\", alloc_id);\n+                //println!(\"alloc_id {}\", alloc_id);\n                 let data_id = data_id_for_alloc_id(module, alloc_id);\n                 let alloc = memory.get(alloc_id).unwrap();\n                 (data_id, alloc)\n             }\n             TodoItem::Static(def_id) => {\n-                println!(\"static {:?}\", def_id);\n+                //println!(\"static {:?}\", def_id);\n                 let instance = ty::Instance::mono(tcx, def_id);\n                 let cid = GlobalId {\n                     instance,\n@@ -183,7 +183,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             }\n         };\n \n-        println!(\"data_id {}\", data_id);\n+        //(\"data_id {}\", data_id);\n         if cx.done.contains(&data_id) {\n             continue;\n         }"}, {"sha": "2653300c7b248675fb121944fced69f540b68c0e", "filename": "src/metadata.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3760040b2d206607b51cf8ccfdf71da3fdd2787/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=a3760040b2d206607b51cf8ccfdf71da3fdd2787", "patch": "@@ -36,26 +36,6 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         _target: &::rustc_target::spec::Target,\n         _path: &Path,\n     ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n-        //use goblin::Object;\n-\n-        //let buffer = ::std::fs::read(path).map_err(|e|format!(\"{:?}\", e))?;\n-        /*match Object::parse(&buffer).map_err(|e|format!(\"{:?}\", e))? {\n-            Object::Elf(elf) => {\n-                println!(\"elf: {:#?}\", &elf);\n-            },\n-            Object::PE(pe) => {\n-                println!(\"pe: {:#?}\", &pe);\n-            },\n-            Object::Mach(mach) => {\n-                println!(\"mach: {:#?}\", &mach);\n-            },\n-            Object::Archive(archive) => {\n-                return Err(format!(\"archive: {:#?}\", &archive));\n-            },\n-            Object::Unknown(magic) => {\n-                return Err(format!(\"unknown magic: {:#x}\", magic))\n-            }\n-        }*/\n         Err(\"dylib metadata loading is not yet supported\".to_string())\n     }\n }"}]}