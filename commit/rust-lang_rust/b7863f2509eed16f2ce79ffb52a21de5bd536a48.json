{"sha": "b7863f2509eed16f2ce79ffb52a21de5bd536a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODYzZjI1MDllZWQxNmYyY2U3OWZmYjUyYTIxZGU1YmQ1MzZhNDg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-08T19:04:23Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:36:33Z"}, "message": "Add gettimeofday shim for macOS", "tree": {"sha": "3fd2c75dc957b6e4e12465c16af26fe7e4255900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd2c75dc957b6e4e12465c16af26fe7e4255900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7863f2509eed16f2ce79ffb52a21de5bd536a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7863f2509eed16f2ce79ffb52a21de5bd536a48", "html_url": "https://github.com/rust-lang/rust/commit/b7863f2509eed16f2ce79ffb52a21de5bd536a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7863f2509eed16f2ce79ffb52a21de5bd536a48/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6df8504f477faafe1c91e0c7fa83a63e31a825", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6df8504f477faafe1c91e0c7fa83a63e31a825", "html_url": "https://github.com/rust-lang/rust/commit/7a6df8504f477faafe1c91e0c7fa83a63e31a825"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "656cb01010204bd9ed6abec318c89701c78ba71c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b7863f2509eed16f2ce79ffb52a21de5bd536a48/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7863f2509eed16f2ce79ffb52a21de5bd536a48/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b7863f2509eed16f2ce79ffb52a21de5bd536a48", "patch": "@@ -559,6 +559,58 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n+            \"gettimeofday\" => {\n+                if !this.machine.communicate {\n+                    throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n+                } else {\n+                    let tcx = &{ this.tcx.tcx };\n+\n+                    let tz = this.read_scalar(args[1])?.not_undef()?;\n+                    // Using tz is obsolete and should always be null\n+                    if !this.is_null(tz)? {\n+                        let einval = this.eval_libc(\"EINVAL\")?;\n+                        this.set_last_error(einval)?;\n+                        this.write_scalar(Scalar::from_int(-1i32, dest.layout.size), dest)?;\n+                    } else {\n+                        let tv = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n+\n+                        let time_t = this.resolve_path(&[\"libc\", \"time_t\"])?.ty(*tcx);\n+                        let suseconds_t = this.resolve_path(&[\"libc\", \"suseconds_t\"])?.ty(*tcx);\n+\n+                        let tv_sec_size = this.layout_of(time_t)?.size;\n+                        let tv_usec_size = this.layout_of(suseconds_t)?.size;\n+\n+                        let allocation = this.memory_mut().get_mut(tv.alloc_id)?;\n+\n+                        let mut sign = 1;\n+\n+                        let duration = std::time::SystemTime::now()\n+                            .duration_since(std::time::SystemTime::UNIX_EPOCH)\n+                            .unwrap_or_else(|e| {\n+                                sign = -1;\n+                                e.duration()\n+                            });\n+\n+                        allocation.write_scalar(\n+                            tcx,\n+                            tv,\n+                            Scalar::from_int(sign * (duration.as_secs() as i64), tv_sec_size)\n+                                .into(),\n+                            tv_sec_size,\n+                        )?;\n+\n+                        allocation.write_scalar(\n+                            tcx,\n+                            tv.offset(tv_sec_size, tcx)?,\n+                            Scalar::from_int(duration.subsec_micros() as i64, tv_usec_size).into(),\n+                            tv_usec_size,\n+                        )?;\n+\n+                        this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n+                    }\n+                }\n+            }\n+\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory().read_c_str(ptr)?.len();"}]}