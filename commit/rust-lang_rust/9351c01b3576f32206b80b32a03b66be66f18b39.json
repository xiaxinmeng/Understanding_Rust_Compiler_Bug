{"sha": "9351c01b3576f32206b80b32a03b66be66f18b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNTFjMDFiMzU3NmYzMjIwNmI4MGIzMmEwM2I2NmJlNjZmMThiMzk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-09T12:34:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-11T15:01:34Z"}, "message": "rustdoc: fix fallout from removing ast::Sigil.", "tree": {"sha": "685860cbd7640661fdb7fe1726c20f6ad0d0a44b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/685860cbd7640661fdb7fe1726c20f6ad0d0a44b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9351c01b3576f32206b80b32a03b66be66f18b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9351c01b3576f32206b80b32a03b66be66f18b39", "html_url": "https://github.com/rust-lang/rust/commit/9351c01b3576f32206b80b32a03b66be66f18b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9351c01b3576f32206b80b32a03b66be66f18b39/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac532686f0134d28602fdb01d7fe128bc2f498e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac532686f0134d28602fdb01d7fe128bc2f498e", "html_url": "https://github.com/rust-lang/rust/commit/0ac532686f0134d28602fdb01d7fe128bc2f498e"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "32a61fcca07f59d1e6713168da3c2664ac2bb403", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9351c01b3576f32206b80b32a03b66be66f18b39/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9351c01b3576f32206b80b32a03b66be66f18b39/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=9351c01b3576f32206b80b32a03b66be66f18b39", "patch": "@@ -474,8 +474,6 @@ impl Clean<Item> for doctree::Function {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ClosureDecl {\n-    pub sigil: ast::Sigil,\n-    pub region: Option<Lifetime>,\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n     pub onceness: ast::Onceness,\n@@ -486,8 +484,6 @@ pub struct ClosureDecl {\n impl Clean<ClosureDecl> for ast::ClosureTy {\n     fn clean(&self) -> ClosureDecl {\n         ClosureDecl {\n-            sigil: self.sigil,\n-            region: self.region.clean(),\n             lifetimes: self.lifetimes.clean().move_iter().collect(),\n             decl: self.decl.clean(),\n             onceness: self.onceness,\n@@ -652,7 +648,8 @@ pub enum Type {\n     Self(ast::NodeId),\n     /// Primitives are just the fixed-size numeric types (plus int/uint/float), and char.\n     Primitive(ast::PrimTy),\n-    Closure(~ClosureDecl),\n+    Closure(~ClosureDecl, Option<Lifetime>),\n+    Proc(~ClosureDecl),\n     /// extern \"ABI\" fn\n     BareFunction(~BareFunctionDecl),\n     Tuple(Vec<Type> ),\n@@ -706,7 +703,8 @@ impl Clean<Type> for ast::Ty {\n                              tpbs.clean().map(|x| x.move_iter().collect()),\n                              id)\n             }\n-            TyClosure(ref c) => Closure(~c.clean()),\n+            TyClosure(ref c, region) => Closure(~c.clean(), region.clean()),\n+            TyProc(ref c) => Proc(~c.clean()),\n             TyBareFn(ref barefn) => BareFunction(~barefn.clean()),\n             TyBot => Bottom,\n             ref x => fail!(\"Unimplemented type {:?}\", x),"}, {"sha": "66edbf82017e8d951462f4bd0b5bff7a53c20b30", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9351c01b3576f32206b80b32a03b66be66f18b39/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9351c01b3576f32206b80b32a03b66be66f18b39/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9351c01b3576f32206b80b32a03b66be66f18b39", "patch": "@@ -337,19 +337,24 @@ impl fmt::Show for clean::Type {\n                 };\n                 f.buf.write(s.as_bytes())\n             }\n-            clean::Closure(ref decl) => {\n-                let region = match decl.region {\n+            clean::Closure(ref decl, ref region) => {\n+                let region = match *region {\n                     Some(ref region) => format!(\"{} \", *region),\n                     None => ~\"\",\n                 };\n \n-                write!(f.buf, \"{}{}{arrow, select, yes{ -&gt; {ret}} other{}}\",\n+                write!(f.buf, \"{}{}|{}|{arrow, select, yes{ -&gt; {ret}} other{}}\",\n                        FnStyleSpace(decl.fn_style),\n-                       match decl.sigil {\n-                           ast::OwnedSigil => format!(\"proc({})\", decl.decl.inputs),\n-                           ast::BorrowedSigil => format!(\"{}|{}|\", region, decl.decl.inputs),\n-                           ast::ManagedSigil => format!(\"@{}fn({})\", region, decl.decl.inputs),\n-                       },\n+                       region,\n+                       decl.decl.inputs,\n+                       arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n+                       ret = decl.decl.output)\n+                // FIXME: where are bounds and lifetimes printed?!\n+            }\n+            clean::Proc(ref decl) => {\n+                write!(f.buf, \"{}proc({}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n+                       FnStyleSpace(decl.fn_style),\n+                       decl.decl.inputs,\n                        arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n                        ret = decl.decl.output)\n                 // FIXME: where are bounds and lifetimes printed?!"}]}