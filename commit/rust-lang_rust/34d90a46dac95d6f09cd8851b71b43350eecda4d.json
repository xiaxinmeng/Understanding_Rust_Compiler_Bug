{"sha": "34d90a46dac95d6f09cd8851b71b43350eecda4d", "node_id": "C_kwDOAAsO6NoAKDM0ZDkwYTQ2ZGFjOTVkNmYwOWNkODg1MWI3MWI0MzM1MGVlY2RhNGQ", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-14T22:44:30Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-14T22:44:30Z"}, "message": "Fix line numbers for MIR inlined code\n\n`should_collapse_debuginfo` detects if the specified span is part of a\nmacro expansion however it does this by checking if the span is anything\nother than a normal (non-expanded) kind, then the span sequence is\nwalked backwards to the root span.\n\nThis doesn't work when the MIR inliner inlines code as it creates spans\nwith expansion information set to `ExprKind::Inlined` and results in the\nline number being attributed to the inline callsite rather than the\nnormal line number of the inlined code.", "tree": {"sha": "6ad3214cee7e870e3e2d02e7e54a8f78f2e0a146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad3214cee7e870e3e2d02e7e54a8f78f2e0a146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d90a46dac95d6f09cd8851b71b43350eecda4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d90a46dac95d6f09cd8851b71b43350eecda4d", "html_url": "https://github.com/rust-lang/rust/commit/34d90a46dac95d6f09cd8851b71b43350eecda4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d90a46dac95d6f09cd8851b71b43350eecda4d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9363a1401e2d0061c810504c7be169badd5a910b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9363a1401e2d0061c810504c7be169badd5a910b", "html_url": "https://github.com/rust-lang/rust/commit/9363a1401e2d0061c810504c7be169badd5a910b"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "34938ab05cb95b3225b72c259ae9c4284a988cb7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d90a46dac95d6f09cd8851b71b43350eecda4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d90a46dac95d6f09cd8851b71b43350eecda4d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=34d90a46dac95d6f09cd8851b71b43350eecda4d", "patch": "@@ -2522,7 +2522,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             && if self.features().collapse_debuginfo {\n                 span.in_macro_expansion_with_collapse_debuginfo()\n             } else {\n-                span.from_expansion()\n+                // Inlined spans should not be collapsed as that leads to all of the\n+                // inlined code being attributed to the inline callsite.\n+                span.from_expansion() && !span.is_inlined()\n             }\n     }\n "}, {"sha": "ec5491116e87e70c34c102c9d88e39dd916f67ef", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34d90a46dac95d6f09cd8851b71b43350eecda4d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d90a46dac95d6f09cd8851b71b43350eecda4d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=34d90a46dac95d6f09cd8851b71b43350eecda4d", "patch": "@@ -558,7 +558,7 @@ impl Span {\n         self.data_untracked().is_dummy()\n     }\n \n-    /// Returns `true` if this span comes from a macro or desugaring.\n+    /// Returns `true` if this span comes from any kind of macro, desugaring or inlining.\n     #[inline]\n     pub fn from_expansion(self) -> bool {\n         self.ctxt() != SyntaxContext::root()\n@@ -571,6 +571,12 @@ impl Span {\n         matches!(outer_expn.kind, ExpnKind::Macro(..)) && outer_expn.collapse_debuginfo\n     }\n \n+    /// Returns `true` if this span comes from MIR inlining.\n+    pub fn is_inlined(self) -> bool {\n+        let outer_expn = self.ctxt().outer_expn_data();\n+        matches!(outer_expn.kind, ExpnKind::Inlined)\n+    }\n+\n     /// Returns `true` if `span` originates in a derive-macro's expansion.\n     pub fn in_derive_expansion(self) -> bool {\n         matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))"}, {"sha": "19d83f0eee7c472b8b2339560cd029dfc2c4dbe4", "filename": "src/test/codegen/mir-inlined-line-numbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d90a46dac95d6f09cd8851b71b43350eecda4d/src%2Ftest%2Fcodegen%2Fmir-inlined-line-numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d90a46dac95d6f09cd8851b71b43350eecda4d/src%2Ftest%2Fcodegen%2Fmir-inlined-line-numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmir-inlined-line-numbers.rs?ref=34d90a46dac95d6f09cd8851b71b43350eecda4d", "patch": "@@ -20,6 +20,6 @@ pub fn example() {\n \n // CHECK-LABEL: @example\n // CHECK:   tail call void @bar(), !dbg [[DBG_ID:![0-9]+]]\n-// CHECK: [[DBG_ID]] = !DILocation(line: 18, \n+// CHECK: [[DBG_ID]] = !DILocation(line: 7,\n // CHECK-SAME:                     inlinedAt: [[INLINE_ID:![0-9]+]])\n // CHECK: [[INLINE_ID]] = !DILocation(line: 18,"}]}