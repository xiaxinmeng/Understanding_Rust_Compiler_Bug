{"sha": "c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTEwNmUyNTIxNGExNmNiMDFjODdmN2YwMWZkN2M5NWQzNTM0YzI=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T10:50:48Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T10:50:48Z"}, "message": "move unneeded_wildcard_pattern to its own module", "tree": {"sha": "9a92e33afdf3fb3586bcfc38195ff1312177acd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a92e33afdf3fb3586bcfc38195ff1312177acd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "html_url": "https://github.com/rust-lang/rust/commit/c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a106e25214a16cb01c87f7f01fd7c95d3534c2/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cfde058668ddce3a191c0c608ac07603175d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cfde058668ddce3a191c0c608ac07603175d04", "html_url": "https://github.com/rust-lang/rust/commit/52cfde058668ddce3a191c0c608ac07603175d04"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "7d1cd81f49f2a768e0abf558d56bd976017a1d37", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c0a106e25214a16cb01c87f7f01fd7c95d3534c2/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a106e25214a16cb01c87f7f01fd7c95d3534c2/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "patch": "@@ -1,6 +1,7 @@\n mod builtin_type_shadow;\n mod double_neg;\n mod redundant_pattern;\n+mod unneeded_wildcard_pattern;\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n@@ -336,7 +337,7 @@ impl EarlyLintPass for MiscEarlyLints {\n         }\n \n         redundant_pattern::check(cx, pat);\n-        check_unneeded_wildcard_pattern(cx, pat);\n+        unneeded_wildcard_pattern::check(cx, pat);\n     }\n \n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: Span, _: NodeId) {\n@@ -478,48 +479,3 @@ impl MiscEarlyLints {\n         }\n     }\n }\n-\n-fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n-    if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.kind {\n-        fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n-            span_lint_and_sugg(\n-                cx,\n-                UNNEEDED_WILDCARD_PATTERN,\n-                span,\n-                if only_one {\n-                    \"this pattern is unneeded as the `..` pattern can match that element\"\n-                } else {\n-                    \"these patterns are unneeded as the `..` pattern can match those elements\"\n-                },\n-                if only_one { \"remove it\" } else { \"remove them\" },\n-                \"\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-\n-        if let Some(rest_index) = patterns.iter().position(|pat| pat.is_rest()) {\n-            if let Some((left_index, left_pat)) = patterns[..rest_index]\n-                .iter()\n-                .rev()\n-                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n-                .enumerate()\n-                .last()\n-            {\n-                span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n-            }\n-\n-            if let Some((right_index, right_pat)) = patterns[rest_index + 1..]\n-                .iter()\n-                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n-                .enumerate()\n-                .last()\n-            {\n-                span_lint(\n-                    cx,\n-                    patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n-                    right_index == 0,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "4dd032d78f1d55f2651b43114036634c99e5bcf7", "filename": "clippy_lints/src/misc_early/unneeded_wildcard_pattern.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c0a106e25214a16cb01c87f7f01fd7c95d3534c2/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a106e25214a16cb01c87f7f01fd7c95d3534c2/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_wildcard_pattern.rs?ref=c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "patch": "@@ -0,0 +1,52 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::{Pat, PatKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::EarlyContext;\n+use rustc_span::source_map::Span;\n+\n+use super::UNNEEDED_WILDCARD_PATTERN;\n+\n+pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n+    if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.kind {\n+        if let Some(rest_index) = patterns.iter().position(|pat| pat.is_rest()) {\n+            if let Some((left_index, left_pat)) = patterns[..rest_index]\n+                .iter()\n+                .rev()\n+                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n+                .enumerate()\n+                .last()\n+            {\n+                span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n+            }\n+\n+            if let Some((right_index, right_pat)) = patterns[rest_index + 1..]\n+                .iter()\n+                .take_while(|pat| matches!(pat.kind, PatKind::Wild))\n+                .enumerate()\n+                .last()\n+            {\n+                span_lint(\n+                    cx,\n+                    patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n+                    right_index == 0,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n+    span_lint_and_sugg(\n+        cx,\n+        UNNEEDED_WILDCARD_PATTERN,\n+        span,\n+        if only_one {\n+            \"this pattern is unneeded as the `..` pattern can match that element\"\n+        } else {\n+            \"these patterns are unneeded as the `..` pattern can match those elements\"\n+        },\n+        if only_one { \"remove it\" } else { \"remove them\" },\n+        \"\".to_string(),\n+        Applicability::MachineApplicable,\n+    );\n+}"}]}