{"sha": "1d26e6b632c78dedff2dd19d93d0687b2c97717d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjZlNmI2MzJjNzhkZWRmZjJkZDE5ZDkzZDA2ODdiMmM5NzcxN2Q=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-08T16:30:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-11T21:33:40Z"}, "message": "Improve code by removing similar function calls and using loops instead for collecting iterators", "tree": {"sha": "142b4de97309095fbc964e47a8001ff9f2e42c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142b4de97309095fbc964e47a8001ff9f2e42c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d26e6b632c78dedff2dd19d93d0687b2c97717d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d26e6b632c78dedff2dd19d93d0687b2c97717d", "html_url": "https://github.com/rust-lang/rust/commit/1d26e6b632c78dedff2dd19d93d0687b2c97717d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d26e6b632c78dedff2dd19d93d0687b2c97717d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2069d3e13b5254e64c75548e88a549122b118e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2069d3e13b5254e64c75548e88a549122b118e91", "html_url": "https://github.com/rust-lang/rust/commit/2069d3e13b5254e64c75548e88a549122b118e91"}], "stats": {"total": 125, "additions": 49, "deletions": 76}, "files": [{"sha": "82562c3a92dbe833b166b231ed832dce74c9aaef", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 33, "deletions": 59, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1d26e6b632c78dedff2dd19d93d0687b2c97717d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d26e6b632c78dedff2dd19d93d0687b2c97717d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1d26e6b632c78dedff2dd19d93d0687b2c97717d", "patch": "@@ -398,47 +398,42 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n         is_list: bool,\n     ) -> bool {\n+        let tcx = self.tcx;\n+        let err_fn = move |span: Span, msg: &str| {\n+            tcx.sess.span_err(\n+                span,\n+                &format!(\n+                    \"`#[doc(alias{})]` {}\",\n+                    if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    msg,\n+                ),\n+            );\n+            false\n+        };\n         if doc_alias.is_empty() {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\n-                        \"`#[doc(alias{})]` attribute cannot have empty value\",\n-                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n-                    ),\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                \"attribute cannot have empty value\",\n+            );\n         }\n         if let Some(c) =\n             doc_alias.chars().find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n         {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\n-                        \"{:?} character isn't allowed in `#[doc(alias{})]`\",\n-                        c,\n-                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n-                    ),\n-                )\n-                .emit();\n+            self.tcx.sess.span_err(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                &format!(\n+                    \"{:?} character isn't allowed in `#[doc(alias{})]`\",\n+                    c,\n+                    if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                ),\n+            );\n             return false;\n         }\n         if doc_alias.starts_with(' ') || doc_alias.ends_with(' ') {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\n-                        \"`#[doc(alias{})]` cannot start or end with ' '\",\n-                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n-                    ),\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                \"cannot start or end with ' '\",\n+            );\n         }\n         if let Some(err) = match target {\n             Target::Impl => Some(\"implementation block\"),\n@@ -464,32 +459,11 @@ impl CheckAttrVisitor<'tcx> {\n             }\n             _ => None,\n         } {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.span(),\n-                    &format!(\n-                        \"`#[doc(alias{})]` isn't allowed on {}\",\n-                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n-                        err,\n-                    ),\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(meta.span(), &format!(\"isn't allowed on {}\", err));\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n         if &*item_name.as_str() == doc_alias {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.span(),\n-                    &format!(\n-                        \"`#[doc(alias{})]` is the same as the item's name\",\n-                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n-                    ),\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(meta.span(), \"is the same as the item's name\");\n         }\n         true\n     }\n@@ -510,7 +484,7 @@ impl CheckAttrVisitor<'tcx> {\n                                 .sess\n                                 .struct_span_err(\n                                     v.span(),\n-                                    \"`#[doc(alias(\\\"a\\\")]` expects string literals\",\n+                                    \"`#[doc(alias(\\\"a\\\"))]` expects string literals\",\n                                 )\n                                 .emit();\n                             errors += 1;\n@@ -521,7 +495,7 @@ impl CheckAttrVisitor<'tcx> {\n                             .sess\n                             .struct_span_err(\n                                 v.span(),\n-                                \"`#[doc(alias(\\\"a\\\")]` expects string literals\",\n+                                \"`#[doc(alias(\\\"a\\\"))]` expects string literals\",\n                             )\n                             .emit();\n                         errors += 1;\n@@ -537,7 +511,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .struct_span_err(\n                     meta.span(),\n                     \"doc alias attribute expects a string `#[doc(alias = \\\"a\\\")]` or a list of \\\n-                     strings: `#[doc(alias(\\\"a\\\", \\\"b\\\")]`\",\n+                     strings `#[doc(alias(\\\"a\\\", \\\"b\\\"))]`\",\n                 )\n                 .emit();\n             false"}, {"sha": "7608b485c5b80de93370cf0c2e92824deeebfbb5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1d26e6b632c78dedff2dd19d93d0687b2c97717d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d26e6b632c78dedff2dd19d93d0687b2c97717d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1d26e6b632c78dedff2dd19d93d0687b2c97717d", "patch": "@@ -911,24 +911,23 @@ impl Attributes {\n     }\n \n     crate fn get_doc_aliases(&self) -> FxHashSet<String> {\n-        self.other_attrs\n-            .lists(sym::doc)\n-            .filter(|a| a.has_name(sym::alias))\n-            .map(|a| {\n-                if let Some(values) = a.meta_item_list() {\n-                    values\n-                        .iter()\n-                        .map(|l| match l.literal().unwrap().kind {\n-                            ast::LitKind::Str(s, _) => s.as_str().to_string(),\n-                            _ => unreachable!(),\n-                        })\n-                        .collect::<Vec<_>>()\n-                } else {\n-                    vec![a.value_str().map(|s| s.to_string()).unwrap()]\n+        let mut aliases = FxHashSet::default();\n+\n+        for attr in self.other_attrs.lists(sym::doc).filter(|a| a.has_name(sym::alias)) {\n+            if let Some(values) = attr.meta_item_list() {\n+                for l in values {\n+                    match l.literal().unwrap().kind {\n+                        ast::LitKind::Str(s, _) => {\n+                            aliases.insert(s.as_str().to_string());\n+                        }\n+                        _ => unreachable!(),\n+                    }\n                 }\n-            })\n-            .flatten()\n-            .collect::<FxHashSet<_>>()\n+            } else {\n+                aliases.insert(attr.value_str().map(|s| s.to_string()).unwrap());\n+            }\n+        }\n+        aliases\n     }\n }\n "}]}