{"sha": "da143d38e4e47f53c4745a037563f34d7f3ea6e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMTQzZDM4ZTRlNDdmNTNjNDc0NWEwMzc1NjNmMzRkN2YzZWE2ZTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-22T01:20:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T01:20:27Z"}, "message": "Rollup merge of #82554 - SkiFire13:fix-string-retain-unsoundness, r=m-ou-se\n\nFix invalid slice access in String::retain\n\nAs noted in #78499, the previous fix was technically still unsound because it accessed elements of a slice outside its bounds (even though they were still inside the same allocation). This PR addresses that concern by switching to a dropguard approach.", "tree": {"sha": "df67533b7cff66ddb141e8227965e9700c38578b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df67533b7cff66ddb141e8227965e9700c38578b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da143d38e4e47f53c4745a037563f34d7f3ea6e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgV/DbCRBK7hj4Ov3rIwAAdHIIAC7UL9qAEKhNyf1YD7sCFnzS\nOwBa2KMQj3H6r7xtDfkNvJYaJj7KhI5HLUHqvBW1ZYCqj83hxUfAIIcREjHaxYla\n34mP/mD6V4yI5hh96QWZjfRFW+mB4RDNg50MTRYhnDe0Wx98is/AAW2FAiEfp0yq\nqm8r3sLVyoyWO5jbK7MkXYLAlTDxp7y7w3cNkKZ296RNl2HdV9CAVJiP7RYNWdkt\nwcbWpLLCY69e8X9G+upeZkV+lWPODGpZFvDIaBjMN9UPJdY/Z403hzTQpfyMwNn+\ncb9MeARb4tOIvnh7mmX1Niwoiu+YXSQF4b+mJNgTx3Db9IBt0a5ByFcRc5c47Yk=\n=5DDa\n-----END PGP SIGNATURE-----\n", "payload": "tree df67533b7cff66ddb141e8227965e9700c38578b\nparent 29a53e6e69d5684a598770652e9c170dd4d149d8\nparent c89e64363ba25a4bf487d71a4ad6e9a8cbe40384\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616376027 +0100\ncommitter GitHub <noreply@github.com> 1616376027 +0100\n\nRollup merge of #82554 - SkiFire13:fix-string-retain-unsoundness, r=m-ou-se\n\nFix invalid slice access in String::retain\n\nAs noted in #78499, the previous fix was technically still unsound because it accessed elements of a slice outside its bounds (even though they were still inside the same allocation). This PR addresses that concern by switching to a dropguard approach.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da143d38e4e47f53c4745a037563f34d7f3ea6e3", "html_url": "https://github.com/rust-lang/rust/commit/da143d38e4e47f53c4745a037563f34d7f3ea6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da143d38e4e47f53c4745a037563f34d7f3ea6e3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a53e6e69d5684a598770652e9c170dd4d149d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a53e6e69d5684a598770652e9c170dd4d149d8", "html_url": "https://github.com/rust-lang/rust/commit/29a53e6e69d5684a598770652e9c170dd4d149d8"}, {"sha": "c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384", "html_url": "https://github.com/rust-lang/rust/commit/c89e64363ba25a4bf487d71a4ad6e9a8cbe40384"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "f4ec4a36ffd2bac8b5e99a12481bbdff21c53a64", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/da143d38e4e47f53c4745a037563f34d7f3ea6e3/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da143d38e4e47f53c4745a037563f34d7f3ea6e3/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=da143d38e4e47f53c4745a037563f34d7f3ea6e3", "patch": "@@ -1289,37 +1289,44 @@ impl String {\n     where\n         F: FnMut(char) -> bool,\n     {\n-        let len = self.len();\n-        let mut del_bytes = 0;\n-        let mut idx = 0;\n+        struct SetLenOnDrop<'a> {\n+            s: &'a mut String,\n+            idx: usize,\n+            del_bytes: usize,\n+        }\n \n-        unsafe {\n-            self.vec.set_len(0);\n+        impl<'a> Drop for SetLenOnDrop<'a> {\n+            fn drop(&mut self) {\n+                let new_len = self.idx - self.del_bytes;\n+                debug_assert!(new_len <= self.s.len());\n+                unsafe { self.s.vec.set_len(new_len) };\n+            }\n         }\n \n-        while idx < len {\n-            let ch = unsafe { self.get_unchecked(idx..len).chars().next().unwrap() };\n+        let len = self.len();\n+        let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };\n+\n+        while guard.idx < len {\n+            let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };\n             let ch_len = ch.len_utf8();\n \n             if !f(ch) {\n-                del_bytes += ch_len;\n-            } else if del_bytes > 0 {\n+                guard.del_bytes += ch_len;\n+            } else if guard.del_bytes > 0 {\n                 unsafe {\n                     ptr::copy(\n-                        self.vec.as_ptr().add(idx),\n-                        self.vec.as_mut_ptr().add(idx - del_bytes),\n+                        guard.s.vec.as_ptr().add(guard.idx),\n+                        guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),\n                         ch_len,\n                     );\n                 }\n             }\n \n             // Point idx to the next char\n-            idx += ch_len;\n+            guard.idx += ch_len;\n         }\n \n-        unsafe {\n-            self.vec.set_len(len - del_bytes);\n-        }\n+        drop(guard);\n     }\n \n     /// Inserts a character into this `String` at a byte position."}]}