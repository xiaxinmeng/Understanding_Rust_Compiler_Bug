{"sha": "3c1de96cda33e9547adda14dc66294752c99e4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMWRlOTZjZGEzM2U5NTQ3YWRkYTE0ZGM2NjI5NDc1MmM5OWU0YzM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-31T21:37:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-31T21:37:44Z"}, "message": "rustc: Use the crate index to look up defs", "tree": {"sha": "63d8743667358697013299ba452f412f48c658f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d8743667358697013299ba452f412f48c658f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1de96cda33e9547adda14dc66294752c99e4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1de96cda33e9547adda14dc66294752c99e4c3", "html_url": "https://github.com/rust-lang/rust/commit/3c1de96cda33e9547adda14dc66294752c99e4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1de96cda33e9547adda14dc66294752c99e4c3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56", "html_url": "https://github.com/rust-lang/rust/commit/ef0c903f6a25cd9d8c900fbde336d4a4a5b43c56"}], "stats": {"total": 87, "additions": 58, "deletions": 29}, "files": [{"sha": "d95e4523b5a0798c5810fecc9aba4b64f49d87a5", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=3c1de96cda33e9547adda14dc66294752c99e4c3", "patch": "@@ -328,43 +328,40 @@ impure fn resolve_path(vec[ast.ident] path, vec[u8] data) -> resolve_result {\n }\n \n impure fn move_to_item(&ebml.reader ebml_r, int item_id) {\n-    while (ebml.bytes_left(ebml_r) > 0u) {\n-        auto outer_ebml_tag = ebml.peek(ebml_r);\n-        if (outer_ebml_tag.id == metadata.tag_items) {\n-            ebml.move_to_first_child(ebml_r);\n-\n-            while (ebml.bytes_left(ebml_r) > 0u) {\n-                auto inner_ebml_tag = ebml.peek(ebml_r);\n-                if (inner_ebml_tag.id == metadata.tag_items_data_item) {\n-                    ebml.move_to_first_child(ebml_r);\n+    ebml.move_to_sibling_with_id(ebml_r, metadata.tag_items);\n+    ebml.move_to_child_with_id(ebml_r, metadata.tag_items_index);\n+    ebml.move_to_child_with_id(ebml_r, metadata.tag_items_index_table);\n+    ebml.move_to_first_child(ebml_r);\n \n-                    while (ebml.bytes_left(ebml_r) > 0u) {\n-                        auto innermost_ebml_tag = ebml.peek(ebml_r);\n-                        if (innermost_ebml_tag.id == metadata.tag_def_id) {\n-                            ebml.move_to_first_child(ebml_r);\n-                            auto did_data = ebml.read_data(ebml_r);\n-                            ebml.move_to_parent(ebml_r);\n+    // Move to the bucket.\n+    auto bucket_index = metadata.hash_def_num(item_id) % 256u;\n+    auto buf_reader = ebml_r.reader.get_buf_reader();\n+    buf_reader.seek((bucket_index * 4u) as int, io.seek_cur);\n+    auto bucket_pos = ebml_r.reader.read_be_uint(4u);\n+    ebml.reset_reader(ebml_r, bucket_pos);\n \n-                            auto this_did = parse_def_id(did_data);\n-                            if (this_did._1 == item_id) {\n-                                // Move to the start of this item's data.\n-                                ebml.move_to_parent(ebml_r);\n-                                ebml.move_to_first_child(ebml_r);\n-                                ret;\n-                            }\n-                        }\n-                        ebml.move_to_next_sibling(ebml_r);\n-                    }\n-                    ebml.move_to_parent(ebml_r);\n-                }\n-                ebml.move_to_next_sibling(ebml_r);\n+    // Search to find the item ID in the bucket.\n+    check (ebml.peek(ebml_r).id == metadata.tag_items_index_buckets_bucket);\n+    ebml.move_to_first_child(ebml_r);\n+    while (ebml.bytes_left(ebml_r) > 0u) {\n+        if (ebml.peek(ebml_r).id ==\n+                metadata.tag_items_index_buckets_bucket_elt) {\n+            ebml.move_to_first_child(ebml_r);\n+            auto pos = ebml_r.reader.read_be_uint(4u);\n+            auto this_item_id = ebml_r.reader.read_be_uint(4u) as int;\n+            if (item_id == this_item_id) {\n+                // Found the item. Move to its data and return.\n+                ebml.reset_reader(ebml_r, pos);\n+                check (ebml.peek(ebml_r).id == metadata.tag_items_data_item);\n+                ebml.move_to_first_child(ebml_r);\n+                ret;\n             }\n             ebml.move_to_parent(ebml_r);\n         }\n         ebml.move_to_next_sibling(ebml_r);\n     }\n \n-    log #fmt(\"move_to_item: item not found: %d\", item_id);\n+    log #fmt(\"item %d not found in bucket at pos %u\", item_id, bucket_pos);\n     fail;\n }\n "}, {"sha": "8ed249130f24058925956998cdae3a1ee7849f5e", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=3c1de96cda33e9547adda14dc66294752c99e4c3", "patch": "@@ -90,11 +90,32 @@ impure fn move_to_parent(&reader r) {\n     r.reader.seek(st.tag_pos as int, io.seek_set);\n }\n \n+// Moves to the sibling of the current item with the given tag ID.\n+impure fn move_to_sibling_with_id(&reader r, uint tag_id) {\n+    while (peek(r).id != tag_id) {\n+        move_to_next_sibling(r);\n+    }\n+}\n+\n+// Moves to the first child of the current item with the given tag ID.\n+impure fn move_to_child_with_id(&reader r, uint tag_id) {\n+    move_to_first_child(r);\n+    move_to_sibling_with_id(r, tag_id);\n+}\n+\n // Reads the data segment of a tag.\n impure fn read_data(&reader r) -> vec[u8] {\n     ret r.reader.read_bytes(bytes_left(r));\n }\n \n+// Blows away the tag stack and moves the reader to the given byte position.\n+impure fn reset_reader(&reader r, uint pos) {\n+    // FIXME: rustc \"ty_var in trans.type_of\" bug\n+    let vec[ebml_state] states = vec();\n+    r.states = states;\n+    r.reader.seek(pos as int, io.seek_set);\n+}\n+\n impure fn peek(&reader r) -> ebml_tag {\n     check (bytes_left(r) > 0u);\n     auto pos = r.reader.tell();"}, {"sha": "7c6c0970fe86f61568b0385525feed7ea864a13a", "filename": "src/lib/io.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1de96cda33e9547adda14dc66294752c99e4c3/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=3c1de96cda33e9547adda14dc66294752c99e4c3", "patch": "@@ -39,6 +39,7 @@ type reader =\n           impure fn read_c_str() -> str;\n           impure fn read_le_uint(uint size) -> uint;\n           impure fn read_le_int(uint size) -> int;\n+          impure fn read_be_uint(uint size) -> uint;\n \n           impure fn seek(int offset, seek_style whence);\n           impure fn tell() -> uint; // FIXME: eventually u64\n@@ -167,6 +168,16 @@ state obj new_reader(buf_reader rdr) {\n         }\n         ret val as int;\n     }\n+    // FIXME deal with eof?\n+    impure fn read_be_uint(uint size) -> uint {\n+        auto val = 0u;\n+        auto sz = size; // FIXME: trans.ml bug workaround\n+        while (sz > 0u) {\n+            sz -= 1u;\n+            val += (read_byte_from_buf_reader(rdr) as uint) << (sz * 8u);\n+        }\n+        ret val;\n+    }\n     impure fn seek(int offset, seek_style whence) {\n         ret rdr.seek(offset, whence);\n     }"}]}