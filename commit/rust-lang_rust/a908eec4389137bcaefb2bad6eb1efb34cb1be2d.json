{"sha": "a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "node_id": "C_kwDOAAsO6NoAKGE5MDhlZWM0Mzg5MTM3YmNhZWZiMmJhZDZlYjFlZmIzNGNiMWJlMmQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-04T11:11:16Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-12T08:54:21Z"}, "message": "Lift the `Sized` requirement from convenience ptr fns\n\nSince they work on byte pointers (by `.cast::<u8>()`ing them), there is\nno need to know the size of `T` and so there is no need for `T: Sized`.\n\nThe `is_aligned_to` is similar, though it doesn't need the _alignment_\nof `T`.", "tree": {"sha": "4b289c06aad1af59371a2f73acbe7c650762d189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b289c06aad1af59371a2f73acbe7c650762d189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "html_url": "https://github.com/rust-lang/rust/commit/a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a908eec4389137bcaefb2bad6eb1efb34cb1be2d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c91f757ab82b4ccb5bed42927163cca6fbf90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c91f757ab82b4ccb5bed42927163cca6fbf90a", "html_url": "https://github.com/rust-lang/rust/commit/c8c91f757ab82b4ccb5bed42927163cca6fbf90a"}], "stats": {"total": 167, "additions": 89, "deletions": 78}, "files": [{"sha": "0d936eacc51b6dc9054f7d3e57c7370a0ae34e1a", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a908eec4389137bcaefb2bad6eb1efb34cb1be2d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a908eec4389137bcaefb2bad6eb1efb34cb1be2d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "patch": "@@ -462,16 +462,17 @@ impl<T: ?Sized> *const T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [offset][pointer::offset] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_offset(self, count: isize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe { self.cast::<u8>().offset(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -543,15 +544,15 @@ impl<T: ?Sized> *const T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_offset][pointer::wrapping_offset] on it. See that method\n     /// for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_offset(self, count: isize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_offset(count).cast::<T>()\n+    pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n@@ -654,13 +655,13 @@ impl<T: ?Sized> *const T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [offset_from][pointer::offset_from] on it. See that method for\n     /// documentation and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointers,\n+    /// ignoring the metadata.\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }\n@@ -874,16 +875,17 @@ impl<T: ?Sized> *const T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [add][pointer::add] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_add(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        unsafe { self.cast::<u8>().add(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -958,16 +960,17 @@ impl<T: ?Sized> *const T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [sub][pointer::sub] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_sub(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        unsafe { self.cast::<u8>().sub(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n+        from_raw_parts::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1039,15 +1042,15 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_add][pointer::wrapping_add] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_add(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_add(count).cast::<T>()\n+    pub const fn wrapping_byte_add(self, count: usize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1119,15 +1122,15 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_sub][pointer::wrapping_sub] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_sub(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_sub(count).cast::<T>()\n+    pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n+        from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the\n@@ -1303,21 +1306,22 @@ impl<T: ?Sized> *const T {\n \n     /// Returns whether the pointer is aligned to `align`.\n     ///\n+    /// For non-`Sized` pointees this operation considers only the data pointer,\n+    /// ignoring the metadata.\n+    ///\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool\n-    where\n-        T: Sized,\n-    {\n+    pub fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        self.addr() % align == 0\n+        // Cast is needed for `T: !Sized`\n+        self.cast::<u8>().addr() % align == 0\n     }\n }\n "}, {"sha": "d223d76ac3a9bd99c32fce7ff64a2f11b3f1cfaa", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a908eec4389137bcaefb2bad6eb1efb34cb1be2d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a908eec4389137bcaefb2bad6eb1efb34cb1be2d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a908eec4389137bcaefb2bad6eb1efb34cb1be2d", "patch": "@@ -474,16 +474,17 @@ impl<T: ?Sized> *mut T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [offset][pointer::offset] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_offset(self, count: isize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe { self.cast::<u8>().offset(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -554,15 +555,18 @@ impl<T: ?Sized> *mut T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_offset][pointer::wrapping_offset] on it. See that method\n     /// for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_offset(self, count: isize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_offset(count).cast::<T>()\n+    pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n+        from_raw_parts_mut::<T>(\n+            self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n+            metadata(self),\n+        )\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n@@ -830,13 +834,13 @@ impl<T: ?Sized> *mut T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [offset_from][pointer::offset_from] on it. See that method for\n     /// documentation and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation considers only the data pointers,\n+    /// ignoring the metadata.\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n     }\n@@ -983,16 +987,17 @@ impl<T: ?Sized> *mut T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [add][pointer::add] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_add(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        unsafe { self.cast::<u8>().add(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1067,16 +1072,17 @@ impl<T: ?Sized> *mut T {\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [sub][pointer::sub] on it. See that method for documentation\n     /// and safety requirements.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const unsafe fn byte_sub(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        unsafe { self.cast::<u8>().sub(count).cast::<T>() }\n+        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n+        from_raw_parts_mut::<T>(this, metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1148,15 +1154,15 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_add][pointer::wrapping_add] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_add(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_add(count).cast::<T>()\n+    pub const fn wrapping_byte_add(self, count: usize) -> Self {\n+        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1228,15 +1234,15 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This is purely a convenience for casting to a `u8` pointer and\n     /// using [wrapping_sub][pointer::wrapping_sub] on it. See that method for documentation.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"none\")]\n-    pub const fn wrapping_byte_sub(self, count: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n-        self.cast::<u8>().wrapping_sub(count).cast::<T>()\n+    pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n+        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the\n@@ -1569,21 +1575,22 @@ impl<T: ?Sized> *mut T {\n \n     /// Returns whether the pointer is aligned to `align`.\n     ///\n+    /// For non-`Sized` pointees this operation considers only the data pointer,\n+    /// ignoring the metadata.\n+    ///\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"none\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool\n-    where\n-        T: Sized,\n-    {\n+    pub fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        self.addr() % align == 0\n+        // Cast is needed for `T: !Sized`\n+        self.cast::<u8>().addr() % align == 0\n     }\n }\n "}]}