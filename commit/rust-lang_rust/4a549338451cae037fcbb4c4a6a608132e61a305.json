{"sha": "4a549338451cae037fcbb4c4a6a608132e61a305", "node_id": "C_kwDOAAsO6NoAKDRhNTQ5MzM4NDUxY2FlMDM3ZmNiYjRjNGE2YTYwODEzMmU2MWEzMDU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-10T20:03:55Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-10T23:08:22Z"}, "message": "Merge dogfood tests\n\nThe two dogfood tests cannot be run concurrently since they use the same\ntarget directory.", "tree": {"sha": "2c57e574a3098ea56bffb3aef3df686dd2e67f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c57e574a3098ea56bffb3aef3df686dd2e67f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a549338451cae037fcbb4c4a6a608132e61a305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a549338451cae037fcbb4c4a6a608132e61a305", "html_url": "https://github.com/rust-lang/rust/commit/4a549338451cae037fcbb4c4a6a608132e61a305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a549338451cae037fcbb4c4a6a608132e61a305/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920e9f0c4b1aa0921d4dd5e22ea727a31dd8e2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/920e9f0c4b1aa0921d4dd5e22ea727a31dd8e2cc", "html_url": "https://github.com/rust-lang/rust/commit/920e9f0c4b1aa0921d4dd5e22ea727a31dd8e2cc"}], "stats": {"total": 49, "additions": 7, "deletions": 42}, "files": [{"sha": "67af9d05bf402473a3cc6d34080872e15c30ec61", "filename": "tests/dogfood.rs", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a549338451cae037fcbb4c4a6a608132e61a305/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a549338451cae037fcbb4c4a6a608132e61a305/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=4a549338451cae037fcbb4c4a6a608132e61a305", "patch": "@@ -9,54 +9,19 @@\n \n use std::path::PathBuf;\n use std::process::Command;\n-use test_utils::{CARGO_CLIPPY_PATH, IS_RUSTC_TEST_SUITE};\n+use test_utils::IS_RUSTC_TEST_SUITE;\n \n mod test_utils;\n \n #[test]\n fn dogfood_clippy() {\n-    // run clippy on itself and fail the test if lint warnings are reported\n-    if IS_RUSTC_TEST_SUITE {\n-        return;\n-    }\n-    let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-\n-    let mut command = Command::new(&*CARGO_CLIPPY_PATH);\n-    command\n-        .current_dir(root_dir)\n-        .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy\")\n-        .arg(\"--all-targets\")\n-        .arg(\"--all-features\")\n-        .arg(\"--\")\n-        .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::pedantic\"])\n-        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n-\n-    // internal lints only exist if we build with the internal feature\n-    if cfg!(feature = \"internal\") {\n-        command.args(&[\"-D\", \"clippy::internal\"]);\n-    }\n-\n-    let output = command.output().unwrap();\n-\n-    println!(\"status: {}\", output.status);\n-    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-    assert!(output.status.success());\n-}\n-\n-#[test]\n-fn dogfood_subprojects() {\n-    // run clippy on remaining subprojects and fail the test if lint warnings are reported\n     if IS_RUSTC_TEST_SUITE {\n         return;\n     }\n \n-    // NOTE: `path_dep` crate is omitted on purpose here\n-    for project in &[\"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n-        run_clippy_for_project(project);\n+    // \"\" is the root package\n+    for package in &[\"\", \"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n+        run_clippy_for_package(package);\n     }\n }\n \n@@ -73,7 +38,7 @@ fn run_metadata_collection_lint() {\n \n     // Run collection as is\n     std::env::set_var(\"ENABLE_METADATA_COLLECTION\", \"1\");\n-    run_clippy_for_project(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\");\n \n     // Check if cargo caching got in the way\n     if let Ok(file) = File::open(metadata_output_path) {\n@@ -96,10 +61,10 @@ fn run_metadata_collection_lint() {\n     .unwrap();\n \n     // Running the collection again\n-    run_clippy_for_project(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\");\n }\n \n-fn run_clippy_for_project(project: &str) {\n+fn run_clippy_for_package(project: &str) {\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n     let mut command = Command::new(&*test_utils::CARGO_CLIPPY_PATH);"}]}