{"sha": "ac3bc9cfcc6ac884311f9bed6853e36fd40868f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2JjOWNmY2M2YWM4ODQzMTFmOWJlZDY4NTNlMzZmZDQwODY4ZjQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-19T06:23:29Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-19T08:01:11Z"}, "message": "Fix mod_floor() for uint primitive types", "tree": {"sha": "6f1a6551a97e855cb2bbf924eb203742e374db4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f1a6551a97e855cb2bbf924eb203742e374db4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4", "html_url": "https://github.com/rust-lang/rust/commit/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5", "html_url": "https://github.com/rust-lang/rust/commit/8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "f296c7fc92a86ef15977d0b0acf74045485e3fc7", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3bc9cfcc6ac884311f9bed6853e36fd40868f4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=ac3bc9cfcc6ac884311f9bed6853e36fd40868f4", "patch": "@@ -227,9 +227,9 @@ impl Integer for $T {\n \n     /// Unsigned integer modulo operation. Returns the same result as `rem` (`%`).\n     #[inline]\n-    fn mod_floor(&self, other: &$T) -> $T { *self / *other }\n+    fn mod_floor(&self, other: &$T) -> $T { *self % *other }\n \n-    /// Calculates `div_floor` and `modulo_floor` simultaneously\n+    /// Calculates `div_floor` and `mod_floor` simultaneously\n     #[inline]\n     fn div_mod_floor(&self, other: &$T) -> ($T,$T) {\n         (*self / *other, *self % *other)\n@@ -458,6 +458,19 @@ mod tests {\n         assert_eq!((3 as $T).clamp(&(2 as $T), &(4 as $T)), 3 as $T);\n     }\n \n+    #[test]\n+    fn test_div_mod_floor() {\n+        assert_eq!((10 as $T).div_floor(&(3 as $T)), 3 as $T);\n+        assert_eq!((10 as $T).mod_floor(&(3 as $T)), 1 as $T);\n+        assert_eq!((10 as $T).div_mod_floor(&(3 as $T)), (3 as $T, 1 as $T));\n+        assert_eq!((5 as $T).div_floor(&(5 as $T)), 1 as $T);\n+        assert_eq!((5 as $T).mod_floor(&(5 as $T)), 0 as $T);\n+        assert_eq!((5 as $T).div_mod_floor(&(5 as $T)), (1 as $T, 0 as $T));\n+        assert_eq!((3 as $T).div_floor(&(7 as $T)), 0 as $T);\n+        assert_eq!((3 as $T).mod_floor(&(7 as $T)), 3 as $T);\n+        assert_eq!((3 as $T).div_mod_floor(&(7 as $T)), (0 as $T, 3 as $T));\n+    }\n+\n     #[test]\n     fn test_gcd() {\n         assert_eq!((10 as $T).gcd(&2), 2 as $T);"}]}