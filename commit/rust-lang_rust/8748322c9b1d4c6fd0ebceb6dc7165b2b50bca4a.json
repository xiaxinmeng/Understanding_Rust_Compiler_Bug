{"sha": "8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDgzMjJjOWIxZDRjNmZkMGViY2ViNmRjNzE2NWIyYjUwYmNhNGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-25T02:22:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-20T20:33:43Z"}, "message": "std: Make the generic atomics in `sync::atomics` private\n\nI'm not comfortable exposing public functions that purport to do\natomic operations on arbitrary T.", "tree": {"sha": "7066543b29701cd29cb8a4853abb8a080dd0ca83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7066543b29701cd29cb8a4853abb8a080dd0ca83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "html_url": "https://github.com/rust-lang/rust/commit/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb25c42fc86b52863f8f438893c3856ed3fc51bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb25c42fc86b52863f8f438893c3856ed3fc51bc", "html_url": "https://github.com/rust-lang/rust/commit/eb25c42fc86b52863f8f438893c3856ed3fc51bc"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "5df6fbc4f41a6d962aa44f5106aaa2c56a17c68e", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=8748322c9b1d4c6fd0ebceb6dc7165b2b50bca4a", "patch": "@@ -692,7 +692,7 @@ impl<T> Drop for AtomicOption<T> {\n }\n \n #[inline]\n-pub unsafe fn atomic_store<T>(dst: *mut T, val: T, order:Ordering) {\n+unsafe fn atomic_store<T>(dst: *mut T, val: T, order:Ordering) {\n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n         Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n@@ -701,7 +701,7 @@ pub unsafe fn atomic_store<T>(dst: *mut T, val: T, order:Ordering) {\n }\n \n #[inline]\n-pub unsafe fn atomic_load<T>(dst: *mut T, order:Ordering) -> T {\n+unsafe fn atomic_load<T>(dst: *T, order:Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n         Relaxed => intrinsics::atomic_load_relaxed(dst),\n@@ -710,7 +710,7 @@ pub unsafe fn atomic_load<T>(dst: *mut T, order:Ordering) -> T {\n }\n \n #[inline]\n-pub unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n@@ -722,7 +722,7 @@ pub unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the old value (like __sync_fetch_and_add).\n #[inline]\n-pub unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n@@ -734,7 +734,7 @@ pub unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the old value (like __sync_fetch_and_sub).\n #[inline]\n-pub unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n@@ -745,7 +745,7 @@ pub unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-pub unsafe fn atomic_compare_and_swap<T>(dst: *mut T, old:T, new:T, order: Ordering) -> T {\n+unsafe fn atomic_compare_and_swap<T>(dst: *mut T, old:T, new:T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_cxchg_acq(dst, old, new),\n         Release => intrinsics::atomic_cxchg_rel(dst, old, new),\n@@ -756,7 +756,7 @@ pub unsafe fn atomic_compare_and_swap<T>(dst: *mut T, old:T, new:T, order: Order\n }\n \n #[inline]\n-pub unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_and_acq(dst, val),\n         Release => intrinsics::atomic_and_rel(dst, val),\n@@ -767,7 +767,7 @@ pub unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-pub unsafe fn atomic_nand<T>(dst: &T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_nand_acq(dst, val),\n         Release => intrinsics::atomic_nand_rel(dst, val),\n@@ -779,7 +779,7 @@ pub unsafe fn atomic_nand<T>(dst: &T, val: T, order: Ordering) -> T {\n \n \n #[inline]\n-pub unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_or_acq(dst, val),\n         Release => intrinsics::atomic_or_rel(dst, val),\n@@ -791,7 +791,7 @@ pub unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n \n #[inline]\n-pub unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xor_acq(dst, val),\n         Release => intrinsics::atomic_xor_rel(dst, val),"}]}