{"sha": "1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiM2IyNzNmODAyYTU0NmM2ODFiYmVmNzRmY2IzMTk2YTZiYmMwZWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-19T23:39:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T17:22:24Z"}, "message": "Add a method of manually specifying the crate map\n\nApparently weak linkage and dlopen aren't quite working out for applications\nlike servo on android. There appears to be a bug or two in how android loads\ndynamic libraries and for some reason libservo.so isn't being found.\n\nAs a temporary solution, add an extern \"C\" function to libstd which can be\ncalled if you have a handle to the crate map manually. When crawling the crate\nmap, we then check this manual symbol before falling back to the old solutions.\n\ncc #11731", "tree": {"sha": "80bd1b53a830c5b657cc5c599f2b9fe5d1fbdf08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80bd1b53a830c5b657cc5c599f2b9fe5d1fbdf08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "html_url": "https://github.com/rust-lang/rust/commit/1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a224f4a1144c99cedbff9c0493d57037739d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a224f4a1144c99cedbff9c0493d57037739d35", "html_url": "https://github.com/rust-lang/rust/commit/34a224f4a1144c99cedbff9c0493d57037739d35"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "409b77d1a3f8680105cabe11988b0607e8013878", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cast;\n use cmp::TotalOrd;\n use container::MutableSet;\n use iter::Iterator;\n@@ -35,27 +36,61 @@ pub struct CrateMap<'a> {\n     event_loop_factory: Option<fn() -> ~EventLoop>,\n }\n \n+// When working on android, apparently weak symbols don't work so well for\n+// finding the crate map, and neither does dlopen + dlsym. This is mainly a\n+// problem when integrating a shared library with an existing application.\n+// Standalone binaries do not appear to have this problem. The reasons are a\n+// little mysterious, and more information can be found in #11731.\n+//\n+// For now we provide a way to tell libstd about the crate map manually that's\n+// checked before the normal weak symbol/dlopen paths. In theory this is useful\n+// on other platforms where our dlopen/weak linkage strategy mysteriously fails\n+// but the crate map can be specified manually.\n+static mut MANUALLY_PROVIDED_CRATE_MAP: *CrateMap<'static> =\n+                                                    0 as *CrateMap<'static>;\n+#[no_mangle]\n+#[cfg(not(test))]\n+pub extern fn rust_set_crate_map(map: *CrateMap<'static>) {\n+    unsafe { MANUALLY_PROVIDED_CRATE_MAP = map; }\n+}\n+\n+fn manual_crate_map() -> Option<&'static CrateMap<'static>> {\n+    unsafe {\n+        if MANUALLY_PROVIDED_CRATE_MAP.is_null() {\n+            None\n+        } else {\n+            Some(cast::transmute(MANUALLY_PROVIDED_CRATE_MAP))\n+        }\n+    }\n+}\n+\n #[cfg(not(windows))]\n pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n     extern {\n         #[crate_map]\n         static CRATE_MAP: CrateMap<'static>;\n     }\n \n-    let ptr: (*CrateMap) = &'static CRATE_MAP;\n-    if ptr.is_null() {\n-        return None;\n-    } else {\n-        return Some(&'static CRATE_MAP);\n-    }\n+    manual_crate_map().or_else(|| {\n+        let ptr: (*CrateMap) = &'static CRATE_MAP;\n+        if ptr.is_null() {\n+            None\n+        } else {\n+            Some(&'static CRATE_MAP)\n+        }\n+    })\n }\n \n #[cfg(windows)]\n pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n-    use cast::transmute;\n     use c_str::ToCStr;\n     use unstable::dynamic_lib::dl;\n \n+    match manual_crate_map() {\n+        Some(cm) => return Some(cm),\n+        None => {}\n+    }\n+\n     let sym = unsafe {\n         let module = dl::open_internal();\n         let rust_crate_map_toplevel = if cfg!(target_arch = \"x86\") {\n@@ -74,7 +109,7 @@ pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n         return None;\n     } else {\n         unsafe {\n-            return Some(transmute(sym));\n+            return Some(cast::transmute(sym));\n         }\n     }\n }"}, {"sha": "954f10d3eddfdb36b0aaf77a1b7325a483c0681e", "filename": "src/test/run-make/c-set-crate-map-manually/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2FMakefile?ref=1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs -C gen-crate-map\n+\tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n+\t$(CC) main.c -o $(call RUN,main) -lboot -Wl,-rpath,$(TMPDIR)\n+\tRUST_LOG=boot $(call RUN,main)"}, {"sha": "15b0a9140cf51c12ef1453f94554c68002fe2238", "filename": "src/test/run-make/c-set-crate-map-manually/lib.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Flib.rs?ref=1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_id=\"boot#0.1\"];\n+#[crate_type=\"dylib\"];\n+#[no_uv];\n+\n+extern crate rustuv;\n+extern crate green;\n+\n+use std::rt::crate_map::{CrateMap, rust_set_crate_map};\n+\n+// pull in this symbol from libstd into this crate (for convenience)\n+#[no_mangle]\n+pub static set_crate_map: extern \"C\" fn(*CrateMap<'static>) = rust_set_crate_map;\n+\n+#[no_mangle] // this needs to get called from C\n+pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, proc() {\n+        if log_enabled!(std::logging::DEBUG) { return }\n+        fail!()\n+    })\n+}"}, {"sha": "a69ec7d0c86e573355bfd658dbaff9938edce512", "filename": "src/test/run-make/c-set-crate-map-manually/main.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Fmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/1b3b273f802a546c681bbef74fcb3196a6bbc0ef/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Fmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-set-crate-map-manually%2Fmain.c?ref=1b3b273f802a546c681bbef74fcb3196a6bbc0ef", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this is the rust entry point that we're going to call.\n+int foo(int argc, char *argv[]);\n+\n+extern void (*set_crate_map)(void *map);\n+extern int _rust_crate_map_toplevel;\n+\n+int main(int argc, char *argv[]) {\n+  set_crate_map(&_rust_crate_map_toplevel);\n+  return foo(argc, argv);\n+}"}]}