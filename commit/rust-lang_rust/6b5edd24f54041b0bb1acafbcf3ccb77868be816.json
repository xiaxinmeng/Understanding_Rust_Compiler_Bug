{"sha": "6b5edd24f54041b0bb1acafbcf3ccb77868be816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNWVkZDI0ZjU0MDQxYjBiYjFhY2FmYmNmM2NjYjc3ODY4YmU4MTY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-02T16:16:16Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-02T16:34:57Z"}, "message": "Avoid a needless vector copy in type_of_rust_fn", "tree": {"sha": "3ffec4239421e3e1fcc9c551e6fa12aab2d13fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffec4239421e3e1fcc9c551e6fa12aab2d13fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5edd24f54041b0bb1acafbcf3ccb77868be816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5edd24f54041b0bb1acafbcf3ccb77868be816", "html_url": "https://github.com/rust-lang/rust/commit/6b5edd24f54041b0bb1acafbcf3ccb77868be816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5edd24f54041b0bb1acafbcf3ccb77868be816/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c08e37872da325bb785ee4832f5cc4709c2860", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c08e37872da325bb785ee4832f5cc4709c2860", "html_url": "https://github.com/rust-lang/rust/commit/95c08e37872da325bb785ee4832f5cc4709c2860"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "4359a8d270da260c7283fc320cf2b21be8338fbd", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b5edd24f54041b0bb1acafbcf3ccb77868be816/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5edd24f54041b0bb1acafbcf3ccb77868be816/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=6b5edd24f54041b0bb1acafbcf3ccb77868be816", "patch": "@@ -54,17 +54,11 @@ pub fn type_of_explicit_arg<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-/// Yields the types of the \"real\" arguments for this function. For most\n-/// functions, these are simply the types of the arguments. For functions with\n-/// the `RustCall` ABI, however, this untuples the arguments of the function.\n-pub fn untuple_arguments_if_necessary<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                                inputs: &[Ty<'tcx>],\n-                                                abi: abi::Abi)\n-                                                -> Vec<Ty<'tcx>> {\n-    if abi != abi::RustCall {\n-        return inputs.iter().cloned().collect()\n-    }\n-\n+/// Yields the types of the \"real\" arguments for a function using the `RustCall`\n+/// ABI by untupling the arguments of the function.\n+pub fn untuple_arguments<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                                   inputs: &[Ty<'tcx>])\n+                                   -> Vec<Ty<'tcx>> {\n     if inputs.is_empty() {\n         return Vec::new()\n     }\n@@ -78,7 +72,7 @@ pub fn untuple_arguments_if_necessary<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     match inputs[inputs.len() - 1].sty {\n         ty::TyTuple(ref tupled_arguments) => {\n-            debug!(\"untuple_arguments_if_necessary(): untupling arguments\");\n+            debug!(\"untuple_arguments(): untupling arguments\");\n             for &tupled_argument in tupled_arguments {\n                 result.push(tupled_argument);\n             }\n@@ -108,7 +102,11 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let mut atys: Vec<Type> = Vec::new();\n \n     // First, munge the inputs, if this has the `rust-call` ABI.\n-    let inputs = untuple_arguments_if_necessary(cx, &sig.inputs, abi);\n+    let inputs = &if abi == abi::RustCall {\n+        untuple_arguments(cx, &sig.inputs)\n+    } else {\n+        sig.inputs\n+    };\n \n     // Arg 0: Output pointer.\n     // (if the output type is non-immediate)\n@@ -136,7 +134,7 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     }\n \n     // ... then explicit args.\n-    for input in &inputs {\n+    for input in inputs {\n         let arg_ty = type_of_explicit_arg(cx, input);\n \n         if type_is_fat_ptr(cx.tcx(), input) {"}]}