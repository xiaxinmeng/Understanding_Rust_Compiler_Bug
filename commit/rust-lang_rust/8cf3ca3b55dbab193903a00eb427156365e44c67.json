{"sha": "8cf3ca3b55dbab193903a00eb427156365e44c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjNjYTNiNTVkYmFiMTkzOTAzYTAwZWI0MjcxNTYzNjVlNDRjNjc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T15:43:30Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T15:43:30Z"}, "message": "Make sure by-copy arguments take last-use into account", "tree": {"sha": "51394a65ee7cc806e1607eabcfd6640fdf759c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51394a65ee7cc806e1607eabcfd6640fdf759c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf3ca3b55dbab193903a00eb427156365e44c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf3ca3b55dbab193903a00eb427156365e44c67", "html_url": "https://github.com/rust-lang/rust/commit/8cf3ca3b55dbab193903a00eb427156365e44c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf3ca3b55dbab193903a00eb427156365e44c67/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cccefd8bbf0a8df6074f0c26a451dee876bc31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cccefd8bbf0a8df6074f0c26a451dee876bc31a", "html_url": "https://github.com/rust-lang/rust/commit/1cccefd8bbf0a8df6074f0c26a451dee876bc31a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "78d2577f4ae77c82e2b26589a6e3dad97f5b6300", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cf3ca3b55dbab193903a00eb427156365e44c67/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf3ca3b55dbab193903a00eb427156365e44c67/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8cf3ca3b55dbab193903a00eb427156365e44c67", "patch": "@@ -3621,13 +3621,19 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n         }\n     } else if arg.mode == ast::by_copy {\n         let {bcx: cx, val: alloc} = alloc_ty(bcx, e_ty);\n+        let last_use = ccx.last_uses.contains_key(e.id);\n         bcx = cx;\n         if lv.kind == temporary { revoke_clean(bcx, val); }\n         if lv.kind == owned || !ty::type_is_immediate(ccx.tcx, e_ty) {\n             bcx = memmove_ty(bcx, alloc, val, e_ty);\n+            if last_use && ty::type_needs_drop(ccx.tcx, e_ty) {\n+                bcx = zero_alloca(bcx, val, e_ty);\n+            }\n         } else { Store(bcx, val, alloc); }\n         val = alloc;\n-        if lv.kind != temporary { bcx = take_ty(bcx, val, e_ty); }\n+        if lv.kind != temporary && !last_use {\n+            bcx = take_ty(bcx, val, e_ty);\n+        }\n     } else if ty::type_is_immediate(ccx.tcx, e_ty) && lv.kind != owned {\n         let r = do_spill(bcx, val, e_ty);\n         val = r.val;"}]}