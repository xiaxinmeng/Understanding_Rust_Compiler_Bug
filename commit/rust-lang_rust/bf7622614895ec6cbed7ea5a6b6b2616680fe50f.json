{"sha": "bf7622614895ec6cbed7ea5a6b6b2616680fe50f", "node_id": "C_kwDOAAsO6NoAKGJmNzYyMjYxNDg5NWVjNmNiZWQ3ZWE1YTZiNmIyNjE2NjgwZmU1MGY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-03T20:21:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-03T20:21:55Z"}, "message": "Merge #10916\n\n10916: feat: ide: Convert while let to loop r=Veykril a=rainy-me\n\nclose #10901\n\nCo-authored-by: rainy-me <github@yue.coffee>", "tree": {"sha": "4f3b733bea85d0a581215388ac44db4129db7ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3b733bea85d0a581215388ac44db4129db7ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7622614895ec6cbed7ea5a6b6b2616680fe50f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqnxjCRBK7hj4Ov3rIwAA3hsIADPLSJY85YU8wGGn7VqZ9X7D\nsnVuFc0jYNbwT9ftmfyxpYL8rpXb/5jesXG9L5FPcHXtfu3uNzg4hUE2QKSCoLen\nm8zn5FH9WgtHkl+wirKGPRQo9EEdwXcx7qB+XVZOtX5P3QLIJ5DU1iFI6wxE2sxT\nXDDCHvgHdEV8hF4tWQ+n6iWyJnqSg0YKNmEq4Vx9EF6mO0RFg9GoOFaO/IfkrdrZ\nFq0RcS/wpLTs/DBYVuvuA2bgSHM66Ws+/K93FXPS/3Qg+TdKXN5hmGJ916gobZ8u\nqvwPNEykMAnrq/q9bnEyMi2o6EtpSz5G3NZ2Y1e+lKFo1ycCIilbraBbsu6M+kc=\n=9Mwz\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f3b733bea85d0a581215388ac44db4129db7ec5\nparent 3f3289df2aa44a2f33907e6e2abad75fa9787d01\nparent 79b4e67b4ffdbdb58ad5b02398fd174e929609f8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638562915 +0000\ncommitter GitHub <noreply@github.com> 1638562915 +0000\n\nMerge #10916\n\n10916: feat: ide: Convert while let to loop r=Veykril a=rainy-me\n\nclose #10901\n\nCo-authored-by: rainy-me <github@yue.coffee>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7622614895ec6cbed7ea5a6b6b2616680fe50f", "html_url": "https://github.com/rust-lang/rust/commit/bf7622614895ec6cbed7ea5a6b6b2616680fe50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7622614895ec6cbed7ea5a6b6b2616680fe50f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f3289df2aa44a2f33907e6e2abad75fa9787d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3289df2aa44a2f33907e6e2abad75fa9787d01", "html_url": "https://github.com/rust-lang/rust/commit/3f3289df2aa44a2f33907e6e2abad75fa9787d01"}, {"sha": "79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "html_url": "https://github.com/rust-lang/rust/commit/79b4e67b4ffdbdb58ad5b02398fd174e929609f8"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "2bc64e77a38fab09ee93751d616ab6b1c6240242", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bf7622614895ec6cbed7ea5a6b6b2616680fe50f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7622614895ec6cbed7ea5a6b6b2616680fe50f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=bf7622614895ec6cbed7ea5a6b6b2616680fe50f", "patch": "@@ -39,16 +39,10 @@ use crate::{\n // ```\n pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let while_kw = ctx.find_token_syntax_at_offset(T![while])?;\n-    let while_expr: ast::WhileExpr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n+    let while_expr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n     let while_body = while_expr.loop_body()?;\n-    let cond = while_expr.condition()?;\n-\n-    // Don't handle while let\n-    if cond.pat().is_some() {\n-        return None;\n-    };\n-\n-    let cond_expr = cond.expr()?;\n+    let while_cond = while_expr.condition()?;\n+    let while_cond_expr = while_cond.expr()?;\n \n     let target = while_expr.syntax().text_range();\n     acc.add(\n@@ -58,27 +52,25 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n         |edit| {\n             let while_indent_level = IndentLevel::from_node(while_expr.syntax());\n \n-            let replacement = {\n-                let if_expr = {\n-                    let cond = invert_boolean_expression(cond_expr);\n-                    let then_branch = make::block_expr(\n-                        once(make::expr_stmt(make::expr_break(None)).into()),\n-                        None,\n-                    );\n-\n-                    make::expr_if(make::condition(cond, None), then_branch, None)\n-                };\n-\n-                let if_expr = if_expr.indent(while_indent_level);\n-                let stmts = once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n-\n-                let block_expr = make::block_expr(stmts, while_body.tail_expr());\n-\n-                let block_expr = block_expr.indent(while_indent_level);\n-\n-                make::expr_loop(block_expr)\n+            let break_block =\n+                make::block_expr(once(make::expr_stmt(make::expr_break(None)).into()), None)\n+                    .indent(while_indent_level);\n+            let block_expr = match while_cond.pat() {\n+                Some(_) => {\n+                    let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n+                    let stmts = once(make::expr_stmt(if_expr).into());\n+                    make::block_expr(stmts, None)\n+                }\n+                None => {\n+                    let if_cond = make::condition(invert_boolean_expression(while_cond_expr), None);\n+                    let if_expr = make::expr_if(if_cond, break_block, None);\n+                    let stmts =\n+                        once(make::expr_stmt(if_expr).into()).chain(while_body.statements());\n+                    make::block_expr(stmts, while_body.tail_expr())\n+                }\n             };\n \n+            let replacement = make::expr_loop(block_expr.indent(while_indent_level));\n             edit.replace(target, replacement.syntax().text())\n         },\n     )\n@@ -160,15 +152,26 @@ fn main() {\n     }\n \n     #[test]\n-    fn ignore_while_let() {\n-        check_assist_not_applicable(\n+    fn convert_while_let() {\n+        check_assist(\n             convert_while_to_loop,\n             r#\"\n fn main() {\n     while$0 let Some(_) = foo() {\n         bar();\n     }\n }\n+\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        if let Some(_) = foo() {\n+            bar();\n+        } else {\n+            break;\n+        }\n+    }\n+}\n \"#,\n         );\n     }"}]}