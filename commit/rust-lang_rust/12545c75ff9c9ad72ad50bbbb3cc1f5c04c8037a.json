{"sha": "12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTQ1Yzc1ZmY5YzlhZDcyYWQ1MGJiYmIzY2MxZjVjMDRjODAzN2E=", "commit": {"author": {"name": "Laurent Bonnans", "email": "bonnans.l@gmail.com", "date": "2020-01-04T23:58:41Z"}, "committer": {"name": "Laurent Bonnans", "email": "bonnans.l@gmail.com", "date": "2020-01-05T11:51:57Z"}, "message": "Handle multiple error fix suggestions carefuly\n\nThe existing code seems to assume that substitutions spans are disjoint,\nwhich is not always the case.\n\nIn the example:\n\n    pub trait AAAA {}\n    pub trait B {}\n    pub trait C {}\n    pub type T<P: AAAA + B + C> = P;\n\n, we get three substituions starting from ':' and ending respectively at\nthe end of each trait token.\n\nWith the former offset calculation, this would cause `underline_start` to\neventually become negative before being converted to `usize`...\n\nThe new version may report erroneous results for non perfectly overlapping\nsubstitutions but I don't know if such examples exist. Alternatively, we\ncould detect these cases and trim out overlapping substitutions.", "tree": {"sha": "a19b45122e7fe4d399d14e0ae90584d069c0805d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19b45122e7fe4d399d14e0ae90584d069c0805d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "html_url": "https://github.com/rust-lang/rust/commit/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/comments", "author": {"login": "lbonn", "id": 2680312, "node_id": "MDQ6VXNlcjI2ODAzMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2680312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbonn", "html_url": "https://github.com/lbonn", "followers_url": "https://api.github.com/users/lbonn/followers", "following_url": "https://api.github.com/users/lbonn/following{/other_user}", "gists_url": "https://api.github.com/users/lbonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbonn/subscriptions", "organizations_url": "https://api.github.com/users/lbonn/orgs", "repos_url": "https://api.github.com/users/lbonn/repos", "events_url": "https://api.github.com/users/lbonn/events{/privacy}", "received_events_url": "https://api.github.com/users/lbonn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lbonn", "id": 2680312, "node_id": "MDQ6VXNlcjI2ODAzMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2680312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbonn", "html_url": "https://github.com/lbonn", "followers_url": "https://api.github.com/users/lbonn/followers", "following_url": "https://api.github.com/users/lbonn/following{/other_user}", "gists_url": "https://api.github.com/users/lbonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbonn/subscriptions", "organizations_url": "https://api.github.com/users/lbonn/orgs", "repos_url": "https://api.github.com/users/lbonn/repos", "events_url": "https://api.github.com/users/lbonn/events{/privacy}", "received_events_url": "https://api.github.com/users/lbonn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ce94c69ca510d44087291c311296f6d9ccdf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ce94c69ca510d44087291c311296f6d9ccdf5", "html_url": "https://github.com/rust-lang/rust/commit/760ce94c69ca510d44087291c311296f6d9ccdf5"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "526b4e2971befdf1f4fa6caa2dd68f9542ff5a04", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "patch": "@@ -1530,7 +1530,7 @@ impl EmitterWriter {\n \n             // This offset and the ones below need to be signed to account for replacement code\n             // that is shorter than the original code.\n-            let mut offset: isize = 0;\n+            let mut offsets: Vec<(usize, isize)> = Vec::new();\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n             if show_underline {\n@@ -1550,12 +1550,19 @@ impl EmitterWriter {\n                         .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n                         .sum();\n \n+                    let offset: isize = offsets\n+                        .iter()\n+                        .filter_map(\n+                            |(start, v)| if span_start_pos <= *start { None } else { Some(v) },\n+                        )\n+                        .sum();\n                     let underline_start = (span_start_pos + start) as isize + offset;\n                     let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n+                    assert!(underline_start >= 0 && underline_end >= 0);\n                     for p in underline_start..underline_end {\n                         buffer.putc(\n                             row_num,\n-                            max_line_num_len + 3 + p as usize,\n+                            ((max_line_num_len + 3) as isize + p) as usize,\n                             '^',\n                             Style::UnderlinePrimary,\n                         );\n@@ -1565,7 +1572,7 @@ impl EmitterWriter {\n                         for p in underline_start - 1..underline_start + 1 {\n                             buffer.putc(\n                                 row_num,\n-                                max_line_num_len + 3 + p as usize,\n+                                ((max_line_num_len + 3) as isize + p) as usize,\n                                 '-',\n                                 Style::UnderlineSecondary,\n                             );\n@@ -1582,8 +1589,9 @@ impl EmitterWriter {\n                     // length of the code to be substituted\n                     let snippet_len = span_end_pos as isize - span_start_pos as isize;\n                     // For multiple substitutions, use the position *after* the previous\n-                    // substitutions have happened.\n-                    offset += full_sub_len - snippet_len;\n+                    // substitutions have happened, only when further substitutions are\n+                    // located strictly after.\n+                    offsets.push((span_end_pos, full_sub_len - snippet_len));\n                 }\n                 row_num += 1;\n             }"}, {"sha": "68aadcf60538409728456fbc822deaa49894f445", "filename": "src/test/ui/type/issue-67690-type-alias-bound-diagnostic-crash.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.rs?ref=12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for issue #67690\n+// Rustc endless loop out-of-memory and consequent SIGKILL in generic new type\n+\n+// check-pass\n+pub type T<P: Send + Send + Send> = P;\n+//~^ WARN bounds on generic parameters are not enforced in type aliases\n+\n+fn main() {}"}, {"sha": "37b51b50b964e9f1acc0d0c056b0cffb6b7a6e5a", "filename": "src/test/ui/type/issue-67690-type-alias-bound-diagnostic-crash.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr?ref=12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "patch": "@@ -0,0 +1,12 @@\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/issue-67690-type-alias-bound-diagnostic-crash.rs:5:15\n+   |\n+LL | pub type T<P: Send + Send + Send> = P;\n+   |               ^^^^   ^^^^   ^^^^\n+   |\n+   = note: `#[warn(type_alias_bounds)]` on by default\n+help: the bound will not be checked when the type alias is used, and should be removed\n+   |\n+LL | pub type T<P> = P;\n+   |            --\n+"}, {"sha": "65b79650d4d72495e6b7312fba7e03edb3d3000f", "filename": "src/test/ui/type/type-alias-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs?ref=12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "patch": "@@ -1,6 +1,6 @@\n // Test `ignored_generic_bounds` lint warning about bounds in type aliases.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n use std::rc::Rc;"}, {"sha": "e4d3753f8a59a3a6b3e3c2d606108530dc334787", "filename": "src/test/ui/type/type-alias-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr?ref=12545c75ff9c9ad72ad50bbbb3cc1f5c04c8037a", "patch": "@@ -8,7 +8,7 @@ LL | type SVec<T: Send + Send> = Vec<T>;\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type SVec<T> = Vec<T>;\n-   |     --    --\n+   |           --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:10:21\n@@ -30,7 +30,7 @@ LL | type VVec<'b, 'a: 'b + 'b> = (&'b u32, Vec<&'a i32>);\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type VVec<'b, 'a> = (&'b u32, Vec<&'a i32>);\n-   |            --  --\n+   |                --\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:14:18\n@@ -41,7 +41,7 @@ LL | type WVec<'b, T: 'b + 'b> = (&'b u32, Vec<T>);\n help: the bound will not be checked when the type alias is used, and should be removed\n    |\n LL | type WVec<'b, T> = (&'b u32, Vec<T>);\n-   |           --  --\n+   |               --\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:16:25"}]}