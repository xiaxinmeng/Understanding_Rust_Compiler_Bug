{"sha": "002e9341891c95886b3eb29dfa9be1d50d8096d4", "node_id": "C_kwDOAAsO6NoAKDAwMmU5MzQxODkxYzk1ODg2YjNlYjI5ZGZhOWJlMWQ1MGQ4MDk2ZDQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-26T07:55:52Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-26T07:55:52Z"}, "message": "Don't assume paths work with `fn_sig` in `multiple_unsafe_ops_pre_block`.", "tree": {"sha": "79a3f645051d6ab41cc1f6371f41625163293484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a3f645051d6ab41cc1f6371f41625163293484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002e9341891c95886b3eb29dfa9be1d50d8096d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002e9341891c95886b3eb29dfa9be1d50d8096d4", "html_url": "https://github.com/rust-lang/rust/commit/002e9341891c95886b3eb29dfa9be1d50d8096d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002e9341891c95886b3eb29dfa9be1d50d8096d4/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d193fa17a7df3256d58b841a2df92af1cbdbea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d193fa17a7df3256d58b841a2df92af1cbdbea4", "html_url": "https://github.com/rust-lang/rust/commit/3d193fa17a7df3256d58b841a2df92af1cbdbea4"}], "stats": {"total": 127, "additions": 99, "deletions": 28}, "files": [{"sha": "5418616ded012e921c5073dd28e0e00463bb82cf", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/002e9341891c95886b3eb29dfa9be1d50d8096d4/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002e9341891c95886b3eb29dfa9be1d50d8096d4/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=002e9341891c95886b3eb29dfa9be1d50d8096d4", "patch": "@@ -11,6 +11,7 @@ use rustc_ast::Mutability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -120,33 +121,15 @@ fn collect_unsafe_exprs<'tcx>(\n                 unsafe_ops.push((\"raw pointer dereference occurs here\", expr.span));\n             },\n \n-            ExprKind::Call(path_expr, _) => match path_expr.kind {\n-                ExprKind::Path(QPath::Resolved(\n-                    _,\n-                    hir::Path {\n-                        res: Res::Def(kind, def_id),\n-                        ..\n-                    },\n-                )) if kind.is_fn_like() => {\n-                    let sig = cx.tcx.fn_sig(*def_id);\n-                    if sig.0.unsafety() == Unsafety::Unsafe {\n-                        unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n-                    }\n-                },\n-\n-                ExprKind::Path(QPath::TypeRelative(..)) => {\n-                    if let Some(sig) = cx\n-                        .typeck_results()\n-                        .type_dependent_def_id(path_expr.hir_id)\n-                        .map(|def_id| cx.tcx.fn_sig(def_id))\n-                    {\n-                        if sig.0.unsafety() == Unsafety::Unsafe {\n-                            unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n-                        }\n-                    }\n-                },\n-\n-                _ => {},\n+            ExprKind::Call(path_expr, _) => {\n+                let sig = match *cx.typeck_results().expr_ty(path_expr).kind() {\n+                    ty::FnDef(id, _) => cx.tcx.fn_sig(id).skip_binder(),\n+                    ty::FnPtr(sig) => sig,\n+                    _ => return Continue(Descend::Yes),\n+                };\n+                if sig.unsafety() == Unsafety::Unsafe {\n+                    unsafe_ops.push((\"unsafe function call occurs here\", expr.span));\n+                }\n             },\n \n             ExprKind::MethodCall(..) => {"}, {"sha": "5073685c9f067728cada5ccb531e13fc65a98a94", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/002e9341891c95886b3eb29dfa9be1d50d8096d4/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002e9341891c95886b3eb29dfa9be1d50d8096d4/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=002e9341891c95886b3eb29dfa9be1d50d8096d4", "patch": "@@ -116,4 +116,32 @@ fn issue10259() {\n     unsafe_macro!();\n }\n \n+fn _fn_ptr(x: unsafe fn()) {\n+    unsafe {\n+        x();\n+        x();\n+    }\n+}\n+\n+fn _assoc_const() {\n+    trait X {\n+        const X: unsafe fn();\n+    }\n+    fn _f<T: X>() {\n+        unsafe {\n+            T::X();\n+            T::X();\n+        }\n+    }\n+}\n+\n+fn _field_fn_ptr(x: unsafe fn()) {\n+    struct X(unsafe fn());\n+    let x = X(x);\n+    unsafe {\n+        x.0();\n+        x.0();\n+    }\n+}\n+\n fn main() {}"}, {"sha": "e0c1d3801f7cf2568e0312ae7d44fe7f0f668a67", "filename": "tests/ui/multiple_unsafe_ops_per_block.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/002e9341891c95886b3eb29dfa9be1d50d8096d4/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/002e9341891c95886b3eb29dfa9be1d50d8096d4/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.stderr?ref=002e9341891c95886b3eb29dfa9be1d50d8096d4", "patch": "@@ -125,5 +125,65 @@ note: raw pointer dereference occurs here\n LL |     unsafe { char::from_u32_unchecked(*ptr.cast::<u32>()) }\n    |                                       ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:120:5\n+   |\n+LL | /     unsafe {\n+LL | |         x();\n+LL | |         x();\n+LL | |     }\n+   | |_____^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:121:9\n+   |\n+LL |         x();\n+   |         ^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:122:9\n+   |\n+LL |         x();\n+   |         ^^^\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:131:9\n+   |\n+LL | /         unsafe {\n+LL | |             T::X();\n+LL | |             T::X();\n+LL | |         }\n+   | |_________^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:132:13\n+   |\n+LL |             T::X();\n+   |             ^^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:133:13\n+   |\n+LL |             T::X();\n+   |             ^^^^^^\n+\n+error: this `unsafe` block contains 2 unsafe operations, expected only one\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:141:5\n+   |\n+LL | /     unsafe {\n+LL | |         x.0();\n+LL | |         x.0();\n+LL | |     }\n+   | |_____^\n+   |\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:142:9\n+   |\n+LL |         x.0();\n+   |         ^^^^^\n+note: unsafe function call occurs here\n+  --> $DIR/multiple_unsafe_ops_per_block.rs:143:9\n+   |\n+LL |         x.0();\n+   |         ^^^^^\n+\n+error: aborting due to 8 previous errors\n "}]}