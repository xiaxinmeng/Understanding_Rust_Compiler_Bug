{"sha": "218eccfa4e66acb13bbd420564066a22709eb7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOGVjY2ZhNGU2NmFjYjEzYmJkNDIwNTY0MDY2YTIyNzA5ZWI3ZGQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-27T22:29:05Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-28T08:58:22Z"}, "message": "Fix de-deduplication for closure debuginfo\n\nClosure variables represent the closure environment, not the closure\nfunction, so the identifier used to ensure that the debuginfo is unique\nfor each kind of closure needs to be based on the closure upvars and not\nthe function signature.", "tree": {"sha": "539e5533ca276f9fda686b4cac6f1e6b9f62356f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539e5533ca276f9fda686b4cac6f1e6b9f62356f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218eccfa4e66acb13bbd420564066a22709eb7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218eccfa4e66acb13bbd420564066a22709eb7dd", "html_url": "https://github.com/rust-lang/rust/commit/218eccfa4e66acb13bbd420564066a22709eb7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218eccfa4e66acb13bbd420564066a22709eb7dd/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f7fb60a8072fd11f8a496a0f06cdccdb7430e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f7fb60a8072fd11f8a496a0f06cdccdb7430e7", "html_url": "https://github.com/rust-lang/rust/commit/57f7fb60a8072fd11f8a496a0f06cdccdb7430e7"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "77ed07d16161e215a744adcde294a5add47e63cc", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 12, "deletions": 50, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/218eccfa4e66acb13bbd420564066a22709eb7dd/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eccfa4e66acb13bbd420564066a22709eb7dd/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=218eccfa4e66acb13bbd420564066a22709eb7dd", "patch": "@@ -26,7 +26,6 @@ use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n use metadata::csearch;\n use middle::pat_util;\n use middle::subst::{self, Substs};\n-use middle::infer;\n use rustc::ast_map;\n use trans::{type_of, adt, machine, monomorphize};\n use trans::common::{self, CrateContext, FunctionContext, Block};\n@@ -287,12 +286,18 @@ impl<'tcx> TypeMap<'tcx> {\n                     }\n                 }\n             },\n-            ty::TyClosure(def_id, ref substs) => {\n-                let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables);\n-                let closure_ty = infcx.closure_type(def_id, substs);\n-                self.get_unique_type_id_of_closure_type(cx,\n-                                                        closure_ty,\n-                                                        &mut unique_type_id);\n+            ty::TyClosure(_, ref substs) if substs.upvar_tys.is_empty() => {\n+                push_debuginfo_type_name(cx, type_, false, &mut unique_type_id);\n+            },\n+            ty::TyClosure(_, ref substs) => {\n+                unique_type_id.push_str(\"closure \");\n+                for upvar_type in &substs.upvar_tys {\n+                    let upvar_type_id =\n+                        self.get_unique_type_id_of_type(cx, upvar_type);\n+                    let upvar_type_id =\n+                        self.get_unique_type_id_as_string(upvar_type_id);\n+                    unique_type_id.push_str(&upvar_type_id[..]);\n+                }\n             },\n             _ => {\n                 cx.sess().bug(&format!(\"get_unique_type_id_of_type() - unexpected type: {:?}\",\n@@ -361,49 +366,6 @@ impl<'tcx> TypeMap<'tcx> {\n         }\n     }\n \n-    fn get_unique_type_id_of_closure_type<'a>(&mut self,\n-                                              cx: &CrateContext<'a, 'tcx>,\n-                                              closure_ty: ty::ClosureTy<'tcx>,\n-                                              unique_type_id: &mut String) {\n-        let ty::ClosureTy { unsafety,\n-                            ref sig,\n-                            abi: _ } = closure_ty;\n-\n-        if unsafety == ast::Unsafety::Unsafe {\n-            unique_type_id.push_str(\"unsafe \");\n-        }\n-\n-        unique_type_id.push_str(\"|\");\n-\n-        let sig = cx.tcx().erase_late_bound_regions(sig);\n-\n-        for &parameter_type in &sig.inputs {\n-            let parameter_type_id =\n-                self.get_unique_type_id_of_type(cx, parameter_type);\n-            let parameter_type_id =\n-                self.get_unique_type_id_as_string(parameter_type_id);\n-            unique_type_id.push_str(&parameter_type_id[..]);\n-            unique_type_id.push(',');\n-        }\n-\n-        if sig.variadic {\n-            unique_type_id.push_str(\"...\");\n-        }\n-\n-        unique_type_id.push_str(\"|->\");\n-\n-        match sig.output {\n-            ty::FnConverging(ret_ty) => {\n-                let return_type_id = self.get_unique_type_id_of_type(cx, ret_ty);\n-                let return_type_id = self.get_unique_type_id_as_string(return_type_id);\n-                unique_type_id.push_str(&return_type_id[..]);\n-            }\n-            ty::FnDiverging => {\n-                unique_type_id.push_str(\"!\");\n-            }\n-        }\n-    }\n-\n     // Get the UniqueTypeId for an enum variant. Enum variants are not really\n     // types of their own, so they need special handling. We still need a\n     // UniqueTypeId for them, since to debuginfo they *are* real types."}, {"sha": "3b662ae0264fbff85ef9d9f2208754d1fc783c5d", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/218eccfa4e66acb13bbd420564066a22709eb7dd/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/218eccfa4e66acb13bbd420564066a22709eb7dd/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=218eccfa4e66acb13bbd420564066a22709eb7dd", "patch": "@@ -46,6 +46,21 @@\n // gdb-check:type = [...] (*)([...])\n // gdb-command:info functions _yyy\n // gdb-check:[...]![...]_yyy([...]);\n+// gdb-command:ptype closure_0\n+// gdb-check: type = struct closure {\n+// gdb-check:     <no data fields>\n+// gdb-check: }\n+// gdb-command:ptype closure_1\n+// gdb-check: type = struct closure {\n+// gdb-check:     bool *__0;\n+// gdb-check: }\n+// gdb-command:ptype closure_2\n+// gdb-check: type = struct closure {\n+// gdb-check:     bool *__0;\n+// gdb-check:     isize *__1;\n+// gdb-check: }\n+\n+//\n // gdb-command:continue\n \n #![allow(unused_variables)]\n@@ -68,6 +83,9 @@ fn main() {\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n     let fnptr : fn() = _zzz;\n+    let closure_0 = || {};\n+    let closure_1 = || { b; };\n+    let closure_2 = || { if b { i } else { i }; };\n     _zzz(); // #break\n     if 1 == 1 { _yyy(); }\n }"}]}