{"sha": "0d278ca6a887b0adc2b1b852c09f24892b8397b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjc4Y2E2YTg4N2IwYWRjMmIxYjg1MmMwOWYyNDg5MmI4Mzk3YjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-22T15:55:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-22T15:55:57Z"}, "message": "Use FunctionRetTy::Default rather than an explicit TyKind::Infer for lambda-building\n\nThis prevents explicit `-> _` return type annotations for closures generated by `lambda`.", "tree": {"sha": "a7275d0a9cb94241701e125d720798e39c00c5ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7275d0a9cb94241701e125d720798e39c00c5ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d278ca6a887b0adc2b1b852c09f24892b8397b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d278ca6a887b0adc2b1b852c09f24892b8397b4", "html_url": "https://github.com/rust-lang/rust/commit/0d278ca6a887b0adc2b1b852c09f24892b8397b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d278ca6a887b0adc2b1b852c09f24892b8397b4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75af15ee6ca0c12b699a17984b033363cd25e9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af15ee6ca0c12b699a17984b033363cd25e9c3", "html_url": "https://github.com/rust-lang/rust/commit/75af15ee6ca0c12b699a17984b033363cd25e9c3"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "ee38cca7828be0ef486d8f3555d0675ee6b26524", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=0d278ca6a887b0adc2b1b852c09f24892b8397b4", "patch": "@@ -145,7 +145,7 @@ impl<'a> AllocFnFactory<'a> {\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) =\n             self.ret_ty(&method.output, &mut abi_args, mk, result);\n-        let kind = ItemKind::Fn(self.cx.fn_decl(abi_args, output_ty),\n+        let kind = ItemKind::Fn(self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n                                 Unsafety::Unsafe,\n                                 dummy_spanned(Constness::NotConst),\n                                 Abi::Rust,"}, {"sha": "269517e998f5b1fe7dfddc9093725555ed289bf1", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0d278ca6a887b0adc2b1b852c09f24892b8397b4", "patch": "@@ -214,7 +214,7 @@ pub trait AstBuilder {\n \n     fn arg(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::Arg;\n     // FIXME unused self\n-    fn fn_decl(&self, inputs: Vec<ast::Arg> , output: P<ast::Ty>) -> P<ast::FnDecl>;\n+    fn fn_decl(&self, inputs: Vec<ast::Arg> , output: ast::FunctionRetTy) -> P<ast::FnDecl>;\n \n     fn item_fn_poly(&self,\n                     span: Span,\n@@ -924,7 +924,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n               -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n-            self.ty_infer(span));\n+            ast::FunctionRetTy::Default(span));\n \n         // FIXME -- We are using `span` as the span of the `|...|`\n         // part of the lambda, but it probably (maybe?) corresponds to\n@@ -970,10 +970,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     // FIXME unused self\n-    fn fn_decl(&self, inputs: Vec<ast::Arg>, output: P<ast::Ty>) -> P<ast::FnDecl> {\n+    fn fn_decl(&self, inputs: Vec<ast::Arg>, output: ast::FunctionRetTy) -> P<ast::FnDecl> {\n         P(ast::FnDecl {\n             inputs,\n-            output: ast::FunctionRetTy::Ty(output),\n+            output,\n             variadic: false\n         })\n     }\n@@ -1003,7 +1003,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item(span,\n                   name,\n                   Vec::new(),\n-                  ast::ItemKind::Fn(self.fn_decl(inputs, output),\n+                  ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n                               ast::Unsafety::Normal,\n                               dummy_spanned(ast::Constness::NotConst),\n                               Abi::Rust,"}, {"sha": "67d3adc83f2d21d25f49d87d46dc1394e5a8abcb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0d278ca6a887b0adc2b1b852c09f24892b8397b4", "patch": "@@ -547,7 +547,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     // pub fn main() { ... }\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(vec![]));\n     let main_body = ecx.block(sp, vec![call_test_main]);\n-    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], main_ret_ty),\n+    let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n                            ast::Unsafety::Normal,\n                            dummy_spanned(ast::Constness::NotConst),\n                            ::abi::Abi::Rust, ast::Generics::default(), main_body);"}, {"sha": "3935f1722b61525670885e978fa53a15f36b02da", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d278ca6a887b0adc2b1b852c09f24892b8397b4/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0d278ca6a887b0adc2b1b852c09f24892b8397b4", "patch": "@@ -962,7 +962,7 @@ impl<'a> MethodDef<'a> {\n         let ret_type = self.get_ret_ty(cx, trait_, generics, type_ident);\n \n         let method_ident = cx.ident_of(self.name);\n-        let fn_decl = cx.fn_decl(args, ret_type);\n+        let fn_decl = cx.fn_decl(args, ast::FunctionRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n         let unsafety = if self.is_unsafe {"}]}