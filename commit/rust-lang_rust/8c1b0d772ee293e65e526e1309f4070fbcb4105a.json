{"sha": "8c1b0d772ee293e65e526e1309f4070fbcb4105a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMWIwZDc3MmVlMjkzZTY1ZTUyNmUxMzA5ZjQwNzBmYmNiNDEwNWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-17T09:21:10Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:10Z"}, "message": "Simplify defining scope logic", "tree": {"sha": "725e11dc191705d9486a140c0a1b2168d558f015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725e11dc191705d9486a140c0a1b2168d558f015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c1b0d772ee293e65e526e1309f4070fbcb4105a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1b0d772ee293e65e526e1309f4070fbcb4105a", "html_url": "https://github.com/rust-lang/rust/commit/8c1b0d772ee293e65e526e1309f4070fbcb4105a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c1b0d772ee293e65e526e1309f4070fbcb4105a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41b0315f318f208f92a2d4932b41937e06c1fdef", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b0315f318f208f92a2d4932b41937e06c1fdef", "html_url": "https://github.com/rust-lang/rust/commit/41b0315f318f208f92a2d4932b41937e06c1fdef"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "2cb47c7beb53a852973835bfe497d562453ed099", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c1b0d772ee293e65e526e1309f4070fbcb4105a/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1b0d772ee293e65e526e1309f4070fbcb4105a/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=8c1b0d772ee293e65e526e1309f4070fbcb4105a", "patch": "@@ -690,38 +690,35 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n                     // }\n                     // ```\n                     if let Some(anon_node_id) = tcx.hir.as_local_node_id(def_id) {\n-                        let anon_parent_def_id = match tcx.hir.expect_item(anon_node_id).node {\n+                        let in_definition_scope = match tcx.hir.expect_item(anon_node_id).node {\n                             // impl trait\n                             hir::ItemKind::Existential(hir::ExistTy {\n                                 impl_trait_fn: Some(parent),\n                                 ..\n-                            }) => parent,\n+                            }) => parent == self.parent_def_id,\n                             // named existential types\n                             hir::ItemKind::Existential(hir::ExistTy {\n                                 impl_trait_fn: None,\n                                 ..\n-                            }) if may_define_existential_type(\n+                            }) => may_define_existential_type(\n                                 tcx,\n                                 self.parent_def_id,\n                                 anon_node_id,\n-                            ) => {\n-                                return self.fold_anon_ty(ty, def_id, substs);\n-                            },\n+                            ),\n                             _ => {\n                                 let anon_parent_node_id = tcx.hir.get_parent(anon_node_id);\n-                                tcx.hir.local_def_id(anon_parent_node_id)\n+                                self.parent_def_id == tcx.hir.local_def_id(anon_parent_node_id)\n                             },\n                         };\n-                        if self.parent_def_id == anon_parent_def_id {\n+                        if in_definition_scope {\n                             return self.fold_anon_ty(ty, def_id, substs);\n                         }\n \n                         debug!(\n                             \"instantiate_anon_types_in_map: \\\n-                             encountered anon with wrong parent \\\n-                             def_id={:?} \\\n-                             anon_parent_def_id={:?}\",\n-                            def_id, anon_parent_def_id\n+                             encountered anon outside it's definition scope \\\n+                             def_id={:?}\",\n+                            def_id,\n                         );\n                     }\n                 }"}]}