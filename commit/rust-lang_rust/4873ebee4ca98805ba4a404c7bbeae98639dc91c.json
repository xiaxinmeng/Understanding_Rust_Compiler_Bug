{"sha": "4873ebee4ca98805ba4a404c7bbeae98639dc91c", "node_id": "C_kwDOAAsO6NoAKDQ4NzNlYmVlNGNhOTg4MDViYTRhNDA0YzdiYmVhZTk4NjM5ZGM5MWM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-21T05:56:45Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-21T15:04:44Z"}, "message": "Use ZST for fmt unsafety\n\nThis allows the format_args! macro to keep the pre-expansion code out of\nthe unsafe block without doing gymnastics with nested `match`\nexpressions. This reduces codegen.", "tree": {"sha": "db0515d8e6133b9c50b51e42061491669d638280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0515d8e6133b9c50b51e42061491669d638280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4873ebee4ca98805ba4a404c7bbeae98639dc91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4873ebee4ca98805ba4a404c7bbeae98639dc91c", "html_url": "https://github.com/rust-lang/rust/commit/4873ebee4ca98805ba4a404c7bbeae98639dc91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4873ebee4ca98805ba4a404c7bbeae98639dc91c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d37f1091e84cd769eb17af62ee13160087fbf176", "url": "https://api.github.com/repos/rust-lang/rust/commits/d37f1091e84cd769eb17af62ee13160087fbf176", "html_url": "https://github.com/rust-lang/rust/commit/d37f1091e84cd769eb17af62ee13160087fbf176"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "ff55ff35a13432bfb2940c02c6ea1f4825f7eaee", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4873ebee4ca98805ba4a404c7bbeae98639dc91c/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4873ebee4ca98805ba4a404c7bbeae98639dc91c/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=4873ebee4ca98805ba4a404c7bbeae98639dc91c", "patch": "@@ -524,28 +524,12 @@ impl FormatArgsExpn<'tcx> {\n             if let ExpnKind::Macro(_, name) = expr.span.ctxt().outer_expn_data().kind;\n             let name = name.as_str();\n             if name.ends_with(\"format_args\") || name.ends_with(\"format_args_nl\");\n-\n-            if let ExprKind::Match(inner_match, [arm], _) = expr.kind;\n-\n-            // `match match`, if you will\n-            if let ExprKind::Match(args, [inner_arm], _) = inner_match.kind;\n-            if let ExprKind::Tup(value_args) = args.kind;\n-            if let Some(value_args) = value_args\n-                .iter()\n-                .map(|e| match e.kind {\n-                    ExprKind::AddrOf(_, _, e) => Some(e),\n-                    _ => None,\n-                })\n-                .collect();\n-            if let ExprKind::Array(args) = inner_arm.body.kind;\n-\n-            if let ExprKind::Block(Block { stmts: [], expr: Some(expr), .. }, _) = arm.body.kind;\n-            if let ExprKind::Call(_, call_args) = expr.kind;\n-            if let Some((strs_ref, fmt_expr)) = match call_args {\n+            if let ExprKind::Call(_, args) = expr.kind;\n+            if let Some((strs_ref, args, fmt_expr)) = match args {\n                 // Arguments::new_v1\n-                [strs_ref, _] => Some((strs_ref, None)),\n+                [strs_ref, args] => Some((strs_ref, args, None)),\n                 // Arguments::new_v1_formatted\n-                [strs_ref, _, fmt_expr] => Some((strs_ref, Some(fmt_expr))),\n+                [strs_ref, args, fmt_expr, _unsafe_arg] => Some((strs_ref, args, Some(fmt_expr))),\n                 _ => None,\n             };\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, strs_arr) = strs_ref.kind;\n@@ -561,6 +545,17 @@ impl FormatArgsExpn<'tcx> {\n                     None\n                 })\n                 .collect();\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args.kind;\n+            if let ExprKind::Match(args, [arm], _) = args.kind;\n+            if let ExprKind::Tup(value_args) = args.kind;\n+            if let Some(value_args) = value_args\n+                .iter()\n+                .map(|e| match e.kind {\n+                    ExprKind::AddrOf(_, _, e) => Some(e),\n+                    _ => None,\n+                })\n+                .collect();\n+            if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,"}]}