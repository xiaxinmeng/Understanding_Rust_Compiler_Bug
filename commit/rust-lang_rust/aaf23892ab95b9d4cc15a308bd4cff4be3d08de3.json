{"sha": "aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZjIzODkyYWI5NWI5ZDRjYzE1YTMwOGJkNGNmZjRiZTNkMDhkZTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:40Z"}, "message": "Rollup merge of #84871 - richkadel:no-coverage-unstable-only, r=nagisa\n\nDisallows `#![feature(no_coverage)]` on stable and beta (using standard crate-level gating)\n\nFixes: #84836\n\nRemoves the function-level feature gating solution originally implemented, and solves the same problem using `allow_internal_unstable`, so normal crate-level feature gating mechanism can still be used (which disallows the feature on stable and beta).\n\nI tested this, building the compiler with and without `CFG_DISABLE_UNSTABLE_FEATURES=1`\n\nWith unstable features disabled, I get the expected result as shown here:\n\n```shell\n$ ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc     src/test/run-make-fulldeps/coverage/no_cov_crate.rs\nerror[E0554]: `#![feature]` may not be used on the dev release channel\n --> src/test/run-make-fulldeps/coverage/no_cov_crate.rs:2:1\n  |\n2 | #![feature(no_coverage)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0554`.\n```\n\nr? ````@Mark-Simulacrum````\ncc: ````@tmandry```` ````@wesleywiser````", "tree": {"sha": "d23630ead011afb478d7eff1e59975d33ecb762c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23630ead011afb478d7eff1e59975d33ecb762c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/wCRBK7hj4Ov3rIwAAn+8IAECFeHrFb/ehjxLbJcktCtEt\ncEAd+7aDzJ7Rcjl6/S2C8OqafHNqH830+tiMS6Dudp8mr83Swhr9YagSktCTYLID\n21lKQ/R3fGyzn407KSCQ7LcdyAvsXi5ElDDTVNGrRVcqjmquefcqBPgxR4oQsBdV\nk1wBsGAEEco7/8rYdGjbN872YKExNnGXM9v8Hh6fJgRGBv2CedaniECAd1PftaGJ\nQ57lKPAdSiHRfwB/4peQld5DW+c6uoUT8wNQVwQtB9uMbp+L3G4bZNo0LF0lQb3T\nBeO3Yba96wF68bzifCsWJtJ8WzmZCL7UzaUFsA/vwgzipMZITAXjS1jAfBKYDmg=\n=QxK1\n-----END PGP SIGNATURE-----\n", "payload": "tree d23630ead011afb478d7eff1e59975d33ecb762c\nparent 7835c7802d7473c961e9d9d91467286a7f437948\nparent 3584c1dd0cb501916c8bc6fd452864b261068beb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340720 +0200\ncommitter GitHub <noreply@github.com> 1620340720 +0200\n\nRollup merge of #84871 - richkadel:no-coverage-unstable-only, r=nagisa\n\nDisallows `#![feature(no_coverage)]` on stable and beta (using standard crate-level gating)\n\nFixes: #84836\n\nRemoves the function-level feature gating solution originally implemented, and solves the same problem using `allow_internal_unstable`, so normal crate-level feature gating mechanism can still be used (which disallows the feature on stable and beta).\n\nI tested this, building the compiler with and without `CFG_DISABLE_UNSTABLE_FEATURES=1`\n\nWith unstable features disabled, I get the expected result as shown here:\n\n```shell\n$ ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc     src/test/run-make-fulldeps/coverage/no_cov_crate.rs\nerror[E0554]: `#![feature]` may not be used on the dev release channel\n --> src/test/run-make-fulldeps/coverage/no_cov_crate.rs:2:1\n  |\n2 | #![feature(no_coverage)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0554`.\n```\n\nr? ````@Mark-Simulacrum````\ncc: ````@tmandry```` ````@wesleywiser````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "html_url": "https://github.com/rust-lang/rust/commit/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7835c7802d7473c961e9d9d91467286a7f437948", "url": "https://api.github.com/repos/rust-lang/rust/commits/7835c7802d7473c961e9d9d91467286a7f437948", "html_url": "https://github.com/rust-lang/rust/commit/7835c7802d7473c961e9d9d91467286a7f437948"}, {"sha": "3584c1dd0cb501916c8bc6fd452864b261068beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3584c1dd0cb501916c8bc6fd452864b261068beb", "html_url": "https://github.com/rust-lang/rust/commit/3584c1dd0cb501916c8bc6fd452864b261068beb"}], "stats": {"total": 109, "additions": 18, "deletions": 91}, "files": [{"sha": "54ab88dc3ffc9abd2949be3aef93a4edb8e0a406", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -15,20 +15,12 @@ pub fn expand_deriving_eq(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n+    let span = cx.with_def_site_ctxt(span);\n     let inline = cx.meta_word(span, sym::inline);\n-    let no_coverage_ident =\n-        rustc_ast::attr::mk_nested_word_item(Ident::new(sym::no_coverage, span));\n-    let no_coverage_feature =\n-        rustc_ast::attr::mk_list_item(Ident::new(sym::feature, span), vec![no_coverage_ident]);\n-    let no_coverage = cx.meta_word(span, sym::no_coverage);\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n-    let attrs = vec![\n-        cx.attribute(inline),\n-        cx.attribute(no_coverage_feature),\n-        cx.attribute(no_coverage),\n-        cx.attribute(doc),\n-    ];\n+    let no_coverage = cx.meta_word(span, sym::no_coverage);\n+    let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "a8719be84c2a44c68ed793f65bd3b16a36c0cc52", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -273,13 +273,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(List: \"address, memory, thread\"),\n         experimental!(no_sanitize)\n     ),\n-    ungated!(\n-        // Not exclusively gated at the crate level (though crate-level is\n-        // supported). The feature can alternatively be enabled on individual\n-        // functions.\n-        no_coverage, AssumedUsed,\n-        template!(Word),\n-    ),\n+    gated!(no_coverage, AssumedUsed, template!(Word), experimental!(no_coverage)),\n \n     // FIXME: #14408 assume docs are used since rustdoc looks at them.\n     ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),"}, {"sha": "0528f8812f920bac21aa6d70b04badd0294c459f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -2661,8 +2661,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n-    let mut no_coverage_feature_enabled = false;\n-    let mut no_coverage_attr = None;\n     for attr in attrs.iter() {\n         if tcx.sess.check_name(attr, sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2726,15 +2724,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if tcx.sess.check_name(attr, sym::no_mangle) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n-        } else if attr.has_name(sym::feature) {\n-            if let Some(list) = attr.meta_item_list() {\n-                if list.iter().any(|nested_meta_item| nested_meta_item.has_name(sym::no_coverage)) {\n-                    tcx.sess.mark_attr_used(attr);\n-                    no_coverage_feature_enabled = true;\n-                }\n-            }\n         } else if tcx.sess.check_name(attr, sym::no_coverage) {\n-            no_coverage_attr = Some(attr);\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n         } else if tcx.sess.check_name(attr, sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n@@ -2945,23 +2936,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n-    if let Some(no_coverage_attr) = no_coverage_attr {\n-        if tcx.sess.features_untracked().no_coverage || no_coverage_feature_enabled {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE\n-        } else {\n-            let mut err = feature_err(\n-                &tcx.sess.parse_sess,\n-                sym::no_coverage,\n-                no_coverage_attr.span,\n-                \"the `#[no_coverage]` attribute is an experimental feature\",\n-            );\n-            if tcx.sess.parse_sess.unstable_features.is_nightly_build() {\n-                err.help(\"or, alternatively, add `#[feature(no_coverage)]` to the function\");\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n         if !attr.has_name(sym::inline) {\n             return ia;"}, {"sha": "f8b16b6f9275c6fbf613cd761342123b374f29c6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -274,8 +274,7 @@ pub trait Eq: PartialEq<Self> {\n     //\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n-    #[cfg_attr(not(bootstrap), feature(no_coverage))]\n-    #[cfg_attr(not(bootstrap), no_coverage)]\n+    #[cfg_attr(not(bootstrap), no_coverage)] // rust-lang/rust#84605\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn assert_receiver_is_total_eq(&self) {}\n@@ -284,7 +283,7 @@ pub trait Eq: PartialEq<Self> {\n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow_internal_unstable(core_intrinsics, derive_eq, structural_match)]\n+#[allow_internal_unstable(core_intrinsics, derive_eq, structural_match, no_coverage)]\n pub macro Eq($item:item) {\n     /* compiler built-in */\n }"}, {"sha": "07bf47b9c6fda42314991824130758d93dac0e19", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -166,6 +166,7 @@\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n+#![cfg_attr(not(bootstrap), feature(no_coverage))] // rust-lang/rust#84605\n #![feature(int_error_matching)]\n #![deny(unsafe_op_in_unsafe_fn)]\n "}, {"sha": "16eaf7c858c19907993b1d788255effb284d0f23", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_func.txt", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7835c7802d7473c961e9d9d91467286a7f437948/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7835c7802d7473c961e9d9d91467286a7f437948/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt?ref=7835c7802d7473c961e9d9d91467286a7f437948", "patch": "@@ -1,19 +0,0 @@\n-    1|       |// Enables `no_coverage` on individual functions\n-    2|       |\n-    3|       |#[feature(no_coverage)]\n-    4|       |#[no_coverage]\n-    5|       |fn do_not_add_coverage_1() {\n-    6|       |    println!(\"called but not covered\");\n-    7|       |}\n-    8|       |\n-    9|       |#[no_coverage]\n-   10|       |#[feature(no_coverage)]\n-   11|       |fn do_not_add_coverage_2() {\n-   12|       |    println!(\"called but not covered\");\n-   13|       |}\n-   14|       |\n-   15|      1|fn main() {\n-   16|      1|    do_not_add_coverage_1();\n-   17|      1|    do_not_add_coverage_2();\n-   18|      1|}\n-"}, {"sha": "e19a2c4a87200ceb2dd2f40832567fe6c72f63b1", "filename": "src/test/run-make-fulldeps/coverage/no_cov_func.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7835c7802d7473c961e9d9d91467286a7f437948/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7835c7802d7473c961e9d9d91467286a7f437948/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs?ref=7835c7802d7473c961e9d9d91467286a7f437948", "patch": "@@ -1,18 +0,0 @@\n-// Enables `no_coverage` on individual functions\n-\n-#[feature(no_coverage)]\n-#[no_coverage]\n-fn do_not_add_coverage_1() {\n-    println!(\"called but not covered\");\n-}\n-\n-#[no_coverage]\n-#[feature(no_coverage)]\n-fn do_not_add_coverage_2() {\n-    println!(\"called but not covered\");\n-}\n-\n-fn main() {\n-    do_not_add_coverage_1();\n-    do_not_add_coverage_2();\n-}"}, {"sha": "fd4c6f76059aa6af2db3bcf2337a457e8c253c5a", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -1,8 +1,13 @@\n #![crate_type = \"lib\"]\n \n-#[no_coverage]\n-#[feature(no_coverage)] // does not have to be enabled before `#[no_coverage]`\n-fn no_coverage_is_enabled_on_this_function() {}\n+#[derive(PartialEq, Eq)] // ensure deriving `Eq` does not enable `feature(no_coverage)`\n+struct Foo {\n+    a: u8,\n+    b: u32,\n+}\n \n #[no_coverage] //~ ERROR the `#[no_coverage]` attribute is an experimental feature\n-fn requires_feature_no_coverage() {}\n+fn requires_feature_no_coverage() -> bool {\n+    let bar = Foo { a: 0, b: 0 };\n+    bar == Foo { a: 0, b: 0 }\n+}"}, {"sha": "f7167e0b771c0689caae0ff6b566c9f1356dee4c", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf23892ab95b9d4cc15a308bd4cff4be3d08de3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr?ref=aaf23892ab95b9d4cc15a308bd4cff4be3d08de3", "patch": "@@ -1,12 +1,11 @@\n error[E0658]: the `#[no_coverage]` attribute is an experimental feature\n-  --> $DIR/feature-gate-no_coverage.rs:7:1\n+  --> $DIR/feature-gate-no_coverage.rs:9:1\n    |\n LL | #[no_coverage]\n    | ^^^^^^^^^^^^^^\n    |\n    = note: see issue #84605 <https://github.com/rust-lang/rust/issues/84605> for more information\n    = help: add `#![feature(no_coverage)]` to the crate attributes to enable\n-   = help: or, alternatively, add `#[feature(no_coverage)]` to the function\n \n error: aborting due to previous error\n "}]}