{"sha": "df3d86b535182cd52927405a4316ad688d2240f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmM2Q4NmI1MzUxODJjZDUyOTI3NDA1YTQzMTZhZDY4OGQyMjQwZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T00:57:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-28T00:57:39Z"}, "message": "Auto merge of #85743 - bjorn3:sync_cg_clif-2021-05-27, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nThe main highlight this sync is the removal of several dependencies, making compilation of cg_clif itself faster. There have also been a couple of new features like `#[link_section]` now supporting different segments for Mach-O binaries (thanks `@eggyal!)` and the `imported_main` feature, which is currently unstable.\n\nr? `@ghost`\n\n`@rustbot` label +A-codegen +A-cranelift +T-compiler", "tree": {"sha": "275cc38e1df2835bfc19d7c954ddb50902a2935b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275cc38e1df2835bfc19d7c954ddb50902a2935b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3d86b535182cd52927405a4316ad688d2240f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3d86b535182cd52927405a4316ad688d2240f8", "html_url": "https://github.com/rust-lang/rust/commit/df3d86b535182cd52927405a4316ad688d2240f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3d86b535182cd52927405a4316ad688d2240f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c6868aa21981b37cbd3fc95828ee3b0ac22d494", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c6868aa21981b37cbd3fc95828ee3b0ac22d494", "html_url": "https://github.com/rust-lang/rust/commit/1c6868aa21981b37cbd3fc95828ee3b0ac22d494"}, {"sha": "6487127a05ef01c7213504c6de98b4f95b9e8191", "url": "https://api.github.com/repos/rust-lang/rust/commits/6487127a05ef01c7213504c6de98b4f95b9e8191", "html_url": "https://github.com/rust-lang/rust/commit/6487127a05ef01c7213504c6de98b4f95b9e8191"}], "stats": {"total": 524, "additions": 218, "deletions": 306}, "files": [{"sha": "a6f5925149b925a59fab9c83719be9c2aefd7a13", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 24, "deletions": 116, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -25,12 +25,6 @@ version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n-[[package]]\n-name = \"byteorder\"\n-version = \"1.4.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae44d1a3d5a19df61dd0c8beb138458ac2a53a7ac09eba97d55592540004306b\"\n-\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n@@ -39,18 +33,17 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n- \"byteorder\",\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n  \"cranelift-codegen-shared\",\n@@ -60,32 +53,31 @@ dependencies = [\n  \"regalloc\",\n  \"smallvec\",\n  \"target-lexicon\",\n- \"thiserror\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -95,15 +87,14 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n  \"cranelift-entity\",\n  \"cranelift-module\",\n  \"cranelift-native\",\n- \"errno\",\n  \"libc\",\n  \"log\",\n  \"region\",\n@@ -113,29 +104,28 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n  \"cranelift-entity\",\n  \"log\",\n- \"thiserror\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.73.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n+version = \"0.74.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git?branch=main#76c6b83f6a21a12a11d4f890490f8acb6329a600\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -154,38 +144,11 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n-[[package]]\n-name = \"errno\"\n-version = \"0.2.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fa68f2fb9cae9d37c9b2b3584aba698a2e97f72d7aef7b9f7aa71d8b54ce46fe\"\n-dependencies = [\n- \"errno-dragonfly\",\n- \"libc\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"errno-dragonfly\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14ca354e36190500e1e1fb267c647932382b54053c50b14970856c0b00a35067\"\n-dependencies = [\n- \"gcc\",\n- \"libc\",\n-]\n-\n-[[package]]\n-name = \"gcc\"\n-version = \"0.3.55\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n-\n [[package]]\n name = \"gimli\"\n-version = \"0.23.0\"\n+version = \"0.24.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce\"\n+checksum = \"0e4075386626662786ddb0ec9081e7c7eeb1ba31951f447ca780ef9f5d568189\"\n dependencies = [\n  \"indexmap\",\n ]\n@@ -242,32 +205,14 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.23.0\"\n+version = \"0.24.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a9a7ab5d64814df0fe4a4b5ead45ed6c5f181ee3ff04ba344313a6c80446c5d4\"\n+checksum = \"1a5b3dd1c072ee7963717671d1ca129f1048fda25edea6b752bfc71ac8854170\"\n dependencies = [\n  \"crc32fast\",\n  \"indexmap\",\n ]\n \n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\n-dependencies = [\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n [[package]]\n name = \"regalloc\"\n version = \"0.0.31\"\n@@ -322,49 +267,12 @@ version = \"1.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e\"\n \n-[[package]]\n-name = \"syn\"\n-version = \"1.0.60\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c700597eca8a5a762beb35753ef6b94df201c81cca676604f547495a0d7f0081\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n [[package]]\n name = \"target-lexicon\"\n version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"64ae3b39281e4b14b8123bdbaddd472b7dfe215e444181f2f9d2443c2444f834\"\n \n-[[package]]\n-name = \"thiserror\"\n-version = \"1.0.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e\"\n-dependencies = [\n- \"thiserror-impl\",\n-]\n-\n-[[package]]\n-name = \"thiserror-impl\"\n-version = \"1.0.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "fd149af454735e528277b2290fd4c4258e64374c", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -9,27 +9,27 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", features = [\"unwind\"] }\n-cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n-cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n-cranelift-native = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n-cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", optional = true }\n-cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\", features = [\"unwind\"] }\n+cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n+cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n+cranelift-native = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n+cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\", optional = true }\n+cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime.git\", branch = \"main\" }\n target-lexicon = \"0.12.0\"\n-gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+gimli = { version = \"0.24.0\", default-features = false, features = [\"write\"]}\n+object = { version = \"0.24.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\"\n libloading = { version = \"0.6.0\", optional = true }\n smallvec = \"1.6.1\"\n \n # Uncomment to use local checkout of cranelift\n-#[patch.\"https://github.com/bytecodealliance/wasmtime/\"]\n+#[patch.\"https://github.com/bytecodealliance/wasmtime.git\"]\n #cranelift-codegen = { path = \"../wasmtime/cranelift/codegen\" }\n #cranelift-frontend = { path = \"../wasmtime/cranelift/frontend\" }\n #cranelift-module = { path = \"../wasmtime/cranelift/module\" }\n-#cranelift-native = { path = ../wasmtime/cranelift/native\" }\n+#cranelift-native = { path = \"../wasmtime/cranelift/native\" }\n #cranelift-jit = { path = \"../wasmtime/cranelift/jit\" }\n #cranelift-object = { path = \"../wasmtime/cranelift/object\" }\n \n@@ -70,13 +70,5 @@ debug = false\n opt-level = 0\n debug = false\n \n-[profile.dev.package.syn]\n-opt-level = 0\n-debug = false\n-\n-[profile.release.package.syn]\n-opt-level = 0\n-debug = false\n-\n [package.metadata.rust-analyzer]\n rustc_private = true"}, {"sha": "923deb9aec4c082e357f9c2bc3425a14fbe8c8e8", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -40,9 +40,9 @@ checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.67\"\n+version = \"1.0.68\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd\"\n+checksum = \"4a72c244c1ff497a746a7e1fb3d14bd08420ecda70c8f25c7112f2781652d787\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -56,7 +56,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.40\"\n+version = \"0.1.43\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -132,9 +132,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.94\"\n+version = \"0.2.95\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18794a8ad5b29321f790b55d93dfba91e125cb1a9edbd4f8e3150acc771c1a5e\"\n+checksum = \"789da6d93f1b866ffe175afc5322a4d76c038605a1c3319bb57b06967ca98a36\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -195,9 +195,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.18\"\n+version = \"0.1.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6e3bad0ee36814ca07d7968269dd4b7ec89ec2da10c4bb613928d3077083c232\"\n+checksum = \"410f7acf3cb3a44527c5d9546bad4bf4e6c460915d5f9f2fc524498bfe8f70ce\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "54b7a94750c5249ee465380802c313d72e68272c", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fprepare_sysroot_src.sh?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -32,7 +32,7 @@ popd\n git clone https://github.com/rust-lang/compiler-builtins.git || echo \"rust-lang/compiler-builtins has already been cloned\"\n pushd compiler-builtins\n git checkout -- .\n-git checkout 0.1.40\n+git checkout 0.1.43\n git apply ../../crate_patches/000*-compiler-builtins-*.patch\n popd\n "}, {"sha": "7daea99f5794d2103588c152a0ac02ca1b5b14b1", "filename": "compiler/rustc_codegen_cranelift/crate_patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=df3d86b535182cd52927405a4316ad688d2240f8", "previous_filename": "compiler/rustc_codegen_cranelift/crate_patches/0002-compiler-builtins-Disable-128bit-atomic-operations.patch"}, {"sha": "b4acc4f5b73659923b329cc9fae53339f8335fa0", "filename": "compiler/rustc_codegen_cranelift/crate_patches/0001-compiler-builtins-Remove-rotate_left-from-Int.patch", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1c6868aa21981b37cbd3fc95828ee3b0ac22d494/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Remove-rotate_left-from-Int.patch", "raw_url": "https://github.com/rust-lang/rust/raw/1c6868aa21981b37cbd3fc95828ee3b0ac22d494/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Remove-rotate_left-from-Int.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fcrate_patches%2F0001-compiler-builtins-Remove-rotate_left-from-Int.patch?ref=1c6868aa21981b37cbd3fc95828ee3b0ac22d494", "patch": "@@ -1,35 +0,0 @@\n-From 7078cca3cb614e1e82da428380b4e16fc3afef46 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 21 Jan 2021 14:46:36 +0100\n-Subject: [PATCH] Remove rotate_left from Int\n-\n----\n- src/int/mod.rs | 5 -----\n- 1 file changed, 5 deletions(-)\n-\n-diff --git a/src/int/mod.rs b/src/int/mod.rs\n-index 06054c8..3bea17b 100644\n---- a/src/int/mod.rs\n-+++ b/src/int/mod.rs\n-@@ -85,7 +85,6 @@ pub trait Int:\n-     fn wrapping_sub(self, other: Self) -> Self;\n-     fn wrapping_shl(self, other: u32) -> Self;\n-     fn wrapping_shr(self, other: u32) -> Self;\n--    fn rotate_left(self, other: u32) -> Self;\n-     fn overflowing_add(self, other: Self) -> (Self, bool);\n-     fn leading_zeros(self) -> u32;\n- }\n-@@ -209,10 +208,6 @@ macro_rules! int_impl_common {\n-             <Self>::wrapping_shr(self, other)\n-         }\n- \n--        fn rotate_left(self, other: u32) -> Self {\n--            <Self>::rotate_left(self, other)\n--        }\n--\n-         fn overflowing_add(self, other: Self) -> (Self, bool) {\n-             <Self>::overflowing_add(self, other)\n-         }\n--- \n-2.26.2.7.g19db9cfb68\n-"}, {"sha": "7d608df9253df85fe72e5c38bfb438b29bc267ab", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -187,20 +187,6 @@ unsafe fn test_mm_slli_si128() {\n     );\n     let r = _mm_slli_si128(a, 16);\n     assert_eq_m128i(r, _mm_set1_epi8(0));\n-\n-    #[rustfmt::skip]\n-    let a = _mm_setr_epi8(\n-        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n-    );\n-    let r = _mm_slli_si128(a, -1);\n-    assert_eq_m128i(_mm_set1_epi8(0), r);\n-\n-    #[rustfmt::skip]\n-    let a = _mm_setr_epi8(\n-        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n-    );\n-    let r = _mm_slli_si128(a, -0x80000000);\n-    assert_eq_m128i(r, _mm_set1_epi8(0));\n }\n \n #[cfg(target_arch = \"x86_64\")]\n@@ -295,7 +281,7 @@ unsafe fn test_mm_extract_epi8() {\n         8, 9, 10, 11, 12, 13, 14, 15\n     );\n     let r1 = _mm_extract_epi8(a, 0);\n-    let r2 = _mm_extract_epi8(a, 19);\n+    let r2 = _mm_extract_epi8(a, 3);\n     assert_eq!(r1, 0xFF);\n     assert_eq!(r2, 3);\n }"}, {"sha": "ba0eaacd82870fd0a12952989c55b70317ef3b3a", "filename": "compiler/rustc_codegen_cranelift/patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-core-Disable-not-compiling-tests.patch?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -39,46 +39,6 @@ index a35897e..f0bf645 100644\n  \n  pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n      match decode(v).1 {\n-diff --git a/library/core/tests/num/int_macros.rs b/library/core/tests/num/int_macros.rs\n-index 0475aeb..9558198 100644\n---- a/library/core/tests/num/int_macros.rs\n-+++ b/library/core/tests/num/int_macros.rs\n-@@ -88,6 +88,7 @@ mod tests {\n-                 assert_eq!(x.trailing_ones(), 0);\n-             }\n- \n-+            /*\n-             #[test]\n-             fn test_rotate() {\n-                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);\n-@@ -112,6 +113,7 @@ mod tests {\n-                 assert_eq!(B.rotate_left(128), B);\n-                 assert_eq!(C.rotate_left(128), C);\n-             }\n-+            */\n- \n-             #[test]\n-             fn test_swap_bytes() {\n-diff --git a/library/core/tests/num/uint_macros.rs b/library/core/tests/num/uint_macros.rs\n-index 04ed14f..a6e372e 100644\n---- a/library/core/tests/num/uint_macros.rs\n-+++ b/library/core/tests/num/uint_macros.rs\n-@@ -52,6 +52,7 @@ mod tests {\n-                 assert_eq!(x.trailing_ones(), 0);\n-             }\n- \n-+            /*\n-             #[test]\n-             fn test_rotate() {\n-                 assert_eq!(A.rotate_left(6).rotate_right(2).rotate_right(4), A);\n-@@ -76,6 +77,7 @@ mod tests {\n-                 assert_eq!(B.rotate_left(128), B);\n-                 assert_eq!(C.rotate_left(128), C);\n-             }\n-+            */\n- \n-             #[test]\n-             fn test_swap_bytes() {\n diff --git a/library/core/tests/ptr.rs b/library/core/tests/ptr.rs\n index 1a6be3a..42dbd59 100644\n --- a/library/core/tests/ptr.rs"}, {"sha": "9fe6e093a7b81f6577d1fb822692c77508e0ac88", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-04-28\"\n+channel = \"nightly-2021-05-26\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "43c4887669cf6a0512a87fbe8e045b359c66a14d", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -24,18 +24,6 @@ index 5bd1147cad5..10d68a2ff14 100644\n +\n  [patch.\"https://github.com/rust-lang/rust-clippy\"]\n  clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n-diff --git a/compiler/rustc_data_structures/Cargo.toml b/compiler/rustc_data_structures/Cargo.toml\n-index 23e689fcae7..5f077b765b6 100644\n---- a/compiler/rustc_data_structures/Cargo.toml\n-+++ b/compiler/rustc_data_structures/Cargo.toml\n-@@ -32,7 +32,6 @@ tempfile = \"3.0.5\"\n-\n- [dependencies.parking_lot]\n- version = \"0.11\"\n--features = [\"nightly\"]\n-\n- [target.'cfg(windows)'.dependencies]\n- winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml\n index d95b5b7f17f..00b6f0e3635 100644\n --- a/library/alloc/Cargo.toml\n@@ -44,11 +32,12 @@ index d95b5b7f17f..00b6f0e3635 100644\n \n  [dependencies]\n  core = { path = \"../core\" }\n--compiler_builtins = { version = \"0.1.39\", features = ['rustc-dep-of-std'] }\n-+compiler_builtins = { version = \"0.1.40\", features = ['rustc-dep-of-std', 'no-asm'] }\n+-compiler_builtins = { version = \"0.1.40\", features = ['rustc-dep-of-std'] }\n++compiler_builtins = { version = \"0.1.43\", features = ['rustc-dep-of-std', 'no-asm'] }\n \n  [dev-dependencies]\n  rand = \"0.7\"\n+ rand_xorshift = \"0.2\"\n EOF\n \n cat > config.toml <<EOF"}, {"sha": "0d99d2c507c95af6819f7b8decfeb0dfbcc7bf4e", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -116,6 +116,7 @@ function extended_sysroot_tests() {\n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n     cargo clean\n+    export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n     ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then"}, {"sha": "bd54adc53ee2a58eba807aa045dd51bcf098b9d4", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -160,7 +160,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             };\n \n             if !self.no_builtin_ranlib {\n-                match object::File::parse(&data) {\n+                match object::File::parse(&*data) {\n                     Ok(object) => {\n                         symbol_table.insert(\n                             entry_name.as_bytes().to_vec(),"}, {"sha": "ec3e17e5b758d6929cae190f6c51b92645cab5d1", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -110,11 +110,6 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Verify function\n     verify_func(tcx, &clif_comments, &context.func);\n \n-    // Perform rust specific optimizations\n-    tcx.sess.time(\"optimize clif ir\", || {\n-        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n-    });\n-\n     // If the return block is not reachable, then the SSA builder may have inserted an `iconst.i128`\n     // instruction, which doesn't have an encoding.\n     context.compute_cfg();\n@@ -125,10 +120,14 @@ pub(crate) fn codegen_fn<'tcx>(\n     // invalidate it when it would change.\n     context.domtree.clear();\n \n-    context.want_disasm = crate::pretty_clif::should_write_ir(tcx);\n+    // Perform rust specific optimizations\n+    tcx.sess.time(\"optimize clif ir\", || {\n+        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n+    });\n \n     // Define function\n     tcx.sess.time(\"define function\", || {\n+        context.want_disasm = crate::pretty_clif::should_write_ir(tcx);\n         module\n             .define_function(func_id, context, &mut NullTrapSink {}, &mut NullStackMapSink {})\n             .unwrap()\n@@ -870,7 +869,7 @@ pub(crate) fn codegen_operand<'tcx>(\n pub(crate) fn codegen_panic<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, msg_str: &str, span: Span) {\n     let location = fx.get_caller_location(span).load_scalar(fx);\n \n-    let msg_ptr = fx.anonymous_str(\"assert\", msg_str);\n+    let msg_ptr = fx.anonymous_str(msg_str);\n     let msg_len = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(msg_str.len()).unwrap());\n     let args = [msg_ptr, msg_len, location];\n "}, {"sha": "488ff6e134956e2d870fabf7e2ebce2327c9b5aa", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -347,19 +347,10 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.module.isa().triple()\n     }\n \n-    pub(crate) fn anonymous_str(&mut self, prefix: &str, msg: &str) -> Value {\n-        use std::collections::hash_map::DefaultHasher;\n-        use std::hash::{Hash, Hasher};\n-\n-        let mut hasher = DefaultHasher::new();\n-        msg.hash(&mut hasher);\n-        let msg_hash = hasher.finish();\n+    pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {\n         let mut data_ctx = DataContext::new();\n         data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n-        let msg_id = self\n-            .module\n-            .declare_data(&format!(\"__{}_{:08x}\", prefix, msg_hash), Linkage::Local, false, false)\n-            .unwrap();\n+        let msg_id = self.module.declare_anonymous_data(false, false).unwrap();\n \n         // Ignore DuplicateDefinition error, as the data will be the same\n         let _ = self.module.define_data(msg_id, &data_ctx);"}, {"sha": "eef3c8c8d6e2b38170209854f34c5c441ad59b5b", "filename": "compiler/rustc_codegen_cranelift/src/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -48,6 +48,12 @@ pub struct BackendConfig {\n     /// Can be set using `-Cllvm-args=display_cg_time=...`.\n     pub display_cg_time: bool,\n \n+    /// The register allocator to use.\n+    ///\n+    /// Defaults to the value of `CG_CLIF_REGALLOC` or `backtracking` otherwise. Can be set using\n+    /// `-Cllvm-args=regalloc=...`.\n+    pub regalloc: String,\n+\n     /// Enable the Cranelift ir verifier for all compilation passes. If not set it will only run\n     /// once before passing the clif ir to Cranelift for compilation.\n     ///\n@@ -74,6 +80,8 @@ impl Default for BackendConfig {\n                 args.split(' ').map(|arg| arg.to_string()).collect()\n             },\n             display_cg_time: bool_env_var(\"CG_CLIF_DISPLAY_CG_TIME\"),\n+            regalloc: std::env::var(\"CG_CLIF_REGALLOC\")\n+                .unwrap_or_else(|_| \"backtracking\".to_string()),\n             enable_verifier: cfg!(debug_assertions) || bool_env_var(\"CG_CLIF_ENABLE_VERIFIER\"),\n             disable_incr_cache: bool_env_var(\"CG_CLIF_DISABLE_INCR_CACHE\"),\n         }\n@@ -93,6 +101,7 @@ impl BackendConfig {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,\n                     \"display_cg_time\" => config.display_cg_time = parse_bool(name, value)?,\n+                    \"regalloc\" => config.regalloc = value.to_string(),\n                     \"enable_verifier\" => config.enable_verifier = parse_bool(name, value)?,\n                     \"disable_incr_cache\" => config.disable_incr_cache = parse_bool(name, value)?,\n                     _ => return Err(format!(\"Unknown option `{}`\", name)),"}, {"sha": "3ba12c4e96d6831b1c3238eb48ac158fa334a3ab", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 93, "deletions": 4, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -7,7 +7,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n+    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc,\n+    Scalar,\n };\n use rustc_middle::ty::ConstKind;\n \n@@ -375,8 +376,19 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         data_ctx.set_align(alloc.align.bytes());\n \n         if let Some(section_name) = section_name {\n-            // FIXME set correct segment for Mach-O files\n-            data_ctx.set_segment_section(\"\", &*section_name);\n+            let (segment_name, section_name) = if tcx.sess.target.is_like_osx {\n+                if let Some(names) = section_name.split_once(',') {\n+                    names\n+                } else {\n+                    tcx.sess.fatal(&format!(\n+                        \"#[link_section = \\\"{}\\\"] is not valid for macos target: must be segment and section separated by comma\",\n+                        section_name\n+                    ));\n+                }\n+            } else {\n+                (\"\", &*section_name)\n+            };\n+            data_ctx.set_segment_section(segment_name, section_name);\n         }\n \n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n@@ -438,12 +450,89 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     operand: &Operand<'tcx>,\n ) -> Option<ConstValue<'tcx>> {\n     match operand {\n-        Operand::Copy(_) | Operand::Move(_) => None,\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n                 fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },\n+        // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n+        // inside a temporary before being passed to the intrinsic requiring the const argument.\n+        // This code tries to find a single constant defining definition of the referenced local.\n+        Operand::Copy(place) | Operand::Move(place) => {\n+            if !place.projection.is_empty() {\n+                return None;\n+            }\n+            let mut computed_const_val = None;\n+            for bb_data in fx.mir.basic_blocks() {\n+                for stmt in &bb_data.statements {\n+                    match &stmt.kind {\n+                        StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {\n+                            match &local_and_rvalue.1 {\n+                                Rvalue::Cast(CastKind::Misc, operand, ty) => {\n+                                    if computed_const_val.is_some() {\n+                                        return None; // local assigned twice\n+                                    }\n+                                    if !matches!(ty.kind(), ty::Uint(_) | ty::Int(_)) {\n+                                        return None;\n+                                    }\n+                                    let const_val = mir_operand_get_const_val(fx, operand)?;\n+                                    if fx.layout_of(ty).size\n+                                        != const_val.try_to_scalar_int()?.size()\n+                                    {\n+                                        return None;\n+                                    }\n+                                    computed_const_val = Some(const_val);\n+                                }\n+                                Rvalue::Use(operand) => {\n+                                    computed_const_val = mir_operand_get_const_val(fx, operand)\n+                                }\n+                                _ => return None,\n+                            }\n+                        }\n+                        StatementKind::SetDiscriminant { place: stmt_place, variant_index: _ }\n+                            if &**stmt_place == place =>\n+                        {\n+                            return None;\n+                        }\n+                        StatementKind::LlvmInlineAsm(_) | StatementKind::CopyNonOverlapping(_) => {\n+                            return None;\n+                        } // conservative handling\n+                        StatementKind::Assign(_)\n+                        | StatementKind::FakeRead(_)\n+                        | StatementKind::SetDiscriminant { .. }\n+                        | StatementKind::StorageLive(_)\n+                        | StatementKind::StorageDead(_)\n+                        | StatementKind::Retag(_, _)\n+                        | StatementKind::AscribeUserType(_, _)\n+                        | StatementKind::Coverage(_)\n+                        | StatementKind::Nop => {}\n+                    }\n+                }\n+                match &bb_data.terminator().kind {\n+                    TerminatorKind::Goto { .. }\n+                    | TerminatorKind::SwitchInt { .. }\n+                    | TerminatorKind::Resume\n+                    | TerminatorKind::Abort\n+                    | TerminatorKind::Return\n+                    | TerminatorKind::Unreachable\n+                    | TerminatorKind::Drop { .. }\n+                    | TerminatorKind::Assert { .. } => {}\n+                    TerminatorKind::DropAndReplace { .. }\n+                    | TerminatorKind::Yield { .. }\n+                    | TerminatorKind::GeneratorDrop\n+                    | TerminatorKind::FalseEdge { .. }\n+                    | TerminatorKind::FalseUnwind { .. } => unreachable!(),\n+                    TerminatorKind::InlineAsm { .. } => return None,\n+                    TerminatorKind::Call { destination: Some((call_place, _)), .. }\n+                        if call_place == place =>\n+                    {\n+                        return None;\n+                    }\n+                    TerminatorKind::Call { .. } => {}\n+                }\n+            }\n+            computed_const_val\n+        }\n     }\n }"}, {"sha": "9cf51d15c8ca0a8e99595398d76580bad62d7067", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -73,9 +73,8 @@ fn reuse_workproduct_for_cgu(\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n-        let obj_out = tcx\n-            .output_filenames(())\n-            .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n+        let obj_out =\n+            tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n@@ -145,7 +144,13 @@ fn module_codegen(\n             }\n         }\n     }\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut cx.unwind_context, false);\n+    crate::main_shim::maybe_create_entry_wrapper(\n+        tcx,\n+        &mut module,\n+        &mut cx.unwind_context,\n+        false,\n+        cgu.is_primary(),\n+    );\n \n     let debug_context = cx.debug_context;\n     let unwind_context = cx.unwind_context;\n@@ -275,9 +280,8 @@ pub(crate) fn run_aot(\n                 .as_str()\n                 .to_string();\n \n-            let tmp_file = tcx\n-                .output_filenames(())\n-                .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n+            let tmp_file =\n+                tcx.output_filenames(()).temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n                 crate::metadata::write_metadata(tcx, object);\n@@ -352,8 +356,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n-    let output_object_file =\n-        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n+    let output_object_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "4a99cb727c8306be349da798407d5da139b31828", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -45,6 +45,7 @@ fn create_jit_module<'tcx>(\n         &mut jit_module,\n         &mut cx.unwind_context,\n         true,\n+        true,\n     );\n \n     (jit_module, cx)\n@@ -206,7 +207,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n         use object::{Object, ObjectSymbol};\n         let lib = libloading::Library::new(&path).unwrap();\n         let obj = std::fs::read(path).unwrap();\n-        let obj = object::File::parse(&obj).unwrap();\n+        let obj = object::File::parse(&*obj).unwrap();\n         imported_symbols.extend(obj.dynamic_symbols().filter_map(|symbol| {\n             let name = symbol.name().unwrap().to_string();\n             if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {"}, {"sha": "09c5e6031c78dce37d6f985a7c901466f0bb84f9", "filename": "compiler/rustc_codegen_cranelift/src/inline_asm.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -24,14 +24,22 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         let true_ = fx.bcx.ins().iconst(types::I32, 1);\n         fx.bcx.ins().trapnz(true_, TrapCode::User(1));\n         return;\n-    } else if template[0] == InlineAsmTemplatePiece::String(\"mov rsi, rbx\".to_string())\n-        && template[1] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-        && template[2] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n-        && template[3] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-        && template[4] == InlineAsmTemplatePiece::String(\"xchg rsi, rbx\".to_string())\n+    } else if template[0] == InlineAsmTemplatePiece::String(\"movq %rbx, \".to_string())\n+        && matches!(\n+            template[1],\n+            InlineAsmTemplatePiece::Placeholder { operand_idx: 0, modifier: Some('r'), span: _ }\n+        )\n+        && template[2] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+        && template[3] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n+        && template[4] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+        && template[5] == InlineAsmTemplatePiece::String(\"xchgq %rbx, \".to_string())\n+        && matches!(\n+            template[6],\n+            InlineAsmTemplatePiece::Placeholder { operand_idx: 0, modifier: Some('r'), span: _ }\n+        )\n     {\n         assert_eq!(operands.len(), 4);\n-        let (leaf, eax_place) = match operands[0] {\n+        let (leaf, eax_place) = match operands[1] {\n             InlineAsmOperand::InOut { reg, late: true, ref in_value, out_place } => {\n                 let reg = expect_reg(reg);\n                 assert_eq!(reg, InlineAsmReg::X86(X86InlineAsmReg::ax));\n@@ -42,10 +50,14 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n             }\n             _ => unreachable!(),\n         };\n-        let ebx_place = match operands[1] {\n+        let ebx_place = match operands[0] {\n             InlineAsmOperand::Out { reg, late: true, place } => {\n-                let reg = expect_reg(reg);\n-                assert_eq!(reg, InlineAsmReg::X86(X86InlineAsmReg::si));\n+                assert_eq!(\n+                    reg,\n+                    InlineAsmRegOrRegClass::RegClass(InlineAsmRegClass::X86(\n+                        X86InlineAsmRegClass::reg\n+                    ))\n+                );\n                 crate::base::codegen_place(fx, place.unwrap())\n             }\n             _ => unreachable!(),"}, {"sha": "d02dfd93c3ee3c533aa2b27a601306a59a757c6d", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/cpuid.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fcpuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fcpuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fcpuid.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -12,6 +12,7 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n ) -> (Value, Value, Value, Value) {\n     let leaf_0 = fx.bcx.create_block();\n     let leaf_1 = fx.bcx.create_block();\n+    let leaf_7 = fx.bcx.create_block();\n     let leaf_8000_0000 = fx.bcx.create_block();\n     let leaf_8000_0001 = fx.bcx.create_block();\n     let unsupported_leaf = fx.bcx.create_block();\n@@ -25,6 +26,7 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n     let mut switch = cranelift_frontend::Switch::new();\n     switch.set_entry(0, leaf_0);\n     switch.set_entry(1, leaf_1);\n+    switch.set_entry(7, leaf_7);\n     switch.set_entry(0x8000_0000, leaf_8000_0000);\n     switch.set_entry(0x8000_0001, leaf_8000_0001);\n     switch.emit(&mut fx.bcx, leaf, unsupported_leaf);\n@@ -43,6 +45,11 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n     let edx_features = fx.bcx.ins().iconst(types::I32, 1 << 25 /* sse */ | 1 << 26 /* sse2 */);\n     fx.bcx.ins().jump(dest, &[cpu_signature, additional_information, ecx_features, edx_features]);\n \n+    fx.bcx.switch_to_block(leaf_7);\n+    // This leaf technically has subleaves, but we just return zero for all subleaves.\n+    let zero = fx.bcx.ins().iconst(types::I32, 0);\n+    fx.bcx.ins().jump(dest, &[zero, zero, zero, zero]);\n+\n     fx.bcx.switch_to_block(leaf_8000_0000);\n     let extended_max_basic_leaf = fx.bcx.ins().iconst(types::I32, 0);\n     let zero = fx.bcx.ins().iconst(types::I32, 0);"}, {"sha": "52896fc7127e8a32fffbef7ae7f4ed4a9880adc2", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -8,8 +8,8 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n-use rustc_span::symbol::{sym, kw};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_span::symbol::{kw, sym};\n \n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;"}, {"sha": "4ee887cd5afaef819a65ed333e6bbbed3e8e8b16", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -256,6 +256,8 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n \n     flags_builder.set(\"enable_llvm_abi_extensions\", \"true\").unwrap();\n \n+    flags_builder.set(\"regalloc\", &backend_config.regalloc).unwrap();\n+\n     use rustc_session::config::OptLevel;\n     match sess.opts.optimize {\n         OptLevel::No => {\n@@ -277,21 +279,23 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n             builder\n         }\n         Some(value) => {\n-            let mut builder = cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n+            let mut builder =\n+                cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n             if let Err(_) = builder.enable(value) {\n                 sess.fatal(\"The specified target cpu isn't currently supported by Cranelift.\");\n             }\n             builder\n         }\n         None => {\n-            let mut builder = cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n+            let mut builder =\n+                cranelift_codegen::isa::lookup_variant(target_triple, variant).unwrap();\n             // Don't use \"haswell\" as the default, as it implies `has_lzcnt`.\n             // macOS CI is still at Ivy Bridge EP, so `lzcnt` is interpreted as `bsr`.\n             builder.enable(\"nehalem\").unwrap();\n             builder\n         }\n     };\n-    \n+\n     isa_builder.finish(flags)\n }\n "}, {"sha": "8fd1e4f5811f5d4f9d26fb6166f7981d5e699117", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -14,6 +14,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     is_jit: bool,\n+    is_primary_cgu: bool,\n ) {\n     let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n@@ -26,8 +27,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n         None => return,\n     };\n \n-    let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n-    if !is_jit && module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n+    if main_def_id.is_local() {\n+        let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n+        if !is_jit && module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n+            return;\n+        }\n+    } else if !is_primary_cgu {\n         return;\n     }\n "}, {"sha": "21d3e68dbc79257ac4f899715efe30ce481d2839", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -21,7 +21,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n     }\n \n     let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, fx.symbol_name, msg);\n-    let msg_ptr = fx.anonymous_str(\"trap\", &real_msg);\n+    let msg_ptr = fx.anonymous_str(&real_msg);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }\n "}, {"sha": "171f39805f8963ffaad26ce92566cb3f369111d6", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -561,6 +561,7 @@ impl<'tcx> CPlace<'tcx> {\n                     dst_align,\n                     src_align,\n                     true,\n+                    MemFlags::trusted(),\n                 );\n             }\n             CValueInner::ByRef(_, Some(_)) => todo!(),"}, {"sha": "06cec1964a080d9ab1e84dbbd849603b84f12cf7", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df3d86b535182cd52927405a4316ad688d2240f8/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3d86b535182cd52927405a4316ad688d2240f8/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=df3d86b535182cd52927405a4316ad688d2240f8", "patch": "@@ -235,7 +235,6 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"ar\",\n     \"autocfg\",\n     \"bitflags\",\n-    \"byteorder\",\n     \"cfg-if\",\n     \"cranelift-bforest\",\n     \"cranelift-codegen\",\n@@ -248,9 +247,6 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"cranelift-native\",\n     \"cranelift-object\",\n     \"crc32fast\",\n-    \"errno\",\n-    \"errno-dragonfly\",\n-    \"gcc\",\n     \"gimli\",\n     \"hashbrown\",\n     \"indexmap\",\n@@ -259,17 +255,11 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"log\",\n     \"mach\",\n     \"object\",\n-    \"proc-macro2\",\n-    \"quote\",\n     \"regalloc\",\n     \"region\",\n     \"rustc-hash\",\n     \"smallvec\",\n-    \"syn\",\n     \"target-lexicon\",\n-    \"thiserror\",\n-    \"thiserror-impl\",\n-    \"unicode-xid\",\n     \"winapi\",\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-x86_64-pc-windows-gnu\","}]}