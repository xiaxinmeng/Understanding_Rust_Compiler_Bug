{"sha": "f3d7196caec3f54e572c7389b1cef9fd9e62c1ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDcxOTZjYWVjM2Y1NGU1NzJjNzM4OWIxY2VmOWZkOWU2MmMxZWQ=", "commit": {"author": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-12T14:53:58Z"}, "committer": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-12T14:53:58Z"}, "message": "Be clearer about Some/None transmute.", "tree": {"sha": "04fe197a1cc2475e0fb7c88ed2f21c1f4d42ba0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04fe197a1cc2475e0fb7c88ed2f21c1f4d42ba0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed", "html_url": "https://github.com/rust-lang/rust/commit/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed/comments", "author": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f47aa11bd664ed8a15ef9833063833b7b3e71c", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f47aa11bd664ed8a15ef9833063833b7b3e71c", "html_url": "https://github.com/rust-lang/rust/commit/83f47aa11bd664ed8a15ef9833063833b7b3e71c"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "a8337c171a5ba5d734d14c4ba1deaa1b1377608b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d7196caec3f54e572c7389b1cef9fd9e62c1ed/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=f3d7196caec3f54e572c7389b1cef9fd9e62c1ed", "patch": "@@ -84,8 +84,9 @@\n //! * `#[repr(transparent)]` struct around one of the types in this list.\n //!\n //! For the above cases, it is guaranteed that one can [`mem::transmute`]\n-//! from all valid values of `T` to `Option<T>` but only from non-`None`\n-//! Option<T>` to `T`.\n+//! from all valid values of `T` to `Option<T>` but only from\n+//! `Option::Some(T)` to `T` (i.e. transmuting `None` to `<T>` is undefined\n+//! behaviour).\n //!\n //! # Examples\n //!"}]}