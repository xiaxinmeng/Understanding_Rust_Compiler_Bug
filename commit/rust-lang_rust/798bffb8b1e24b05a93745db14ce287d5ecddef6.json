{"sha": "798bffb8b1e24b05a93745db14ce287d5ecddef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGJmZmI4YjFlMjRiMDVhOTM3NDVkYjE0Y2UyODdkNWVjZGRlZjY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:12:16Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-11T08:12:16Z"}, "message": "`--help` options\n\ncc #1976", "tree": {"sha": "300c32bff289d4ed86d02f13855d39eaac7ec0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300c32bff289d4ed86d02f13855d39eaac7ec0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798bffb8b1e24b05a93745db14ce287d5ecddef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798bffb8b1e24b05a93745db14ce287d5ecddef6", "html_url": "https://github.com/rust-lang/rust/commit/798bffb8b1e24b05a93745db14ce287d5ecddef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798bffb8b1e24b05a93745db14ce287d5ecddef6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1869888b1aac51d2d0fa423869b7e76967b7f2c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1869888b1aac51d2d0fa423869b7e76967b7f2c7", "html_url": "https://github.com/rust-lang/rust/commit/1869888b1aac51d2d0fa423869b7e76967b7f2c7"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "2dc9657a020f12ba153d8c75d1588870ee49a68a", "filename": "src/bin/main.rs", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/798bffb8b1e24b05a93745db14ce287d5ecddef6/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bffb8b1e24b05a93745db14ce287d5ecddef6/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=798bffb8b1e24b05a93745db14ce287d5ecddef6", "patch": "@@ -67,11 +67,9 @@ enum Operation {\n         minimal_config_path: Option<String>,\n     },\n     /// Print the help message.\n-    Help,\n+    Help(HelpOp),\n     // Print version information\n     Version,\n-    /// Print detailed configuration help.\n-    ConfigHelp,\n     /// Output default config to a file, or stdout if None\n     ConfigOutputDefault {\n         path: Option<String>,\n@@ -82,6 +80,13 @@ enum Operation {\n     },\n }\n \n+/// Arguments to `--help`\n+enum HelpOp {\n+    None,\n+    Config,\n+    FileLines,\n+}\n+\n fn make_opts() -> Options {\n     let mut opts = Options::new();\n \n@@ -92,11 +97,6 @@ fn make_opts() -> Options {\n         \"Use colored output (if supported)\",\n         \"[always|never|auto]\",\n     );\n-    opts.optflag(\n-        \"\",\n-        \"config-help\",\n-        \"Show details of rustfmt configuration options\",\n-    );\n     opts.optopt(\n         \"\",\n         \"config-path\",\n@@ -130,7 +130,12 @@ fn make_opts() -> Options {\n         \"Format specified line ranges. See README for more detail on the JSON format.\",\n         \"JSON\",\n     );\n-    opts.optflag(\"h\", \"help\", \"Show this message\");\n+    opts.optflagopt(\n+        \"h\",\n+        \"help\",\n+        \"Show this message or help about a specific topic: config or file-lines\",\n+        \"=TOPIC\",\n+    );\n     opts.optflag(\"\", \"skip-children\", \"Don't reformat child modules\");\n     opts.optflag(\n         \"\",\n@@ -154,17 +159,21 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n     let matches = opts.parse(env::args().skip(1))?;\n \n     match determine_operation(&matches)? {\n-        Operation::Help => {\n+        Operation::Help(HelpOp::None) => {\n             print_usage_to_stdout(opts, \"\");\n             Summary::print_exit_codes();\n             Ok((WriteMode::None, Summary::default()))\n         }\n-        Operation::Version => {\n-            print_version();\n+        Operation::Help(HelpOp::Config) => {\n+            Config::print_docs(&mut stdout(), matches.opt_present(\"unstable-features\"));\n             Ok((WriteMode::None, Summary::default()))\n         }\n-        Operation::ConfigHelp => {\n-            Config::print_docs(&mut stdout(), matches.opt_present(\"unstable-features\"));\n+        Operation::Help(HelpOp::FileLines) => {\n+            print_help_file_lines();\n+            Ok((WriteMode::None, Summary::default()))\n+        }\n+        Operation::Version => {\n+            print_version();\n             Ok((WriteMode::None, Summary::default()))\n         }\n         Operation::ConfigOutputDefault { path } => {\n@@ -298,6 +307,27 @@ fn print_usage_to_stdout(opts: &Options, reason: &str) {\n     println!(\"{}\", opts.usage(&msg));\n }\n \n+fn print_help_file_lines() {\n+    println!(\"If you want to restrict reformatting to specific sets of lines, you can\n+use the `--file-lines` option. Its argument is a JSON array of objects\n+with `file` and `range` properties, where `file` is a file name, and\n+`range` is an array representing a range of lines like `[7,13]`. Ranges\n+are 1-based and inclusive of both end points. Specifying an empty array\n+will result in no files being formatted. For example,\n+\n+```\n+rustfmt --file-lines '[\n+    {{\\\"file\\\":\\\"src/lib.rs\\\",\\\"range\\\":[7,13]}},\n+    {{\\\"file\\\":\\\"src/lib.rs\\\",\\\"range\\\":[21,29]}},\n+    {{\\\"file\\\":\\\"src/foo.rs\\\",\\\"range\\\":[10,11]}},\n+    {{\\\"file\\\":\\\"src/foo.rs\\\",\\\"range\\\":[15,15]}}]'\n+```\n+\n+would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,\n+and `15` of `src/foo.rs`. No other files would be formatted, even if they\n+are included as out of line modules from `src/lib.rs`.\");\n+}\n+\n fn print_version() {\n     let version_info = format!(\n         \"{}-{}\",\n@@ -310,11 +340,17 @@ fn print_version() {\n \n fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n     if matches.opt_present(\"h\") {\n-        return Ok(Operation::Help);\n-    }\n-\n-    if matches.opt_present(\"config-help\") {\n-        return Ok(Operation::ConfigHelp);\n+        let topic = matches.opt_str(\"h\");\n+        if topic == None {\n+            return Ok(Operation::Help(HelpOp::None));\n+        } else if topic == Some(\"config\".to_owned()) {\n+            return Ok(Operation::Help(HelpOp::Config));\n+        } else if topic == Some(\"file-lines\".to_owned()) {\n+            return Ok(Operation::Help(HelpOp::FileLines));\n+        } else {\n+            println!(\"Unknown help topic: `{}`\\n\", topic.unwrap());\n+            return Ok(Operation::Help(HelpOp::None));\n+        }\n     }\n \n     if matches.opt_present(\"dump-default-config\") {"}]}