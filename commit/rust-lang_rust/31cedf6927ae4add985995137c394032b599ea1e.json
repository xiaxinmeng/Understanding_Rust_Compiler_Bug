{"sha": "31cedf6927ae4add985995137c394032b599ea1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxY2VkZjY5MjdhZTRhZGQ5ODU5OTUxMzdjMzk0MDMyYjU5OWVhMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T05:00:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T05:00:01Z"}, "message": "auto merge of #6478 : dotdash/rust/inlining, r=catamorphism\n\nNot inlining these affects the hash table performance quite badly.", "tree": {"sha": "60259cd58a25df99be9a6ff4e03df0cc3739220a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60259cd58a25df99be9a6ff4e03df0cc3739220a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31cedf6927ae4add985995137c394032b599ea1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31cedf6927ae4add985995137c394032b599ea1e", "html_url": "https://github.com/rust-lang/rust/commit/31cedf6927ae4add985995137c394032b599ea1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31cedf6927ae4add985995137c394032b599ea1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea", "html_url": "https://github.com/rust-lang/rust/commit/2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea"}, {"sha": "7ba685c7abe3f4e76d7e720277c1070c4dafb88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba685c7abe3f4e76d7e720277c1070c4dafb88b", "html_url": "https://github.com/rust-lang/rust/commit/7ba685c7abe3f4e76d7e720277c1070c4dafb88b"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ad42881ffa028d9b9dcdb200830903789fb2da2c", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=31cedf6927ae4add985995137c394032b599ea1e", "patch": "@@ -458,6 +458,7 @@ pub fn iter_bytes_2<A:IterBytes,B:IterBytes>(a: &A, b: &B,\n     b.iter_bytes(lsb0, |bytes| {flag = z(bytes); flag});\n }\n #[cfg(not(stage0))]\n+#[inline(always)]\n pub fn iter_bytes_2<A:IterBytes,B:IterBytes>(a: &A, b: &B,\n                                              lsb0: bool, z: Cb) -> bool {\n     a.iter_bytes(lsb0, z) && b.iter_bytes(lsb0, z)"}, {"sha": "34480bb1edf9b8561bdf145ad595122ceed6052c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=31cedf6927ae4add985995137c394032b599ea1e", "patch": "@@ -98,12 +98,14 @@ impl<D:Decoder> Decodable<D> for ident {\n \n #[cfg(stage0)]\n impl to_bytes::IterBytes for ident {\n+    #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         self.repr.iter_bytes(lsb0, f)\n     }\n }\n #[cfg(not(stage0))]\n impl to_bytes::IterBytes for ident {\n+    #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         self.repr.iter_bytes(lsb0, f)\n     }"}, {"sha": "fe479ab81f77bf901696d45fdd6f3b3ee3e87a9a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cedf6927ae4add985995137c394032b599ea1e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=31cedf6927ae4add985995137c394032b599ea1e", "patch": "@@ -357,12 +357,14 @@ impl<'self> Equiv<@~str> for StringRef<'self> {\n \n #[cfg(stage0)]\n impl<'self> to_bytes::IterBytes for StringRef<'self> {\n+    #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         (**self).iter_bytes(lsb0, f);\n     }\n }\n #[cfg(not(stage0))]\n impl<'self> to_bytes::IterBytes for StringRef<'self> {\n+    #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         (**self).iter_bytes(lsb0, f)\n     }"}]}