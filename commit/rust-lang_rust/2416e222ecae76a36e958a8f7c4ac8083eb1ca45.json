{"sha": "2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MTZlMjIyZWNhZTc2YTM2ZTk1OGE4ZjdjNGFjODA4M2ViMWNhNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-09T04:09:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-09T04:09:39Z"}, "message": "Auto merge of #42027 - mjkillough:typedef_assoc_items, r=QuietMisdreavus\n\nDocument direct implementations on type aliases.\n\nThis improves #32077, but is not a complete fix.\n\nFor a type alias `type NewType = AliasedType`, it will include any `impl NewType` and `impl\nTrait for NewType` blocks in the documentation for `NewType`.\n\nA complete fix would include the implementations from the aliased type in the type alias' documentation, so that users have a complete picture of methods that are available on the alias. However, to do this properly would require a fix for #14072, as the alias may affect the type parameters of the type alias, making the documentation difficult to understand. (That is, for `type Result = std::result::Result<(), ()>` we would ideally show documentation for `impl Result<(), ()>`, rather than generic documentation for `impl<T, E> Result<T, E>`).\n\nI think this improvement is worthwhile, as it exposes implementations which are not currently documented by rustdoc. The documentation for the implementations on the aliased type are still accessible by clicking through to the docs for that type. (Although perhaps it's now less obvious to the user that they should click-through to get there).", "tree": {"sha": "482318ec46881f04b96bc0f9721f53134733c812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482318ec46881f04b96bc0f9721f53134733c812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "html_url": "https://github.com/rust-lang/rust/commit/2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9454dd5d2d8786d6eef07e2a7b737ad092e303df", "url": "https://api.github.com/repos/rust-lang/rust/commits/9454dd5d2d8786d6eef07e2a7b737ad092e303df", "html_url": "https://github.com/rust-lang/rust/commit/9454dd5d2d8786d6eef07e2a7b737ad092e303df"}, {"sha": "2da350168df9dc51806fc72040a1022d45431879", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da350168df9dc51806fc72040a1022d45431879", "html_url": "https://github.com/rust-lang/rust/commit/2da350168df9dc51806fc72040a1022d45431879"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "3db0e1444db77894ae53d96e1826bde02d8c29ea", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "patch": "@@ -311,6 +311,9 @@ impl Item {\n     pub fn is_ty_method(&self) -> bool {\n         self.type_() == ItemType::TyMethod\n     }\n+    pub fn is_typedef(&self) -> bool {\n+        self.type_() == ItemType::Typedef\n+    }\n     pub fn is_primitive(&self) -> bool {\n         self.type_() == ItemType::Primitive\n     }"}, {"sha": "fea059e2757d46df851d7556ff2fdeb12aaf86ec", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "patch": "@@ -3082,7 +3082,13 @@ fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            where_clause = WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n            type_ = t.type_)?;\n \n-    document(w, cx, it)\n+    document(w, cx, it)?;\n+\n+    // Render any items associated directly to this alias, as otherwise they\n+    // won't be visible anywhere in the docs. It would be nice to also show\n+    // associated items from the aliased type (see discussion in #32077), but\n+    // we need #14072 to make sense of the generics.\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n impl<'a> fmt::Display for Sidebar<'a> {\n@@ -3092,7 +3098,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         let parentlen = cx.current.len() - if it.is_mod() {1} else {0};\n \n         if it.is_struct() || it.is_trait() || it.is_primitive() || it.is_union()\n-            || it.is_enum() || it.is_mod()\n+            || it.is_enum() || it.is_mod() || it.is_typedef()\n         {\n             write!(fmt, \"<p class='location'>\")?;\n             match it.inner {\n@@ -3101,6 +3107,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n                 clean::UnionItem(..) => write!(fmt, \"Union \")?,\n                 clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n+                clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n                 clean::ModuleItem(..) => if it.is_crate() {\n                     write!(fmt, \"Crate \")?;\n                 } else {\n@@ -3117,6 +3124,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 clean::PrimitiveItem(ref p) => sidebar_primitive(fmt, it, p)?,\n                 clean::UnionItem(ref u) => sidebar_union(fmt, it, u)?,\n                 clean::EnumItem(ref e) => sidebar_enum(fmt, it, e)?,\n+                clean::TypedefItem(ref t, _) => sidebar_typedef(fmt, it, t)?,\n                 clean::ModuleItem(ref m) => sidebar_module(fmt, it, &m.items)?,\n                 _ => (),\n             }\n@@ -3259,6 +3267,16 @@ fn sidebar_primitive(fmt: &mut fmt::Formatter, it: &clean::Item,\n     Ok(())\n }\n \n+fn sidebar_typedef(fmt: &mut fmt::Formatter, it: &clean::Item,\n+                   _t: &clean::Typedef) -> fmt::Result {\n+    let sidebar = sidebar_assoc_items(it);\n+\n+    if !sidebar.is_empty() {\n+        write!(fmt, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar)?;\n+    }\n+    Ok(())\n+}\n+\n fn sidebar_union(fmt: &mut fmt::Formatter, it: &clean::Item,\n                  u: &clean::Union) -> fmt::Result {\n     let mut sidebar = String::new();"}, {"sha": "4ac91d3545149ee8b3b6b8e3eb33a859ffaaed95", "filename": "src/test/rustdoc/typedef.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2416e222ecae76a36e958a8f7c4ac8083eb1ca45/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=2416e222ecae76a36e958a8f7c4ac8083eb1ca45", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait MyTrait {\n+    fn method_on_mytrait() {}\n+}\n+\n+pub struct MyStruct;\n+\n+impl MyStruct {\n+    pub fn method_on_mystruct() {}\n+}\n+\n+// @has typedef/type.MyAlias.html\n+// @has - '//*[@class=\"impl\"]//code' 'impl MyAlias'\n+// @has - '//*[@class=\"impl\"]//code' 'impl MyTrait for MyAlias'\n+// @has - 'Alias docstring'\n+// @has - '//*[@class=\"sidebar\"]//p[@class=\"location\"]' 'Type Definition MyAlias'\n+// @has - '//*[@class=\"sidebar\"]//a[@href=\"#methods\"]' 'Methods'\n+// @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Trait Implementations'\n+/// Alias docstring\n+pub type MyAlias = MyStruct;\n+\n+impl MyAlias {\n+    pub fn method_on_myalias() {}\n+}\n+\n+impl MyTrait for MyAlias {}"}]}