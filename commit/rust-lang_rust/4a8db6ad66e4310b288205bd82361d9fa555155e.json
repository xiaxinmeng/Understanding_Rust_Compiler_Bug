{"sha": "4a8db6ad66e4310b288205bd82361d9fa555155e", "node_id": "C_kwDOAAsO6NoAKDRhOGRiNmFkNjZlNDMxMGIyODgyMDViZDgyMzYxZDlmYTU1NTE1NWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-24T15:08:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-24T15:08:44Z"}, "message": "Merge #10853\n\n10853: fix: Remove possible multiline details in completions r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10316\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7531(this has already been fixed prior, from what I've seen)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "dfedb4af8877543bfd1fb6fd1f1da025cbb3ebaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfedb4af8877543bfd1fb6fd1f1da025cbb3ebaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8db6ad66e4310b288205bd82361d9fa555155e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnlV8CRBK7hj4Ov3rIwAAMWcIABnutPiuxVQ51lqPVDEBPKB1\n2zkzxDABSsyCWVlih9iQK0keN2VA0sFX7hl32M0hioiC1oMcXIpM79l08veoRSnY\nkHgfs80flwN2x8To2uCJq21D3VAsoohk+JnoybE4FuOEWhLqFT2nLdXSy6k8N30j\nMTSnKmEcUwa/PrDiKiQRGz7AW9GLZ4NHuLgqDeU25l7+No0s86ea02KUMwtRfoxz\ng5d5xkHECQqVjGfEzoSKJ4fNT6fx52hoo2LrLkLOHogOHuP92FJbh2ghbkL596GW\nAO6a0ohUScMhBf2pZjIGB34H/Bcd+HK1QS2KS6YS6x57Q0xO3++RZawXNZZMezs=\n=Krts\n-----END PGP SIGNATURE-----\n", "payload": "tree dfedb4af8877543bfd1fb6fd1f1da025cbb3ebaa\nparent 3e4ac8a2c9136052c6394014048095e5c2468859\nparent 0c98a01b3e745312c27f95849c666bf0677e1742\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637766524 +0000\ncommitter GitHub <noreply@github.com> 1637766524 +0000\n\nMerge #10853\n\n10853: fix: Remove possible multiline details in completions r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10316\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7531(this has already been fixed prior, from what I've seen)\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8db6ad66e4310b288205bd82361d9fa555155e", "html_url": "https://github.com/rust-lang/rust/commit/4a8db6ad66e4310b288205bd82361d9fa555155e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8db6ad66e4310b288205bd82361d9fa555155e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4ac8a2c9136052c6394014048095e5c2468859", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ac8a2c9136052c6394014048095e5c2468859", "html_url": "https://github.com/rust-lang/rust/commit/3e4ac8a2c9136052c6394014048095e5c2468859"}, {"sha": "0c98a01b3e745312c27f95849c666bf0677e1742", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c98a01b3e745312c27f95849c666bf0677e1742", "html_url": "https://github.com/rust-lang/rust/commit/0c98a01b3e745312c27f95849c666bf0677e1742"}], "stats": {"total": 144, "additions": 81, "deletions": 63}, "files": [{"sha": "a2662d2932bd999c3bcf7cdd8b06ddf4cd8e753b", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -260,8 +260,8 @@ fn foo() { let _ = lib::S::$0 }\n \"#,\n             expect![[r#\"\n                 fn public_method() fn()\n-                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32 = 1;\n-                ta PublicType      pub type PublicType = u32;\n+                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32;\n+                ta PublicType      pub type PublicType;\n             \"#]],\n         );\n     }\n@@ -392,10 +392,10 @@ impl<T> Sub for Wrap<T> {\n             expect![[r#\"\n                 ta SubTy (as Sub)        type SubTy;\n                 ta Ty (as Super)         type Ty;\n-                ct CONST (as Super)      const CONST: u8 = 0;\n+                ct CONST (as Super)      const CONST: u8;\n                 fn func() (as Super)     fn()\n                 me method(\u2026) (as Super)  fn(&self)\n-                ct C2 (as Sub)           const C2: () = ();\n+                ct C2 (as Sub)           const C2: ();\n                 fn subfunc() (as Sub)    fn()\n                 me submethod(\u2026) (as Sub) fn(&self)\n             \"#]],\n@@ -626,7 +626,7 @@ impl u8 {\n }\n \"#,\n             expect![[r#\"\n-                ct MAX     pub const MAX: Self = 255;\n+                ct MAX     pub const MAX: Self;\n                 me func(\u2026) fn(self)\n             \"#]],\n         );"}, {"sha": "02f711f51d866664cd992c5e36c032e5d2b64616", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -115,7 +115,7 @@ fn add_custom_completions(\n             for import in imports.into_iter() {\n                 builder.add_import(import);\n             }\n-            builder.detail(snip.description.as_deref().unwrap_or_default());\n+            builder.set_detail(snip.description.clone());\n             builder.add_to(acc);\n         },\n     );"}, {"sha": "d4f35b5dcd1ee7d022551f46f670ca4c5b9299ea", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -433,7 +433,7 @@ fn main() { Foo::Fo$0 }\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"{ x: i32, y: i32 }\",\n+                        detail: \"{x: i32, y: i32}\",\n                     },\n                 ]\n             \"#]],"}, {"sha": "26cb73d09c9ef380aa2e0e137ef99c3068db5089", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -1,10 +1,10 @@\n //! Renderer for `enum` variants.\n \n-use std::iter;\n+use std::{iter, mem};\n \n use hir::{HasAttrs, HirDisplay};\n use ide_db::SymbolKind;\n-use itertools::Itertools;\n+use stdx::format_to;\n \n use crate::{\n     item::{CompletionItem, ImportEdit},\n@@ -105,18 +105,31 @@ impl<'a> EnumRender<'a> {\n             .into_iter()\n             .map(|field| (field.name(self.ctx.db()), field.ty(self.ctx.db())));\n \n+        let mut b = String::new();\n+        let mut first_run = true;\n         match self.variant_kind {\n-            hir::StructKind::Tuple | hir::StructKind::Unit => format!(\n-                \"({})\",\n-                detail_types.map(|(_, t)| t.display(self.ctx.db()).to_string()).format(\", \")\n-            ),\n-            hir::StructKind::Record => format!(\n-                \"{{ {} }}\",\n-                detail_types\n-                    .map(|(n, t)| format!(\"{}: {}\", n, t.display(self.ctx.db()).to_string()))\n-                    .format(\", \")\n-            ),\n+            hir::StructKind::Tuple | hir::StructKind::Unit => {\n+                format_to!(b, \"(\");\n+                for (_, t) in detail_types {\n+                    if !mem::take(&mut first_run) {\n+                        format_to!(b, \", \");\n+                    }\n+                    format_to!(b, \"{}\", t.display(self.ctx.db()));\n+                }\n+                format_to!(b, \")\");\n+            }\n+            hir::StructKind::Record => {\n+                format_to!(b, \"{{\");\n+                for (n, t) in detail_types {\n+                    if !mem::take(&mut first_run) {\n+                        format_to!(b, \", \");\n+                    }\n+                    format_to!(b, \"{}: {}\", n, t.display(self.ctx.db()));\n+                }\n+                format_to!(b, \"}}\");\n+            }\n         }\n+        b\n     }\n }\n "}, {"sha": "86dfbf7fc8f9da931d269aa745580a773cd31cae", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -4,6 +4,7 @@ use either::Either;\n use hir::{AsAssocItem, HasSource, HirDisplay};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n+use stdx::format_to;\n use syntax::ast;\n \n use crate::{\n@@ -122,14 +123,11 @@ impl<'a> FunctionRender<'a> {\n \n     fn detail(&self) -> String {\n         let ret_ty = self.func.ret_type(self.ctx.db());\n-        let ret = if ret_ty.is_unit() {\n-            // Omit the return type if it is the unit type\n-            String::new()\n-        } else {\n-            format!(\" {}\", self.ty_display())\n-        };\n-\n-        format!(\"fn({}){}\", self.params_display(), ret)\n+        let mut detail = format!(\"fn({})\", self.params_display());\n+        if !ret_ty.is_unit() {\n+            format_to!(detail, \" -> {}\", ret_ty.display(self.ctx.db()));\n+        }\n+        detail\n     }\n \n     fn params_display(&self) -> String {\n@@ -153,12 +151,6 @@ impl<'a> FunctionRender<'a> {\n         }\n     }\n \n-    fn ty_display(&self) -> String {\n-        let ret_ty = self.func.ret_type(self.ctx.db());\n-\n-        format!(\"-> {}\", ret_ty.display(self.ctx.db()))\n-    }\n-\n     fn params(&self) -> Params {\n         let ast_params = match self.ast_node.param_list() {\n             Some(it) => it,"}, {"sha": "1a3f42b8398e99a487bbd1b1ef6ed6df61a53ba9", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -176,6 +176,9 @@ fn validate_snippet(\n         imports.push(green);\n     }\n     let snippet = snippet.iter().join(\"\\n\");\n-    let description = if description.is_empty() { None } else { Some(description.into()) };\n+    let description = (!description.is_empty())\n+        .then(|| description.split_once('\\n').map_or(description, |(it, _)| it))\n+        .map(ToOwned::to_owned)\n+        .map(Into::into);\n     Some((imports.into_boxed_slice(), snippet, description))\n }"}, {"sha": "eba2a5e1efda9f60aa5c8bd14f8453e604f0ab5a", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -544,11 +544,11 @@ fn func() {\n \"#,\n         expect![[r#\"\n             ev TupleV(\u2026)   (u32)\n-            ev RecordV     { field: u32 }\n+            ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: () = ();\n+            ct ASSOC_CONST const ASSOC_CONST: ();\n             fn assoc_fn()  fn()\n-            ta AssocType   type AssocType = ();\n+            ta AssocType   type AssocType;\n         \"#]],\n     );\n }"}, {"sha": "81c45c64cc1d24333b9e99efa2a2a9545f5dd42f", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -286,11 +286,11 @@ fn func() {\n \"#,\n         expect![[r#\"\n             ev TupleV(\u2026)   (u32)\n-            ev RecordV     { field: u32 }\n+            ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: () = ();\n+            ct ASSOC_CONST const ASSOC_CONST: ();\n             fn assoc_fn()  fn()\n-            ta AssocType   type AssocType = ();\n+            ta AssocType   type AssocType;\n         \"#]],\n     );\n }"}, {"sha": "a76f97f3da3f611ab9ea4b0269a7bb5c9889644c", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -199,7 +199,7 @@ impl Enum {\n fn func(_: Enum::$0) {}\n \"#,\n         expect![[r#\"\n-            ta AssocType type AssocType = ();\n+            ta AssocType type AssocType;\n         \"#]],\n     );\n }"}, {"sha": "e2115cbd2b0244a0633bf33dd2ecdc53bf5a984d", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8db6ad66e4310b288205bd82361d9fa555155e/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=4a8db6ad66e4310b288205bd82361d9fa555155e", "patch": "@@ -1,10 +1,6 @@\n-//! This module contains utilities for turning SyntaxNodes and HIR types\n-//! into types that may be used to render in a UI.\n+//! This module contains utilities for rendering syntax nodes into a string representing their signature.\n \n-use crate::{\n-    ast::{self, AstNode, HasAttrs, HasGenericParams, HasName},\n-    SyntaxKind::{ATTR, COMMENT},\n-};\n+use crate::ast::{self, HasAttrs, HasGenericParams, HasName};\n \n use ast::HasVisibility;\n use stdx::format_to;\n@@ -55,25 +51,39 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n }\n \n pub fn const_label(node: &ast::Const) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n+    let mut s = String::new();\n+    if let Some(vis) = node.visibility() {\n+        format_to!(s, \"{} \", vis);\n+    }\n+    format_to!(s, \"const \");\n+    if let Some(name) = node.name() {\n+        format_to!(s, \"{}\", name);\n+    } else {\n+        format_to!(s, \"?\");\n+    }\n+    format_to!(s, \": \");\n+    if let Some(ty) = node.ty() {\n+        format_to!(s, \"{}\", ty);\n+    } else {\n+        format_to!(s, \"?\");\n+    }\n+    format_to!(s, \";\");\n+    s\n }\n \n pub fn type_label(node: &ast::TypeAlias) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n+    let mut s = String::new();\n+    if let Some(vis) = node.visibility() {\n+        format_to!(s, \"{} \", vis);\n+    }\n+    format_to!(s, \"type \");\n+    if let Some(name) = node.name() {\n+        format_to!(s, \"{}\", name);\n+    } else {\n+        format_to!(s, \"?\");\n+    }\n+    format_to!(s, \";\");\n+    s\n }\n \n pub fn macro_label(node: &ast::Macro) -> String {"}]}