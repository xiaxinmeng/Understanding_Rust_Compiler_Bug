{"sha": "59eac97869eed3a7aa41a96c92021194ddca99f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWFjOTc4NjllZWQzYTdhYTQxYTk2YzkyMDIxMTk0ZGRjYTk5Zjk=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-05T13:41:44Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-12T10:24:59Z"}, "message": "rustbuild: detect cxx for all targets\n\nReplaces #61544\nFixes #59917\n\nWe need CXX to build llvm-libunwind which can be enabled for all\ntargets.\nAs we needed it for all hosts anyways, just move the detection so that\nit is ran for all targets (which contains all hosts) instead.\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "12be302baa8b0c2a6d95883d41f246146dab7d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12be302baa8b0c2a6d95883d41f246146dab7d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59eac97869eed3a7aa41a96c92021194ddca99f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59eac97869eed3a7aa41a96c92021194ddca99f9", "html_url": "https://github.com/rust-lang/rust/commit/59eac97869eed3a7aa41a96c92021194ddca99f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59eac97869eed3a7aa41a96c92021194ddca99f9/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05083c2dee278f79988fc4367c29f1a9b5a2d275", "url": "https://api.github.com/repos/rust-lang/rust/commits/05083c2dee278f79988fc4367c29f1a9b5a2d275", "html_url": "https://github.com/rust-lang/rust/commit/05083c2dee278f79988fc4367c29f1a9b5a2d275"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "ebe03596b8a1ae8085d414aeba4a4fd7379c75c5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -1135,12 +1135,10 @@ impl<'a> Builder<'a> {\n                     .env(format!(\"RANLIB_{}\", target), ranlib);\n             }\n \n-            if let Ok(cxx) = self.cxx(target) {\n-                let cxx = ccacheify(&cxx);\n-                cargo\n-                    .env(format!(\"CXX_{}\", target), &cxx)\n-                    .env(format!(\"CXXFLAGS_{}\", target), cflags);\n-            }\n+            let cxx = ccacheify(&self.cxx(target));\n+            cargo\n+                .env(format!(\"CXX_{}\", target), &cxx)\n+                .env(format!(\"CXXFLAGS_{}\", target), cflags);\n         }\n \n         if (cmd == \"build\" || cmd == \"rustc\")"}, {"sha": "7cdc835f2281bd2397c672b27361c34e0da66379", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -95,29 +95,27 @@ pub fn find(build: &mut Build) {\n         };\n \n         build.cc.insert(target, compiler);\n-        build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n-        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, build.cflags(target, GitRepo::Rustc)));\n-        if let Some(ar) = ar {\n-            build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n-            build.ar.insert(target, ar);\n-        }\n-    }\n+        let cflags = build.cflags(target, GitRepo::Rustc);\n \n-    // For all host triples we need to find a C++ compiler as well\n-    let hosts = build.hosts.iter().cloned().chain(iter::once(build.build)).collect::<HashSet<_>>();\n-    for host in hosts.into_iter() {\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false).opt_level(2).warnings(false).debug(false).cpp(true)\n-           .target(&host).host(&build.build);\n-        let config = build.config.target_config.get(&host);\n+        // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n+        // We'll need one anyways if the target triple is also a host triple\n+        cfg.cpp(true);\n         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n         } else {\n-            set_compiler(&mut cfg, Language::CPlusPlus, host, config, build);\n+            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n         }\n         let compiler = cfg.get_compiler();\n-        build.verbose(&format!(\"CXX_{} = {:?}\", host, compiler.path()));\n-        build.cxx.insert(host, compiler);\n+        build.cxx.insert(target, compiler);\n+\n+        build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n+        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, cflags));\n+        build.verbose(&format!(\"CXX_{} = {:?}\", &target, build.cxx(target)));\n+        build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target, cflags));\n+        if let Some(ar) = ar {\n+            build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n+            build.ar.insert(target, ar);\n+        }\n     }\n }\n "}, {"sha": "e2c741a064ffef5dd5d7a96fdae9d6c726373886", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -782,7 +782,7 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n                !target.contains(\"windows\") &&\n                !target.contains(\"apple\") {\n                 let file = compiler_file(builder,\n-                                         builder.cxx(target).unwrap(),\n+                                         builder.cxx(target),\n                                          target,\n                                          \"libstdc++.a\");\n                 cargo.env(\"LLVM_STATIC_STDCPP\", file);"}, {"sha": "42fbecd8e1c7275c7bd1e3747c756773a09649a4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -815,13 +815,8 @@ impl Build {\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n-    fn cxx(&self, target: Interned<String>) -> Result<&Path, String> {\n-        match self.cxx.get(&target) {\n-            Some(p) => Ok(p.path()),\n-            None => Err(format!(\n-                    \"target `{}` is not configured as a host, only as a target\",\n-                    target))\n-        }\n+    fn cxx(&self, target: Interned<String>) -> &Path {\n+        self.cxx[&target].path()\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden."}, {"sha": "9df1870751f6a6b1b442e56a0f453ef3d9b3240e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -358,7 +358,7 @@ fn configure_cmake(builder: &Builder<'_>,\n \n     let (cc, cxx) = match builder.config.llvm_clang_cl {\n         Some(ref cl) => (cl.as_ref(), cl.as_ref()),\n-        None => (builder.cc(target), builder.cxx(target).unwrap()),\n+        None => (builder.cc(target), builder.cxx(target)),\n     };\n \n     // Handle msvc + ninja + ccache specially (this is what the bots use)"}, {"sha": "5bf08a45b2901ab708bb50434a9742b9df917908", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -146,7 +146,7 @@ pub fn check(build: &mut Build) {\n \n     for host in &build.hosts {\n         if !build.config.dry_run {\n-            cmd_finder.must_have(build.cxx(*host).unwrap());\n+            cmd_finder.must_have(build.cxx(*host));\n         }\n     }\n "}, {"sha": "095ba146caa6e0d46303bbfe292bf2fe73b732dc", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eac97869eed3a7aa41a96c92021194ddca99f9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=59eac97869eed3a7aa41a96c92021194ddca99f9", "patch": "@@ -1211,7 +1211,7 @@ impl Step for Compiletest {\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n-                    .arg(builder.cxx(target).unwrap())\n+                    .arg(builder.cxx(target))\n                     .arg(\"--cflags\")\n                     .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n                     .arg(\"--llvm-components\")"}]}