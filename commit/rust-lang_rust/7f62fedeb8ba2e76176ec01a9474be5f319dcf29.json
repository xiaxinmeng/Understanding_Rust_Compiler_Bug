{"sha": "7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjJmZWRlYjhiYTJlNzYxNzZlYzAxYTk0NzRiZTVmMzE5ZGNmMjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T16:31:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T16:35:30Z"}, "message": "Implement basic statics (#9)", "tree": {"sha": "85832dbc087db9daad32daf1c2aa432c56eb0388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85832dbc087db9daad32daf1c2aa432c56eb0388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "html_url": "https://github.com/rust-lang/rust/commit/7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f62fedeb8ba2e76176ec01a9474be5f319dcf29/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da", "html_url": "https://github.com/rust-lang/rust/commit/c7ed1ce03332e2c4affb0ad04b503415ca8cb1da"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "e077a37b5dc191f6d4ba1605616dfbbf17533ebc", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f62fedeb8ba2e76176ec01a9474be5f319dcf29/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62fedeb8ba2e76176ec01a9474be5f319dcf29/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "patch": "@@ -16,11 +16,14 @@ extern \"C\" {\n     fn puts(s: *const u8);\n }\n \n+static NUM: u8 = 6 * 7;\n+\n #[lang = \"start\"]\n fn start(_main: *const u8, i: isize, _: *const *const u8) -> isize {\n     unsafe {\n         let (ptr, _): (*const u8, usize) = intrinsics::transmute(\"Hello!\\0\");\n         puts(ptr);\n     }\n-    42\n+\n+    NUM as isize\n }"}, {"sha": "06a06b0d450dab924e41785665face5fa252c21a", "filename": "src/constant.rs", "status": "modified", "additions": 62, "deletions": 34, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7f62fedeb8ba2e76176ec01a9474be5f319dcf29/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f62fedeb8ba2e76176ec01a9474be5f319dcf29/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=7f62fedeb8ba2e76176ec01a9474be5f319dcf29", "patch": "@@ -6,17 +6,23 @@ use rustc_mir::interpret::{CompileTimeEvaluator, Memory};\n \n #[derive(Default)]\n pub struct ConstantCx {\n-    todo_allocs: HashSet<AllocId>,\n+    todo: HashSet<TodoItem>,\n     done: HashSet<DataId>,\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+enum TodoItem {\n+    Alloc(AllocId),\n+    Static(DefId),\n+}\n+\n impl ConstantCx {\n     pub fn finalize<'a, 'tcx: 'a, B: Backend>(\n         mut self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         module: &mut Module<B>,\n     ) {\n-        println!(\"todo allocs: {:?}\", self.todo_allocs);\n+        println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n         println!(\"done {:?}\", self.done);\n         for data_id in self.done.drain() {\n@@ -26,14 +32,15 @@ impl ConstantCx {\n }\n \n pub fn codegen_static<'a, 'tcx: 'a, B: Backend>(cx: &mut CodegenCx<'a, 'tcx, B>, def_id: DefId) {\n-    unimpl!(\"static mono item {:?}\", def_id);\n+    cx.constants.todo.insert(TodoItem::Static(def_id));\n }\n \n pub fn codegen_static_ref<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n     static_: &Static<'tcx>,\n ) -> CPlace<'tcx> {\n-    unimpl!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty);\n+    let data_id = data_id_for_static(fx.tcx, fx.module, static_.def_id);\n+    cplace_for_dataid(fx, static_.ty, data_id)\n }\n \n pub fn trans_promoted<'a, 'tcx: 'a>(\n@@ -109,38 +116,36 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n     const_: &'tcx Const<'tcx>,\n ) -> CPlace<'tcx> {\n-    let ty = fx.monomorphize(&const_.ty);\n-    let layout = fx.layout_of(ty);\n-\n     let alloc = fx.tcx.const_value_to_allocation(const_);\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n-    let data_id = get_global_for_alloc_id(fx.module, fx.constants, alloc_id);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    // TODO: does global_value return a ptr of a val?\n-    let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n-    CPlace::Addr(global_ptr, layout)\n+    fx.constants.todo.insert(TodoItem::Alloc(alloc_id));\n+    let data_id = data_id_for_alloc_id(fx.module, alloc_id);\n+    cplace_for_dataid(fx, const_.ty, data_id)\n }\n \n-// If ret.1 is true, then the global didn't exist before\n-fn define_global_for_alloc_id<'a, 'tcx: 'a, B: Backend>(\n-    module: &mut Module<B>,\n-    cx: &mut ConstantCx,\n-    alloc_id: AllocId,\n-) -> DataId {\n+fn data_id_for_alloc_id<B: Backend>(module: &mut Module<B>, alloc_id: AllocId) -> DataId {\n     module\n         .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n         .unwrap()\n }\n \n-fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n-    module: &mut Module<B>,\n-    cx: &mut ConstantCx,\n-    alloc_id: AllocId,\n-) -> DataId {\n-    cx.todo_allocs.insert(alloc_id);\n-    let data_id = define_global_for_alloc_id(module, cx, alloc_id);\n-    data_id\n+fn data_id_for_static<B: Backend>(tcx: TyCtxt, module: &mut Module<B>, def_id: DefId) -> DataId {\n+    let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n+    module\n+        .declare_data(&*symbol_name, Linkage::Export, false)\n+        .unwrap()\n+}\n+\n+fn cplace_for_dataid<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx>,\n+    ty: Ty<'tcx>,\n+    data_id: DataId,\n+) -> CPlace<'tcx> {\n+    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n+    let layout = fx.layout_of(fx.monomorphize(&ty));\n+    CPlace::Addr(global_ptr, layout)\n }\n \n fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n@@ -150,15 +155,38 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n ) {\n     let memory = Memory::<CompileTimeEvaluator>::new(tcx.at(DUMMY_SP), ());\n \n-    while let Some(alloc_id) = pop_set(&mut cx.todo_allocs) {\n-        let data_id = define_global_for_alloc_id(module, cx, alloc_id);\n-        println!(\"alloc_id {} data_id {}\", alloc_id, data_id);\n+    while let Some(todo_item) = pop_set(&mut cx.todo) {\n+        let (data_id, alloc) = match todo_item {\n+            TodoItem::Alloc(alloc_id) => {\n+                println!(\"alloc_id {}\", alloc_id);\n+                let data_id = data_id_for_alloc_id(module, alloc_id);\n+                let alloc = memory.get(alloc_id).unwrap();\n+                (data_id, alloc)\n+            }\n+            TodoItem::Static(def_id) => {\n+                println!(\"static {:?}\", def_id);\n+                let instance = ty::Instance::mono(tcx, def_id);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n+\n+                let alloc = match const_.val {\n+                    ConstValue::ByRef(alloc, n) if n.bytes() == 0 => alloc,\n+                    _ => bug!(\"static const eval returned {:#?}\", const_),\n+                };\n+\n+                let data_id = data_id_for_static(tcx, module, def_id);\n+                (data_id, alloc)\n+            }\n+        };\n+\n+        println!(\"data_id {}\", data_id);\n         if cx.done.contains(&data_id) {\n             continue;\n         }\n \n-        let alloc = memory.get(alloc_id).unwrap();\n-        //let alloc = tcx.alloc_map.lock().get(alloc_id).unwrap();\n         let mut data_ctx = DataContext::new();\n \n         data_ctx.define(\n@@ -167,8 +195,8 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n         );\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n-            cx.todo_allocs.insert(reloc);\n-            let data_id = define_global_for_alloc_id(module, cx, reloc);\n+            cx.todo.insert(TodoItem::Alloc(reloc));\n+            let data_id = data_id_for_alloc_id(module, reloc);\n \n             let reloc_offset = {\n                 let endianness = memory.endianness();\n@@ -186,7 +214,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n         cx.done.insert(data_id);\n     }\n \n-    assert!(cx.todo_allocs.is_empty(), \"{:?}\", cx.todo_allocs);\n+    assert!(cx.todo.is_empty(), \"{:?}\", cx.todo);\n }\n \n fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T> {"}]}