{"sha": "8dbcffed4469f1e92f18d23304e4865b39ec69ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYmNmZmVkNDQ2OWYxZTkyZjE4ZDIzMzA0ZTQ4NjViMzllYzY5ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T09:46:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T09:46:42Z"}, "message": "Auto merge of #6708 - matthiaskrgr:lintcheck, r=flip1995\n\nsome more lintcheck changes\n\n* Explain why tokei is commented out in the lintcheck sources.\n* If we specify a custom sources.toml, don't override the preexisting lintcheck logs, but rather start a new log with the filename depending on the sources.toml name.\n* Start adding a readme.md to clippy_dev and add some information on how to use the lintcheck subcommand.\n* Add support for path/local sources (I needed this for the next item which is: )\n* Collect ICEs that happen while clippy checks crates\n\nchangelog: more lintcheck changes", "tree": {"sha": "5f33c716c7aaca050f27d1e88369f5ff19caf60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f33c716c7aaca050f27d1e88369f5ff19caf60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbcffed4469f1e92f18d23304e4865b39ec69ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbcffed4469f1e92f18d23304e4865b39ec69ec", "html_url": "https://github.com/rust-lang/rust/commit/8dbcffed4469f1e92f18d23304e4865b39ec69ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbcffed4469f1e92f18d23304e4865b39ec69ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb49bad266e3a19a08fb37364aa7b868a5a8c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb49bad266e3a19a08fb37364aa7b868a5a8c94", "html_url": "https://github.com/rust-lang/rust/commit/beb49bad266e3a19a08fb37364aa7b868a5a8c94"}, {"sha": "a6d493d52af32a347550ca7dd3fba77b50412128", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d493d52af32a347550ca7dd3fba77b50412128", "html_url": "https://github.com/rust-lang/rust/commit/a6d493d52af32a347550ca7dd3fba77b50412128"}], "stats": {"total": 111, "additions": 101, "deletions": 10}, "files": [{"sha": "5ac96e2210c89a782685c662482747457c151272", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "patch": "@@ -9,6 +9,7 @@ edition = \"2018\"\n bytecount = \"0.6\"\n clap = \"2.33\"\n flate2 = { version = \"1.0.19\", optional = true }\n+fs_extra = { version = \"1.2.0\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n@@ -21,5 +22,5 @@ ureq = { version = \"2.0.0-rc3\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\"]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\"]\n deny-warnings = []"}, {"sha": "3846e8bd4ccb79a8dee8c62f90fea1a99a10661f", "filename": "clippy_dev/README.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FREADME.md?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "patch": "@@ -0,0 +1,28 @@\n+# Clippy Dev Tool \n+\n+The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s `x.py`.\n+\n+Functionalities (incomplete):\n+\n+## `lintcheck`\n+Runs clippy on a fixed set of crates read from `clippy_dev/lintcheck_crates.toml`\n+and saves logs of the lint warnings into the repo.\n+We can then check the diff and spot new or disappearing warnings.\n+\n+From the repo root, run:\n+````\n+cargo run --target-dir clippy_dev/target --package clippy_dev \\\n+--bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\n+````\n+or\n+````\n+cargo dev-lintcheck\n+````\n+\n+By default the logs will be saved into `lintcheck-logs/lintcheck_crates_logs.txt`.\n+\n+You can set a custom sources.toml by adding `--crates-toml custom.toml`\n+where `custom.toml` must be a relative path from the repo root.\n+\n+The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n+"}, {"sha": "60e70ca4eb22bbb6cfac5704d3764853461ff86d", "filename": "clippy_dev/lintcheck_crates.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Flintcheck_crates.toml?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "patch": "@@ -4,11 +4,13 @@ cargo = {name = \"cargo\", versions = ['0.49.0']}\n iron = {name = \"iron\", versions = ['0.6.1']}\n ripgrep = {name = \"ripgrep\", versions = ['12.1.1']}\n xsv = {name = \"xsv\", versions = ['0.13.0']}\n+# commented out because of 173K clippy::match_same_arms msgs in language_type.rs\n #tokei = { name = \"tokei\", versions = ['12.0.4']}\n rayon = {name = \"rayon\", versions = ['1.5.0']}\n serde = {name = \"serde\", versions = ['1.0.118']}\n # top 10 crates.io dls\n bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+# crash = {name = \"clippy_crash\", path = \"/tmp/clippy_crash\"}\n libc = {name = \"libc\", versions = ['0.2.81']}\n log = {name = \"log\", versions = ['0.4.11']}\n proc-macro2 = {name = \"proc-macro2\", versions = ['1.0.24']}"}, {"sha": "749a791b280e20f423759f270d2fae53ff671044", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "patch": "@@ -31,13 +31,15 @@ struct TomlCrate {\n     versions: Option<Vec<String>>,\n     git_url: Option<String>,\n     git_hash: Option<String>,\n+    path: Option<String>,\n }\n \n-// represents an archive we download from crates.io\n+// represents an archive we download from crates.io, or a git repo, or a local repo\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n enum CrateSource {\n     CratesIo { name: String, version: String },\n     Git { name: String, url: String, commit: String },\n+    Path { name: String, path: PathBuf },\n }\n \n // represents the extracted sourcecode of a crate\n@@ -60,6 +62,7 @@ struct ClippyWarning {\n     column: String,\n     linttype: String,\n     message: String,\n+    ice: bool,\n }\n \n impl std::fmt::Display for ClippyWarning {\n@@ -111,7 +114,7 @@ impl CrateSource {\n             },\n             CrateSource::Git { name, url, commit } => {\n                 let repo_path = {\n-                    let mut repo_path = PathBuf::from(\"target/lintcheck/downloads\");\n+                    let mut repo_path = PathBuf::from(\"target/lintcheck/crates\");\n                     // add a -git suffix in case we have the same crate from crates.io and a git repo\n                     repo_path.push(format!(\"{}-git\", name));\n                     repo_path\n@@ -139,6 +142,37 @@ impl CrateSource {\n                     path: repo_path,\n                 }\n             },\n+            CrateSource::Path { name, path } => {\n+                use fs_extra::dir;\n+\n+                // simply copy the entire directory into our target dir\n+                let copy_dest = PathBuf::from(\"target/lintcheck/crates/\");\n+\n+                // the source path of the crate we copied,  ${copy_dest}/crate_name\n+                let crate_root = copy_dest.join(name); // .../crates/local_crate\n+\n+                if !crate_root.exists() {\n+                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n+\n+                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).expect(&format!(\n+                        \"Failed to copy from {}, to  {}\",\n+                        path.display(),\n+                        crate_root.display()\n+                    ));\n+                } else {\n+                    println!(\n+                        \"Not copying {} to {}, destination already exists\",\n+                        path.display(),\n+                        crate_root.display()\n+                    );\n+                }\n+\n+                Crate {\n+                    version: String::from(\"local\"),\n+                    name: name.clone(),\n+                    path: crate_root,\n+                }\n+            },\n         }\n     }\n }\n@@ -176,8 +210,8 @@ impl Crate {\n         let output_lines = stdout.lines();\n         let warnings: Vec<ClippyWarning> = output_lines\n             .into_iter()\n-            // get all clippy warnings\n-            .filter(|line| line.contains(\"clippy::\"))\n+            // get all clippy warnings and ICEs\n+            .filter(|line| line.contains(\"clippy::\") || line.contains(\"internal compiler error: \"))\n             .map(|json_msg| parse_json_message(json_msg, &self))\n             .collect();\n         warnings\n@@ -192,8 +226,10 @@ fn build_clippy() {\n }\n \n // get a list of CrateSources we want to check from a \"lintcheck_crates.toml\" file.\n-fn read_crates(toml_path: Option<&str>) -> Vec<CrateSource> {\n+fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n     let toml_path = PathBuf::from(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\"));\n+    // save it so that we can use the name of the sources.toml as name for the logfile later.\n+    let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n         std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: CrateList =\n@@ -209,6 +245,13 @@ fn read_crates(toml_path: Option<&str>) -> Vec<CrateSource> {\n     // multiple Cratesources)\n     let mut crate_sources = Vec::new();\n     tomlcrates.into_iter().for_each(|tk| {\n+        if let Some(ref path) = tk.path {\n+            crate_sources.push(CrateSource::Path {\n+                name: tk.name.clone(),\n+                path: PathBuf::from(path),\n+            });\n+        }\n+\n         // if we have multiple versions, save each one\n         if let Some(ref versions) = tk.versions {\n             versions.iter().for_each(|ver| {\n@@ -232,12 +275,15 @@ fn read_crates(toml_path: Option<&str>) -> Vec<CrateSource> {\n         {\n             eprintln!(\"tomlkrate: {:?}\", tk);\n             if tk.git_hash.is_some() != tk.git_url.is_some() {\n-                panic!(\"Encountered TomlCrate with only one of git_hash and git_url!\")\n+                panic!(\"Error: Encountered TomlCrate with only one of git_hash and git_url!\");\n+            }\n+            if tk.path.is_some() && (tk.git_hash.is_some() || tk.versions.is_some()) {\n+                panic!(\"Error: TomlCrate can only have one of 'git_.*', 'version' or 'path' fields\");\n             }\n             unreachable!(\"Failed to translate TomlCrate into CrateSource!\");\n         }\n     });\n-    crate_sources\n+    (toml_filename, crate_sources)\n }\n \n // extract interesting data from a json lint message\n@@ -261,6 +307,7 @@ fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n             .into(),\n         linttype: jmsg[\"message\"][\"code\"][\"code\"].to_string().trim_matches('\"').into(),\n         message: jmsg[\"message\"][\"message\"].to_string().trim_matches('\"').into(),\n+        ice: json_message.contains(\"internal compiler error: \"),\n     }\n }\n \n@@ -288,14 +335,15 @@ pub fn run(clap_config: &ArgMatches) {\n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     // flatten into one big list of warnings\n \n-    let crates = read_crates(clap_config.value_of(\"crates-toml\"));\n+    let (filename, crates) = read_crates(clap_config.value_of(\"crates-toml\"));\n \n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n         // if we don't have the specified crate in the .toml, throw an error\n         if !crates.iter().any(|krate| {\n             let name = match krate {\n                 CrateSource::CratesIo { name, .. } => name,\n                 CrateSource::Git { name, .. } => name,\n+                CrateSource::Path { name, .. } => name,\n             };\n             name == only_one_crate\n         }) {\n@@ -326,6 +374,13 @@ pub fn run(clap_config: &ArgMatches) {\n \n     // generate some stats:\n \n+    // grab crashes/ICEs, save the crate name and the ice message\n+    let ices: Vec<(&String, &String)> = clippy_warnings\n+        .iter()\n+        .filter(|warning| warning.ice)\n+        .map(|w| (&w.crate_name, &w.message))\n+        .collect();\n+\n     // count lint type occurrences\n     let mut counter: HashMap<&String, usize> = HashMap::new();\n     clippy_warnings\n@@ -351,5 +406,10 @@ pub fn run(clap_config: &ArgMatches) {\n     // save the text into lintcheck-logs/logs.txt\n     let mut text = clippy_ver; // clippy version number on top\n     text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n-    write(\"lintcheck-logs/logs.txt\", text).unwrap();\n+    text.push_str(\"ICEs:\\n\");\n+    ices.iter()\n+        .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n+\n+    let file = format!(\"lintcheck-logs/{}_logs.txt\", filename);\n+    write(file, text).unwrap();\n }"}, {"sha": "3bc7758033b2836eb6035a54f31822b4617dffbc", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "previous_filename": "lintcheck-logs/logs.txt"}]}