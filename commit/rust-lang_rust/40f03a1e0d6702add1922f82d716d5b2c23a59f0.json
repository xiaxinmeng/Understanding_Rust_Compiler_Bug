{"sha": "40f03a1e0d6702add1922f82d716d5b2c23a59f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZjAzYTFlMGQ2NzAyYWRkMTkyMmY4MmQ3MTZkNWIyYzIzYTU5ZjA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-25T15:54:09Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-11T18:09:25Z"}, "message": "Refactor call_with_pp functions to not take a payload.\n\nThis is needless noise; the closure we take is FnOnce, so move || {} is\nfine to pass other parameters necessary.", "tree": {"sha": "68ef4a0bc37d6c768bc46ee61e4932aa8702c7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ef4a0bc37d6c768bc46ee61e4932aa8702c7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f03a1e0d6702add1922f82d716d5b2c23a59f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f03a1e0d6702add1922f82d716d5b2c23a59f0", "html_url": "https://github.com/rust-lang/rust/commit/40f03a1e0d6702add1922f82d716d5b2c23a59f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f03a1e0d6702add1922f82d716d5b2c23a59f0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03431368052effca858cc5aa7dad140948562470", "url": "https://api.github.com/repos/rust-lang/rust/commits/03431368052effca858cc5aa7dad140948562470", "html_url": "https://github.com/rust-lang/rust/commit/03431368052effca858cc5aa7dad140948562470"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "269363fdd2f98e270d3c2a991f4aec2c5d45ad33", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/40f03a1e0d6702add1922f82d716d5b2c23a59f0/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f03a1e0d6702add1922f82d716d5b2c23a59f0/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=40f03a1e0d6702add1922f82d716d5b2c23a59f0", "patch": "@@ -163,67 +163,65 @@ pub fn parse_pretty(sess: &Session,\n \n impl PpSourceMode {\n     /// Constructs a `PrinterSupport` object and passes it to `f`.\n-    fn call_with_pp_support<'tcx, A, B, F>(&self,\n+    fn call_with_pp_support<'tcx, A, F>(&self,\n                                            sess: &'tcx Session,\n                                            hir_map: Option<&hir_map::Map<'tcx>>,\n-                                           payload: B,\n                                            f: F)\n                                            -> A\n-        where F: FnOnce(&PrinterSupport, B) -> A\n+        where F: FnOnce(&PrinterSupport) -> A\n     {\n         match *self {\n             PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n                 let annotation = NoAnn {\n                     sess: sess,\n                     hir_map: hir_map.map(|m| m.clone()),\n                 };\n-                f(&annotation, payload)\n+                f(&annotation)\n             }\n \n             PpmIdentified | PpmExpandedIdentified => {\n                 let annotation = IdentifiedAnnotation {\n                     sess: sess,\n                     hir_map: hir_map.map(|m| m.clone()),\n                 };\n-                f(&annotation, payload)\n+                f(&annotation)\n             }\n             PpmExpandedHygiene => {\n                 let annotation = HygieneAnnotation {\n                     sess: sess,\n                 };\n-                f(&annotation, payload)\n+                f(&annotation)\n             }\n             _ => panic!(\"Should use call_with_pp_support_hir\"),\n         }\n     }\n-    fn call_with_pp_support_hir<'tcx, A, B, F>(&self,\n+    fn call_with_pp_support_hir<'tcx, A, F>(&self,\n                                                sess: &'tcx Session,\n                                                hir_map: &hir_map::Map<'tcx>,\n                                                analysis: &ty::CrateAnalysis,\n                                                resolutions: &Resolutions,\n                                                arena: &'tcx DroplessArena,\n                                                arenas: &'tcx GlobalArenas<'tcx>,\n                                                id: &str,\n-                                               payload: B,\n                                                f: F)\n                                                -> A\n-        where F: FnOnce(&HirPrinterSupport, B, &hir::Crate) -> A\n+        where F: FnOnce(&HirPrinterSupport, &hir::Crate) -> A\n     {\n         match *self {\n             PpmNormal => {\n                 let annotation = NoAnn {\n                     sess: sess,\n                     hir_map: Some(hir_map.clone()),\n                 };\n-                f(&annotation, payload, hir_map.forest.krate())\n+                f(&annotation, hir_map.forest.krate())\n             }\n \n             PpmIdentified => {\n                 let annotation = IdentifiedAnnotation {\n                     sess: sess,\n                     hir_map: Some(hir_map.clone()),\n                 };\n-                f(&annotation, payload, hir_map.forest.krate())\n+                f(&annotation, hir_map.forest.krate())\n             }\n             PpmTyped => {\n                 abort_on_err(driver::phase_3_run_analysis_passes(sess,\n@@ -240,7 +238,7 @@ impl PpSourceMode {\n                         tables: Cell::new(&empty_tables)\n                     };\n                     let _ignore = tcx.dep_graph.in_ignore();\n-                    f(&annotation, payload, hir_map.forest.krate())\n+                    f(&annotation, hir_map.forest.krate())\n                 }),\n                              sess)\n             }\n@@ -825,15 +823,15 @@ pub fn print_after_parsing(sess: &Session,\n     if let PpmSource(s) = ppm {\n         // Silently ignores an identified node.\n         let out: &mut Write = &mut out;\n-        s.call_with_pp_support(sess, None, box out, |annotation, out| {\n+        s.call_with_pp_support(sess, None, move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n                 pprust::print_crate(sess.codemap(),\n                                     &sess.parse_sess,\n                                     krate,\n                                     src_name.to_string(),\n                                     &mut rdr,\n-                                    out,\n+                                    box out,\n                                     annotation.pp_ann(),\n                                     false)\n             })\n@@ -883,15 +881,15 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             (PpmSource(s), _) => {\n                 // Silently ignores an identified node.\n                 let out: &mut Write = &mut out;\n-                s.call_with_pp_support(sess, Some(hir_map), box out, |annotation, out| {\n+                s.call_with_pp_support(sess, Some(hir_map), move |annotation| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.codemap(),\n                                         &sess.parse_sess,\n                                         krate,\n                                         src_name.to_string(),\n                                         &mut rdr,\n-                                        out,\n+                                        box out,\n                                         annotation.pp_ann(),\n                                         true)\n                 })\n@@ -906,16 +904,15 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            arena,\n                                            arenas,\n                                            crate_name,\n-                                           box out,\n-                                           |annotation, out, krate| {\n+                                           move |annotation, krate| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust_hir::print_crate(sess.codemap(),\n                                             &sess.parse_sess,\n                                             krate,\n                                             src_name.to_string(),\n                                             &mut rdr,\n-                                            out,\n+                                            box out,\n                                             annotation.pp_ann(),\n                                             true)\n                 })\n@@ -930,8 +927,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            arena,\n                                            arenas,\n                                            crate_name,\n-                                           (out, uii),\n-                                           |annotation, (out, uii), _| {\n+                                           move |annotation, _| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     let hir_map = annotation.hir_map().expect(\"--unpretty missing HIR map\");"}]}