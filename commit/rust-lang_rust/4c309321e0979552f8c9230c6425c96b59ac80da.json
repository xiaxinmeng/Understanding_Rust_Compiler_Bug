{"sha": "4c309321e0979552f8c9230c6425c96b59ac80da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzA5MzIxZTA5Nzk1NTJmOGM5MjMwYzY0MjVjOTZiNTlhYzgwZGE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-08T19:33:00Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-08T19:39:44Z"}, "message": "Try to use static crate if we cannot find the dynamic one. This supports\nthe common case of wanting to link statically with the project's libraries\nbut dynamically with the system ones.", "tree": {"sha": "dacff7a15dd7719e9a28cdc1fa061a236083b560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dacff7a15dd7719e9a28cdc1fa061a236083b560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c309321e0979552f8c9230c6425c96b59ac80da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c309321e0979552f8c9230c6425c96b59ac80da", "html_url": "https://github.com/rust-lang/rust/commit/4c309321e0979552f8c9230c6425c96b59ac80da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c309321e0979552f8c9230c6425c96b59ac80da/comments", "author": null, "committer": null, "parents": [{"sha": "94f0e9d956ed3169848ee334df23ffa724001d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f0e9d956ed3169848ee334df23ffa724001d80", "html_url": "https://github.com/rust-lang/rust/commit/94f0e9d956ed3169848ee334df23ffa724001d80"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "7268516873198fa14ee87a8ae84912c82a687cff", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c309321e0979552f8c9230c6425c96b59ac80da/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c309321e0979552f8c9230c6425c96b59ac80da/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=4c309321e0979552f8c9230c6425c96b59ac80da", "patch": "@@ -122,9 +122,9 @@ fn metadata_matches(&vec[u8] crate_data,\n     ret true;\n }\n \n-fn default_native_lib_naming(session::session sess) ->\n+fn default_native_lib_naming(session::session sess, bool static) ->\n    rec(str prefix, str suffix) {\n-    if (sess.get_opts().static) {\n+    if (static) {\n         ret rec(prefix=\"lib\", suffix=\".rlib\");\n     }\n     alt (sess.get_targ_cfg().os) {\n@@ -158,7 +158,20 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n         }\n     };\n \n-    auto nn = default_native_lib_naming(sess);\n+    auto nn = default_native_lib_naming(sess, sess.get_opts().static);\n+    auto x = find_library_crate_aux(nn, crate_name, metas,\n+                                    library_search_paths);\n+    if (x != none || sess.get_opts().static) {\n+        ret x;\n+    }\n+    auto nn2 = default_native_lib_naming(sess, true);\n+    ret find_library_crate_aux(nn2, crate_name, metas, library_search_paths);\n+}\n+\n+fn find_library_crate_aux(&rec(str prefix, str suffix) nn, str crate_name,\n+                          &(@ast::meta_item)[] metas,\n+                          &vec[str] library_search_paths) ->\n+                          option::t[tup(str, vec[u8])] {\n     let str prefix = nn.prefix + crate_name;\n     // FIXME: we could probably use a 'glob' function in std::fs but it will\n     // be much easier to write once the unsafe module knows more about FFI"}]}