{"sha": "318ed0592077c8ab7dd957e201c7fe8607f1994f", "node_id": "C_kwDOAAsO6NoAKDMxOGVkMDU5MjA3N2M4YWI3ZGQ5NTdlMjAxYzdmZTg2MDdmMTk5NGY", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-08-21T09:03:54Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-08-21T09:03:54Z"}, "message": "Reduce code duplication\n\nOnly check for the kind of loop once instead of re-desugaring it.", "tree": {"sha": "8edf8acfbf5296c7767aa7f9091e258c2c266f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edf8acfbf5296c7767aa7f9091e258c2c266f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/318ed0592077c8ab7dd957e201c7fe8607f1994f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmMB9RQACgkQHKDfKvWd\naKVAmhAAmNhkY/5jUGeTeUxhxlJK1WGE9ISwV74ztXOWUcLqGQ0NHNaxBSoI4cKo\nZuRIKeerOx0UHqoJ1F5F+dqlii4W94+xkRqiE6gjaEzGs23el/sxgkNQ6xom7qK5\n+3GqL+Fsm5JyoMcaY/e8VwRI+4qNcOYBy3U/oN7mzLTkyfneLyNmWbsElb/eIQ08\nJKeyfwUmyrH31ZTedL2g1zWdrssmNwdBk04SuEl83D4eqcQhEXIzAtjnGDJoZuIP\n/p9i55Qdph7z9tYt33/Mv31t0eMyIL+XCjajCl32y56pA3lDzpaK1PJK5hhRztAq\n1oL1Ph8/EmiJovn9J3qq6Vh4R15kflWlF6lA4GCsex2qCsaTZlZAeZ1SjmtG8XEp\n/zfPIAnzA31wD8FOUcvYeGheT8Rn9JdDjmtAaJVKe0Bq1Eb1PnEfKeUL3BSkAFgu\nt7vzXjrHCFn8BguFZ8ieQ57qXY4dTZPWfS7ELJJBJNaDeNPfnH23LkmzC3a6eLwa\nCJA/9omq/BTQ9GkdVrzCNcReqNq8TWyH97x4l+V3kEtzjEF93bi7UGKHt/eGlbGU\nfKy8u+0+xgG9QiG8B/SW9L8AYoAFcDKOzZzOihDA8bFBlPXDtDjP4X2IXBrPObJE\nOkRw3RbP4u11cjcWLRfGLrtZTb28tNyVAVDU+SUXgHoTiREFfmM=\n=QARv\n-----END PGP SIGNATURE-----", "payload": "tree 8edf8acfbf5296c7767aa7f9091e258c2c266f53\nparent 5048af7a3a0c91e0fc5964c4bf6b373898b320aa\nauthor Philipp Krones <hello@philkrones.com> 1661072634 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1661072634 +0200\n\nReduce code duplication\n\nOnly check for the kind of loop once instead of re-desugaring it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/318ed0592077c8ab7dd957e201c7fe8607f1994f", "html_url": "https://github.com/rust-lang/rust/commit/318ed0592077c8ab7dd957e201c7fe8607f1994f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/318ed0592077c8ab7dd957e201c7fe8607f1994f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5048af7a3a0c91e0fc5964c4bf6b373898b320aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5048af7a3a0c91e0fc5964c4bf6b373898b320aa", "html_url": "https://github.com/rust-lang/rust/commit/5048af7a3a0c91e0fc5964c4bf6b373898b320aa"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "6d987f393fa5ce353c2d38dae517e5cdf18f1a6d", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/318ed0592077c8ab7dd957e201c7fe8607f1994f/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318ed0592077c8ab7dd957e201c7fe8607f1994f/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=318ed0592077c8ab7dd957e201c7fe8607f1994f", "patch": "@@ -185,19 +185,15 @@ struct IterFunctionVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx Block<'tcx>) {\n         for (expr, hir_id) in block.stmts.iter().filter_map(get_expr_and_hir_id_from_stmt) {\n-            if is_loop(expr) {\n+            if check_loop_kind(expr).is_some() {\n                 continue;\n             }\n             self.visit_block_expr(expr, hir_id);\n         }\n         if let Some(expr) = block.expr {\n-            if is_loop(expr) {\n-                if let Some(higher::WhileLet { let_expr, .. }) = higher::WhileLet::hir(expr) {\n-                    self.visit_block_expr(let_expr, None);\n-                } else if let Some(higher::While { condition, .. }) = higher::While::hir(expr) {\n-                    self.visit_block_expr(condition, None);\n-                } else if let Some(higher::ForLoop { arg, .. }) = higher::ForLoop::hir(expr) {\n-                    self.visit_block_expr(arg, None);\n+            if let Some(loop_kind) = check_loop_kind(expr) {\n+                if let LoopKind::Conditional(block_expr) = loop_kind {\n+                    self.visit_block_expr(block_expr, None);\n                 }\n             } else {\n                 self.visit_block_expr(expr, None);\n@@ -278,21 +274,26 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n     }\n }\n \n-fn is_loop(expr: &Expr<'_>) -> bool {\n-    if let Some(higher::WhileLet { .. }) = higher::WhileLet::hir(expr) {\n-        return true;\n+enum LoopKind<'tcx> {\n+    Conditional(&'tcx Expr<'tcx>),\n+    Loop,\n+}\n+\n+fn check_loop_kind<'tcx>(expr: &Expr<'tcx>) -> Option<LoopKind<'tcx>> {\n+    if let Some(higher::WhileLet { let_expr, .. }) = higher::WhileLet::hir(expr) {\n+        return Some(LoopKind::Conditional(let_expr));\n     }\n-    if let Some(higher::While { .. }) = higher::While::hir(expr) {\n-        return true;\n+    if let Some(higher::While { condition, .. }) = higher::While::hir(expr) {\n+        return Some(LoopKind::Conditional(condition));\n     }\n-    if let Some(higher::ForLoop { .. }) = higher::ForLoop::hir(expr) {\n-        return true;\n+    if let Some(higher::ForLoop { arg, .. }) = higher::ForLoop::hir(expr) {\n+        return Some(LoopKind::Conditional(arg));\n     }\n     if let ExprKind::Loop { .. } = expr.kind {\n-        return true;\n+        return Some(LoopKind::Loop);\n     }\n \n-    false\n+    None\n }\n \n impl<'tcx> IterFunctionVisitor<'_, 'tcx> {"}]}