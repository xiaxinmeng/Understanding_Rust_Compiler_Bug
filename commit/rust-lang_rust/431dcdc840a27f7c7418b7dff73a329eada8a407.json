{"sha": "431dcdc840a27f7c7418b7dff73a329eada8a407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWRjZGM4NDBhMjdmN2M3NDE4YjdkZmY3M2EzMjllYWRhOGE0MDc=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-10-17T20:33:08Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-09T04:40:39Z"}, "message": "Runtime removal: refactor tty\n\nThis patch continues runtime removal by moving the tty implementations\ninto `sys`.\n\nBecause this eliminates APIs in `libnative` and `librustrt`, it is a:\n\n[breaking-change]\n\nThis functionality is likely to be available publicly, in some form,\nfrom `std` in the future.", "tree": {"sha": "4e77fc459607350626e306d4400faf827a9c9092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e77fc459607350626e306d4400faf827a9c9092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431dcdc840a27f7c7418b7dff73a329eada8a407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431dcdc840a27f7c7418b7dff73a329eada8a407", "html_url": "https://github.com/rust-lang/rust/commit/431dcdc840a27f7c7418b7dff73a329eada8a407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431dcdc840a27f7c7418b7dff73a329eada8a407/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f1193bb1bb66610f479cd78e3dc5526e93058d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f1193bb1bb66610f479cd78e3dc5526e93058d", "html_url": "https://github.com/rust-lang/rust/commit/b8f1193bb1bb66610f479cd78e3dc5526e93058d"}], "stats": {"total": 208, "additions": 112, "deletions": 96}, "files": [{"sha": "8c7751588cef36c4b74e914ff6e3208f342e2985", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -99,30 +99,4 @@ impl IoFactory {\n }\n \n impl rtio::IoFactory for IoFactory {\n-    #[cfg(unix)]\n-    fn tty_open(&mut self, fd: c_int, _readable: bool)\n-                -> IoResult<Box<rtio::RtioTTY + Send>> {\n-        if unsafe { libc::isatty(fd) } != 0 {\n-            Ok(box file::FileDesc::new(fd, true) as Box<rtio::RtioTTY + Send>)\n-        } else {\n-            Err(IoError {\n-                code: libc::ENOTTY as uint,\n-                extra: 0,\n-                detail: None,\n-            })\n-        }\n-    }\n-    #[cfg(windows)]\n-    fn tty_open(&mut self, fd: c_int, _readable: bool)\n-                -> IoResult<Box<rtio::RtioTTY + Send>> {\n-        if tty::is_tty(fd) {\n-            Ok(box tty::WindowsTTY::new(fd) as Box<rtio::RtioTTY + Send>)\n-        } else {\n-            Err(IoError {\n-                code: libc::ERROR_INVALID_HANDLE as uint,\n-                extra: 0,\n-                detail: None,\n-            })\n-        }\n-    }\n }"}, {"sha": "158d596ea136bc13d619fb83bb127ab95784aedb", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -36,7 +36,7 @@ use kinds::Send;\n use libc;\n use option::{Option, Some, None};\n use boxed::Box;\n-use sys::fs::FileDesc;\n+use sys::{fs, tty};\n use result::{Ok, Err};\n use rt;\n use rt::local::Local;\n@@ -74,17 +74,15 @@ use uint;\n // tl;dr; TTY works on everything but when windows stdout is redirected, in that\n //        case pipe also doesn't work, but magically file does!\n enum StdSource {\n-    TTY(Box<RtioTTY + Send>),\n-    File(FileDesc),\n+    TTY(tty::TTY),\n+    File(fs::FileDesc),\n }\n \n-fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n-    LocalIo::maybe_raise(|io| {\n-        Ok(match io.tty_open(fd, readable) {\n-            Ok(tty) => f(TTY(tty)),\n-            Err(_) => f(File(FileDesc::new(fd, false))),\n-        })\n-    }).map_err(IoError::from_rtio_error).unwrap()\n+fn src<T>(fd: libc::c_int, _readable: bool, f: |StdSource| -> T) -> T {\n+    match tty::TTY::new(fd) {\n+        Ok(tty) => f(TTY(tty)),\n+        Err(_) => f(File(fs::FileDesc::new(fd, false))),\n+    }\n }\n \n local_data_key!(local_stdout: Box<Writer + Send>)\n@@ -278,7 +276,7 @@ impl Reader for StdReader {\n                 // print!'d prompt not being shown until after the user hits\n                 // enter.\n                 flush();\n-                tty.read(buf).map_err(IoError::from_rtio_error)\n+                tty.read(buf).map(|i| i as uint)\n             },\n             File(ref mut file) => file.read(buf).map(|i| i as uint),\n         };\n@@ -313,7 +311,7 @@ impl StdWriter {\n     pub fn winsize(&mut self) -> IoResult<(int, int)> {\n         match self.inner {\n             TTY(ref mut tty) => {\n-                tty.get_winsize().map_err(IoError::from_rtio_error)\n+                tty.get_winsize()\n             }\n             File(..) => {\n                 Err(IoError {\n@@ -335,7 +333,7 @@ impl StdWriter {\n     pub fn set_raw(&mut self, raw: bool) -> IoResult<()> {\n         match self.inner {\n             TTY(ref mut tty) => {\n-                tty.set_raw(raw).map_err(IoError::from_rtio_error)\n+                tty.set_raw(raw)\n             }\n             File(..) => {\n                 Err(IoError {\n@@ -372,7 +370,7 @@ impl Writer for StdWriter {\n         let max_size = if cfg!(windows) {8192} else {uint::MAX};\n         for chunk in buf.chunks(max_size) {\n             try!(match self.inner {\n-                TTY(ref mut tty) => tty.write(chunk).map_err(IoError::from_rtio_error),\n+                TTY(ref mut tty) => tty.write(chunk),\n                 File(ref mut file) => file.write(chunk),\n             })\n         }"}, {"sha": "c5f8214a5c38c92703d4f1837db9f4229adad6d5", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -48,6 +48,14 @@ pub fn short_write(n: uint, desc: &'static str) -> IoError {\n     }\n }\n \n+pub fn unimpl() -> IoError {\n+    IoError {\n+        kind: io::IoUnavailable,\n+        desc: \"operations not yet supported\",\n+        detail: None,\n+    }\n+}\n+\n // unix has nonzero values as errors\n pub fn mkerr_libc<Int: num::Zero>(ret: Int) -> IoResult<()> {\n     if !ret.is_zero() {"}, {"sha": "2d02c34e958c6394d064b0510f65e2061d29852d", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -137,25 +137,6 @@ impl FileDesc {\n     }\n }\n \n-/*\n-\n-impl RtioTTY for FileDesc {\n-    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n-        self.inner_read(buf)\n-    }\n-    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        self.inner_write(buf)\n-    }\n-    fn set_raw(&mut self, _raw: bool) -> IoResult<()> {\n-        Err(super::unimpl())\n-    }\n-    fn get_winsize(&mut self) -> IoResult<(int, int)> {\n-        Err(super::unimpl())\n-    }\n-    fn isatty(&self) -> bool { false }\n-}\n-*/\n-\n impl Drop for FileDesc {\n     fn drop(&mut self) {\n         // closing stdio file handles makes no sense, so never do it. Also, note"}, {"sha": "4bd1dd2016328b08028884b9708bec60fc43694a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -35,6 +35,7 @@ pub mod pipe;\n pub mod helper_signal;\n pub mod process;\n pub mod timer;\n+pub mod tty;\n \n pub mod addrinfo {\n     pub use sys_common::net::get_host_addresses;"}, {"sha": "28c17fd4966c09468fe1df7f9570e67cd911ab6e", "filename": "src/libstd/sys/unix/tty.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use sys::fs::FileDesc;\n+use prelude::*;\n+use libc::{mod, c_int};\n+use io::{mod, IoResult, IoError};\n+use sys_common;\n+\n+pub struct TTY {\n+    pub fd: FileDesc,\n+}\n+\n+impl TTY {\n+    pub fn new(fd: c_int) -> IoResult<TTY> {\n+        if unsafe { libc::isatty(fd) } != 0 {\n+            Ok(TTY { fd: FileDesc::new(fd, true) })\n+        } else {\n+            Err(IoError {\n+                kind: io::MismatchedFileTypeForOperation,\n+                desc: \"file descriptor is not a TTY\",\n+                detail: None,\n+            })\n+        }\n+    }\n+\n+    pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n+        self.fd.read(buf)\n+    }\n+    pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n+        self.fd.write(buf)\n+    }\n+    pub fn set_raw(&mut self, _raw: bool) -> IoResult<()> {\n+        Err(sys_common::unimpl())\n+    }\n+    pub fn get_winsize(&mut self) -> IoResult<(int, int)> {\n+        Err(sys_common::unimpl())\n+    }\n+    pub fn isatty(&self) -> bool { false }\n+}"}, {"sha": "98da4d4e7633d13773d39149f6d09529f0f3f7e9", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -42,6 +42,7 @@ pub mod pipe;\n pub mod helper_signal;\n pub mod process;\n pub mod timer;\n+pub mod tty;\n \n pub mod addrinfo {\n     pub use sys_common::net::get_host_addresses;"}, {"sha": "7d001e6394c30ff9752b64574ccb8d25a0f8e003", "filename": "src/libstd/sys/windows/tty.rs", "status": "renamed", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431dcdc840a27f7c7418b7dff73a329eada8a407/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=431dcdc840a27f7c7418b7dff73a329eada8a407", "patch": "@@ -33,16 +33,16 @@ use super::c::{ENABLE_PROCESSED_INPUT, ENABLE_QUICK_EDIT_MODE};\n use libc::{c_int, HANDLE, LPDWORD, DWORD, LPVOID};\n use libc::{get_osfhandle, CloseHandle};\n use libc::types::os::arch::extra::LPCVOID;\n-use std::io::MemReader;\n-use std::ptr;\n-use std::rt::rtio::{IoResult, IoError, RtioTTY};\n-use std::str::from_utf8;\n+use io::{mod, IoError, IoResult, MemReader};\n+use prelude::*;\n+use ptr;\n+use str::from_utf8;\n \n fn invalid_encoding() -> IoError {\n     IoError {\n-        code: ERROR_ILLEGAL_CHARACTER as uint,\n-        extra: 0,\n-        detail: Some(\"text was not valid unicode\".to_string()),\n+        kind: io::InvalidInput,\n+        desc: \"text was not valid unicode\",\n+        detail: None,\n     }\n }\n \n@@ -56,40 +56,37 @@ pub fn is_tty(fd: c_int) -> bool {\n     }\n }\n \n-pub struct WindowsTTY {\n+pub struct TTY {\n     closeme: bool,\n     handle: HANDLE,\n     utf8: MemReader,\n }\n \n-impl WindowsTTY {\n-    pub fn new(fd: c_int) -> WindowsTTY {\n-        // If the file descriptor is one of stdin, stderr, or stdout\n-        // then it should not be closed by us\n-        let closeme = match fd {\n-            0...2 => false,\n-            _ => true,\n-        };\n-        let handle = unsafe { get_osfhandle(fd) as HANDLE };\n-        WindowsTTY {\n-            handle: handle,\n-            utf8: MemReader::new(Vec::new()),\n-            closeme: closeme,\n+impl TTY {\n+    pub fn new(fd: c_int) -> IoResult<TTY> {\n+        if is_tty(fd) {\n+            // If the file descriptor is one of stdin, stderr, or stdout\n+            // then it should not be closed by us\n+            let closeme = match fd {\n+                0...2 => false,\n+                _ => true,\n+            };\n+            let handle = unsafe { get_osfhandle(fd) as HANDLE };\n+            Ok(TTY {\n+                handle: handle,\n+                utf8: MemReader::new(Vec::new()),\n+                closeme: closeme,\n+            })\n+        } else {\n+            Err(IoError {\n+                kind: io::MismatchedFileTypeForOperation,\n+                desc: \"invalid handle provided to function\",\n+                detail: None,\n+            })\n         }\n     }\n-}\n \n-impl Drop for WindowsTTY {\n-    fn drop(&mut self) {\n-        if self.closeme {\n-            // Nobody cares about the return value\n-            let _ = unsafe { CloseHandle(self.handle) };\n-        }\n-    }\n-}\n-\n-impl RtioTTY for WindowsTTY {\n-    fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n+    pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         // Read more if the buffer is empty\n         if self.utf8.eof() {\n             let mut utf16 = Vec::from_elem(0x1000, 0u16);\n@@ -113,7 +110,7 @@ impl RtioTTY for WindowsTTY {\n         Ok(self.utf8.read(buf).unwrap())\n     }\n \n-    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n+    pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         let utf16 = match from_utf8(buf) {\n             Some(utf8) => {\n                 utf8.as_slice().utf16_units().collect::<Vec<u16>>()\n@@ -131,7 +128,7 @@ impl RtioTTY for WindowsTTY {\n         }\n     }\n \n-    fn set_raw(&mut self, raw: bool) -> IoResult<()> {\n+    pub fn set_raw(&mut self, raw: bool) -> IoResult<()> {\n         // FIXME\n         // Somebody needs to decide on which of these flags we want\n         match unsafe { SetConsoleMode(self.handle,\n@@ -146,7 +143,7 @@ impl RtioTTY for WindowsTTY {\n         }\n     }\n \n-    fn get_winsize(&mut self) -> IoResult<(int, int)> {\n+    pub fn get_winsize(&mut self) -> IoResult<(int, int)> {\n         // FIXME\n         // Get console buffer via CreateFile with CONOUT$\n         // Make a CONSOLE_SCREEN_BUFFER_INFO\n@@ -156,5 +153,14 @@ impl RtioTTY for WindowsTTY {\n     }\n \n     // Let us magically declare this as a TTY\n-    fn isatty(&self) -> bool { true }\n+    pub fn isatty(&self) -> bool { true }\n+}\n+\n+impl Drop for TTY {\n+    fn drop(&mut self) {\n+        if self.closeme {\n+            // Nobody cares about the return value\n+            let _ = unsafe { CloseHandle(self.handle) };\n+        }\n+    }\n }", "previous_filename": "src/libnative/io/tty_windows.rs"}]}