{"sha": "89cbe0ae567603b416ae995f38c428445ff10159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Y2JlMGFlNTY3NjAzYjQxNmFlOTk1ZjM4YzQyODQ0NWZmMTAxNTk=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-16T19:44:19Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:45:04Z"}, "message": "Add comments", "tree": {"sha": "620fab209c9b55e9a2ec6a10994846122b58d5f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/620fab209c9b55e9a2ec6a10994846122b58d5f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89cbe0ae567603b416ae995f38c428445ff10159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89cbe0ae567603b416ae995f38c428445ff10159", "html_url": "https://github.com/rust-lang/rust/commit/89cbe0ae567603b416ae995f38c428445ff10159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89cbe0ae567603b416ae995f38c428445ff10159/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725d6bfa9c73c70733c3511901f5ddb6296587da", "url": "https://api.github.com/repos/rust-lang/rust/commits/725d6bfa9c73c70733c3511901f5ddb6296587da", "html_url": "https://github.com/rust-lang/rust/commit/725d6bfa9c73c70733c3511901f5ddb6296587da"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "7ad36ed407b62ee5cf2a0a8d2bca1193b0744cbd", "filename": "src/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89cbe0ae567603b416ae995f38c428445ff10159/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cbe0ae567603b416ae995f38c428445ff10159/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=89cbe0ae567603b416ae995f38c428445ff10159", "patch": "@@ -173,6 +173,10 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n                 } else if file_type.is_symlink() {\n                     Ok(this.eval_libc(\"DT_LNK\")?.to_u8()? as i32)\n                 } else {\n+                    // Certain file types are only supported when the host is a Unix system.\n+                    // (i.e. devices and sockets) If it is, check those cases, if not, fall back to\n+                    // DT_UNKNOWN sooner.\n+\n                     #[cfg(unix)]\n                     {\n                         use std::os::unix::fs::FileTypeExt;\n@@ -895,6 +899,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let c_ushort_layout = this.libc_ty_layout(\"c_ushort\")?;\n                 let c_uchar_layout = this.libc_ty_layout(\"c_uchar\")?;\n \n+                // If the host is a Unix system, fill in the inode number with its real value.\n+                // If not, use 0 as a fallback value.\n                 #[cfg(unix)]\n                 let ino = std::os::unix::fs::DirEntryExt::ino(&dir_entry);\n                 #[cfg(not(unix))]\n@@ -969,6 +975,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let c_ushort_layout = this.libc_ty_layout(\"c_ushort\")?;\n                 let c_uchar_layout = this.libc_ty_layout(\"c_uchar\")?;\n \n+                // If the host is a Unix system, fill in the inode number with its real value.\n+                // If not, use 0 as a fallback value.\n                 #[cfg(unix)]\n                 let ino = std::os::unix::fs::DirEntryExt::ino(&dir_entry);\n                 #[cfg(not(unix))]"}]}