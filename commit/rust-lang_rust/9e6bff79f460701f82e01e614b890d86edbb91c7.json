{"sha": "9e6bff79f460701f82e01e614b890d86edbb91c7", "node_id": "C_kwDOAAsO6NoAKDllNmJmZjc5ZjQ2MDcwMWY4MmUwMWU2MTRiODkwZDg2ZWRiYjkxYzc", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T11:15:16Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T11:15:16Z"}, "message": "fix some test due to resolve to where trait m impl", "tree": {"sha": "a1688c1d24150419fb2a04123e23cd1463f6a7c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1688c1d24150419fb2a04123e23cd1463f6a7c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6bff79f460701f82e01e614b890d86edbb91c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6bff79f460701f82e01e614b890d86edbb91c7", "html_url": "https://github.com/rust-lang/rust/commit/9e6bff79f460701f82e01e614b890d86edbb91c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6bff79f460701f82e01e614b890d86edbb91c7/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecabe352a34a0fb290b2639e2eccd4317c85556", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecabe352a34a0fb290b2639e2eccd4317c85556", "html_url": "https://github.com/rust-lang/rust/commit/6ecabe352a34a0fb290b2639e2eccd4317c85556"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "7d642e45e8f86811155e9ce39b7865bc3df866f1", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=9e6bff79f460701f82e01e614b890d86edbb91c7", "patch": "@@ -281,7 +281,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestTrait::test_method(&test_struct)\n+    TestStruct::test_method(&test_struct)\n }\n \"#,\n         );\n@@ -324,7 +324,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestTrait::test_method(&test_struct, 12, 32u)\n+    TestStruct::test_method(&test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -367,7 +367,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestTrait::test_method(test_struct, 12, 32u)\n+    TestStruct::test_method(test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -410,7 +410,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestTrait::test_method(&mut test_struct, 12, 32u)\n+    TestStruct::test_method(&mut test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -480,7 +480,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = TestStruct {};\n-    TestTrait::test_method::<()>(&test_struct)\n+    TestStruct::test_method::<()>(&test_struct)\n }\n \"#,\n         );"}, {"sha": "505ebc98f3a7b69e52238b1cb450dbc8507ea20d", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=9e6bff79f460701f82e01e614b890d86edbb91c7", "patch": "@@ -244,7 +244,7 @@ fn rename_mod(\n \n fn rename_reference(\n     sema: &Semantics<RootDatabase>,\n-    mut def: Definition,\n+    def: Definition,\n     new_name: &str,\n ) -> Result<SourceChange> {\n     let ident_kind = IdentifierKind::classify(new_name)?;\n@@ -271,15 +271,43 @@ fn rename_reference(\n         }\n     }\n \n+    let def = convert_to_trait_def(def, sema);\n+    let usages = def.usages(sema).all();\n+\n+    if !usages.is_empty() && ident_kind == IdentifierKind::Underscore {\n+        cov_mark::hit!(rename_underscore_multiple);\n+        bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n+    }\n+    let mut source_change = SourceChange::default();\n+    source_change.extend(usages.iter().map(|(&file_id, references)| {\n+        (file_id, source_edit_from_references(references, def, new_name))\n+    }));\n+\n+    let mut insert_def_edit = |def| {\n+        let (file_id, edit) = source_edit_from_def(sema, def, new_name)?;\n+        source_change.insert_source_edit(file_id, edit);\n+        Ok(())\n+    };\n+    match def {\n+        Definition::Local(l) => l\n+            .associated_locals(sema.db)\n+            .iter()\n+            .try_for_each(|&local| insert_def_edit(Definition::Local(local))),\n+        def => insert_def_edit(def),\n+    }?;\n+    Ok(source_change)\n+}\n+\n+pub(crate) fn convert_to_trait_def(def: Definition, sema: &Semantics<RootDatabase>) -> Definition {\n+    // HACK: resolve trait impl items to the item def of the trait definition\n+    // so that we properly resolve all trait item references\n     let assoc_item = match def {\n-        // HACK: resolve trait impl items to the item def of the trait definition\n-        // so that we properly resolve all trait item references\n         Definition::Function(it) => it.as_assoc_item(sema.db),\n         Definition::TypeAlias(it) => it.as_assoc_item(sema.db),\n         Definition::Const(it) => it.as_assoc_item(sema.db),\n         _ => None,\n     };\n-    def = match assoc_item {\n+    match assoc_item {\n         Some(assoc) => assoc\n             .containing_trait_impl(sema.db)\n             .and_then(|trait_| {\n@@ -305,31 +333,7 @@ fn rename_reference(\n             })\n             .unwrap_or(def),\n         None => def,\n-    };\n-    let usages = def.usages(sema).all();\n-\n-    if !usages.is_empty() && ident_kind == IdentifierKind::Underscore {\n-        cov_mark::hit!(rename_underscore_multiple);\n-        bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n     }\n-    let mut source_change = SourceChange::default();\n-    source_change.extend(usages.iter().map(|(&file_id, references)| {\n-        (file_id, source_edit_from_references(references, def, new_name))\n-    }));\n-\n-    let mut insert_def_edit = |def| {\n-        let (file_id, edit) = source_edit_from_def(sema, def, new_name)?;\n-        source_change.insert_source_edit(file_id, edit);\n-        Ok(())\n-    };\n-    match def {\n-        Definition::Local(l) => l\n-            .associated_locals(sema.db)\n-            .iter()\n-            .try_for_each(|&local| insert_def_edit(Definition::Local(local))),\n-        def => insert_def_edit(def),\n-    }?;\n-    Ok(source_change)\n }\n \n pub fn source_edit_from_references("}, {"sha": "25065ba7e32ae181f7622699c6dc09f91f25b3aa", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=9e6bff79f460701f82e01e614b890d86edbb91c7", "patch": "@@ -619,7 +619,9 @@ impl<'a> FindUsages<'a> {\n                 };\n                 sink(file_id, reference)\n             }\n-            Some(NameRefClass::Definition(def)) if def == self.def => {\n+            Some(NameRefClass::Definition(def))\n+                if crate::rename::convert_to_trait_def(def, self.sema) == self.def =>\n+            {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {\n                     range,"}, {"sha": "885aef16681d53b6a553c4502f8474a729c830e9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/9e6bff79f460701f82e01e614b890d86edbb91c7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=9e6bff79f460701f82e01e614b890d86edbb91c7", "patch": "@@ -121,6 +121,6 @@\n         <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration reference\">_a</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe auto ref of packed field</span>\n-        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated reference trait unsafe\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated reference unsafe\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}]}