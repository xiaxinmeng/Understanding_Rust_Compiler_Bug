{"sha": "d5f54743dbad00aa4eb76c557c8d4824a7b770de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjU0NzQzZGJhZDAwYWE0ZWI3NmM1NTdjOGQ0ODI0YTdiNzcwZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T13:04:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T13:04:53Z"}, "message": "Auto merge of #39386 - tbu-:pr_pipe_less_syscalls, r=alexcrichton\n\nUse less syscalls in `anon_pipe()`\n\nSave a `ENOSYS` failure from `pipe2` and don't try again.\n\nUse `cvt` instead of `cvt_r` for `pipe2` - `EINTR` is not an error\n`pipe2` can return.", "tree": {"sha": "e3d4b322630b159068aae31bb91bb65aae49574d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d4b322630b159068aae31bb91bb65aae49574d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f54743dbad00aa4eb76c557c8d4824a7b770de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f54743dbad00aa4eb76c557c8d4824a7b770de", "html_url": "https://github.com/rust-lang/rust/commit/d5f54743dbad00aa4eb76c557c8d4824a7b770de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f54743dbad00aa4eb76c557c8d4824a7b770de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b24c70012b4d7269722efacb80203813ed9822a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b24c70012b4d7269722efacb80203813ed9822a", "html_url": "https://github.com/rust-lang/rust/commit/3b24c70012b4d7269722efacb80203813ed9822a"}, {"sha": "4b46d2a3a222f090b07b019df0e9346b08c40ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b46d2a3a222f090b07b019df0e9346b08c40ae1", "html_url": "https://github.com/rust-lang/rust/commit/4b46d2a3a222f090b07b019df0e9346b08c40ae1"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "51e00fc1ab96abe8456cfb7280fc367af249dbef", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d5f54743dbad00aa4eb76c557c8d4824a7b770de/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f54743dbad00aa4eb76c557c8d4824a7b770de/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=d5f54743dbad00aa4eb76c557c8d4824a7b770de", "patch": "@@ -13,7 +13,7 @@ use io;\n use libc::{self, c_int};\n use mem;\n use ptr;\n-use sys::cvt_r;\n+use sys::{cvt, cvt_r};\n use sys::fd::FileDesc;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -29,34 +29,29 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n     // 2.6.27, however, and because we support 2.6.18 we must detect this\n     // support dynamically.\n-    if cfg!(target_os = \"linux\") {\n+    if cfg!(any(target_os = \"dragonfly\",\n+                target_os = \"freebsd\",\n+                target_os = \"linux\",\n+                target_os = \"netbsd\",\n+                target_os = \"openbsd\"))\n+    {\n         weak! { fn pipe2(*mut c_int, c_int) -> c_int }\n         if let Some(pipe) = pipe2.get() {\n-            match cvt_r(|| unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n-                Ok(_) => {\n-                    return Ok((AnonPipe(FileDesc::new(fds[0])),\n-                               AnonPipe(FileDesc::new(fds[1]))))\n-                }\n-                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}\n-                Err(e) => return Err(e),\n-            }\n+            cvt(unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) })?;\n+            return Ok((AnonPipe(FileDesc::new(fds[0])),\n+                       AnonPipe(FileDesc::new(fds[1]))));\n         }\n     }\n-    if unsafe { libc::pipe(fds.as_mut_ptr()) == 0 } {\n-        let fd0 = FileDesc::new(fds[0]);\n-        let fd1 = FileDesc::new(fds[1]);\n-        Ok((AnonPipe::from_fd(fd0)?, AnonPipe::from_fd(fd1)?))\n-    } else {\n-        Err(io::Error::last_os_error())\n-    }\n+    cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n+\n+    let fd0 = FileDesc::new(fds[0]);\n+    let fd1 = FileDesc::new(fds[1]);\n+    fd0.set_cloexec()?;\n+    fd1.set_cloexec()?;\n+    Ok((AnonPipe(fd0), AnonPipe(fd1)))\n }\n \n impl AnonPipe {\n-    pub fn from_fd(fd: FileDesc) -> io::Result<AnonPipe> {\n-        fd.set_cloexec()?;\n-        Ok(AnonPipe(fd))\n-    }\n-\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n     }"}]}