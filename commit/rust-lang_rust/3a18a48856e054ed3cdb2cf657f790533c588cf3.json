{"sha": "3a18a48856e054ed3cdb2cf657f790533c588cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMThhNDg4NTZlMDU0ZWQzY2RiMmNmNjU3Zjc5MDUzM2M1ODhjZjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-01-09T08:43:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-09T08:43:40Z"}, "message": "Merge pull request #1424 from sinkuu/unused_io_amount\n\nImplement `unused_io_amount` lint", "tree": {"sha": "8129d5a1d96cd61c1a530555e5a1502d548eee27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8129d5a1d96cd61c1a530555e5a1502d548eee27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a18a48856e054ed3cdb2cf657f790533c588cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a18a48856e054ed3cdb2cf657f790533c588cf3", "html_url": "https://github.com/rust-lang/rust/commit/3a18a48856e054ed3cdb2cf657f790533c588cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a18a48856e054ed3cdb2cf657f790533c588cf3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1bdbaae06b75cb8c4133fd912b3d5d0e51f453b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bdbaae06b75cb8c4133fd912b3d5d0e51f453b", "html_url": "https://github.com/rust-lang/rust/commit/d1bdbaae06b75cb8c4133fd912b3d5d0e51f453b"}, {"sha": "a2bcce9dbfaddfa8fc26f4ab71747204bc2c6792", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bcce9dbfaddfa8fc26f4ab71747204bc2c6792", "html_url": "https://github.com/rust-lang/rust/commit/a2bcce9dbfaddfa8fc26f4ab71747204bc2c6792"}], "stats": {"total": 176, "additions": 175, "deletions": 1}, "files": [{"sha": "d5f7c47fb6891070d7ff000b9cfaf3f5193f2a81", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -414,6 +414,7 @@ All notable changes to this project will be documented in this file.\n [`unstable_as_mut_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice\n [`unstable_as_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice\n [`unused_collect`]: https://github.com/Manishearth/rust-clippy/wiki#unused_collect\n+[`unused_io_amount`]: https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount\n [`unused_label`]: https://github.com/Manishearth/rust-clippy/wiki#unused_label\n [`unused_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes\n [`use_debug`]: https://github.com/Manishearth/rust-clippy/wiki#use_debug"}, {"sha": "234f848415b2f6e21245e16e141bea179c84e706", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 183 lints included in this crate:\n+There are 184 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -350,6 +350,7 @@ name\n [unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                   | warn    | `unsafe` removed from API names on import\n [unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)               | allow   | literals whose suffix is not separated by an underscore\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[unused_io_amount](https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount)                                   | deny    | unused written/read amount\n [unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                           | warn    | unused labels\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                   | warn    | unused lifetimes in function definitions\n [use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                                 | allow   | use of `Debug`-based formatting"}, {"sha": "b88b62040cec6880047abe5c911e5c93943e5041", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -131,6 +131,7 @@ pub mod transmute;\n pub mod types;\n pub mod unicode;\n pub mod unsafe_removed_from_name;\n+pub mod unused_io_amount;\n pub mod unused_label;\n pub mod vec;\n pub mod zero_div_zero;\n@@ -287,6 +288,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n     reg.register_early_lint_pass(box reference::Pass);\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n+    reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -480,6 +482,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,"}, {"sha": "fc50e668c85d4ca8863afc12c74aaa1fdab91dc9", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -0,0 +1,88 @@\n+use rustc::lint::*;\n+use rustc::hir;\n+use utils::{span_lint, match_path, match_trait_method, is_try, paths};\n+\n+/// **What it does:** Checks for unused written/read amount.\n+///\n+/// **Why is this bad?** `io::Write::write` and `io::Read::read` are not guaranteed to\n+/// process the entire buffer. They return how many bytes were processed, which might be smaller\n+/// than a given buffer's length. If you don't need to deal with partial-write/read, use\n+/// `write_all`/`read_exact` instead.\n+///\n+/// **Known problems:** Detects only common patterns.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// use std::io;\n+/// fn foo<W: io::Write>(w: &mut W) -> io::Result<()> {\n+///     // must be `w.write_all(b\"foo\")?;`\n+///     w.write(b\"foo\")?;\n+///     Ok(())\n+/// }\n+/// ```\n+declare_lint! {\n+    pub UNUSED_IO_AMOUNT,\n+    Deny,\n+    \"unused written/read amount\"\n+}\n+\n+pub struct UnusedIoAmount;\n+\n+impl LintPass for UnusedIoAmount {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNUSED_IO_AMOUNT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n+    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n+        let expr = match s.node {\n+            hir::StmtSemi(ref expr, _) |\n+            hir::StmtExpr(ref expr, _) => &**expr,\n+            _ => return,\n+        };\n+\n+        match expr.node {\n+            hir::ExprMatch(ref res, _, _) if is_try(expr).is_some() => {\n+                if let hir::ExprCall(ref func, ref args) = res.node {\n+                    if let hir::ExprPath(ref path) = func.node {\n+                        if match_path(path, &paths::CARRIER_TRANSLATE) && args.len() == 1 {\n+                            check_method_call(cx, &args[0], expr);\n+                        }\n+                    }\n+                } else {\n+                    check_method_call(cx, res, expr);\n+                }\n+            },\n+\n+            hir::ExprMethodCall(ref symbol, _, ref args) => {\n+                let symbol = &*symbol.node.as_str();\n+                match symbol {\n+                    \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n+                        check_method_call(cx, &args[0], expr);\n+                    },\n+                    _ => (),\n+                }\n+            },\n+\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn check_method_call(cx: &LateContext, call: &hir::Expr, expr: &hir::Expr) {\n+    if let hir::ExprMethodCall(ref symbol, _, _) = call.node {\n+        let symbol = &*symbol.node.as_str();\n+        if match_trait_method(cx, call, &paths::IO_READ) && symbol == \"read\" {\n+            span_lint(cx,\n+                      UNUSED_IO_AMOUNT,\n+                      expr.span,\n+                      \"handle read amount returned or use `Read::read_exact` instead\");\n+        } else if match_trait_method(cx, call, &paths::IO_WRITE) && symbol == \"write\" {\n+            span_lint(cx,\n+                      UNUSED_IO_AMOUNT,\n+                      expr.span,\n+                      \"handle written amount returned or use `Write::write_all` instead\");\n+        }\n+    }\n+}"}, {"sha": "866a35427624d50eaade33f05548b3f869510cb4", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -920,3 +920,47 @@ pub fn is_self_ty(slf: &Ty) -> bool {\n pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Arg> {\n     (0..decl.inputs.len()).map(move |i| &body.arguments[i])\n }\n+\n+/// Check if a given expression is a match expression\n+/// expanded from `?` operator or `try` macro.\n+pub fn is_try(expr: &Expr) -> Option<&Expr> {\n+    fn is_ok(arm: &Arm) -> bool {\n+        if_let_chain! {[\n+            let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node,\n+            match_path(path, &paths::RESULT_OK[1..]),\n+            let PatKind::Binding(_, defid, _, None) = pat[0].node,\n+            let ExprPath(QPath::Resolved(None, ref path)) = arm.body.node,\n+            path.def.def_id() == defid,\n+        ], {\n+            return true;\n+        }}\n+        false\n+    }\n+\n+    fn is_err(arm: &Arm) -> bool {\n+        if let PatKind::TupleStruct(ref path, _, _) = arm.pats[0].node {\n+            match_path(path, &paths::RESULT_ERR[1..])\n+        } else {\n+            false\n+        }\n+    }\n+\n+    if let ExprMatch(_, ref arms, ref source) = expr.node {\n+        // desugared from a `?` operator\n+        if let MatchSource::TryDesugar = *source {\n+            return Some(expr);\n+        }\n+\n+        if_let_chain! {[\n+            arms.len() == 2,\n+            arms[0].pats.len() == 1 && arms[0].guard.is_none(),\n+            arms[1].pats.len() == 1 && arms[1].guard.is_none(),\n+            (is_ok(&arms[0]) && is_err(&arms[1])) ||\n+                (is_ok(&arms[1]) && is_err(&arms[0])),\n+        ], {\n+            return Some(expr);\n+        }}\n+    }\n+\n+    None\n+}"}, {"sha": "5edff76d9969e277fcb47e71d20be6f1a85a7b2a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -7,6 +7,7 @@ pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&'static str; 4] = [\"collections\", \"btree\", \"set\", \"BTreeSet\"];\n+pub const CARRIER_TRANSLATE: [&'static str; 4] = [\"std\", \"ops\", \"Carrier\", \"translate\"];\n pub const CLONE: [&'static str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT: [&'static str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CMP_MAX: [&'static str; 3] = [\"core\", \"cmp\", \"max\"];\n@@ -25,6 +26,8 @@ pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n+pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];\n+pub const IO_WRITE: [&'static str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];"}, {"sha": "2e63705c5107cb5028408f343a9254813ca9325a", "filename": "tests/compile-fail/unused_io_amount.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3a18a48856e054ed3cdb2cf657f790533c588cf3/tests%2Fcompile-fail%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a18a48856e054ed3cdb2cf657f790533c588cf3/tests%2Fcompile-fail%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funused_io_amount.rs?ref=3a18a48856e054ed3cdb2cf657f790533c588cf3", "patch": "@@ -0,0 +1,34 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+\n+use std::io;\n+\n+// FIXME: compiletest doesn't understand errors from macro invocation span\n+fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n+    try!(s.write(b\"test\"));\n+    let mut buf = [0u8; 4];\n+    try!(s.read(&mut buf));\n+    Ok(())\n+}\n+\n+fn question_mark<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n+    s.write(b\"test\")?;\n+    //~^ ERROR handle written amount returned\n+    let mut buf = [0u8; 4];\n+    s.read(&mut buf)?;\n+    //~^ ERROR handle read amount returned\n+    Ok(())\n+}\n+\n+fn unwrap<T: io::Read + io::Write>(s: &mut T) {\n+    s.write(b\"test\").unwrap();\n+    //~^ ERROR handle written amount returned\n+    let mut buf = [0u8; 4];\n+    s.read(&mut buf).unwrap();\n+    //~^ ERROR handle read amount returned\n+}\n+\n+fn main() {\n+}"}]}