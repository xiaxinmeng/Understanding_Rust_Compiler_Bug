{"sha": "fa191a559171094d89a598884ea18aba6cbda858", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMTkxYTU1OTE3MTA5NGQ4OWE1OTg4ODRlYTE4YWJhNmNiZGE4NTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-05T21:50:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-08T02:53:21Z"}, "message": "syntax: convert deriving to take &mut ExtCtxt.", "tree": {"sha": "0096832970fca083293a848425bb490f5b721685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0096832970fca083293a848425bb490f5b721685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa191a559171094d89a598884ea18aba6cbda858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa191a559171094d89a598884ea18aba6cbda858", "html_url": "https://github.com/rust-lang/rust/commit/fa191a559171094d89a598884ea18aba6cbda858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa191a559171094d89a598884ea18aba6cbda858/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac673ab0c27cb00a6bdc70103185b5090a467fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac673ab0c27cb00a6bdc70103185b5090a467fe", "html_url": "https://github.com/rust-lang/rust/commit/eac673ab0c27cb00a6bdc70103185b5090a467fe"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "848f4ba3871d293f964f6cd99a247352e09ded1b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -36,7 +36,7 @@ pub struct MacroDef {\n }\n \n pub type ItemDecorator =\n-    fn(&ExtCtxt, Span, @ast::MetaItem, ~[@ast::Item]) -> ~[@ast::Item];\n+    fn(&mut ExtCtxt, Span, @ast::MetaItem, ~[@ast::Item]) -> ~[@ast::Item];\n \n pub struct BasicMacroExpander {\n     expander: MacroExpanderFn,"}, {"sha": "1736124062862d3c705e68e615253a08bb030856", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_clone(cx: &ExtCtxt,\n+pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: @MetaItem,\n                              in_items: ~[@Item])\n@@ -42,7 +42,7 @@ pub fn expand_deriving_clone(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-pub fn expand_deriving_deep_clone(cx: &ExtCtxt,\n+pub fn expand_deriving_deep_clone(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n                                   in_items: ~[@Item])\n@@ -74,7 +74,7 @@ pub fn expand_deriving_deep_clone(cx: &ExtCtxt,\n \n fn cs_clone(\n     name: &str,\n-    cx: &ExtCtxt, trait_span: Span,\n+    cx: &mut ExtCtxt, trait_span: Span,\n     substr: &Substructure) -> @Expr {\n     let clone_ident = substr.method_ident;\n     let ctor_ident;"}, {"sha": "a469c4a960b4013bb41f7f5fe094c5ffdf08c014", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -14,17 +14,17 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_eq(cx: &ExtCtxt,\n+pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n                           mitem: @MetaItem,\n                           in_items: ~[@Item]) -> ~[@Item] {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n-    fn cs_eq(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n                                  cx, span, substr)\n     }\n-    fn cs_ne(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_or(|cx, span, _, _| cx.expr_bool(span, true),\n               cx, span, substr)\n     }"}, {"sha": "83f623e30666d0797bb1220b54400010ff1747c2", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_ord(cx: &ExtCtxt,\n+pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: @MetaItem,\n                            in_items: ~[@Item]) -> ~[@Item] {\n@@ -51,7 +51,7 @@ pub fn expand_deriving_ord(cx: &ExtCtxt,\n }\n \n /// Strict inequality.\n-fn cs_op(less: bool, equal: bool, cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let op = if less {ast::BiLt} else {ast::BiGt};\n     cs_fold(\n         false, // need foldr,"}, {"sha": "0a38a2ce30dc877cb4d6f3876d67c6cce8dbb367", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -14,11 +14,11 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_totaleq(cx: &ExtCtxt,\n+pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                                span: Span,\n                                mitem: @MetaItem,\n                                in_items: ~[@Item]) -> ~[@Item] {\n-    fn cs_equals(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_equals(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n                cx, span, substr)\n     }"}, {"sha": "27a766c0e7562f759364364ea08541dea1a8af77", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -16,7 +16,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use std::cmp::{Ordering, Equal, Less, Greater};\n \n-pub fn expand_deriving_totalord(cx: &ExtCtxt,\n+pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 span: Span,\n                                 mitem: @MetaItem,\n                                 in_items: ~[@Item]) -> ~[@Item] {\n@@ -44,7 +44,7 @@ pub fn expand_deriving_totalord(cx: &ExtCtxt,\n }\n \n \n-pub fn ordering_const(cx: &ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n+pub fn ordering_const(cx: &mut ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n     let cnst = match cnst {\n         Less => \"Less\",\n         Equal => \"Equal\",\n@@ -56,7 +56,7 @@ pub fn ordering_const(cx: &ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n                      cx.ident_of(cnst)])\n }\n \n-pub fn cs_cmp(cx: &ExtCtxt, span: Span,\n+pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> @Expr {\n     let test_id = cx.ident_of(\"__test\");\n     let equals_path = ordering_const(cx, span, Equal);\n@@ -106,8 +106,10 @@ pub fn cs_cmp(cx: &ExtCtxt, span: Span,\n                 // an earlier nonmatching variant is Less than a\n                 // later one.\n                 [(self_var, _, _),\n-                 (other_var, _, _)] => cx.expr_path(ordering_const(cx, span,\n-                                                                   self_var.cmp(&other_var))),\n+                 (other_var, _, _)] => {\n+                    let order = ordering_const(cx, span, self_var.cmp(&other_var));\n+                    cx.expr_path(order)\n+                }\n                 _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(TotalOrd)`\")\n             }\n         },"}, {"sha": "7324500a8a0eb91fc72540b57f6accbd4192cdd6", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -21,7 +21,7 @@ use ext::deriving::generic::*;\n use parse::token::InternedString;\n use parse::token;\n \n-pub fn expand_deriving_decodable(cx: &ExtCtxt,\n+pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n                                  in_items: ~[@Item]) -> ~[@Item] {\n@@ -53,7 +53,7 @@ pub fn expand_deriving_decodable(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn decodable_substructure(cx: &ExtCtxt, trait_span: Span,\n+fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                           substr: &Substructure) -> @Expr {\n     let decoder = substr.nonself_args[0];\n     let recurse = ~[cx.ident_of(\"serialize\"),\n@@ -77,7 +77,7 @@ fn decodable_substructure(cx: &ExtCtxt, trait_span: Span,\n                                               trait_span,\n                                               substr.type_ident,\n                                               summary,\n-                                              |span, name, field| {\n+                                              |cx, span, name, field| {\n                 cx.expr_method_call(span, blkdecoder, read_struct_field,\n                                     ~[cx.expr_str(span, name),\n                                       cx.expr_uint(span, field),\n@@ -108,10 +108,10 @@ fn decodable_substructure(cx: &ExtCtxt, trait_span: Span,\n                                                    v_span,\n                                                    name,\n                                                    parts,\n-                                                   |span, _, field| {\n+                                                   |cx, span, _, field| {\n+                    let idx = cx.expr_uint(span, field);\n                     cx.expr_method_call(span, blkdecoder, rvariant_arg,\n-                                        ~[cx.expr_uint(span, field),\n-                                          lambdadecode])\n+                                        ~[idx, lambdadecode])\n                 });\n \n                 arms.push(cx.arm(v_span,\n@@ -143,19 +143,19 @@ fn decodable_substructure(cx: &ExtCtxt, trait_span: Span,\n /// Create a decoder for a single enum variant/struct:\n /// - `outer_pat_ident` is the name of this enum variant/struct\n /// - `getarg` should retrieve the `uint`-th field with name `@str`.\n-fn decode_static_fields(cx: &ExtCtxt,\n+fn decode_static_fields(cx: &mut ExtCtxt,\n                         trait_span: Span,\n                         outer_pat_ident: Ident,\n                         fields: &StaticFields,\n-                        getarg: |Span, InternedString, uint| -> @Expr)\n+                        getarg: |&mut ExtCtxt, Span, InternedString, uint| -> @Expr)\n                         -> @Expr {\n     match *fields {\n         Unnamed(ref fields) => {\n             if fields.is_empty() {\n                 cx.expr_ident(trait_span, outer_pat_ident)\n             } else {\n                 let fields = fields.iter().enumerate().map(|(i, &span)| {\n-                    getarg(span,\n+                    getarg(cx, span,\n                            token::intern_and_get_ident(format!(\"_field{}\",\n                                                                i)),\n                            i)\n@@ -167,9 +167,8 @@ fn decode_static_fields(cx: &ExtCtxt,\n         Named(ref fields) => {\n             // use the field's span to get nicer error messages.\n             let fields = fields.iter().enumerate().map(|(i, &(name, span))| {\n-                cx.field_imm(span,\n-                             name,\n-                             getarg(span, token::get_ident(name.name), i))\n+                let arg = getarg(cx, span, token::get_ident(name.name), i);\n+                cx.field_imm(span, name, arg)\n             }).collect();\n             cx.expr_struct_ident(trait_span, outer_pat_ident, fields)\n         }"}, {"sha": "922ee164353208a96634824df8e2f7dd078bab7f", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_default(cx: &ExtCtxt,\n+pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@Item])\n@@ -41,7 +41,7 @@ pub fn expand_deriving_default(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn default_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n+fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let default_ident = ~[\n         cx.ident_of(\"std\"),\n         cx.ident_of(\"default\"),"}, {"sha": "4de31adc7f2c7cf76320600ef46434f5e93261ac", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -82,7 +82,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use parse::token;\n \n-pub fn expand_deriving_encodable(cx: &ExtCtxt,\n+pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n                                  in_items: ~[@Item]) -> ~[@Item] {\n@@ -114,7 +114,7 @@ pub fn expand_deriving_encodable(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn encodable_substructure(cx: &ExtCtxt, trait_span: Span,\n+fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                           substr: &Substructure) -> @Expr {\n     let encoder = substr.nonself_args[0];\n     // throw an underscore in front to suppress unused variable warnings"}, {"sha": "8c06f0b8c8a0ec182164f7f6d10647fe145b4d97", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -194,7 +194,7 @@ mod ty;\n \n pub struct TraitDef<'a> {\n     /// The extension context\n-    cx: &'a ExtCtxt<'a>,\n+    cx: &'a mut ExtCtxt<'a>,\n     /// The span for the current #[deriving(Foo)] header.\n     span: Span,\n \n@@ -304,15 +304,15 @@ Combine the values of all the fields together. The last argument is\n all the fields of all the structures, see above for details.\n */\n pub type CombineSubstructureFunc<'a> =\n-    'a |&ExtCtxt, Span, &Substructure| -> @Expr;\n+    'a |&mut ExtCtxt, Span, &Substructure| -> @Expr;\n \n /**\n Deal with non-matching enum variants, the arguments are a list\n representing each variant: (variant index, ast::Variant instance,\n [variant fields]), and a list of the nonself args of the type\n */\n pub type EnumNonMatchFunc<'a> =\n-    'a |&ExtCtxt,\n+    'a |&mut ExtCtxt,\n            Span,\n            &[(uint, P<ast::Variant>, ~[(Span, Option<Ident>, @Expr)])],\n            &[@Expr]|\n@@ -356,7 +356,7 @@ impl<'a> TraitDef<'a> {\n     fn create_derived_impl(&self,\n                            type_ident: Ident, generics: &Generics,\n                            methods: ~[@ast::Method]) -> @ast::Item {\n-        let cx = self.cx;\n+        let cx = &*self.cx;\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n         let mut trait_generics = self.generics.to_generics(cx, self.span,\n@@ -764,7 +764,7 @@ impl<'a> MethodDef<'a> {\n                         matches_so_far: &mut ~[(uint, P<ast::Variant>,\n                                               ~[(Span, Option<Ident>, @Expr)])],\n                         match_count: uint) -> @Expr {\n-        let cx = trait_.cx;\n+        let cx = &trait_.cx;\n         if match_count == self_args.len() {\n             // we've matched against all arguments, so make the final\n             // expression at the bottom of the match tree\n@@ -990,7 +990,7 @@ impl<'a> TraitDef<'a> {\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n         -> (@ast::Pat, ~[(Span, Option<Ident>, @Expr)]) {\n-        let cx = self.cx;\n+        let cx = &self.cx;\n \n         if struct_def.fields.is_empty() {\n             return (\n@@ -1050,7 +1050,7 @@ impl<'a> TraitDef<'a> {\n                                    prefix: &str,\n                                    mutbl: ast::Mutability)\n         -> (@ast::Pat, ~[(Span, Option<Ident>, @Expr)]) {\n-        let cx = self.cx;\n+        let cx = &*self.cx;\n         let variant_ident = variant.node.name;\n         match variant.node.kind {\n             ast::TupleVariantKind(ref variant_args) => {\n@@ -1093,10 +1093,10 @@ Fold the fields. `use_foldl` controls whether this is done\n left-to-right (`true`) or right-to-left (`false`).\n */\n pub fn cs_fold(use_foldl: bool,\n-               f: |&ExtCtxt, Span, @Expr, @Expr, &[@Expr]| -> @Expr,\n+               f: |&mut ExtCtxt, Span, @Expr, @Expr, &[@Expr]| -> @Expr,\n                base: @Expr,\n                enum_nonmatch_f: EnumNonMatchFunc,\n-               cx: &ExtCtxt,\n+               cx: &mut ExtCtxt,\n                trait_span: Span,\n                substructure: &Substructure)\n                -> @Expr {\n@@ -1132,9 +1132,9 @@ f(cx, span, ~[self_1.method(__arg_1_1, __arg_2_1),\n ~~~\n */\n #[inline]\n-pub fn cs_same_method(f: |&ExtCtxt, Span, ~[@Expr]| -> @Expr,\n+pub fn cs_same_method(f: |&mut ExtCtxt, Span, ~[@Expr]| -> @Expr,\n                       enum_nonmatch_f: EnumNonMatchFunc,\n-                      cx: &ExtCtxt,\n+                      cx: &mut ExtCtxt,\n                       trait_span: Span,\n                       substructure: &Substructure)\n                       -> @Expr {\n@@ -1166,10 +1166,10 @@ fields. `use_foldl` controls whether this is done left-to-right\n */\n #[inline]\n pub fn cs_same_method_fold(use_foldl: bool,\n-                           f: |&ExtCtxt, Span, @Expr, @Expr| -> @Expr,\n+                           f: |&mut ExtCtxt, Span, @Expr, @Expr| -> @Expr,\n                            base: @Expr,\n                            enum_nonmatch_f: EnumNonMatchFunc,\n-                           cx: &ExtCtxt,\n+                           cx: &mut ExtCtxt,\n                            trait_span: Span,\n                            substructure: &Substructure)\n                            -> @Expr {\n@@ -1196,7 +1196,7 @@ on all the fields.\n #[inline]\n pub fn cs_binop(binop: ast::BinOp, base: @Expr,\n                 enum_nonmatch_f: EnumNonMatchFunc,\n-                cx: &ExtCtxt, trait_span: Span,\n+                cx: &mut ExtCtxt, trait_span: Span,\n                 substructure: &Substructure) -> @Expr {\n     cs_same_method_fold(\n         true, // foldl is good enough\n@@ -1214,7 +1214,7 @@ pub fn cs_binop(binop: ast::BinOp, base: @Expr,\n /// cs_binop with binop == or\n #[inline]\n pub fn cs_or(enum_nonmatch_f: EnumNonMatchFunc,\n-             cx: &ExtCtxt, span: Span,\n+             cx: &mut ExtCtxt, span: Span,\n              substructure: &Substructure) -> @Expr {\n     cs_binop(ast::BiOr, cx.expr_bool(span, false),\n              enum_nonmatch_f,\n@@ -1224,7 +1224,7 @@ pub fn cs_or(enum_nonmatch_f: EnumNonMatchFunc,\n /// cs_binop with binop == and\n #[inline]\n pub fn cs_and(enum_nonmatch_f: EnumNonMatchFunc,\n-              cx: &ExtCtxt, span: Span,\n+              cx: &mut ExtCtxt, span: Span,\n               substructure: &Substructure) -> @Expr {\n     cs_binop(ast::BiAnd, cx.expr_bool(span, true),\n              enum_nonmatch_f,"}, {"sha": "5380569472582b6ae2dc012df1e1f28c933ee442", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -15,7 +15,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n \n-pub fn expand_deriving_iter_bytes(cx: &ExtCtxt,\n+pub fn expand_deriving_iter_bytes(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n                                   in_items: ~[@Item]) -> ~[@Item] {\n@@ -45,7 +45,7 @@ pub fn expand_deriving_iter_bytes(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn iter_bytes_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n+fn iter_bytes_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let (lsb0, f)= match substr.nonself_args {\n         [l, f] => (l, f),\n         _ => cx.span_bug(trait_span, \"Incorrect number of arguments in `deriving(IterBytes)`\")"}, {"sha": "4430f4abdbf467d6d33215faaae632e4f1f7aa0c", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -44,7 +44,7 @@ pub mod totalord;\n \n pub mod generic;\n \n-pub fn expand_meta_deriving(cx: &ExtCtxt,\n+pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             _span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@Item])"}, {"sha": "86c46705d81b98d0ba82808be37e268af6555d7d", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -16,7 +16,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use parse::token::InternedString;\n \n-pub fn expand_deriving_from_primitive(cx: &ExtCtxt,\n+pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       span: Span,\n                                       mitem: @MetaItem,\n                                       in_items: ~[@Item]) -> ~[@Item] {\n@@ -65,7 +65,7 @@ pub fn expand_deriving_from_primitive(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn cs_from(name: &str, cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n+fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let n = match substr.nonself_args {\n         [n] => n,\n         _ => cx.span_bug(trait_span, \"Incorrect number of arguments in `deriving(FromPrimitive)`\")"}, {"sha": "15595f6eddc404922e7469e8dbaa64c0b4ac7980", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -16,7 +16,7 @@ use ext::build::{AstBuilder};\n use ext::deriving::generic::*;\n use opt_vec;\n \n-pub fn expand_deriving_rand(cx: &ExtCtxt,\n+pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@Item])\n@@ -50,7 +50,7 @@ pub fn expand_deriving_rand(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn rand_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n+fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let rng = match substr.nonself_args {\n         [rng] => ~[ rng ],\n         _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n@@ -112,9 +112,8 @@ fn rand_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @\n                 let i_expr = cx.expr_uint(v_span, i);\n                 let pat = cx.pat_lit(v_span, i_expr);\n \n-                cx.arm(v_span,\n-                       ~[ pat ],\n-                       rand_thing(cx, v_span, ident, summary, |sp| rand_call(sp)))\n+                let thing = rand_thing(cx, v_span, ident, summary, |sp| rand_call(sp));\n+                cx.arm(v_span, ~[ pat ], thing)\n             }).collect::<~[ast::Arm]>();\n \n             // _ => {} at the end. Should never occur\n@@ -128,7 +127,7 @@ fn rand_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @\n         _ => cx.bug(\"Non-static method in `deriving(Rand)`\")\n     };\n \n-    fn rand_thing(cx: &ExtCtxt,\n+    fn rand_thing(cx: &mut ExtCtxt,\n                   trait_span: Span,\n                   ctor_ident: Ident,\n                   summary: &StaticFields,"}, {"sha": "2f50d5ad121cb77abfb2b7169a72ffb931fb1b52", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -17,7 +17,7 @@ use ext::deriving::generic::*;\n use parse::token::InternedString;\n use parse::token;\n \n-pub fn expand_deriving_to_str(cx: &ExtCtxt,\n+pub fn expand_deriving_to_str(cx: &mut ExtCtxt,\n                               span: Span,\n                               mitem: @MetaItem,\n                               in_items: ~[@Item])\n@@ -49,7 +49,7 @@ pub fn expand_deriving_to_str(cx: &ExtCtxt,\n // doesn't invoke the to_str() method on each field. Hence we mirror\n // the logic of the repr_to_str() method, but with tweaks to call to_str()\n // on sub-fields.\n-fn to_str_substructure(cx: &ExtCtxt, span: Span, substr: &Substructure)\n+fn to_str_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure)\n                        -> @Expr {\n     let to_str = cx.ident_of(\"to_str\");\n "}, {"sha": "ecd06b3f49e5678debec88805e096910fdb927ac", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa191a559171094d89a598884ea18aba6cbda858/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=fa191a559171094d89a598884ea18aba6cbda858", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_zero(cx: &ExtCtxt,\n+pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@Item])\n@@ -57,7 +57,7 @@ pub fn expand_deriving_zero(cx: &ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn zero_substructure(cx: &ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n+fn zero_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let zero_ident = ~[\n         cx.ident_of(\"std\"),\n         cx.ident_of(\"num\"),"}]}