{"sha": "50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTA2ZWU5NWFiMTJiYzIwNGZkY2U1NTdhYjBmYjdhYTVlNWFiMmY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-02T22:13:32Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Refactor the code", "tree": {"sha": "84288818104bab46ac52a60e6e0d4ba4624ab817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84288818104bab46ac52a60e6e0d4ba4624ab817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "html_url": "https://github.com/rust-lang/rust/commit/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e", "html_url": "https://github.com/rust-lang/rust/commit/d9bd1f171dde11ff04f0619b14d8f25e5e4fc56e"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "f2fa5c27b879c48e7e8a9638d9171f5742b13296", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -15,9 +15,15 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub merge: Option<MergeBehaviour>,\n+    /// A set of capabilities, enabled on the cliend and supported on the server.\n     pub resolve_capabilities: FxHashSet<CompletionResolveCapability>,\n }\n \n+/// A resolve capability, supported on a server.\n+/// If the client registers any of those in its completion resolve capabilities,\n+/// the server is able to render completion items' corresponding fields later,\n+/// not during an initial completion item request.\n+/// See https://github.com/rust-analyzer/rust-analyzer/issues/6366 for more details.\n #[derive(Debug, Copy, Clone, Hash, Eq, PartialEq)]\n pub enum CompletionResolveCapability {\n     Documentation,\n@@ -30,7 +36,8 @@ impl CompletionConfig {\n         self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n     }\n \n-    pub fn should_resolve_immediately(&self) -> bool {\n+    /// Whether the completions' additional edits are calculated later, during a resolve request or not.\n+    pub fn should_resolve_additional_edits_immediately(&self) -> bool {\n         !self.resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n     }\n }"}, {"sha": "775245b3b4fefc0282e675e9d7f6c4fa6fec3d73", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -67,8 +67,7 @@ pub struct CompletionItem {\n     /// possible match.\n     ref_match: Option<(Mutability, CompletionScore)>,\n \n-    /// The data later to be used in the `completionItem/resolve` response\n-    /// to add the insert import edit.\n+    /// The import data to add to completion's edits.\n     import_to_add: Option<ImportToAdd>,\n }\n "}, {"sha": "3a793000b4e4a59f8215094d105cfa8b2139f0d3", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -194,7 +194,10 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n+                .add_import(\n+                    import_to_add,\n+                    self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n+                )\n                 .build();\n                 return Some(item);\n             }\n@@ -249,7 +252,10 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n+            .add_import(\n+                import_to_add,\n+                self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n+            )\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "6548b4676c962fa4d0b4372de2eb8362fab3bd92", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -71,7 +71,10 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n+        .add_import(\n+            import_to_add,\n+            self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n+        )\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "b13e0dafc14abe5f4e81d4b72763b5a518da0039", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -47,7 +47,10 @@ impl<'a> FunctionRender<'a> {\n             .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n+            .add_import(\n+                import_to_add,\n+                self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n+            )\n             .build()\n     }\n "}, {"sha": "7a8eeb7b91fd7254eb36e6ebee983e1b2dc2a260", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -50,7 +50,10 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(import_to_add, self.ctx.completion.config.should_resolve_immediately())\n+                .add_import(\n+                    import_to_add,\n+                    self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n+                )\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "4c1b1a83923ac80d00ce3a431ac2de3d104643e5", "filename": "crates/completion/src/test_utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -97,7 +97,6 @@ pub(crate) fn check_edit_with_config(\n         .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n     let mut actual = db.file_text(position.file_id).to_string();\n     completion.text_edit().apply(&mut actual);\n-    // git  how to apply imports now?\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n "}, {"sha": "0b6ca76e2191a26dbb0154598e78d85e11d51887", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -32,7 +32,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         })),\n         hover_provider: Some(HoverProviderCapability::Simple(true)),\n         completion_provider: Some(CompletionOptions {\n-            resolve_provider: Some(true),\n+            resolve_provider: completions_resolve_provider(client_caps),\n             trigger_characters: Some(vec![\":\".to_string(), \".\".to_string()]),\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },\n         }),\n@@ -50,9 +50,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         document_symbol_provider: Some(OneOf::Left(true)),\n         workspace_symbol_provider: Some(OneOf::Left(true)),\n         code_action_provider: Some(code_action_capabilities(client_caps)),\n-        code_lens_provider: Some(CodeLensOptions {\n-            resolve_provider: resolve_provider(client_caps),\n-        }),\n+        code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(OneOf::Left(true)),\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n@@ -97,16 +95,16 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n     }\n }\n \n-fn resolve_provider(client_caps: &ClientCapabilities) -> Option<bool> {\n-    if enabled_resolve_capabilities(client_caps)?.is_empty() {\n+fn completions_resolve_provider(client_caps: &ClientCapabilities) -> Option<bool> {\n+    if enabled_completions_resolve_capabilities(client_caps)?.is_empty() {\n         None\n     } else {\n         Some(true)\n     }\n }\n \n-/// Parses client capabilities and returns all that rust-analyzer supports.\n-pub fn enabled_resolve_capabilities(\n+/// Parses client capabilities and returns all completion resolve capabilities rust-analyzer supports.\n+pub fn enabled_completions_resolve_capabilities(\n     caps: &ClientCapabilities,\n ) -> Option<FxHashSet<CompletionResolveCapability>> {\n     Some("}, {"sha": "5ce7ae426329fafc69260d19f7625b6544c6faef", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -19,7 +19,7 @@ use rustc_hash::FxHashSet;\n use serde::Deserialize;\n use vfs::AbsPathBuf;\n \n-use crate::{caps::enabled_resolve_capabilities, diagnostics::DiagnosticsMapConfig};\n+use crate::{caps::enabled_completions_resolve_capabilities, diagnostics::DiagnosticsMapConfig};\n \n #[derive(Debug, Clone)]\n pub struct Config {\n@@ -389,7 +389,7 @@ impl Config {\n \n             self.completion.allow_snippets(false);\n             self.completion.resolve_capabilities =\n-                enabled_resolve_capabilities(caps).unwrap_or_default();\n+                enabled_completions_resolve_capabilities(caps).unwrap_or_default();\n             if let Some(completion) = &doc_caps.completion {\n                 if let Some(completion_item) = &completion.completion_item {\n                     if let Some(value) = completion_item.snippet_support {"}, {"sha": "2dc62ee517f59380028324c56ea5dfcfbff0e764", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -581,7 +581,7 @@ pub(crate) fn handle_completion(\n                 &line_index,\n                 line_endings,\n                 item.clone(),\n-                &snap.config.completion.resolve_capabilities,\n+                snap.config.completion.should_resolve_additional_edits_immediately(),\n             );\n \n             let item_id = serde_json::to_value(&item_index)"}, {"sha": "f5337f3f10a33fb58f243ab987b22471c78d8ba8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "patch": "@@ -5,18 +5,17 @@ use std::{\n };\n \n use ide::{\n-    Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, CompletionResolveCapability,\n-    Documentation, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag,\n-    HighlightedRange, ImportToAdd, Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex,\n-    Markup, NavigationTarget, ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange,\n+    Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation,\n+    FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n+    ImportToAdd, Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup,\n+    NavigationTarget, ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange,\n     SourceFileEdit, TextEdit,\n };\n use ide_db::{\n     base_db::{FileId, FileRange},\n     helpers::{insert_use, mod_path_to_ast},\n };\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n use syntax::{algo, SyntaxKind, TextRange, TextSize};\n \n use crate::{\n@@ -163,7 +162,7 @@ pub(crate) fn completion_item(\n     line_index: &LineIndex,\n     line_endings: LineEndings,\n     completion_item: CompletionItem,\n-    resolve_capabilities: &FxHashSet<CompletionResolveCapability>,\n+    should_resolve_additional_edits_immediately: bool,\n ) -> Vec<lsp_types::CompletionItem> {\n     fn set_score(res: &mut lsp_types::CompletionItem, label: &str) {\n         res.preselect = Some(true);\n@@ -237,14 +236,12 @@ pub(crate) fn completion_item(\n         None => vec![res],\n     };\n \n-    let unapplied_import_data = completion_item.import_to_add().filter(|_| {\n-        !resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n-    });\n-\n     for mut r in all_results.iter_mut() {\n         r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n-        if let Some(unapplied_import_data) = unapplied_import_data {\n-            append_import_edits(r, unapplied_import_data, line_index, line_endings);\n+        if !should_resolve_additional_edits_immediately {\n+            if let Some(unapplied_import_data) = completion_item.import_to_add() {\n+                append_import_edits(r, unapplied_import_data, line_index, line_endings);\n+            }\n         }\n     }\n \n@@ -891,7 +888,6 @@ mod tests {\n         let (offset, text) = test_utils::extract_offset(fixture);\n         let line_index = LineIndex::new(&text);\n         let (analysis, file_id) = Analysis::from_single_file(text);\n-        let resolve_caps = FxHashSet::default();\n         let completions: Vec<(String, Option<String>)> = analysis\n             .completions(\n                 &ide::CompletionConfig::default(),\n@@ -901,7 +897,7 @@ mod tests {\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.label().ends_with(\"arg\"))\n-            .map(|c| completion_item(&line_index, LineEndings::Unix, c, &resolve_caps))\n+            .map(|c| completion_item(&line_index, LineEndings::Unix, c, true))\n             .flat_map(|comps| comps.into_iter().map(|c| (c.label, c.sort_text)))\n             .collect();\n         expect_test::expect![[r#\""}]}