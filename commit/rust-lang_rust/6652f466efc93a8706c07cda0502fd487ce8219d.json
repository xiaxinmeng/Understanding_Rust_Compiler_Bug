{"sha": "6652f466efc93a8706c07cda0502fd487ce8219d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTJmNDY2ZWZjOTNhODcwNmMwN2NkYTA1MDJmZDQ4N2NlODIxOWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-06T19:11:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-06T19:11:03Z"}, "message": "Rustup to rustc 1.42.0-nightly (bc1571cc3 2020-01-05)", "tree": {"sha": "b8cb6248bbe2e488d8506a36efd9dffa4123ca1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8cb6248bbe2e488d8506a36efd9dffa4123ca1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6652f466efc93a8706c07cda0502fd487ce8219d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6652f466efc93a8706c07cda0502fd487ce8219d", "html_url": "https://github.com/rust-lang/rust/commit/6652f466efc93a8706c07cda0502fd487ce8219d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6652f466efc93a8706c07cda0502fd487ce8219d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737", "html_url": "https://github.com/rust-lang/rust/commit/a3b8619c1e1a7c2e0e8ce5cb37482a206782c737"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "ab6ab7a0aa398bada276cc72846540bc73ff3b78", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -358,7 +358,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = self.tcx.const_caller_location((\n-            syntax::symbol::Symbol::intern(&caller.file.name.to_string()),\n+            rustc_span::symbol::Symbol::intern(&caller.file.name.to_string()),\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));"}, {"sha": "7f908851e4135a8e1e76354ec0db9968e711f6a0", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n \n-use syntax::source_map::DUMMY_SP;\n+use rustc_span::DUMMY_SP;\n \n use rustc::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, InterpResult, Scalar,\n@@ -391,6 +391,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn find_mir_or_eval_fn(\n         _: &mut InterpCx<'mir, 'tcx, Self>,\n+        _: Span,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<(PlaceTy<'tcx>, BasicBlock)>,"}, {"sha": "ef09bd406ce514ecb6fa251e99580d543865c373", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -3,7 +3,7 @@ use std::path::{Component, Path};\n \n use crate::prelude::*;\n \n-use syntax::source_map::FileName;\n+use rustc_span::FileName;\n \n use cranelift_codegen::binemit::CodeOffset;\n "}, {"sha": "4d38e2e7d78b54e04aaf4cceeb58e09265ae77bb", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -207,7 +207,7 @@ fn run_aot(\n \n     let metadata_module = if need_metadata_module {\n         let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n-        let (metadata_cgu_name, tmp_file) = rustc::util::common::time(tcx.sess, \"write compressed metadata\", || {\n+        let (metadata_cgu_name, tmp_file) = tcx.sess.time(\"write compressed metadata\", || {\n             use rustc::mir::mono::CodegenUnitNameBuilder;\n \n             let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);"}, {"sha": "24750e6938cc47b2caa05cd4bcd7ef750d12bfb2", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -13,6 +13,7 @@ extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_mir;\n extern crate rustc_session;\n+extern crate rustc_span;\n extern crate rustc_target;\n extern crate syntax;\n \n@@ -64,7 +65,7 @@ mod prelude {\n     pub use std::convert::{TryFrom, TryInto};\n \n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n-    pub use syntax::source_map::{Pos, Span};\n+    pub use rustc_span::{Pos, Span};\n \n     pub use rustc::bug;\n     pub use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -219,7 +220,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         let _timer = sess.prof.generic_activity(\"link_crate\");\n \n-        rustc::util::common::time(sess, \"linking\", || {\n+        sess.time(\"linking\", || {\n             let target_cpu = crate::target_triple(sess).to_string();\n             link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n                 sess,"}, {"sha": "20e31e19189948545cf75c037c996b10ec6d8633", "filename": "src/target_features_whitelist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Ftarget_features_whitelist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6652f466efc93a8706c07cda0502fd487ce8219d/src%2Ftarget_features_whitelist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftarget_features_whitelist.rs?ref=6652f466efc93a8706c07cda0502fd487ce8219d", "patch": "@@ -1,4 +1,4 @@\n-use syntax::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Symbol};\n \n use rustc::session::Session;\n "}]}