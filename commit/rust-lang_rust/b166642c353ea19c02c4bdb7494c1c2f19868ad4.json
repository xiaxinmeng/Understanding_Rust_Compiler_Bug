{"sha": "b166642c353ea19c02c4bdb7494c1c2f19868ad4", "node_id": "C_kwDOAAsO6NoAKGIxNjY2NDJjMzUzZWExOWMwMmM0YmRiNzQ5NGMxYzJmMTk4NjhhZDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-15T00:28:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-15T00:28:04Z"}, "message": "Rollup merge of #90939 - estebank:wg-af-polish, r=tmandry\n\nTweak errors coming from `for`-loop, `?` and `.await` desugaring\n\n * Suggest removal of `.await` on non-`Future` expression\n * Keep track of obligations introduced by desugaring\n * Remove span pointing at method for obligation errors coming from desugaring\n * Point at called local sync `fn` and suggest making it `async`\n\n```\nerror[E0277]: `()` is not a future\n  --> $DIR/unnecessary-await.rs:9:10\n   |\nLL |     boo().await;\n   |     -----^^^^^^ `()` is not a future\n   |     |\n   |     this call returns `()`\n   |\n   = help: the trait `Future` is not implemented for `()`\nhelp: do not `.await` the expression\n   |\nLL -     boo().await;\nLL +     boo();\n   |\nhelp: alternatively, consider making `fn boo` asynchronous\n   |\nLL | async fn boo () {}\n   | +++++\n```\n\nFix #66731.", "tree": {"sha": "ba3317f58cb5b376c1ee142f8ed0c7cf390cf5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3317f58cb5b376c1ee142f8ed0c7cf390cf5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b166642c353ea19c02c4bdb7494c1c2f19868ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b166642c353ea19c02c4bdb7494c1c2f19868ad4", "html_url": "https://github.com/rust-lang/rust/commit/b166642c353ea19c02c4bdb7494c1c2f19868ad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b166642c353ea19c02c4bdb7494c1c2f19868ad4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b6cc5d5764e83a122f24d966a59a60cee871633", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6cc5d5764e83a122f24d966a59a60cee871633", "html_url": "https://github.com/rust-lang/rust/commit/6b6cc5d5764e83a122f24d966a59a60cee871633"}, {"sha": "c5287b37fa048e83374afa274168f184a4479013", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5287b37fa048e83374afa274168f184a4479013", "html_url": "https://github.com/rust-lang/rust/commit/c5287b37fa048e83374afa274168f184a4479013"}], "stats": {"total": 127, "additions": 47, "deletions": 80}, "files": [{"sha": "e5fafdb075c66374f42ef4eafe0b13fb2ea52b9f", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -204,7 +204,7 @@ fn parse_iter_usage(\n         match e.kind {\n             ExprKind::Call(\n                 Expr {\n-                    kind: ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)),\n+                    kind: ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, ..)),\n                     ..\n                 },\n                 _,"}, {"sha": "5b098659377c64805c5dc72eb8904bc740ca8ba1", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -73,7 +73,7 @@ fn contains_assign_expr<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) ->\n     seen\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n struct LocalAssign {\n     lhs_id: HirId,\n     lhs_span: Span,\n@@ -154,9 +154,14 @@ fn assignment_suggestions<'tcx>(\n         assignments.push(assign);\n     }\n \n-    let suggestions = assignments\n+    let suggestions = assignments.clone()\n         .into_iter()\n-        .map(|assignment| Some((assignment.span, snippet_opt(cx, assignment.rhs_span)?)))\n+        .map(|assignment| Some((assignment.span.until(assignment.rhs_span), String::new())))\n+        .chain(\n+            assignments\n+                .into_iter()\n+                .map(|assignment| Some((assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()), String::new())))\n+        )\n         .collect::<Option<Vec<(Span, String)>>>()?;\n \n     let applicability = if suggestions.len() > 1 {"}, {"sha": "0e7ae43ce2dd53df347a380c4321f24b50f6cd51", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -105,7 +105,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         };\n         if let ExprKind::Match(inner_expr_with_q, _, MatchSource::TryDesugar) = &arg.kind;\n         if let ExprKind::Call(called, [inner_expr]) = &inner_expr_with_q.kind;\n-        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)) = &called.kind;\n+        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, ..)) = &called.kind;\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);"}, {"sha": "c2163a24b7f44b7271cf7116be68dea0c949707e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -260,7 +260,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if method_names[0] == sym!(as_bytes);\n \n             // Check for slicer\n-            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, _), _, _) = right.kind;\n+            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), _, _) = right.kind;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "4da32c52e750a06e47e1c68a840a83df0c429b8d", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n             if let ExprKind::Match(match_arg, _, MatchSource::TryDesugar) = expr.kind;\n             if let ExprKind::Call(match_fun, try_args) = match_arg.kind;\n             if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n-            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, _));\n+            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n             if let Some(try_arg) = try_args.get(0);\n             if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n             if let Some(err_arg) = err_args.get(0);"}, {"sha": "111413e51930bd06dacd48a0e8c99917f617d443", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                 if let hir::ExprKind::Call(func, [ref arg_0, ..]) = res.kind {\n                     if matches!(\n                         func.kind,\n-                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, _))\n+                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, ..))\n                     ) {\n                         check_map_error(cx, arg_0, expr);\n                     }"}, {"sha": "f186e1f05a0b45d3324f75717f5daf3a00d606c2", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n     }\n \n     fn qpath(&self, qpath: &Binding<&QPath<'_>>) {\n-        if let QPath::LangItem(lang_item, _) = *qpath.value {\n+        if let QPath::LangItem(lang_item, ..) = *qpath.value {\n             out!(\"if matches!({qpath}, QPath::LangItem(LangItem::{lang_item:?}, _));\");\n         } else {\n             out!(\"if match_qpath({qpath}, &[{}]);\", path_to_string(qpath.value));"}, {"sha": "fc32e49420e4b82debc05b94c593f3814a52c7f7", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -218,7 +218,7 @@ impl<'a> Range<'a> {\n             hir::ExprKind::Call(path, args)\n                 if matches!(\n                     path.kind,\n-                    hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, _))\n+                    hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, ..))\n                 ) =>\n             {\n                 Some(Range {\n@@ -228,27 +228,27 @@ impl<'a> Range<'a> {\n                 })\n             },\n             hir::ExprKind::Struct(path, fields, None) => match &path {\n-                hir::QPath::LangItem(hir::LangItem::RangeFull, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeFull, ..) => Some(Range {\n                     start: None,\n                     end: None,\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeFrom, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeFrom, ..) => Some(Range {\n                     start: Some(get_field(\"start\", fields)?),\n                     end: None,\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::Range, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::Range, ..) => Some(Range {\n                     start: Some(get_field(\"start\", fields)?),\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeToInclusive, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeToInclusive, ..) => Some(Range {\n                     start: None,\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::Closed,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeTo, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeTo, ..) => Some(Range {\n                     start: None,\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::HalfOpen,"}, {"sha": "5b059e37886996fe085a7b90a9a61e2ffea2e237", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -346,7 +346,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&QPath::TypeRelative(lty, lseg), &QPath::TypeRelative(rty, rseg)) => {\n                 self.eq_ty(lty, rty) && self.eq_path_segment(lseg, rseg)\n             },\n-            (&QPath::LangItem(llang_item, _), &QPath::LangItem(rlang_item, _)) => llang_item == rlang_item,\n+            (&QPath::LangItem(llang_item, ..), &QPath::LangItem(rlang_item, ..)) => llang_item == rlang_item,\n             _ => false,\n         }\n     }"}, {"sha": "a9f2ad36d0aba06294010d71216093977cba5319", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -6,22 +6,22 @@ LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |\n    = note: `-D clippy::future-not-send` implied by `-D warnings`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:5\n+  --> $DIR/future_not_send.rs:8:19\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rc` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:5\n+  --> $DIR/future_not_send.rs:8:19\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\n LL |     async { true }.await\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `cell` maybe used later\n+   |                   ^^^^^^ await occurs here, with `cell` maybe used later\n LL | }\n    | - `cell` is later dropped here\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n@@ -33,12 +33,12 @@ LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                                          ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:12:5\n+  --> $DIR/future_not_send.rs:12:19\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rc` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n@@ -82,12 +82,12 @@ LL |     async fn private_future(&self) -> usize {\n    |                                       ^^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:35:9\n+  --> $DIR/future_not_send.rs:35:23\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                             ----- has type `&Dummy` which is not `Send`\n LL |         async { true }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `&self` maybe used later\n+   |                       ^^^^^^ await occurs here, with `&self` maybe used later\n LL |         self.rc.len()\n LL |     }\n    |     - `&self` is later dropped here\n@@ -100,12 +100,12 @@ LL |     pub async fn public_future(&self) {\n    |                                       ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:40:9\n+  --> $DIR/future_not_send.rs:40:30\n    |\n LL |     pub async fn public_future(&self) {\n    |                                ----- has type `&Dummy` which is not `Send`\n LL |         self.private_future().await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `&self` maybe used later\n+   |                              ^^^^^^ await occurs here, with `&self` maybe used later\n LL |     }\n    |     - `&self` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n@@ -117,12 +117,12 @@ LL | async fn generic_future<T>(t: T) -> T\n    |                                     ^ future returned by `generic_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:54:5\n+  --> $DIR/future_not_send.rs:54:19\n    |\n LL |     let rt = &t;\n    |         -- has type `&T` which is not `Send`\n LL |     async { true }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rt` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rt` maybe used later\n LL |     t\n LL | }\n    | - `rt` is later dropped here"}, {"sha": "32d5d04fde4d52001484eef8e615a157eaad177e", "filename": "tests/ui/needless_late_init_fixable.fixed", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b6cc5d5764e83a122f24d966a59a60cee871633/tests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6b6cc5d5764e83a122f24d966a59a60cee871633/tests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.fixed?ref=6b6cc5d5764e83a122f24d966a59a60cee871633", "patch": "@@ -1,38 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    \n-    let a = \"zero\";\n-\n-    \n-    \n-    let b = 1;\n-    let c = 2;\n-\n-    \n-    let d: usize = 1;\n-\n-    \n-    let mut e = 1;\n-    e = 2;\n-\n-    \n-    let f = match 1 {\n-        1 => \"three\",\n-        _ => return,\n-    }; // has semi\n-\n-    \n-    let g: usize = if true {\n-        5\n-    } else {\n-        panic!();\n-    };\n-\n-    \n-    let h = format!(\"{}\", e);\n-\n-    println!(\"{}\", a);\n-}"}, {"sha": "76099df0e0689cfa8e51b25fe3564315d171b2cf", "filename": "tests/ui/needless_late_init_fixable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.rs?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused, clippy::assign_op_pattern)]\n \n fn main() {"}, {"sha": "728e19252ea707b4428fed20f466f12646e0d6d8", "filename": "tests/ui/needless_late_init_fixable.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b166642c353ea19c02c4bdb7494c1c2f19868ad4/tests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.stderr?ref=b166642c353ea19c02c4bdb7494c1c2f19868ad4", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:6:5\n+  --> $DIR/needless_late_init_fixable.rs:4:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -11,7 +11,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:9:5\n+  --> $DIR/needless_late_init_fixable.rs:7:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -22,7 +22,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:10:5\n+  --> $DIR/needless_late_init_fixable.rs:8:5\n    |\n LL |     let c;\n    |     ^^^^^^\n@@ -33,7 +33,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:14:5\n+  --> $DIR/needless_late_init_fixable.rs:12:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:17:5\n+  --> $DIR/needless_late_init_fixable.rs:15:5\n    |\n LL |     let mut e;\n    |     ^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     let mut e = 1;\n    |     ~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:21:5\n+  --> $DIR/needless_late_init_fixable.rs:19:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -66,11 +66,12 @@ LL |     let f = match 1 {\n    |     +++++++\n help: remove the assignments from the `match` arms\n    |\n-LL |         1 => \"three\",\n-   |              ~~~~~~~\n+LL -         1 => f = \"three\",\n+LL +         1 => \"three\",\n+   | \n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:27:5\n+  --> $DIR/needless_late_init_fixable.rs:25:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -81,15 +82,16 @@ LL |     let g: usize = if true {\n    |     ++++++++++++++\n help: remove the assignments from the branches\n    |\n-LL |         5\n-   |\n+LL -         g = 5;\n+LL +         5\n+   | \n help: add a semicolon after the `if` expression\n    |\n LL |     };\n    |      +\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:34:5\n+  --> $DIR/needless_late_init_fixable.rs:32:5\n    |\n LL |     let h;\n    |     ^^^^^^"}]}