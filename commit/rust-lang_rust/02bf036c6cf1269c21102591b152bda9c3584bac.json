{"sha": "02bf036c6cf1269c21102591b152bda9c3584bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmYwMzZjNmNmMTI2OWMyMTEwMjU5MWIxNTJiZGE5YzM1ODRiYWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-08T02:36:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T02:36:07Z"}, "message": "Rollup merge of #75253 - RalfJung:cleanup-const-hack, r=oli-obk\n\nclean up const-hacks in int endianess conversion functions\n\nCleans up the const hacks added in https://github.com/rust-lang/rust/pull/69373.\n\nr? @oli-obk", "tree": {"sha": "427e48e472fcff5d7666cdc177ca33b151aff53a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427e48e472fcff5d7666cdc177ca33b151aff53a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bf036c6cf1269c21102591b152bda9c3584bac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLg+XCRBK7hj4Ov3rIwAAdHIIAJolinDZLc+R4qgG9R4GL3XU\nFAkrXQUY9VX/gpkk7/Iq/6pFMbZHVPCCwoj5t7PXonIfWyq+FvmS/Dg39xki7ko+\nMbh3Eff0EEXm5NUZ9Z2fQp8uY0Z2nbI9pp2+bbvaLgl/H6WaTYQNOpe5CquavUGh\nEXMDd2oxo+DDrcCToenYYJ/tI/9WZIuInlRRLPss+vx9x9S2UxoI2Ur8Rn7++abi\nwxzZEaFxmzYi/BrpnHi6kiBcQe4cnxzurumtRvVTGlStDaSZAGnn1sGn6+cBLTyL\ny+CdyDlmguuPkbltKAx//HS1QZSBweu0clIVdwpu/JiwfgvteL5WC0xIzMrQ+AI=\n=5jBa\n-----END PGP SIGNATURE-----\n", "payload": "tree 427e48e472fcff5d7666cdc177ca33b151aff53a\nparent b032a15fa8fae9d101d7dd37d6627d7d677f8d1e\nparent a5309349510190178c8a860732374026bc2be298\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596854167 +0900\ncommitter GitHub <noreply@github.com> 1596854167 +0900\n\nRollup merge of #75253 - RalfJung:cleanup-const-hack, r=oli-obk\n\nclean up const-hacks in int endianess conversion functions\n\nCleans up the const hacks added in https://github.com/rust-lang/rust/pull/69373.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bf036c6cf1269c21102591b152bda9c3584bac", "html_url": "https://github.com/rust-lang/rust/commit/02bf036c6cf1269c21102591b152bda9c3584bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bf036c6cf1269c21102591b152bda9c3584bac/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "html_url": "https://github.com/rust-lang/rust/commit/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e"}, {"sha": "a5309349510190178c8a860732374026bc2be298", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5309349510190178c8a860732374026bc2be298", "html_url": "https://github.com/rust-lang/rust/commit/a5309349510190178c8a860732374026bc2be298"}], "stats": {"total": 36, "additions": 8, "deletions": 28}, "files": [{"sha": "68937176270356a031ac23cf1fed6053f5edff5a", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/02bf036c6cf1269c21102591b152bda9c3584bac/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bf036c6cf1269c21102591b152bda9c3584bac/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=02bf036c6cf1269c21102591b152bda9c3584bac", "patch": "@@ -2346,17 +2346,12 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { Bytes { val: self }.bytes }\n+                unsafe { mem::transmute(self) }\n             }\n         }\n \n@@ -2464,16 +2459,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { Bytes { bytes }.val }\n+                unsafe { mem::transmute(bytes) }\n             }\n         }\n \n@@ -4368,17 +4358,12 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n                 // arrays of bytes\n-                unsafe { Bytes { val: self }.bytes }\n+                unsafe { mem::transmute(self) }\n             }\n         }\n \n@@ -4486,16 +4471,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_union)]\n+            #[allow_internal_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-                #[repr(C)]\n-                union Bytes {\n-                    val: $SelfT,\n-                    bytes: [u8; mem::size_of::<$SelfT>()],\n-                }\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n-                unsafe { Bytes { bytes }.val }\n+                unsafe { mem::transmute(bytes) }\n             }\n         }\n "}]}