{"sha": "564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NGM1NjliY2IxYjg1ZWMzYjFmOTNkZTYwYjdmN2IzODVjNWJkMTc=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-02-17T07:18:43Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2019-02-17T07:19:24Z"}, "message": "Monomorphize less code in fs::{read|write}\n\nSince the generic-ness is only for the as_refs, might as well have std just compile the important part once instead of on every use.", "tree": {"sha": "c4eaa4efc9769555bdb945576d1e82e53150d81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4eaa4efc9769555bdb945576d1e82e53150d81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "html_url": "https://github.com/rust-lang/rust/commit/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ca0b9f6335db824e44629be1cafb6e3fcc4628", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca0b9f6335db824e44629be1cafb6e3fcc4628", "html_url": "https://github.com/rust-lang/rust/commit/16ca0b9f6335db824e44629be1cafb6e3fcc4628"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "7074e08b9b97a7dc93dfe5b53f10e9ae66a5bba7", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564c569bcb1b85ec3b1f93de60b7f7b385c5bd17/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=564c569bcb1b85ec3b1f93de60b7f7b385c5bd17", "patch": "@@ -254,10 +254,13 @@ fn initial_buffer_size(file: &File) -> usize {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut file = File::open(path)?;\n-    let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n-    file.read_to_end(&mut bytes)?;\n-    Ok(bytes)\n+    fn inner(path: &Path) -> io::Result<Vec<u8>> {\n+        let mut file = File::open(path)?;\n+        let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n+        file.read_to_end(&mut bytes)?;\n+        Ok(bytes)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Read the entire contents of a file into a string.\n@@ -296,10 +299,13 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[stable(feature = \"fs_read_write\", since = \"1.26.0\")]\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut file = File::open(path)?;\n-    let mut string = String::with_capacity(initial_buffer_size(&file));\n-    file.read_to_string(&mut string)?;\n-    Ok(string)\n+    fn inner(path: &Path) -> io::Result<String> {\n+        let mut file = File::open(path)?;\n+        let mut string = String::with_capacity(initial_buffer_size(&file));\n+        file.read_to_string(&mut string)?;\n+        Ok(string)\n+    }\n+    inner(path.as_ref())\n }\n \n /// Write a slice as the entire contents of a file.\n@@ -326,7 +332,10 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n /// ```\n #[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\n pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n-    File::create(path)?.write_all(contents.as_ref())\n+    fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n+        File::create(path)?.write_all(contents)\n+    }\n+    inner(path.as_ref(), contents.as_ref())\n }\n \n impl File {"}]}