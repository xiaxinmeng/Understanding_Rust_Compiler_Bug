{"sha": "7072c2278ed46bf902b1d14900bf2d0875237413", "node_id": "C_kwDOAAsO6NoAKDcwNzJjMjI3OGVkNDZiZjkwMmIxZDE0OTAwYmYyZDA4NzUyMzc0MTM", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-01-27T06:21:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-27T06:21:00Z"}, "message": "Merge portable-simd#232 - ./feat/typecast\n\nAdd Simd::cast\r\nAdd core_simd/tests/cast.rs", "tree": {"sha": "c0a0f4cc949e2f020fea25751f5f182c2f547503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a0f4cc949e2f020fea25751f5f182c2f547503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7072c2278ed46bf902b1d14900bf2d0875237413", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8jnMCRBK7hj4Ov3rIwAAq8QIAIKqho4k7/NrUUVTsKWUZyEg\n87w/sqbvT8L+3J4pZeG2TKTONuR0arK8N0coOhfFMFHPgxfJ/RNa23A0lGmlgbNi\nwGKNuVOmV7LWWCud/dzF2RsPn/RwqSu5415vn9b+Wa1z8/tY7FoQVkyJ+ONMrVgi\n2z2e+PZISlSD/fHCQVgjYSi/B0cKD6IpdTDLjaLGUXfDE+uTUESp57ul/SCKf44Q\nZ4RM+ptzPHxVuXJ73iVSIV1NF6LNc1LtoT+6DqNUTNDmWrRzJppZYzp6yKQC8Wn1\nK34Ex02+faPoufrwPK/Q1X0+IzKPGk0laczylPfwEM1RMzAtazinSHXuYaR2r7s=\n=ufHd\n-----END PGP SIGNATURE-----\n", "payload": "tree c0a0f4cc949e2f020fea25751f5f182c2f547503\nparent cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b\nparent 0031b02cee0c7679120c7a942c378cd13bfb5021\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1643264460 -0800\ncommitter GitHub <noreply@github.com> 1643264460 -0800\n\nMerge portable-simd#232 - ./feat/typecast\n\nAdd Simd::cast\r\nAdd core_simd/tests/cast.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7072c2278ed46bf902b1d14900bf2d0875237413", "html_url": "https://github.com/rust-lang/rust/commit/7072c2278ed46bf902b1d14900bf2d0875237413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7072c2278ed46bf902b1d14900bf2d0875237413/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b", "html_url": "https://github.com/rust-lang/rust/commit/cad74346fb8f55f0e3a7dc7c4b64b56681d8ee2b"}, {"sha": "0031b02cee0c7679120c7a942c378cd13bfb5021", "url": "https://api.github.com/repos/rust-lang/rust/commits/0031b02cee0c7679120c7a942c378cd13bfb5021", "html_url": "https://github.com/rust-lang/rust/commit/0031b02cee0c7679120c7a942c378cd13bfb5021"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "2291400537c9431fa0d292e0b43bb95c4ea4e52f", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=7072c2278ed46bf902b1d14900bf2d0875237413", "patch": "@@ -39,6 +39,9 @@ extern \"platform-intrinsic\" {\n \n     /// fptoui/fptosi/uitofp/sitofp\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n+    /// follows Rust's `T as U` semantics, including saturating float casts\n+    /// which amounts to the same as `simd_cast` for many cases\n+    pub(crate) fn simd_as<T, U>(x: T) -> U;\n \n     /// neg/fneg\n     pub(crate) fn simd_neg<T>(x: T) -> T;"}, {"sha": "a9e99a18c2db5853142c41755db32790a0d517ce", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=7072c2278ed46bf902b1d14900bf2d0875237413", "patch": "@@ -75,6 +75,35 @@ where\n         Self(array)\n     }\n \n+    /// Performs lanewise conversion of a SIMD vector's elements to another SIMD-valid type.\n+    /// This follows the semantics of Rust's `as` conversion for casting\n+    /// integers to unsigned integers (interpreting as the other type, so `-1` to `MAX`),\n+    /// and from floats to integers (truncating, or saturating at the limits) for each lane,\n+    /// or vice versa.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n+    /// let floats: Simd<f32, 4> = Simd::from_array([1.9, -4.5, f32::INFINITY, f32::NAN]);\n+    /// let ints = floats.cast::<i32>();\n+    /// assert_eq!(ints, Simd::from_array([1, -4, i32::MAX, 0]));\n+    ///\n+    /// // Formally equivalent, but `Simd::cast` can optimize better.\n+    /// assert_eq!(ints, Simd::from_array(floats.to_array().map(|x| x as i32)));\n+    ///\n+    /// // The float conversion does not round-trip.\n+    /// let floats_again = ints.cast();\n+    /// assert_ne!(floats, floats_again);\n+    /// assert_eq!(floats_again, Simd::from_array([1.0, -4.0, 2147483647.0, 0.0]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    pub fn cast<U: SimdElement>(self) -> Simd<U, LANES> {\n+        unsafe { intrinsics::simd_as(self) }\n+    }\n+\n     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.\n     /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n     ///"}, {"sha": "ab5650f071323a9e0b96dbb80c123495372bbf1e", "filename": "crates/core_simd/tests/cast.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Ftests%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072c2278ed46bf902b1d14900bf2d0875237413/crates%2Fcore_simd%2Ftests%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fcast.rs?ref=7072c2278ed46bf902b1d14900bf2d0875237413", "patch": "@@ -0,0 +1,37 @@\n+#![feature(portable_simd)]\n+macro_rules! cast_types {\n+    ($start:ident, $($target:ident),*) => {\n+        mod $start {\n+            use core_simd::simd::Simd;\n+            type Vector<const N: usize> = Simd<$start, N>;\n+            $(\n+                mod $target {\n+                    use super::*;\n+                    test_helpers::test_lanes! {\n+                        fn cast_as<const N: usize>() {\n+                            test_helpers::test_unary_elementwise(\n+                                &Vector::<N>::cast::<$target>,\n+                                &|x| x as $target,\n+                                &|_| true,\n+                            )\n+                        }\n+                    }\n+                }\n+            )*\n+        }\n+    };\n+}\n+\n+// The hypothesis is that widening conversions aren't terribly interesting.\n+cast_types!(f32, f64, i8, u8, usize, isize);\n+cast_types!(f64, f32, i8, u8, usize, isize);\n+cast_types!(i8, u8, f32);\n+cast_types!(u8, i8, f32);\n+cast_types!(i16, u16, i8, u8, f32);\n+cast_types!(u16, i16, i8, u8, f32);\n+cast_types!(i32, u32, i8, u8, f32, f64);\n+cast_types!(u32, i32, i8, u8, f32, f64);\n+cast_types!(i64, u64, i8, u8, isize, usize, f32, f64);\n+cast_types!(u64, i64, i8, u8, isize, usize, f32, f64);\n+cast_types!(isize, usize, i8, u8, f32, f64);\n+cast_types!(usize, isize, i8, u8, f32, f64);"}]}