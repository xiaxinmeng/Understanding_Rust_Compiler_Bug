{"sha": "c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "node_id": "C_kwDOAAsO6NoAKGM2M2JhNTI1NjJhMGM2YzhkMTliMzIwYzU1OGQ0MzdiYjhkODdiZDg", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-09-18T14:03:35Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `array_into_iter.rs`", "tree": {"sha": "a71439bc107e17d832121d8c80d10d6093fae90b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71439bc107e17d832121d8c80d10d6093fae90b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "html_url": "https://github.com/rust-lang/rust/commit/c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c63ba52562a0c6c8d19b320c558d437bb8d87bd8/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d3e0cb782016d7e360741a590cb07cc6413d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d3e0cb782016d7e360741a590cb07cc6413d27", "html_url": "https://github.com/rust-lang/rust/commit/95d3e0cb782016d7e360741a590cb07cc6413d27"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "ea5975ed4f0b3deab02f38ea118a8cff10315bf2", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c63ba52562a0c6c8d19b320c558d437bb8d87bd8/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63ba52562a0c6c8d19b320c558d437bb8d87bd8/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "patch": "@@ -1,5 +1,7 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::lints::{ArrayIntoIterDiag, ArrayIntoIterDiagSub};\n use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_errors::{fluent, Applicability};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n@@ -118,41 +120,23 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 // to an array or to a slice.\n                 _ => bug!(\"array type coerced to something other than array or slice\"),\n             };\n-            cx.struct_span_lint(\n+            let sub = if self.for_expr_span == expr.span {\n+                Some(ArrayIntoIterDiagSub::RemoveIntoIter {\n+                    span: receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n+                })\n+            } else if receiver_ty.is_array() {\n+                Some(ArrayIntoIterDiagSub::UseExplicitIntoIter {\n+                    start_span: expr.span.shrink_to_lo(),\n+                    end_span: receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n+                })\n+            } else {\n+                None\n+            };\n+            cx.emit_spanned_lint(\n                 ARRAY_INTO_ITER,\n                 call.ident.span,\n-                fluent::lint_array_into_iter,\n-                |diag| {\n-                    diag.set_arg(\"target\", target);\n-                    diag.span_suggestion(\n-                        call.ident.span,\n-                        fluent::use_iter_suggestion,\n-                        \"iter\",\n-                        Applicability::MachineApplicable,\n-                    );\n-                    if self.for_expr_span == expr.span {\n-                        diag.span_suggestion(\n-                            receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n-                            fluent::remove_into_iter_suggestion,\n-                            \"\",\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else if receiver_ty.is_array() {\n-                        diag.multipart_suggestion(\n-                            fluent::use_explicit_into_iter_suggestion,\n-                            vec![\n-                                (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n-                                (\n-                                    receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n-                                    \")\".into(),\n-                                ),\n-                            ],\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    diag\n-                },\n-            )\n+                ArrayIntoIterDiag { target, suggestion: call.ident.span, sub },\n+            );\n         }\n     }\n }"}, {"sha": "9bfd000351a8c16aab617be74764c4904a482d03", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c63ba52562a0c6c8d19b320c558d437bb8d87bd8/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63ba52562a0c6c8d19b320c558d437bb8d87bd8/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=c63ba52562a0c6c8d19b320c558d437bb8d87bd8", "patch": "@@ -6,6 +6,32 @@ use rustc_span::{symbol::Ident, Span, Symbol};\n \n use crate::LateContext;\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_array_into_iter)]\n+pub struct ArrayIntoIterDiag<'a> {\n+    pub target: &'a str,\n+    #[suggestion(use_iter_suggestion, code = \"iter\", applicability = \"machine-applicable\")]\n+    pub suggestion: Span,\n+    #[subdiagnostic]\n+    pub sub: Option<ArrayIntoIterDiagSub>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum ArrayIntoIterDiagSub {\n+    #[suggestion(remove_into_iter_suggestion, code = \"\", applicability = \"maybe-incorrect\")]\n+    RemoveIntoIter {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[multipart_suggestion(use_explicit_into_iter_suggestion, applicability = \"maybe-incorrect\")]\n+    UseExplicitIntoIter {\n+        #[suggestion_part(code = \"IntoIterator::into_iter(\")]\n+        start_span: Span,\n+        #[suggestion_part(code = \")\")]\n+        end_span: Span,\n+    },\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_cstring_ptr)]\n #[note]\n@@ -454,11 +480,7 @@ pub struct PathStatementDrop {\n \n #[derive(SessionSubdiagnostic)]\n pub enum PathStatementDropSub {\n-    #[suggestion(\n-        suggestion,\n-        code = \"drop({snippet});\",\n-        applicability = \"machine-applicable\"\n-    )]\n+    #[suggestion(suggestion, code = \"drop({snippet});\", applicability = \"machine-applicable\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,"}]}