{"sha": "6a3695d54f14491c39da7910082df9ba9c833b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzY5NWQ1NGYxNDQ5MWMzOWRhNzkxMDA4MmRmOWJhOWM4MzNiMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-29T00:31:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-29T00:31:30Z"}, "message": "auto merge of #15241 : arjantop/rust/maybeownedvector-improvements, r=alexcrichton", "tree": {"sha": "6df91be0b62cc8b01201c8005b65faf7996a85f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df91be0b62cc8b01201c8005b65faf7996a85f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3695d54f14491c39da7910082df9ba9c833b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3695d54f14491c39da7910082df9ba9c833b37", "html_url": "https://github.com/rust-lang/rust/commit/6a3695d54f14491c39da7910082df9ba9c833b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3695d54f14491c39da7910082df9ba9c833b37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6b69977a1d1b0e9295b7561491e2a863f7d221", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6b69977a1d1b0e9295b7561491e2a863f7d221", "html_url": "https://github.com/rust-lang/rust/commit/1e6b69977a1d1b0e9295b7561491e2a863f7d221"}, {"sha": "8fce20c2cbd151b1e9a7ddbebfed39bbcf1d5f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fce20c2cbd151b1e9a7ddbebfed39bbcf1d5f7f", "html_url": "https://github.com/rust-lang/rust/commit/8fce20c2cbd151b1e9a7ddbebfed39bbcf1d5f7f"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "026db9d96f676e86ab54fcbf5fe81994d7c81f4e", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6a3695d54f14491c39da7910082df9ba9c833b37/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3695d54f14491c39da7910082df9ba9c833b37/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=6a3695d54f14491c39da7910082df9ba9c833b37", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::collections::Collection;\n+use std::default::Default;\n use std::fmt;\n use std::iter::FromIterator;\n+use std::path::BytesContainer;\n use std::slice;\n \n // Note 1: It is not clear whether the flexibility of providing both\n@@ -61,6 +64,32 @@ impl<'a,T> MaybeOwnedVector<'a,T> {\n     }\n }\n \n+impl<'a, T: PartialEq> PartialEq for MaybeOwnedVector<'a, T> {\n+    fn eq(&self, other: &MaybeOwnedVector<T>) -> bool {\n+        self.as_slice() == other.as_slice()\n+    }\n+}\n+\n+impl<'a, T: Eq> Eq for MaybeOwnedVector<'a, T> {}\n+\n+impl<'a, T: PartialOrd> PartialOrd for MaybeOwnedVector<'a, T> {\n+    fn lt(&self, other: &MaybeOwnedVector<T>) -> bool {\n+        self.as_slice().lt(&other.as_slice())\n+    }\n+}\n+\n+impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n+    fn cmp(&self, other: &MaybeOwnedVector<T>) -> Ordering {\n+        self.as_slice().cmp(&other.as_slice())\n+    }\n+}\n+\n+impl<'a, T: PartialEq, V: Vector<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n+    fn equiv(&self, other: &V) -> bool {\n+        self.as_slice() == other.as_slice()\n+    }\n+}\n+\n // The `Vector` trait is provided in the prelude and is implemented on\n // both `&'a [T]` and `Vec<T>`, so it makes sense to try to support it\n // seamlessly.  The other vector related traits from the prelude do\n@@ -108,6 +137,34 @@ impl<'a,T:Clone> CloneableVector<T> for MaybeOwnedVector<'a,T> {\n     }\n }\n \n+impl<'a, T: Clone> Clone for MaybeOwnedVector<'a, T> {\n+    fn clone(&self) -> MaybeOwnedVector<'a, T> {\n+        match *self {\n+            Growable(ref v) => Growable(v.to_owned()),\n+            Borrowed(v) => Borrowed(v)\n+        }\n+    }\n+}\n+\n+\n+impl<'a, T> Default for MaybeOwnedVector<'a, T> {\n+    fn default() -> MaybeOwnedVector<'a, T> {\n+        Growable(Vec::new())\n+    }\n+}\n+\n+impl<'a, T> Collection for MaybeOwnedVector<'a, T> {\n+    fn len(&self) -> uint {\n+        self.as_slice().len()\n+    }\n+}\n+\n+impl<'a> BytesContainer for MaybeOwnedVector<'a, u8> {\n+    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+        self.as_slice()\n+    }\n+}\n+\n impl<'a,T:Clone> MaybeOwnedVector<'a,T> {\n     /// Convert `self` into a growable `Vec`, not making a copy if possible.\n     pub fn into_vec(self) -> Vec<T> {"}]}