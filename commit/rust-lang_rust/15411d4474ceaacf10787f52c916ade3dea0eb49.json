{"sha": "15411d4474ceaacf10787f52c916ade3dea0eb49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDExZDQ0NzRjZWFhY2YxMDc4N2Y1MmM5MTZhZGUzZGVhMGViNDk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-04T21:28:36Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-04T21:28:36Z"}, "message": "Use proper inlay kinds", "tree": {"sha": "d2f242b981d485b0531a53ffbe78532010b34708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f242b981d485b0531a53ffbe78532010b34708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15411d4474ceaacf10787f52c916ade3dea0eb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15411d4474ceaacf10787f52c916ade3dea0eb49", "html_url": "https://github.com/rust-lang/rust/commit/15411d4474ceaacf10787f52c916ade3dea0eb49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15411d4474ceaacf10787f52c916ade3dea0eb49/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c02aebeb560b6c388a8b94723042b1e25eb49e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c02aebeb560b6c388a8b94723042b1e25eb49e9", "html_url": "https://github.com/rust-lang/rust/commit/2c02aebeb560b6c388a8b94723042b1e25eb49e9"}], "stats": {"total": 58, "additions": 15, "deletions": 43}, "files": [{"sha": "60a2c7cf57bf95d8f7dd92a87570e8955571c0b6", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=15411d4474ceaacf10787f52c916ade3dea0eb49", "patch": "@@ -9,14 +9,9 @@ use ra_syntax::{\n     SmolStr, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-#[derive(Debug, PartialEq, Eq, Clone)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {\n-    LetBindingType,\n-    ClosureParameterType,\n-    ForExpressionBindingType,\n-    IfExpressionType,\n-    WhileLetExpressionType,\n-    MatchArmType,\n+    TypeHint,\n }\n \n #[derive(Debug)]\n@@ -46,7 +41,7 @@ fn get_inlay_hints(\n             }\n             let pat = let_statement.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, let_statement.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::LetBindingType, false))\n+            Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n         .visit(|closure_parameter: LambdaExpr| {\n             let analyzer = SourceAnalyzer::new(db, file_id, closure_parameter.syntax(), None);\n@@ -55,33 +50,25 @@ fn get_inlay_hints(\n                     .params()\n                     .filter(|closure_param| closure_param.ascribed_type().is_none())\n                     .filter_map(|closure_param| closure_param.pat())\n-                    .map(|root_pat| {\n-                        get_pat_hints(\n-                            db,\n-                            &analyzer,\n-                            root_pat,\n-                            InlayKind::ClosureParameterType,\n-                            false,\n-                        )\n-                    })\n+                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false))\n                     .flatten()\n                     .collect()\n             })\n         })\n         .visit(|for_expression: ForExpr| {\n             let pat = for_expression.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, for_expression.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::ForExpressionBindingType, false))\n+            Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n         .visit(|if_expr: IfExpr| {\n             let pat = if_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, if_expr.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::IfExpressionType, true))\n+            Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n         .visit(|while_expr: WhileExpr| {\n             let pat = while_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, while_expr.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::WhileLetExpressionType, true))\n+            Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n         .visit(|match_arm_list: MatchArmList| {\n             let analyzer = SourceAnalyzer::new(db, file_id, match_arm_list.syntax(), None);\n@@ -90,21 +77,18 @@ fn get_inlay_hints(\n                     .arms()\n                     .map(|match_arm| match_arm.pats())\n                     .flatten()\n-                    .map(|root_pat| {\n-                        get_pat_hints(db, &analyzer, root_pat, InlayKind::MatchArmType, true)\n-                    })\n+                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true))\n                     .flatten()\n                     .collect(),\n             )\n         })\n         .accept(&node)?\n }\n \n-fn get_pat_hints(\n+fn get_pat_type_hints(\n     db: &RootDatabase,\n     analyzer: &SourceAnalyzer,\n     root_pat: Pat,\n-    kind: InlayKind,\n     skip_root_pat_hint: bool,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n@@ -118,7 +102,7 @@ fn get_pat_hints(\n         })\n         .map(|(range, pat_type)| InlayHint {\n             range,\n-            kind: kind.clone(),\n+            kind: InlayKind::TypeHint,\n             label: pat_type.display(db).to_string().into(),\n         })\n         .collect()\n@@ -364,7 +348,7 @@ fn main() {\n     if let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n     if let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n     if let CustomOption::Some(Test { b: y, .. }) = &test {};\n-    \n+\n     if test == CustomOption::None {}\n }\"#,\n         );\n@@ -425,7 +409,7 @@ fn main() {\n     while let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n     while let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n     while let CustomOption::Some(Test { b: y, .. }) = &test {};\n-    \n+\n     while test == CustomOption::None {}\n }\"#,\n         );\n@@ -445,7 +429,7 @@ fn main() {\n         let (analysis, file_id) = single_file(\n             r#\"\n #[derive(PartialEq)]\n-enum CustomOption<T> { \n+enum CustomOption<T> {\n     None,\n     Some(T),\n }"}, {"sha": "a6dc1f964e0cce2b217cf570a1b7518dbfdb4bb4", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=15411d4474ceaacf10787f52c916ade3dea0eb49", "patch": "@@ -894,14 +894,7 @@ pub fn handle_inlay_hints(\n             label: api_type.label.to_string(),\n             range: api_type.range.conv_with(&line_index),\n             kind: match api_type.kind {\n-                ra_ide_api::InlayKind::LetBindingType => InlayKind::LetBindingType,\n-                ra_ide_api::InlayKind::ClosureParameterType => InlayKind::ClosureParameterType,\n-                ra_ide_api::InlayKind::ForExpressionBindingType => {\n-                    InlayKind::ForExpressionBindingType\n-                }\n-                ra_ide_api::InlayKind::IfExpressionType => InlayKind::IfExpressionType,\n-                ra_ide_api::InlayKind::WhileLetExpressionType => InlayKind::WhileLetExpressionType,\n-                ra_ide_api::InlayKind::MatchArmType => InlayKind::MatchArmType,\n+                ra_ide_api::InlayKind::TypeHint => InlayKind::TypeHint,\n             },\n         })\n         .collect())"}, {"sha": "6b986bcc93894728b21d98cce5c41abd8d5553d1", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15411d4474ceaacf10787f52c916ade3dea0eb49/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=15411d4474ceaacf10787f52c916ade3dea0eb49", "patch": "@@ -213,12 +213,7 @@ pub struct InlayHintsParams {\n \n #[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n pub enum InlayKind {\n-    LetBindingType,\n-    ClosureParameterType,\n-    ForExpressionBindingType,\n-    IfExpressionType,\n-    WhileLetExpressionType,\n-    MatchArmType,\n+    TypeHint,\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}]}