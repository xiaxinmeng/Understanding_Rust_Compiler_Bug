{"sha": "9856144b0bdc1519c04a387ac4a9805722710c2d", "node_id": "C_kwDOAAsO6NoAKDk4NTYxNDRiMGJkYzE1MTljMDRhMzg3YWM0YTk4MDU3MjI3MTBjMmQ", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-05-05T05:10:07Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-05-05T05:12:08Z"}, "message": "Lower values of char and byte literals", "tree": {"sha": "bf2965e9d05d011da2b096c7c4f7a647c28b07d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2965e9d05d011da2b096c7c4f7a647c28b07d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9856144b0bdc1519c04a387ac4a9805722710c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9856144b0bdc1519c04a387ac4a9805722710c2d", "html_url": "https://github.com/rust-lang/rust/commit/9856144b0bdc1519c04a387ac4a9805722710c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9856144b0bdc1519c04a387ac4a9805722710c2d/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0218aeba7a1713be694624fadbf57e09d021f72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0218aeba7a1713be694624fadbf57e09d021f72a", "html_url": "https://github.com/rust-lang/rust/commit/0218aeba7a1713be694624fadbf57e09d021f72a"}], "stats": {"total": 189, "additions": 178, "deletions": 11}, "files": [{"sha": "e8303ec40f747aaf678a6b27097c6f1d299a45fc", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -983,9 +983,11 @@ impl From<ast::LiteralKind> for Literal {\n                 let text = s.value().map(Box::from).unwrap_or_else(Default::default);\n                 Literal::String(text)\n             }\n-            LiteralKind::Byte => Literal::Uint(Default::default(), Some(BuiltinUint::U8)),\n+            LiteralKind::Byte(b) => {\n+                Literal::Uint(b.value().unwrap_or_default() as u128, Some(BuiltinUint::U8))\n+            }\n+            LiteralKind::Char(c) => Literal::Char(c.value().unwrap_or_default()),\n             LiteralKind::Bool(val) => Literal::Bool(val),\n-            LiteralKind::Char => Literal::Char(Default::default()),\n         }\n     }\n }"}, {"sha": "74c5c98689baf8915b7fb129f817b491fc7a00df", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -3507,6 +3507,94 @@ const FOO$0: &str = \"bar\";\n \n             ---\n \n+            This is a doc\n+        \"#]],\n+    );\n+    // show char literal\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: char = 'a';\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: char = 'a'\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // show escaped char literal\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: char = '\\x61';\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: char = 'a'\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // show byte literal\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: u8 = b'a';\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: u8 = 97 (0x61)\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    // show escaped byte literal\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: u8 = b'\\x61';\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: u8 = 97 (0x61)\n+            ```\n+\n+            ---\n+\n             This is a doc\n         \"#]],\n     );"}, {"sha": "3b9e201f573400fe49782d36cbed676d19502fcb", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -8,7 +8,6 @@\n //!\n //! The `cli` submodule implements some batch-processing analysis, primarily as\n //! a debugging aid.\n-#![recursion_limit = \"512\"]\n \n pub mod cli;\n "}, {"sha": "17785152bc59bcdc314fda23490b70f78f50bd13", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -283,8 +283,8 @@ pub enum LiteralKind {\n     ByteString(ast::ByteString),\n     IntNumber(ast::IntNumber),\n     FloatNumber(ast::FloatNumber),\n-    Char,\n-    Byte,\n+    Char(ast::Char),\n+    Byte(ast::Byte),\n     Bool(bool),\n }\n \n@@ -312,12 +312,16 @@ impl ast::Literal {\n         if let Some(t) = ast::ByteString::cast(token.clone()) {\n             return LiteralKind::ByteString(t);\n         }\n+        if let Some(t) = ast::Char::cast(token.clone()) {\n+            return LiteralKind::Char(t);\n+        }\n+        if let Some(t) = ast::Byte::cast(token.clone()) {\n+            return LiteralKind::Byte(t);\n+        }\n \n         match token.kind() {\n             T![true] => LiteralKind::Bool(true),\n             T![false] => LiteralKind::Bool(false),\n-            CHAR => LiteralKind::Char,\n-            BYTE => LiteralKind::Byte,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "a3209c5abd23e1c8a9b93ae5f4ceffb2046cc5a7", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -132,6 +132,48 @@ impl AstToken for FloatNumber {\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Char {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for Char {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for Char {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CHAR }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Byte {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for Byte {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for Byte {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Ident {\n     pub(crate) syntax: SyntaxToken,"}, {"sha": "4b6dc236b534dd5e7b70f68974d92deabe2fe7c4", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -2,7 +2,7 @@\n \n use std::borrow::Cow;\n \n-use rustc_lexer::unescape::{unescape_literal, Mode};\n+use rustc_lexer::unescape::{unescape_byte, unescape_char, unescape_literal, Mode};\n \n use crate::{\n     ast::{self, AstToken},\n@@ -406,3 +406,35 @@ mod tests {\n         check_string_value(r\"C:\\\\Windows\\\\System32\\\\\", \"C:\\\\Windows\\\\System32\\\\\");\n     }\n }\n+\n+impl ast::Char {\n+    pub fn value(&self) -> Option<char> {\n+        let mut text = self.text();\n+        if text.starts_with('\\'') {\n+            text = &text[1..];\n+        } else {\n+            return None;\n+        }\n+        if text.ends_with('\\'') {\n+            text = &text[0..text.len() - 1];\n+        }\n+\n+        unescape_char(text).ok()\n+    }\n+}\n+\n+impl ast::Byte {\n+    pub fn value(&self) -> Option<u8> {\n+        let mut text = self.text();\n+        if text.starts_with(\"b\\'\") {\n+            text = &text[2..];\n+        } else {\n+            return None;\n+        }\n+        if text.ends_with('\\'') {\n+            text = &text[0..text.len() - 1];\n+        }\n+\n+        unescape_byte(text).ok()\n+    }\n+}"}, {"sha": "4cfb8075cb155c5a47677701d8a50cc2c0938b28", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -585,7 +585,7 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Ident\"\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n             .split_ascii_whitespace()\n             .map(|it| it.to_string())\n             .collect::<Vec<_>>(),"}, {"sha": "c2c2c82e11fbbf0df7125946e3d88d3cd4db5e75", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9856144b0bdc1519c04a387ac4a9805722710c2d/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=9856144b0bdc1519c04a387ac4a9805722710c2d", "patch": "@@ -151,12 +151,12 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 }\n             }\n         }\n-        ast::LiteralKind::Char => {\n+        ast::LiteralKind::Char(_) => {\n             if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n                 push_err(1, e);\n             }\n         }\n-        ast::LiteralKind::Byte => {\n+        ast::LiteralKind::Byte(_) => {\n             if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n                 push_err(2, e);\n             }"}]}