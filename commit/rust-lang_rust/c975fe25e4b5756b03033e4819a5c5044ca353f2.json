{"sha": "c975fe25e4b5756b03033e4819a5c5044ca353f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NzVmZTI1ZTRiNTc1NmIwMzAzM2U0ODE5YTVjNTA0NGNhMzUzZjI=", "commit": {"author": {"name": "Tor Hovland", "email": "tor+github@hovland.co", "date": "2021-04-18T15:30:04Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-04-18T16:02:08Z"}, "message": "Put attrs in a Box for memory efficiency.", "tree": {"sha": "9386c531ea39473b7d785b60c10c64fb2f523d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9386c531ea39473b7d785b60c10c64fb2f523d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c975fe25e4b5756b03033e4819a5c5044ca353f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c975fe25e4b5756b03033e4819a5c5044ca353f2", "html_url": "https://github.com/rust-lang/rust/commit/c975fe25e4b5756b03033e4819a5c5044ca353f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c975fe25e4b5756b03033e4819a5c5044ca353f2/comments", "author": {"login": "torhovland", "id": 55164, "node_id": "MDQ6VXNlcjU1MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/55164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torhovland", "html_url": "https://github.com/torhovland", "followers_url": "https://api.github.com/users/torhovland/followers", "following_url": "https://api.github.com/users/torhovland/following{/other_user}", "gists_url": "https://api.github.com/users/torhovland/gists{/gist_id}", "starred_url": "https://api.github.com/users/torhovland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torhovland/subscriptions", "organizations_url": "https://api.github.com/users/torhovland/orgs", "repos_url": "https://api.github.com/users/torhovland/repos", "events_url": "https://api.github.com/users/torhovland/events{/privacy}", "received_events_url": "https://api.github.com/users/torhovland/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2a77b3d46e09a263fbba0ad7b964781659e6f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a77b3d46e09a263fbba0ad7b964781659e6f40", "html_url": "https://github.com/rust-lang/rust/commit/e2a77b3d46e09a263fbba0ad7b964781659e6f40"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "dc8784df9311c0b4ff5511b1914d616fdc90f731", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c975fe25e4b5756b03033e4819a5c5044ca353f2", "patch": "@@ -2081,7 +2081,7 @@ crate enum ImportKind {\n crate struct ImportSource {\n     crate path: Path,\n     crate did: Option<DefId>,\n-    crate attrs: Option<Attributes>,\n+    crate attrs: Option<Box<Attributes>>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "97dad8924b61a64e5dc4f3ee792b911931864e6a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c975fe25e4b5756b03033e4819a5c5044ca353f2", "patch": "@@ -469,7 +469,7 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n \n crate fn resolve_use_source(cx: &mut DocContext<'_>, path: Path) -> ImportSource {\n     let did = if path.res.opt_def_id().is_none() { None } else { Some(register_res(cx, path.res)) };\n-    let attrs = did.map(|did| cx.tcx.get_attrs(did).clean(cx));\n+    let attrs = did.map(|did| Box::new(cx.tcx.get_attrs(did).clean(cx)));\n \n     ImportSource { did, path, attrs }\n }"}, {"sha": "d941095e5e17f9187388335dc3398ca755b0faf1", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c975fe25e4b5756b03033e4819a5c5044ca353f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c975fe25e4b5756b03033e4819a5c5044ca353f2", "patch": "@@ -285,8 +285,6 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 let (stab, stab_tags) = if let (Some(def_id), Some(attrs)) =\n                     (import.source.did, import.source.attrs.clone())\n                 {\n-                    let attrs = Box::new(attrs);\n-\n                     // Just need an item with the correct def_id and attrs\n                     let import_item = clean::Item { def_id, attrs, ..myitem.clone() };\n "}]}