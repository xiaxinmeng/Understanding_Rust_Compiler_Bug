{"sha": "4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDNkNGFiMWVjNzBmN2Q1NzJjNTg1MTY4YjIyNWEzY2U4MzEwMGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-21T05:37:37Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-21T06:26:19Z"}, "message": "More work on typechecking classes\n\nclasses-simple doesn't fail until trans now!", "tree": {"sha": "f7a1fc75369c7fd61172bd26b6042e2d483b1f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a1fc75369c7fd61172bd26b6042e2d483b1f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "html_url": "https://github.com/rust-lang/rust/commit/4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd3d4ab1ec70f7d572c585168b225a3ce83100a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4220dcf1e9de2c2d2c329ecefa80108b63a69145", "url": "https://api.github.com/repos/rust-lang/rust/commits/4220dcf1e9de2c2d2c329ecefa80108b63a69145", "html_url": "https://github.com/rust-lang/rust/commit/4220dcf1e9de2c2d2c329ecefa80108b63a69145"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "2bd37585d04d51e5afecc1d753c3cf779d9cb760", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cd3d4ab1ec70f7d572c585168b225a3ce83100a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd3d4ab1ec70f7d572c585168b225a3ce83100a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "patch": "@@ -2493,7 +2493,6 @@ fn enum_variant_with_id(cx: ctxt, enum_id: ast::def_id,\n \n // If the given item is in an external crate, looks up its type and adds it to\n // the type cache. Returns the type parameters and type.\n-// a precondition (did.crate != ast::local_crate) would be nice\n fn lookup_item_type(cx: ctxt, did: ast::def_id) -> ty_param_bounds_and_ty {\n     alt cx.tcache.find(did) {\n       some(tpt) { ret tpt; }"}, {"sha": "f844ad4c2eae2e857e05141cccf900c6c34edf61", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4cd3d4ab1ec70f7d572c585168b225a3ce83100a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd3d4ab1ec70f7d572c585168b225a3ce83100a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4cd3d4ab1ec70f7d572c585168b225a3ce83100a", "patch": "@@ -209,7 +209,7 @@ fn structurally_resolved_type(fcx: @fn_ctxt, sp: span, tp: ty::t) -> ty::t {\n }\n \n \n-// Returns the one-level-deep structure of the given type.f\n+// Returns the one-level-deep structure of the given type.\n fn structure_of(fcx: @fn_ctxt, sp: span, typ: ty::t) -> ty::sty {\n     ty::get(structurally_resolved_type(fcx, sp, typ)).struct\n }\n@@ -1835,6 +1835,30 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n     result\n }\n \n+fn lookup_field_ty(cx: ty::ctxt, items:[@ast::class_item],\n+                   fieldname: ast::ident, sp: span)\n+    -> ty::t {\n+    for item in items {\n+      // this is an access outside the class, so accessing a private\n+      // field is an error\n+        alt item.node.decl {\n+          ast::instance_var(declname, t, _, _) if declname == fieldname {\n+             alt item.node.privacy {\n+                ast::priv {\n+                    cx.sess.span_fatal(sp, \"Accessed private field outside \\\n+                       its enclosing class\");\n+                }\n+                ast::pub {\n+                    ret ast_ty_to_ty(cx, m_check, t);\n+                }\n+             }\n+          }\n+          _ { /* do nothing */ }\n+        }\n+    }\n+    cx.sess.span_fatal(sp, #fmt(\"Unbound field %s\", fieldname));\n+}\n+\n fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n                               expr: @ast::expr,\n                               proto: ast::proto,\n@@ -2507,11 +2531,29 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n               _ {}\n             }\n           }\n-          ty::ty_class(_id, _params) {\n-              // TODO (classes)\n-              tcx.sess.span_bug(expr.span,\n-                  #fmt(\"can't check class field accesses yet: %s\",\n-                    ty_to_str(fcx.ccx.tcx, base_t)));\n+          ty::ty_class(base_id, _params) {\n+              // (1) verify that the class id actually has a field called\n+              // field\n+              // For now, this code assumes the class is defined in the local\n+              // crate\n+              // TODO: handle field references to classes in external crate\n+              let err = \"Class ID is not bound to a class\";\n+              let field_ty = alt fcx.ccx.tcx.items.find(base_id.node) {\n+                      some(ast_map::node_item(i,_)) {\n+                          alt i.node {\n+                             ast::item_class(_, items, _, _, _) {\n+                                 lookup_field_ty(fcx.ccx.tcx, items, field,\n+                                    expr.span)\n+                             }\n+                             _ { fcx.ccx.tcx.sess.span_bug(expr.span, err); }\n+                          }\n+                      }\n+                      _ { fcx.ccx.tcx.sess.span_bug(expr.span, err); }\n+              };\n+              // (2) look up what field's type is, and return it\n+              // TODO: actually instantiate any type params\n+              write_ty(tcx, id, field_ty);\n+              handled = true;\n           }\n           _ {}\n         }"}]}