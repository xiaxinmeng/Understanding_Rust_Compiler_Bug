{"sha": "d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDNkN2RlNjhkMzMxODI5YjVkY2QwOGJlM2Q0YWVjMWE3YTdmMmI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-01T16:00:58Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-09T13:37:08Z"}, "message": "lint: transitive FFI-safety for transparent types\n\nThis commit ensures that if a `repr(transparent)` newtype's only\nnon-zero-sized field is FFI-safe then the newtype is also FFI-safe.\n\nPreviously, ZSTs were ignored for the purposes of linting FFI-safety\nin transparent structs - thus, only the single non-ZST would be checked\nfor FFI-safety. However, if the non-zero-sized field is a generic\nparameter, and is substituted for a ZST, then the type would be\nconsidered FFI-unsafe (as when every field is thought to be zero-sized,\nthe type is considered to be \"composed only of `PhantomData`\" which is\nFFI-unsafe).\n\nIn this commit, for transparent structs, the non-zero-sized field is\nidentified (before any substitutions are applied, necessarily) and then\nthat field's type (now with substitutions) is checked for FFI-safety\n(where previously it would have been skipped for being zero-sized in\nthis case).\n\nTo handle the case where the non-zero-sized field is a generic\nparameter, which is substituted for `()` (a ZST), and is being used\nas a return type - the `FfiUnsafe` result (previously `FfiPhantom`) is\ncaught and silenced.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "2c0344dceb06682a889bbe4876f829b470ef8b48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0344dceb06682a889bbe4876f829b470ef8b48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7fkIQACgkQJZLnbIc4\nH9ndSg//Qk1gDROSiFCzg4JyYGe+N5HZOT2/GtLH6Gu8qZ+MNo7+J/vpGsxAcUeI\n2Bcx4vkJTFRMP9sc5HOzck6PLH+29Zy/qN6lzIfWrtc5f8kkGbnlYLtooaB0w2/k\n5OKM3LGnRh4ieBUUc1yMlTUiUHnzK2NJTeO2onmyS1N4SeiLYnJYHcW1bM3tArsx\n1u3gTTuDyv9PALVoFBwENi6KQvWMqLmwy1Q7Z5jHEA0UA710+YAhBtcV4RSnMefs\n/3wFM8FrWU1fW3N/yAaYlQH2a3FaWfVsU6hlFBP0m3FbccU+zxkWe1ZHWdgfg3Qp\nvdDJTT8W12GrVX98zL6Clxn+mgjM5f7PCWm5QV3M2lZqxS+IItrELRhnq6zVsf59\nQdEUXlPXyYOZJvSWQ2tLN+nCfcsqrgyALMc3FPESeZ68F2lkQDXlOxuAVT97XhnW\nRSt/CqA9b+MzkXfXNJCAoZm91LISI20BDe/KVtQX0LG6HW1SkZYV4bnJPuTpmQJZ\nD7WAn/qZM/UdZ0o/b0F/uhNmGhxAM5RTUPq5YSewBKWp8jQc3UEM18HjrEVJnoU1\nZiJQB4EkDreBi5yzH42D1nYPZV2Qr9zq5zK5GmHxOVAlGRc3evM4pLOKm3JNUJXa\nAArz4o6vg/ko3rM3RY93C8BHCEyAPIF+UaQgmCZiwLcNQkpW0xg=\n=oHZE\n-----END PGP SIGNATURE-----", "payload": "tree 2c0344dceb06682a889bbe4876f829b470ef8b48\nparent 3e7aabb1b3ec9ad66c7a306cd956e880a1a51483\nauthor David Wood <david@davidtw.co> 1591027258 +0100\ncommitter David Wood <david@davidtw.co> 1591709828 +0100\n\nlint: transitive FFI-safety for transparent types\n\nThis commit ensures that if a `repr(transparent)` newtype's only\nnon-zero-sized field is FFI-safe then the newtype is also FFI-safe.\n\nPreviously, ZSTs were ignored for the purposes of linting FFI-safety\nin transparent structs - thus, only the single non-ZST would be checked\nfor FFI-safety. However, if the non-zero-sized field is a generic\nparameter, and is substituted for a ZST, then the type would be\nconsidered FFI-unsafe (as when every field is thought to be zero-sized,\nthe type is considered to be \"composed only of `PhantomData`\" which is\nFFI-unsafe).\n\nIn this commit, for transparent structs, the non-zero-sized field is\nidentified (before any substitutions are applied, necessarily) and then\nthat field's type (now with substitutions) is checked for FFI-safety\n(where previously it would have been skipped for being zero-sized in\nthis case).\n\nTo handle the case where the non-zero-sized field is a generic\nparameter, which is substituted for `()` (a ZST), and is being used\nas a return type - the `FfiUnsafe` result (previously `FfiPhantom`) is\ncaught and silenced.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "html_url": "https://github.com/rust-lang/rust/commit/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "html_url": "https://github.com/rust-lang/rust/commit/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483"}], "stats": {"total": 120, "additions": 69, "deletions": 51}, "files": [{"sha": "cdb0eda645a48a4ea3ecd1c4c10cd266ae48fe8d", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "patch": "@@ -6,7 +6,6 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{sign_extend, truncate};\n@@ -511,10 +510,6 @@ enum FfiResult<'tcx> {\n     FfiUnsafe { ty: Ty<'tcx>, reason: &'static str, help: Option<&'static str> },\n }\n \n-fn is_zst<'tcx>(tcx: TyCtxt<'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n-    tcx.layout_of(tcx.param_env(did).and(ty)).map(|layout| layout.is_zst()).unwrap_or(false)\n-}\n-\n fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind {\n         ty::FnPtr(_) => true,\n@@ -523,7 +518,7 @@ fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n             for field in field_def.all_fields() {\n                 let field_ty =\n                     tcx.normalize_erasing_regions(ParamEnv::reveal_all(), field.ty(tcx, substs));\n-                if is_zst(tcx, field.did, field_ty) {\n+                if field_ty.is_zst(tcx, field.did) {\n                     continue;\n                 }\n \n@@ -653,32 +648,43 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             };\n                         }\n \n-                        // We can't completely trust repr(C) and repr(transparent) markings;\n-                        // make sure the fields are actually safe.\n-                        let mut all_phantom = true;\n-                        for field in &def.non_enum_variant().fields {\n-                            let field_ty = cx.normalize_erasing_regions(\n-                                ParamEnv::reveal_all(),\n-                                field.ty(cx, substs),\n-                            );\n-                            // repr(transparent) types are allowed to have arbitrary ZSTs, not just\n-                            // PhantomData -- skip checking all ZST fields\n-                            if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n-                                continue;\n+                        if def.repr.transparent() {\n+                            // Can assume that only one field is not a ZST, so only check\n+                            // that field's type for FFI-safety.\n+                            if let Some(field) =\n+                                def.transparent_newtype_field(cx, self.cx.param_env)\n+                            {\n+                                let field_ty = cx.normalize_erasing_regions(\n+                                    self.cx.param_env,\n+                                    field.ty(cx, substs),\n+                                );\n+                                self.check_type_for_ffi(cache, field_ty)\n+                            } else {\n+                                FfiSafe\n                             }\n-                            let r = self.check_type_for_ffi(cache, field_ty);\n-                            match r {\n-                                FfiSafe => {\n-                                    all_phantom = false;\n-                                }\n-                                FfiPhantom(..) => {}\n-                                FfiUnsafe { .. } => {\n-                                    return r;\n+                        } else {\n+                            // We can't completely trust repr(C) markings; make sure the fields are\n+                            // actually safe.\n+                            let mut all_phantom = true;\n+                            for field in &def.non_enum_variant().fields {\n+                                let field_ty = cx.normalize_erasing_regions(\n+                                    self.cx.param_env,\n+                                    field.ty(cx, substs),\n+                                );\n+                                let r = self.check_type_for_ffi(cache, field_ty);\n+                                match r {\n+                                    FfiSafe => {\n+                                        all_phantom = false;\n+                                    }\n+                                    FfiPhantom(..) => {}\n+                                    FfiUnsafe { .. } => {\n+                                        return r;\n+                                    }\n                                 }\n                             }\n-                        }\n \n-                        if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n+                            if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n+                        }\n                     }\n                     AdtKind::Union => {\n                         if !def.repr.c() && !def.repr.transparent() {\n@@ -708,7 +714,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             );\n                             // repr(transparent) types are allowed to have arbitrary ZSTs, not just\n                             // PhantomData -- skip checking all ZST fields.\n-                            if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n+                            if def.repr.transparent() && field_ty.is_zst(cx, field.did) {\n                                 continue;\n                             }\n                             let r = self.check_type_for_ffi(cache, field_ty);\n@@ -774,7 +780,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 );\n                                 // repr(transparent) types are allowed to have arbitrary ZSTs, not\n                                 // just PhantomData -- skip checking all ZST fields.\n-                                if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n+                                if def.repr.transparent() && field_ty.is_zst(cx, field.did) {\n                                     continue;\n                                 }\n                                 let r = self.check_type_for_ffi(cache, field_ty);\n@@ -983,6 +989,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             FfiResult::FfiPhantom(ty) => {\n                 self.emit_ffi_unsafe_type_lint(ty, sp, \"composed only of `PhantomData`\", None);\n             }\n+            // If `ty` is a `repr(transparent)` newtype, and the non-zero-sized type is a generic\n+            // argument, which after substitution, is `()`, then this branch can be hit.\n+            FfiResult::FfiUnsafe { ty, .. } if is_return_type && ty.is_unit() => return,\n             FfiResult::FfiUnsafe { ty, reason, help } => {\n                 self.emit_ffi_unsafe_type_lint(ty, sp, reason, help);\n             }"}, {"sha": "caa1b4cb375fe03f44c8a4941058b874c35072e3", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "patch": "@@ -2390,6 +2390,29 @@ impl<'tcx> AdtDef {\n     pub fn sized_constraint(&self, tcx: TyCtxt<'tcx>) -> &'tcx [Ty<'tcx>] {\n         tcx.adt_sized_constraint(self.did).0\n     }\n+\n+    /// `repr(transparent)` structs can have a single non-ZST field, this function returns that\n+    /// field.\n+    pub fn transparent_newtype_field(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> Option<&FieldDef> {\n+        assert!(self.is_struct() && self.repr.transparent());\n+\n+        for field in &self.non_enum_variant().fields {\n+            let field_ty = tcx.normalize_erasing_regions(\n+                param_env,\n+                field.ty(tcx, InternalSubsts::identity_for_item(tcx, self.did)),\n+            );\n+\n+            if !field_ty.is_zst(tcx, self.did) {\n+                return Some(field);\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n impl<'tcx> FieldDef {"}, {"sha": "7550be39d4ab0443673a7e4102195742a7666fb3", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "patch": "@@ -2186,6 +2186,11 @@ impl<'tcx> TyS<'tcx> {\n             }\n         }\n     }\n+\n+    /// Is this a zero-sized type?\n+    pub fn is_zst(&'tcx self, tcx: TyCtxt<'tcx>, did: DefId) -> bool {\n+        tcx.layout_of(tcx.param_env(did).and(self)).map(|layout| layout.is_zst()).unwrap_or(false)\n+    }\n }\n \n /// Typed constant value."}, {"sha": "ebab41d143e675b2e37dcfd87144c5f45105859e", "filename": "src/test/ui/lint/lint-ctypes-66202.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs?ref=d4d3d7de68d331829b5dcd08be3d4aec1a7a7f2b", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![deny(improper_ctypes)]\n \n // This test checks that return types are normalized before being checked for FFI-safety, and that\n@@ -10,7 +12,6 @@ extern \"C\" {\n     pub fn bare() -> ();\n     pub fn normalize() -> <() as ToOwned>::Owned;\n     pub fn transparent() -> W<()>;\n-    //~^ ERROR uses type `W<()>`\n }\n \n fn main() {}"}, {"sha": "759c77deadc7bdd09c39eaf662259fc4eecdd565", "filename": "src/test/ui/lint/lint-ctypes-66202.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr?ref=3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "patch": "@@ -1,20 +0,0 @@\n-error: `extern` block uses type `W<()>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-66202.rs:12:29\n-   |\n-LL |     pub fn transparent() -> W<()>;\n-   |                             ^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-66202.rs:1:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: composed only of `PhantomData`\n-note: the type is defined here\n-  --> $DIR/lint-ctypes-66202.rs:7:1\n-   |\n-LL | pub struct W<T>(T);\n-   | ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}