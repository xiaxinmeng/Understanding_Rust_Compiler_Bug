{"sha": "eb4580a570069175e1290b294d91042a09f9fde3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDU4MGE1NzAwNjkxNzVlMTI5MGIyOTRkOTEwNDJhMDlmOWZkZTM=", "commit": {"author": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-28T18:46:13Z"}, "committer": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-29T04:57:31Z"}, "message": "Update ui test suite to use dyn", "tree": {"sha": "fdb0ef28968512495204bd7a3dc3253cdb20365a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb0ef28968512495204bd7a3dc3253cdb20365a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4580a570069175e1290b294d91042a09f9fde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4580a570069175e1290b294d91042a09f9fde3", "html_url": "https://github.com/rust-lang/rust/commit/eb4580a570069175e1290b294d91042a09f9fde3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4580a570069175e1290b294d91042a09f9fde3/comments", "author": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d1d7a2c696c2afeff2ea206621a32d77fa49dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d1d7a2c696c2afeff2ea206621a32d77fa49dc", "html_url": "https://github.com/rust-lang/rust/commit/a1d1d7a2c696c2afeff2ea206621a32d77fa49dc"}], "stats": {"total": 3225, "additions": 1620, "deletions": 1605}, "files": [{"sha": "8a1744ed5f8aeafb44e1dedb8f740131574c6ae5", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -31,11 +31,11 @@ fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n \n // Nested\n-fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n \n // Mixed\n-fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}"}, {"sha": "0ca3ca8437463179baaea3a872fb1cf457a4068b", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -149,8 +149,8 @@ LL |     g1(|_: (), _: ()| {});\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n-LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -163,8 +163,8 @@ LL |     g1(|_: (), _: ()| {});\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n-LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -205,8 +205,8 @@ LL |     g3(|_: (), _: ()| {});\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n-LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -219,8 +219,8 @@ LL |     g3(|_: (), _: ()| {});\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n-LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -261,8 +261,8 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n-LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -275,8 +275,8 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n-LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -289,8 +289,8 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n    |\n-LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -303,8 +303,8 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n    |\n-LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 22 previous errors\n "}, {"sha": "cc3acd539562279c9bfcb7ed06afd6cbb920fb05", "filename": "src/test/ui/associated-const/associated-const-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@ trait Trait {\n     const N: usize;\n }\n \n-impl Trait {\n+impl dyn Trait {\n     //~^ ERROR the trait `Trait` cannot be made into an object [E0038]\n     const fn n() -> usize { Self::N }\n }"}, {"sha": "dff268a55c909dd6e3e945e454459005a48661d4", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n-LL | impl Trait {\n-   |      ^^^^^ the trait `Trait` cannot be made into an object\n+LL | impl dyn Trait {\n+   |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n    = note: the trait cannot contain associated consts like `N`\n "}, {"sha": "7a678445796e65c4750c89bbc2a93fd0474e3681", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -20,7 +20,7 @@ fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n }\n \n-fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n }"}, {"sha": "6118ebef125a503652fa299b5a70449d5c78755c", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -11,25 +11,25 @@ LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n \n error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:33\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n-   |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n+   |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n \n error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:26\n    |\n LL |     type Color;\n    |     ----------- `Color` defined here\n ...\n-LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n-   |                          ^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:28:29"}, {"sha": "9366148b587d2dded4f117511c73acfd90848077", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -28,7 +28,7 @@ fn foo2<I: Foo>(x: I) {\n }\n \n \n-pub fn baz(x: &Foo<A=Bar>) {\n+pub fn baz(x: &dyn Foo<A=Bar>) {\n     let _: Bar = x.boo();\n }\n "}, {"sha": "4993b13121549323ba4bf354338a73cf56fc1cc3", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -18,14 +18,14 @@ impl Foo for isize {\n }\n \n pub fn main() {\n-    let a = &42isize as &Foo<A=usize, B=char>;\n+    let a = &42isize as &dyn Foo<A=usize, B=char>;\n \n-    let b = &42isize as &Foo<A=usize>;\n+    let b = &42isize as &dyn Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n-    let c = &42isize as &Foo<B=char>;\n+    let c = &42isize as &dyn Foo<B=char>;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n-    let d = &42isize as &Foo;\n+    let d = &42isize as &dyn Foo;\n     //~^ ERROR the value of the associated types `A` (from the trait `Foo`), `B` (from the trait\n }"}, {"sha": "b4c08f4a4cce5c020ee145e441bb58873cd8ec48", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,17 +4,17 @@ error[E0191]: the value of the associated type `B` (from the trait `Foo`) must b\n LL |     type B;\n    |     ------- `B` defined here\n ...\n-LL |     let b = &42isize as &Foo<A=usize>;\n-   |                          ^^^^^^^^^^^^ associated type `B` must be specified\n+LL |     let b = &42isize as &dyn Foo<A=usize>;\n+   |                          ^^^^^^^^^^^^^^^^ associated type `B` must be specified\n \n error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:26:26\n    |\n LL |     type A;\n    |     ------- `A` defined here\n ...\n-LL |     let c = &42isize as &Foo<B=char>;\n-   |                          ^^^^^^^^^^^ associated type `A` must be specified\n+LL |     let c = &42isize as &dyn Foo<B=char>;\n+   |                          ^^^^^^^^^^^^^^^ associated type `A` must be specified\n \n error[E0191]: the value of the associated types `A` (from the trait `Foo`), `B` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:29:26\n@@ -24,8 +24,8 @@ LL |     type A;\n LL |     type B;\n    |     ------- `B` defined here\n ...\n-LL |     let d = &42isize as &Foo;\n-   |                          ^^^\n+LL |     let d = &42isize as &dyn Foo;\n+   |                          ^^^^^^^\n    |                          |\n    |                          associated type `A` must be specified\n    |                          associated type `B` must be specified"}, {"sha": "109feb8e969a5f55de76f6b8cc85670124cf6cf8", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,6 +3,6 @@\n trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n-    let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n+    let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n     //~^ ERROR type mismatch\n }"}, {"sha": "aff067c289107a60db7cb4150658ebe39e1c8258", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::Iterator>::Item == i32`\n-  --> $DIR/associated-types-overridden-binding-2.rs:6:39\n+  --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n-LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n+LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n    |\n    = note: expected type `u32`\n               found type `i32`"}, {"sha": "fa1889389fd5c5ecdb5fdc5c71939a847e8585b3", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,5 +7,5 @@ trait I32Iterator = Iterator<Item = i32>;\n trait U32Iterator = I32Iterator<Item = u32>;\n \n fn main() {\n-    let _: &I32Iterator<Item = u32>;\n+    let _: &dyn I32Iterator<Item = u32>;\n }"}, {"sha": "36fa06cce4dd692bf43cb90e65d53b707eb1bba5", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.object.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,14 +1,14 @@\n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-constrained.rs:28:56\n+  --> $DIR/bound-lifetime-constrained.rs:28:60\n    |\n-LL | fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n-   |                                                        ^^^^^^^\n+LL | fn object1(_: Box<dyn for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+   |                                                            ^^^^^^^\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-constrained.rs:33:35\n+  --> $DIR/bound-lifetime-constrained.rs:33:39\n    |\n-LL | fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^\n+LL | fn object2(_: Box<dyn for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb82b3fa666606230e011d3dd3c39e0f61711be4", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -25,12 +25,12 @@ fn func2(_: for<'a> fn() -> <() as Foo<'a>>::Item) {\n }\n \n #[cfg(object)]\n-fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+fn object1(_: Box<dyn for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n     //[object]~^ ERROR E0582\n }\n \n #[cfg(object)]\n-fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+fn object2(_: Box<dyn for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n     //[object]~^ ERROR E0582\n }\n "}, {"sha": "54f4bb9076b284422163eba7bb5c25edc67104f6", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.angle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,10 +17,10 @@ LL | fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n    |                                     ^^^^^^^^^^^^\n \n error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-in-binding-only.rs:27:27\n+  --> $DIR/bound-lifetime-in-binding-only.rs:27:31\n    |\n-LL | fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n-   |                           ^^^^^^^^^^^^\n+LL | fn angle3(_: &dyn for<'a> Foo<Item=&'a i32>) {\n+   |                               ^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "74bc84c222aa7554d9271c54d8f32965d943b8b1", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.paren.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,10 +17,10 @@ LL | fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n    |                                         ^^^^^^^\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-in-binding-only.rs:47:31\n+  --> $DIR/bound-lifetime-in-binding-only.rs:47:35\n    |\n-LL | fn paren3(_: &for<'a> Fn() -> &'a i32) {\n-   |                               ^^^^^^^\n+LL | fn paren3(_: &dyn for<'a> Fn() -> &'a i32) {\n+   |                                   ^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "843f5f0619588c6404901e9689e7d15c9056f920", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -24,7 +24,7 @@ fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n }\n \n #[cfg(angle)]\n-fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n+fn angle3(_: &dyn for<'a> Foo<Item=&'a i32>) {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n }\n \n@@ -44,7 +44,7 @@ fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n }\n \n #[cfg(paren)]\n-fn paren3(_: &for<'a> Fn() -> &'a i32) {\n+fn paren3(_: &dyn for<'a> Fn() -> &'a i32) {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n }\n "}, {"sha": "9c0dc61494d1f9cf1046da46568d19ec301b9f43", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -38,11 +38,11 @@ fn elision(_: fn() -> &i32) {\n struct Parameterized<'a> { x: &'a str }\n \n #[cfg(ok)]\n-fn ok1(_: &for<'a> Fn(&Parameterized<'a>) -> &'a i32) {\n+fn ok1(_: &dyn for<'a> Fn(&Parameterized<'a>) -> &'a i32) {\n }\n \n #[cfg(ok)]\n-fn ok2(_: &for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n+fn ok2(_: &dyn for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n }\n \n #[rustc_error]"}, {"sha": "e94a5f0853d72c7d4cbcede4469c2af31ed0d02c", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,7 +19,7 @@ struct MyStream<C: ?Sized + MyClosure> {\n async fn get_future<C: ?Sized + MyClosure>(_stream: MyStream<C>) {}\n \n async fn f() {\n-    let messages: MyStream<FnMut()> = unimplemented!();\n+    let messages: MyStream<dyn FnMut()> = unimplemented!();\n     await!(get_future(messages));\n }\n "}, {"sha": "2157cf7d4f7abe9aafce3e252adf2d7876df77ae", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -35,7 +35,7 @@ impl<R, F> Future for Lazy<F>\n }\n \n async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n-    where Fut: Future<Output = ()>, WantFn: Fn(&Box<Send + 'static>) -> Fut,\n+    where Fut: Future<Output = ()>, WantFn: Fn(&Box<dyn Send + 'static>) -> Fut,\n {\n     await!(lazy(|_| ()));\n }"}, {"sha": "ad18f411875690413a23a64f3510ad54afb7215d", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,7 +9,7 @@ trait SomeTrait: Send + Sync + 'static {\n     fn do_something(&self);\n }\n \n-async fn my_task(obj: Arc<SomeTrait>) {\n+async fn my_task(obj: Arc<dyn SomeTrait>) {\n     unimplemented!()\n }\n "}, {"sha": "b899c59ff2ea702b31c5f758c7bd7633789c4dd1", "filename": "src/test/ui/bad/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n trait Trait {}\n \n pub fn main() {\n-    let x: Vec<Trait + Sized> = Vec::new();\n+    let x: Vec<dyn Trait + Sized> = Vec::new();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the size for values of type\n     //~| ERROR the size for values of type"}, {"sha": "e9ded557281a445c69632749b607d8b04ec05a89", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,29 +1,29 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/bad-sized.rs:4:24\n+  --> $DIR/bad-sized.rs:4:28\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                -----   ^^^^^\n-   |                |       |\n-   |                |       additional non-auto trait\n-   |                |       trait alias used in trait object type (additional use)\n-   |                first non-auto trait\n-   |                trait alias used in trait object type (first use)\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                    -----   ^^^^^\n+   |                    |       |\n+   |                    |       additional non-auto trait\n+   |                    |       trait alias used in trait object type (additional use)\n+   |                    first non-auto trait\n+   |                    trait alias used in trait object type (first use)\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:12\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |            ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n-  --> $DIR/bad-sized.rs:4:33\n+  --> $DIR/bad-sized.rs:4:37\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                                 ^^^^^^^^ doesn't have a size known at compile-time\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "b4d85b60cd5afbb0e3f063d3c40f8e1959ce179f", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ trait Foo {\n     fn f2(&mut self);\n }\n \n-fn test(x: &mut Foo) {\n+fn test(x: &mut dyn Foo) {\n     let y = x.f1();\n     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n     y.use_ref();"}, {"sha": "6b32d185b6fdf5c3dbdeafb01f67efeaf93f76e5", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,10 +2,10 @@\n \n trait Foo { fn dummy(&self); }\n \n-fn consume(_: Box<Foo>) {\n+fn consume(_: Box<dyn Foo>) {\n }\n \n-fn foo(b: Box<Foo+Send>) {\n+fn foo(b: Box<dyn Foo + Send>) {\n     consume(b);\n     consume(b); //~ ERROR use of moved value\n }"}, {"sha": "356cda01e29c8eb3e3f5b55598e005f40528756f", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-upcast-box.rs:10:13\n    |\n-LL | fn foo(b: Box<Foo+Send>) {\n+LL | fn foo(b: Box<dyn Foo + Send>) {\n    |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here"}, {"sha": "b50d455637b9a5438e1ea269a86ba4d8e1145cd0", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@\n //    closure may outlive the current function, but it borrows `books`,\n //    which is owned by the current function\n \n-fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n+fn foo<'a>(x: &'a i32) -> Box<dyn FnMut() + 'a> {\n     let mut books = vec![1,2,3];\n     Box::new(|| books.push(4))\n     //~^ ERROR E0373"}, {"sha": "c468740bc3bf573252005940caaf7fcae533b462", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n // check that borrowck looks inside consts/statics\n \n-static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n+static FN : &'static (dyn Fn() -> (Box<dyn Fn()->Box<i32>>) + Sync) = &|| {\n     let x = Box::new(0);\n     Box::new(|| x) //~ ERROR cannot move out of captured variable in an `Fn` closure\n };"}, {"sha": "137a9adbc40ac36b23b2ee9f3a50146c747ca7e2", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,26 +8,26 @@ trait Foo {\n     fn mut_borrowed(&mut self) -> &();\n }\n \n-fn borrowed_receiver(x: &Foo) {\n+fn borrowed_receiver(x: &dyn Foo) {\n     let y = x.borrowed();\n     let z = x.borrowed();\n     z.use_ref();\n     y.use_ref();\n }\n \n-fn mut_borrowed_receiver(x: &mut Foo) {\n+fn mut_borrowed_receiver(x: &mut dyn Foo) {\n     let y = x.borrowed();\n     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n     y.use_ref();\n }\n \n-fn mut_owned_receiver(mut x: Box<Foo>) {\n+fn mut_owned_receiver(mut x: Box<dyn Foo>) {\n     let y = x.borrowed();\n     let z = &mut x; //~ ERROR cannot borrow\n     y.use_ref();\n }\n \n-fn imm_owned_receiver(mut x: Box<Foo>) {\n+fn imm_owned_receiver(mut x: Box<dyn Foo>) {\n     let y = x.borrowed();\n     let z = &x;\n     z.use_ref();"}, {"sha": "3ce72161814949f9896dccd488bb0964085bc688", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,5 +6,5 @@ impl Foo for i32 { }\n \n fn main() {\n     let x: &i32;\n-    let y = x as *const Foo; //~ ERROR [E0381]\n+    let y = x as *const dyn Foo; //~ ERROR [E0381]\n }"}, {"sha": "2b80140c6b376e714b33fd353405d2b15a76432f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n-LL |     let y = x as *const Foo;\n+LL |     let y = x as *const dyn Foo;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "d8bef927fd722f4a853cdcb73c182cdaabeb5159", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn with_int(f: &mut FnMut(&isize)) {\n+fn with_int(f: &mut dyn FnMut(&isize)) {\n }\n \n fn main() {"}, {"sha": "baf122df5e268e27515371644a682e728c23b11f", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -29,7 +29,7 @@ LL |         f(f(10));\n error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:80:11\n    |\n-LL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move"}, {"sha": "b29664e3d8cbd67a30a2c47fa54e2765635213a3", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -68,15 +68,15 @@ fn overloaded_call_traits() {\n         //[g2p]~^^  ERROR use of moved value: `f`\n     }\n \n-    fn twice_ten_om(f: &mut FnMut(i32) -> i32) {\n+    fn twice_ten_om(f: &mut dyn FnMut(i32) -> i32) {\n         f(f(10));\n         //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n         //[g2p]~^^  ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n-    fn twice_ten_oi(f: &mut Fn(i32) -> i32) {\n+    fn twice_ten_oi(f: &mut dyn Fn(i32) -> i32) {\n         f(f(10));\n     }\n-    fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+    fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n         f(f(10));\n         //[nll]~^   ERROR use of moved value: `f`\n         //[g2p]~^^  ERROR use of moved value: `f`"}, {"sha": "31aa4011b91143ba750f1d1aa57bd8ee44878350", "filename": "src/test/ui/bounds-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbounds-lifetime.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,6 +2,6 @@ type A = for<'b, 'a: 'b> fn(); //~ ERROR lifetime bounds cannot be used in this\n type B = for<'b, 'a: 'b,> fn(); //~ ERROR lifetime bounds cannot be used in this context\n type C = for<'b, 'a: 'b +> fn(); //~ ERROR lifetime bounds cannot be used in this context\n type D = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n-type E = for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n+type E = dyn for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n \n fn main() {}"}, {"sha": "a0395ed49045f75a3cf54f21d23a783e15af5ea5", "filename": "src/test/ui/bounds-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbounds-lifetime.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -23,10 +23,10 @@ LL | type D = for<'a, T> fn();\n    |                  ^\n \n error: only lifetime parameters can be used in this context\n-  --> $DIR/bounds-lifetime.rs:5:14\n+  --> $DIR/bounds-lifetime.rs:5:18\n    |\n-LL | type E = for<T> Fn();\n-   |              ^\n+LL | type E = dyn for<T> Fn();\n+   |                  ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5342b595c7c5e9f1d2c7891e8fb59a4b7d968e06", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    &1 as Send; //~ ERROR cast to unsized\n-    Box::new(1) as Send; //~ ERROR cast to unsized\n+    &1 as dyn Send; //~ ERROR cast to unsized\n+    Box::new(1) as dyn Send; //~ ERROR cast to unsized\n }"}, {"sha": "ffa02533d8b66db7869c917abf13b15225b8c4e8", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,18 +1,18 @@\n error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:2:5\n    |\n-LL |     &1 as Send;\n-   |     ^^^^^^----\n+LL |     &1 as dyn Send;\n+   |     ^^^^^^--------\n    |           |\n-   |           help: try casting to a reference instead: `&Send`\n+   |           help: try casting to a reference instead: `&dyn Send`\n \n error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:3:5\n    |\n-LL |     Box::new(1) as Send;\n-   |     ^^^^^^^^^^^^^^^----\n+LL |     Box::new(1) as dyn Send;\n+   |     ^^^^^^^^^^^^^^^--------\n    |                    |\n-   |                    help: try casting to a `Box` instead: `Box<Send>`\n+   |                    help: try casting to a `Box` instead: `Box<dyn Send>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4a0f9613055ee5abf87eccec3fffe4df7a0dff1", "filename": "src/test/ui/casts-differing-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ fn foo() -> Box<impl fmt::Debug+?Sized> {\n     x\n }\n fn bar() -> Box<impl fmt::Debug+?Sized> {\n-    let y: Box<fmt::Debug> = Box::new([0]);\n+    let y: Box<dyn fmt::Debug> = Box::new([0]);\n     y\n }\n "}, {"sha": "bb4c3fac93806e8303d9301609558cb083dfd653", "filename": "src/test/ui/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -49,6 +49,6 @@ fn cat(in_x : usize, in_y : isize, in_name: String) -> Cat {\n }\n \n fn main() {\n-  let nyan: Box<Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<Noisy>;\n+  let nyan: Box<dyn Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn Noisy>;\n   nyan.eat(); //~ ERROR no method named `eat` found\n }"}, {"sha": "0a015ea1436c5d69df9138d0a3aec50f2080e72c", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn foo() -> Box<Fn()> {\n+fn foo() -> Box<dyn Fn()> {\n     let num = 5;\n \n     let closure = || { //~ ERROR expected a closure that"}, {"sha": "511690e9dd4b380048bb989bab49855c15db5bee", "filename": "src/test/ui/closure_context/issue-26046-fn-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn get_closure() -> Box<Fn() -> Vec<u8>> {\n+fn get_closure() -> Box<dyn Fn() -> Vec<u8>> {\n     let vec = vec![1u8, 2u8];\n \n     let closure = move || { //~ ERROR expected a closure"}, {"sha": "102f1f94a36e1da366b0bbf49c88f7d2208be6be", "filename": "src/test/ui/closures/closure-immutable-outer-variable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@\n \n // Point at the captured immutable outer variable\n \n-fn foo(mut f: Box<FnMut()>) {\n+fn foo(mut f: Box<dyn FnMut()>) {\n     f();\n }\n "}, {"sha": "6eb43b372c96cc3bc23d5a8288c7e7cf2a49e63e", "filename": "src/test/ui/closures/closure-immutable-outer-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@\n \n // Point at the captured immutable outer variable\n \n-fn foo(mut f: Box<FnMut()>) {\n+fn foo(mut f: Box<dyn FnMut()>) {\n     f();\n }\n "}, {"sha": "414acfd84ce4e2e6369af9478c52ad6a2686bc9b", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n \n trait C {}\n-impl C { fn f() {} } //~ ERROR duplicate\n-impl C { fn f() {} }\n+impl dyn C { fn f() {} } //~ ERROR duplicate\n+impl dyn C { fn f() {} }\n fn main() { }"}, {"sha": "a97161b131d496038d003443f6963555b1438549", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,10 +1,10 @@\n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:10\n+  --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:14\n    |\n-LL | impl C { fn f() {} }\n-   |          ^^^^^^^^^ duplicate definitions for `f`\n-LL | impl C { fn f() {} }\n-   |          --------- other definition for `f`\n+LL | impl dyn C { fn f() {} }\n+   |              ^^^^^^^^^ duplicate definitions for `f`\n+LL | impl dyn C { fn f() {} }\n+   |              --------- other definition for `f`\n \n error: aborting due to previous error\n "}, {"sha": "b4d2f5d3c6d0949c812bf70590d5943334c7d242", "filename": "src/test/ui/codemap_tests/two_files_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,4 +2,4 @@\n \n trait Foo { }\n \n-type Bar = Foo;\n+type Bar = dyn Foo;"}, {"sha": "c139e823c2aef64e07f1b01528e7aa99e21e51c1", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -10,23 +10,23 @@ pub fn main() {\n     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>; //~ ERROR mismatched types\n     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n     //~^ ERROR mismatched types\n-    let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>; //~ ERROR mismatched types\n-    let _ = box if true { false } else { true }: Box<Debug>; //~ ERROR mismatched types\n-    let _ = box match true { true => 'a', false => 'b' }: Box<Debug>; //~ ERROR mismatched types\n+    let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = box if true { false } else { true }: Box<dyn Debug>; //~ ERROR mismatched types\n+    let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>; //~ ERROR mismatched types\n \n     let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32]; //~ ERROR mismatched types\n     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n     //~^ ERROR mismatched types\n-    let _ = &{ |x| (x as u8) }: &Fn(i32) -> _; //~ ERROR mismatched types\n-    let _ = &if true { false } else { true }: &Debug; //~ ERROR mismatched types\n-    let _ = &match true { true => 'a', false => 'b' }: &Debug; //~ ERROR mismatched types\n+    let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _; //~ ERROR mismatched types\n+    let _ = &if true { false } else { true }: &dyn Debug; //~ ERROR mismatched types\n+    let _ = &match true { true => 'a', false => 'b' }: &dyn Debug; //~ ERROR mismatched types\n \n     let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n-    let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n \n     let _ = vec![\n         Box::new(|x| (x as u8)),\n         box |x| (x as i16 as u8),\n-    ]: Vec<Box<Fn(i32) -> _>>;\n+    ]: Vec<Box<dyn Fn(i32) -> _>>;\n }"}, {"sha": "3b81610a06e097d9e8dcd5af2f9a6c20c0fd72f2", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -28,7 +28,7 @@ LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n-LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n+LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n@@ -37,7 +37,7 @@ LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n-LL |     let _ = box if true { false } else { true }: Box<Debug>;\n+LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -46,7 +46,7 @@ LL |     let _ = box if true { false } else { true }: Box<Debug>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n-LL |     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>;\n+LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -82,7 +82,7 @@ LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n-LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n+LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n    |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `&dyn std::ops::Fn(i32) -> u8`\n@@ -91,7 +91,7 @@ LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n-LL |     let _ = &if true { false } else { true }: &Debug;\n+LL |     let _ = &if true { false } else { true }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -100,7 +100,7 @@ LL |     let _ = &if true { false } else { true }: &Debug;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n-LL |     let _ = &match true { true => 'a', false => 'b' }: &Debug;\n+LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -118,7 +118,7 @@ LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n-LL |     let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>;\n+LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`"}, {"sha": "c38d7456a995219eed1a3848c044b1eaa133784a", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { }\n+LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type"}, {"sha": "c38d7456a995219eed1a3848c044b1eaa133784a", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { }\n+LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type"}, {"sha": "b4c88e937830e738c60f5817518de76fc1fb1506", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@\n // If the trait is not object-safe, we give a more tailored message\n // because we're such schnuckels:\n trait NotObjectSafe { fn eq(&self, other: Self); }\n-impl NotObjectSafe for NotObjectSafe { }\n+impl NotObjectSafe for dyn NotObjectSafe { }\n //[old]~^ ERROR E0038\n //[re]~^^ ERROR E0038\n "}, {"sha": "4819ce9260e708cc2dd7150d80bab95474ffab04", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.old.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,20 +1,20 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n   --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+LL | impl Foo for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n   --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+LL | impl Bar for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n   --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+LL | impl Baz for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4819ce9260e708cc2dd7150d80bab95474ffab04", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.re.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,20 +1,20 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n   --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+LL | impl Foo for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n   --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+LL | impl Bar for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n   --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+LL | impl Baz for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3ce3dca0660b94ec8735fb069d73e0313c54ffb3", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -10,18 +10,18 @@ trait Bar: Foo { }\n trait Baz: Bar { }\n \n // Supertraits of Baz are not legal:\n-impl Foo for Baz { }\n+impl Foo for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n-impl Bar for Baz { }\n+impl Bar for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n-impl Baz for Baz { }\n+impl Baz for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n \n // But other random traits are:\n trait Other { }\n-impl Other for Baz { } // OK, Other not a supertrait of Baz\n+impl Other for dyn Baz { } // OK, Other not a supertrait of Baz\n \n fn main() { }"}, {"sha": "8aef091fe31860c1d8ceb9b5a7b6fd9b305ba8a7", "filename": "src/test/ui/confuse-field-and-method/issue-2392.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -14,7 +14,7 @@ struct Obj<F> where F: FnOnce() -> u32 {\n }\n \n struct BoxedObj {\n-    boxed_closure: Box<FnOnce() -> u32>,\n+    boxed_closure: Box<dyn FnOnce() -> u32>,\n }\n \n struct Wrapper<F> where F: FnMut() -> u32 {\n@@ -25,8 +25,8 @@ fn func() -> u32 {\n     0\n }\n \n-fn check_expression() -> Obj<Box<FnOnce() -> u32>> {\n-    Obj { closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32>, not_closure: 42 }\n+fn check_expression() -> Obj<Box<dyn FnOnce() -> u32>> {\n+    Obj { closure: Box::new(|| 42_u32) as Box<dyn FnOnce() -> u32>, not_closure: 42 }\n }\n \n fn main() {\n@@ -44,7 +44,7 @@ fn main() {\n     let boxed_fn = BoxedObj { boxed_closure: Box::new(func) };\n     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n-    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32> };\n+    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<dyn FnOnce() -> u32> };\n     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n     // test expression writing in the notes"}, {"sha": "5a024aa4b67492d7fde0c0eaf930a8e0f4424b48", "filename": "src/test/ui/confuse-field-and-method/issue-32128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,5 +1,5 @@\n struct Example {\n-    example: Box<Fn(i32) -> i32>\n+    example: Box<dyn Fn(i32) -> i32>\n }\n \n fn main() {"}, {"sha": "4726f9dde3a845498827cb72ab178c02d4794991", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -41,7 +41,7 @@ struct VTable {\n     bar: for<'a> fn(&'a Foo) -> u32,\n }\n \n-const FOO: &Bar = &Foo { foo: 128, bar: false };\n+const FOO: &dyn Bar = &Foo { foo: 128, bar: false };\n const G: Fat = unsafe { Transmute { t: FOO }.u };\n const F: Option<for<'a> fn(&'a mut Foo)> = G.1.drop;\n const H: for<'a> fn(&'a Foo) -> u32 = G.1.bar;"}, {"sha": "e8ac5a90880cebc08e46d62822701b6a21be1ef1", "filename": "src/test/ui/consts/const-eval/issue-53401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n // compile-pass\n \n-pub const STATIC_TRAIT: &Test = &();\n+pub const STATIC_TRAIT: &dyn Test = &();\n \n fn main() {}\n "}, {"sha": "0a427cd8857e840c3edbc52b2b81e7adda4b49df", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@\n \n use std::mem;\n \n-const BAD_UPVAR: &FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n+const BAD_UPVAR: &dyn FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n     let another_var = 13;\n     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "f8273ba902a88ee5a92b2c06d41ef4bcf2e62b23", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-upvars.rs:6:1\n    |\n-LL | / const BAD_UPVAR: &FnOnce() = &{\n+LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n LL | |     let another_var = 13;\n LL | |     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "d5405f3441fec2915b06e5f2df06c9af07e9d425", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -59,7 +59,7 @@ union DynTransmute {\n     repr: DynRepr,\n     repr2: DynRepr2,\n     bad: BadDynRepr,\n-    rust: &'static Trait,\n+    rust: &'static dyn Trait,\n }\n \n trait Trait {}\n@@ -94,17 +94,17 @@ const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &\n //~^ ERROR it is undefined behavior to use this value\n \n // bad trait object\n-const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the trait object\n-const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the slice"}, {"sha": "5048a97d19514ee28098ec9d6da729edbba75fbf", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -41,32 +41,32 @@ LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, l\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:97:1\n    |\n-LL | const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:100:1\n    |\n-LL | const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:103:1\n    |\n-LL | const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n+LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:107:1\n    |\n-LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n+LL | const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "319b8ef97deaeeb71b17d5b9b5c5045b02e06613", "filename": "src/test/ui/consts/const-unsized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,12 +1,12 @@\n use std::fmt::Debug;\n \n-const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n+const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n //~^ ERROR the size for values of type\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR the size for values of type\n \n-static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n //~^ ERROR the size for values of type\n \n static STATIC_BAR: str = *\"bar\";"}, {"sha": "beeea87bfb1d33f0d4c556056f044cf3dc716565", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:3:16\n    |\n-LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-   |                ^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n+   |                ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -19,8 +19,8 @@ LL | const CONST_FOO: str = *\"foo\";\n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n    |\n-LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-   |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n+   |                  ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "7a10c469c51a0c2dbc985eea14af9c65638ee19d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -298,8 +298,8 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:144:41\n    |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable"}, {"sha": "96b6057c8fd2d571f3e7e144961a9c503774e866", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -141,7 +141,7 @@ const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n \n const fn no_unsafe() { unsafe {} }\n \n-const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n //~^ ERROR trait bounds other than `Sized`\n \n const fn no_fn_ptrs(_x: fn()) {}"}, {"sha": "e388b443d23445d95f3e40a1de8278649d894c64", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -302,8 +302,8 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:144:41\n    |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable"}, {"sha": "274cdad75ec2adbca8a4aecb816ae68b6c1f2402", "filename": "src/test/ui/cross/cross-borrow-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,8 +6,8 @@ trait Trait { fn foo(&self) {} }\n impl Trait for Foo {}\n \n pub fn main() {\n-    let x: Box<Trait> = Box::new(Foo);\n-    let _y: &Trait = x; //~ ERROR E0308\n-                        //~| expected type `&dyn Trait`\n-                        //~| found type `std::boxed::Box<dyn Trait>`\n+    let x: Box<dyn Trait> = Box::new(Foo);\n+    let _y: &dyn Trait = x; //~ ERROR E0308\n+                            //~| expected type `&dyn Trait`\n+                            //~| found type `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "ada1c0204eb0151814c67f7a08a4fd6d2c089453", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/cross-borrow-trait.rs:10:22\n+  --> $DIR/cross-borrow-trait.rs:10:26\n    |\n-LL |     let _y: &Trait = x;\n-   |                      ^\n-   |                      |\n-   |                      expected &dyn Trait, found struct `std::boxed::Box`\n-   |                      help: consider borrowing here: `&x`\n+LL |     let _y: &dyn Trait = x;\n+   |                          ^\n+   |                          |\n+   |                          expected &dyn Trait, found struct `std::boxed::Box`\n+   |                          help: consider borrowing here: `&x`\n    |\n    = note: expected type `&dyn Trait`\n               found type `std::boxed::Box<dyn Trait>`"}, {"sha": "aee0040ef4de413f98c51077c904940351cc02b4", "filename": "src/test/ui/custom-test-frameworks-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@\n #![test_runner(crate::foo_runner)]\n \n #[cfg(test)]\n-fn foo_runner(ts: &[&Fn(usize)->()]) {\n+fn foo_runner(ts: &[&dyn Fn(usize)->()]) {\n     for (i, t) in ts.iter().enumerate() {\n         t(i);\n     }"}, {"sha": "6175b7df1107ad78029a5ffc4f4231a2d105a05b", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n // Test a cycle where a type parameter on a trait has a default that\n // again references the trait.\n \n-trait Foo<X = Box<Foo>> {\n+trait Foo<X = Box<dyn Foo>> {\n     //~^ ERROR cycle detected\n }\n "}, {"sha": "e89d25742a0acfd589c0dd0a8e8e09d3521809e1", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,15 +1,15 @@\n error[E0391]: cycle detected when processing `Foo::X`\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:19\n+  --> $DIR/cycle-trait-default-type-trait.rs:4:23\n    |\n-LL | trait Foo<X = Box<Foo>> {\n-   |                   ^^^\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   |                       ^^^\n    |\n    = note: ...which again requires processing `Foo::X`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n-LL | trait Foo<X = Box<Foo>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71cf37ca84951a22ddff2f5aace00d3e2283dad9", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -18,27 +18,28 @@ fn main() {\n     // if n > m, it's a type mismatch error.\n \n     // n < m\n-    let &x = &(&1isize as &T);\n-    let &x = &&(&1isize as &T);\n-    let &&x = &&(&1isize as &T);\n+    let &x = &(&1isize as &dyn T);\n+    let &x = &&(&1isize as &dyn T);\n+    let &&x = &&(&1isize as &dyn T);\n \n     // n == m\n-    let &x = &1isize as &T;      //~ ERROR type `&dyn T` cannot be dereferenced\n-    let &&x = &(&1isize as &T);  //~ ERROR type `&dyn T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n+    let &x = &1isize as &dyn T;      //~ ERROR type `&dyn T` cannot be dereferenced\n+    let &&x = &(&1isize as &dyn T);  //~ ERROR type `&dyn T` cannot be dereferenced\n+    let box x = box 1isize as Box<dyn T>;\n+    //~^ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1isize as &T;\n+    let &&x = &1isize as &dyn T;\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n-    let &&&x = &(&1isize as &T);\n+    let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n-    let box box x = box 1isize as Box<T>;\n+    let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `std::boxed::Box<_>`"}, {"sha": "d3ad21eb24ffb39e5c6251e3dbfd2cabe689ea66", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,25 +1,25 @@\n error[E0033]: type `&dyn T` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:26:9\n    |\n-LL |     let &x = &1isize as &T;\n+LL |     let &x = &1isize as &dyn T;\n    |         ^^ type `&dyn T` cannot be dereferenced\n \n error[E0033]: type `&dyn T` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:27:10\n    |\n-LL |     let &&x = &(&1isize as &T);\n+LL |     let &&x = &(&1isize as &dyn T);\n    |          ^^ type `&dyn T` cannot be dereferenced\n \n error[E0033]: type `std::boxed::Box<dyn T>` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:28:9\n    |\n-LL |     let box x = box 1isize as Box<T>;\n+LL |     let box x = box 1isize as Box<dyn T>;\n    |         ^^^^^ type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:31:10\n+  --> $DIR/destructure-trait-ref.rs:32:10\n    |\n-LL |     let &&x = &1isize as &T;\n+LL |     let &&x = &1isize as &dyn T;\n    |          ^^\n    |          |\n    |          expected trait T, found reference\n@@ -29,9 +29,9 @@ LL |     let &&x = &1isize as &T;\n               found type `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:36:11\n+  --> $DIR/destructure-trait-ref.rs:37:11\n    |\n-LL |     let &&&x = &(&1isize as &T);\n+LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^\n    |           |\n    |           expected trait T, found reference\n@@ -41,9 +41,9 @@ LL |     let &&&x = &(&1isize as &T);\n               found type `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:41:13\n+  --> $DIR/destructure-trait-ref.rs:42:13\n    |\n-LL |     let box box x = box 1isize as Box<T>;\n+LL |     let box box x = box 1isize as Box<dyn T>;\n    |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n    |\n    = note: expected type `dyn T`"}, {"sha": "095df640c38f296e3e809e0d7d431a9353385a0f", "filename": "src/test/ui/did_you_mean/E0178.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,3 +1,5 @@\n+#![allow(bare_trait_objects)]\n+\n trait Foo {}\n \n struct Bar<'a> {"}, {"sha": "58ac6e90823f6d24ed2a8a0c12a8535cda161237", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n-  --> $DIR/E0178.rs:4:8\n+  --> $DIR/E0178.rs:6:8\n    |\n LL |     w: &'a Foo + Copy,\n    |        ^^^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + Copy)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n-  --> $DIR/E0178.rs:5:8\n+  --> $DIR/E0178.rs:7:8\n    |\n LL |     x: &'a Foo + 'a,\n    |        ^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a mut Foo`\n-  --> $DIR/E0178.rs:6:8\n+  --> $DIR/E0178.rs:8:8\n    |\n LL |     y: &'a mut Foo + 'a,\n    |        ^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'a mut (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n-  --> $DIR/E0178.rs:7:8\n+  --> $DIR/E0178.rs:9:8\n    |\n LL |     z: fn() -> Foo + 'a,\n    |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?"}, {"sha": "fccfb7911cecf5636db62ca774f0ba902ef7d3fc", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -24,7 +24,7 @@ type F = &'static (u8)::AssocTy;\n \n // Qualified paths cannot appear in bounds, so the recovery\n // should apply to the whole sum and not `(Send)`.\n-type G = 'static + (Send)::AssocTy;\n+type G = dyn 'static + (Send)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR ambiguous associated type\n "}, {"sha": "0ae64edcc0546584e6541c4098bf50b547f5daf9", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -37,8 +37,8 @@ LL | type F = &'static (u8)::AssocTy;\n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-LL | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + (Send)>::AssocTy`\n+LL | type G = dyn 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<dyn 'static + (Send)>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:44:10\n@@ -94,8 +94,8 @@ LL | type F = &'static (u8)::AssocTy;\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-LL | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n+LL | type G = dyn 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:33:10"}, {"sha": "a1184f757e2abe82d0bd514c80d8c5335b155d6e", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-impl X { //~ ERROR cannot be made into an object\n+impl dyn X { //~ ERROR cannot be made into an object\n //~^ ERROR missing\n     Y\n }"}, {"sha": "87e48cd1e1cd9dddf3a8ff1db19157749ec30b44", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n-  --> $DIR/issue-40006.rs:1:9\n+  --> $DIR/issue-40006.rs:1:13\n    |\n-LL |   impl X {\n-   |  _________^\n+LL |   impl dyn X {\n+   |  _____________^\n LL | |\n LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n@@ -59,8 +59,8 @@ LL |     pub hello_method(&self) {\n error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/issue-40006.rs:1:6\n    |\n-LL | impl X {\n-   |      ^ the trait `X` cannot be made into an object\n+LL | impl dyn X {\n+   |      ^^^^^ the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver\n "}, {"sha": "c9a097d3610a12eb0f001c7fec3d0363c3bb7336", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,3 +1,5 @@\n+#![allow(bare_trait_objects)]\n+\n fn main() {\n     let _: &Copy + 'static; //~ ERROR expected a path\n     //~^ ERROR cannot be made into an object"}, {"sha": "8c6c33b11865b38ab114f727ba5e18dc971e3478", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,17 +1,17 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&Copy`\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:2:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n    |            ^^^^^^^^^^^^^^^ help: try adding parentheses: `&(Copy + 'static)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'static Copy`\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:6:12\n    |\n LL |     let _: &'static Copy + 'static;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'static (Copy + 'static)`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:2:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object"}, {"sha": "bea77dc9f5c4fdabaea3d8bd818502345a4d5e48", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -63,14 +63,14 @@ impl<T:HasId> Drop for CheckId<T> {\n }\n \n trait Obj<'a> : HasId {\n-    fn set0(&self, b: &'a Box<Obj<'a>>);\n-    fn set1(&self, b: &'a Box<Obj<'a>>);\n+    fn set0(&self, b: &'a Box<dyn Obj<'a>>);\n+    fn set1(&self, b: &'a Box<dyn Obj<'a>>);\n }\n \n struct O<'a> {\n     id: Id,\n-    obj0: CheckId<Cell<Option<&'a Box<Obj<'a>>>>>,\n-    obj1: CheckId<Cell<Option<&'a Box<Obj<'a>>>>>,\n+    obj0: CheckId<Cell<Option<&'a Box<dyn Obj<'a>>>>>,\n+    obj1: CheckId<Cell<Option<&'a Box<dyn Obj<'a>>>>>,\n }\n \n impl<'a> HasId for O<'a> {\n@@ -87,7 +87,7 @@ impl<'a> O<'a> {\n     }\n }\n \n-impl<'a> HasId for Cell<Option<&'a Box<Obj<'a>>>> {\n+impl<'a> HasId for Cell<Option<&'a Box<dyn Obj<'a>>>> {\n     fn count(&self) -> usize {\n         match self.get() {\n             None => 1,\n@@ -97,17 +97,17 @@ impl<'a> HasId for Cell<Option<&'a Box<Obj<'a>>>> {\n }\n \n impl<'a> Obj<'a> for O<'a> {\n-    fn set0(&self, b: &'a Box<Obj<'a>>) {\n+    fn set0(&self, b: &'a Box<dyn Obj<'a>>) {\n         self.obj0.v.set(Some(b))\n     }\n-    fn set1(&self, b: &'a Box<Obj<'a>>) {\n+    fn set1(&self, b: &'a Box<dyn Obj<'a>>) {\n         self.obj1.v.set(Some(b))\n     }\n }\n \n \n fn f() {\n-    let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+    let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n     o1.set1(&o3); //~ ERROR `o3` does not live long enough\n     o2.set0(&o2); //~ ERROR `o2` does not live long enough"}, {"sha": "1e779208e58a5cdcc3221a9533500b32d040f86b", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:111:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n@@ -12,8 +12,8 @@ LL | }\n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:112:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n LL |     o1.set0(&o2);\n LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -24,8 +24,8 @@ LL | }\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:113:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o2.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n@@ -36,8 +36,8 @@ LL | }\n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:114:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n ...\n LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -48,8 +48,8 @@ LL | }\n error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:115:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                         -------- cast requires that `o1` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                     -------- cast requires that `o1` is borrowed for `'static`\n ...\n LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n@@ -60,8 +60,8 @@ LL | }\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:116:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough"}, {"sha": "7ba31bf2e517283572626c1b92937f299f923f05", "filename": "src/test/ui/dst/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -30,8 +30,8 @@ impl ToBar for Bar1 {\n \n pub fn main() {\n     // Assignment.\n-    let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n+    let f5: &mut Fat<dyn ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n+    let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n     //~^ ERROR the size for values of type\n "}, {"sha": "691909a2317431938b20ac248aa3bbb1f160994b", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -28,8 +28,8 @@ impl ToBar for Bar1 {\n \n pub fn main() {\n     // Assignment.\n-    let f5: &mut Fat<ToBar> = &mut (5, \"some str\", Bar1 {f :42});\n-    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n+    let f5: &mut Fat<dyn ToBar> = &mut (5, \"some str\", Bar1 {f :42});\n+    let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected type `dyn ToBar`"}, {"sha": "4f2648653f051703d5e560ae46349323059b9353", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -30,8 +30,8 @@ impl ToBar for Bar1 {\n \n pub fn main() {\n     // Assignment.\n-    let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n+    let f5: &mut Fat<dyn ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n+    let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected type `dyn ToBar`"}, {"sha": "7ef237e39e36ed98a8fdb6ec0b844f85e4eb70a0", "filename": "src/test/ui/dst/dst-bad-coerce1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     // With a trait.\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n-    let f3: &Fat<Bar> = f2;\n+    let f3: &Fat<dyn Bar> = f2;\n     //~^ ERROR `Foo: Bar` is not satisfied\n \n     // Tuple with a vec of isize.\n@@ -31,6 +31,6 @@ pub fn main() {\n     // Tuple with a trait.\n     let f1 = (Foo,);\n     let f2: &(Foo,) = &f1;\n-    let f3: &(Bar,) = f2;\n+    let f3: &(dyn Bar,) = f2;\n     //~^ ERROR `Foo: Bar` is not satisfied\n }"}, {"sha": "a48f37b20be975975a4348c406be68c705b2e1fe", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,10 +8,10 @@ LL |     let f3: &Fat<[usize]> = f2;\n               found type `&Fat<[isize; 3]>`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n-  --> $DIR/dst-bad-coerce1.rs:22:25\n+  --> $DIR/dst-bad-coerce1.rs:22:29\n    |\n-LL |     let f3: &Fat<Bar> = f2;\n-   |                         ^^ the trait `Bar` is not implemented for `Foo`\n+LL |     let f3: &Fat<dyn Bar> = f2;\n+   |                             ^^ the trait `Bar` is not implemented for `Foo`\n    |\n    = note: required for the cast to the object type `dyn Bar`\n \n@@ -25,10 +25,10 @@ LL |     let f3: &([usize],) = f2;\n               found type `&([isize; 3],)`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n-  --> $DIR/dst-bad-coerce1.rs:34:23\n+  --> $DIR/dst-bad-coerce1.rs:34:27\n    |\n-LL |     let f3: &(Bar,) = f2;\n-   |                       ^^ the trait `Bar` is not implemented for `Foo`\n+LL |     let f3: &(dyn Bar,) = f2;\n+   |                           ^^ the trait `Bar` is not implemented for `Foo`\n    |\n    = note: required for the cast to the object type `dyn Bar`\n "}, {"sha": "e7ce20b8958793b7415d0987a49dd58c2f367dd0", "filename": "src/test/ui/dst/dst-bad-coerce2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     // With a trait.\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n-    let f3: &mut Fat<Bar> = f2; //~ ERROR mismatched types\n+    let f3: &mut Fat<dyn Bar> = f2; //~ ERROR mismatched types\n \n     // Tuple with a vec of ints.\n     let f1 = ([1, 2, 3],);\n@@ -27,5 +27,5 @@ pub fn main() {\n     // Tuple with a trait.\n     let f1 = (Foo,);\n     let f2: &(Foo,) = &f1;\n-    let f3: &mut (Bar,) = f2; //~ ERROR mismatched types\n+    let f3: &mut (dyn Bar,) = f2; //~ ERROR mismatched types\n }"}, {"sha": "d1da9b6ca074910e7cc33f82aff034c0d6df9999", "filename": "src/test/ui/dst/dst-bad-coerce2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,10 +8,10 @@ LL |     let f3: &mut Fat<[isize]> = f2;\n               found type `&Fat<[isize; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coerce2.rs:20:29\n+  --> $DIR/dst-bad-coerce2.rs:20:33\n    |\n-LL |     let f3: &mut Fat<Bar> = f2;\n-   |                             ^^ types differ in mutability\n+LL |     let f3: &mut Fat<dyn Bar> = f2;\n+   |                                 ^^ types differ in mutability\n    |\n    = note: expected type `&mut Fat<dyn Bar>`\n               found type `&Fat<Foo>`\n@@ -26,10 +26,10 @@ LL |     let f3: &mut ([isize],) = f2;\n               found type `&([isize; 3],)`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coerce2.rs:30:27\n+  --> $DIR/dst-bad-coerce2.rs:30:31\n    |\n-LL |     let f3: &mut (Bar,) = f2;\n-   |                           ^^ types differ in mutability\n+LL |     let f3: &mut (dyn Bar,) = f2;\n+   |                               ^^ types differ in mutability\n    |\n    = note: expected type `&mut (dyn Bar,)`\n               found type `&(Foo,)`"}, {"sha": "fd5ee3b57bb4201765e0cf00714baa18ea5a776a", "filename": "src/test/ui/dst/dst-bad-coerce3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,7 +19,7 @@ fn baz<'a>() {\n     // With a trait.\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1; //~ ERROR `f1` does not live long enough\n-    let f3: &'a Fat<Bar> = f2;\n+    let f3: &'a Fat<dyn Bar> = f2;\n \n     // Tuple with a vec of ints.\n     let f1 = ([1, 2, 3],);\n@@ -29,7 +29,7 @@ fn baz<'a>() {\n     // Tuple with a trait.\n     let f1 = (Foo,);\n     let f2: &(Foo,) = &f1; //~ ERROR `f1` does not live long enough\n-    let f3: &'a (Bar,) = f2;\n+    let f3: &'a (dyn Bar,) = f2;\n }\n \n pub fn main() {"}, {"sha": "957e98bbeee96c7e6e38569fa3ad5577a735be4e", "filename": "src/test/ui/dst/dst-bad-coerce3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce3.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -20,8 +20,8 @@ LL | fn baz<'a>() {\n ...\n LL |     let f2: &Fat<Foo> = &f1;\n    |                         ^^^ borrowed value does not live long enough\n-LL |     let f3: &'a Fat<Bar> = f2;\n-   |             ------------ type annotation requires that `f1` is borrowed for `'a`\n+LL |     let f3: &'a Fat<dyn Bar> = f2;\n+   |             ---------------- type annotation requires that `f1` is borrowed for `'a`\n ...\n LL | }\n    | - `f1` dropped here while still borrowed\n@@ -48,8 +48,8 @@ LL | fn baz<'a>() {\n ...\n LL |     let f2: &(Foo,) = &f1;\n    |                       ^^^ borrowed value does not live long enough\n-LL |     let f3: &'a (Bar,) = f2;\n-   |             ---------- type annotation requires that `f1` is borrowed for `'a`\n+LL |     let f3: &'a (dyn Bar,) = f2;\n+   |             -------------- type annotation requires that `f1` is borrowed for `'a`\n LL | }\n    | - `f1` dropped here while still borrowed\n "}, {"sha": "bffef378c921cde4041900d93fb577a9e944958e", "filename": "src/test/ui/dst/dst-bad-coercions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -12,15 +12,15 @@ pub fn main() {\n     // Test that we cannot convert from *-ptr to &S and &T\n     let x: *const S = &S;\n     let y: &S = x; //~ ERROR mismatched types\n-    let y: &T = x; //~ ERROR mismatched types\n+    let y: &dyn T = x; //~ ERROR mismatched types\n \n     // Test that we cannot convert from *-ptr to &S and &T (mut version)\n     let x: *mut S = &mut S;\n     let y: &S = x; //~ ERROR mismatched types\n-    let y: &T = x; //~ ERROR mismatched types\n+    let y: &dyn T = x; //~ ERROR mismatched types\n \n     // Test that we cannot convert an immutable ptr to a mutable one using *-ptrs\n-    let x: &mut T = &S; //~ ERROR mismatched types\n-    let x: *mut T = &S; //~ ERROR mismatched types\n+    let x: &mut dyn T = &S; //~ ERROR mismatched types\n+    let x: *mut dyn T = &S; //~ ERROR mismatched types\n     let x: *mut S = &S; //~ ERROR mismatched types\n }"}, {"sha": "e4bc6ee0010a2acc5086dbfe80691326f9a5e037", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,13 +8,13 @@ LL |     let y: &S = x;\n               found type `*const S`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coercions.rs:15:17\n+  --> $DIR/dst-bad-coercions.rs:15:21\n    |\n-LL |     let y: &T = x;\n-   |                 ^\n-   |                 |\n-   |                 expected &dyn T, found *-ptr\n-   |                 help: consider borrowing here: `&x`\n+LL |     let y: &dyn T = x;\n+   |                     ^\n+   |                     |\n+   |                     expected &dyn T, found *-ptr\n+   |                     help: consider borrowing here: `&x`\n    |\n    = note: expected type `&dyn T`\n               found type `*const S`\n@@ -29,31 +29,31 @@ LL |     let y: &S = x;\n               found type `*mut S`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coercions.rs:20:17\n+  --> $DIR/dst-bad-coercions.rs:20:21\n    |\n-LL |     let y: &T = x;\n-   |                 ^\n-   |                 |\n-   |                 expected &dyn T, found *-ptr\n-   |                 help: consider borrowing here: `&x`\n+LL |     let y: &dyn T = x;\n+   |                     ^\n+   |                     |\n+   |                     expected &dyn T, found *-ptr\n+   |                     help: consider borrowing here: `&x`\n    |\n    = note: expected type `&dyn T`\n               found type `*mut S`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coercions.rs:23:21\n+  --> $DIR/dst-bad-coercions.rs:23:25\n    |\n-LL |     let x: &mut T = &S;\n-   |                     ^^ types differ in mutability\n+LL |     let x: &mut dyn T = &S;\n+   |                         ^^ types differ in mutability\n    |\n    = note: expected type `&mut dyn T`\n               found type `&S`\n \n error[E0308]: mismatched types\n-  --> $DIR/dst-bad-coercions.rs:24:21\n+  --> $DIR/dst-bad-coercions.rs:24:25\n    |\n-LL |     let x: *mut T = &S;\n-   |                     ^^ types differ in mutability\n+LL |     let x: *mut dyn T = &S;\n+   |                         ^^ types differ in mutability\n    |\n    = note: expected type `*mut dyn T`\n               found type `&S`"}, {"sha": "fced3144eb85b5c9eb670f4c26cb4b5a8b41781c", "filename": "src/test/ui/dst/dst-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,9 +19,9 @@ impl Index<usize> for S {\n struct T;\n \n impl Index<usize> for T {\n-    type Output = Debug + 'static;\n+    type Output = dyn Debug + 'static;\n \n-    fn index<'a>(&'a self, idx: usize) -> &'a (Debug + 'static) {\n+    fn index<'a>(&'a self, idx: usize) -> &'a (dyn Debug + 'static) {\n         static x: usize = 42;\n         &x\n     }"}, {"sha": "3cd5b1ed6f46232475c7e7c42dc68c876db30f7a", "filename": "src/test/ui/dst/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,22 +5,22 @@ impl Foo for str {}\n impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n-    let u: &Foo = t;\n+    let u: &dyn Foo = t;\n     //~^ ERROR the size for values of type\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n-    let v: &Foo = t as &Foo;\n+    let v: &dyn Foo = t as &dyn Foo;\n     //~^ ERROR the size for values of type\n }\n \n fn test3() {\n-    let _: &[&Foo] = &[\"hi\"];\n+    let _: &[&dyn Foo] = &[\"hi\"];\n     //~^ ERROR the size for values of type\n }\n \n fn test4(x: &[u8]) {\n-    let _: &Foo = x as &Foo;\n+    let _: &dyn Foo = x as &dyn Foo;\n     //~^ ERROR the size for values of type\n }\n "}, {"sha": "55ac625fc985b723c516371ed2aff701db759fc4", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/dst-object-from-unsized-type.rs:8:19\n+  --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n-LL |     let u: &Foo = t;\n-   |                   ^ doesn't have a size known at compile-time\n+LL |     let u: &dyn Foo = t;\n+   |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/dst-object-from-unsized-type.rs:13:19\n+  --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n-LL |     let v: &Foo = t as &Foo;\n-   |                   ^ doesn't have a size known at compile-time\n+LL |     let v: &dyn Foo = t as &dyn Foo;\n+   |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/dst-object-from-unsized-type.rs:18:24\n+  --> $DIR/dst-object-from-unsized-type.rs:18:28\n    |\n-LL |     let _: &[&Foo] = &[\"hi\"];\n-   |                        ^^^^ doesn't have a size known at compile-time\n+LL |     let _: &[&dyn Foo] = &[\"hi\"];\n+   |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/dst-object-from-unsized-type.rs:23:19\n+  --> $DIR/dst-object-from-unsized-type.rs:23:23\n    |\n-LL |     let _: &Foo = x as &Foo;\n-   |                   ^ doesn't have a size known at compile-time\n+LL |     let _: &dyn Foo = x as &dyn Foo;\n+   |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "7d87b0a7756b123013bdc5fa9ad1c63b88d7d0f1", "filename": "src/test/ui/elide-errors-on-mismatched-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -13,6 +13,6 @@ impl A {\n fn main() {\n     let (a, b, c) = (A::new(), A::new()); // This tuple is 2 elements, should be three\n     //~^ ERROR mismatched types\n-    let ts: Vec<&T> = vec![&a, &b, &c];\n+    let ts: Vec<&dyn T> = vec![&a, &b, &c];\n     // There is no E0277 error above, as `a`, `b` and `c` are `TyErr`\n }"}, {"sha": "6a27b07fa8b778737024895f6ffdf44f3dc1d800", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ trait SomeTrait {\n }\n \n fn main() {\n-    let trait_obj: &SomeTrait = SomeTrait;\n+    let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n     //~| method `foo` has no receiver"}, {"sha": "fb630de7fc14776cf3f8ad0c68bbf5cd537b7417", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,14 +1,14 @@\n error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033-teach.rs:8:33\n+  --> $DIR/E0033-teach.rs:8:37\n    |\n-LL |     let trait_obj: &SomeTrait = SomeTrait;\n-   |                                 ^^^^^^^^^ not a value\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                                     ^^^^^^^^^ not a value\n \n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n-LL |     let trait_obj: &SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n    = note: method `foo` has no receiver\n "}, {"sha": "582600e110ba0a00194eafc64922248639f99b47", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@ trait SomeTrait {\n }\n \n fn main() {\n-    let trait_obj: &SomeTrait = SomeTrait;\n+    let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n     //~| method `foo` has no receiver"}, {"sha": "fe9f45d86a6a030ad7be68ecb1b790279910ca91", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,14 +1,14 @@\n error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033.rs:6:33\n+  --> $DIR/E0033.rs:6:37\n    |\n-LL |     let trait_obj: &SomeTrait = SomeTrait;\n-   |                                 ^^^^^^^^^ not a value\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                                     ^^^^^^^^^ not a value\n \n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n-LL |     let trait_obj: &SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n    = note: method `foo` has no receiver\n "}, {"sha": "9757e2ab10c7a983075557e97c58974de833d448", "filename": "src/test/ui/error-codes/E0038.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@ trait Trait {\n     fn foo(&self) -> Self;\n }\n \n-fn call_foo(x: Box<Trait>) {\n+fn call_foo(x: Box<dyn Trait>) {\n     //~^ ERROR E0038\n     let y = x.foo();\n }"}, {"sha": "e3d7593e42a7105b4e9f670a9c95be081a9d6728", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:1\n    |\n-LL | fn call_foo(x: Box<Trait>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+LL | fn call_foo(x: Box<dyn Trait>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n    = note: method `foo` references the `Self` type in its arguments or return type\n "}, {"sha": "287a4088183f4d516423f113dc3c90ff482eeb8b", "filename": "src/test/ui/error-codes/E0120.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n trait MyTrait { fn foo() {} }\n \n-impl Drop for MyTrait {\n+impl Drop for dyn MyTrait {\n               //~^ ERROR E0120\n     fn drop(&mut self) {}\n }"}, {"sha": "68ca7d800d5ced08a7c12dc29e05708b6ab865c6", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0120]: the Drop trait may only be implemented on structures\n   --> $DIR/E0120.rs:3:15\n    |\n-LL | impl Drop for MyTrait {\n-   |               ^^^^^^^ implementing Drop requires a struct\n+LL | impl Drop for dyn MyTrait {\n+   |               ^^^^^^^^^^^ implementing Drop requires a struct\n \n error: aborting due to previous error\n "}, {"sha": "22f739b9e76c2228218f69e2c0265ca93f4183e3", "filename": "src/test/ui/error-codes/E0191.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,6 +2,6 @@ trait Trait {\n     type Bar;\n }\n \n-type Foo = Trait; //~ ERROR E0191\n+type Foo = dyn Trait; //~ ERROR E0191\n \n fn main() {}"}, {"sha": "92fa85bca0eff5b987adb481178571672c177e08", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,8 +4,8 @@ error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) mu\n LL |     type Bar;\n    |     --------- `Bar` defined here\n ...\n-LL | type Foo = Trait;\n-   |            ^^^^^ associated type `Bar` must be specified\n+LL | type Foo = dyn Trait;\n+   |            ^^^^^^^^^ associated type `Bar` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "e11a570df79d5b232ecdfa12bc154d04d19fee5a", "filename": "src/test/ui/error-codes/E0220.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@ trait Trait {\n     type Bar;\n }\n \n-type Foo = Trait<F=i32>; //~ ERROR E0220\n-                         //~| ERROR E0191\n+type Foo = dyn Trait<F=i32>; //~ ERROR E0220\n+                             //~| ERROR E0191\n fn main() {\n }"}, {"sha": "5da302748cdaffb7e63303dce9b36a1a585e9aec", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,17 +1,17 @@\n error[E0220]: associated type `F` not found for `Trait`\n-  --> $DIR/E0220.rs:5:18\n+  --> $DIR/E0220.rs:5:22\n    |\n-LL | type Foo = Trait<F=i32>;\n-   |                  ^^^^^ associated type `F` not found\n+LL | type Foo = dyn Trait<F=i32>;\n+   |                      ^^^^^ associated type `F` not found\n \n error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n   --> $DIR/E0220.rs:5:12\n    |\n LL |     type Bar;\n    |     --------- `Bar` defined here\n ...\n-LL | type Foo = Trait<F=i32>;\n-   |            ^^^^^^^^^^^^ associated type `Bar` must be specified\n+LL | type Foo = dyn Trait<F=i32>;\n+   |            ^^^^^^^^^^^^^^^^ associated type `Bar` must be specified\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c1a369806d8f399cb460a9b04d1a75cd91a6b20", "filename": "src/test/ui/error-codes/E0393.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n trait A<T=Self> {}\n \n-fn together_we_will_rule_the_galaxy(son: &A) {}\n+fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n //~^ ERROR E0393\n \n fn main() {"}, {"sha": "543e3213633c81c1aefaf585d1a6075b23e5fe94", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/E0393.rs:3:43\n+  --> $DIR/E0393.rs:3:47\n    |\n-LL | fn together_we_will_rule_the_galaxy(son: &A) {}\n-   |                                           ^ missing reference to `T`\n+LL | fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n+   |                                               ^ missing reference to `T`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "b1562dc0a8ba0e51e99dea8f233bf1479992e1e7", "filename": "src/test/ui/error-codes/E0478.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n trait Wedding<'t>: 't { }\n \n struct Prince<'kiss, 'SnowWhite> {\n-    child: Box<Wedding<'kiss> + 'SnowWhite>, //~ ERROR E0478\n+    child: Box<dyn Wedding<'kiss> + 'SnowWhite>, //~ ERROR E0478\n }\n \n fn main() {"}, {"sha": "587125fdc336e4110ec335bbff433b43aa88890a", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n   --> $DIR/E0478.rs:4:5\n    |\n-LL |     child: Box<Wedding<'kiss> + 'SnowWhite>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     child: Box<dyn Wedding<'kiss> + 'SnowWhite>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime 'SnowWhite as defined on the struct at 3:22\n   --> $DIR/E0478.rs:3:22"}, {"sha": "3311e190937cc4e9e093f8d30a7de828deed8655", "filename": "src/test/ui/error-codes/E0719.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,12 +3,12 @@ trait Foo: Iterator<Item = i32, Item = i32> {}\n \n type Unit = ();\n \n-fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n+fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {\n //~^ ERROR is already specified\n     Box::new(None.into_iter())\n }\n \n fn main() {\n-    let _: &Iterator<Item = i32, Item = i32>;\n+    let _: &dyn Iterator<Item = i32, Item = i32>;\n     test();\n }"}, {"sha": "c5b9a71c65994493a1180e9b932782b4d5824aef", "filename": "src/test/ui/error-codes/E0719.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,12 +7,12 @@ LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719.rs:6:38\n+  --> $DIR/E0719.rs:6:42\n    |\n-LL | fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n-   |                           ---------  ^^^^^^^^^^^ re-bound here\n-   |                           |\n-   |                           `Item` bound here first\n+LL | fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {\n+   |                               ---------  ^^^^^^^^^^^ re-bound here\n+   |                               |\n+   |                               `Item` bound here first\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a0fad583a1645a069f3fbbf0be75dd329ac0a648", "filename": "src/test/ui/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,6 +19,6 @@ fn main() {\n     q as *const [i32]; //~ ERROR cannot cast\n \n     // #21397\n-    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+    let t: *mut (dyn Trait + 'static) = 0 as *mut _; //~ ERROR casting\n     let mut fail: *const str = 0 as *const str; //~ ERROR casting\n }"}, {"sha": "93e1471838f72acdf8d97aa1bc05924c15275d52", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -53,10 +53,10 @@ LL |     q as *const [i32];\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0606]: casting `usize` as `*mut (dyn Trait + 'static)` is invalid\n-  --> $DIR/fat-ptr-cast.rs:22:37\n+  --> $DIR/fat-ptr-cast.rs:22:41\n    |\n-LL |     let t: *mut (Trait + 'static) = 0 as *mut _;\n-   |                                     ^^^^^^^^^^^\n+LL |     let t: *mut (dyn Trait + 'static) = 0 as *mut _;\n+   |                                         ^^^^^^^^^^^\n \n error[E0606]: casting `usize` as `*const str` is invalid\n   --> $DIR/fat-ptr-cast.rs:23:32"}, {"sha": "3dbaf5dea250e4f8c0946b33f213cfccd997ee0e", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -52,8 +52,8 @@ struct Dst<X: ?Sized> {\n struct TwoStrs(str, str) where str: Sized; //~ ERROR\n \n \n-fn unsized_local() where Dst<A>: Sized { //~ ERROR\n-    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+fn unsized_local() where Dst<dyn A>: Sized { //~ ERROR\n+    let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n }\n \n fn return_str() -> str where str: Sized { //~ ERROR"}, {"sha": "1d346fd42ffa45a99c2ea19c5483648e95d63533", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -102,8 +102,8 @@ LL | struct TwoStrs(str, str) where str: Sized;\n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:55:1\n    |\n-LL | / fn unsized_local() where Dst<A>: Sized {\n-LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+LL | / fn unsized_local() where Dst<dyn A>: Sized {\n+LL | |     let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |"}, {"sha": "3686e7b37f4c442e3127df748b00eadf2c02849e", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn f(f: FnOnce()) {}\n+fn f(f: dyn FnOnce()) {}\n //~^ ERROR E0277\n \n fn main() {"}, {"sha": "d20b9e2981e8cf7d1e7ca3e38b84e274ffc4e2cf", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `(dyn std::ops::FnOnce() + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-unsized_locals.rs:1:6\n    |\n-LL | fn f(f: FnOnce()) {}\n+LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`"}, {"sha": "c3d62a231e5e4f21441017e67a146cef181bf47c", "filename": "src/test/ui/feature-gates/feature-gate-unsized_tuple_coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let _ : &(Send,) = &((),);\n+    let _ : &(dyn Send,) = &((),);\n     //~^ ERROR unsized tuple coercion is not stable enough\n }"}, {"sha": "5b93c889db1c2215b2ca3554aceeb57eabf52c7e", "filename": "src/test/ui/feature-gates/feature-gate-unsized_tuple_coercion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: unsized tuple coercion is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-unsized_tuple_coercion.rs:2:24\n+  --> $DIR/feature-gate-unsized_tuple_coercion.rs:2:28\n    |\n-LL |     let _ : &(Send,) = &((),);\n-   |                        ^^^^^^\n+LL |     let _ : &(dyn Send,) = &((),);\n+   |                            ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/42877\n    = help: add #![feature(unsized_tuple_coercion)] to the crate attributes to enable"}, {"sha": "5c16c1a7e88b7d53a47f95b5f8fba1702991d927", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,15 +3,15 @@\n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n fn main() {\n-    let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n+    let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n     //~| found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n-    let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n+    let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n     //~| found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n-    let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n+    let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n     //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`"}, {"sha": "504bc2605ec38ed8a5fca5c61c118b2b4457c3d6", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,26 +1,26 @@\n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n-LL |     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n               found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n-LL |     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n               found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n-LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n    = note: expected type `()`\n               found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`"}, {"sha": "f3393347d90dc5a74c9e6b94308eb9729a5d9061", "filename": "src/test/ui/higher-lifetime-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -58,12 +58,12 @@ struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n //~^ ERROR lifetime bounds cannot be used in this context\n \n-type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n+type T1 = Box<dyn for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n //~^ ERROR lifetime bounds cannot be used in this context\n \n fn main() {\n     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n     //~^ ERROR lifetime bounds cannot be used in this context\n-    let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n+    let _ : Option<Box<dyn for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n     //~^ ERROR lifetime bounds cannot be used in this context\n }"}, {"sha": "bc6d2288cdfc4fc6fa7b5681a426376055c666c4", "filename": "src/test/ui/higher-lifetime-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -47,10 +47,10 @@ LL | struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n    |                             ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/higher-lifetime-bounds.rs:61:29\n+  --> $DIR/higher-lifetime-bounds.rs:61:33\n    |\n-LL | type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n-   |                             ^^^\n+LL | type T1 = Box<dyn for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n+   |                                 ^^^\n \n error: lifetime bounds cannot be used in this context\n   --> $DIR/higher-lifetime-bounds.rs:65:34\n@@ -59,10 +59,10 @@ LL |     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> =\n    |                                  ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/higher-lifetime-bounds.rs:67:38\n+  --> $DIR/higher-lifetime-bounds.rs:67:42\n    |\n-LL |     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n-   |                                      ^^^\n+LL |     let _ : Option<Box<dyn for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n+   |                                          ^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "8198c1816a1412976164632b6d1c6b1b5899fc11", "filename": "src/test/ui/imports/extern-crate-used.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-used.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -20,13 +20,13 @@ extern crate core; //~ ERROR unused extern crate\n mod m {\n     use iso1::any as are_you_okay1;\n     use ::iso2::any as are_you_okay2;\n-    type AreYouOkay1 = iso3::any::Any;\n-    type AreYouOkay2 = ::iso4::any::Any;\n+    type AreYouOkay1 = dyn iso3::any::Any;\n+    type AreYouOkay2 = dyn (::iso4::any::Any);\n \n     use core::any as are_you_okay3;\n     use ::core::any as are_you_okay4;\n-    type AreYouOkay3 = core::any::Any;\n-    type AreYouOkay4 = ::core::any::Any;\n+    type AreYouOkay3 = dyn core::any::Any;\n+    type AreYouOkay4 = dyn (::core::any::Any);\n }\n \n fn main() {}"}, {"sha": "d131a944721d01fe7272d50f37736779338e8c19", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,8 +4,8 @@ trait Trait {}\n struct Struct;\n \n impl Deref for Struct {\n-    type Target = Trait;\n-    fn deref(&self) -> &Trait {\n+    type Target = dyn Trait;\n+    fn deref(&self) -> &dyn Trait {\n         unimplemented!();\n     }\n }"}, {"sha": "b50a926c63795aa4a6e08a759097535a730247a0", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,13 +1,13 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n-LL |     fn deref(&self) -> &Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn deref(&self) -> &dyn Trait {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n-LL | /     fn deref(&self) -> &Trait {\n+LL | /     fn deref(&self) -> &dyn Trait {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^"}, {"sha": "a7b827d27a87bb8d22249b67322db3f485074c6f", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@ error: lifetime may not live long enough\n    |\n LL | fn test<'x>(x: &'x isize) {\n    |         -- lifetime `'x` defined here\n-LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+LL |     drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n LL |         x\n    |         ^ returning this value requires that `'x` must outlive `'static`\n "}, {"sha": "559c5fcac954bd5f21ac77c9892616cf63da7596", "filename": "src/test/ui/issues/issue-10291.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,5 +1,5 @@\n fn test<'x>(x: &'x isize) {\n-    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+    drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         x //~ ERROR E0312\n     }));\n }"}, {"sha": "5e63469da59f57980a53e85890327092081175a0", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,11 +4,11 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         x\n    |         ^\n    |\n-note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 2:65...\n-  --> $DIR/issue-10291.rs:2:65\n+note: ...the reference is valid for the anonymous lifetime #2 defined on the body at 2:69...\n+  --> $DIR/issue-10291.rs:2:69\n    |\n-LL |       drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |  _________________________________________________________________^\n+LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+   |  _____________________________________________________________________^\n LL | |         x\n LL | |     }));\n    | |_____^"}, {"sha": "5e7f8ed7fd5d260d91347a5b8b43e6bc8cf1859b", "filename": "src/test/ui/issues/issue-10902.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10902.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,16 +4,16 @@\n \n pub mod two_tuple {\n     pub trait T { fn dummy(&self) { } }\n-    pub struct P<'a>(&'a (T + 'a), &'a (T + 'a));\n-    pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n+    pub struct P<'a>(&'a (dyn T + 'a), &'a (dyn T + 'a));\n+    pub fn f<'a>(car: &'a dyn T, cdr: &'a dyn T) -> P<'a> {\n         P(car, cdr)\n     }\n }\n \n pub mod two_fields {\n     pub trait T { fn dummy(&self) { } }\n-    pub struct P<'a> { car: &'a (T + 'a), cdr: &'a (T + 'a) }\n-    pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n+    pub struct P<'a> { car: &'a (dyn T + 'a), cdr: &'a (dyn T + 'a) }\n+    pub fn f<'a>(car: &'a dyn T, cdr: &'a dyn T) -> P<'a> {\n         P{ car: car, cdr: cdr }\n     }\n }"}, {"sha": "7519ba2826e7a1c76ac49ee4138983da06ceaf35", "filename": "src/test/ui/issues/issue-11374.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,11 +2,11 @@ use std::io::{self, Read};\n use std::vec;\n \n pub struct Container<'a> {\n-    reader: &'a mut Read\n+    reader: &'a mut dyn Read\n }\n \n impl<'a> Container<'a> {\n-    pub fn wrap<'s>(reader: &'s mut io::Read) -> Container<'s> {\n+    pub fn wrap<'s>(reader: &'s mut dyn io::Read) -> Container<'s> {\n         Container { reader: reader }\n     }\n \n@@ -17,7 +17,7 @@ impl<'a> Container<'a> {\n \n pub fn for_stdin<'a>() -> Container<'a> {\n     let mut r = io::stdin();\n-    Container::wrap(&mut r as &mut io::Read)\n+    Container::wrap(&mut r as &mut dyn io::Read)\n }\n \n fn main() {"}, {"sha": "a7671b9282a9976ffebb7684878343be69f7bce8", "filename": "src/test/ui/issues/issue-11515.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,10 +1,10 @@\n #![feature(box_syntax)]\n \n struct Test {\n-    func: Box<FnMut()+'static>\n+    func: Box<dyn FnMut() + 'static>\n }\n \n fn main() {\n-    let closure: Box<Fn()+'static> = Box::new(|| ());\n+    let closure: Box<dyn Fn() + 'static> = Box::new(|| ());\n     let test = box Test { func: closure }; //~ ERROR mismatched types\n }"}, {"sha": "fd4fb2443cbe7487fc23550303afe38462382aef", "filename": "src/test/ui/issues/issue-11612.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11612.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -14,11 +14,11 @@ struct B<'a, T:'a> {\n \n impl<'a, T> A for B<'a, T> {}\n \n-fn foo(_: &A) {}\n+fn foo(_: &dyn A) {}\n \n fn bar<G>(b: &B<G>) {\n     foo(b);       // Coercion should work\n-    foo(b as &A); // Explicit cast should work as well\n+    foo(b as &dyn A); // Explicit cast should work as well\n }\n \n fn main() {}"}, {"sha": "0ade359923a0e6c6449d8d4385e61f1c7ccb1186", "filename": "src/test/ui/issues/issue-12470.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12470.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -16,10 +16,10 @@ impl X for B {\n }\n \n struct A<'a> {\n-    p: &'a (X+'a)\n+    p: &'a (dyn X + 'a)\n }\n \n-fn make_a<'a>(p: &'a X) -> A<'a> {\n+fn make_a<'a>(p: &'a dyn X) -> A<'a> {\n     A { p: p }\n }\n "}, {"sha": "e5274eb823d465809afc1e7224505635a8b1d2d9", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,11 +1,11 @@\n trait Foo {\n-    fn bar(&mut self, other: &mut Foo);\n+    fn bar(&mut self, other: &mut dyn Foo);\n }\n \n struct Baz;\n \n impl Foo for Baz {\n-    fn bar(&mut self, other: &Foo) {}\n+    fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n     //~| expected type `fn(&mut Baz, &mut dyn Foo)`\n     //~| found type `fn(&mut Baz, &dyn Foo)`"}, {"sha": "195d0c39b29833beae6a9da0f241e3b4f1d334d5", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,18 +1,18 @@\n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-13033.rs:8:30\n    |\n-LL |     fn bar(&mut self, other: &mut Foo);\n-   |                              -------- type in trait\n+LL |     fn bar(&mut self, other: &mut dyn Foo);\n+   |                              ------------ type in trait\n ...\n-LL |     fn bar(&mut self, other: &Foo) {}\n-   |                              ^^^^ types differ in mutability\n+LL |     fn bar(&mut self, other: &dyn Foo) {}\n+   |                              ^^^^^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&mut Baz, &mut dyn Foo)`\n               found type `fn(&mut Baz, &dyn Foo)`\n help: consider change the type to match the mutability in trait\n    |\n-LL |     fn bar(&mut self, other: &mut Foo) {}\n-   |                              ^^^^^^^^\n+LL |     fn bar(&mut self, other: &mut dyn Foo) {}\n+   |                              ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e6995be27d20e728c68b03c262bde9a259296077", "filename": "src/test/ui/issues/issue-13352.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13352.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n // ignore-cloudabi no std::process\n \n-fn foo(_: Box<FnMut()>) {}\n+fn foo(_: Box<dyn FnMut()>) {}\n \n fn main() {\n     foo(loop {"}, {"sha": "27319c98d6e358c371e3cff2c2b59b62573d5d11", "filename": "src/test/ui/issues/issue-13853-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,5 +2,5 @@ trait FromStructReader<'a> { }\n trait ResponseHook {\n      fn get(&self);\n }\n-fn foo(res : Box<ResponseHook>) { res.get } //~ ERROR attempted to take value of method\n+fn foo(res : Box<dyn ResponseHook>) { res.get } //~ ERROR attempted to take value of method\n fn main() {}"}, {"sha": "ea3b38940cf01523e707a5f7823c0323667122e8", "filename": "src/test/ui/issues/issue-13853-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0615]: attempted to take value of method `get` on type `std::boxed::Box<(dyn ResponseHook + 'static)>`\n-  --> $DIR/issue-13853-2.rs:5:39\n+  --> $DIR/issue-13853-2.rs:5:43\n    |\n-LL | fn foo(res : Box<ResponseHook>) { res.get }\n-   |                                       ^^^ help: use parentheses to call the method: `get()`\n+LL | fn foo(res : Box<dyn ResponseHook>) { res.get }\n+   |                                           ^^^ help: use parentheses to call the method: `get()`\n \n error: aborting due to previous error\n "}, {"sha": "2ba9ff717739caf6ef97b7c708c73e93b934af47", "filename": "src/test/ui/issues/issue-14285.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14285.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14285.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14285.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,9 +6,9 @@ struct A;\n \n impl Foo for A {}\n \n-struct B<'a>(&'a (Foo+'a));\n+struct B<'a>(&'a (dyn Foo + 'a));\n \n-fn foo<'a>(a: &Foo) -> B<'a> {\n+fn foo<'a>(a: &dyn Foo) -> B<'a> {\n     B(a)    //~ ERROR explicit lifetime required in the type of `a` [E0621]\n }\n "}, {"sha": "5c07066018e838dd2255692f8d9d626a3c36d00d", "filename": "src/test/ui/issues/issue-14285.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14285.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14285.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14285.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0621]: explicit lifetime required in the type of `a`\n   --> $DIR/issue-14285.rs:12:5\n    |\n-LL | fn foo<'a>(a: &Foo) -> B<'a> {\n-   |               ---- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n+LL | fn foo<'a>(a: &dyn Foo) -> B<'a> {\n+   |               -------- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n LL |     B(a)\n    |     ^^^^ lifetime `'a` required\n "}, {"sha": "bb338860d8b7783242564bf65e597a7acce836a4", "filename": "src/test/ui/issues/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let _x = \"test\" as &::std::any::Any;\n+    let _x = \"test\" as &dyn (::std::any::Any);\n     //~^ ERROR the size for values of type\n }"}, {"sha": "542d8a904c4e30299d8ac03fda271e094631f0f0", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/issue-14366.rs:2:14\n    |\n-LL |     let _x = \"test\" as &::std::any::Any;\n+LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "9b89c1631df15236faa81b91262eeb22d5dc3fdc", "filename": "src/test/ui/issues/issue-14901.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14901.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@\n pub trait Reader {}\n \n enum Wrapper<'a> {\n-    WrapReader(&'a (Reader + 'a))\n+    WrapReader(&'a (dyn Reader + 'a))\n }\n \n trait Wrap<'a> {\n@@ -11,7 +11,7 @@ trait Wrap<'a> {\n \n impl<'a, R: Reader> Wrap<'a> for &'a mut R {\n     fn wrap(self) -> Wrapper<'a> {\n-        Wrapper::WrapReader(self as &'a mut Reader)\n+        Wrapper::WrapReader(self as &'a mut dyn Reader)\n     }\n }\n "}, {"sha": "60daaafbcc8bd27ca49806503aef445a66317e88", "filename": "src/test/ui/issues/issue-14959.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14959.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -26,20 +26,20 @@ impl Alloy {\n     }\n }\n \n-impl<'b> Fn<(&'b mut (Response+'b),)> for SendFile {\n-    extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}\n+impl<'b> Fn<(&'b mut (dyn Response + 'b),)> for SendFile {\n+    extern \"rust-call\" fn call(&self, (_res,): (&'b mut (dyn Response + 'b),)) {}\n }\n \n-impl<'b> FnMut<(&'b mut (Response+'b),)> for SendFile {\n-    extern \"rust-call\" fn call_mut(&mut self, (_res,): (&'b mut (Response+'b),)) {\n+impl<'b> FnMut<(&'b mut (dyn Response + 'b),)> for SendFile {\n+    extern \"rust-call\" fn call_mut(&mut self, (_res,): (&'b mut (dyn Response+'b),)) {\n         self.call((_res,))\n     }\n }\n \n-impl<'b> FnOnce<(&'b mut (Response+'b),)> for SendFile {\n+impl<'b> FnOnce<(&'b mut (dyn Response + 'b),)> for SendFile {\n     type Output = ();\n \n-    extern \"rust-call\" fn call_once(self, (_res,): (&'b mut (Response+'b),)) {\n+    extern \"rust-call\" fn call_once(self, (_res,): (&'b mut (dyn Response+'b),)) {\n         self.call((_res,))\n     }\n }"}, {"sha": "b570a2ced67bcea61f637a9b2e610b713fb8a0dc", "filename": "src/test/ui/issues/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16668.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n // compile-pass\n #![allow(dead_code)]\n struct Parser<'a, I, O> {\n-    parse: Box<FnMut(I) -> Result<O, String> + 'a>\n+    parse: Box<dyn FnMut(I) -> Result<O, String> + 'a>\n }\n \n impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {"}, {"sha": "10a5cccbceef023d228a22bdfc3fd2d8d6437052", "filename": "src/test/ui/issues/issue-16922.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n use std::any::Any;\n \n-fn foo<T: Any>(value: &T) -> Box<Any> {\n-    Box::new(value) as Box<Any>\n+fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n+    Box::new(value) as Box<dyn Any>\n     //~^ ERROR explicit lifetime required in the type of `value` [E0621]\n }\n "}, {"sha": "4e3d3ecb9c03adb9ac77dc974c0a25bf4eb80de2", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,9 +1,9 @@\n error[E0621]: explicit lifetime required in the type of `value`\n   --> $DIR/issue-16922.rs:4:5\n    |\n-LL | fn foo<T: Any>(value: &T) -> Box<Any> {\n+LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n-LL |     Box::new(value) as Box<Any>\n+LL |     Box::new(value) as Box<dyn Any>\n    |     ^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to previous error"}, {"sha": "d5f1b1310eb5c5a91868f9a7298cddaf92b67ec4", "filename": "src/test/ui/issues/issue-16994.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n // compile-pass\n // skip-codegen\n-fn cb<'a,T>(_x: Box<Fn((&'a i32, &'a (Vec<&'static i32>, bool))) -> T>) -> T {\n+fn cb<'a,T>(_x: Box<dyn Fn((&'a i32, &'a (Vec<&'static i32>, bool))) -> T>) -> T {\n     panic!()\n }\n "}, {"sha": "b9813ef1eef77aef791270945a073cf785b12ea1", "filename": "src/test/ui/issues/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17441.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,10 +2,10 @@ fn main() {\n     let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n \n-    let _bar = Box::new(1_usize) as std::fmt::Debug;\n+    let _bar = Box::new(1_usize) as dyn std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n \n-    let _baz = 1_usize as std::fmt::Debug;\n+    let _baz = 1_usize as dyn std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `usize` as `dyn std::fmt::Debug`\n \n     let _quux = [1_usize, 2] as [usize];"}, {"sha": "0ab035515a0515220d72b1824996c69d6641681c", "filename": "src/test/ui/issues/issue-17441.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17441.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -13,21 +13,21 @@ LL |     let _foo = &[1_usize, 2] as [usize];\n error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:5:16\n    |\n-LL |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n-   |                ^^^^^^^^^^^^^^^^^^^^^---------------\n+LL |     let _bar = Box::new(1_usize) as dyn std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^^-------------------\n    |                                     |\n-   |                                     help: try casting to a `Box` instead: `Box<std::fmt::Debug>`\n+   |                                     help: try casting to a `Box` instead: `Box<dyn std::fmt::Debug>`\n \n error[E0620]: cast to unsized type: `usize` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:8:16\n    |\n-LL |     let _baz = 1_usize as std::fmt::Debug;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _baz = 1_usize as dyn std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider using a box or reference as appropriate\n   --> $DIR/issue-17441.rs:8:16\n    |\n-LL |     let _baz = 1_usize as std::fmt::Debug;\n+LL |     let _baz = 1_usize as dyn std::fmt::Debug;\n    |                ^^^^^^^\n \n error[E0620]: cast to unsized type: `[usize; 2]` as `[usize]`"}, {"sha": "73865ae2d2eb6160fde0d29ca35bcb162fbd88cf", "filename": "src/test/ui/issues/issue-17959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,5 +17,5 @@ impl<T> Drop for G<T> {\n }\n \n fn main() {\n-    let x:G<Bar>;\n+    let x:G<dyn Bar>;\n }"}, {"sha": "122940f1c1726e52ec0f68738e3beedec17a6adb", "filename": "src/test/ui/issues/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n-    AbstractRenderer\n+    dyn AbstractRenderer\n //~^ ERROR the size for values of type\n {\n     match 0 {"}, {"sha": "9bdf470413b1cbc66c091ca52c81e50fd96c6aa0", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn AbstractRenderer + 'static)` cannot be known at compilation time\n   --> $DIR/issue-18107.rs:4:5\n    |\n-LL |     AbstractRenderer\n-   |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     dyn AbstractRenderer\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "4d0c4464759c6ee85edfdf37bb726d9c3798ecdb", "filename": "src/test/ui/issues/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18188.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ pub trait Promisable: Send + Sync {}\n impl<T: Send + Sync> Promisable for T {}\n \n pub fn propagate<'a, T, E, F, G>(mut action: F)\n-    -> Box<FnMut(Result<T, E>) -> Result<T, E> + 'a>\n+    -> Box<dyn FnMut(Result<T, E>) -> Result<T, E> + 'a>\n     where\n         T: Promisable + Clone + 'a,\n         E: Promisable + Clone + 'a,"}, {"sha": "3e04a914d4586fbc4b3ca8edbf8ddc15aa415866", "filename": "src/test/ui/issues/issue-18446-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@ trait T {\n     fn foo(&self) -> i32 { 0 }\n }\n \n-impl<'a> T + 'a {\n+impl<'a> dyn T + 'a {\n     fn foo(&self) -> i32 { 1 }\n }\n "}, {"sha": "a2e238da03a3e999fbd484ff83bfa4c9676c534e", "filename": "src/test/ui/issues/issue-18446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ trait T {\n     fn foo(&self);\n }\n \n-impl<'a> T + 'a {\n+impl<'a> dyn T + 'a {\n     fn foo(&self) {}\n }\n \n@@ -14,6 +14,6 @@ impl T for i32 {\n }\n \n fn main() {\n-    let x: &T = &0i32;\n+    let x: &dyn T = &0i32;\n     x.foo(); //~ ERROR multiple applicable items in scope [E0034]\n }"}, {"sha": "d4851ac14187ec0433abcdb2675f02a86fee2e09", "filename": "src/test/ui/issues/issue-18783.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18783.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -18,11 +18,11 @@ fn ufcs() {\n }\n \n trait Push<'c> {\n-    fn push<'f: 'c>(&self, push: Box<FnMut() + 'f>);\n+    fn push<'f: 'c>(&self, push: Box<dyn FnMut() + 'f>);\n }\n \n-impl<'c> Push<'c> for RefCell<Vec<Box<FnMut() + 'c>>> {\n-    fn push<'f: 'c>(&self, fun: Box<FnMut() + 'f>) {\n+impl<'c> Push<'c> for RefCell<Vec<Box<dyn FnMut() + 'c>>> {\n+    fn push<'f: 'c>(&self, fun: Box<dyn FnMut() + 'f>) {\n         self.borrow_mut().push(fun)\n     }\n }"}, {"sha": "e634c55f824fdf770f04658e7181b4ccdb79d119", "filename": "src/test/ui/issues/issue-18819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ impl Foo for X {\n     type Item = bool;\n }\n \n-fn print_x(_: &Foo<Item=bool>, extra: &str) {\n+fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n     println!(\"{}\", extra);\n }\n "}, {"sha": "41e8470ecd04f260ec598a7d36eb9342724c6a1b", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n-LL | fn print_x(_: &Foo<Item=bool>, extra: &str) {\n-   | ------------------------------------------- defined here\n+LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n+   | ----------------------------------------------- defined here\n ...\n LL |     print_x(X);\n    |     ^^^^^^^^^^ expected 2 parameters"}, {"sha": "91fbb13cd69885253925aa8a8c79d47efa9e1b5b", "filename": "src/test/ui/issues/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-type FuncType<'f> = Fn(&isize) -> isize + 'f;\n+type FuncType<'f> = dyn Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n     //~^ ERROR the size for values of type"}, {"sha": "ab4c9c736d8963326a99ff1a483ac0e57c7151b2", "filename": "src/test/ui/issues/issue-18937.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18937.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@ use std::fmt;\n struct MyString<'a>(&'a String);\n \n struct B {\n-    list: Vec<Box<fmt::Debug>>,\n+    list: Vec<Box<dyn fmt::Debug>>,\n }\n \n trait A<'a> {"}, {"sha": "4b6f04e251b947abb349e15a8610664469a5e233", "filename": "src/test/ui/issues/issue-18959.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,13 +8,13 @@ impl Foo for Thing {\n }\n \n #[inline(never)]\n-fn foo(b: &Bar) {\n+fn foo(b: &dyn Bar) {\n     //~^ ERROR E0038\n     b.foo(&0)\n }\n \n fn main() {\n     let mut thing = Thing;\n-    let test: &Bar = &mut thing;\n+    let test: &dyn Bar = &mut thing;\n     foo(test);\n }"}, {"sha": "63c33b7f4472d298f565c17b38e63bb4ac5b7834", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:1\n    |\n-LL | fn foo(b: &Bar) {\n-   | ^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+LL | fn foo(b: &dyn Bar) {\n+   | ^^^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: method `foo` has generic type parameters\n "}, {"sha": "7fe662e907d733f3fc6af5f623ec3460a821d6d1", "filename": "src/test/ui/issues/issue-18988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18988.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@\n pub trait Foo : Send { }\n \n pub struct MyFoo {\n-    children: Vec<Box<Foo>>,\n+    children: Vec<Box<dyn Foo>>,\n }\n \n impl Foo for MyFoo { }"}, {"sha": "5c10e2067e408adc290d328a503639174a6913da", "filename": "src/test/ui/issues/issue-19380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ impl Qiz for Foo {\n }\n \n struct Bar {\n-  foos: &'static [&'static (Qiz + 'static)]\n+  foos: &'static [&'static (dyn Qiz + 'static)]\n //~^ ERROR E0038\n }\n "}, {"sha": "27e3ff57bf9ab484addb2496365b7043c10adf86", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:3\n    |\n-LL |   foos: &'static [&'static (Qiz + 'static)]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n    |\n    = note: method `qiz` has no receiver\n "}, {"sha": "59544393bae05f02fddc75ddba568ff454572c9c", "filename": "src/test/ui/issues/issue-19404.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19404.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -12,24 +12,24 @@ trait Component: 'static {}\n impl Component for Engine {}\n \n trait Env {\n-    fn get_component_type_id(&self, type_id: TypeId) -> Option<Fp<Component>>;\n+    fn get_component_type_id(&self, type_id: TypeId) -> Option<Fp<dyn Component>>;\n }\n \n-impl<'a> Env+'a {\n+impl<'a> dyn Env + 'a {\n     fn get_component<T: Component>(&self) -> Option<Fp<T>> {\n         let x = self.get_component_type_id(TypeId::of::<T>());\n         None\n     }\n }\n \n trait Figment {\n-    fn init(&mut self, env: &Env);\n+    fn init(&mut self, env: &dyn Env);\n }\n \n struct MyFigment;\n \n impl Figment for MyFigment {\n-    fn init(&mut self, env: &Env) {\n+    fn init(&mut self, env: &dyn Env) {\n         let engine = env.get_component::<Engine>();\n     }\n }"}, {"sha": "9e4b77d87f8b59e1482a8da4c3f3986219ab5289", "filename": "src/test/ui/issues/issue-19482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-fn bar(x: &Foo) {}\n+fn bar(x: &dyn Foo) {}\n //~^ ERROR the associated type `A` (from the trait `Foo`) must be specified\n \n pub fn main() {}"}, {"sha": "f1e5419c712296a3e5de5ae14b3d22527d266efd", "filename": "src/test/ui/issues/issue-19482.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,8 +4,8 @@ error[E0191]: the value of the associated type `A` (from the trait `Foo`) must b\n LL |     type A;\n    |     ------- `A` defined here\n ...\n-LL | fn bar(x: &Foo) {}\n-   |            ^^^ associated type `A` must be specified\n+LL | fn bar(x: &dyn Foo) {}\n+   |            ^^^^^^^ associated type `A` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "7054ef41b1c829b989a2c20960c80ef15f1f871d", "filename": "src/test/ui/issues/issue-19538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -14,7 +14,7 @@ impl Bar for Thing { }\n \n fn main() {\n     let mut thing = Thing;\n-    let test: &mut Bar = &mut thing;\n+    let test: &mut dyn Bar = &mut thing;\n     //~^ ERROR E0038\n     //~| ERROR E0038\n }"}, {"sha": "e5da0a9b0dac38e2f92cd3dc8b3b6aa84610dcfb", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,16 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n-LL |     let test: &mut Bar = &mut thing;\n-   |               ^^^^^^^^ the trait `Bar` cannot be made into an object\n+LL |     let test: &mut dyn Bar = &mut thing;\n+   |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: method `foo` has generic type parameters\n \n error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/issue-19538.rs:17:26\n+  --> $DIR/issue-19538.rs:17:30\n    |\n-LL |     let test: &mut Bar = &mut thing;\n-   |                          ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+LL |     let test: &mut dyn Bar = &mut thing;\n+   |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n    |\n    = note: method `foo` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&mut dyn Bar>` for `&mut Thing`"}, {"sha": "0e69b7f3d1e0c57892f32ecc8e94940557d72793", "filename": "src/test/ui/issues/issue-20396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20396.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -10,7 +10,7 @@ trait Foo<T> {\n enum Bar<T> { Bla(T) }\n \n struct Baz<'a> {\n-    inner: for<'b> Foo<Bar<&'b ()>> + 'a,\n+    inner: dyn for<'b> Foo<Bar<&'b ()>> + 'a,\n }\n \n fn main() {}"}, {"sha": "17b7d32ebf59b95e47fd19df991b0d92838b2fad", "filename": "src/test/ui/issues/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n+fn changer<'a>(mut things: Box<dyn Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n //~^ ERROR the size for values of type\n }"}, {"sha": "2a05bba7b163214b6ca06037be8acd1c5a024dbf", "filename": "src/test/ui/issues/issue-20692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,7 +4,7 @@ fn f<T: Array>(x: &T) {\n     let _ = x\n     //~^ ERROR `Array` cannot be made into an object\n     as\n-    &Array;\n+    &dyn Array;\n     //~^ ERROR `Array` cannot be made into an object\n }\n "}, {"sha": "66309394a426d6c5efd12a3f03124d50a4f975f7", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n-LL |     &Array;\n-   |     ^^^^^^ the trait `Array` cannot be made into an object\n+LL |     &dyn Array;\n+   |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n "}, {"sha": "ef4b1581fd874f900d31bdfbe4ce82c8e9f6d09e", "filename": "src/test/ui/issues/issue-20831-debruijn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -12,20 +12,20 @@ pub trait Subscriber {\n \n pub trait Publisher<'a> {\n     type Output;\n-    fn subscribe(&mut self, _: Box<Subscriber<Input=Self::Output> + 'a>);\n+    fn subscribe(&mut self, _: Box<dyn Subscriber<Input=Self::Output> + 'a>);\n }\n \n pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n \n impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n \n struct MyStruct<'a> {\n-    sub: Box<Subscriber<Input=u64> + 'a>\n+    sub: Box<dyn Subscriber<Input=u64> + 'a>\n }\n \n impl<'a> Publisher<'a> for MyStruct<'a> {\n     type Output = u64;\n-    fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+    fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n         // Not obvious, but there is an implicit lifetime here -------^\n         //~^^ ERROR cannot infer\n         //~| ERROR mismatched types"}, {"sha": "64e3cdc64c1127d3522a1283fbd3ac3c6e069d55", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |\n@@ -15,7 +15,7 @@ LL | |     }\n note: the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |\n@@ -32,7 +32,7 @@ LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n error[E0308]: mismatched types\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |\n@@ -51,7 +51,7 @@ LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 28:5\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |\n@@ -63,7 +63,7 @@ LL | |     }\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |\n@@ -75,7 +75,7 @@ LL | |     }\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n LL | |         // Not obvious, but there is an implicit lifetime here -------^\n LL | |\n LL | |"}, {"sha": "c0c222978970d51d36a34a93e7a465d3e2833333", "filename": "src/test/ui/issues/issue-20939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20939.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n trait Foo {}\n \n-impl<'a> Foo for Foo+'a {}\n+impl<'a> Foo for dyn Foo + 'a {}\n //~^ ERROR the object type `(dyn Foo + 'a)` automatically implements the trait `Foo`\n \n fn main() {}"}, {"sha": "3819a21a2cfff25a5c604fe9f5597fd3960db2b8", "filename": "src/test/ui/issues/issue-20939.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-20939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20939.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0371]: the object type `(dyn Foo + 'a)` automatically implements the trait `Foo`\n   --> $DIR/issue-20939.rs:3:1\n    |\n-LL | impl<'a> Foo for Foo+'a {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Foo + 'a)` automatically implements trait `Foo`\n+LL | impl<'a> Foo for dyn Foo + 'a {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Foo + 'a)` automatically implements trait `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "12efce9496efa2af5df7bbf9c9f27b33bccf51fa", "filename": "src/test/ui/issues/issue-21363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21363.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ trait Iterator {\n     fn dummy(&self) { }\n }\n \n-impl<'a, T> Iterator for &'a mut (Iterator<Item=T> + 'a) {\n+impl<'a, T> Iterator for &'a mut (dyn Iterator<Item=T> + 'a) {\n     type Item = T;\n }\n "}, {"sha": "0bc87824ccec32bab96080c6dc8fdcce1f0c7301", "filename": "src/test/ui/issues/issue-21950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@ use std::ops::Add;\n \n fn main() {\n     let x = &10 as\n-            &Add;\n+            &dyn Add;\n             //~^ ERROR E0393\n             //~| ERROR E0191\n }"}, {"sha": "9be7b052da31cf3fa4c71353dcd951c81d6b69bb", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,16 +1,16 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-21950.rs:5:14\n+  --> $DIR/issue-21950.rs:5:18\n    |\n-LL |             &Add;\n-   |              ^^^ missing reference to `Rhs`\n+LL |             &dyn Add;\n+   |                  ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n   --> $DIR/issue-21950.rs:5:14\n    |\n-LL |             &Add;\n-   |              ^^^ associated type `Output` must be specified\n+LL |             &dyn Add;\n+   |              ^^^^^^^ associated type `Output` must be specified\n \n error: aborting due to 2 previous errors\n "}, {"sha": "508c9c91b04e5f989fed2ddf659f07f7da876163", "filename": "src/test/ui/issues/issue-22034.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,8 +4,8 @@ extern crate libc;\n \n fn main() {\n     let ptr: *mut () = 0 as *mut _;\n-    let _: &mut Fn() = unsafe {\n-        &mut *(ptr as *mut Fn())\n+    let _: &mut dyn Fn() = unsafe {\n+        &mut *(ptr as *mut dyn Fn())\n         //~^ ERROR expected a `std::ops::Fn<()>` closure, found `()`\n     };\n }"}, {"sha": "19fb080154a4a3bf0a9db0b24ebce5c565a030e4", "filename": "src/test/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `()`\n   --> $DIR/issue-22034.rs:8:16\n    |\n-LL |         &mut *(ptr as *mut Fn())\n+LL |         &mut *(ptr as *mut dyn Fn())\n    |                ^^^ expected an `Fn<()>` closure, found `()`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `()`"}, {"sha": "e1b3dfe5b61bd39d66522943f610d12ac5d43c58", "filename": "src/test/ui/issues/issue-22289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22289.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    0 as &std::any::Any; //~ ERROR non-primitive cast\n+    0 as &dyn std::any::Any; //~ ERROR non-primitive cast\n }"}, {"sha": "cc7ace30cabef108eff333f1c6b428fa847a885c", "filename": "src/test/ui/issues/issue-22289.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0605]: non-primitive cast: `i32` as `&(dyn std::any::Any + 'static)`\n   --> $DIR/issue-22289.rs:2:5\n    |\n-LL |     0 as &std::any::Any;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     0 as &dyn std::any::Any;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n "}, {"sha": "250fec2588702c0e94ec3155b40e36e2a86f2202", "filename": "src/test/ui/issues/issue-22312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ pub trait Array2D: Index<usize> {\n             return None;\n         }\n         let i = y * self.columns() + x;\n-        let indexer = &(*self as &Index<usize, Output = <Self as Index<usize>>::Output>);\n+        let indexer = &(*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n         //~^ERROR non-primitive cast\n         Some(indexer.index(i))\n     }"}, {"sha": "fc32fd376b75a9eb023d3fc8b5e54dc184bc19fc", "filename": "src/test/ui/issues/issue-22312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0605]: non-primitive cast: `Self` as `&dyn std::ops::Index<usize, Output = <Self as std::ops::Index<usize>>::Output>`\n   --> $DIR/issue-22312.rs:11:24\n    |\n-LL |         let indexer = &(*self as &Index<usize, Output = <Self as Index<usize>>::Output>);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let indexer = &(*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n "}, {"sha": "bab0469c011934b27a3330b21531e9d0540fb4f8", "filename": "src/test/ui/issues/issue-22370.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n trait A<T=Self> {}\n \n-fn f(a: &A) {}\n+fn f(a: &dyn A) {}\n //~^ ERROR E0393\n \n fn main() {}"}, {"sha": "3ce164e9548b4e71370b1fccab866b0df7114f5d", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/issue-22370.rs:3:10\n+  --> $DIR/issue-22370.rs:3:14\n    |\n-LL | fn f(a: &A) {}\n-   |          ^ missing reference to `T`\n+LL | fn f(a: &dyn A) {}\n+   |              ^ missing reference to `T`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "3e800a2b61db94edcfcc18cef26e8a84a44876b9", "filename": "src/test/ui/issues/issue-22434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@ pub trait Foo {\n     type A;\n }\n \n-type I<'a> = &'a (Foo + 'a);\n+type I<'a> = &'a (dyn Foo + 'a);\n //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n fn main() {}"}, {"sha": "eb78c4fc311fc3d751a145a597fbf739204d5f31", "filename": "src/test/ui/issues/issue-22434.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,8 +4,8 @@ error[E0191]: the value of the associated type `A` (from the trait `Foo`) must b\n LL |     type A;\n    |     ------- `A` defined here\n ...\n-LL | type I<'a> = &'a (Foo + 'a);\n-   |                   ^^^^^^^^ associated type `A` must be specified\n+LL | type I<'a> = &'a (dyn Foo + 'a);\n+   |                   ^^^^^^^^^^^^ associated type `A` must be specified\n \n error: aborting due to previous error\n "}, {"sha": "acee99dbedcc4bd6a2b18b81826601b193974384", "filename": "src/test/ui/issues/issue-22560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n use std::ops::{Add, Sub};\n \n-type Test = Add +\n+type Test = dyn Add +\n             //~^ ERROR E0393\n             //~| ERROR E0191\n             Sub;"}, {"sha": "5b58adb197c6903c6fcd103e74e720c2d3111b1a", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,21 +7,21 @@ LL |             Sub;\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:3:13\n+  --> $DIR/issue-22560.rs:3:17\n    |\n-LL | type Test = Add +\n-   |             ^^^ missing reference to `Rhs`\n+LL | type Test = dyn Add +\n+   |                 ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/issue-22560.rs:6:13\n    |\n-LL | type Test = Add +\n-   |             ---\n-   |             |\n-   |             first non-auto trait\n-   |             trait alias used in trait object type (first use)\n+LL | type Test = dyn Add +\n+   |                 ---\n+   |                 |\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n ...\n LL |             Sub;\n    |             ^^^\n@@ -32,7 +32,7 @@ LL |             Sub;\n error[E0191]: the value of the associated types `Output` (from the trait `std::ops::Add`), `Output` (from the trait `std::ops::Sub`) must be specified\n   --> $DIR/issue-22560.rs:3:13\n    |\n-LL |   type Test = Add +\n+LL |   type Test = dyn Add +\n    |  _____________^\n    | |_____________|\n    | |"}, {"sha": "a7b94c106a4c8a7680b9b132beff7ff4f089788a", "filename": "src/test/ui/issues/issue-22781.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22781.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,7 +4,7 @@ use std::collections::HashMap;\n use std::collections::hash_map::Entry::Vacant;\n \n pub fn foo() {\n-    type F = Box<Fn(&()) + 'static>;\n+    type F = Box<dyn Fn(&()) + 'static>;\n     let mut map: HashMap<(), F> = HashMap::new();\n     let x: &mut F = match map.entry(()) {\n         Vacant(_) => unimplemented!(),"}, {"sha": "5db2891e65e753efffcfeb9d78a37d7bf4f709e4", "filename": "src/test/ui/issues/issue-22872.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,7 +17,7 @@ pub trait Process<'a> {\n }\n \n fn push_process<P>(process: P) where P: Process<'static> {\n-    let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+    let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n //~^ ERROR is not an iterator\n }\n "}, {"sha": "fc5de23752b3e7e85ab8bdfe69690dee8b20c948", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `<P as Process<'_>>::Item` is not an iterator\n-  --> $DIR/issue-22872.rs:20:36\n+  --> $DIR/issue-22872.rs:20:40\n    |\n-LL |     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n+LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<P as Process<'_>>::Item`\n    = help: consider adding a `where <P as Process<'_>>::Item: std::iter::Iterator` bound"}, {"sha": "2638e15f0eae501e4763211f600a14955d43c59c", "filename": "src/test/ui/issues/issue-23024.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,9 +4,9 @@ use std::any::Any;\n fn main()\n {\n     fn h(x:i32) -> i32 {3*x}\n-    let mut vfnfer:Vec<Box<Any>> = vec![];\n+    let mut vfnfer:Vec<Box<dyn Any>> = vec![];\n     vfnfer.push(box h);\n-    println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n+    println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n     //~| ERROR wrong number of type arguments: expected 1, found 0 [E0107]\n     //~| ERROR the value of the associated type `Output` (from the trait `std::ops::FnOnce`)"}, {"sha": "e99854539de88f6f915e599cd4c5843717ed858b", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,23 +1,23 @@\n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n-  --> $DIR/issue-23024.rs:9:35\n+  --> $DIR/issue-23024.rs:9:39\n    |\n-LL |     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n-   |                                   ^^\n+LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n+   |                                       ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/issue-23024.rs:9:35\n+  --> $DIR/issue-23024.rs:9:39\n    |\n-LL |     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n-   |                                   ^^ expected 1 type argument\n+LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n+   |                                       ^^ expected 1 type argument\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::FnOnce`) must be specified\n   --> $DIR/issue-23024.rs:9:35\n    |\n-LL |     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n-   |                                   ^^ associated type `Output` must be specified\n+LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n+   |                                   ^^^^^^ associated type `Output` must be specified\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a1371521a0aa03c346e0fc5d704e7cf22a0328b6", "filename": "src/test/ui/issues/issue-23041.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23041.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,6 +2,6 @@ use std::any::Any;\n fn main()\n {\n     fn bar(x:i32) ->i32 { 3*x };\n-    let b:Box<Any> = Box::new(bar as fn(_)->_);\n+    let b:Box<dyn Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n }"}, {"sha": "a68369616d8b62a32b84bfc9a0e5b2994eae5bc8", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n pub enum Expr<'var, VAR> {\n     Let(Box<Expr<'var, VAR>>,\n-        Box<for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n+        Box<dyn for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n }\n \n pub fn add<'var, VAR>"}, {"sha": "d5f747288627323b0127f557df0c85c05790f5fc", "filename": "src/test/ui/issues/issue-23281.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n pub struct Struct;\n \n impl Struct {\n-    pub fn function(funs: Vec<Fn() -> ()>) {}\n+    pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n     //~^ ERROR the size for values of type\n }\n "}, {"sha": "f1def4745836822a0fa217087e3e932286fc10db", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n   --> $DIR/issue-23281.rs:4:5\n    |\n-LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "ffd6dfabc2890a1cb7f905485e1812780b86b903", "filename": "src/test/ui/issues/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    static foo: Fn() -> u32 = || -> u32 {\n+    static foo: dyn Fn() -> u32 = || -> u32 {\n         //~^ ERROR the size for values of type\n         0\n     };"}, {"sha": "344443e783038171bfdc1a71a8b6db9ac186a997", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() -> u32 + 'static)` cannot be known at compilation time\n   --> $DIR/issue-24446.rs:2:17\n    |\n-LL |     static foo: Fn() -> u32 = || -> u32 {\n-   |                 ^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     static foo: dyn Fn() -> u32 = || -> u32 {\n+   |                 ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "297f403c05ee7353d21e8d863735ad3bfc250cb1", "filename": "src/test/ui/issues/issue-25180.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25180.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,6 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n-const x: &'static Fn() = &|| println!(\"ICE here\");\n+const x: &'static dyn Fn() = &|| println!(\"ICE here\");\n \n fn main() {}"}, {"sha": "99d43ec792b3c80990a1669eee533b647aeee432", "filename": "src/test/ui/issues/issue-26056.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26056.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26056.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,6 +17,6 @@ impl<K> Map for K {\n \n fn main() {\n     let _ = &()\n-        as &Map<Key=u32,MapValue=u32>;\n+        as &dyn Map<Key=u32,MapValue=u32>;\n     //~^ ERROR E0038\n }"}, {"sha": "9c4cf0b18acfe2eccc7302de74d5b14f03fce6b7", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Map` cannot be made into an object\n   --> $DIR/issue-26056.rs:20:13\n    |\n-LL |         as &Map<Key=u32,MapValue=u32>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n+LL |         as &dyn Map<Key=u32,MapValue=u32>;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n "}, {"sha": "72fe4286a06b332ff6f4b23e25ff435886bb15bc", "filename": "src/test/ui/issues/issue-26638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n+fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n //~^ ERROR missing lifetime specifier [E0106]\n \n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }"}, {"sha": "6d7c1b0c43fceb09b4a1e0c6c2b4cc3a924c715d", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-26638.rs:1:58\n+  --> $DIR/issue-26638.rs:1:62\n    |\n-LL | fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                          ^ expected lifetime parameter\n+LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n+   |                                                              ^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n "}, {"sha": "4c5c67d58bc3d6936501578b9cef736713d17209", "filename": "src/test/ui/issues/issue-26905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26905.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     let data = [1, 2, 3];\n     let iter = data.iter();\n     let x = MyRc { _ptr: &iter, _boo: NotPhantomData(PhantomData) };\n-    let _y: MyRc<Iterator<Item=&u32>> = x;\n+    let _y: MyRc<dyn Iterator<Item=&u32>> = x;\n }"}, {"sha": "1aafa11768fd36468935bbdd830549c6df77fc3b", "filename": "src/test/ui/issues/issue-27105.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27105.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n \n pub struct Callbacks {\n-    callbacks: Vec<Rc<RefCell<FnMut(i32)>>>,\n+    callbacks: Vec<Rc<RefCell<dyn FnMut(i32)>>>,\n }\n \n impl Callbacks {"}, {"sha": "fab91160a88be84ee5e0ca2170462b90df94d867", "filename": "src/test/ui/issues/issue-28279.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28279.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,15 +2,15 @@\n #![allow(dead_code)]\n use std::rc::Rc;\n \n-fn test1() -> Rc<for<'a> Fn(&'a usize) + 'static> {\n+fn test1() -> Rc<dyn for<'a> Fn(&'a usize) + 'static> {\n     if let Some(_) = Some(1) {\n         loop{}\n     } else {\n         loop{}\n     }\n }\n \n-fn test2() -> *mut (for<'a> Fn(&'a usize) + 'static) {\n+fn test2() -> *mut (dyn for<'a> Fn(&'a usize) + 'static) {\n     if let Some(_) = Some(1) {\n         loop{}\n     } else {"}, {"sha": "972c839b648032a8f5cdd483e0836f78c0a6a5a8", "filename": "src/test/ui/issues/issue-28576.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,7 +4,7 @@ pub trait Foo<RHS=Self> {\n \n pub trait Bar: Foo<Assoc=()> {\n     fn new(&self, b: &\n-           Bar //~ ERROR the trait `Bar` cannot be made into an object\n+           dyn Bar //~ ERROR the trait `Bar` cannot be made into an object\n               <Assoc=()>\n     );\n }"}, {"sha": "3249d76e69b57d36c6d468d611e46a7851b1e6ce", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-28576.rs:7:12\n    |\n-LL | /            Bar\n+LL | /            dyn Bar\n LL | |               <Assoc=()>\n    | |________________________^ the trait `Bar` cannot be made into an object\n    |"}, {"sha": "42f71a1b096153d8b0774d81e537f187fe5e45ff", "filename": "src/test/ui/issues/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2904.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -55,7 +55,7 @@ fn square_from_char(c: char) -> square {\n \n fn read_board_grid<rdr:'static + Read>(mut input: rdr)\n                    -> Vec<Vec<square>> {\n-    let mut input: &mut Read = &mut input;\n+    let mut input: &mut dyn Read = &mut input;\n     let mut grid = Vec::new();\n     let mut line = [0; 10];\n     input.read(&mut line);"}, {"sha": "ee099069f02414152b8ddfb3654ef6d80a3ebd08", "filename": "src/test/ui/issues/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ trait Misc {}\n fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n \n fn main() {\n-    size_of_copy::<Misc+Copy>();\n+    size_of_copy::<dyn Misc + Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n }"}, {"sha": "a31a74a07f46e56241c3da905c2f326e233f8a88", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,19 +1,19 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-32963.rs:8:25\n+  --> $DIR/issue-32963.rs:8:31\n    |\n-LL |     size_of_copy::<Misc+Copy>();\n-   |                    ---- ^^^^\n-   |                    |    |\n-   |                    |    additional non-auto trait\n-   |                    |    trait alias used in trait object type (additional use)\n-   |                    first non-auto trait\n-   |                    trait alias used in trait object type (first use)\n+LL |     size_of_copy::<dyn Misc + Copy>();\n+   |                        ----   ^^^^\n+   |                        |      |\n+   |                        |      additional non-auto trait\n+   |                        |      trait alias used in trait object type (additional use)\n+   |                        first non-auto trait\n+   |                        trait alias used in trait object type (first use)\n \n error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n-LL |     size_of_copy::<Misc+Copy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`\n+LL |     size_of_copy::<dyn Misc + Copy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`\n    |\n note: required by `size_of_copy`\n   --> $DIR/issue-32963.rs:5:1"}, {"sha": "3526deffc79ab075dbecc1a2c7ba00f6b3806eb0", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -17,11 +17,11 @@ fn main() {\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n-    let o : Box<::std::marker()::Send> = Box::new(1);\n+    let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n-    let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n+    let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }"}, {"sha": "f97d86f6522abeeca8d0ea6ab103ee6a8c547257", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -36,19 +36,19 @@ LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:30\n+  --> $DIR/issue-32995.rs:20:35\n    |\n-LL |     let o : Box<::std::marker()::Send> = Box::new(1);\n-   |                              ^^\n+LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n+   |                                   ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:37\n+  --> $DIR/issue-32995.rs:24:41\n    |\n-LL |     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                     ^^\n+LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n+   |                                         ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "078f3f3dd2cd22aa9e0703363e37d46c00c0bf4c", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.rs", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -13,85 +13,85 @@\n /// Implementations for all traits in std are provided.\n pub unsafe trait Trait {}\n \n-unsafe impl Trait for ::std::any::Any + Send { }\n-unsafe impl Trait for ::std::any::Any + Sync { }\n-unsafe impl Trait for ::std::any::Any + Send + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Send { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::Borrow<T> + Send + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Send { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::borrow::BorrowMut<T> + Send + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Send { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsMut<T> + Send + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Send { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Sync { }\n-unsafe impl<T: ?Sized> Trait for ::std::convert::AsRef<T> + Send + Sync { }\n-unsafe impl Trait for ::std::error::Error + Send { }\n-unsafe impl Trait for ::std::error::Error + Sync { }\n-unsafe impl Trait for ::std::error::Error + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Binary + Send { }\n-unsafe impl Trait for ::std::fmt::Binary + Sync { }\n-unsafe impl Trait for ::std::fmt::Binary + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Debug + Send { }\n-unsafe impl Trait for ::std::fmt::Debug + Sync { }\n-unsafe impl Trait for ::std::fmt::Debug + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Display + Send { }\n-unsafe impl Trait for ::std::fmt::Display + Sync { }\n-unsafe impl Trait for ::std::fmt::Display + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::LowerExp + Send { }\n-unsafe impl Trait for ::std::fmt::LowerExp + Sync { }\n-unsafe impl Trait for ::std::fmt::LowerExp + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::LowerHex + Send { }\n-unsafe impl Trait for ::std::fmt::LowerHex + Sync { }\n-unsafe impl Trait for ::std::fmt::LowerHex + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Octal + Send { }\n-unsafe impl Trait for ::std::fmt::Octal + Sync { }\n-unsafe impl Trait for ::std::fmt::Octal + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Pointer + Send { }\n-unsafe impl Trait for ::std::fmt::Pointer + Sync { }\n-unsafe impl Trait for ::std::fmt::Pointer + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::UpperExp + Send { }\n-unsafe impl Trait for ::std::fmt::UpperExp + Sync { }\n-unsafe impl Trait for ::std::fmt::UpperExp + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::UpperHex + Send { }\n-unsafe impl Trait for ::std::fmt::UpperHex + Sync { }\n-unsafe impl Trait for ::std::fmt::UpperHex + Send + Sync { }\n-unsafe impl Trait for ::std::fmt::Write + Send { }\n-unsafe impl Trait for ::std::fmt::Write + Sync { }\n-unsafe impl Trait for ::std::fmt::Write + Send + Sync { }\n-unsafe impl Trait for ::std::hash::Hasher + Send { }\n-unsafe impl Trait for ::std::hash::Hasher + Sync { }\n-unsafe impl Trait for ::std::hash::Hasher + Send + Sync { }\n-unsafe impl Trait for ::std::io::BufRead + Send { }\n-unsafe impl Trait for ::std::io::BufRead + Sync { }\n-unsafe impl Trait for ::std::io::BufRead + Send + Sync { }\n-unsafe impl Trait for ::std::io::Read + Send { }\n-unsafe impl Trait for ::std::io::Read + Sync { }\n-unsafe impl Trait for ::std::io::Read + Send + Sync { }\n-unsafe impl Trait for ::std::io::Seek + Send { }\n-unsafe impl Trait for ::std::io::Seek + Sync { }\n-unsafe impl Trait for ::std::io::Seek + Send + Sync { }\n-unsafe impl Trait for ::std::io::Write + Send { }\n-unsafe impl Trait for ::std::io::Write + Sync { }\n-unsafe impl Trait for ::std::io::Write + Send + Sync { }\n-unsafe impl<T, I> Trait for ::std::iter::IntoIterator<IntoIter=I, Item=T> { }\n-unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Send { }\n-unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Sync { }\n-unsafe impl<T> Trait for ::std::iter::Iterator<Item=T> + Send + Sync { }\n-unsafe impl Trait for ::std::marker::Send + Send { }\n-unsafe impl Trait for ::std::marker::Send + Sync { }\n-unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n-unsafe impl Trait for ::std::marker::Sync + Send { }\n-unsafe impl Trait for ::std::marker::Sync + Sync { }\n-unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n-unsafe impl Trait for ::std::ops::Drop + Send { }\n-unsafe impl Trait for ::std::ops::Drop + Sync { }\n-unsafe impl Trait for ::std::ops::Drop + Send + Sync { }\n-unsafe impl Trait for ::std::string::ToString + Send { }\n-unsafe impl Trait for ::std::string::ToString + Sync { }\n-unsafe impl Trait for ::std::string::ToString + Send + Sync { }\n+unsafe impl Trait for dyn (::std::any::Any) + Send { }\n+unsafe impl Trait for dyn (::std::any::Any) + Sync { }\n+unsafe impl Trait for dyn (::std::any::Any) + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::Borrow<T>) + Send { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::Borrow<T>) + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::Borrow<T>) + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::BorrowMut<T>) + Send { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::BorrowMut<T>) + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::borrow::BorrowMut<T>) + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsMut<T>) + Send { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsMut<T>) + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsMut<T>) + Send + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsRef<T>) + Send { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsRef<T>) + Sync { }\n+unsafe impl<T: ?Sized> Trait for dyn (::std::convert::AsRef<T>) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::error::Error) + Send { }\n+unsafe impl Trait for dyn (::std::error::Error) + Sync { }\n+unsafe impl Trait for dyn (::std::error::Error) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Binary) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Binary) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Binary) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Debug) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Debug) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Debug) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Display) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Display) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Display) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::LowerExp) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::LowerExp) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::LowerExp) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::LowerHex) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::LowerHex) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::LowerHex) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Octal) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Octal) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Octal) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Pointer) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Pointer) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Pointer) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::UpperExp) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::UpperExp) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::UpperExp) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::UpperHex) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::UpperHex) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::UpperHex) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Write) + Send { }\n+unsafe impl Trait for dyn (::std::fmt::Write) + Sync { }\n+unsafe impl Trait for dyn (::std::fmt::Write) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::hash::Hasher) + Send { }\n+unsafe impl Trait for dyn (::std::hash::Hasher) + Sync { }\n+unsafe impl Trait for dyn (::std::hash::Hasher) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::io::BufRead) + Send { }\n+unsafe impl Trait for dyn (::std::io::BufRead) + Sync { }\n+unsafe impl Trait for dyn (::std::io::BufRead) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::io::Read) + Send { }\n+unsafe impl Trait for dyn (::std::io::Read) + Sync { }\n+unsafe impl Trait for dyn (::std::io::Read) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::io::Seek) + Send { }\n+unsafe impl Trait for dyn (::std::io::Seek) + Sync { }\n+unsafe impl Trait for dyn (::std::io::Seek) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::io::Write) + Send { }\n+unsafe impl Trait for dyn (::std::io::Write) + Sync { }\n+unsafe impl Trait for dyn (::std::io::Write) + Send + Sync { }\n+unsafe impl<T, I> Trait for dyn (::std::iter::IntoIterator<IntoIter=I, Item=T>) { }\n+unsafe impl<T> Trait for dyn (::std::iter::Iterator<Item=T>) + Send { }\n+unsafe impl<T> Trait for dyn (::std::iter::Iterator<Item=T>) + Sync { }\n+unsafe impl<T> Trait for dyn (::std::iter::Iterator<Item=T>) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::marker::Send) + Send { }\n+unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n+unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+unsafe impl Trait for dyn (::std::marker::Sync) + Sync { }\n+unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::ops::Drop) + Send { }\n+unsafe impl Trait for dyn (::std::ops::Drop) + Sync { }\n+unsafe impl Trait for dyn (::std::ops::Drop) + Send + Sync { }\n+unsafe impl Trait for dyn (::std::string::ToString) + Send { }\n+unsafe impl Trait for dyn (::std::string::ToString) + Sync { }\n+unsafe impl Trait for dyn (::std::string::ToString) + Send + Sync { }\n fn assert_trait<T: Trait + ?Sized>() {}\n \n fn main() {"}, {"sha": "76db98aa38bb437a3523eacb664c17ac93b7c391", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,10 +1,10 @@\n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:85:1\n    |\n-LL | unsafe impl Trait for ::std::marker::Send + Sync { }\n-   | ------------------------------------------------ first implementation here\n-LL | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n+   | ------------------------------------------------------ first implementation here\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |\n note: lint level defined here\n   --> $DIR/issue-33140-traitobject-crate.rs:3:9\n@@ -17,22 +17,22 @@ LL | #![warn(order_dependent_trait_objects)]\n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:86:1\n    |\n-LL | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n-   | ------------------------------------------------------- first implementation here\n-LL | unsafe impl Trait for ::std::marker::Sync + Send { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+   | ------------------------------------------------------------- first implementation here\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n   --> $DIR/issue-33140-traitobject-crate.rs:88:1\n    |\n-LL | unsafe impl Trait for ::std::marker::Sync + Send { }\n-   | ------------------------------------------------ first implementation here\n-LL | unsafe impl Trait for ::std::marker::Sync + Sync { }\n-LL | unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+   | ------------------------------------------------------ first implementation here\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Sync { }\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>"}, {"sha": "9bdac4b8375c265bdcb41f1b3c5f9a1a2fdbdeb9", "filename": "src/test/ui/issues/issue-33140.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -38,10 +38,10 @@ impl Foo<dyn Sync + Send> {\n }\n \n fn main() {\n-    assert_eq!(<Send+Sync>::xyz(), false);\n-    assert_eq!(<Sync+Send>::xyz(), true);\n-    assert_eq!(<Send+Sync>::uvw(), false);\n-    assert_eq!(<Sync+Send+Sync>::uvw(), true);\n-    assert_eq!(<Foo<Send+Sync>>::abc(), false);\n-    assert_eq!(<Foo<Sync+Send>>::abc(), true);\n+    assert_eq!(<dyn Send + Sync>::xyz(), false);\n+    assert_eq!(<dyn Sync + Send>::xyz(), true);\n+    assert_eq!(<dyn Send + Sync>::uvw(), false);\n+    assert_eq!(<dyn Sync + Send+ Sync>::uvw(), true);\n+    assert_eq!(<Foo<dyn Send + Sync>>::abc(), false);\n+    assert_eq!(<Foo<dyn Sync + Send>>::abc(), true);\n }"}, {"sha": "4d6204cb28832e88a5fd96b8c1fcce8c2763d3bb", "filename": "src/test/ui/issues/issue-33241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,6 +9,6 @@ fn any<T>() -> T { unreachable!() }\n \n \n fn main() {\n-    let t: &(u8, fmt::Debug) = any();\n+    let t: &(u8, dyn fmt::Debug) = any();\n     println!(\"{:?}\", &t.1);\n }"}, {"sha": "19f9f13e14416af5fe32b1ea16e5a30ca49403d0", "filename": "src/test/ui/issues/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3424.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@\n \n pub struct Path;\n \n-type rsrc_loader = Box<FnMut(&Path) -> Result<String, String>>;\n+type rsrc_loader = Box<dyn FnMut(&Path) -> Result<String, String>>;\n \n fn tester()\n {"}, {"sha": "e462f3543735805893e1a1aa680a4bc91ccac45e", "filename": "src/test/ui/issues/issue-35139.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35139.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,14 +7,14 @@ pub trait MethodType {\n pub struct MTFn;\n \n impl<'a> MethodType for MTFn { //~ ERROR E0207\n-    type GetProp = fmt::Debug + 'a;\n+    type GetProp = dyn fmt::Debug + 'a;\n }\n \n-fn bad(a: Box<<MTFn as MethodType>::GetProp>) -> Box<fmt::Debug+'static> {\n+fn bad(a: Box<<MTFn as MethodType>::GetProp>) -> Box<dyn fmt::Debug+'static> {\n     a\n }\n \n-fn dangling(a: &str) -> Box<fmt::Debug> {\n+fn dangling(a: &str) -> Box<dyn fmt::Debug> {\n     bad(Box::new(a))\n }\n "}, {"sha": "500ba48e0b71c3103c7ce76d51ad02fad940e7e4", "filename": "src/test/ui/issues/issue-35546.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35546.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,11 +6,11 @@\n // `value` field of `Node<Send>`).\n \n struct Node<T: ?Sized + Send> {\n-    next: Option<Box<Node<Send>>>,\n+    next: Option<Box<Node<dyn Send>>>,\n     value: T,\n }\n \n-fn clear(head: &mut Option<Box<Node<Send>>>) {\n+fn clear(head: &mut Option<Box<Node<dyn Send>>>) {\n     match head.take() {\n         Some(node) => *head = node.next,\n         None => (),"}, {"sha": "9bb9db63951c36506dbbc32f3d14f3506ef7e3e7", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -8,7 +8,7 @@ trait Trait2<'a> {\n   type Ty;\n }\n \n-fn _ice(param: Box<for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n+fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n }\n "}, {"sha": "d075794d9946fe40da855c4234695fbb230c95fd", "filename": "src/test/ui/issues/issue-35976.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35976.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-35976.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,14 +3,14 @@ mod private {\n         fn wait(&self) where Self: Sized;\n     }\n \n-    impl Future for Box<Future> {\n+    impl Future for Box<dyn Future> {\n         fn wait(&self) { }\n     }\n }\n \n //use private::Future;\n \n-fn bar(arg: Box<private::Future>) {\n+fn bar(arg: Box<dyn private::Future>) {\n     arg.wait();\n     //~^ ERROR the `wait` method cannot be invoked on a trait object\n }"}, {"sha": "9bccb2a21e33c3ac700cd22e5ae2016f41847bb3", "filename": "src/test/ui/issues/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3609.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@ use std::thread;\n use std::sync::mpsc::Sender;\n \n type RingBuffer = Vec<f64> ;\n-type SamplesFn = Box<FnMut(&RingBuffer) + Send>;\n+type SamplesFn = Box<dyn FnMut(&RingBuffer) + Send>;\n \n enum Msg\n {"}, {"sha": "a660368f40153ef3036ab72e81ffdbc4e17f60aa", "filename": "src/test/ui/issues/issue-36839.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,5 +19,5 @@ impl<T> Broken for T {\n \n \n fn main() {\n-    let _m: &Broken<Assoc=()> = &();\n+    let _m: &dyn Broken<Assoc=()> = &();\n }"}, {"sha": "d47f6d248f708772140b76491316fbd44b02f124", "filename": "src/test/ui/issues/issue-3702-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,12 +7,12 @@ impl ToPrimitive for isize {}\n \n trait Add {\n     fn to_int(&self) -> isize;\n-    fn add_dynamic(&self, other: &Add) -> isize;\n+    fn add_dynamic(&self, other: &dyn Add) -> isize;\n }\n \n impl Add for isize {\n     fn to_int(&self) -> isize { *self }\n-    fn add_dynamic(&self, other: &Add) -> isize {\n+    fn add_dynamic(&self, other: &dyn Add) -> isize {\n         self.to_int() + other.to_int() //~ ERROR multiple applicable items in scope\n     }\n }"}, {"sha": "cc07bd1d91509bba0c914685eca7218cfbeba34b", "filename": "src/test/ui/issues/issue-37515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@\n // compile-pass\n #![warn(unused)]\n \n-type Z = for<'x> Send;\n+type Z = dyn for<'x> Send;\n //~^ WARN type alias is never used\n \n "}, {"sha": "1476d17cdc6424b9ebfb184774ba374b6b5e5721", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n warning: type alias is never used: `Z`\n   --> $DIR/issue-37515.rs:5:1\n    |\n-LL | type Z = for<'x> Send;\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Z = dyn for<'x> Send;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-37515.rs:3:9"}, {"sha": "1a92acc34042b0f8f9f0b3f440a0e81ede2dfe78", "filename": "src/test/ui/issues/issue-38404.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,6 +1,6 @@\n trait A<T>: std::ops::Add<Self> + Sized {}\n trait B<T>: A<T> {}\n-trait C<T>: A<B<T, Output=usize>> {}\n+trait C<T>: A<dyn B<T, Output=usize>> {}\n //~^ ERROR the trait `B` cannot be made into an object\n \n fn main() {}"}, {"sha": "d18a26b3a76382ca55fc0eb58590dc62404a3e18", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/issue-38404.rs:3:15\n    |\n-LL | trait C<T>: A<B<T, Output=usize>> {}\n-   |               ^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n+LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n "}, {"sha": "002a3c43fcba6a7ce51f061ea72f8a87e2c68915", "filename": "src/test/ui/issues/issue-38604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -11,6 +11,6 @@ impl Foo for () {\n }\n \n fn main() {\n-    let _f: Box<Foo> = //~ ERROR `Foo` cannot be made into an object\n+    let _f: Box<dyn Foo> = //~ ERROR `Foo` cannot be made into an object\n         Box::new(()); //~ ERROR `Foo` cannot be made into an object\n }"}, {"sha": "8ef7d346cb3318623db57c3a714ab119b4828156", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:14:13\n    |\n-LL |     let _f: Box<Foo> =\n-   |             ^^^^^^^^ the trait `Foo` cannot be made into an object\n+LL |     let _f: Box<dyn Foo> =\n+   |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n "}, {"sha": "9d5ef481afc37cce1fec1105e9e9845fb6a2bb76", "filename": "src/test/ui/issues/issue-40000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let bar: fn(&mut u32) = |_| {};\n \n-    fn foo(x: Box<Fn(&i32)>) {}\n-    let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n+    fn foo(x: Box<dyn Fn(&i32)>) {}\n+    let bar = Box::new(|x: &i32| {}) as Box<dyn Fn(_)>;\n     foo(bar); //~ ERROR E0308\n }"}, {"sha": "4814232607cf8d16a7d1f98554bd39641506aa18", "filename": "src/test/ui/issues/issue-41139.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41139.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n trait Trait {}\n \n-fn get_function<'a>() -> &'a Fn() -> Trait { panic!(\"\") }\n+fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait { panic!(\"\") }\n \n fn main() {\n-    let t : &Trait = &get_function()();\n+    let t : &dyn Trait = &get_function()();\n     //~^ ERROR cannot move a value of type dyn Trait\n }"}, {"sha": "829d0cfa72ca704d77af2279230d67993ea7448f", "filename": "src/test/ui/issues/issue-41139.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0161]: cannot move a value of type dyn Trait: the size of dyn Trait cannot be statically determined\n-  --> $DIR/issue-41139.rs:6:23\n+  --> $DIR/issue-41139.rs:6:27\n    |\n-LL |     let t : &Trait = &get_function()();\n-   |                       ^^^^^^^^^^^^^^^^\n+LL |     let t : &dyn Trait = &get_function()();\n+   |                           ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "426efcbf9b16f8292cdf6c82d1044f9147127f97", "filename": "src/test/ui/issues/issue-42312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-42312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-42312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ pub trait Foo {\n     //~^ ERROR the size for values of type\n }\n \n-pub fn f(_: ToString) {}\n+pub fn f(_: dyn ToString) {}\n //~^ ERROR the size for values of type\n \n fn main() { }"}, {"sha": "bfdc4272fb3089d1550ca3459f5b16bf524a72f2", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -11,10 +11,10 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-42312.rs:8:23\n+  --> $DIR/issue-42312.rs:8:27\n    |\n-LL | pub fn f(_: ToString) {}\n-   |                       ^ doesn't have a size known at compile-time\n+LL | pub fn f(_: dyn ToString) {}\n+   |                           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "a10ae9a1243a211256faaf09132a2aa74a45444c", "filename": "src/test/ui/issues/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -2,7 +2,7 @@\n \n fn id<T>(t: T) -> T { t }\n \n-fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n     id(Box::new(|| *v))\n         //~^ ERROR E0373\n         //~| ERROR E0507"}, {"sha": "f1b6e475949dc8224ed122ca039392850a5d5079", "filename": "src/test/ui/issues/issue-4335.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:6:20\n    |\n-LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+LL | fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n    |             - captured outer variable\n LL |     id(Box::new(|| *v))\n    |                    ^^ cannot move out of captured variable in an `FnMut` closure"}, {"sha": "3776759fe07a5967c142572642a574e09415ae8e", "filename": "src/test/ui/issues/issue-45730.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-45730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-45730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45730.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let x: *const _ = 0 as _; //~ ERROR cannot cast\n \n     let x: *const _ = 0 as *const _; //~ ERROR cannot cast\n-    let y: Option<*const fmt::Debug> = Some(x) as _;\n+    let y: Option<*const dyn fmt::Debug> = Some(x) as _;\n \n     let x = 0 as *const i32 as *const _ as *mut _; //~ ERROR cannot cast\n }"}, {"sha": "fab258f137e68c66f683a3d6b34a7ca002ec4aa8", "filename": "src/test/ui/issues/issue-4972.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4972.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,10 +6,10 @@ trait MyTrait {\n }\n \n pub enum TraitWrapper {\n-    A(Box<MyTrait+'static>),\n+    A(Box<dyn MyTrait + 'static>),\n }\n \n-fn get_tw_map(tw: &TraitWrapper) -> &MyTrait {\n+fn get_tw_map(tw: &TraitWrapper) -> &dyn MyTrait {\n     match *tw {\n         TraitWrapper::A(box ref map) => map, //~ ERROR cannot be dereferenced\n     }"}, {"sha": "70b4bc8b755aac7b31cb97c2de2655c354ac2736", "filename": "src/test/ui/issues/issue-50761.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50761.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -14,7 +14,7 @@ mod b {\n     }\n \n     impl Builder {\n-        pub fn with_a(&mut self, _a: fn() -> ::a::A) {}\n+        pub fn with_a(&mut self, _a: fn() -> dyn (::a::A)) {}\n     }\n }\n "}, {"sha": "3c5e5a9f69af0a61bb32c76994efba55b7f31168", "filename": "src/test/ui/issues/issue-50781.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-50781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-50781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -15,5 +15,5 @@ impl Trait for dyn X {}\n \n pub fn main() {\n     // Check that this does not segfault.\n-    <X as X>::foo(&());\n+    <dyn X as X>::foo(&());\n }"}, {"sha": "e6737662088f2081e569a6f595aaa16886cc4186", "filename": "src/test/ui/issues/issue-5153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,6 +7,6 @@ impl Foo for isize {\n }\n \n fn main() {\n-    (&5isize as &Foo).foo();\n+    (&5isize as &dyn Foo).foo();\n     //~^ ERROR: no method named `foo` found for type `&dyn Foo` in the current scope\n }"}, {"sha": "97214fbdc52d404b82c958b6ece9700e5902fe71", "filename": "src/test/ui/issues/issue-5153.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0599]: no method named `foo` found for type `&dyn Foo` in the current scope\n-  --> $DIR/issue-5153.rs:10:23\n+  --> $DIR/issue-5153.rs:10:27\n    |\n-LL |     (&5isize as &Foo).foo();\n-   |                       ^^^\n+LL |     (&5isize as &dyn Foo).foo();\n+   |                           ^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `foo`, perhaps you need to implement it:"}, {"sha": "35b343edfbdbe870c23a63f1828936983106b212", "filename": "src/test/ui/issues/issue-5216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,10 +1,10 @@\n fn f() { }\n-struct S(Box<FnMut()>);\n+struct S(Box<dyn FnMut()>);\n pub static C: S = S(f); //~ ERROR mismatched types\n \n \n fn g() { }\n-type T = Box<FnMut()>;\n+type T = Box<dyn FnMut()>;\n pub static D: T = g; //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "bf6791734d4e23179e253f4093795fff8a1ffa4d", "filename": "src/test/ui/issues/issue-53419.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n //compile-pass\n \n struct Foo {\n-    bar: for<'r> Fn(usize, &'r FnMut())\n+    bar: dyn for<'r> Fn(usize, &'r dyn FnMut())\n }\n \n fn main() {"}, {"sha": "8c50cac67f8fc4a347435b2363d382c0ce0bcdc5", "filename": "src/test/ui/issues/issue-54582.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-54582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-54582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54582.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,7 +9,7 @@ pub enum Enum {\n \n impl Stage for Enum {}\n \n-pub static ARRAY: [(&Stage, &str); 1] = [\n+pub static ARRAY: [(&dyn Stage, &str); 1] = [\n     (&Enum::A, \"\"),\n ];\n "}, {"sha": "088d4301c51b1acf8eaeb5575c8a51a12eee0d0b", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -12,12 +12,12 @@ pub trait Graph<'a> {\n     fn out_edges(&'a self, u: &Self::Node) -> Self::EdgesIter;\n     fn in_edges(&'a self, u: &Self::Node) -> Self::EdgesIter;\n \n-    fn out_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n+    fn out_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n //~^ ERROR cannot infer\n     }\n \n-    fn in_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n+    fn in_neighbors(&'a self, u: &Self::Node) -> Box<dyn Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n //~^ ERROR cannot infer\n     }"}, {"sha": "0de535023972e0d80869bc0c07e93a127f497618", "filename": "src/test/ui/issues/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,10 +1,10 @@\n trait A {}\n \n struct Struct {\n-    r: A+'static\n+    r: dyn A + 'static\n }\n \n-fn new_struct(r: A+'static)\n+fn new_struct(r: dyn A + 'static)\n     -> Struct { //~^ ERROR the size for values of type\n     //~^ ERROR the size for values of type\n     Struct { r: r }"}, {"sha": "c2de1d095505a462765725ca9a118f481204d953", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:7:15\n    |\n-LL | fn new_struct(r: A+'static)\n+LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`"}, {"sha": "6dae1e1347b7a402263dff8570ac2bdc31e0061d", "filename": "src/test/ui/issues/issue-60989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -13,6 +13,6 @@ fn main() {\n     //~^ ERROR type arguments are not allowed for this type\n \n     let c1 = A {};\n-    c1::<Into<B>>;\n+    c1::<dyn Into<B>>;\n     //~^ ERROR type arguments are not allowed for this type\n }"}, {"sha": "5d2d9e83c9b9c2d5f5b628df0f495e15922bd0d9", "filename": "src/test/ui/issues/issue-60989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,8 +7,8 @@ LL |     c1::<()>;\n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/issue-60989.rs:16:10\n    |\n-LL |     c1::<Into<B>>;\n-   |          ^^^^^^^ type argument not allowed\n+LL |     c1::<dyn Into<B>>;\n+   |          ^^^^^^^^^^^ type argument not allowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3d72b67e391c9674fa5a49fbbc956c72e51c8938", "filename": "src/test/ui/issues/issue-7013.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -19,10 +19,10 @@ impl Foo for B {\n }\n \n struct A {\n-    v: Box<Foo + Send>,\n+    v: Box<dyn Foo + Send>,\n }\n \n fn main() {\n-    let a = A {v: box B{v: None} as Box<Foo+Send>};\n+    let a = A {v: box B{v: None} as Box<dyn Foo + Send>};\n     //~^ ERROR `std::rc::Rc<std::cell::RefCell<A>>` cannot be sent between threads safely\n }"}, {"sha": "f2668d3312289f37385d0f064f0c885529831bf5", "filename": "src/test/ui/issues/issue-7013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `std::rc::Rc<std::cell::RefCell<A>>` cannot be sent between threads safely\n   --> $DIR/issue-7013.rs:26:19\n    |\n-LL |     let a = A {v: box B{v: None} as Box<Foo+Send>};\n+LL |     let a = A {v: box B{v: None} as Box<dyn Foo + Send>};\n    |                   ^^^^^^^^^^^^^^ `std::rc::Rc<std::cell::RefCell<A>>` cannot be sent between threads safely\n    |\n    = help: within `B`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::RefCell<A>>`"}, {"sha": "619256c7871936069c35e245903f5999ecddfd0a", "filename": "src/test/ui/issues/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7673-cast-generically-implemented-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -18,5 +18,5 @@ trait A {\n \n impl<T: 'static> A for T {}\n \n-fn owned2<T: 'static>(a: Box<T>) { a as Box<A>; }\n-fn owned3<T: 'static>(a: Box<T>) { box a as Box<A>; }\n+fn owned2<T: 'static>(a: Box<T>) { a as Box<dyn A>; }\n+fn owned3<T: 'static>(a: Box<T>) { box a as Box<dyn A>; }"}, {"sha": "a65c667b08e45f3b1d44544fcb13502c507abae5", "filename": "src/test/ui/issues/issue-8398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8398.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -6,7 +6,7 @@ pub trait Writer {\n     fn write(&mut self, b: &[u8]) -> Result<(), ()>;\n }\n \n-fn foo(a: &mut Writer) {\n+fn foo(a: &mut dyn Writer) {\n     a.write(&[]).unwrap();\n }\n "}, {"sha": "1e38ab9c6c2a4e4d4b3a3dab10a5c650695208d9", "filename": "src/test/ui/issues/issue-9719.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9719.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -12,8 +12,8 @@ mod a {\n     }\n     impl X for isize {}\n \n-    pub struct Z<'a>(Enum<&'a (X+'a)>);\n-    fn foo() { let x: isize = 42; let z = Z(Enum::A(&x as &X)); let _ = z; }\n+    pub struct Z<'a>(Enum<&'a (dyn X + 'a)>);\n+    fn foo() { let x: isize = 42; let z = Z(Enum::A(&x as &dyn X)); let _ = z; }\n }\n \n mod b {\n@@ -22,20 +22,20 @@ mod b {\n     }\n     impl X for isize {}\n     struct Y<'a>{\n-        x:Option<&'a (X+'a)>,\n+        x:Option<&'a (dyn X + 'a)>,\n     }\n \n     fn bar() {\n         let x: isize = 42;\n-        let _y = Y { x: Some(&x as &X) };\n+        let _y = Y { x: Some(&x as &dyn X) };\n     }\n }\n \n mod c {\n     pub trait X { fn f(&self); }\n     impl X for isize { fn f(&self) {} }\n-    pub struct Z<'a>(Option<&'a (X+'a)>);\n-    fn main() { let x: isize = 42; let z = Z(Some(&x as &X)); let _ = z; }\n+    pub struct Z<'a>(Option<&'a (dyn X + 'a)>);\n+    fn main() { let x: isize = 42; let z = Z(Some(&x as &dyn X)); let _ = z; }\n }\n \n pub fn main() {}"}, {"sha": "eb18613682f65fa844a9f6fba2e6ff231d25847d", "filename": "src/test/ui/kindck/kindck-copy.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -34,16 +34,16 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<Box<&'a mut isize>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // borrowed object types are generally ok\n-    assert_copy::<&'a Dummy>();\n-    assert_copy::<&'a (Dummy+Send)>();\n-    assert_copy::<&'static (Dummy+Send)>();\n+    assert_copy::<&'a dyn Dummy>();\n+    assert_copy::<&'a (dyn Dummy + Send)>();\n+    assert_copy::<&'static (dyn Dummy + Send)>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n-    assert_copy::<Box<Dummy+Send>>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<dyn Dummy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<dyn Dummy + Send>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Send)>();  //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<&'a mut (dyn Dummy + Send)>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // unsafe ptrs are ok\n     assert_copy::<*const isize>();"}, {"sha": "929a8076562099a323bdb6fefa489ce3e0ce0621", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -77,8 +77,8 @@ LL | fn assert_copy<T:Copy>() { }\n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n    |\n-LL |     assert_copy::<Box<Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n+LL |     assert_copy::<Box<dyn Dummy>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n    |\n note: required by `assert_copy`\n   --> $DIR/kindck-copy.rs:5:1\n@@ -89,8 +89,8 @@ LL | fn assert_copy<T:Copy>() { }\n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy + std::marker::Send>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:43:5\n    |\n-LL |     assert_copy::<Box<Dummy+Send>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n+LL |     assert_copy::<Box<dyn Dummy + Send>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n    |\n note: required by `assert_copy`\n   --> $DIR/kindck-copy.rs:5:1\n@@ -101,8 +101,8 @@ LL | fn assert_copy<T:Copy>() { }\n error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:46:5\n    |\n-LL |     assert_copy::<&'a mut (Dummy+Send)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n+LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n    |\n note: required by `assert_copy`\n   --> $DIR/kindck-copy.rs:5:1"}, {"sha": "25d0e74187f75f68e2e25bef6b7582259685daca", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL |     let a = &t as &Gettable<T>;\n+LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n@@ -12,29 +12,29 @@ LL |     let a = &t as &Gettable<T>;\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL |     let a = &t as &Gettable<T>;\n+LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:27\n+  --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ `T` cannot be sent between threads safely\n+LL |     let a: &dyn Gettable<T> = &t;\n+   |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:27\n+  --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ the trait `std::marker::Copy` is not implemented for `T`\n+LL |     let a: &dyn Gettable<T> = &t;\n+   |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n@@ -43,17 +43,17 @@ LL |     let a: &Gettable<T> = &t;\n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:38:13\n    |\n-LL |     let a = t as Box<Gettable<String>>;\n+LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required because of the requirements on the impl of `Gettable<std::string::String>` for `S<std::string::String>`\n    = note: required for the cast to the object type `dyn Gettable<std::string::String>`\n \n error[E0277]: the trait bound `foo3::Foo: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:33\n+  --> $DIR/kindck-impl-type-params.rs:46:37\n    |\n-LL |     let a: Box<Gettable<Foo>> = t;\n-   |                                 ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n+LL |     let a: Box<dyn Gettable<Foo>> = t;\n+   |                                     ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n    |\n    = note: required because of the requirements on the impl of `Gettable<foo3::Foo>` for `S<foo3::Foo>`\n    = note: required for the cast to the object type `dyn Gettable<foo3::Foo>`"}, {"sha": "c4f90f36acfc25f6759cf88edb0a44630d1cf3de", "filename": "src/test/ui/kindck/kindck-impl-type-params.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -15,35 +15,35 @@ impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n \n fn f<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n-    let a = &t as &Gettable<T>;\n+    let a = &t as &dyn Gettable<T>;\n     //~^ ERROR `T` cannot be sent between threads safely\n     //~| ERROR : std::marker::Copy` is not satisfied\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n-    let a: &Gettable<T> = &t;\n+    let a: &dyn Gettable<T> = &t;\n     //~^ ERROR `T` cannot be sent between threads safely\n     //~| ERROR : std::marker::Copy` is not satisfied\n }\n \n fn foo<'a>() {\n     let t: S<&'a isize> = S(marker::PhantomData);\n-    let a = &t as &Gettable<&'a isize>;\n+    let a = &t as &dyn Gettable<&'a isize>;\n     //~^ ERROR does not fulfill\n }\n \n fn foo2<'a>() {\n     let t: Box<S<String>> = box S(marker::PhantomData);\n-    let a = t as Box<Gettable<String>>;\n+    let a = t as Box<dyn Gettable<String>>;\n     //~^ ERROR : std::marker::Copy` is not satisfied\n }\n \n fn foo3<'a>() {\n     struct Foo; // does not impl Copy\n \n     let t: Box<S<Foo>> = box S(marker::PhantomData);\n-    let a: Box<Gettable<Foo>> = t;\n+    let a: Box<dyn Gettable<Foo>> = t;\n     //~^ ERROR : std::marker::Copy` is not satisfied\n }\n "}, {"sha": "e6f7088bd46355b0b17fc73fb9e657a159de59ad", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL |     let a = &t as &Gettable<T>;\n+LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n@@ -12,29 +12,29 @@ LL |     let a = &t as &Gettable<T>;\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL |     let a = &t as &Gettable<T>;\n+LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:27\n+  --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ `T` cannot be sent between threads safely\n+LL |     let a: &dyn Gettable<T> = &t;\n+   |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:27\n+  --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ the trait `std::marker::Copy` is not implemented for `T`\n+LL |     let a: &dyn Gettable<T> = &t;\n+   |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n@@ -43,25 +43,25 @@ LL |     let a: &Gettable<T> = &t;\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n   --> $DIR/kindck-impl-type-params.rs:32:13\n    |\n-LL |     let a = &t as &Gettable<&'a isize>;\n+LL |     let a = &t as &dyn Gettable<&'a isize>;\n    |             ^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:38:13\n    |\n-LL |     let a = t as Box<Gettable<String>>;\n+LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required because of the requirements on the impl of `Gettable<std::string::String>` for `S<std::string::String>`\n    = note: required for the cast to the object type `dyn Gettable<std::string::String>`\n \n error[E0277]: the trait bound `foo3::Foo: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:33\n+  --> $DIR/kindck-impl-type-params.rs:46:37\n    |\n-LL |     let a: Box<Gettable<Foo>> = t;\n-   |                                 ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n+LL |     let a: Box<dyn Gettable<Foo>> = t;\n+   |                                     ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n    |\n    = note: required because of the requirements on the impl of `Gettable<foo3::Foo>` for `S<foo3::Foo>`\n    = note: required for the cast to the object type `dyn Gettable<foo3::Foo>`"}, {"sha": "61e72908248dff11c89f469bf4a7f6d7b14a596b", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -21,7 +21,7 @@ fn a() {\n fn b() {\n     let x: Box<_> = box 3;\n     let y = &x;\n-    let z = &x as &Foo;\n+    let z = &x as &dyn Foo;\n     //~^ ERROR E0038\n     //~| ERROR E0038\n }"}, {"sha": "1e719e2608425446c5e93bd73577c2e533f2939b", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -14,15 +14,15 @@ LL | fn take_param<T:Foo>(foo: &T) { }\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:24:19\n    |\n-LL |     let z = &x as &Foo;\n-   |                   ^^^^ the trait `Foo` cannot be made into an object\n+LL |     let z = &x as &dyn Foo;\n+   |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:24:13\n    |\n-LL |     let z = &x as &Foo;\n+LL |     let z = &x as &dyn Foo;\n    |             ^^ the trait `Foo` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`"}, {"sha": "6411e688b4aa6dcf6b2a33028b6d833168560abe", "filename": "src/test/ui/kindck/kindck-send-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,18 +9,18 @@ trait Message : Send { }\n // careful with object types, who knows what they close over...\n \n fn object_ref_with_static_bound_not_ok() {\n-    assert_send::<&'static (Dummy+'static)>();\n+    assert_send::<&'static (dyn Dummy + 'static)>();\n     //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>();\n+    assert_send::<Box<dyn Dummy>>();\n     //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n fn object_with_send_bound_ok() {\n-    assert_send::<&'static (Dummy+Sync)>();\n-    assert_send::<Box<Dummy+Send>>();\n+    assert_send::<&'static (dyn Dummy + Sync)>();\n+    assert_send::<Box<dyn Dummy + Send>>();\n }\n \n fn main() { }"}, {"sha": "c9aadd85a53f28cd0cddeee92ec7f9864a8ea5a4", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n-LL |     assert_send::<&'static (Dummy+'static)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'static (dyn Dummy + 'static)`\n@@ -15,8 +15,8 @@ LL | fn assert_send<T:Send>() { }\n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n-LL |     assert_send::<Box<Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+LL |     assert_send::<Box<dyn Dummy>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dyn Dummy>`"}, {"sha": "998dc90456f143283ee002bdb2d3d624fa8556dc", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n-LL |     assert_send::<&'a Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+LL |     assert_send::<&'a dyn Dummy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n@@ -15,8 +15,8 @@ LL | fn assert_send<T:Send+'static>() { }\n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n-LL |     assert_send::<Box<Dummy+'a>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+LL |     assert_send::<Box<dyn Dummy + 'a>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`"}, {"sha": "0e198395c26fbfd53116fa2c674f5bbe7f317bf5", "filename": "src/test/ui/kindck/kindck-send-object1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -7,26 +7,26 @@ trait Dummy { }\n \n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n-    assert_send::<&'a Dummy>();\n+    assert_send::<&'a dyn Dummy>();\n     //~^ ERROR `(dyn Dummy + 'a)` cannot be shared between threads safely [E0277]\n }\n fn test52<'a>() {\n-    assert_send::<&'a (Dummy+Sync)>();\n+    assert_send::<&'a (dyn Dummy + Sync)>();\n     //~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Sync)>();\n+    assert_send::<&'static (dyn Dummy + Sync)>();\n }\n fn test61() {\n-    assert_send::<Box<Dummy+Send>>();\n+    assert_send::<Box<dyn Dummy + Send>>();\n }\n \n // closure and object types can have lifetime bounds which make\n // them not ok\n fn test_71<'a>() {\n-    assert_send::<Box<Dummy+'a>>();\n+    assert_send::<Box<dyn Dummy + 'a>>();\n     //~^ ERROR `(dyn Dummy + 'a)` cannot be sent between threads safely\n }\n "}, {"sha": "757b41ab6cb7e44dadbc4fe3a54f39e52a66140f", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n-LL |     assert_send::<&'a Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+LL |     assert_send::<&'a dyn Dummy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n@@ -15,16 +15,16 @@ LL | fn assert_send<T:Send+'static>() { }\n error[E0477]: the type `&'a (dyn Dummy + std::marker::Sync + 'a)` does not fulfill the required lifetime\n   --> $DIR/kindck-send-object1.rs:14:5\n    |\n-LL |     assert_send::<&'a (Dummy+Sync)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     assert_send::<&'a (dyn Dummy + Sync)>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n-LL |     assert_send::<Box<Dummy+'a>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+LL |     assert_send::<Box<dyn Dummy + 'a>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`"}, {"sha": "b797588e446d635f17d4b3e18f62f8680b014f52", "filename": "src/test/ui/kindck/kindck-send-object2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -4,21 +4,21 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>();\n+    assert_send::<&'static dyn Dummy>();\n     //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>();\n+    assert_send::<Box<dyn Dummy>>();\n     //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Sync)>();\n+    assert_send::<&'static (dyn Dummy + Sync)>();\n }\n fn test61() {\n-    assert_send::<Box<Dummy+Send>>();\n+    assert_send::<Box<dyn Dummy + Send>>();\n }\n \n fn main() { }"}, {"sha": "c1c9db9da839ab541ed544fb5e4ed9095bd82658", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n-LL |     assert_send::<&'static Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+LL |     assert_send::<&'static dyn Dummy>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'static (dyn Dummy + 'static)`\n@@ -15,8 +15,8 @@ LL | fn assert_send<T:Send>() { }\n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n-LL |     assert_send::<Box<Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+LL |     assert_send::<Box<dyn Dummy>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dyn Dummy>`"}, {"sha": "f2cf19abdac31a6a92e573288920905df59b0d8e", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,7 +1,7 @@\n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n    |\n-LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |              - `x` is a reference that is only valid in the function body\n LL |     // but ref_obj will not, so warn.\n LL |     ref_obj(x)\n@@ -10,7 +10,7 @@ LL |     ref_obj(x)\n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n    |\n-LL | fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |                - `x` is a reference that is only valid in the function body\n LL |     // same as test2, but cross crate\n LL |     lib::ref_obj(x)"}, {"sha": "3c6d92234c4fa7e40906297b919e8361905bfcba", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,42 +9,42 @@\n \n extern crate lifetime_bound_will_change_warning_lib as lib;\n \n-fn just_ref(x: &Fn()) {\n+fn just_ref(x: &dyn Fn()) {\n }\n \n-fn ref_obj(x: &Box<Fn()>) {\n+fn ref_obj(x: &Box<dyn Fn()>) {\n     // this will change to &Box<Fn()+'static>...\n \n     // Note: no warning is issued here, because the type of `x` will change to 'static\n     if false { ref_obj(x); }\n }\n \n-fn test1<'a>(x: &'a Box<Fn()+'a>) {\n+fn test1<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // just_ref will stay the same.\n     just_ref(&**x)\n }\n \n-fn test1cc<'a>(x: &'a Box<Fn()+'a>) {\n+fn test1cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // same as test1, but cross-crate\n     lib::just_ref(&**x)\n }\n \n-fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // but ref_obj will not, so warn.\n     ref_obj(x) //~ ERROR mismatched types\n }\n \n-fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n     // same as test2, but cross crate\n     lib::ref_obj(x) //~ ERROR mismatched types\n }\n \n-fn test3<'a>(x: &'a Box<Fn()+'static>) {\n+fn test3<'a>(x: &'a Box<dyn Fn() + 'static>) {\n     // here, we have a 'static bound, so even when ref_obj changes, no error results\n     ref_obj(x)\n }\n \n-fn test3cc<'a>(x: &'a Box<Fn()+'static>) {\n+fn test3cc<'a>(x: &'a Box<dyn Fn() + 'static>) {\n     // same as test3, but cross crate\n     lib::ref_obj(x)\n }"}, {"sha": "35d63c172765112e11dc5578d9e559bc4d45269b", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -9,7 +9,7 @@ LL |     ref_obj(x)\n note: the lifetime 'a as defined on the function body at 32:10...\n   --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n    |\n-LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n@@ -24,7 +24,7 @@ LL |     lib::ref_obj(x)\n note: the lifetime 'a as defined on the function body at 37:12...\n   --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n    |\n-LL | fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n    |            ^^\n    = note: ...does not necessarily outlive the static lifetime\n "}, {"sha": "2370084b072c7c070b3667901d2e819fb004a5e6", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -5,7 +5,7 @@ trait Future {\n \n use std::error::Error;\n \n-fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n //~^ ERROR missing lifetime\n     Ok(())\n }"}, {"sha": "06b317ce95278fabf218a9e5a0fda986da1c6720", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n    |\n-LL | fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n-   |                                            ^^^^^ help: consider giving it a 'static lifetime: `Error + 'static`\n+LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n+   |                                            ^^^^^^^^^ help: consider giving it a 'static lifetime: `dyn Error + 'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "3c95be95db0801c7c8cbe91e7f39e762e189fe62", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,18 +1,18 @@\n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n    |\n-LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                              - help: consider changing this to be mutable: `mut y`\n+LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                                  - help: consider changing this to be mutable: `mut y`\n LL |   y.push(z);\n    |   ^ cannot borrow as mutable\n \n error: lifetime may not live long enough\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n    |\n-LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                                     -        - let's call the lifetime of this reference `'1`\n-   |                                     |\n-   |                                     let's call the lifetime of this reference `'2`\n+LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                                         -        - let's call the lifetime of this reference `'1`\n+   |                                         |\n+   |                                         let's call the lifetime of this reference `'2`\n LL |   y.push(z);\n    |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n "}, {"sha": "6625d41c7de2a7d78d6a0bb247071fd1069ce2f3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,4 +1,4 @@\n-fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n   y.push(z); //~ ERROR lifetime mismatch\n }\n "}, {"sha": "bfecb4d33931b4bd2cecd6bb6afdc56e54cb6199", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -1,8 +1,8 @@\n error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:10\n    |\n-LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                 ---  --- these two types are declared with different lifetimes...\n+LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                     ---  --- these two types are declared with different lifetimes...\n LL |   y.push(z);\n    |          ^ ...but data from `z` flows into `y` here\n "}, {"sha": "a3d9b6febdbb73601ab9831b870a3229fa3698de", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -51,7 +51,7 @@ extern {\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n-    pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n+    pub fn trait_type(p: &dyn Clone); //~ ERROR uses type `dyn std::clone::Clone`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields"}, {"sha": "03c18e4530b82dea2d588784fd916caefa5cb931", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -76,8 +76,8 @@ LL |     pub fn u128_type(p: u128);\n error: `extern` block uses type `dyn std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n   --> $DIR/lint-ctypes.rs:54:26\n    |\n-LL |     pub fn trait_type(p: &Clone);\n-   |                          ^^^^^^\n+LL |     pub fn trait_type(p: &dyn Clone);\n+   |                          ^^^^^^^^^^\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:55:26"}, {"sha": "4397522f3f32fd8274b1f223c057a7c0c848a5cb", "filename": "src/test/ui/lint/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-3.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -73,6 +73,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a: &inner::Trait = &1_isize;\n+    let a: &dyn inner::Trait = &1_isize;\n     a.f();\n }"}, {"sha": "53eee35a9ca24759cf67d6bde1b65ad530d37487", "filename": "src/test/ui/lint/lint-stability-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -148,7 +148,7 @@ mod cross_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated();\n         foo.trait_deprecated_text();\n         foo.trait_deprecated_unstable();\n@@ -373,7 +373,7 @@ mod this_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated();\n         foo.trait_deprecated_text();\n         foo.trait_unstable();"}, {"sha": "a2031c2189ae14c41237c3d07598fd485947d445", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -98,7 +98,7 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n         //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n-        type A = TraitWithAssociatedTypes<\n+        type A = dyn TraitWithAssociatedTypes<\n             TypeUnstable = u8,\n             TypeDeprecated = u16,\n             //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n@@ -170,7 +170,7 @@ mod cross_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated'\n         foo.trait_deprecated_text(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_text': text\n         foo.trait_deprecated_unstable(); //~ WARN use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable'\n@@ -423,7 +423,7 @@ mod this_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated'\n         foo.trait_deprecated_text(); //~ WARN use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n         foo.trait_unstable();"}, {"sha": "fde27eec7d3e882f87eba4965cdb9236e60c62d2", "filename": "src/test/ui/lint/lint-stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4580a570069175e1290b294d91042a09f9fde3/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.rs?ref=eb4580a570069175e1290b294d91042a09f9fde3", "patch": "@@ -88,7 +88,7 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         //~^ ERROR use of unstable library feature\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n-        type A = TraitWithAssociatedTypes<\n+        type A = dyn TraitWithAssociatedTypes<\n             TypeUnstable = u8, //~ ERROR use of unstable library feature\n             TypeDeprecated = u16,\n         >;\n@@ -161,7 +161,7 @@ mod cross_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated();\n         foo.trait_deprecated_text();\n         foo.trait_stable();\n@@ -414,7 +414,7 @@ mod this_crate {\n         <Foo as Trait>::trait_stable(&foo);\n     }\n \n-    fn test_method_object(foo: &Trait) {\n+    fn test_method_object(foo: &dyn Trait) {\n         foo.trait_deprecated();\n         foo.trait_deprecated_text();\n         foo.trait_unstable();"}]}