{"sha": "4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmQ1YzRhZTU3NmE2MjdjNzlhYjUyODA1MGIxYmJlMWM0Zjc4MTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-06T23:20:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-06T23:20:33Z"}, "message": "Merge pull request #2681 from topecongiro/issue-2680\n\nError on self_tests when there are lines that exceed max width", "tree": {"sha": "ca6b2af799f22941242ce77d274c8c8a1a987680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca6b2af799f22941242ce77d274c8c8a1a987680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa743BCRBK7hj4Ov3rIwAAdHIIAH9w7zzQFWo+0qDo4XnC4E0Z\nWjgFyc0JxHd0NBQdnnc9lWgMXKESq0v8q7reCbjgZBsBXJuVvhwyEG3dLdO9l2Oo\n4AWPXlRThP1usLRmsMXK5OQOHcehiyrAYFfszNxKRMq8dMf6aE5/LQ2B4FwQwNjr\nJMmf3WB/FgmROXHrKkQMrHqPEXLMWOwwm6joyrSIcqFivlBX+jpGsJ1j5LUnNIFM\n+jJfXatDr/SnFQ9C69YOufOA9TA/HlZXJ4oWgNHpJvevrosx//G1h4IM4kQbl7pL\nrjJJPLhiCfmHK1MDVbKOdWrZiKaVoJ88aBPbSHOVjSU/SbonQTK/uOvUV1ZVBCQ=\n=z7IR\n-----END PGP SIGNATURE-----\n", "payload": "tree ca6b2af799f22941242ce77d274c8c8a1a987680\nparent effba718b4a46811d7baba185129b2eb34b3f126\nparent 51c07f43353c269ce2790cad7398d9fa465da4a0\nauthor Nick Cameron <nrc@ncameron.org> 1525648833 +1200\ncommitter GitHub <noreply@github.com> 1525648833 +1200\n\nMerge pull request #2681 from topecongiro/issue-2680\n\nError on self_tests when there are lines that exceed max width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "html_url": "https://github.com/rust-lang/rust/commit/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effba718b4a46811d7baba185129b2eb34b3f126", "url": "https://api.github.com/repos/rust-lang/rust/commits/effba718b4a46811d7baba185129b2eb34b3f126", "html_url": "https://github.com/rust-lang/rust/commit/effba718b4a46811d7baba185129b2eb34b3f126"}, {"sha": "51c07f43353c269ce2790cad7398d9fa465da4a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/51c07f43353c269ce2790cad7398d9fa465da4a0", "html_url": "https://github.com/rust-lang/rust/commit/51c07f43353c269ce2790cad7398d9fa465da4a0"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "9b935b0a287f923382a41f47daf314a62100c7f7", "filename": "rustfmt.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -0,0 +1,2 @@\n+error_on_line_overflow = true\n+error_on_unformatted = true"}, {"sha": "f12d1864728df93e2a083993dc3cb190586b60f8", "filename": "src/config/config_type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -322,8 +322,9 @@ macro_rules! create_config {\n             ///\n             /// Returns the `Config` to use, and the path of the project file if there was\n             /// one.\n-            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), Error> {\n-\n+            pub(super) fn from_resolved_toml_path(\n+                dir: &Path,\n+            ) -> Result<(Config, Option<PathBuf>), Error> {\n                 /// Try to find a project file in the given directory and its parents.\n                 /// Returns the path of a the nearest project file if one exists,\n                 /// or `None` if no project file was found."}, {"sha": "382e7e7cc92488806eb75e46758cb8a6c305679f", "filename": "src/config/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -50,7 +50,8 @@ create_config! {\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, true, \"Convert /* */ comments to // comments where possible\";\n-    license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n+    license_template_path: String, String::default(), false,\n+        \"Beginning of file must match license template\";\n     format_strings: bool, false, false, \"Format string literals where necessary\";\n \n     // Single line expressions and items\n@@ -239,16 +240,21 @@ mod test {\n         create_config! {\n             // Options that are used by the generated functions\n             max_width: usize, 100, true, \"Maximum width of each line\";\n-            use_small_heuristics: bool, true, false, \"Whether to use different formatting for items and \\\n-                expressions if they satisfy a heuristic notion of 'small'.\";\n-            license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n-            required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false, \"Require a specific version of rustfmt.\";\n-            ignore: IgnoreList, IgnoreList::default(), false, \"Skip formatting the specified files and directories.\";\n+            use_small_heuristics: bool, true, false,\n+                \"Whether to use different formatting for items and \\\n+                 expressions if they satisfy a heuristic notion of 'small'.\";\n+            license_template_path: String, String::default(), false,\n+                \"Beginning of file must match license template\";\n+            required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n+                \"Require a specific version of rustfmt.\";\n+            ignore: IgnoreList, IgnoreList::default(), false,\n+                \"Skip formatting the specified files and directories.\";\n             verbose: bool, false, false, \"Use verbose output\";\n             file_lines: FileLines, FileLines::all(), false,\n                 \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n                     via the --file-lines option\";\n-            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false, \"'small' heuristic values\";\n+            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n+                \"'small' heuristic values\";\n \n             // Options that are used by the tests\n             stable_option: bool, false, true, \"A stable option\";"}, {"sha": "272acef2b3a3cb1fba5de0b5a06af9645694f471", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -191,7 +191,8 @@ configuration_option_enum! { WriteMode:\n     // Output the changed lines (for internal value only)\n     Modified,\n     // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n-    // This option is designed to be run in CI where a non-zero exit signifies non-standard code formatting.\n+    // This option is designed to be run in CI where a non-zero exit signifies non-standard code\n+    // formatting.\n     Check,\n     // Rustfmt shouldn't output anything formatting-like (e.g., emit a help message).\n     None,"}, {"sha": "e8bd331f96802719897a9d467ca8d34b4cb5fe62", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -116,7 +116,8 @@ pub(crate) type FileRecord = (FileName, String);\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     #[fail(\n-        display = \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n+        display = \"line formatted, but exceeded maximum width \\\n+                   (maximum: {} (see `max_width` option), found: {})\",\n         _0,\n         _1\n     )]"}, {"sha": "4c1b0baff12a2551a3497c16a5cbebb3e5fe60f4", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -1297,7 +1297,9 @@ impl MacroBranch {\n fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n     let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n-    let nested_shape = shape.block_indent(context.config.tab_spaces());\n+    let nested_shape = shape\n+        .block_indent(context.config.tab_spaces())\n+        .with_max_width(context.config);\n \n     result.push_str(\"lazy_static! {\");\n     result.push_str(&nested_shape.indent.to_string_with_newline(context.config));"}, {"sha": "06fd1e5a98f386e7a3a63a5bf620fab8319b96e8", "filename": "src/test/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbd5c4ae576a627c79ab528050b1bbe1c4f7813/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=4bbd5c4ae576a627c79ab528050b1bbe1c4f7813", "patch": "@@ -111,7 +111,7 @@ fn write_message(msg: &str) {\n fn system_tests() {\n     // Get all files in the tests/source directory.\n     let files = get_test_files(Path::new(\"tests/source\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -123,7 +123,7 @@ fn system_tests() {\n #[test]\n fn coverage_tests() {\n     let files = get_test_files(Path::new(\"tests/coverage/source\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     println!(\"Ran {} tests in coverage mode.\", count);\n     assert_eq!(fails, 0, \"{} tests failed\", fails);\n@@ -192,7 +192,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n fn idempotence_tests() {\n     // Get all files in the tests/target directory.\n     let files = get_test_files(Path::new(\"tests/target\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -213,7 +213,7 @@ fn self_tests() {\n     }\n     files.push(PathBuf::from(\"src/lib.rs\"));\n \n-    let (reports, count, fails) = check_files(files);\n+    let (reports, count, fails) = check_files(files, Some(PathBuf::from(\"rustfmt.toml\")));\n     let mut warnings = 0;\n \n     // Display results.\n@@ -298,15 +298,15 @@ fn format_lines_errors_are_reported_with_tabs() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files(files: Vec<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n+fn check_files(files: Vec<PathBuf>, opt_config: Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n     let mut count = 0;\n     let mut fails = 0;\n     let mut reports = vec![];\n \n     for file_name in files {\n         debug!(\"Testing '{}'...\", file_name.display());\n \n-        match idempotent_check(&file_name) {\n+        match idempotent_check(&file_name, &opt_config) {\n             Ok(ref report) if report.has_warnings() => {\n                 print!(\"{}\", report);\n                 fails += 1;\n@@ -385,9 +385,16 @@ pub enum IdempotentCheckError {\n     Parse,\n }\n \n-pub fn idempotent_check(filename: &PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n+pub fn idempotent_check(\n+    filename: &PathBuf,\n+    opt_config: &Option<PathBuf>,\n+) -> Result<FormatReport, IdempotentCheckError> {\n     let sig_comments = read_significant_comments(filename);\n-    let config = read_config(filename);\n+    let config = if let Some(ref config_file_path) = opt_config {\n+        Config::from_toml_path(config_file_path).expect(\"rustfmt.toml not found\")\n+    } else {\n+        read_config(filename)\n+    };\n     let (error_summary, file_map, format_report) = format_file(filename, &config);\n     if error_summary.has_parsing_errors() {\n         return Err(IdempotentCheckError::Parse);\n@@ -611,8 +618,9 @@ impl ConfigurationSection {\n         lazy_static! {\n             static ref CONFIG_NAME_REGEX: regex::Regex =\n                 regex::Regex::new(r\"^## `([^`]+)`\").expect(\"Failed creating configuration pattern\");\n-            static ref CONFIG_VALUE_REGEX: regex::Regex = regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n-                .expect(\"Failed creating configuration value pattern\");\n+            static ref CONFIG_VALUE_REGEX: regex::Regex =\n+                regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+                    .expect(\"Failed creating configuration value pattern\");\n         }\n \n         loop {"}]}