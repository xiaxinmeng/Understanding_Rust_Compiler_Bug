{"sha": "40f36fac49e29c9bbf5ed5e3aee03781edb045cb", "node_id": "C_kwDOAAsO6NoAKDQwZjM2ZmFjNDllMjljOWJiZjVlZDVlM2FlZTAzNzgxZWRiMDQ1Y2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-07T16:52:41Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:07:21Z"}, "message": "adopt to new rustc lint api", "tree": {"sha": "31d7be510b1b150609a3110752fe3542b4e8fad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d7be510b1b150609a3110752fe3542b4e8fad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40f36fac49e29c9bbf5ed5e3aee03781edb045cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40f36fac49e29c9bbf5ed5e3aee03781edb045cb", "html_url": "https://github.com/rust-lang/rust/commit/40f36fac49e29c9bbf5ed5e3aee03781edb045cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40f36fac49e29c9bbf5ed5e3aee03781edb045cb/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e", "html_url": "https://github.com/rust-lang/rust/commit/7434b9f0d1e1587dc97829ffbc65a5afdf04fb7e"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "4f0ae08116611a7d0a127de75f30fc3e1af016a2", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/40f36fac49e29c9bbf5ed5e3aee03781edb045cb/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f36fac49e29c9bbf5ed5e3aee03781edb045cb/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=40f36fac49e29c9bbf5ed5e3aee03781edb045cb", "patch": "@@ -1,7 +1,7 @@\n use crate::{LateContext, LateLintPass, LintContext};\n \n use hir::{Expr, Pat};\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, DelayDm};\n use rustc_hir as hir;\n use rustc_infer::traits::TraitEngine;\n use rustc_infer::{infer::TyCtxtInferExt, traits::ObligationCause};\n@@ -55,24 +55,24 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n             _ => return,\n         };\n \n-        let msg = format!(\n-            \"for loop over {article} `{ty}`. This is more readably written as an `if let` statement\",\n-        );\n-\n-        cx.struct_span_lint(FOR_LOOPS_OVER_FALLIBLES, arg.span, |diag| {\n-            let mut warn = diag.build(msg);\n+        let msg = DelayDm(|| {\n+            format!(\n+                \"for loop over {article} `{ty}`. This is more readably written as an `if let` statement\",\n+            )\n+        });\n \n+        cx.struct_span_lint(FOR_LOOPS_OVER_FALLIBLES, arg.span, msg, |lint| {\n             if let Some(recv) = extract_iterator_next_call(cx, arg)\n             && let Ok(recv_snip) = cx.sess().source_map().span_to_snippet(recv.span)\n             {\n-                warn.span_suggestion(\n+                lint.span_suggestion(\n                     recv.span.between(arg.span.shrink_to_hi()),\n                     format!(\"to iterate over `{recv_snip}` remove the call to `next`\"),\n                     \".by_ref()\",\n                     Applicability::MaybeIncorrect\n                 );\n             } else {\n-                warn.multipart_suggestion_verbose(\n+                lint.multipart_suggestion_verbose(\n                     format!(\"to check pattern in a loop use `while let`\"),\n                     vec![\n                         // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n@@ -84,25 +84,23 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n             }\n \n             if suggest_question_mark(cx, adt, substs, expr.span) {\n-                warn.span_suggestion(\n+                lint.span_suggestion(\n                     arg.span.shrink_to_hi(),\n                     \"consider unwrapping the `Result` with `?` to iterate over its contents\",\n                     \"?\",\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n \n-            warn.multipart_suggestion_verbose(\n+            lint.multipart_suggestion_verbose(\n                 \"consider using `if let` to clear intent\",\n                 vec![\n                     // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n                     (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n                     (pat.span.between(arg.span), format!(\") = \")),\n                 ],\n                 Applicability::MaybeIncorrect,\n-            );\n-\n-            warn.emit()\n+            )\n         })\n     }\n }\n@@ -128,7 +126,7 @@ fn extract_iterator_next_call<'tcx>(\n     expr: &Expr<'tcx>,\n ) -> Option<&'tcx Expr<'tcx>> {\n     // This won't work for `Iterator::next(iter)`, is this an issue?\n-    if let hir::ExprKind::MethodCall(_, [recv], _) = expr.kind\n+    if let hir::ExprKind::MethodCall(_, recv, _, _) = expr.kind\n     && cx.typeck_results().type_dependent_def_id(expr.hir_id) == cx.tcx.lang_items().next_fn()\n     {\n         Some(recv)"}]}